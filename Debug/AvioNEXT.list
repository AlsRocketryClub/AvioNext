
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bdb4  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008ec  0801c084  0801c084  0002c084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801c970  0801c970  0002c970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801c978  0801c978  0002c978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801c97c  0801c97c  0002c97c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000250  24000000  0801c980  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005a30  24000250  0801cbd0  00030250  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  24005c80  0801cbd0  00035c80  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0003027e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003a289  00000000  00000000  000302c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00006f48  00000000  00000000  0006a54a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002e38  00000000  00000000  00071498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000023da  00000000  00000000  000742d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0000be82  00000000  00000000  000766aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00042693  00000000  00000000  0008252c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017f49f  00000000  00000000  000c4bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000d050  00000000  00000000  00244060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  002510b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000250 	.word	0x24000250
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801c06c 	.word	0x0801c06c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000254 	.word	0x24000254
 800030c:	0801c06c 	.word	0x0801c06c

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b970 	b.w	80006d8 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9e08      	ldr	r6, [sp, #32]
 8000416:	460d      	mov	r5, r1
 8000418:	4604      	mov	r4, r0
 800041a:	460f      	mov	r7, r1
 800041c:	2b00      	cmp	r3, #0
 800041e:	d14a      	bne.n	80004b6 <__udivmoddi4+0xa6>
 8000420:	428a      	cmp	r2, r1
 8000422:	4694      	mov	ip, r2
 8000424:	d965      	bls.n	80004f2 <__udivmoddi4+0xe2>
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	b143      	cbz	r3, 800043e <__udivmoddi4+0x2e>
 800042c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000430:	f1c3 0220 	rsb	r2, r3, #32
 8000434:	409f      	lsls	r7, r3
 8000436:	fa20 f202 	lsr.w	r2, r0, r2
 800043a:	4317      	orrs	r7, r2
 800043c:	409c      	lsls	r4, r3
 800043e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000442:	fa1f f58c 	uxth.w	r5, ip
 8000446:	fbb7 f1fe 	udiv	r1, r7, lr
 800044a:	0c22      	lsrs	r2, r4, #16
 800044c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000450:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000454:	fb01 f005 	mul.w	r0, r1, r5
 8000458:	4290      	cmp	r0, r2
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x62>
 800045c:	eb1c 0202 	adds.w	r2, ip, r2
 8000460:	f101 37ff 	add.w	r7, r1, #4294967295
 8000464:	f080 811c 	bcs.w	80006a0 <__udivmoddi4+0x290>
 8000468:	4290      	cmp	r0, r2
 800046a:	f240 8119 	bls.w	80006a0 <__udivmoddi4+0x290>
 800046e:	3902      	subs	r1, #2
 8000470:	4462      	add	r2, ip
 8000472:	1a12      	subs	r2, r2, r0
 8000474:	b2a4      	uxth	r4, r4
 8000476:	fbb2 f0fe 	udiv	r0, r2, lr
 800047a:	fb0e 2210 	mls	r2, lr, r0, r2
 800047e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000482:	fb00 f505 	mul.w	r5, r0, r5
 8000486:	42a5      	cmp	r5, r4
 8000488:	d90a      	bls.n	80004a0 <__udivmoddi4+0x90>
 800048a:	eb1c 0404 	adds.w	r4, ip, r4
 800048e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000492:	f080 8107 	bcs.w	80006a4 <__udivmoddi4+0x294>
 8000496:	42a5      	cmp	r5, r4
 8000498:	f240 8104 	bls.w	80006a4 <__udivmoddi4+0x294>
 800049c:	4464      	add	r4, ip
 800049e:	3802      	subs	r0, #2
 80004a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80004a4:	1b64      	subs	r4, r4, r5
 80004a6:	2100      	movs	r1, #0
 80004a8:	b11e      	cbz	r6, 80004b2 <__udivmoddi4+0xa2>
 80004aa:	40dc      	lsrs	r4, r3
 80004ac:	2300      	movs	r3, #0
 80004ae:	e9c6 4300 	strd	r4, r3, [r6]
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0xbc>
 80004ba:	2e00      	cmp	r6, #0
 80004bc:	f000 80ed 	beq.w	800069a <__udivmoddi4+0x28a>
 80004c0:	2100      	movs	r1, #0
 80004c2:	e9c6 0500 	strd	r0, r5, [r6]
 80004c6:	4608      	mov	r0, r1
 80004c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004cc:	fab3 f183 	clz	r1, r3
 80004d0:	2900      	cmp	r1, #0
 80004d2:	d149      	bne.n	8000568 <__udivmoddi4+0x158>
 80004d4:	42ab      	cmp	r3, r5
 80004d6:	d302      	bcc.n	80004de <__udivmoddi4+0xce>
 80004d8:	4282      	cmp	r2, r0
 80004da:	f200 80f8 	bhi.w	80006ce <__udivmoddi4+0x2be>
 80004de:	1a84      	subs	r4, r0, r2
 80004e0:	eb65 0203 	sbc.w	r2, r5, r3
 80004e4:	2001      	movs	r0, #1
 80004e6:	4617      	mov	r7, r2
 80004e8:	2e00      	cmp	r6, #0
 80004ea:	d0e2      	beq.n	80004b2 <__udivmoddi4+0xa2>
 80004ec:	e9c6 4700 	strd	r4, r7, [r6]
 80004f0:	e7df      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004f2:	b902      	cbnz	r2, 80004f6 <__udivmoddi4+0xe6>
 80004f4:	deff      	udf	#255	; 0xff
 80004f6:	fab2 f382 	clz	r3, r2
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	f040 8090 	bne.w	8000620 <__udivmoddi4+0x210>
 8000500:	1a8a      	subs	r2, r1, r2
 8000502:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000506:	fa1f fe8c 	uxth.w	lr, ip
 800050a:	2101      	movs	r1, #1
 800050c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000510:	fb07 2015 	mls	r0, r7, r5, r2
 8000514:	0c22      	lsrs	r2, r4, #16
 8000516:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800051a:	fb0e f005 	mul.w	r0, lr, r5
 800051e:	4290      	cmp	r0, r2
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x124>
 8000522:	eb1c 0202 	adds.w	r2, ip, r2
 8000526:	f105 38ff 	add.w	r8, r5, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x122>
 800052c:	4290      	cmp	r0, r2
 800052e:	f200 80cb 	bhi.w	80006c8 <__udivmoddi4+0x2b8>
 8000532:	4645      	mov	r5, r8
 8000534:	1a12      	subs	r2, r2, r0
 8000536:	b2a4      	uxth	r4, r4
 8000538:	fbb2 f0f7 	udiv	r0, r2, r7
 800053c:	fb07 2210 	mls	r2, r7, r0, r2
 8000540:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000544:	fb0e fe00 	mul.w	lr, lr, r0
 8000548:	45a6      	cmp	lr, r4
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x14e>
 800054c:	eb1c 0404 	adds.w	r4, ip, r4
 8000550:	f100 32ff 	add.w	r2, r0, #4294967295
 8000554:	d202      	bcs.n	800055c <__udivmoddi4+0x14c>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f200 80bb 	bhi.w	80006d2 <__udivmoddi4+0x2c2>
 800055c:	4610      	mov	r0, r2
 800055e:	eba4 040e 	sub.w	r4, r4, lr
 8000562:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000566:	e79f      	b.n	80004a8 <__udivmoddi4+0x98>
 8000568:	f1c1 0720 	rsb	r7, r1, #32
 800056c:	408b      	lsls	r3, r1
 800056e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000572:	ea4c 0c03 	orr.w	ip, ip, r3
 8000576:	fa05 f401 	lsl.w	r4, r5, r1
 800057a:	fa20 f307 	lsr.w	r3, r0, r7
 800057e:	40fd      	lsrs	r5, r7
 8000580:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000584:	4323      	orrs	r3, r4
 8000586:	fbb5 f8f9 	udiv	r8, r5, r9
 800058a:	fa1f fe8c 	uxth.w	lr, ip
 800058e:	fb09 5518 	mls	r5, r9, r8, r5
 8000592:	0c1c      	lsrs	r4, r3, #16
 8000594:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000598:	fb08 f50e 	mul.w	r5, r8, lr
 800059c:	42a5      	cmp	r5, r4
 800059e:	fa02 f201 	lsl.w	r2, r2, r1
 80005a2:	fa00 f001 	lsl.w	r0, r0, r1
 80005a6:	d90b      	bls.n	80005c0 <__udivmoddi4+0x1b0>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80005b0:	f080 8088 	bcs.w	80006c4 <__udivmoddi4+0x2b4>
 80005b4:	42a5      	cmp	r5, r4
 80005b6:	f240 8085 	bls.w	80006c4 <__udivmoddi4+0x2b4>
 80005ba:	f1a8 0802 	sub.w	r8, r8, #2
 80005be:	4464      	add	r4, ip
 80005c0:	1b64      	subs	r4, r4, r5
 80005c2:	b29d      	uxth	r5, r3
 80005c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80005c8:	fb09 4413 	mls	r4, r9, r3, r4
 80005cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005d4:	45a6      	cmp	lr, r4
 80005d6:	d908      	bls.n	80005ea <__udivmoddi4+0x1da>
 80005d8:	eb1c 0404 	adds.w	r4, ip, r4
 80005dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80005e0:	d26c      	bcs.n	80006bc <__udivmoddi4+0x2ac>
 80005e2:	45a6      	cmp	lr, r4
 80005e4:	d96a      	bls.n	80006bc <__udivmoddi4+0x2ac>
 80005e6:	3b02      	subs	r3, #2
 80005e8:	4464      	add	r4, ip
 80005ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ee:	fba3 9502 	umull	r9, r5, r3, r2
 80005f2:	eba4 040e 	sub.w	r4, r4, lr
 80005f6:	42ac      	cmp	r4, r5
 80005f8:	46c8      	mov	r8, r9
 80005fa:	46ae      	mov	lr, r5
 80005fc:	d356      	bcc.n	80006ac <__udivmoddi4+0x29c>
 80005fe:	d053      	beq.n	80006a8 <__udivmoddi4+0x298>
 8000600:	b156      	cbz	r6, 8000618 <__udivmoddi4+0x208>
 8000602:	ebb0 0208 	subs.w	r2, r0, r8
 8000606:	eb64 040e 	sbc.w	r4, r4, lr
 800060a:	fa04 f707 	lsl.w	r7, r4, r7
 800060e:	40ca      	lsrs	r2, r1
 8000610:	40cc      	lsrs	r4, r1
 8000612:	4317      	orrs	r7, r2
 8000614:	e9c6 7400 	strd	r7, r4, [r6]
 8000618:	4618      	mov	r0, r3
 800061a:	2100      	movs	r1, #0
 800061c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000620:	f1c3 0120 	rsb	r1, r3, #32
 8000624:	fa02 fc03 	lsl.w	ip, r2, r3
 8000628:	fa20 f201 	lsr.w	r2, r0, r1
 800062c:	fa25 f101 	lsr.w	r1, r5, r1
 8000630:	409d      	lsls	r5, r3
 8000632:	432a      	orrs	r2, r5
 8000634:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000638:	fa1f fe8c 	uxth.w	lr, ip
 800063c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000640:	fb07 1510 	mls	r5, r7, r0, r1
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800064a:	fb00 f50e 	mul.w	r5, r0, lr
 800064e:	428d      	cmp	r5, r1
 8000650:	fa04 f403 	lsl.w	r4, r4, r3
 8000654:	d908      	bls.n	8000668 <__udivmoddi4+0x258>
 8000656:	eb1c 0101 	adds.w	r1, ip, r1
 800065a:	f100 38ff 	add.w	r8, r0, #4294967295
 800065e:	d22f      	bcs.n	80006c0 <__udivmoddi4+0x2b0>
 8000660:	428d      	cmp	r5, r1
 8000662:	d92d      	bls.n	80006c0 <__udivmoddi4+0x2b0>
 8000664:	3802      	subs	r0, #2
 8000666:	4461      	add	r1, ip
 8000668:	1b49      	subs	r1, r1, r5
 800066a:	b292      	uxth	r2, r2
 800066c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000670:	fb07 1115 	mls	r1, r7, r5, r1
 8000674:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000678:	fb05 f10e 	mul.w	r1, r5, lr
 800067c:	4291      	cmp	r1, r2
 800067e:	d908      	bls.n	8000692 <__udivmoddi4+0x282>
 8000680:	eb1c 0202 	adds.w	r2, ip, r2
 8000684:	f105 38ff 	add.w	r8, r5, #4294967295
 8000688:	d216      	bcs.n	80006b8 <__udivmoddi4+0x2a8>
 800068a:	4291      	cmp	r1, r2
 800068c:	d914      	bls.n	80006b8 <__udivmoddi4+0x2a8>
 800068e:	3d02      	subs	r5, #2
 8000690:	4462      	add	r2, ip
 8000692:	1a52      	subs	r2, r2, r1
 8000694:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000698:	e738      	b.n	800050c <__udivmoddi4+0xfc>
 800069a:	4631      	mov	r1, r6
 800069c:	4630      	mov	r0, r6
 800069e:	e708      	b.n	80004b2 <__udivmoddi4+0xa2>
 80006a0:	4639      	mov	r1, r7
 80006a2:	e6e6      	b.n	8000472 <__udivmoddi4+0x62>
 80006a4:	4610      	mov	r0, r2
 80006a6:	e6fb      	b.n	80004a0 <__udivmoddi4+0x90>
 80006a8:	4548      	cmp	r0, r9
 80006aa:	d2a9      	bcs.n	8000600 <__udivmoddi4+0x1f0>
 80006ac:	ebb9 0802 	subs.w	r8, r9, r2
 80006b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80006b4:	3b01      	subs	r3, #1
 80006b6:	e7a3      	b.n	8000600 <__udivmoddi4+0x1f0>
 80006b8:	4645      	mov	r5, r8
 80006ba:	e7ea      	b.n	8000692 <__udivmoddi4+0x282>
 80006bc:	462b      	mov	r3, r5
 80006be:	e794      	b.n	80005ea <__udivmoddi4+0x1da>
 80006c0:	4640      	mov	r0, r8
 80006c2:	e7d1      	b.n	8000668 <__udivmoddi4+0x258>
 80006c4:	46d0      	mov	r8, sl
 80006c6:	e77b      	b.n	80005c0 <__udivmoddi4+0x1b0>
 80006c8:	3d02      	subs	r5, #2
 80006ca:	4462      	add	r2, ip
 80006cc:	e732      	b.n	8000534 <__udivmoddi4+0x124>
 80006ce:	4608      	mov	r0, r1
 80006d0:	e70a      	b.n	80004e8 <__udivmoddi4+0xd8>
 80006d2:	4464      	add	r4, ip
 80006d4:	3802      	subs	r0, #2
 80006d6:	e742      	b.n	800055e <__udivmoddi4+0x14e>

080006d8 <__aeabi_idiv0>:
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop

080006dc <LoRA_Read_Register>:
#define RSSI_OFFSET_HF_PORT      157
#define RSSI_OFFSET_LF_PORT      164

#define MAX_PKT_LENGTH           255

uint8_t LoRA_Read_Register(uint8_t addr){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ec:	480d      	ldr	r0, [pc, #52]	; (8000724 <LoRA_Read_Register+0x48>)
 80006ee:	f008 fa03 	bl	8008af8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 80006f2:	1df9      	adds	r1, r7, #7
 80006f4:	2364      	movs	r3, #100	; 0x64
 80006f6:	2201      	movs	r2, #1
 80006f8:	480b      	ldr	r0, [pc, #44]	; (8000728 <LoRA_Read_Register+0x4c>)
 80006fa:	f00f f947 	bl	800f98c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 80006fe:	f107 010f 	add.w	r1, r7, #15
 8000702:	2364      	movs	r3, #100	; 0x64
 8000704:	2201      	movs	r2, #1
 8000706:	4808      	ldr	r0, [pc, #32]	; (8000728 <LoRA_Read_Register+0x4c>)
 8000708:	f00f fb3c 	bl	800fd84 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 800070c:	2201      	movs	r2, #1
 800070e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000712:	4804      	ldr	r0, [pc, #16]	; (8000724 <LoRA_Read_Register+0x48>)
 8000714:	f008 f9f0 	bl	8008af8 <HAL_GPIO_WritePin>

	return reg_value;
 8000718:	7bfb      	ldrb	r3, [r7, #15]
}
 800071a:	4618      	mov	r0, r3
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	58020000 	.word	0x58020000
 8000728:	24001044 	.word	0x24001044

0800072c <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data){
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	460a      	mov	r2, r1
 8000736:	71fb      	strb	r3, [r7, #7]
 8000738:	4613      	mov	r3, r2
 800073a:	71bb      	strb	r3, [r7, #6]
	addr |= (1<<7);
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000742:	b2db      	uxtb	r3, r3
 8000744:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000746:	2200      	movs	r2, #0
 8000748:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800074c:	480c      	ldr	r0, [pc, #48]	; (8000780 <LoRA_Write_Register+0x54>)
 800074e:	f008 f9d3 	bl	8008af8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000752:	1df9      	adds	r1, r7, #7
 8000754:	2364      	movs	r3, #100	; 0x64
 8000756:	2201      	movs	r2, #1
 8000758:	480a      	ldr	r0, [pc, #40]	; (8000784 <LoRA_Write_Register+0x58>)
 800075a:	f00f f917 	bl	800f98c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 800075e:	1db9      	adds	r1, r7, #6
 8000760:	2364      	movs	r3, #100	; 0x64
 8000762:	2201      	movs	r2, #1
 8000764:	4807      	ldr	r0, [pc, #28]	; (8000784 <LoRA_Write_Register+0x58>)
 8000766:	f00f f911 	bl	800f98c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 800076a:	2201      	movs	r2, #1
 800076c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000770:	4803      	ldr	r0, [pc, #12]	; (8000780 <LoRA_Write_Register+0x54>)
 8000772:	f008 f9c1 	bl	8008af8 <HAL_GPIO_WritePin>

}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	58020000 	.word	0x58020000
 8000784:	24001044 	.word	0x24001044

08000788 <LoRA_sleep>:


void LoRA_sleep(void){
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 800078c:	2180      	movs	r1, #128	; 0x80
 800078e:	2001      	movs	r0, #1
 8000790:	f7ff ffcc 	bl	800072c <LoRA_Write_Register>
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}

08000798 <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency){
 8000798:	b5b0      	push	{r4, r5, r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 80007a0:	6879      	ldr	r1, [r7, #4]
 80007a2:	17c8      	asrs	r0, r1, #31
 80007a4:	460a      	mov	r2, r1
 80007a6:	4603      	mov	r3, r0
 80007a8:	1355      	asrs	r5, r2, #13
 80007aa:	04d4      	lsls	r4, r2, #19
 80007ac:	4a18      	ldr	r2, [pc, #96]	; (8000810 <LoRA_set_frequency+0x78>)
 80007ae:	f04f 0300 	mov.w	r3, #0
 80007b2:	4620      	mov	r0, r4
 80007b4:	4629      	mov	r1, r5
 80007b6:	f7ff fe13 	bl	80003e0 <__aeabi_uldivmod>
 80007ba:	4602      	mov	r2, r0
 80007bc:	460b      	mov	r3, r1
 80007be:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t)(frf >> 16));
 80007c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80007c6:	f04f 0200 	mov.w	r2, #0
 80007ca:	f04f 0300 	mov.w	r3, #0
 80007ce:	0c02      	lsrs	r2, r0, #16
 80007d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80007d4:	0c0b      	lsrs	r3, r1, #16
 80007d6:	b2d3      	uxtb	r3, r2
 80007d8:	4619      	mov	r1, r3
 80007da:	2006      	movs	r0, #6
 80007dc:	f7ff ffa6 	bl	800072c <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t)(frf >> 8));
 80007e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80007e4:	f04f 0200 	mov.w	r2, #0
 80007e8:	f04f 0300 	mov.w	r3, #0
 80007ec:	0a02      	lsrs	r2, r0, #8
 80007ee:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80007f2:	0a0b      	lsrs	r3, r1, #8
 80007f4:	b2d3      	uxtb	r3, r2
 80007f6:	4619      	mov	r1, r3
 80007f8:	2007      	movs	r0, #7
 80007fa:	f7ff ff97 	bl	800072c <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t)(frf >> 0));
 80007fe:	7a3b      	ldrb	r3, [r7, #8]
 8000800:	4619      	mov	r1, r3
 8000802:	2008      	movs	r0, #8
 8000804:	f7ff ff92 	bl	800072c <LoRA_Write_Register>
}
 8000808:	bf00      	nop
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bdb0      	pop	{r4, r5, r7, pc}
 8000810:	01e84800 	.word	0x01e84800

08000814 <LoRA_idle>:

void LoRA_idle(){
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8000818:	2181      	movs	r1, #129	; 0x81
 800081a:	2001      	movs	r0, #1
 800081c:	f7ff ff86 	bl	800072c <LoRA_Write_Register>
}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}

08000824 <LoRA_setOCP>:

void LoRA_setOCP(uint8_t mA){
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
	  uint8_t ocpTrim = 27;
 800082e:	231b      	movs	r3, #27
 8000830:	73fb      	strb	r3, [r7, #15]

	  if (mA <= 120) {
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	2b78      	cmp	r3, #120	; 0x78
 8000836:	d809      	bhi.n	800084c <LoRA_setOCP+0x28>
	    ocpTrim = (mA - 45) / 5;
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	3b2d      	subs	r3, #45	; 0x2d
 800083c:	4a11      	ldr	r2, [pc, #68]	; (8000884 <LoRA_setOCP+0x60>)
 800083e:	fb82 1203 	smull	r1, r2, r2, r3
 8000842:	1052      	asrs	r2, r2, #1
 8000844:	17db      	asrs	r3, r3, #31
 8000846:	1ad3      	subs	r3, r2, r3
 8000848:	73fb      	strb	r3, [r7, #15]
 800084a:	e00b      	b.n	8000864 <LoRA_setOCP+0x40>
	  } else if (mA <=240) {
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	2bf0      	cmp	r3, #240	; 0xf0
 8000850:	d808      	bhi.n	8000864 <LoRA_setOCP+0x40>
	    ocpTrim = (mA + 30) / 10;
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	331e      	adds	r3, #30
 8000856:	4a0b      	ldr	r2, [pc, #44]	; (8000884 <LoRA_setOCP+0x60>)
 8000858:	fb82 1203 	smull	r1, r2, r2, r3
 800085c:	1092      	asrs	r2, r2, #2
 800085e:	17db      	asrs	r3, r3, #31
 8000860:	1ad3      	subs	r3, r2, r3
 8000862:	73fb      	strb	r3, [r7, #15]
	  }

	  LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8000864:	7bfb      	ldrb	r3, [r7, #15]
 8000866:	f003 031f 	and.w	r3, r3, #31
 800086a:	b2db      	uxtb	r3, r3
 800086c:	f043 0320 	orr.w	r3, r3, #32
 8000870:	b2db      	uxtb	r3, r3
 8000872:	4619      	mov	r1, r3
 8000874:	200b      	movs	r0, #11
 8000876:	f7ff ff59 	bl	800072c <LoRA_Write_Register>
}
 800087a:	bf00      	nop
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	66666667 	.word	0x66666667

08000888 <LoRA_setTxPower>:

void LoRA_setTxPower(int level){
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
    // PA BOOST
    if (level > 17) {
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2b11      	cmp	r3, #17
 8000894:	dd0f      	ble.n	80008b6 <LoRA_setTxPower+0x2e>
      if (level > 20) {
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2b14      	cmp	r3, #20
 800089a:	dd01      	ble.n	80008a0 <LoRA_setTxPower+0x18>
        level = 20;
 800089c:	2314      	movs	r3, #20
 800089e:	607b      	str	r3, [r7, #4]
      }

      // subtract 3 from level, so 18 - 20 maps to 15 - 17
      level -= 3;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3b03      	subs	r3, #3
 80008a4:	607b      	str	r3, [r7, #4]

      // High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
      LoRA_Write_Register(REG_PA_DAC, 0x87);
 80008a6:	2187      	movs	r1, #135	; 0x87
 80008a8:	204d      	movs	r0, #77	; 0x4d
 80008aa:	f7ff ff3f 	bl	800072c <LoRA_Write_Register>
      LoRA_setOCP(140);
 80008ae:	208c      	movs	r0, #140	; 0x8c
 80008b0:	f7ff ffb8 	bl	8000824 <LoRA_setOCP>
 80008b4:	e00b      	b.n	80008ce <LoRA_setTxPower+0x46>
    } else {
      if (level < 2) {
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	dc01      	bgt.n	80008c0 <LoRA_setTxPower+0x38>
        level = 2;
 80008bc:	2302      	movs	r3, #2
 80008be:	607b      	str	r3, [r7, #4]
      }
      //Default value PA_HF/LF or +17dBm
      LoRA_Write_Register(REG_PA_DAC, 0x84);
 80008c0:	2184      	movs	r1, #132	; 0x84
 80008c2:	204d      	movs	r0, #77	; 0x4d
 80008c4:	f7ff ff32 	bl	800072c <LoRA_Write_Register>
      LoRA_setOCP(100);
 80008c8:	2064      	movs	r0, #100	; 0x64
 80008ca:	f7ff ffab 	bl	8000824 <LoRA_setOCP>
    }

    LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	3b02      	subs	r3, #2
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	b25b      	sxtb	r3, r3
 80008d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008dc:	b25b      	sxtb	r3, r3
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	4619      	mov	r1, r3
 80008e2:	2009      	movs	r0, #9
 80008e4:	f7ff ff22 	bl	800072c <LoRA_Write_Register>
}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode(){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1, LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 80008f4:	201d      	movs	r0, #29
 80008f6:	f7ff fef1 	bl	80006dc <LoRA_Read_Register>
 80008fa:	4603      	mov	r3, r0
 80008fc:	f023 0301 	bic.w	r3, r3, #1
 8000900:	b2db      	uxtb	r3, r3
 8000902:	4619      	mov	r1, r3
 8000904:	201d      	movs	r0, #29
 8000906:	f7ff ff11 	bl	800072c <LoRA_Write_Register>
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <LoRA_begin>:

void LoRA_begin(long frequency){
 8000910:	b580      	push	{r7, lr}
 8000912:	b09c      	sub	sp, #112	; 0x70
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8000918:	2201      	movs	r2, #1
 800091a:	2101      	movs	r1, #1
 800091c:	4822      	ldr	r0, [pc, #136]	; (80009a8 <LoRA_begin+0x98>)
 800091e:	f008 f8eb 	bl	8008af8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000922:	2201      	movs	r2, #1
 8000924:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000928:	4820      	ldr	r0, [pc, #128]	; (80009ac <LoRA_begin+0x9c>)
 800092a:	f008 f8e5 	bl	8008af8 <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 800092e:	2042      	movs	r0, #66	; 0x42
 8000930:	f7ff fed4 	bl	80006dc <LoRA_Read_Register>
 8000934:	4603      	mov	r3, r0
 8000936:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    char data_debug[100];
	sprintf( data_debug,  "%x\n", version);
 800093a:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800093e:	f107 0308 	add.w	r3, r7, #8
 8000942:	491b      	ldr	r1, [pc, #108]	; (80009b0 <LoRA_begin+0xa0>)
 8000944:	4618      	mov	r0, r3
 8000946:	f01a fa2b 	bl	801ada0 <siprintf>
	CDC_Transmit_HS(data_debug, strlen(data_debug));
 800094a:	f107 0308 	add.w	r3, r7, #8
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff fce8 	bl	8000324 <strlen>
 8000954:	4602      	mov	r2, r0
 8000956:	f107 0308 	add.w	r3, r7, #8
 800095a:	4611      	mov	r1, r2
 800095c:	4618      	mov	r0, r3
 800095e:	f019 fdcb 	bl	801a4f8 <CDC_Transmit_HS>

	LoRA_sleep();
 8000962:	f7ff ff11 	bl	8000788 <LoRA_sleep>
	LoRA_set_frequency(868000000);
 8000966:	4813      	ldr	r0, [pc, #76]	; (80009b4 <LoRA_begin+0xa4>)
 8000968:	f7ff ff16 	bl	8000798 <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 800096c:	2100      	movs	r1, #0
 800096e:	200f      	movs	r0, #15
 8000970:	f7ff fedc 	bl	800072c <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8000974:	2100      	movs	r1, #0
 8000976:	200e      	movs	r0, #14
 8000978:	f7ff fed8 	bl	800072c <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 800097c:	200c      	movs	r0, #12
 800097e:	f7ff fead 	bl	80006dc <LoRA_Read_Register>
 8000982:	4603      	mov	r3, r0
 8000984:	f043 0303 	orr.w	r3, r3, #3
 8000988:	b2db      	uxtb	r3, r3
 800098a:	4619      	mov	r1, r3
 800098c:	200c      	movs	r0, #12
 800098e:	f7ff fecd 	bl	800072c <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8000992:	2104      	movs	r1, #4
 8000994:	2026      	movs	r0, #38	; 0x26
 8000996:	f7ff fec9 	bl	800072c <LoRA_Write_Register>

	LoRA_setTxPower(17);
 800099a:	2011      	movs	r0, #17
 800099c:	f7ff ff74 	bl	8000888 <LoRA_setTxPower>

}
 80009a0:	bf00      	nop
 80009a2:	3770      	adds	r7, #112	; 0x70
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	58020c00 	.word	0x58020c00
 80009ac:	58020000 	.word	0x58020000
 80009b0:	0801c084 	.word	0x0801c084
 80009b4:	33bca100 	.word	0x33bca100

080009b8 <LoRA_beginPacket>:


void LoRA_beginPacket(){
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 80009bc:	f7ff ff98 	bl	80008f0 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 80009c0:	2100      	movs	r1, #0
 80009c2:	200d      	movs	r0, #13
 80009c4:	f7ff feb2 	bl	800072c <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 80009c8:	2100      	movs	r1, #0
 80009ca:	2022      	movs	r0, #34	; 0x22
 80009cc:	f7ff feae 	bl	800072c <LoRA_Write_Register>
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <LoRA_endPacket>:

void LoRA_endPacket(){
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 80009d8:	2183      	movs	r1, #131	; 0x83
 80009da:	2001      	movs	r0, #1
 80009dc:	f7ff fea6 	bl	800072c <LoRA_Write_Register>

	while((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0){
 80009e0:	bf00      	nop
 80009e2:	2012      	movs	r0, #18
 80009e4:	f7ff fe7a 	bl	80006dc <LoRA_Read_Register>
 80009e8:	4603      	mov	r3, r0
 80009ea:	f003 0308 	and.w	r3, r3, #8
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d0f7      	beq.n	80009e2 <LoRA_endPacket+0xe>

	}
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 80009f2:	2185      	movs	r1, #133	; 0x85
 80009f4:	2001      	movs	r0, #1
 80009f6:	f7ff fe99 	bl	800072c <LoRA_Write_Register>

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 80009fa:	2108      	movs	r1, #8
 80009fc:	2012      	movs	r0, #18
 80009fe:	f7ff fe95 	bl	800072c <LoRA_Write_Register>

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <LoRA_parsePacket>:


int LoRA_parsePacket(){
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b082      	sub	sp, #8
 8000a0a:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 8000a10:	2012      	movs	r0, #18
 8000a12:	f7ff fe63 	bl	80006dc <LoRA_Read_Register>
 8000a16:	4603      	mov	r3, r0
 8000a18:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 8000a1a:	f7ff ff69 	bl	80008f0 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	4619      	mov	r1, r3
 8000a24:	2012      	movs	r0, #18
 8000a26:	f7ff fe81 	bl	800072c <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d016      	beq.n	8000a62 <LoRA_parsePacket+0x5c>
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	f003 0320 	and.w	r3, r3, #32
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d111      	bne.n	8000a62 <LoRA_parsePacket+0x5c>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 8000a3e:	2013      	movs	r0, #19
 8000a40:	f7ff fe4c 	bl	80006dc <LoRA_Read_Register>
 8000a44:	4603      	mov	r3, r0
 8000a46:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 8000a48:	2010      	movs	r0, #16
 8000a4a:	f7ff fe47 	bl	80006dc <LoRA_Read_Register>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	4619      	mov	r1, r3
 8000a52:	200d      	movs	r0, #13
 8000a54:	f7ff fe6a 	bl	800072c <LoRA_Write_Register>
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8000a58:	2185      	movs	r1, #133	; 0x85
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	f7ff fe66 	bl	800072c <LoRA_Write_Register>
 8000a60:	e00d      	b.n	8000a7e <LoRA_parsePacket+0x78>

		//LoRA_idle();
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS)){
 8000a62:	2001      	movs	r0, #1
 8000a64:	f7ff fe3a 	bl	80006dc <LoRA_Read_Register>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b85      	cmp	r3, #133	; 0x85
 8000a6c:	d007      	beq.n	8000a7e <LoRA_parsePacket+0x78>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8000a6e:	2100      	movs	r1, #0
 8000a70:	200d      	movs	r0, #13
 8000a72:	f7ff fe5b 	bl	800072c <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8000a76:	2185      	movs	r1, #133	; 0x85
 8000a78:	2001      	movs	r0, #1
 8000a7a:	f7ff fe57 	bl	800072c <LoRA_Write_Register>
	}
	return packetLenght;
 8000a7e:	687b      	ldr	r3, [r7, #4]

}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <LoRA_sendPacket>:

void LoRA_sendPacket(char * data){
 8000a88:	b5b0      	push	{r4, r5, r7, lr}
 8000a8a:	b0c4      	sub	sp, #272	; 0x110
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a92:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a96:	6018      	str	r0, [r3, #0]
	LoRA_idle();
 8000a98:	f7ff febc 	bl	8000814 <LoRA_idle>

	char debug[MAX_PKT_LENGTH];
	if(recv_packet(debug, MAX_PKT_LENGTH)) {
 8000a9c:	f107 0308 	add.w	r3, r7, #8
 8000aa0:	21ff      	movs	r1, #255	; 0xff
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 f878 	bl	8000b98 <recv_packet>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d022      	beq.n	8000af4 <LoRA_sendPacket+0x6c>
		HAL_Delay(100);
 8000aae:	2064      	movs	r0, #100	; 0x64
 8000ab0:	f003 f924 	bl	8003cfc <HAL_Delay>
		strcat(debug, " was thrown away");
 8000ab4:	f107 0308 	add.w	r3, r7, #8
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fc33 	bl	8000324 <strlen>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	f107 0308 	add.w	r3, r7, #8
 8000ac6:	4413      	add	r3, r2
 8000ac8:	4a32      	ldr	r2, [pc, #200]	; (8000b94 <LoRA_sendPacket+0x10c>)
 8000aca:	461d      	mov	r5, r3
 8000acc:	4614      	mov	r4, r2
 8000ace:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ad0:	6028      	str	r0, [r5, #0]
 8000ad2:	6069      	str	r1, [r5, #4]
 8000ad4:	60aa      	str	r2, [r5, #8]
 8000ad6:	60eb      	str	r3, [r5, #12]
 8000ad8:	7823      	ldrb	r3, [r4, #0]
 8000ada:	742b      	strb	r3, [r5, #16]
		CDC_Transmit_HS(debug, strlen(debug));
 8000adc:	f107 0308 	add.w	r3, r7, #8
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fc1f 	bl	8000324 <strlen>
 8000ae6:	4602      	mov	r2, r0
 8000ae8:	f107 0308 	add.w	r3, r7, #8
 8000aec:	4611      	mov	r1, r2
 8000aee:	4618      	mov	r0, r3
 8000af0:	f019 fd02 	bl	801a4f8 <CDC_Transmit_HS>
	}



	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 8000af4:	2012      	movs	r0, #18
 8000af6:	f7ff fdf1 	bl	80006dc <LoRA_Read_Register>
 8000afa:	4603      	mov	r3, r0
 8000afc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	/*char debug[250];
	sprintf(debug, "here: %d\n", (irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK));
	CDC_Transmit_HS(debug, strlen(debug));
	HAL_Delay(100);*/
	if(!((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0))
 8000b00:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d005      	beq.n	8000b18 <LoRA_sendPacket+0x90>
 8000b0c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000b10:	f003 0320 	and.w	r3, r3, #32
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d033      	beq.n	8000b80 <LoRA_sendPacket+0xf8>
	{
		//CDC_Transmit_HS("here1\n", strlen("here1\n"));
		LoRA_beginPacket();
 8000b18:	f7ff ff4e 	bl	80009b8 <LoRA_beginPacket>
    	for(int i = 0; i < strlen(data); i++){
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000b22:	e011      	b.n	8000b48 <LoRA_sendPacket+0xc0>
    		LoRA_Write_Register(REG_FIFO, data[i]);
 8000b24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000b28:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000b2c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000b30:	6812      	ldr	r2, [r2, #0]
 8000b32:	4413      	add	r3, r2
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	4619      	mov	r1, r3
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f7ff fdf7 	bl	800072c <LoRA_Write_Register>
    	for(int i = 0; i < strlen(data); i++){
 8000b3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000b42:	3301      	adds	r3, #1
 8000b44:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000b48:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b4c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b50:	6818      	ldr	r0, [r3, #0]
 8000b52:	f7ff fbe7 	bl	8000324 <strlen>
 8000b56:	4602      	mov	r2, r0
 8000b58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d8e1      	bhi.n	8000b24 <LoRA_sendPacket+0x9c>
    	}
    	LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 8000b60:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b64:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b68:	6818      	ldr	r0, [r3, #0]
 8000b6a:	f7ff fbdb 	bl	8000324 <strlen>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	4619      	mov	r1, r3
 8000b74:	2022      	movs	r0, #34	; 0x22
 8000b76:	f7ff fdd9 	bl	800072c <LoRA_Write_Register>
    	LoRA_endPacket();
 8000b7a:	f7ff ff2b 	bl	80009d4 <LoRA_endPacket>
 8000b7e:	e004      	b.n	8000b8a <LoRA_sendPacket+0x102>
    	HAL_Delay(100);
    	CDC_Transmit_HS(sent, strlen(sent));*/
	}
	else {
		//CDC_Transmit_HS("here2\n", strlen("here2\n"));
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8000b80:	2185      	movs	r1, #133	; 0x85
 8000b82:	2001      	movs	r0, #1
 8000b84:	f7ff fdd2 	bl	800072c <LoRA_Write_Register>
	}
	/*char sent[300];
	sprintf(sent, "\nsent: %s\n", data);
	HAL_Delay(100);
	CDC_Transmit_HS(sent, strlen(sent));*/
}
 8000b88:	bf00      	nop
 8000b8a:	bf00      	nop
 8000b8c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bdb0      	pop	{r4, r5, r7, pc}
 8000b94:	0801c088 	.word	0x0801c088

08000b98 <recv_packet>:

int recv_packet(char* LoRA_data, int max_length)
{
 8000b98:	b590      	push	{r4, r7, lr}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
  int packet_length = LoRA_parsePacket();
 8000ba2:	f7ff ff30 	bl	8000a06 <LoRA_parsePacket>
 8000ba6:	60b8      	str	r0, [r7, #8]
  if(max_length-1 < packet_length) //-1 for the null terminator
 8000ba8:	683a      	ldr	r2, [r7, #0]
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	dc01      	bgt.n	8000bb4 <recv_packet+0x1c>
  {
    return 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	e01c      	b.n	8000bee <recv_packet+0x56>
  }
  if(packet_length){
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d018      	beq.n	8000bec <recv_packet+0x54>
    for(int i = 0; i < packet_length; i++){
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	e00a      	b.n	8000bd6 <recv_packet+0x3e>
      LoRA_data[i] = LoRA_Read_Register(0x00);
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	18d4      	adds	r4, r2, r3
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	f7ff fd88 	bl	80006dc <LoRA_Read_Register>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	7023      	strb	r3, [r4, #0]
    for(int i = 0; i < packet_length; i++){
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	dbf0      	blt.n	8000bc0 <recv_packet+0x28>
    }
    LoRA_data[packet_length] = '\0';
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	4413      	add	r3, r2
 8000be4:	2200      	movs	r2, #0
 8000be6:	701a      	strb	r2, [r3, #0]

    /*char rec[300];
    sprintf(rec, "received: %s\n", LoRA_data);
    CDC_Transmit_HS(rec, strlen(rec));*/
    return packet_length;
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	e000      	b.n	8000bee <recv_packet+0x56>
  }
  else{
    return 0;
 8000bec:	2300      	movs	r3, #0
  }
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3714      	adds	r7, #20
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd90      	pop	{r4, r7, pc}

08000bf6 <reliable_send_packet>:

void reliable_send_packet(char *LoRA_data) {
 8000bf6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000bfa:	b089      	sub	sp, #36	; 0x24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	466b      	mov	r3, sp
 8000c02:	461e      	mov	r6, r3
	//CDC_Transmit_HS("debug\n", strlen("debug\n"));
	uint16_t length = strlen(LoRA_data) + 1; //+1 for the \0
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f7ff fb8d 	bl	8000324 <strlen>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	3301      	adds	r3, #1
 8000c10:	82fb      	strh	r3, [r7, #22]
	char acknowledge[length];
 8000c12:	8af9      	ldrh	r1, [r7, #22]
 8000c14:	460b      	mov	r3, r1
 8000c16:	3b01      	subs	r3, #1
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	b28b      	uxth	r3, r1
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	4698      	mov	r8, r3
 8000c20:	4691      	mov	r9, r2
 8000c22:	f04f 0200 	mov.w	r2, #0
 8000c26:	f04f 0300 	mov.w	r3, #0
 8000c2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000c2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000c32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000c36:	b28b      	uxth	r3, r1
 8000c38:	2200      	movs	r2, #0
 8000c3a:	461c      	mov	r4, r3
 8000c3c:	4615      	mov	r5, r2
 8000c3e:	f04f 0200 	mov.w	r2, #0
 8000c42:	f04f 0300 	mov.w	r3, #0
 8000c46:	00eb      	lsls	r3, r5, #3
 8000c48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c4c:	00e2      	lsls	r2, r4, #3
 8000c4e:	460b      	mov	r3, r1
 8000c50:	3307      	adds	r3, #7
 8000c52:	08db      	lsrs	r3, r3, #3
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	ebad 0d03 	sub.w	sp, sp, r3
 8000c5a:	466b      	mov	r3, sp
 8000c5c:	3300      	adds	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
	uint32_t lastTime = HAL_GetTick();
 8000c60:	f003 f840 	bl	8003ce4 <HAL_GetTick>
 8000c64:	61f8      	str	r0, [r7, #28]
	uint32_t wait_time = rand_range(3, 13)*100;
 8000c66:	210d      	movs	r1, #13
 8000c68:	2003      	movs	r0, #3
 8000c6a:	f001 fc73 	bl	8002554 <rand_range>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2264      	movs	r2, #100	; 0x64
 8000c72:	fb02 f303 	mul.w	r3, r2, r3
 8000c76:	61bb      	str	r3, [r7, #24]
	LoRA_sendPacket(LoRA_data);
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff ff05 	bl	8000a88 <LoRA_sendPacket>
	while (1) {

		if (recv_packet(acknowledge, length)) {
 8000c7e:	8afb      	ldrh	r3, [r7, #22]
 8000c80:	4619      	mov	r1, r3
 8000c82:	68f8      	ldr	r0, [r7, #12]
 8000c84:	f7ff ff88 	bl	8000b98 <recv_packet>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d009      	beq.n	8000ca2 <reliable_send_packet+0xac>

			//cehck crc
			if (strcmp(acknowledge, LoRA_data) != 0) {
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	68f8      	ldr	r0, [r7, #12]
 8000c92:	f7ff fb3d 	bl	8000310 <strcmp>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d01a      	beq.n	8000cd2 <reliable_send_packet+0xdc>
				LoRA_sendPacket(LoRA_data);
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff fef3 	bl	8000a88 <LoRA_sendPacket>
			} else {
				break;
			}
		}

		if (HAL_GetTick() - lastTime > wait_time) {
 8000ca2:	f003 f81f 	bl	8003ce4 <HAL_GetTick>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	1ad3      	subs	r3, r2, r3
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d2e5      	bcs.n	8000c7e <reliable_send_packet+0x88>
	    	//CDC_Transmit_HS("debug\n", strlen("debug\n"));
			wait_time = rand_range(3, 13)*100;
 8000cb2:	210d      	movs	r1, #13
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f001 fc4d 	bl	8002554 <rand_range>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2264      	movs	r2, #100	; 0x64
 8000cbe:	fb02 f303 	mul.w	r3, r2, r3
 8000cc2:	61bb      	str	r3, [r7, #24]
			LoRA_sendPacket(LoRA_data);
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f7ff fedf 	bl	8000a88 <LoRA_sendPacket>
			lastTime = HAL_GetTick();
 8000cca:	f003 f80b 	bl	8003ce4 <HAL_GetTick>
 8000cce:	61f8      	str	r0, [r7, #28]
		if (recv_packet(acknowledge, length)) {
 8000cd0:	e7d5      	b.n	8000c7e <reliable_send_packet+0x88>
				break;
 8000cd2:	bf00      	nop
 8000cd4:	46b5      	mov	sp, r6
		}
	}
}
 8000cd6:	bf00      	nop
 8000cd8:	3724      	adds	r7, #36	; 0x24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000ce0 <communicationHandler>:
#include "communication_protocol.h"
#include "LoRA.h"

void communicationHandler(void reliableReceiveHandle(char*), void streamReceiveHandle(char*), char* streamSendHandle(int), struct ReliableSendConfig reliableSendHandle(), int initial_communication_state) {
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	f5ad 7d4f 	sub.w	sp, sp, #828	; 0x33c
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	f507 744e 	add.w	r4, r7, #824	; 0x338
 8000cec:	f5a4 744b 	sub.w	r4, r4, #812	; 0x32c
 8000cf0:	6020      	str	r0, [r4, #0]
 8000cf2:	f507 704e 	add.w	r0, r7, #824	; 0x338
 8000cf6:	f5a0 704c 	sub.w	r0, r0, #816	; 0x330
 8000cfa:	6001      	str	r1, [r0, #0]
 8000cfc:	f507 714e 	add.w	r1, r7, #824	; 0x338
 8000d00:	f5a1 714d 	sub.w	r1, r1, #820	; 0x334
 8000d04:	600a      	str	r2, [r1, #0]
 8000d06:	f507 724e 	add.w	r2, r7, #824	; 0x338
 8000d0a:	f5a2 724e 	sub.w	r2, r2, #824	; 0x338
 8000d0e:	6013      	str	r3, [r2, #0]
  //from here it's okay
  int communication_state = initial_communication_state;
 8000d10:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 8000d14:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
  int max_packet_count = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
  char previous_packet[MAX_PKT_LENGTH] = "";
 8000d1e:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000d22:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	3304      	adds	r3, #4
 8000d2c:	22fb      	movs	r2, #251	; 0xfb
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f01a f883 	bl	801ae3c <memset>
  char received_packet[MAX_PKT_LENGTH] = "";
 8000d36:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000d3a:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	3304      	adds	r3, #4
 8000d44:	22fb      	movs	r2, #251	; 0xfb
 8000d46:	2100      	movs	r1, #0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f01a f877 	bl	801ae3c <memset>
  char general_buffer[MAX_PKT_LENGTH] = "";
 8000d4e:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000d52:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	3304      	adds	r3, #4
 8000d5c:	22fb      	movs	r2, #251	; 0xfb
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f01a f86b 	bl	801ae3c <memset>
  uint32_t previousTime = HAL_GetTick();
 8000d66:	f002 ffbd 	bl	8003ce4 <HAL_GetTick>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
  uint32_t wait_time = rand_range(3, 13)*100;
 8000d70:	210d      	movs	r1, #13
 8000d72:	2003      	movs	r0, #3
 8000d74:	f001 fbee 	bl	8002554 <rand_range>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2264      	movs	r2, #100	; 0x64
 8000d7c:	fb02 f303 	mul.w	r3, r2, r3
 8000d80:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c

  while (1) {
      if(communication_state == RECEIVING_RELIABLE)
 8000d84:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d151      	bne.n	8000e30 <communicationHandler+0x150>
      {
        if(recv_packet(received_packet, MAX_PKT_LENGTH))
 8000d8c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000d90:	21ff      	movs	r1, #255	; 0xff
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff ff00 	bl	8000b98 <recv_packet>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d0f2      	beq.n	8000d84 <communicationHandler+0xa4>
        {
          previousTime = HAL_GetTick();
 8000d9e:	f002 ffa1 	bl	8003ce4 <HAL_GetTick>
 8000da2:	4603      	mov	r3, r0
 8000da4:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330

          if(strcmp(received_packet, "$") == 0)
 8000da8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000dac:	49cd      	ldr	r1, [pc, #820]	; (80010e4 <communicationHandler+0x404>)
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff faae 	bl	8000310 <strcmp>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d103      	bne.n	8000dc2 <communicationHandler+0xe2>
          {
            communication_state = SENDING_RELIABLE;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8000dc0:	e7e0      	b.n	8000d84 <communicationHandler+0xa4>
          }
          else if(sscanf(received_packet, "! %d", &max_packet_count) == 1)
 8000dc2:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8000dc6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000dca:	49c7      	ldr	r1, [pc, #796]	; (80010e8 <communicationHandler+0x408>)
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f01a f807 	bl	801ade0 <siscanf>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d103      	bne.n	8000de0 <communicationHandler+0x100>
          {
            communication_state = SENDING_STREAM;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8000dde:	e7d1      	b.n	8000d84 <communicationHandler+0xa4>
          }
          else if(strcmp(received_packet, previous_packet)==0)
 8000de0:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8000de4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000de8:	4611      	mov	r1, r2
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fa90 	bl	8000310 <strcmp>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d105      	bne.n	8000e02 <communicationHandler+0x122>
          {
            //send acknowledge again
            LoRA_sendPacket(received_packet);
 8000df6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fe44 	bl	8000a88 <LoRA_sendPacket>
 8000e00:	e7c0      	b.n	8000d84 <communicationHandler+0xa4>
          }
          else
          {
        	//send acknowledge
            strcpy(previous_packet, received_packet);
 8000e02:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000e06:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f01a f849 	bl	801aea4 <strcpy>
            LoRA_sendPacket(received_packet);
 8000e12:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fe36 	bl	8000a88 <LoRA_sendPacket>

            reliableReceiveHandle(received_packet);
 8000e1c:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000e20:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000e24:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4610      	mov	r0, r2
 8000e2c:	4798      	blx	r3
 8000e2e:	e7a9      	b.n	8000d84 <communicationHandler+0xa4>

          }
        }
      }
      else if(communication_state == RECEIVING_STREAM)
 8000e30:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d14d      	bne.n	8000ed4 <communicationHandler+0x1f4>
      {
        if(recv_packet(received_packet, MAX_PKT_LENGTH))
 8000e38:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000e3c:	21ff      	movs	r1, #255	; 0xff
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff feaa 	bl	8000b98 <recv_packet>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d01b      	beq.n	8000e82 <communicationHandler+0x1a2>
        {
          previousTime = HAL_GetTick();
 8000e4a:	f002 ff4b 	bl	8003ce4 <HAL_GetTick>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
          if(strcmp(received_packet, "$") == 0)
 8000e54:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000e58:	49a2      	ldr	r1, [pc, #648]	; (80010e4 <communicationHandler+0x404>)
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff fa58 	bl	8000310 <strcmp>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d103      	bne.n	8000e6e <communicationHandler+0x18e>
          {
            communication_state = SENDING_RELIABLE;
 8000e66:	2302      	movs	r3, #2
 8000e68:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8000e6c:	e78a      	b.n	8000d84 <communicationHandler+0xa4>
          }
          else
          {
        	streamReceiveHandle(received_packet);
 8000e6e:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000e72:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000e76:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	4798      	blx	r3
 8000e80:	e780      	b.n	8000d84 <communicationHandler+0xa4>
          }
        }
        else if(HAL_GetTick()-previousTime > wait_time)
 8000e82:	f002 ff2f 	bl	8003ce4 <HAL_GetTick>
 8000e86:	4603      	mov	r3, r0
 8000e88:	461a      	mov	r2, r3
 8000e8a:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	f8d7 232c 	ldr.w	r2, [r7, #812]	; 0x32c
 8000e94:	429a      	cmp	r2, r3
 8000e96:	f4bf af75 	bcs.w	8000d84 <communicationHandler+0xa4>
        {
          wait_time = rand_range(3, 13)*100;
 8000e9a:	210d      	movs	r1, #13
 8000e9c:	2003      	movs	r0, #3
 8000e9e:	f001 fb59 	bl	8002554 <rand_range>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2264      	movs	r2, #100	; 0x64
 8000ea6:	fb02 f303 	mul.w	r3, r2, r3
 8000eaa:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
          previousTime = HAL_GetTick();
 8000eae:	f002 ff19 	bl	8003ce4 <HAL_GetTick>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
          //give up SENDING
          sprintf(general_buffer, "! %d", max_packet_count);
 8000eb8:	f8d7 2320 	ldr.w	r2, [r7, #800]	; 0x320
 8000ebc:	f107 0320 	add.w	r3, r7, #32
 8000ec0:	4989      	ldr	r1, [pc, #548]	; (80010e8 <communicationHandler+0x408>)
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f019 ff6c 	bl	801ada0 <siprintf>
          LoRA_sendPacket(general_buffer);
 8000ec8:	f107 0320 	add.w	r3, r7, #32
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fddb 	bl	8000a88 <LoRA_sendPacket>
 8000ed2:	e757      	b.n	8000d84 <communicationHandler+0xa4>
        }
      }
      else if(communication_state == SENDING_STREAM)
 8000ed4:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000ed8:	2b03      	cmp	r3, #3
 8000eda:	d11f      	bne.n	8000f1c <communicationHandler+0x23c>
      {
        if(max_packet_count == 0)
 8000edc:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d106      	bne.n	8000ef2 <communicationHandler+0x212>
        {
          communication_state = TRANSITIONING;
 8000ee4:	2304      	movs	r3, #4
 8000ee6:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
          LoRA_sendPacket("$");
 8000eea:	487e      	ldr	r0, [pc, #504]	; (80010e4 <communicationHandler+0x404>)
 8000eec:	f7ff fdcc 	bl	8000a88 <LoRA_sendPacket>
 8000ef0:	e748      	b.n	8000d84 <communicationHandler+0xa4>
        }
        else
        {
          //send whatever
          char* msg = streamSendHandle(max_packet_count);
 8000ef2:	f8d7 2320 	ldr.w	r2, [r7, #800]	; 0x320
 8000ef6:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000efa:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4610      	mov	r0, r2
 8000f02:	4798      	blx	r3
 8000f04:	f8c7 0324 	str.w	r0, [r7, #804]	; 0x324
          LoRA_sendPacket(msg);
 8000f08:	f8d7 0324 	ldr.w	r0, [r7, #804]	; 0x324
 8000f0c:	f7ff fdbc 	bl	8000a88 <LoRA_sendPacket>
          max_packet_count--;
 8000f10:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 8000f14:	3b01      	subs	r3, #1
 8000f16:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 8000f1a:	e733      	b.n	8000d84 <communicationHandler+0xa4>
        }

      }
      else if(communication_state == SENDING_RELIABLE)
 8000f1c:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	f040 8091 	bne.w	8001048 <communicationHandler+0x368>
      {
        reliable_send_packet("*");
 8000f26:	4871      	ldr	r0, [pc, #452]	; (80010ec <communicationHandler+0x40c>)
 8000f28:	f7ff fe65 	bl	8000bf6 <reliable_send_packet>
        struct ReliableSendConfig config = reliableSendHandle();
 8000f2c:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000f30:	f5a3 724a 	sub.w	r2, r3, #808	; 0x328
 8000f34:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000f38:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4610      	mov	r0, r2
 8000f40:	4798      	blx	r3
        for(int i = 0; i < config.messages_count; i++)
 8000f42:	2300      	movs	r3, #0
 8000f44:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 8000f48:	e040      	b.n	8000fcc <communicationHandler+0x2ec>
        {
        	if(config.messages[i][0] == '$' || config.messages[i][0] == '*' || config.messages[i][0] == '!')
 8000f4a:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000f4e:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	4413      	add	r3, r2
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b24      	cmp	r3, #36	; 0x24
 8000f62:	d019      	beq.n	8000f98 <communicationHandler+0x2b8>
 8000f64:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000f68:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8000f6c:	689a      	ldr	r2, [r3, #8]
 8000f6e:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4413      	add	r3, r2
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b2a      	cmp	r3, #42	; 0x2a
 8000f7c:	d00c      	beq.n	8000f98 <communicationHandler+0x2b8>
 8000f7e:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000f82:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8000f86:	689a      	ldr	r2, [r3, #8]
 8000f88:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b21      	cmp	r3, #33	; 0x21
 8000f96:	d107      	bne.n	8000fa8 <communicationHandler+0x2c8>
        	{
        		HAL_Delay(100);
 8000f98:	2064      	movs	r0, #100	; 0x64
 8000f9a:	f002 feaf 	bl	8003cfc <HAL_Delay>
        		CDC_Transmit_HS("Can't send control commands! ('$', '*', '!')\n", strlen("Can't send control commands! ('$', '*', '!')\n"));
 8000f9e:	212d      	movs	r1, #45	; 0x2d
 8000fa0:	4853      	ldr	r0, [pc, #332]	; (80010f0 <communicationHandler+0x410>)
 8000fa2:	f019 faa9 	bl	801a4f8 <CDC_Transmit_HS>
        	{
 8000fa6:	e00c      	b.n	8000fc2 <communicationHandler+0x2e2>
        	}
        	else
        	{
        		reliable_send_packet(config.messages[i]);
 8000fa8:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000fac:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	4413      	add	r3, r2
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fe1a 	bl	8000bf6 <reliable_send_packet>
        for(int i = 0; i < config.messages_count; i++)
 8000fc2:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 8000fcc:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000fd0:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	f8d7 2328 	ldr.w	r2, [r7, #808]	; 0x328
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	dbb5      	blt.n	8000f4a <communicationHandler+0x26a>
        	}
        }
        if(config.mode==RECEIVING_STREAM)
 8000fde:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000fe2:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d117      	bne.n	800101c <communicationHandler+0x33c>
        {
          communication_state = RECEIVING_STREAM;
 8000fec:	2301      	movs	r3, #1
 8000fee:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
          max_packet_count = config.streamable_packets;
 8000ff2:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000ff6:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
          sprintf(general_buffer, "! %d", max_packet_count);
 8001000:	f8d7 2320 	ldr.w	r2, [r7, #800]	; 0x320
 8001004:	f107 0320 	add.w	r3, r7, #32
 8001008:	4937      	ldr	r1, [pc, #220]	; (80010e8 <communicationHandler+0x408>)
 800100a:	4618      	mov	r0, r3
 800100c:	f019 fec8 	bl	801ada0 <siprintf>
          LoRA_sendPacket(general_buffer);
 8001010:	f107 0320 	add.w	r3, r7, #32
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fd37 	bl	8000a88 <LoRA_sendPacket>
 800101a:	e6b3      	b.n	8000d84 <communicationHandler+0xa4>
        }
        else if(config.mode==RECEIVING_RELIABLE)
 800101c:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001020:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d106      	bne.n	8001038 <communicationHandler+0x358>
        {
          communication_state = TRANSITIONING;
 800102a:	2304      	movs	r3, #4
 800102c:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
          LoRA_sendPacket("$");
 8001030:	482c      	ldr	r0, [pc, #176]	; (80010e4 <communicationHandler+0x404>)
 8001032:	f7ff fd29 	bl	8000a88 <LoRA_sendPacket>
 8001036:	e6a5      	b.n	8000d84 <communicationHandler+0xa4>
        }
        else
        {
            HAL_Delay(100);
 8001038:	2064      	movs	r0, #100	; 0x64
 800103a:	f002 fe5f 	bl	8003cfc <HAL_Delay>
        	CDC_Transmit_HS("Shouldn't try to transition to this mode.\n", strlen("Shouldn't try to transition to this mode.\n"));
 800103e:	212a      	movs	r1, #42	; 0x2a
 8001040:	482c      	ldr	r0, [pc, #176]	; (80010f4 <communicationHandler+0x414>)
 8001042:	f019 fa59 	bl	801a4f8 <CDC_Transmit_HS>
 8001046:	e69d      	b.n	8000d84 <communicationHandler+0xa4>
        }
      }
      else if(communication_state == TRANSITIONING)
 8001048:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 800104c:	2b04      	cmp	r3, #4
 800104e:	f47f ae99 	bne.w	8000d84 <communicationHandler+0xa4>
      {

          if(recv_packet(received_packet, MAX_PKT_LENGTH))
 8001052:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001056:	21ff      	movs	r1, #255	; 0xff
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fd9d 	bl	8000b98 <recv_packet>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d01f      	beq.n	80010a4 <communicationHandler+0x3c4>
          {
            previousTime = HAL_GetTick();
 8001064:	f002 fe3e 	bl	8003ce4 <HAL_GetTick>
 8001068:	4603      	mov	r3, r0
 800106a:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
            if(strcmp(received_packet, "*")==0)
 800106e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001072:	491e      	ldr	r1, [pc, #120]	; (80010ec <communicationHandler+0x40c>)
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff f94b 	bl	8000310 <strcmp>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	f47f ae81 	bne.w	8000d84 <communicationHandler+0xa4>
            {
              strcpy(previous_packet, received_packet);
 8001082:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001086:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800108a:	4611      	mov	r1, r2
 800108c:	4618      	mov	r0, r3
 800108e:	f019 ff09 	bl	801aea4 <strcpy>
              communication_state = RECEIVING_RELIABLE;
 8001092:	2300      	movs	r3, #0
 8001094:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
              LoRA_sendPacket(received_packet);
 8001098:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fcf3 	bl	8000a88 <LoRA_sendPacket>
 80010a2:	e66f      	b.n	8000d84 <communicationHandler+0xa4>
            }
          }
          else if (HAL_GetTick()-previousTime > wait_time)
 80010a4:	f002 fe1e 	bl	8003ce4 <HAL_GetTick>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461a      	mov	r2, r3
 80010ac:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	f8d7 232c 	ldr.w	r2, [r7, #812]	; 0x32c
 80010b6:	429a      	cmp	r2, r3
 80010b8:	f4bf ae64 	bcs.w	8000d84 <communicationHandler+0xa4>
          {
            wait_time = rand_range(3, 13)*100;
 80010bc:	210d      	movs	r1, #13
 80010be:	2003      	movs	r0, #3
 80010c0:	f001 fa48 	bl	8002554 <rand_range>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2264      	movs	r2, #100	; 0x64
 80010c8:	fb02 f303 	mul.w	r3, r2, r3
 80010cc:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
            previousTime = HAL_GetTick();
 80010d0:	f002 fe08 	bl	8003ce4 <HAL_GetTick>
 80010d4:	4603      	mov	r3, r0
 80010d6:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
            LoRA_sendPacket("$");
 80010da:	4802      	ldr	r0, [pc, #8]	; (80010e4 <communicationHandler+0x404>)
 80010dc:	f7ff fcd4 	bl	8000a88 <LoRA_sendPacket>
      if(communication_state == RECEIVING_RELIABLE)
 80010e0:	e650      	b.n	8000d84 <communicationHandler+0xa4>
 80010e2:	bf00      	nop
 80010e4:	0801c09c 	.word	0x0801c09c
 80010e8:	0801c0a0 	.word	0x0801c0a0
 80010ec:	0801c0a8 	.word	0x0801c0a8
 80010f0:	0801c0ac 	.word	0x0801c0ac
 80010f4:	0801c0dc 	.word	0x0801c0dc

080010f8 <setServo>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;

void setServo(int servoNum, float angle) {
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal = (int) (3000 + (4000 * (angle / 100)));
 8001104:	ed97 7a00 	vldr	s14, [r7]
 8001108:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001178 <setServo+0x80>
 800110c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001110:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800117c <setServo+0x84>
 8001114:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001118:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001180 <setServo+0x88>
 800111c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001120:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001124:	ee17 3a90 	vmov	r3, s15
 8001128:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3b01      	subs	r3, #1
 800112e:	2b03      	cmp	r3, #3
 8001130:	d81a      	bhi.n	8001168 <setServo+0x70>
 8001132:	a201      	add	r2, pc, #4	; (adr r2, 8001138 <setServo+0x40>)
 8001134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001138:	08001149 	.word	0x08001149
 800113c:	08001151 	.word	0x08001151
 8001140:	08001159 	.word	0x08001159
 8001144:	08001161 	.word	0x08001161
	case 1:
		TIM4->CCR4 = timerVal;
 8001148:	4a0e      	ldr	r2, [pc, #56]	; (8001184 <setServo+0x8c>)
 800114a:	89fb      	ldrh	r3, [r7, #14]
 800114c:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 800114e:	e00c      	b.n	800116a <setServo+0x72>
	case 2:
		TIM4->CCR3 = timerVal;
 8001150:	4a0c      	ldr	r2, [pc, #48]	; (8001184 <setServo+0x8c>)
 8001152:	89fb      	ldrh	r3, [r7, #14]
 8001154:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8001156:	e008      	b.n	800116a <setServo+0x72>
	case 3:
		TIM4->CCR2 = timerVal;
 8001158:	4a0a      	ldr	r2, [pc, #40]	; (8001184 <setServo+0x8c>)
 800115a:	89fb      	ldrh	r3, [r7, #14]
 800115c:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 800115e:	e004      	b.n	800116a <setServo+0x72>
	case 4:
		TIM4->CCR1 = timerVal;
 8001160:	4a08      	ldr	r2, [pc, #32]	; (8001184 <setServo+0x8c>)
 8001162:	89fb      	ldrh	r3, [r7, #14]
 8001164:	6353      	str	r3, [r2, #52]	; 0x34
		break;
 8001166:	e000      	b.n	800116a <setServo+0x72>

	default:
		break;
 8001168:	bf00      	nop
	}
}
 800116a:	bf00      	nop
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	42c80000 	.word	0x42c80000
 800117c:	457a0000 	.word	0x457a0000
 8001180:	453b8000 	.word	0x453b8000
 8001184:	40000800 	.word	0x40000800

08001188 <setLEDs>:

void setLEDs(void) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b08e      	sub	sp, #56	; 0x38
 800118c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3;
 800118e:	2300      	movs	r3, #0
 8001190:	637b      	str	r3, [r7, #52]	; 0x34
 8001192:	e181      	b.n	8001498 <setLEDs+0x310>
			i++) {
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 8001194:	4aa1      	ldr	r2, [pc, #644]	; (800141c <setLEDs+0x294>)
 8001196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001198:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800119c:	2b03      	cmp	r3, #3
 800119e:	f200 8177 	bhi.w	8001490 <setLEDs+0x308>
 80011a2:	a201      	add	r2, pc, #4	; (adr r2, 80011a8 <setLEDs+0x20>)
 80011a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a8:	080011b9 	.word	0x080011b9
 80011ac:	08001269 	.word	0x08001269
 80011b0:	08001319 	.word	0x08001319
 80011b4:	080013c9 	.word	0x080013c9
		case 0:
			for (int j = 0; j < 3; j++) {
 80011b8:	2300      	movs	r3, #0
 80011ba:	633b      	str	r3, [r7, #48]	; 0x30
 80011bc:	e042      	b.n	8001244 <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 80011be:	2300      	movs	r3, #0
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011c2:	e039      	b.n	8001238 <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80011c4:	4996      	ldr	r1, [pc, #600]	; (8001420 <setLEDs+0x298>)
 80011c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011c8:	4613      	mov	r3, r2
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	4413      	add	r3, r2
 80011ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011d0:	4413      	add	r3, r2
 80011d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011d6:	2180      	movs	r1, #128	; 0x80
 80011d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011da:	fa41 f202 	asr.w	r2, r1, r2
 80011de:	4013      	ands	r3, r2
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d013      	beq.n	800120c <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1])
 80011e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011e6:	00da      	lsls	r2, r3, #3
 80011e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ea:	18d1      	adds	r1, r2, r3
 80011ec:	4a8b      	ldr	r2, [pc, #556]	; (800141c <setLEDs+0x294>)
 80011ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	4413      	add	r3, r2
 80011f4:	685a      	ldr	r2, [r3, #4]
 80011f6:	4613      	mov	r3, r2
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	4413      	add	r3, r2
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	440b      	add	r3, r1
								+ 8] = 60;
 8001200:	3308      	adds	r3, #8
 8001202:	4a88      	ldr	r2, [pc, #544]	; (8001424 <setLEDs+0x29c>)
 8001204:	213c      	movs	r1, #60	; 0x3c
 8001206:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800120a:	e012      	b.n	8001232 <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1])
 800120c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800120e:	00da      	lsls	r2, r3, #3
 8001210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001212:	18d1      	adds	r1, r2, r3
 8001214:	4a81      	ldr	r2, [pc, #516]	; (800141c <setLEDs+0x294>)
 8001216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	4413      	add	r3, r2
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	4613      	mov	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	4413      	add	r3, r2
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	440b      	add	r3, r1
								+ 8] = 30;
 8001228:	3308      	adds	r3, #8
 800122a:	4a7e      	ldr	r2, [pc, #504]	; (8001424 <setLEDs+0x29c>)
 800122c:	211e      	movs	r1, #30
 800122e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8001232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001234:	3301      	adds	r3, #1
 8001236:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800123a:	2b07      	cmp	r3, #7
 800123c:	ddc2      	ble.n	80011c4 <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 800123e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001240:	3301      	adds	r3, #1
 8001242:	633b      	str	r3, [r7, #48]	; 0x30
 8001244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001246:	2b02      	cmp	r3, #2
 8001248:	ddb9      	ble.n	80011be <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58;
 800124a:	2380      	movs	r3, #128	; 0x80
 800124c:	62bb      	str	r3, [r7, #40]	; 0x28
 800124e:	e007      	b.n	8001260 <setLEDs+0xd8>
					i++) {
				LED_PWM_Data_0[i] = 0;
 8001250:	4a74      	ldr	r2, [pc, #464]	; (8001424 <setLEDs+0x29c>)
 8001252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001254:	2100      	movs	r1, #0
 8001256:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 800125a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800125c:	3301      	adds	r3, #1
 800125e:	62bb      	str	r3, [r7, #40]	; 0x28
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58;
 8001260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001262:	2bb1      	cmp	r3, #177	; 0xb1
 8001264:	ddf4      	ble.n	8001250 <setLEDs+0xc8>
			}
			break;
 8001266:	e114      	b.n	8001492 <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 8001268:	2300      	movs	r3, #0
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
 800126c:	e042      	b.n	80012f4 <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 800126e:	2300      	movs	r3, #0
 8001270:	623b      	str	r3, [r7, #32]
 8001272:	e039      	b.n	80012e8 <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8001274:	496a      	ldr	r1, [pc, #424]	; (8001420 <setLEDs+0x298>)
 8001276:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001278:	4613      	mov	r3, r2
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	4413      	add	r3, r2
 800127e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001280:	4413      	add	r3, r2
 8001282:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001286:	2180      	movs	r1, #128	; 0x80
 8001288:	6a3a      	ldr	r2, [r7, #32]
 800128a:	fa41 f202 	asr.w	r2, r1, r2
 800128e:	4013      	ands	r3, r2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d013      	beq.n	80012bc <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001296:	00da      	lsls	r2, r3, #3
 8001298:	6a3b      	ldr	r3, [r7, #32]
 800129a:	18d1      	adds	r1, r2, r3
 800129c:	4a5f      	ldr	r2, [pc, #380]	; (800141c <setLEDs+0x294>)
 800129e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	4413      	add	r3, r2
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	4613      	mov	r3, r2
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	4413      	add	r3, r2
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	440b      	add	r3, r1
								+ 8] = 60;
 80012b0:	3308      	adds	r3, #8
 80012b2:	4a5d      	ldr	r2, [pc, #372]	; (8001428 <setLEDs+0x2a0>)
 80012b4:	213c      	movs	r1, #60	; 0x3c
 80012b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80012ba:	e012      	b.n	80012e2 <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1])
 80012bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012be:	00da      	lsls	r2, r3, #3
 80012c0:	6a3b      	ldr	r3, [r7, #32]
 80012c2:	18d1      	adds	r1, r2, r3
 80012c4:	4a55      	ldr	r2, [pc, #340]	; (800141c <setLEDs+0x294>)
 80012c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	4413      	add	r3, r2
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	4613      	mov	r3, r2
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	4413      	add	r3, r2
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	440b      	add	r3, r1
								+ 8] = 30;
 80012d8:	3308      	adds	r3, #8
 80012da:	4a53      	ldr	r2, [pc, #332]	; (8001428 <setLEDs+0x2a0>)
 80012dc:	211e      	movs	r1, #30
 80012de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 80012e2:	6a3b      	ldr	r3, [r7, #32]
 80012e4:	3301      	adds	r3, #1
 80012e6:	623b      	str	r3, [r7, #32]
 80012e8:	6a3b      	ldr	r3, [r7, #32]
 80012ea:	2b07      	cmp	r3, #7
 80012ec:	ddc2      	ble.n	8001274 <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 80012ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f0:	3301      	adds	r3, #1
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
 80012f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	ddb9      	ble.n	800126e <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58;
 80012fa:	2380      	movs	r3, #128	; 0x80
 80012fc:	61fb      	str	r3, [r7, #28]
 80012fe:	e007      	b.n	8001310 <setLEDs+0x188>
					i++) {
				LED_PWM_Data_1[i] = 0;
 8001300:	4a49      	ldr	r2, [pc, #292]	; (8001428 <setLEDs+0x2a0>)
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	2100      	movs	r1, #0
 8001306:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3301      	adds	r3, #1
 800130e:	61fb      	str	r3, [r7, #28]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58;
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	2bb1      	cmp	r3, #177	; 0xb1
 8001314:	ddf4      	ble.n	8001300 <setLEDs+0x178>
			}
			break;
 8001316:	e0bc      	b.n	8001492 <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8001318:	2300      	movs	r3, #0
 800131a:	61bb      	str	r3, [r7, #24]
 800131c:	e042      	b.n	80013a4 <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
 8001322:	e039      	b.n	8001398 <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8001324:	493e      	ldr	r1, [pc, #248]	; (8001420 <setLEDs+0x298>)
 8001326:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001328:	4613      	mov	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4413      	add	r3, r2
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4413      	add	r3, r2
 8001332:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001336:	2180      	movs	r1, #128	; 0x80
 8001338:	697a      	ldr	r2, [r7, #20]
 800133a:	fa41 f202 	asr.w	r2, r1, r2
 800133e:	4013      	ands	r3, r2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d013      	beq.n	800136c <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	00da      	lsls	r2, r3, #3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	18d1      	adds	r1, r2, r3
 800134c:	4a33      	ldr	r2, [pc, #204]	; (800141c <setLEDs+0x294>)
 800134e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	4413      	add	r3, r2
 8001354:	685a      	ldr	r2, [r3, #4]
 8001356:	4613      	mov	r3, r2
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	4413      	add	r3, r2
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	440b      	add	r3, r1
								+ 8] = 60;
 8001360:	3308      	adds	r3, #8
 8001362:	4a32      	ldr	r2, [pc, #200]	; (800142c <setLEDs+0x2a4>)
 8001364:	213c      	movs	r1, #60	; 0x3c
 8001366:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800136a:	e012      	b.n	8001392 <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1])
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	00da      	lsls	r2, r3, #3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	18d1      	adds	r1, r2, r3
 8001374:	4a29      	ldr	r2, [pc, #164]	; (800141c <setLEDs+0x294>)
 8001376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	4413      	add	r3, r2
 800137c:	685a      	ldr	r2, [r3, #4]
 800137e:	4613      	mov	r3, r2
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	4413      	add	r3, r2
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	440b      	add	r3, r1
								+ 8] = 30;
 8001388:	3308      	adds	r3, #8
 800138a:	4a28      	ldr	r2, [pc, #160]	; (800142c <setLEDs+0x2a4>)
 800138c:	211e      	movs	r1, #30
 800138e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	3301      	adds	r3, #1
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	2b07      	cmp	r3, #7
 800139c:	ddc2      	ble.n	8001324 <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	3301      	adds	r3, #1
 80013a2:	61bb      	str	r3, [r7, #24]
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	ddb9      	ble.n	800131e <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58;
 80013aa:	2338      	movs	r3, #56	; 0x38
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	e007      	b.n	80013c0 <setLEDs+0x238>
					i++) {
				LED_PWM_Data_2[i] = 0;
 80013b0:	4a1e      	ldr	r2, [pc, #120]	; (800142c <setLEDs+0x2a4>)
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	2100      	movs	r1, #0
 80013b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	3301      	adds	r3, #1
 80013be:	613b      	str	r3, [r7, #16]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58;
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	2b69      	cmp	r3, #105	; 0x69
 80013c4:	ddf4      	ble.n	80013b0 <setLEDs+0x228>
			}
			break;
 80013c6:	e064      	b.n	8001492 <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	e04e      	b.n	800146c <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 80013ce:	2300      	movs	r3, #0
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	e045      	b.n	8001460 <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80013d4:	4912      	ldr	r1, [pc, #72]	; (8001420 <setLEDs+0x298>)
 80013d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013d8:	4613      	mov	r3, r2
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	4413      	add	r3, r2
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	4413      	add	r3, r2
 80013e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013e6:	2180      	movs	r1, #128	; 0x80
 80013e8:	68ba      	ldr	r2, [r7, #8]
 80013ea:	fa41 f202 	asr.w	r2, r1, r2
 80013ee:	4013      	ands	r3, r2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d01f      	beq.n	8001434 <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1])
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	00da      	lsls	r2, r3, #3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	18d1      	adds	r1, r2, r3
 80013fc:	4a07      	ldr	r2, [pc, #28]	; (800141c <setLEDs+0x294>)
 80013fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	4413      	add	r3, r2
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	4613      	mov	r3, r2
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4413      	add	r3, r2
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	440b      	add	r3, r1
								+ 8] = 60;
 8001410:	3308      	adds	r3, #8
 8001412:	4a07      	ldr	r2, [pc, #28]	; (8001430 <setLEDs+0x2a8>)
 8001414:	213c      	movs	r1, #60	; 0x3c
 8001416:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800141a:	e01e      	b.n	800145a <setLEDs+0x2d2>
 800141c:	0801c31c 	.word	0x0801c31c
 8001420:	24000b4c 	.word	0x24000b4c
 8001424:	2400026c 	.word	0x2400026c
 8001428:	24000534 	.word	0x24000534
 800142c:	240007fc 	.word	0x240007fc
 8001430:	240009a4 	.word	0x240009a4
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	00da      	lsls	r2, r3, #3
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	18d1      	adds	r1, r2, r3
 800143c:	4a26      	ldr	r2, [pc, #152]	; (80014d8 <setLEDs+0x350>)
 800143e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	4413      	add	r3, r2
 8001444:	685a      	ldr	r2, [r3, #4]
 8001446:	4613      	mov	r3, r2
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4413      	add	r3, r2
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	440b      	add	r3, r1
								+ 8] = 30;
 8001450:	3308      	adds	r3, #8
 8001452:	4a22      	ldr	r2, [pc, #136]	; (80014dc <setLEDs+0x354>)
 8001454:	211e      	movs	r1, #30
 8001456:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	3301      	adds	r3, #1
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	2b07      	cmp	r3, #7
 8001464:	ddb6      	ble.n	80013d4 <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	3301      	adds	r3, #1
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2b02      	cmp	r3, #2
 8001470:	ddad      	ble.n	80013ce <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58;
 8001472:	2338      	movs	r3, #56	; 0x38
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	e007      	b.n	8001488 <setLEDs+0x300>
					i++) {
				LED_PWM_Data_3[i] = 0;
 8001478:	4a18      	ldr	r2, [pc, #96]	; (80014dc <setLEDs+0x354>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2100      	movs	r1, #0
 800147e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3301      	adds	r3, #1
 8001486:	607b      	str	r3, [r7, #4]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b69      	cmp	r3, #105	; 0x69
 800148c:	ddf4      	ble.n	8001478 <setLEDs+0x2f0>
			}
			break;
 800148e:	e000      	b.n	8001492 <setLEDs+0x30a>
		default:
			break;
 8001490:	bf00      	nop
			i++) {
 8001492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001494:	3301      	adds	r3, #1
 8001496:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3;
 8001498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800149a:	2b0d      	cmp	r3, #13
 800149c:	f77f ae7a 	ble.w	8001194 <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0,
 80014a0:	23b2      	movs	r3, #178	; 0xb2
 80014a2:	4a0f      	ldr	r2, [pc, #60]	; (80014e0 <setLEDs+0x358>)
 80014a4:	210c      	movs	r1, #12
 80014a6:	480f      	ldr	r0, [pc, #60]	; (80014e4 <setLEDs+0x35c>)
 80014a8:	f00f f8b0 	bl	801060c <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1,
 80014ac:	23b2      	movs	r3, #178	; 0xb2
 80014ae:	4a0e      	ldr	r2, [pc, #56]	; (80014e8 <setLEDs+0x360>)
 80014b0:	2108      	movs	r1, #8
 80014b2:	480e      	ldr	r0, [pc, #56]	; (80014ec <setLEDs+0x364>)
 80014b4:	f00f f8aa 	bl	801060c <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2,
 80014b8:	236a      	movs	r3, #106	; 0x6a
 80014ba:	4a0d      	ldr	r2, [pc, #52]	; (80014f0 <setLEDs+0x368>)
 80014bc:	2104      	movs	r1, #4
 80014be:	480d      	ldr	r0, [pc, #52]	; (80014f4 <setLEDs+0x36c>)
 80014c0:	f00f f8a4 	bl	801060c <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3,
 80014c4:	236a      	movs	r3, #106	; 0x6a
 80014c6:	4a05      	ldr	r2, [pc, #20]	; (80014dc <setLEDs+0x354>)
 80014c8:	2100      	movs	r1, #0
 80014ca:	480a      	ldr	r0, [pc, #40]	; (80014f4 <setLEDs+0x36c>)
 80014cc:	f00f f89e 	bl	801060c <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3

}
 80014d0:	bf00      	nop
 80014d2:	3738      	adds	r7, #56	; 0x38
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	0801c31c 	.word	0x0801c31c
 80014dc:	240009a4 	.word	0x240009a4
 80014e0:	2400026c 	.word	0x2400026c
 80014e4:	240011b0 	.word	0x240011b0
 80014e8:	24000534 	.word	0x24000534
 80014ec:	240010cc 	.word	0x240010cc
 80014f0:	240007fc 	.word	0x240007fc
 80014f4:	24001118 	.word	0x24001118

080014f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b090      	sub	sp, #64	; 0x40
 80014fc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014fe:	f002 fb6b 	bl	8003bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001502:	f000 f87b 	bl	80015fc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001506:	f000 f8f1 	bl	80016ec <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800150a:	f000 fe9d 	bl	8002248 <MX_GPIO_Init>
  MX_DMA_Init();
 800150e:	f000 fe3b 	bl	8002188 <MX_DMA_Init>
  MX_SPI3_Init();
 8001512:	f000 fb71 	bl	8001bf8 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 8001516:	f000 fa01 	bl	800191c <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 800151a:	f000 fde9 	bl	80020f0 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800151e:	f000 f917 	bl	8001750 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001522:	f000 fc7b 	bl	8001e1c <MX_TIM4_Init>
  MX_ADC3_Init();
 8001526:	f000 f98b 	bl	8001840 <MX_ADC3_Init>
  MX_SPI2_Init();
 800152a:	f000 fb0f 	bl	8001b4c <MX_SPI2_Init>
  MX_I2C2_Init();
 800152e:	f000 fa59 	bl	80019e4 <MX_I2C2_Init>
  MX_TIM2_Init();
 8001532:	f000 fbb7 	bl	8001ca4 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001536:	f000 fced 	bl	8001f14 <MX_TIM5_Init>
  MX_TIM3_Init();
 800153a:	f000 fc0b 	bl	8001d54 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800153e:	f018 ff1b 	bl	801a378 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8001542:	f000 faad 	bl	8001aa0 <MX_SPI1_Init>
  MX_UART4_Init();
 8001546:	f000 fd87 	bl	8002058 <MX_UART4_Init>
  MX_FATFS_Init();
 800154a:	f013 fd35 	bl	8014fb8 <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 800154e:	f000 fa89 	bl	8001a64 <MX_SDMMC2_SD_Init>
  MX_TIM13_Init();
 8001552:	f000 fd39 	bl	8001fc8 <MX_TIM13_Init>
  MX_TIM14_Init();
 8001556:	f000 fd5b 	bl	8002010 <MX_TIM14_Init>
  MX_RNG_Init();
 800155a:	f000 ffdf 	bl	800251c <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
	char dummy[50];
	disarm(dummy);
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	4618      	mov	r0, r3
 8001562:	f001 f83d 	bl	80025e0 <disarm>


	FR_Status = f_mount(&FatFs, SDPath, 1);
 8001566:	2201      	movs	r2, #1
 8001568:	4918      	ldr	r1, [pc, #96]	; (80015cc <main+0xd4>)
 800156a:	4819      	ldr	r0, [pc, #100]	; (80015d0 <main+0xd8>)
 800156c:	f018 f8f8 	bl	8019760 <f_mount>
 8001570:	4603      	mov	r3, r0
 8001572:	461a      	mov	r2, r3
 8001574:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <main+0xdc>)
 8001576:	701a      	strb	r2, [r3, #0]

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001578:	210c      	movs	r1, #12
 800157a:	4817      	ldr	r0, [pc, #92]	; (80015d8 <main+0xe0>)
 800157c:	f00e ff2a 	bl	80103d4 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 8001580:	2201      	movs	r2, #1
 8001582:	2104      	movs	r1, #4
 8001584:	4815      	ldr	r0, [pc, #84]	; (80015dc <main+0xe4>)
 8001586:	f007 fab7 	bl	8008af8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 800158a:	2201      	movs	r2, #1
 800158c:	2108      	movs	r1, #8
 800158e:	4813      	ldr	r0, [pc, #76]	; (80015dc <main+0xe4>)
 8001590:	f007 fab2 	bl	8008af8 <HAL_GPIO_WritePin>

	FR_Status = f_open(&Fil, "MyTextFile.txt", FA_CREATE_NEW);
 8001594:	2204      	movs	r2, #4
 8001596:	4912      	ldr	r1, [pc, #72]	; (80015e0 <main+0xe8>)
 8001598:	4812      	ldr	r0, [pc, #72]	; (80015e4 <main+0xec>)
 800159a:	f018 f927 	bl	80197ec <f_open>
 800159e:	4603      	mov	r3, r0
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <main+0xdc>)
 80015a4:	701a      	strb	r2, [r3, #0]
	f_close(&Fil);
 80015a6:	480f      	ldr	r0, [pc, #60]	; (80015e4 <main+0xec>)
 80015a8:	f018 fcfe 	bl	8019fa8 <f_close>

	LoRA_begin(868000000);
 80015ac:	480e      	ldr	r0, [pc, #56]	; (80015e8 <main+0xf0>)
 80015ae:	f7ff f9af 	bl	8000910 <LoRA_begin>
	communicationHandler(
 80015b2:	2300      	movs	r3, #0
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <main+0xf4>)
 80015b8:	4a0d      	ldr	r2, [pc, #52]	; (80015f0 <main+0xf8>)
 80015ba:	490e      	ldr	r1, [pc, #56]	; (80015f4 <main+0xfc>)
 80015bc:	480e      	ldr	r0, [pc, #56]	; (80015f8 <main+0x100>)
 80015be:	f7ff fb8f 	bl	8000ce0 <communicationHandler>
 80015c2:	2300      	movs	r3, #0
//HAL_Delay(1000);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3738      	adds	r7, #56	; 0x38
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	24003cec 	.word	0x24003cec
 80015d0:	24001614 	.word	0x24001614
 80015d4:	2400367c 	.word	0x2400367c
 80015d8:	24001164 	.word	0x24001164
 80015dc:	58021800 	.word	0x58021800
 80015e0:	0801c108 	.word	0x0801c108
 80015e4:	2400264c 	.word	0x2400264c
 80015e8:	33bca100 	.word	0x33bca100
 80015ec:	080028b9 	.word	0x080028b9
 80015f0:	0800280d 	.word	0x0800280d
 80015f4:	080027ed 	.word	0x080027ed
 80015f8:	080027d1 	.word	0x080027d1

080015fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b09c      	sub	sp, #112	; 0x70
 8001600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001606:	224c      	movs	r2, #76	; 0x4c
 8001608:	2100      	movs	r1, #0
 800160a:	4618      	mov	r0, r3
 800160c:	f019 fc16 	bl	801ae3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	2220      	movs	r2, #32
 8001614:	2100      	movs	r1, #0
 8001616:	4618      	mov	r0, r3
 8001618:	f019 fc10 	bl	801ae3c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800161c:	2002      	movs	r0, #2
 800161e:	f008 fe7f 	bl	800a320 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001622:	2300      	movs	r3, #0
 8001624:	603b      	str	r3, [r7, #0]
 8001626:	4b30      	ldr	r3, [pc, #192]	; (80016e8 <SystemClock_Config+0xec>)
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800162e:	4a2e      	ldr	r2, [pc, #184]	; (80016e8 <SystemClock_Config+0xec>)
 8001630:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001634:	6193      	str	r3, [r2, #24]
 8001636:	4b2c      	ldr	r3, [pc, #176]	; (80016e8 <SystemClock_Config+0xec>)
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800163e:	603b      	str	r3, [r7, #0]
 8001640:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001642:	bf00      	nop
 8001644:	4b28      	ldr	r3, [pc, #160]	; (80016e8 <SystemClock_Config+0xec>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800164c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001650:	d1f8      	bne.n	8001644 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001652:	2322      	movs	r3, #34	; 0x22
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001656:	2301      	movs	r3, #1
 8001658:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800165a:	2340      	movs	r3, #64	; 0x40
 800165c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800165e:	2301      	movs	r3, #1
 8001660:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001662:	2302      	movs	r3, #2
 8001664:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001666:	2300      	movs	r3, #0
 8001668:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800166a:	2304      	movs	r3, #4
 800166c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 800166e:	230c      	movs	r3, #12
 8001670:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001672:	2301      	movs	r3, #1
 8001674:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001676:	2303      	movs	r3, #3
 8001678:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800167a:	2302      	movs	r3, #2
 800167c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800167e:	230c      	movs	r3, #12
 8001680:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001682:	2300      	movs	r3, #0
 8001684:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800168a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168e:	4618      	mov	r0, r3
 8001690:	f008 fe90 	bl	800a3b4 <HAL_RCC_OscConfig>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800169a:	f000 ff39 	bl	8002510 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800169e:	233f      	movs	r3, #63	; 0x3f
 80016a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016a2:	2303      	movs	r3, #3
 80016a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80016aa:	2308      	movs	r3, #8
 80016ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80016ae:	2340      	movs	r3, #64	; 0x40
 80016b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80016b2:	2340      	movs	r3, #64	; 0x40
 80016b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80016b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016ba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80016bc:	2340      	movs	r3, #64	; 0x40
 80016be:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	2101      	movs	r1, #1
 80016c4:	4618      	mov	r0, r3
 80016c6:	f009 fa4f 	bl	800ab68 <HAL_RCC_ClockConfig>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80016d0:	f000 ff1e 	bl	8002510 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80016d4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80016d8:	2100      	movs	r1, #0
 80016da:	2000      	movs	r0, #0
 80016dc:	f009 fbfa 	bl	800aed4 <HAL_RCC_MCOConfig>
}
 80016e0:	bf00      	nop
 80016e2:	3770      	adds	r7, #112	; 0x70
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	58024800 	.word	0x58024800

080016ec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b0ae      	sub	sp, #184	; 0xb8
 80016f0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016f2:	463b      	mov	r3, r7
 80016f4:	22b8      	movs	r2, #184	; 0xb8
 80016f6:	2100      	movs	r1, #0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f019 fb9f 	bl	801ae3c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 80016fe:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8001702:	f04f 0300 	mov.w	r3, #0
 8001706:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800170a:	2304      	movs	r3, #4
 800170c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 800170e:	230c      	movs	r3, #12
 8001710:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001712:	2304      	movs	r3, #4
 8001714:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001716:	2302      	movs	r3, #2
 8001718:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800171a:	2302      	movs	r3, #2
 800171c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800171e:	23c0      	movs	r3, #192	; 0xc0
 8001720:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001722:	2300      	movs	r3, #0
 8001724:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800172a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800172e:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001730:	2300      	movs	r3, #0
 8001732:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001736:	463b      	mov	r3, r7
 8001738:	4618      	mov	r0, r3
 800173a:	f009 fe0b 	bl	800b354 <HAL_RCCEx_PeriphCLKConfig>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001744:	f000 fee4 	bl	8002510 <Error_Handler>
  }
}
 8001748:	bf00      	nop
 800174a:	37b8      	adds	r7, #184	; 0xb8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08c      	sub	sp, #48	; 0x30
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001762:	463b      	mov	r3, r7
 8001764:	2224      	movs	r2, #36	; 0x24
 8001766:	2100      	movs	r1, #0
 8001768:	4618      	mov	r0, r3
 800176a:	f019 fb67 	bl	801ae3c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800176e:	4b31      	ldr	r3, [pc, #196]	; (8001834 <MX_ADC1_Init+0xe4>)
 8001770:	4a31      	ldr	r2, [pc, #196]	; (8001838 <MX_ADC1_Init+0xe8>)
 8001772:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001774:	4b2f      	ldr	r3, [pc, #188]	; (8001834 <MX_ADC1_Init+0xe4>)
 8001776:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 800177a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800177c:	4b2d      	ldr	r3, [pc, #180]	; (8001834 <MX_ADC1_Init+0xe4>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001782:	4b2c      	ldr	r3, [pc, #176]	; (8001834 <MX_ADC1_Init+0xe4>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001788:	4b2a      	ldr	r3, [pc, #168]	; (8001834 <MX_ADC1_Init+0xe4>)
 800178a:	2204      	movs	r2, #4
 800178c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800178e:	4b29      	ldr	r3, [pc, #164]	; (8001834 <MX_ADC1_Init+0xe4>)
 8001790:	2200      	movs	r2, #0
 8001792:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001794:	4b27      	ldr	r3, [pc, #156]	; (8001834 <MX_ADC1_Init+0xe4>)
 8001796:	2200      	movs	r2, #0
 8001798:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800179a:	4b26      	ldr	r3, [pc, #152]	; (8001834 <MX_ADC1_Init+0xe4>)
 800179c:	2201      	movs	r2, #1
 800179e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017a0:	4b24      	ldr	r3, [pc, #144]	; (8001834 <MX_ADC1_Init+0xe4>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017a8:	4b22      	ldr	r3, [pc, #136]	; (8001834 <MX_ADC1_Init+0xe4>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017ae:	4b21      	ldr	r3, [pc, #132]	; (8001834 <MX_ADC1_Init+0xe4>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80017b4:	4b1f      	ldr	r3, [pc, #124]	; (8001834 <MX_ADC1_Init+0xe4>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80017ba:	4b1e      	ldr	r3, [pc, #120]	; (8001834 <MX_ADC1_Init+0xe4>)
 80017bc:	2200      	movs	r2, #0
 80017be:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80017c0:	4b1c      	ldr	r3, [pc, #112]	; (8001834 <MX_ADC1_Init+0xe4>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80017c6:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <MX_ADC1_Init+0xe4>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017ce:	4819      	ldr	r0, [pc, #100]	; (8001834 <MX_ADC1_Init+0xe4>)
 80017d0:	f002 fdba 	bl	8004348 <HAL_ADC_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80017da:	f000 fe99 	bl	8002510 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80017de:	2300      	movs	r3, #0
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80017e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e6:	4619      	mov	r1, r3
 80017e8:	4812      	ldr	r0, [pc, #72]	; (8001834 <MX_ADC1_Init+0xe4>)
 80017ea:	f004 f99b 	bl	8005b24 <HAL_ADCEx_MultiModeConfigChannel>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80017f4:	f000 fe8c 	bl	8002510 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80017f8:	4b10      	ldr	r3, [pc, #64]	; (800183c <MX_ADC1_Init+0xec>)
 80017fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017fc:	2306      	movs	r3, #6
 80017fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8001800:	2303      	movs	r3, #3
 8001802:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001804:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001808:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800180a:	2304      	movs	r3, #4
 800180c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001812:	2300      	movs	r3, #0
 8001814:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001818:	463b      	mov	r3, r7
 800181a:	4619      	mov	r1, r3
 800181c:	4805      	ldr	r0, [pc, #20]	; (8001834 <MX_ADC1_Init+0xe4>)
 800181e:	f003 f99b 	bl	8004b58 <HAL_ADC_ConfigChannel>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001828:	f000 fe72 	bl	8002510 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800182c:	bf00      	nop
 800182e:	3730      	adds	r7, #48	; 0x30
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	24000bf4 	.word	0x24000bf4
 8001838:	40022000 	.word	0x40022000
 800183c:	3ac04000 	.word	0x3ac04000

08001840 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	; 0x28
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	2224      	movs	r2, #36	; 0x24
 800184a:	2100      	movs	r1, #0
 800184c:	4618      	mov	r0, r3
 800184e:	f019 faf5 	bl	801ae3c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001852:	4b2f      	ldr	r3, [pc, #188]	; (8001910 <MX_ADC3_Init+0xd0>)
 8001854:	4a2f      	ldr	r2, [pc, #188]	; (8001914 <MX_ADC3_Init+0xd4>)
 8001856:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001858:	4b2d      	ldr	r3, [pc, #180]	; (8001910 <MX_ADC3_Init+0xd0>)
 800185a:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 800185e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001860:	4b2b      	ldr	r3, [pc, #172]	; (8001910 <MX_ADC3_Init+0xd0>)
 8001862:	2208      	movs	r2, #8
 8001864:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001866:	4b2a      	ldr	r3, [pc, #168]	; (8001910 <MX_ADC3_Init+0xd0>)
 8001868:	2200      	movs	r2, #0
 800186a:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800186c:	4b28      	ldr	r3, [pc, #160]	; (8001910 <MX_ADC3_Init+0xd0>)
 800186e:	2200      	movs	r2, #0
 8001870:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001872:	4b27      	ldr	r3, [pc, #156]	; (8001910 <MX_ADC3_Init+0xd0>)
 8001874:	2204      	movs	r2, #4
 8001876:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001878:	4b25      	ldr	r3, [pc, #148]	; (8001910 <MX_ADC3_Init+0xd0>)
 800187a:	2200      	movs	r2, #0
 800187c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800187e:	4b24      	ldr	r3, [pc, #144]	; (8001910 <MX_ADC3_Init+0xd0>)
 8001880:	2200      	movs	r2, #0
 8001882:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001884:	4b22      	ldr	r3, [pc, #136]	; (8001910 <MX_ADC3_Init+0xd0>)
 8001886:	2201      	movs	r2, #1
 8001888:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800188a:	4b21      	ldr	r3, [pc, #132]	; (8001910 <MX_ADC3_Init+0xd0>)
 800188c:	2200      	movs	r2, #0
 800188e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001892:	4b1f      	ldr	r3, [pc, #124]	; (8001910 <MX_ADC3_Init+0xd0>)
 8001894:	2200      	movs	r2, #0
 8001896:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001898:	4b1d      	ldr	r3, [pc, #116]	; (8001910 <MX_ADC3_Init+0xd0>)
 800189a:	2200      	movs	r2, #0
 800189c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800189e:	4b1c      	ldr	r3, [pc, #112]	; (8001910 <MX_ADC3_Init+0xd0>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80018a6:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <MX_ADC3_Init+0xd0>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80018ac:	4b18      	ldr	r3, [pc, #96]	; (8001910 <MX_ADC3_Init+0xd0>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80018b2:	4b17      	ldr	r3, [pc, #92]	; (8001910 <MX_ADC3_Init+0xd0>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80018b8:	4b15      	ldr	r3, [pc, #84]	; (8001910 <MX_ADC3_Init+0xd0>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 80018be:	4b14      	ldr	r3, [pc, #80]	; (8001910 <MX_ADC3_Init+0xd0>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80018c6:	4812      	ldr	r0, [pc, #72]	; (8001910 <MX_ADC3_Init+0xd0>)
 80018c8:	f002 fd3e 	bl	8004348 <HAL_ADC_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 80018d2:	f000 fe1d 	bl	8002510 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <MX_ADC3_Init+0xd8>)
 80018d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018da:	2306      	movs	r3, #6
 80018dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018e2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80018e6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018e8:	2304      	movs	r3, #4
 80018ea:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80018f0:	2300      	movs	r3, #0
 80018f2:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	4619      	mov	r1, r3
 80018f8:	4805      	ldr	r0, [pc, #20]	; (8001910 <MX_ADC3_Init+0xd0>)
 80018fa:	f003 f92d 	bl	8004b58 <HAL_ADC_ConfigChannel>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8001904:	f000 fe04 	bl	8002510 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001908:	bf00      	nop
 800190a:	3728      	adds	r7, #40	; 0x28
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	24000c64 	.word	0x24000c64
 8001914:	58026000 	.word	0x58026000
 8001918:	04300002 	.word	0x04300002

0800191c <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001920:	4b2e      	ldr	r3, [pc, #184]	; (80019dc <MX_FDCAN3_Init+0xc0>)
 8001922:	4a2f      	ldr	r2, [pc, #188]	; (80019e0 <MX_FDCAN3_Init+0xc4>)
 8001924:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001926:	4b2d      	ldr	r3, [pc, #180]	; (80019dc <MX_FDCAN3_Init+0xc0>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 800192c:	4b2b      	ldr	r3, [pc, #172]	; (80019dc <MX_FDCAN3_Init+0xc0>)
 800192e:	2200      	movs	r2, #0
 8001930:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001932:	4b2a      	ldr	r3, [pc, #168]	; (80019dc <MX_FDCAN3_Init+0xc0>)
 8001934:	2200      	movs	r2, #0
 8001936:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001938:	4b28      	ldr	r3, [pc, #160]	; (80019dc <MX_FDCAN3_Init+0xc0>)
 800193a:	2200      	movs	r2, #0
 800193c:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 800193e:	4b27      	ldr	r3, [pc, #156]	; (80019dc <MX_FDCAN3_Init+0xc0>)
 8001940:	2200      	movs	r2, #0
 8001942:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8001944:	4b25      	ldr	r3, [pc, #148]	; (80019dc <MX_FDCAN3_Init+0xc0>)
 8001946:	2210      	movs	r2, #16
 8001948:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 800194a:	4b24      	ldr	r3, [pc, #144]	; (80019dc <MX_FDCAN3_Init+0xc0>)
 800194c:	2201      	movs	r2, #1
 800194e:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8001950:	4b22      	ldr	r3, [pc, #136]	; (80019dc <MX_FDCAN3_Init+0xc0>)
 8001952:	2202      	movs	r2, #2
 8001954:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8001956:	4b21      	ldr	r3, [pc, #132]	; (80019dc <MX_FDCAN3_Init+0xc0>)
 8001958:	2202      	movs	r2, #2
 800195a:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 800195c:	4b1f      	ldr	r3, [pc, #124]	; (80019dc <MX_FDCAN3_Init+0xc0>)
 800195e:	2201      	movs	r2, #1
 8001960:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8001962:	4b1e      	ldr	r3, [pc, #120]	; (80019dc <MX_FDCAN3_Init+0xc0>)
 8001964:	2201      	movs	r2, #1
 8001966:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001968:	4b1c      	ldr	r3, [pc, #112]	; (80019dc <MX_FDCAN3_Init+0xc0>)
 800196a:	2201      	movs	r2, #1
 800196c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 800196e:	4b1b      	ldr	r3, [pc, #108]	; (80019dc <MX_FDCAN3_Init+0xc0>)
 8001970:	2201      	movs	r2, #1
 8001972:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8001974:	4b19      	ldr	r3, [pc, #100]	; (80019dc <MX_FDCAN3_Init+0xc0>)
 8001976:	2200      	movs	r2, #0
 8001978:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 800197a:	4b18      	ldr	r3, [pc, #96]	; (80019dc <MX_FDCAN3_Init+0xc0>)
 800197c:	2200      	movs	r2, #0
 800197e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8001980:	4b16      	ldr	r3, [pc, #88]	; (80019dc <MX_FDCAN3_Init+0xc0>)
 8001982:	2200      	movs	r2, #0
 8001984:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <MX_FDCAN3_Init+0xc0>)
 8001988:	2200      	movs	r2, #0
 800198a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800198c:	4b13      	ldr	r3, [pc, #76]	; (80019dc <MX_FDCAN3_Init+0xc0>)
 800198e:	2204      	movs	r2, #4
 8001990:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8001992:	4b12      	ldr	r3, [pc, #72]	; (80019dc <MX_FDCAN3_Init+0xc0>)
 8001994:	2200      	movs	r2, #0
 8001996:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001998:	4b10      	ldr	r3, [pc, #64]	; (80019dc <MX_FDCAN3_Init+0xc0>)
 800199a:	2204      	movs	r2, #4
 800199c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 800199e:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <MX_FDCAN3_Init+0xc0>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80019a4:	4b0d      	ldr	r3, [pc, #52]	; (80019dc <MX_FDCAN3_Init+0xc0>)
 80019a6:	2204      	movs	r2, #4
 80019a8:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 80019aa:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <MX_FDCAN3_Init+0xc0>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 80019b0:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <MX_FDCAN3_Init+0xc0>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 80019b6:	4b09      	ldr	r3, [pc, #36]	; (80019dc <MX_FDCAN3_Init+0xc0>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80019bc:	4b07      	ldr	r3, [pc, #28]	; (80019dc <MX_FDCAN3_Init+0xc0>)
 80019be:	2200      	movs	r2, #0
 80019c0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80019c2:	4b06      	ldr	r3, [pc, #24]	; (80019dc <MX_FDCAN3_Init+0xc0>)
 80019c4:	2204      	movs	r2, #4
 80019c6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 80019c8:	4804      	ldr	r0, [pc, #16]	; (80019dc <MX_FDCAN3_Init+0xc0>)
 80019ca:	f006 fb71 	bl	80080b0 <HAL_FDCAN_Init>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 80019d4:	f000 fd9c 	bl	8002510 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 80019d8:	bf00      	nop
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	24000dc4 	.word	0x24000dc4
 80019e0:	4000d400 	.word	0x4000d400

080019e4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019e8:	4b1b      	ldr	r3, [pc, #108]	; (8001a58 <MX_I2C2_Init+0x74>)
 80019ea:	4a1c      	ldr	r2, [pc, #112]	; (8001a5c <MX_I2C2_Init+0x78>)
 80019ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 80019ee:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <MX_I2C2_Init+0x74>)
 80019f0:	4a1b      	ldr	r2, [pc, #108]	; (8001a60 <MX_I2C2_Init+0x7c>)
 80019f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80019f4:	4b18      	ldr	r3, [pc, #96]	; (8001a58 <MX_I2C2_Init+0x74>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019fa:	4b17      	ldr	r3, [pc, #92]	; (8001a58 <MX_I2C2_Init+0x74>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a00:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <MX_I2C2_Init+0x74>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001a06:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <MX_I2C2_Init+0x74>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a0c:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <MX_I2C2_Init+0x74>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a12:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <MX_I2C2_Init+0x74>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a18:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <MX_I2C2_Init+0x74>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a1e:	480e      	ldr	r0, [pc, #56]	; (8001a58 <MX_I2C2_Init+0x74>)
 8001a20:	f007 f884 	bl	8008b2c <HAL_I2C_Init>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001a2a:	f000 fd71 	bl	8002510 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4809      	ldr	r0, [pc, #36]	; (8001a58 <MX_I2C2_Init+0x74>)
 8001a32:	f007 f925 	bl	8008c80 <HAL_I2CEx_ConfigAnalogFilter>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001a3c:	f000 fd68 	bl	8002510 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001a40:	2100      	movs	r1, #0
 8001a42:	4805      	ldr	r0, [pc, #20]	; (8001a58 <MX_I2C2_Init+0x74>)
 8001a44:	f007 f967 	bl	8008d16 <HAL_I2CEx_ConfigDigitalFilter>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001a4e:	f000 fd5f 	bl	8002510 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	24000e64 	.word	0x24000e64
 8001a5c:	40005800 	.word	0x40005800
 8001a60:	20303e5d 	.word	0x20303e5d

08001a64 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8001a68:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <MX_SDMMC2_SD_Init+0x34>)
 8001a6a:	4a0c      	ldr	r2, [pc, #48]	; (8001a9c <MX_SDMMC2_SD_Init+0x38>)
 8001a6c:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001a6e:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <MX_SDMMC2_SD_Init+0x34>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001a74:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <MX_SDMMC2_SD_Init+0x34>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001a7a:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <MX_SDMMC2_SD_Init+0x34>)
 8001a7c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a80:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001a82:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <MX_SDMMC2_SD_Init+0x34>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 8;
 8001a88:	4b03      	ldr	r3, [pc, #12]	; (8001a98 <MX_SDMMC2_SD_Init+0x34>)
 8001a8a:	2208      	movs	r2, #8
 8001a8c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8001a8e:	bf00      	nop
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	24000eb8 	.word	0x24000eb8
 8001a9c:	48022400 	.word	0x48022400

08001aa0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001aa4:	4b27      	ldr	r3, [pc, #156]	; (8001b44 <MX_SPI1_Init+0xa4>)
 8001aa6:	4a28      	ldr	r2, [pc, #160]	; (8001b48 <MX_SPI1_Init+0xa8>)
 8001aa8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001aaa:	4b26      	ldr	r3, [pc, #152]	; (8001b44 <MX_SPI1_Init+0xa4>)
 8001aac:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001ab0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ab2:	4b24      	ldr	r3, [pc, #144]	; (8001b44 <MX_SPI1_Init+0xa4>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ab8:	4b22      	ldr	r3, [pc, #136]	; (8001b44 <MX_SPI1_Init+0xa4>)
 8001aba:	2207      	movs	r2, #7
 8001abc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001abe:	4b21      	ldr	r3, [pc, #132]	; (8001b44 <MX_SPI1_Init+0xa4>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ac4:	4b1f      	ldr	r3, [pc, #124]	; (8001b44 <MX_SPI1_Init+0xa4>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001aca:	4b1e      	ldr	r3, [pc, #120]	; (8001b44 <MX_SPI1_Init+0xa4>)
 8001acc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ad0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001ad2:	4b1c      	ldr	r3, [pc, #112]	; (8001b44 <MX_SPI1_Init+0xa4>)
 8001ad4:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001ad8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ada:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <MX_SPI1_Init+0xa4>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ae0:	4b18      	ldr	r3, [pc, #96]	; (8001b44 <MX_SPI1_Init+0xa4>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ae6:	4b17      	ldr	r3, [pc, #92]	; (8001b44 <MX_SPI1_Init+0xa4>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001aec:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <MX_SPI1_Init+0xa4>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001af2:	4b14      	ldr	r3, [pc, #80]	; (8001b44 <MX_SPI1_Init+0xa4>)
 8001af4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001af8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001afa:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <MX_SPI1_Init+0xa4>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001b00:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <MX_SPI1_Init+0xa4>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001b06:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <MX_SPI1_Init+0xa4>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001b0c:	4b0d      	ldr	r3, [pc, #52]	; (8001b44 <MX_SPI1_Init+0xa4>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001b12:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <MX_SPI1_Init+0xa4>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001b18:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <MX_SPI1_Init+0xa4>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <MX_SPI1_Init+0xa4>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001b24:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <MX_SPI1_Init+0xa4>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001b2a:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <MX_SPI1_Init+0xa4>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b30:	4804      	ldr	r0, [pc, #16]	; (8001b44 <MX_SPI1_Init+0xa4>)
 8001b32:	f00d fe07 	bl	800f744 <HAL_SPI_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001b3c:	f000 fce8 	bl	8002510 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b40:	bf00      	nop
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	24000f34 	.word	0x24000f34
 8001b48:	40013000 	.word	0x40013000

08001b4c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001b50:	4b27      	ldr	r3, [pc, #156]	; (8001bf0 <MX_SPI2_Init+0xa4>)
 8001b52:	4a28      	ldr	r2, [pc, #160]	; (8001bf4 <MX_SPI2_Init+0xa8>)
 8001b54:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b56:	4b26      	ldr	r3, [pc, #152]	; (8001bf0 <MX_SPI2_Init+0xa4>)
 8001b58:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001b5c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b5e:	4b24      	ldr	r3, [pc, #144]	; (8001bf0 <MX_SPI2_Init+0xa4>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b64:	4b22      	ldr	r3, [pc, #136]	; (8001bf0 <MX_SPI2_Init+0xa4>)
 8001b66:	2207      	movs	r2, #7
 8001b68:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b6a:	4b21      	ldr	r3, [pc, #132]	; (8001bf0 <MX_SPI2_Init+0xa4>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b70:	4b1f      	ldr	r3, [pc, #124]	; (8001bf0 <MX_SPI2_Init+0xa4>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b76:	4b1e      	ldr	r3, [pc, #120]	; (8001bf0 <MX_SPI2_Init+0xa4>)
 8001b78:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b7c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001b7e:	4b1c      	ldr	r3, [pc, #112]	; (8001bf0 <MX_SPI2_Init+0xa4>)
 8001b80:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b84:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b86:	4b1a      	ldr	r3, [pc, #104]	; (8001bf0 <MX_SPI2_Init+0xa4>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b8c:	4b18      	ldr	r3, [pc, #96]	; (8001bf0 <MX_SPI2_Init+0xa4>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b92:	4b17      	ldr	r3, [pc, #92]	; (8001bf0 <MX_SPI2_Init+0xa4>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001b98:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <MX_SPI2_Init+0xa4>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b9e:	4b14      	ldr	r3, [pc, #80]	; (8001bf0 <MX_SPI2_Init+0xa4>)
 8001ba0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ba4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001ba6:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <MX_SPI2_Init+0xa4>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <MX_SPI2_Init+0xa4>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001bb2:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <MX_SPI2_Init+0xa4>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <MX_SPI2_Init+0xa4>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001bbe:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <MX_SPI2_Init+0xa4>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001bc4:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <MX_SPI2_Init+0xa4>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001bca:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <MX_SPI2_Init+0xa4>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001bd0:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <MX_SPI2_Init+0xa4>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001bd6:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <MX_SPI2_Init+0xa4>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001bdc:	4804      	ldr	r0, [pc, #16]	; (8001bf0 <MX_SPI2_Init+0xa4>)
 8001bde:	f00d fdb1 	bl	800f744 <HAL_SPI_Init>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001be8:	f000 fc92 	bl	8002510 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	24000fbc 	.word	0x24000fbc
 8001bf4:	40003800 	.word	0x40003800

08001bf8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001bfc:	4b27      	ldr	r3, [pc, #156]	; (8001c9c <MX_SPI3_Init+0xa4>)
 8001bfe:	4a28      	ldr	r2, [pc, #160]	; (8001ca0 <MX_SPI3_Init+0xa8>)
 8001c00:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001c02:	4b26      	ldr	r3, [pc, #152]	; (8001c9c <MX_SPI3_Init+0xa4>)
 8001c04:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001c08:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001c0a:	4b24      	ldr	r3, [pc, #144]	; (8001c9c <MX_SPI3_Init+0xa4>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c10:	4b22      	ldr	r3, [pc, #136]	; (8001c9c <MX_SPI3_Init+0xa4>)
 8001c12:	2207      	movs	r2, #7
 8001c14:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c16:	4b21      	ldr	r3, [pc, #132]	; (8001c9c <MX_SPI3_Init+0xa4>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c1c:	4b1f      	ldr	r3, [pc, #124]	; (8001c9c <MX_SPI3_Init+0xa4>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001c22:	4b1e      	ldr	r3, [pc, #120]	; (8001c9c <MX_SPI3_Init+0xa4>)
 8001c24:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c28:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001c2a:	4b1c      	ldr	r3, [pc, #112]	; (8001c9c <MX_SPI3_Init+0xa4>)
 8001c2c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001c30:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c32:	4b1a      	ldr	r3, [pc, #104]	; (8001c9c <MX_SPI3_Init+0xa4>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c38:	4b18      	ldr	r3, [pc, #96]	; (8001c9c <MX_SPI3_Init+0xa4>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c3e:	4b17      	ldr	r3, [pc, #92]	; (8001c9c <MX_SPI3_Init+0xa4>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001c44:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <MX_SPI3_Init+0xa4>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c4a:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <MX_SPI3_Init+0xa4>)
 8001c4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c50:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001c52:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <MX_SPI3_Init+0xa4>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001c58:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <MX_SPI3_Init+0xa4>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001c5e:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <MX_SPI3_Init+0xa4>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001c64:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <MX_SPI3_Init+0xa4>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001c6a:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <MX_SPI3_Init+0xa4>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001c70:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <MX_SPI3_Init+0xa4>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001c76:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <MX_SPI3_Init+0xa4>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001c7c:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <MX_SPI3_Init+0xa4>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001c82:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <MX_SPI3_Init+0xa4>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001c88:	4804      	ldr	r0, [pc, #16]	; (8001c9c <MX_SPI3_Init+0xa4>)
 8001c8a:	f00d fd5b 	bl	800f744 <HAL_SPI_Init>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8001c94:	f000 fc3c 	bl	8002510 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	24001044 	.word	0x24001044
 8001ca0:	40003c00 	.word	0x40003c00

08001ca4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08a      	sub	sp, #40	; 0x28
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001caa:	f107 031c 	add.w	r3, r7, #28
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cb6:	463b      	mov	r3, r7
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
 8001cc4:	615a      	str	r2, [r3, #20]
 8001cc6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cc8:	4b21      	ldr	r3, [pc, #132]	; (8001d50 <MX_TIM2_Init+0xac>)
 8001cca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001cd0:	4b1f      	ldr	r3, [pc, #124]	; (8001d50 <MX_TIM2_Init+0xac>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd6:	4b1e      	ldr	r3, [pc, #120]	; (8001d50 <MX_TIM2_Init+0xac>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 8001cdc:	4b1c      	ldr	r3, [pc, #112]	; (8001d50 <MX_TIM2_Init+0xac>)
 8001cde:	225a      	movs	r2, #90	; 0x5a
 8001ce0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ce2:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <MX_TIM2_Init+0xac>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce8:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <MX_TIM2_Init+0xac>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cee:	4818      	ldr	r0, [pc, #96]	; (8001d50 <MX_TIM2_Init+0xac>)
 8001cf0:	f00e fb18 	bl	8010324 <HAL_TIM_PWM_Init>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001cfa:	f000 fc09 	bl	8002510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d02:	2300      	movs	r3, #0
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d06:	f107 031c 	add.w	r3, r7, #28
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4810      	ldr	r0, [pc, #64]	; (8001d50 <MX_TIM2_Init+0xac>)
 8001d0e:	f00f fd9f 	bl	8011850 <HAL_TIMEx_MasterConfigSynchronization>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001d18:	f000 fbfa 	bl	8002510 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d1c:	2360      	movs	r3, #96	; 0x60
 8001d1e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d2c:	463b      	mov	r3, r7
 8001d2e:	2208      	movs	r2, #8
 8001d30:	4619      	mov	r1, r3
 8001d32:	4807      	ldr	r0, [pc, #28]	; (8001d50 <MX_TIM2_Init+0xac>)
 8001d34:	f00e ffbe 	bl	8010cb4 <HAL_TIM_PWM_ConfigChannel>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001d3e:	f000 fbe7 	bl	8002510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d42:	4803      	ldr	r0, [pc, #12]	; (8001d50 <MX_TIM2_Init+0xac>)
 8001d44:	f001 fc5a 	bl	80035fc <HAL_TIM_MspPostInit>

}
 8001d48:	bf00      	nop
 8001d4a:	3728      	adds	r7, #40	; 0x28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	240010cc 	.word	0x240010cc

08001d54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	; 0x28
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d5a:	f107 031c 	add.w	r3, r7, #28
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d66:	463b      	mov	r3, r7
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
 8001d74:	615a      	str	r2, [r3, #20]
 8001d76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d78:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <MX_TIM3_Init+0xc0>)
 8001d7a:	4a27      	ldr	r2, [pc, #156]	; (8001e18 <MX_TIM3_Init+0xc4>)
 8001d7c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d7e:	4b25      	ldr	r3, [pc, #148]	; (8001e14 <MX_TIM3_Init+0xc0>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d84:	4b23      	ldr	r3, [pc, #140]	; (8001e14 <MX_TIM3_Init+0xc0>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 8001d8a:	4b22      	ldr	r3, [pc, #136]	; (8001e14 <MX_TIM3_Init+0xc0>)
 8001d8c:	225a      	movs	r2, #90	; 0x5a
 8001d8e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d90:	4b20      	ldr	r3, [pc, #128]	; (8001e14 <MX_TIM3_Init+0xc0>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d96:	4b1f      	ldr	r3, [pc, #124]	; (8001e14 <MX_TIM3_Init+0xc0>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d9c:	481d      	ldr	r0, [pc, #116]	; (8001e14 <MX_TIM3_Init+0xc0>)
 8001d9e:	f00e fac1 	bl	8010324 <HAL_TIM_PWM_Init>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001da8:	f000 fbb2 	bl	8002510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dac:	2300      	movs	r3, #0
 8001dae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001db0:	2300      	movs	r3, #0
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001db4:	f107 031c 	add.w	r3, r7, #28
 8001db8:	4619      	mov	r1, r3
 8001dba:	4816      	ldr	r0, [pc, #88]	; (8001e14 <MX_TIM3_Init+0xc0>)
 8001dbc:	f00f fd48 	bl	8011850 <HAL_TIMEx_MasterConfigSynchronization>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001dc6:	f000 fba3 	bl	8002510 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dca:	2360      	movs	r3, #96	; 0x60
 8001dcc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dda:	463b      	mov	r3, r7
 8001ddc:	2200      	movs	r2, #0
 8001dde:	4619      	mov	r1, r3
 8001de0:	480c      	ldr	r0, [pc, #48]	; (8001e14 <MX_TIM3_Init+0xc0>)
 8001de2:	f00e ff67 	bl	8010cb4 <HAL_TIM_PWM_ConfigChannel>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001dec:	f000 fb90 	bl	8002510 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001df0:	463b      	mov	r3, r7
 8001df2:	2204      	movs	r2, #4
 8001df4:	4619      	mov	r1, r3
 8001df6:	4807      	ldr	r0, [pc, #28]	; (8001e14 <MX_TIM3_Init+0xc0>)
 8001df8:	f00e ff5c 	bl	8010cb4 <HAL_TIM_PWM_ConfigChannel>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001e02:	f000 fb85 	bl	8002510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e06:	4803      	ldr	r0, [pc, #12]	; (8001e14 <MX_TIM3_Init+0xc0>)
 8001e08:	f001 fbf8 	bl	80035fc <HAL_TIM_MspPostInit>

}
 8001e0c:	bf00      	nop
 8001e0e:	3728      	adds	r7, #40	; 0x28
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	24001118 	.word	0x24001118
 8001e18:	40000400 	.word	0x40000400

08001e1c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08a      	sub	sp, #40	; 0x28
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e22:	f107 031c 	add.w	r3, r7, #28
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e2e:	463b      	mov	r3, r7
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
 8001e3c:	615a      	str	r2, [r3, #20]
 8001e3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e40:	4b32      	ldr	r3, [pc, #200]	; (8001f0c <MX_TIM4_Init+0xf0>)
 8001e42:	4a33      	ldr	r2, [pc, #204]	; (8001f10 <MX_TIM4_Init+0xf4>)
 8001e44:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 29;
 8001e46:	4b31      	ldr	r3, [pc, #196]	; (8001f0c <MX_TIM4_Init+0xf0>)
 8001e48:	221d      	movs	r2, #29
 8001e4a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e4c:	4b2f      	ldr	r3, [pc, #188]	; (8001f0c <MX_TIM4_Init+0xf0>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001e52:	4b2e      	ldr	r3, [pc, #184]	; (8001f0c <MX_TIM4_Init+0xf0>)
 8001e54:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e58:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e5a:	4b2c      	ldr	r3, [pc, #176]	; (8001f0c <MX_TIM4_Init+0xf0>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e60:	4b2a      	ldr	r3, [pc, #168]	; (8001f0c <MX_TIM4_Init+0xf0>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001e66:	4829      	ldr	r0, [pc, #164]	; (8001f0c <MX_TIM4_Init+0xf0>)
 8001e68:	f00e fa5c 	bl	8010324 <HAL_TIM_PWM_Init>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001e72:	f000 fb4d 	bl	8002510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e76:	2300      	movs	r3, #0
 8001e78:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e7e:	f107 031c 	add.w	r3, r7, #28
 8001e82:	4619      	mov	r1, r3
 8001e84:	4821      	ldr	r0, [pc, #132]	; (8001f0c <MX_TIM4_Init+0xf0>)
 8001e86:	f00f fce3 	bl	8011850 <HAL_TIMEx_MasterConfigSynchronization>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001e90:	f000 fb3e 	bl	8002510 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e94:	2360      	movs	r3, #96	; 0x60
 8001e96:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ea4:	463b      	mov	r3, r7
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4818      	ldr	r0, [pc, #96]	; (8001f0c <MX_TIM4_Init+0xf0>)
 8001eac:	f00e ff02 	bl	8010cb4 <HAL_TIM_PWM_ConfigChannel>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001eb6:	f000 fb2b 	bl	8002510 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001eba:	463b      	mov	r3, r7
 8001ebc:	2204      	movs	r2, #4
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4812      	ldr	r0, [pc, #72]	; (8001f0c <MX_TIM4_Init+0xf0>)
 8001ec2:	f00e fef7 	bl	8010cb4 <HAL_TIM_PWM_ConfigChannel>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001ecc:	f000 fb20 	bl	8002510 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ed0:	463b      	mov	r3, r7
 8001ed2:	2208      	movs	r2, #8
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	480d      	ldr	r0, [pc, #52]	; (8001f0c <MX_TIM4_Init+0xf0>)
 8001ed8:	f00e feec 	bl	8010cb4 <HAL_TIM_PWM_ConfigChannel>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8001ee2:	f000 fb15 	bl	8002510 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ee6:	463b      	mov	r3, r7
 8001ee8:	220c      	movs	r2, #12
 8001eea:	4619      	mov	r1, r3
 8001eec:	4807      	ldr	r0, [pc, #28]	; (8001f0c <MX_TIM4_Init+0xf0>)
 8001eee:	f00e fee1 	bl	8010cb4 <HAL_TIM_PWM_ConfigChannel>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8001ef8:	f000 fb0a 	bl	8002510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001efc:	4803      	ldr	r0, [pc, #12]	; (8001f0c <MX_TIM4_Init+0xf0>)
 8001efe:	f001 fb7d 	bl	80035fc <HAL_TIM_MspPostInit>

}
 8001f02:	bf00      	nop
 8001f04:	3728      	adds	r7, #40	; 0x28
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	24001164 	.word	0x24001164
 8001f10:	40000800 	.word	0x40000800

08001f14 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08a      	sub	sp, #40	; 0x28
 8001f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f1a:	f107 031c 	add.w	r3, r7, #28
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	605a      	str	r2, [r3, #4]
 8001f24:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f26:	463b      	mov	r3, r7
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
 8001f34:	615a      	str	r2, [r3, #20]
 8001f36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001f38:	4b21      	ldr	r3, [pc, #132]	; (8001fc0 <MX_TIM5_Init+0xac>)
 8001f3a:	4a22      	ldr	r2, [pc, #136]	; (8001fc4 <MX_TIM5_Init+0xb0>)
 8001f3c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001f3e:	4b20      	ldr	r3, [pc, #128]	; (8001fc0 <MX_TIM5_Init+0xac>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f44:	4b1e      	ldr	r3, [pc, #120]	; (8001fc0 <MX_TIM5_Init+0xac>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 8001f4a:	4b1d      	ldr	r3, [pc, #116]	; (8001fc0 <MX_TIM5_Init+0xac>)
 8001f4c:	225a      	movs	r2, #90	; 0x5a
 8001f4e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f50:	4b1b      	ldr	r3, [pc, #108]	; (8001fc0 <MX_TIM5_Init+0xac>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f56:	4b1a      	ldr	r3, [pc, #104]	; (8001fc0 <MX_TIM5_Init+0xac>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001f5c:	4818      	ldr	r0, [pc, #96]	; (8001fc0 <MX_TIM5_Init+0xac>)
 8001f5e:	f00e f9e1 	bl	8010324 <HAL_TIM_PWM_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001f68:	f000 fad2 	bl	8002510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f74:	f107 031c 	add.w	r3, r7, #28
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4811      	ldr	r0, [pc, #68]	; (8001fc0 <MX_TIM5_Init+0xac>)
 8001f7c:	f00f fc68 	bl	8011850 <HAL_TIMEx_MasterConfigSynchronization>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001f86:	f000 fac3 	bl	8002510 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f8a:	2360      	movs	r3, #96	; 0x60
 8001f8c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f96:	2300      	movs	r3, #0
 8001f98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f9a:	463b      	mov	r3, r7
 8001f9c:	220c      	movs	r2, #12
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4807      	ldr	r0, [pc, #28]	; (8001fc0 <MX_TIM5_Init+0xac>)
 8001fa2:	f00e fe87 	bl	8010cb4 <HAL_TIM_PWM_ConfigChannel>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001fac:	f000 fab0 	bl	8002510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001fb0:	4803      	ldr	r0, [pc, #12]	; (8001fc0 <MX_TIM5_Init+0xac>)
 8001fb2:	f001 fb23 	bl	80035fc <HAL_TIM_MspPostInit>

}
 8001fb6:	bf00      	nop
 8001fb8:	3728      	adds	r7, #40	; 0x28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	240011b0 	.word	0x240011b0
 8001fc4:	40000c00 	.word	0x40000c00

08001fc8 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001fcc:	4b0e      	ldr	r3, [pc, #56]	; (8002008 <MX_TIM13_Init+0x40>)
 8001fce:	4a0f      	ldr	r2, [pc, #60]	; (800200c <MX_TIM13_Init+0x44>)
 8001fd0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 99;
 8001fd2:	4b0d      	ldr	r3, [pc, #52]	; (8002008 <MX_TIM13_Init+0x40>)
 8001fd4:	2263      	movs	r2, #99	; 0x63
 8001fd6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <MX_TIM13_Init+0x40>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8001fde:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <MX_TIM13_Init+0x40>)
 8001fe0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fe4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe6:	4b08      	ldr	r3, [pc, #32]	; (8002008 <MX_TIM13_Init+0x40>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fec:	4b06      	ldr	r3, [pc, #24]	; (8002008 <MX_TIM13_Init+0x40>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001ff2:	4805      	ldr	r0, [pc, #20]	; (8002008 <MX_TIM13_Init+0x40>)
 8001ff4:	f00e f93f 	bl	8010276 <HAL_TIM_Base_Init>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8001ffe:	f000 fa87 	bl	8002510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	240011fc 	.word	0x240011fc
 800200c:	40001c00 	.word	0x40001c00

08002010 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002014:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <MX_TIM14_Init+0x40>)
 8002016:	4a0f      	ldr	r2, [pc, #60]	; (8002054 <MX_TIM14_Init+0x44>)
 8002018:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 99;
 800201a:	4b0d      	ldr	r3, [pc, #52]	; (8002050 <MX_TIM14_Init+0x40>)
 800201c:	2263      	movs	r2, #99	; 0x63
 800201e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002020:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <MX_TIM14_Init+0x40>)
 8002022:	2200      	movs	r2, #0
 8002024:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8002026:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <MX_TIM14_Init+0x40>)
 8002028:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800202c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800202e:	4b08      	ldr	r3, [pc, #32]	; (8002050 <MX_TIM14_Init+0x40>)
 8002030:	2200      	movs	r2, #0
 8002032:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <MX_TIM14_Init+0x40>)
 8002036:	2200      	movs	r2, #0
 8002038:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800203a:	4805      	ldr	r0, [pc, #20]	; (8002050 <MX_TIM14_Init+0x40>)
 800203c:	f00e f91b 	bl	8010276 <HAL_TIM_Base_Init>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8002046:	f000 fa63 	bl	8002510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	24001248 	.word	0x24001248
 8002054:	40002000 	.word	0x40002000

08002058 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800205c:	4b22      	ldr	r3, [pc, #136]	; (80020e8 <MX_UART4_Init+0x90>)
 800205e:	4a23      	ldr	r2, [pc, #140]	; (80020ec <MX_UART4_Init+0x94>)
 8002060:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002062:	4b21      	ldr	r3, [pc, #132]	; (80020e8 <MX_UART4_Init+0x90>)
 8002064:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002068:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800206a:	4b1f      	ldr	r3, [pc, #124]	; (80020e8 <MX_UART4_Init+0x90>)
 800206c:	2200      	movs	r2, #0
 800206e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002070:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <MX_UART4_Init+0x90>)
 8002072:	2200      	movs	r2, #0
 8002074:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002076:	4b1c      	ldr	r3, [pc, #112]	; (80020e8 <MX_UART4_Init+0x90>)
 8002078:	2200      	movs	r2, #0
 800207a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800207c:	4b1a      	ldr	r3, [pc, #104]	; (80020e8 <MX_UART4_Init+0x90>)
 800207e:	220c      	movs	r2, #12
 8002080:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002082:	4b19      	ldr	r3, [pc, #100]	; (80020e8 <MX_UART4_Init+0x90>)
 8002084:	2200      	movs	r2, #0
 8002086:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002088:	4b17      	ldr	r3, [pc, #92]	; (80020e8 <MX_UART4_Init+0x90>)
 800208a:	2200      	movs	r2, #0
 800208c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800208e:	4b16      	ldr	r3, [pc, #88]	; (80020e8 <MX_UART4_Init+0x90>)
 8002090:	2200      	movs	r2, #0
 8002092:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002094:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <MX_UART4_Init+0x90>)
 8002096:	2200      	movs	r2, #0
 8002098:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800209a:	4b13      	ldr	r3, [pc, #76]	; (80020e8 <MX_UART4_Init+0x90>)
 800209c:	2200      	movs	r2, #0
 800209e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80020a0:	4811      	ldr	r0, [pc, #68]	; (80020e8 <MX_UART4_Init+0x90>)
 80020a2:	f00f fc8f 	bl	80119c4 <HAL_UART_Init>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80020ac:	f000 fa30 	bl	8002510 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020b0:	2100      	movs	r1, #0
 80020b2:	480d      	ldr	r0, [pc, #52]	; (80020e8 <MX_UART4_Init+0x90>)
 80020b4:	f010 fd95 	bl	8012be2 <HAL_UARTEx_SetTxFifoThreshold>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80020be:	f000 fa27 	bl	8002510 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020c2:	2100      	movs	r1, #0
 80020c4:	4808      	ldr	r0, [pc, #32]	; (80020e8 <MX_UART4_Init+0x90>)
 80020c6:	f010 fdca 	bl	8012c5e <HAL_UARTEx_SetRxFifoThreshold>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80020d0:	f000 fa1e 	bl	8002510 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80020d4:	4804      	ldr	r0, [pc, #16]	; (80020e8 <MX_UART4_Init+0x90>)
 80020d6:	f010 fd4b 	bl	8012b70 <HAL_UARTEx_DisableFifoMode>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80020e0:	f000 fa16 	bl	8002510 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80020e4:	bf00      	nop
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	240014ec 	.word	0x240014ec
 80020ec:	40004c00 	.word	0x40004c00

080020f0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80020f4:	4b22      	ldr	r3, [pc, #136]	; (8002180 <MX_USART6_UART_Init+0x90>)
 80020f6:	4a23      	ldr	r2, [pc, #140]	; (8002184 <MX_USART6_UART_Init+0x94>)
 80020f8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80020fa:	4b21      	ldr	r3, [pc, #132]	; (8002180 <MX_USART6_UART_Init+0x90>)
 80020fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002100:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002102:	4b1f      	ldr	r3, [pc, #124]	; (8002180 <MX_USART6_UART_Init+0x90>)
 8002104:	2200      	movs	r2, #0
 8002106:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002108:	4b1d      	ldr	r3, [pc, #116]	; (8002180 <MX_USART6_UART_Init+0x90>)
 800210a:	2200      	movs	r2, #0
 800210c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800210e:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <MX_USART6_UART_Init+0x90>)
 8002110:	2200      	movs	r2, #0
 8002112:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002114:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <MX_USART6_UART_Init+0x90>)
 8002116:	220c      	movs	r2, #12
 8002118:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800211a:	4b19      	ldr	r3, [pc, #100]	; (8002180 <MX_USART6_UART_Init+0x90>)
 800211c:	2200      	movs	r2, #0
 800211e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002120:	4b17      	ldr	r3, [pc, #92]	; (8002180 <MX_USART6_UART_Init+0x90>)
 8002122:	2200      	movs	r2, #0
 8002124:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002126:	4b16      	ldr	r3, [pc, #88]	; (8002180 <MX_USART6_UART_Init+0x90>)
 8002128:	2200      	movs	r2, #0
 800212a:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800212c:	4b14      	ldr	r3, [pc, #80]	; (8002180 <MX_USART6_UART_Init+0x90>)
 800212e:	2200      	movs	r2, #0
 8002130:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002132:	4b13      	ldr	r3, [pc, #76]	; (8002180 <MX_USART6_UART_Init+0x90>)
 8002134:	2200      	movs	r2, #0
 8002136:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002138:	4811      	ldr	r0, [pc, #68]	; (8002180 <MX_USART6_UART_Init+0x90>)
 800213a:	f00f fc43 	bl	80119c4 <HAL_UART_Init>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002144:	f000 f9e4 	bl	8002510 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002148:	2100      	movs	r1, #0
 800214a:	480d      	ldr	r0, [pc, #52]	; (8002180 <MX_USART6_UART_Init+0x90>)
 800214c:	f010 fd49 	bl	8012be2 <HAL_UARTEx_SetTxFifoThreshold>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8002156:	f000 f9db 	bl	8002510 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800215a:	2100      	movs	r1, #0
 800215c:	4808      	ldr	r0, [pc, #32]	; (8002180 <MX_USART6_UART_Init+0x90>)
 800215e:	f010 fd7e 	bl	8012c5e <HAL_UARTEx_SetRxFifoThreshold>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002168:	f000 f9d2 	bl	8002510 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 800216c:	4804      	ldr	r0, [pc, #16]	; (8002180 <MX_USART6_UART_Init+0x90>)
 800216e:	f010 fcff 	bl	8012b70 <HAL_UARTEx_DisableFifoMode>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002178:	f000 f9ca 	bl	8002510 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800217c:	bf00      	nop
 800217e:	bd80      	pop	{r7, pc}
 8002180:	24001580 	.word	0x24001580
 8002184:	40011400 	.word	0x40011400

08002188 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800218e:	4b2d      	ldr	r3, [pc, #180]	; (8002244 <MX_DMA_Init+0xbc>)
 8002190:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002194:	4a2b      	ldr	r2, [pc, #172]	; (8002244 <MX_DMA_Init+0xbc>)
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800219e:	4b29      	ldr	r3, [pc, #164]	; (8002244 <MX_DMA_Init+0xbc>)
 80021a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	607b      	str	r3, [r7, #4]
 80021aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80021ac:	4b25      	ldr	r3, [pc, #148]	; (8002244 <MX_DMA_Init+0xbc>)
 80021ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80021b2:	4a24      	ldr	r2, [pc, #144]	; (8002244 <MX_DMA_Init+0xbc>)
 80021b4:	f043 0302 	orr.w	r3, r3, #2
 80021b8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80021bc:	4b21      	ldr	r3, [pc, #132]	; (8002244 <MX_DMA_Init+0xbc>)
 80021be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	603b      	str	r3, [r7, #0]
 80021c8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2100      	movs	r1, #0
 80021ce:	200b      	movs	r0, #11
 80021d0:	f003 fe65 	bl	8005e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80021d4:	200b      	movs	r0, #11
 80021d6:	f003 fe7c 	bl	8005ed2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80021da:	2200      	movs	r2, #0
 80021dc:	2100      	movs	r1, #0
 80021de:	200c      	movs	r0, #12
 80021e0:	f003 fe5d 	bl	8005e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80021e4:	200c      	movs	r0, #12
 80021e6:	f003 fe74 	bl	8005ed2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80021ea:	2200      	movs	r2, #0
 80021ec:	2100      	movs	r1, #0
 80021ee:	200d      	movs	r0, #13
 80021f0:	f003 fe55 	bl	8005e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80021f4:	200d      	movs	r0, #13
 80021f6:	f003 fe6c 	bl	8005ed2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80021fa:	2200      	movs	r2, #0
 80021fc:	2100      	movs	r1, #0
 80021fe:	200e      	movs	r0, #14
 8002200:	f003 fe4d 	bl	8005e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002204:	200e      	movs	r0, #14
 8002206:	f003 fe64 	bl	8005ed2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800220a:	2200      	movs	r2, #0
 800220c:	2100      	movs	r1, #0
 800220e:	200f      	movs	r0, #15
 8002210:	f003 fe45 	bl	8005e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002214:	200f      	movs	r0, #15
 8002216:	f003 fe5c 	bl	8005ed2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800221a:	2200      	movs	r2, #0
 800221c:	2100      	movs	r1, #0
 800221e:	2010      	movs	r0, #16
 8002220:	f003 fe3d 	bl	8005e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002224:	2010      	movs	r0, #16
 8002226:	f003 fe54 	bl	8005ed2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800222a:	2200      	movs	r2, #0
 800222c:	2100      	movs	r1, #0
 800222e:	2046      	movs	r0, #70	; 0x46
 8002230:	f003 fe35 	bl	8005e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002234:	2046      	movs	r0, #70	; 0x46
 8002236:	f003 fe4c 	bl	8005ed2 <HAL_NVIC_EnableIRQ>

}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	58024400 	.word	0x58024400

08002248 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08c      	sub	sp, #48	; 0x30
 800224c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224e:	f107 031c 	add.w	r3, r7, #28
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	605a      	str	r2, [r3, #4]
 8002258:	609a      	str	r2, [r3, #8]
 800225a:	60da      	str	r2, [r3, #12]
 800225c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800225e:	4ba4      	ldr	r3, [pc, #656]	; (80024f0 <MX_GPIO_Init+0x2a8>)
 8002260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002264:	4aa2      	ldr	r2, [pc, #648]	; (80024f0 <MX_GPIO_Init+0x2a8>)
 8002266:	f043 0310 	orr.w	r3, r3, #16
 800226a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800226e:	4ba0      	ldr	r3, [pc, #640]	; (80024f0 <MX_GPIO_Init+0x2a8>)
 8002270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002274:	f003 0310 	and.w	r3, r3, #16
 8002278:	61bb      	str	r3, [r7, #24]
 800227a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800227c:	4b9c      	ldr	r3, [pc, #624]	; (80024f0 <MX_GPIO_Init+0x2a8>)
 800227e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002282:	4a9b      	ldr	r2, [pc, #620]	; (80024f0 <MX_GPIO_Init+0x2a8>)
 8002284:	f043 0320 	orr.w	r3, r3, #32
 8002288:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800228c:	4b98      	ldr	r3, [pc, #608]	; (80024f0 <MX_GPIO_Init+0x2a8>)
 800228e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002292:	f003 0320 	and.w	r3, r3, #32
 8002296:	617b      	str	r3, [r7, #20]
 8002298:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800229a:	4b95      	ldr	r3, [pc, #596]	; (80024f0 <MX_GPIO_Init+0x2a8>)
 800229c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022a0:	4a93      	ldr	r2, [pc, #588]	; (80024f0 <MX_GPIO_Init+0x2a8>)
 80022a2:	f043 0304 	orr.w	r3, r3, #4
 80022a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022aa:	4b91      	ldr	r3, [pc, #580]	; (80024f0 <MX_GPIO_Init+0x2a8>)
 80022ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	613b      	str	r3, [r7, #16]
 80022b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b8:	4b8d      	ldr	r3, [pc, #564]	; (80024f0 <MX_GPIO_Init+0x2a8>)
 80022ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022be:	4a8c      	ldr	r2, [pc, #560]	; (80024f0 <MX_GPIO_Init+0x2a8>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022c8:	4b89      	ldr	r3, [pc, #548]	; (80024f0 <MX_GPIO_Init+0x2a8>)
 80022ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d6:	4b86      	ldr	r3, [pc, #536]	; (80024f0 <MX_GPIO_Init+0x2a8>)
 80022d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022dc:	4a84      	ldr	r2, [pc, #528]	; (80024f0 <MX_GPIO_Init+0x2a8>)
 80022de:	f043 0302 	orr.w	r3, r3, #2
 80022e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022e6:	4b82      	ldr	r3, [pc, #520]	; (80024f0 <MX_GPIO_Init+0x2a8>)
 80022e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022f4:	4b7e      	ldr	r3, [pc, #504]	; (80024f0 <MX_GPIO_Init+0x2a8>)
 80022f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022fa:	4a7d      	ldr	r2, [pc, #500]	; (80024f0 <MX_GPIO_Init+0x2a8>)
 80022fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002300:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002304:	4b7a      	ldr	r3, [pc, #488]	; (80024f0 <MX_GPIO_Init+0x2a8>)
 8002306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800230a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800230e:	607b      	str	r3, [r7, #4]
 8002310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002312:	4b77      	ldr	r3, [pc, #476]	; (80024f0 <MX_GPIO_Init+0x2a8>)
 8002314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002318:	4a75      	ldr	r2, [pc, #468]	; (80024f0 <MX_GPIO_Init+0x2a8>)
 800231a:	f043 0308 	orr.w	r3, r3, #8
 800231e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002322:	4b73      	ldr	r3, [pc, #460]	; (80024f0 <MX_GPIO_Init+0x2a8>)
 8002324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002328:	f003 0308 	and.w	r3, r3, #8
 800232c:	603b      	str	r3, [r7, #0]
 800232e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 8002330:	2200      	movs	r2, #0
 8002332:	f241 5104 	movw	r1, #5380	; 0x1504
 8002336:	486f      	ldr	r0, [pc, #444]	; (80024f4 <MX_GPIO_Init+0x2ac>)
 8002338:	f006 fbde 	bl	8008af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 800233c:	2200      	movs	r2, #0
 800233e:	f248 0102 	movw	r1, #32770	; 0x8002
 8002342:	486d      	ldr	r0, [pc, #436]	; (80024f8 <MX_GPIO_Init+0x2b0>)
 8002344:	f006 fbd8 	bl	8008af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002348:	2200      	movs	r2, #0
 800234a:	2130      	movs	r1, #48	; 0x30
 800234c:	486b      	ldr	r0, [pc, #428]	; (80024fc <MX_GPIO_Init+0x2b4>)
 800234e:	f006 fbd3 	bl	8008af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, GPIO_PIN_RESET);
 8002352:	2200      	movs	r2, #0
 8002354:	2102      	movs	r1, #2
 8002356:	486a      	ldr	r0, [pc, #424]	; (8002500 <MX_GPIO_Init+0x2b8>)
 8002358:	f006 fbce 	bl	8008af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 800235c:	2200      	movs	r2, #0
 800235e:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8002362:	4868      	ldr	r0, [pc, #416]	; (8002504 <MX_GPIO_Init+0x2bc>)
 8002364:	f006 fbc8 	bl	8008af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002368:	2200      	movs	r2, #0
 800236a:	210e      	movs	r1, #14
 800236c:	4866      	ldr	r0, [pc, #408]	; (8002508 <MX_GPIO_Init+0x2c0>)
 800236e:	f006 fbc3 	bl	8008af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0, GPIO_PIN_RESET);
 8002372:	2200      	movs	r2, #0
 8002374:	f240 3101 	movw	r1, #769	; 0x301
 8002378:	4864      	ldr	r0, [pc, #400]	; (800250c <MX_GPIO_Init+0x2c4>)
 800237a:	f006 fbbd 	bl	8008af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 800237e:	f241 5304 	movw	r3, #5380	; 0x1504
 8002382:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002384:	2301      	movs	r3, #1
 8002386:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238c:	2300      	movs	r3, #0
 800238e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002390:	f107 031c 	add.w	r3, r7, #28
 8002394:	4619      	mov	r1, r3
 8002396:	4857      	ldr	r0, [pc, #348]	; (80024f4 <MX_GPIO_Init+0x2ac>)
 8002398:	f006 f9ee 	bl	8008778 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|GPIO_PIN_15;
 800239c:	f248 0302 	movw	r3, #32770	; 0x8002
 80023a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a2:	2301      	movs	r3, #1
 80023a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023aa:	2300      	movs	r3, #0
 80023ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ae:	f107 031c 	add.w	r3, r7, #28
 80023b2:	4619      	mov	r1, r3
 80023b4:	4850      	ldr	r0, [pc, #320]	; (80024f8 <MX_GPIO_Init+0x2b0>)
 80023b6:	f006 f9df 	bl	8008778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80023ba:	2330      	movs	r3, #48	; 0x30
 80023bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023be:	2301      	movs	r3, #1
 80023c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c6:	2300      	movs	r3, #0
 80023c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023ca:	f107 031c 	add.w	r3, r7, #28
 80023ce:	4619      	mov	r1, r3
 80023d0:	484a      	ldr	r0, [pc, #296]	; (80024fc <MX_GPIO_Init+0x2b4>)
 80023d2:	f006 f9d1 	bl	8008778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PYRO1_Pin */
  GPIO_InitStruct.Pin = PYRO1_Pin;
 80023d6:	2302      	movs	r3, #2
 80023d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023da:	2301      	movs	r3, #1
 80023dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023de:	2300      	movs	r3, #0
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e2:	2300      	movs	r3, #0
 80023e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PYRO1_GPIO_Port, &GPIO_InitStruct);
 80023e6:	f107 031c 	add.w	r3, r7, #28
 80023ea:	4619      	mov	r1, r3
 80023ec:	4844      	ldr	r0, [pc, #272]	; (8002500 <MX_GPIO_Init+0x2b8>)
 80023ee:	f006 f9c3 	bl	8008778 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 80023f2:	2304      	movs	r3, #4
 80023f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023f6:	2300      	movs	r3, #0
 80023f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023fa:	2301      	movs	r3, #1
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 80023fe:	f107 031c 	add.w	r3, r7, #28
 8002402:	4619      	mov	r1, r3
 8002404:	483e      	ldr	r0, [pc, #248]	; (8002500 <MX_GPIO_Init+0x2b8>)
 8002406:	f006 f9b7 	bl	8008778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 800240a:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 800240e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002410:	2301      	movs	r3, #1
 8002412:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002414:	2300      	movs	r3, #0
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002418:	2300      	movs	r3, #0
 800241a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800241c:	f107 031c 	add.w	r3, r7, #28
 8002420:	4619      	mov	r1, r3
 8002422:	4838      	ldr	r0, [pc, #224]	; (8002504 <MX_GPIO_Init+0x2bc>)
 8002424:	f006 f9a8 	bl	8008778 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 8002428:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800242c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800242e:	2300      	movs	r3, #0
 8002430:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002432:	2301      	movs	r3, #1
 8002434:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002436:	f107 031c 	add.w	r3, r7, #28
 800243a:	4619      	mov	r1, r3
 800243c:	4831      	ldr	r0, [pc, #196]	; (8002504 <MX_GPIO_Init+0x2bc>)
 800243e:	f006 f99b 	bl	8008778 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 8002442:	2301      	movs	r3, #1
 8002444:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002446:	2300      	movs	r3, #0
 8002448:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800244a:	2301      	movs	r3, #1
 800244c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 800244e:	f107 031c 	add.w	r3, r7, #28
 8002452:	4619      	mov	r1, r3
 8002454:	482c      	ldr	r0, [pc, #176]	; (8002508 <MX_GPIO_Init+0x2c0>)
 8002456:	f006 f98f 	bl	8008778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 800245a:	230e      	movs	r3, #14
 800245c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800245e:	2301      	movs	r3, #1
 8002460:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002466:	2300      	movs	r3, #0
 8002468:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800246a:	f107 031c 	add.w	r3, r7, #28
 800246e:	4619      	mov	r1, r3
 8002470:	4825      	ldr	r0, [pc, #148]	; (8002508 <MX_GPIO_Init+0x2c0>)
 8002472:	f006 f981 	bl	8008778 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 8002476:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 800247a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800247c:	2300      	movs	r3, #0
 800247e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002480:	2301      	movs	r3, #1
 8002482:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002484:	f107 031c 	add.w	r3, r7, #28
 8002488:	4619      	mov	r1, r3
 800248a:	481a      	ldr	r0, [pc, #104]	; (80024f4 <MX_GPIO_Init+0x2ac>)
 800248c:	f006 f974 	bl	8008778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0;
 8002490:	f240 3301 	movw	r3, #769	; 0x301
 8002494:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002496:	2301      	movs	r3, #1
 8002498:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249a:	2300      	movs	r3, #0
 800249c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249e:	2300      	movs	r3, #0
 80024a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024a2:	f107 031c 	add.w	r3, r7, #28
 80024a6:	4619      	mov	r1, r3
 80024a8:	4818      	ldr	r0, [pc, #96]	; (800250c <MX_GPIO_Init+0x2c4>)
 80024aa:	f006 f965 	bl	8008778 <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 80024ae:	2310      	movs	r3, #16
 80024b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024b2:	2300      	movs	r3, #0
 80024b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 80024ba:	f107 031c 	add.w	r3, r7, #28
 80024be:	4619      	mov	r1, r3
 80024c0:	4811      	ldr	r0, [pc, #68]	; (8002508 <MX_GPIO_Init+0x2c0>)
 80024c2:	f006 f959 	bl	8008778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80024c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024cc:	2302      	movs	r3, #2
 80024ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d4:	2300      	movs	r3, #0
 80024d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80024d8:	2300      	movs	r3, #0
 80024da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024dc:	f107 031c 	add.w	r3, r7, #28
 80024e0:	4619      	mov	r1, r3
 80024e2:	4805      	ldr	r0, [pc, #20]	; (80024f8 <MX_GPIO_Init+0x2b0>)
 80024e4:	f006 f948 	bl	8008778 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80024e8:	bf00      	nop
 80024ea:	3730      	adds	r7, #48	; 0x30
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	58024400 	.word	0x58024400
 80024f4:	58021000 	.word	0x58021000
 80024f8:	58020000 	.word	0x58020000
 80024fc:	58020800 	.word	0x58020800
 8002500:	58020400 	.word	0x58020400
 8002504:	58021400 	.word	0x58021400
 8002508:	58021800 	.word	0x58021800
 800250c:	58020c00 	.word	0x58020c00

08002510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002514:	b672      	cpsid	i
}
 8002516:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002518:	e7fe      	b.n	8002518 <Error_Handler+0x8>
	...

0800251c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
void MX_RNG_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002520:	4b09      	ldr	r3, [pc, #36]	; (8002548 <MX_RNG_Init+0x2c>)
 8002522:	4a0a      	ldr	r2, [pc, #40]	; (800254c <MX_RNG_Init+0x30>)
 8002524:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8002526:	4b08      	ldr	r3, [pc, #32]	; (8002548 <MX_RNG_Init+0x2c>)
 8002528:	2200      	movs	r2, #0
 800252a:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800252c:	4806      	ldr	r0, [pc, #24]	; (8002548 <MX_RNG_Init+0x2c>)
 800252e:	f00b faf7 	bl	800db20 <HAL_RNG_Init>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8002538:	f7ff ffea 	bl	8002510 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */
  initialized = 1;
 800253c:	4b04      	ldr	r3, [pc, #16]	; (8002550 <MX_RNG_Init+0x34>)
 800253e:	2201      	movs	r2, #1
 8002540:	601a      	str	r2, [r3, #0]
  /* USER CODE END RNG_Init 2 */

}
 8002542:	bf00      	nop
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	24003684 	.word	0x24003684
 800254c:	48021800 	.word	0x48021800
 8002550:	24003680 	.word	0x24003680

08002554 <rand_range>:


uint32_t rand_range(uint32_t a, uint32_t b) {
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
	if(!initialized)
 800255e:	4b1c      	ldr	r3, [pc, #112]	; (80025d0 <rand_range+0x7c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d109      	bne.n	800257a <rand_range+0x26>
	{
		HAL_Delay(100);
 8002566:	2064      	movs	r0, #100	; 0x64
 8002568:	f001 fbc8 	bl	8003cfc <HAL_Delay>
		CDC_Transmit_HS("Random not initialized!\n", strlen("Random not initialized!\n"));
 800256c:	2118      	movs	r1, #24
 800256e:	4819      	ldr	r0, [pc, #100]	; (80025d4 <rand_range+0x80>)
 8002570:	f017 ffc2 	bl	801a4f8 <CDC_Transmit_HS>
		return -1;
 8002574:	f04f 33ff 	mov.w	r3, #4294967295
 8002578:	e026      	b.n	80025c8 <rand_range+0x74>
	}

	uint32_t rand = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	60bb      	str	r3, [r7, #8]
	uint32_t MAX = 4294967295;
 800257e:	f04f 33ff 	mov.w	r3, #4294967295
 8002582:	60fb      	str	r3, [r7, #12]
	if(b>a && HAL_RNG_GenerateRandomNumber(&hrng, &rand) == HAL_OK)
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	429a      	cmp	r2, r3
 800258a:	d914      	bls.n	80025b6 <rand_range+0x62>
 800258c:	f107 0308 	add.w	r3, r7, #8
 8002590:	4619      	mov	r1, r3
 8002592:	4811      	ldr	r0, [pc, #68]	; (80025d8 <rand_range+0x84>)
 8002594:	f00b fb68 	bl	800dc68 <HAL_RNG_GenerateRandomNumber>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10b      	bne.n	80025b6 <rand_range+0x62>
	{
		return a+rand/(MAX/(b-a));
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	6839      	ldr	r1, [r7, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	1acb      	subs	r3, r1, r3
 80025a6:	68f9      	ldr	r1, [r7, #12]
 80025a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80025ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4413      	add	r3, r2
 80025b4:	e008      	b.n	80025c8 <rand_range+0x74>
	}
	else
	{
		HAL_Delay(100);
 80025b6:	2064      	movs	r0, #100	; 0x64
 80025b8:	f001 fba0 	bl	8003cfc <HAL_Delay>
		CDC_Transmit_HS("rng error\n", strlen("rng error\n"));
 80025bc:	210a      	movs	r1, #10
 80025be:	4807      	ldr	r0, [pc, #28]	; (80025dc <rand_range+0x88>)
 80025c0:	f017 ff9a 	bl	801a4f8 <CDC_Transmit_HS>
	}
	return -1;
 80025c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	24003680 	.word	0x24003680
 80025d4:	0801c11c 	.word	0x0801c11c
 80025d8:	24003684 	.word	0x24003684
 80025dc:	0801c138 	.word	0x0801c138

080025e0 <disarm>:
extern uint32_t LED_Color_Data[NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3][3];
extern FATFS FatFs;
extern FIL Fil;
extern FRESULT FR_Status;

int disarm(char *state) {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 80025e8:	2200      	movs	r2, #0
 80025ea:	2102      	movs	r1, #2
 80025ec:	482d      	ldr	r0, [pc, #180]	; (80026a4 <disarm+0xc4>)
 80025ee:	f006 fa83 	bl	8008af8 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);

	HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 80025f2:	2200      	movs	r2, #0
 80025f4:	2102      	movs	r1, #2
 80025f6:	482c      	ldr	r0, [pc, #176]	; (80026a8 <disarm+0xc8>)
 80025f8:	f006 fa7e 	bl	8008af8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 80025fc:	2200      	movs	r2, #0
 80025fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002602:	482a      	ldr	r0, [pc, #168]	; (80026ac <disarm+0xcc>)
 8002604:	f006 fa78 	bl	8008af8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 8002608:	2200      	movs	r2, #0
 800260a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800260e:	4827      	ldr	r0, [pc, #156]	; (80026ac <disarm+0xcc>)
 8002610:	f006 fa72 	bl	8008af8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 8002614:	2200      	movs	r2, #0
 8002616:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800261a:	4824      	ldr	r0, [pc, #144]	; (80026ac <disarm+0xcc>)
 800261c:	f006 fa6c 	bl	8008af8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 8002620:	2200      	movs	r2, #0
 8002622:	2102      	movs	r1, #2
 8002624:	4822      	ldr	r0, [pc, #136]	; (80026b0 <disarm+0xd0>)
 8002626:	f006 fa67 	bl	8008af8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 800262a:	2200      	movs	r2, #0
 800262c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002630:	4820      	ldr	r0, [pc, #128]	; (80026b4 <disarm+0xd4>)
 8002632:	f006 fa61 	bl	8008af8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 8002636:	2200      	movs	r2, #0
 8002638:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800263c:	481d      	ldr	r0, [pc, #116]	; (80026b4 <disarm+0xd4>)
 800263e:	f006 fa5b 	bl	8008af8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 8002642:	2200      	movs	r2, #0
 8002644:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002648:	481a      	ldr	r0, [pc, #104]	; (80026b4 <disarm+0xd4>)
 800264a:	f006 fa55 	bl	8008af8 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800264e:	210c      	movs	r1, #12
 8002650:	4819      	ldr	r0, [pc, #100]	; (80026b8 <disarm+0xd8>)
 8002652:	f00d febf 	bl	80103d4 <HAL_TIM_PWM_Start>
	setServo(1, 0);
 8002656:	2100      	movs	r1, #0
 8002658:	2001      	movs	r0, #1
 800265a:	f7fe fd4d 	bl	80010f8 <setServo>

	LED_Color_Data[7][0] = 255;
 800265e:	4b17      	ldr	r3, [pc, #92]	; (80026bc <disarm+0xdc>)
 8002660:	22ff      	movs	r2, #255	; 0xff
 8002662:	655a      	str	r2, [r3, #84]	; 0x54
	LED_Color_Data[7][1] = 0;
 8002664:	4b15      	ldr	r3, [pc, #84]	; (80026bc <disarm+0xdc>)
 8002666:	2200      	movs	r2, #0
 8002668:	659a      	str	r2, [r3, #88]	; 0x58
	LED_Color_Data[7][2] = 0;
 800266a:	4b14      	ldr	r3, [pc, #80]	; (80026bc <disarm+0xdc>)
 800266c:	2200      	movs	r2, #0
 800266e:	65da      	str	r2, [r3, #92]	; 0x5c

	LED_Color_Data[2][0] = 255;
 8002670:	4b12      	ldr	r3, [pc, #72]	; (80026bc <disarm+0xdc>)
 8002672:	22ff      	movs	r2, #255	; 0xff
 8002674:	619a      	str	r2, [r3, #24]
	LED_Color_Data[2][1] = 0;
 8002676:	4b11      	ldr	r3, [pc, #68]	; (80026bc <disarm+0xdc>)
 8002678:	2200      	movs	r2, #0
 800267a:	61da      	str	r2, [r3, #28]
	LED_Color_Data[2][2] = 0;
 800267c:	4b0f      	ldr	r3, [pc, #60]	; (80026bc <disarm+0xdc>)
 800267e:	2200      	movs	r2, #0
 8002680:	621a      	str	r2, [r3, #32]
	setLEDs();
 8002682:	f7fe fd81 	bl	8001188 <setLEDs>

	strcpy(state, "DISARMED");
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	490d      	ldr	r1, [pc, #52]	; (80026c0 <disarm+0xe0>)
 800268a:	461a      	mov	r2, r3
 800268c:	460b      	mov	r3, r1
 800268e:	cb03      	ldmia	r3!, {r0, r1}
 8002690:	6010      	str	r0, [r2, #0]
 8002692:	6051      	str	r1, [r2, #4]
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	7213      	strb	r3, [r2, #8]
	return 0;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	58020000 	.word	0x58020000
 80026a8:	58020400 	.word	0x58020400
 80026ac:	58021400 	.word	0x58021400
 80026b0:	58021800 	.word	0x58021800
 80026b4:	58021000 	.word	0x58021000
 80026b8:	24001164 	.word	0x24001164
 80026bc:	24000b4c 	.word	0x24000b4c
 80026c0:	0801c144 	.word	0x0801c144

080026c4 <arm>:

int arm(char *state) {
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 1);
 80026cc:	2201      	movs	r2, #1
 80026ce:	2102      	movs	r1, #2
 80026d0:	4810      	ldr	r0, [pc, #64]	; (8002714 <arm+0x50>)
 80026d2:	f006 fa11 	bl	8008af8 <HAL_GPIO_WritePin>
//HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 1);

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80026d6:	210c      	movs	r1, #12
 80026d8:	480f      	ldr	r0, [pc, #60]	; (8002718 <arm+0x54>)
 80026da:	f00d fe7b 	bl	80103d4 <HAL_TIM_PWM_Start>
	setServo(1, 100);
 80026de:	2164      	movs	r1, #100	; 0x64
 80026e0:	2001      	movs	r0, #1
 80026e2:	f7fe fd09 	bl	80010f8 <setServo>

	strcpy(state, "ARMED");
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a0c      	ldr	r2, [pc, #48]	; (800271c <arm+0x58>)
 80026ea:	6810      	ldr	r0, [r2, #0]
 80026ec:	6018      	str	r0, [r3, #0]
 80026ee:	8892      	ldrh	r2, [r2, #4]
 80026f0:	809a      	strh	r2, [r3, #4]
	LED_Color_Data[7][0] = 0;
 80026f2:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <arm+0x5c>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	655a      	str	r2, [r3, #84]	; 0x54
	LED_Color_Data[7][1] = 255;
 80026f8:	4b09      	ldr	r3, [pc, #36]	; (8002720 <arm+0x5c>)
 80026fa:	22ff      	movs	r2, #255	; 0xff
 80026fc:	659a      	str	r2, [r3, #88]	; 0x58
	LED_Color_Data[7][2] = 0;
 80026fe:	4b08      	ldr	r3, [pc, #32]	; (8002720 <arm+0x5c>)
 8002700:	2200      	movs	r2, #0
 8002702:	65da      	str	r2, [r3, #92]	; 0x5c
	setLEDs();
 8002704:	f7fe fd40 	bl	8001188 <setLEDs>
	return 0;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	58020000 	.word	0x58020000
 8002718:	24001164 	.word	0x24001164
 800271c:	0801c150 	.word	0x0801c150
 8002720:	24000b4c 	.word	0x24000b4c

08002724 <pyro_check_continuity>:

void pyro_check_continuity(uint8_t CONTS[]) {
 8002724:	b590      	push	{r4, r7, lr}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
	CONTS[0] = HAL_GPIO_ReadPin(CONT1_GPIO_Port, CONT1_Pin);
 800272c:	2104      	movs	r1, #4
 800272e:	4824      	ldr	r0, [pc, #144]	; (80027c0 <pyro_check_continuity+0x9c>)
 8002730:	f006 f9ca 	bl	8008ac8 <HAL_GPIO_ReadPin>
 8002734:	4603      	mov	r3, r0
 8002736:	461a      	mov	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	701a      	strb	r2, [r3, #0]
	CONTS[1] = HAL_GPIO_ReadPin(CONT2_GPIO_Port, CONT2_Pin);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	1c5c      	adds	r4, r3, #1
 8002740:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002744:	481f      	ldr	r0, [pc, #124]	; (80027c4 <pyro_check_continuity+0xa0>)
 8002746:	f006 f9bf 	bl	8008ac8 <HAL_GPIO_ReadPin>
 800274a:	4603      	mov	r3, r0
 800274c:	7023      	strb	r3, [r4, #0]
	CONTS[2] = HAL_GPIO_ReadPin(CONT3_GPIO_Port, CONT3_Pin);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	1c9c      	adds	r4, r3, #2
 8002752:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002756:	481b      	ldr	r0, [pc, #108]	; (80027c4 <pyro_check_continuity+0xa0>)
 8002758:	f006 f9b6 	bl	8008ac8 <HAL_GPIO_ReadPin>
 800275c:	4603      	mov	r3, r0
 800275e:	7023      	strb	r3, [r4, #0]
	CONTS[3] = HAL_GPIO_ReadPin(CONT4_GPIO_Port, CONT4_Pin);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	1cdc      	adds	r4, r3, #3
 8002764:	2101      	movs	r1, #1
 8002766:	4818      	ldr	r0, [pc, #96]	; (80027c8 <pyro_check_continuity+0xa4>)
 8002768:	f006 f9ae 	bl	8008ac8 <HAL_GPIO_ReadPin>
 800276c:	4603      	mov	r3, r0
 800276e:	7023      	strb	r3, [r4, #0]
	CONTS[4] = HAL_GPIO_ReadPin(CONT5_GPIO_Port, CONT5_Pin);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	1d1c      	adds	r4, r3, #4
 8002774:	2180      	movs	r1, #128	; 0x80
 8002776:	4815      	ldr	r0, [pc, #84]	; (80027cc <pyro_check_continuity+0xa8>)
 8002778:	f006 f9a6 	bl	8008ac8 <HAL_GPIO_ReadPin>
 800277c:	4603      	mov	r3, r0
 800277e:	7023      	strb	r3, [r4, #0]
	CONTS[5] = HAL_GPIO_ReadPin(CONT6_GPIO_Port, CONT6_Pin);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	1d5c      	adds	r4, r3, #5
 8002784:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002788:	4810      	ldr	r0, [pc, #64]	; (80027cc <pyro_check_continuity+0xa8>)
 800278a:	f006 f99d 	bl	8008ac8 <HAL_GPIO_ReadPin>
 800278e:	4603      	mov	r3, r0
 8002790:	7023      	strb	r3, [r4, #0]
	CONTS[6] = HAL_GPIO_ReadPin(CONT7_GPIO_Port, CONT7_Pin);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	1d9c      	adds	r4, r3, #6
 8002796:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800279a:	480c      	ldr	r0, [pc, #48]	; (80027cc <pyro_check_continuity+0xa8>)
 800279c:	f006 f994 	bl	8008ac8 <HAL_GPIO_ReadPin>
 80027a0:	4603      	mov	r3, r0
 80027a2:	7023      	strb	r3, [r4, #0]
	CONTS[7] = HAL_GPIO_ReadPin(CONT8_GPIO_Port, CONT8_Pin);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	1ddc      	adds	r4, r3, #7
 80027a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027ac:	4807      	ldr	r0, [pc, #28]	; (80027cc <pyro_check_continuity+0xa8>)
 80027ae:	f006 f98b 	bl	8008ac8 <HAL_GPIO_ReadPin>
 80027b2:	4603      	mov	r3, r0
 80027b4:	7023      	strb	r3, [r4, #0]
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd90      	pop	{r4, r7, pc}
 80027be:	bf00      	nop
 80027c0:	58020400 	.word	0x58020400
 80027c4:	58021400 	.word	0x58021400
 80027c8:	58021800 	.word	0x58021800
 80027cc:	58021000 	.word	0x58021000

080027d0 <rocketReliableReceiveHandle>:
char command[MAX_PKT_LENGTH];
char streamed_data[100];
//length is an arbitrary number, but it's unlikely to have more than 200
char* rocket_messages[200];

void rocketReliableReceiveHandle(char* received_packet) {
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
	strcpy(command, received_packet);
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	4803      	ldr	r0, [pc, #12]	; (80027e8 <rocketReliableReceiveHandle+0x18>)
 80027dc:	f018 fb62 	bl	801aea4 <strcpy>
}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	2400385c 	.word	0x2400385c

080027ec <rocketStreamReceiveHandle>:

void rocketStreamReceiveHandle(char* received_packet) {
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
	CDC_Transmit_HS(received_packet, strlen(received_packet));
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f7fd fd95 	bl	8000324 <strlen>
 80027fa:	4603      	mov	r3, r0
 80027fc:	4619      	mov	r1, r3
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f017 fe7a 	bl	801a4f8 <CDC_Transmit_HS>
}
 8002804:	bf00      	nop
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <rocketStreamSendHandle>:

char* rocketStreamSendHandle(int remainingPacketCount) {
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
	if (strcmp(state, "ARMED") == 0) {
 8002814:	491d      	ldr	r1, [pc, #116]	; (800288c <rocketStreamSendHandle+0x80>)
 8002816:	481e      	ldr	r0, [pc, #120]	; (8002890 <rocketStreamSendHandle+0x84>)
 8002818:	f7fd fd7a 	bl	8000310 <strcmp>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d12f      	bne.n	8002882 <rocketStreamSendHandle+0x76>
		if (strcmp(command, "FIRE") == 0) {
 8002822:	491c      	ldr	r1, [pc, #112]	; (8002894 <rocketStreamSendHandle+0x88>)
 8002824:	481c      	ldr	r0, [pc, #112]	; (8002898 <rocketStreamSendHandle+0x8c>)
 8002826:	f7fd fd73 	bl	8000310 <strcmp>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d128      	bne.n	8002882 <rocketStreamSendHandle+0x76>
			HAL_ADC_Start(&hadc1); // start the adc
 8002830:	481a      	ldr	r0, [pc, #104]	; (800289c <rocketStreamSendHandle+0x90>)
 8002832:	f001 ff91 	bl	8004758 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 100); // poll for conversion
 8002836:	2164      	movs	r1, #100	; 0x64
 8002838:	4818      	ldr	r0, [pc, #96]	; (800289c <rocketStreamSendHandle+0x90>)
 800283a:	f002 f88b 	bl	8004954 <HAL_ADC_PollForConversion>

			uint16_t adc_val = HAL_ADC_GetValue(&hadc1); // get the adc value
 800283e:	4817      	ldr	r0, [pc, #92]	; (800289c <rocketStreamSendHandle+0x90>)
 8002840:	f002 f97c 	bl	8004b3c <HAL_ADC_GetValue>
 8002844:	4603      	mov	r3, r0
 8002846:	81fb      	strh	r3, [r7, #14]
			sprintf(streamed_data, "%d, %d\n", HAL_GetTick(), adc_val);
 8002848:	f001 fa4c 	bl	8003ce4 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	89fb      	ldrh	r3, [r7, #14]
 8002850:	4913      	ldr	r1, [pc, #76]	; (80028a0 <rocketStreamSendHandle+0x94>)
 8002852:	4814      	ldr	r0, [pc, #80]	; (80028a4 <rocketStreamSendHandle+0x98>)
 8002854:	f018 faa4 	bl	801ada0 <siprintf>
			FR_Status = f_open(&Fil, "MyTextFile.txt",
 8002858:	2232      	movs	r2, #50	; 0x32
 800285a:	4913      	ldr	r1, [pc, #76]	; (80028a8 <rocketStreamSendHandle+0x9c>)
 800285c:	4813      	ldr	r0, [pc, #76]	; (80028ac <rocketStreamSendHandle+0xa0>)
 800285e:	f016 ffc5 	bl	80197ec <f_open>
 8002862:	4603      	mov	r3, r0
 8002864:	461a      	mov	r2, r3
 8002866:	4b12      	ldr	r3, [pc, #72]	; (80028b0 <rocketStreamSendHandle+0xa4>)
 8002868:	701a      	strb	r2, [r3, #0]
					FA_OPEN_APPEND | FA_WRITE);
			f_puts(streamed_data, &Fil);
 800286a:	4910      	ldr	r1, [pc, #64]	; (80028ac <rocketStreamSendHandle+0xa0>)
 800286c:	480d      	ldr	r0, [pc, #52]	; (80028a4 <rocketStreamSendHandle+0x98>)
 800286e:	f017 fc3c 	bl	801a0ea <f_puts>
			f_close(&Fil);
 8002872:	480e      	ldr	r0, [pc, #56]	; (80028ac <rocketStreamSendHandle+0xa0>)
 8002874:	f017 fb98 	bl	8019fa8 <f_close>
			HAL_ADC_Stop(&hadc1); // stop adc
 8002878:	4808      	ldr	r0, [pc, #32]	; (800289c <rocketStreamSendHandle+0x90>)
 800287a:	f002 f837 	bl	80048ec <HAL_ADC_Stop>
			return streamed_data;
 800287e:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <rocketStreamSendHandle+0x98>)
 8002880:	e000      	b.n	8002884 <rocketStreamSendHandle+0x78>
		}
	}
	return "";
 8002882:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <rocketStreamSendHandle+0xa8>)
}
 8002884:	4618      	mov	r0, r3
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	0801c150 	.word	0x0801c150
 8002890:	24000000 	.word	0x24000000
 8002894:	0801c158 	.word	0x0801c158
 8002898:	2400385c 	.word	0x2400385c
 800289c:	24000bf4 	.word	0x24000bf4
 80028a0:	0801c160 	.word	0x0801c160
 80028a4:	2400395c 	.word	0x2400395c
 80028a8:	0801c168 	.word	0x0801c168
 80028ac:	2400264c 	.word	0x2400264c
 80028b0:	2400367c 	.word	0x2400367c
 80028b4:	0801c178 	.word	0x0801c178

080028b8 <rocketReliableSendHandle>:

struct ReliableSendConfig rocketReliableSendHandle() {
 80028b8:	b5b0      	push	{r4, r5, r7, lr}
 80028ba:	b08a      	sub	sp, #40	; 0x28
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
	struct ReliableSendConfig config;
	int message_count=0;
 80028c0:	2300      	movs	r3, #0
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
	if (strcmp(state, "DISARMED") == 0) {
 80028c4:	4984      	ldr	r1, [pc, #528]	; (8002ad8 <rocketReliableSendHandle+0x220>)
 80028c6:	4885      	ldr	r0, [pc, #532]	; (8002adc <rocketReliableSendHandle+0x224>)
 80028c8:	f7fd fd22 	bl	8000310 <strcmp>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f040 8088 	bne.w	80029e4 <rocketReliableSendHandle+0x12c>
		if (strcmp(command, "ARM") == 0) {
 80028d4:	4982      	ldr	r1, [pc, #520]	; (8002ae0 <rocketReliableSendHandle+0x228>)
 80028d6:	4883      	ldr	r0, [pc, #524]	; (8002ae4 <rocketReliableSendHandle+0x22c>)
 80028d8:	f7fd fd1a 	bl	8000310 <strcmp>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d124      	bne.n	800292c <rocketReliableSendHandle+0x74>

			if (!arm(state)) {
 80028e2:	487e      	ldr	r0, [pc, #504]	; (8002adc <rocketReliableSendHandle+0x224>)
 80028e4:	f7ff feee 	bl	80026c4 <arm>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10d      	bne.n	800290a <rocketReliableSendHandle+0x52>
				strcpy(status, "ARM SUCCESS");
 80028ee:	4b7e      	ldr	r3, [pc, #504]	; (8002ae8 <rocketReliableSendHandle+0x230>)
 80028f0:	4a7e      	ldr	r2, [pc, #504]	; (8002aec <rocketReliableSendHandle+0x234>)
 80028f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80028f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 				rocket_messages[message_count] = status;
 80028f8:	4a7d      	ldr	r2, [pc, #500]	; (8002af0 <rocketReliableSendHandle+0x238>)
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	497a      	ldr	r1, [pc, #488]	; (8002ae8 <rocketReliableSendHandle+0x230>)
 80028fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				message_count++;
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	3301      	adds	r3, #1
 8002906:	627b      	str	r3, [r7, #36]	; 0x24
 8002908:	e0d4      	b.n	8002ab4 <rocketReliableSendHandle+0x1fc>
			} else {
				strcpy(status, "ARM UNSUCCESSFUL");
 800290a:	4a77      	ldr	r2, [pc, #476]	; (8002ae8 <rocketReliableSendHandle+0x230>)
 800290c:	4b79      	ldr	r3, [pc, #484]	; (8002af4 <rocketReliableSendHandle+0x23c>)
 800290e:	4614      	mov	r4, r2
 8002910:	461d      	mov	r5, r3
 8002912:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002914:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002916:	682b      	ldr	r3, [r5, #0]
 8002918:	7023      	strb	r3, [r4, #0]
 				rocket_messages[message_count] = status;
 800291a:	4a75      	ldr	r2, [pc, #468]	; (8002af0 <rocketReliableSendHandle+0x238>)
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	4972      	ldr	r1, [pc, #456]	; (8002ae8 <rocketReliableSendHandle+0x230>)
 8002920:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				message_count++;
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	3301      	adds	r3, #1
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
 800292a:	e0c3      	b.n	8002ab4 <rocketReliableSendHandle+0x1fc>
			}
		} else if (strcmp(command, "DISARM") == 0) {
 800292c:	4972      	ldr	r1, [pc, #456]	; (8002af8 <rocketReliableSendHandle+0x240>)
 800292e:	486d      	ldr	r0, [pc, #436]	; (8002ae4 <rocketReliableSendHandle+0x22c>)
 8002930:	f7fd fcee 	bl	8000310 <strcmp>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d110      	bne.n	800295c <rocketReliableSendHandle+0xa4>
			strcpy(status, "ALREADY DISARMED");
 800293a:	4a6b      	ldr	r2, [pc, #428]	; (8002ae8 <rocketReliableSendHandle+0x230>)
 800293c:	4b6f      	ldr	r3, [pc, #444]	; (8002afc <rocketReliableSendHandle+0x244>)
 800293e:	4614      	mov	r4, r2
 8002940:	461d      	mov	r5, r3
 8002942:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002944:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002946:	682b      	ldr	r3, [r5, #0]
 8002948:	7023      	strb	r3, [r4, #0]
			rocket_messages[message_count] = status;
 800294a:	4a69      	ldr	r2, [pc, #420]	; (8002af0 <rocketReliableSendHandle+0x238>)
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	4966      	ldr	r1, [pc, #408]	; (8002ae8 <rocketReliableSendHandle+0x230>)
 8002950:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			message_count++;
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	3301      	adds	r3, #1
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
 800295a:	e0ab      	b.n	8002ab4 <rocketReliableSendHandle+0x1fc>
		} else if (strcmp(command, "CONT") == 0) {
 800295c:	4968      	ldr	r1, [pc, #416]	; (8002b00 <rocketReliableSendHandle+0x248>)
 800295e:	4861      	ldr	r0, [pc, #388]	; (8002ae4 <rocketReliableSendHandle+0x22c>)
 8002960:	f7fd fcd6 	bl	8000310 <strcmp>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	f040 80a4 	bne.w	8002ab4 <rocketReliableSendHandle+0x1fc>
			uint8_t CONTS[8];
			pyro_check_continuity(CONTS);
 800296c:	f107 0308 	add.w	r3, r7, #8
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff fed7 	bl	8002724 <pyro_check_continuity>


			for (int i = 0; i < 8; i++) {
 8002976:	2300      	movs	r3, #0
 8002978:	623b      	str	r3, [r7, #32]
 800297a:	e02f      	b.n	80029dc <rocketReliableSendHandle+0x124>
				if (CONTS[i]) {
 800297c:	f107 0208 	add.w	r2, r7, #8
 8002980:	6a3b      	ldr	r3, [r7, #32]
 8002982:	4413      	add	r3, r2
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00c      	beq.n	80029a4 <rocketReliableSendHandle+0xec>
					sprintf(continuities[i], "PYRO %d DOESN'T HAVE CONTINUITY",
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	2232      	movs	r2, #50	; 0x32
 800298e:	fb02 f303 	mul.w	r3, r2, r3
 8002992:	4a5c      	ldr	r2, [pc, #368]	; (8002b04 <rocketReliableSendHandle+0x24c>)
 8002994:	1898      	adds	r0, r3, r2
 8002996:	6a3b      	ldr	r3, [r7, #32]
 8002998:	3301      	adds	r3, #1
 800299a:	461a      	mov	r2, r3
 800299c:	495a      	ldr	r1, [pc, #360]	; (8002b08 <rocketReliableSendHandle+0x250>)
 800299e:	f018 f9ff 	bl	801ada0 <siprintf>
 80029a2:	e00b      	b.n	80029bc <rocketReliableSendHandle+0x104>
							i + 1);
				} else {
					sprintf(continuities[i], "PYRO %d HAS CONTINUITY", i + 1);
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	2232      	movs	r2, #50	; 0x32
 80029a8:	fb02 f303 	mul.w	r3, r2, r3
 80029ac:	4a55      	ldr	r2, [pc, #340]	; (8002b04 <rocketReliableSendHandle+0x24c>)
 80029ae:	1898      	adds	r0, r3, r2
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	3301      	adds	r3, #1
 80029b4:	461a      	mov	r2, r3
 80029b6:	4955      	ldr	r1, [pc, #340]	; (8002b0c <rocketReliableSendHandle+0x254>)
 80029b8:	f018 f9f2 	bl	801ada0 <siprintf>
				}
				rocket_messages[message_count] = continuities[i];
 80029bc:	6a3b      	ldr	r3, [r7, #32]
 80029be:	2232      	movs	r2, #50	; 0x32
 80029c0:	fb02 f303 	mul.w	r3, r2, r3
 80029c4:	4a4f      	ldr	r2, [pc, #316]	; (8002b04 <rocketReliableSendHandle+0x24c>)
 80029c6:	441a      	add	r2, r3
 80029c8:	4949      	ldr	r1, [pc, #292]	; (8002af0 <rocketReliableSendHandle+0x238>)
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				message_count++;
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	3301      	adds	r3, #1
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
			for (int i = 0; i < 8; i++) {
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	3301      	adds	r3, #1
 80029da:	623b      	str	r3, [r7, #32]
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	2b07      	cmp	r3, #7
 80029e0:	ddcc      	ble.n	800297c <rocketReliableSendHandle+0xc4>
 80029e2:	e067      	b.n	8002ab4 <rocketReliableSendHandle+0x1fc>
			}
		}
	} else if (strcmp(state, "ARMED") == 0) {
 80029e4:	494a      	ldr	r1, [pc, #296]	; (8002b10 <rocketReliableSendHandle+0x258>)
 80029e6:	483d      	ldr	r0, [pc, #244]	; (8002adc <rocketReliableSendHandle+0x224>)
 80029e8:	f7fd fc92 	bl	8000310 <strcmp>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d14a      	bne.n	8002a88 <rocketReliableSendHandle+0x1d0>
		if (strcmp(command, "DISARM") == 0) {
 80029f2:	4941      	ldr	r1, [pc, #260]	; (8002af8 <rocketReliableSendHandle+0x240>)
 80029f4:	483b      	ldr	r0, [pc, #236]	; (8002ae4 <rocketReliableSendHandle+0x22c>)
 80029f6:	f7fd fc8b 	bl	8000310 <strcmp>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d128      	bne.n	8002a52 <rocketReliableSendHandle+0x19a>
			if (!disarm(state)) {
 8002a00:	4836      	ldr	r0, [pc, #216]	; (8002adc <rocketReliableSendHandle+0x224>)
 8002a02:	f7ff fded 	bl	80025e0 <disarm>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d111      	bne.n	8002a30 <rocketReliableSendHandle+0x178>
				strcpy(status, "DISARM SUCCESS");
 8002a0c:	4a36      	ldr	r2, [pc, #216]	; (8002ae8 <rocketReliableSendHandle+0x230>)
 8002a0e:	4b41      	ldr	r3, [pc, #260]	; (8002b14 <rocketReliableSendHandle+0x25c>)
 8002a10:	4614      	mov	r4, r2
 8002a12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a14:	c407      	stmia	r4!, {r0, r1, r2}
 8002a16:	8023      	strh	r3, [r4, #0]
 8002a18:	3402      	adds	r4, #2
 8002a1a:	0c1b      	lsrs	r3, r3, #16
 8002a1c:	7023      	strb	r3, [r4, #0]
				rocket_messages[message_count] = status;
 8002a1e:	4a34      	ldr	r2, [pc, #208]	; (8002af0 <rocketReliableSendHandle+0x238>)
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	4931      	ldr	r1, [pc, #196]	; (8002ae8 <rocketReliableSendHandle+0x230>)
 8002a24:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				message_count++;
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a2e:	e041      	b.n	8002ab4 <rocketReliableSendHandle+0x1fc>
			} else {
				strcpy(status, "DISARM UNSUCCESS");
 8002a30:	4a2d      	ldr	r2, [pc, #180]	; (8002ae8 <rocketReliableSendHandle+0x230>)
 8002a32:	4b39      	ldr	r3, [pc, #228]	; (8002b18 <rocketReliableSendHandle+0x260>)
 8002a34:	4614      	mov	r4, r2
 8002a36:	461d      	mov	r5, r3
 8002a38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a3c:	682b      	ldr	r3, [r5, #0]
 8002a3e:	7023      	strb	r3, [r4, #0]
				rocket_messages[message_count] = status;
 8002a40:	4a2b      	ldr	r2, [pc, #172]	; (8002af0 <rocketReliableSendHandle+0x238>)
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	4928      	ldr	r1, [pc, #160]	; (8002ae8 <rocketReliableSendHandle+0x230>)
 8002a46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				message_count++;
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a50:	e030      	b.n	8002ab4 <rocketReliableSendHandle+0x1fc>
			}
		} else if (strcmp(command, "ARM") == 0) {
 8002a52:	4923      	ldr	r1, [pc, #140]	; (8002ae0 <rocketReliableSendHandle+0x228>)
 8002a54:	4823      	ldr	r0, [pc, #140]	; (8002ae4 <rocketReliableSendHandle+0x22c>)
 8002a56:	f7fd fc5b 	bl	8000310 <strcmp>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10e      	bne.n	8002a7e <rocketReliableSendHandle+0x1c6>
			strcpy(status, "ALREADY ARMED");
 8002a60:	4a21      	ldr	r2, [pc, #132]	; (8002ae8 <rocketReliableSendHandle+0x230>)
 8002a62:	4b2e      	ldr	r3, [pc, #184]	; (8002b1c <rocketReliableSendHandle+0x264>)
 8002a64:	4614      	mov	r4, r2
 8002a66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a68:	c407      	stmia	r4!, {r0, r1, r2}
 8002a6a:	8023      	strh	r3, [r4, #0]
			rocket_messages[message_count] = status;
 8002a6c:	4a20      	ldr	r2, [pc, #128]	; (8002af0 <rocketReliableSendHandle+0x238>)
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	491d      	ldr	r1, [pc, #116]	; (8002ae8 <rocketReliableSendHandle+0x230>)
 8002a72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			message_count++;
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	3301      	adds	r3, #1
 8002a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a7c:	e01a      	b.n	8002ab4 <rocketReliableSendHandle+0x1fc>
		} else if (strcmp(command, "FIRE") == 0) {
 8002a7e:	4928      	ldr	r1, [pc, #160]	; (8002b20 <rocketReliableSendHandle+0x268>)
 8002a80:	4818      	ldr	r0, [pc, #96]	; (8002ae4 <rocketReliableSendHandle+0x22c>)
 8002a82:	f7fd fc45 	bl	8000310 <strcmp>
 8002a86:	e015      	b.n	8002ab4 <rocketReliableSendHandle+0x1fc>

		}

	} else {
		strcpy(status, "state wrong!");
 8002a88:	4a17      	ldr	r2, [pc, #92]	; (8002ae8 <rocketReliableSendHandle+0x230>)
 8002a8a:	4b26      	ldr	r3, [pc, #152]	; (8002b24 <rocketReliableSendHandle+0x26c>)
 8002a8c:	4614      	mov	r4, r2
 8002a8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a90:	c407      	stmia	r4!, {r0, r1, r2}
 8002a92:	7023      	strb	r3, [r4, #0]
		rocket_messages[message_count] = status;
 8002a94:	4a16      	ldr	r2, [pc, #88]	; (8002af0 <rocketReliableSendHandle+0x238>)
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a98:	4913      	ldr	r1, [pc, #76]	; (8002ae8 <rocketReliableSendHandle+0x230>)
 8002a9a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		message_count++;
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	627b      	str	r3, [r7, #36]	; 0x24
		rocket_messages[message_count] = state;
 8002aa4:	4a12      	ldr	r2, [pc, #72]	; (8002af0 <rocketReliableSendHandle+0x238>)
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	490c      	ldr	r1, [pc, #48]	; (8002adc <rocketReliableSendHandle+0x224>)
 8002aaa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		message_count++;
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	config.messages_count = message_count;
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab6:	61fb      	str	r3, [r7, #28]
	config.messages = rocket_messages;
 8002ab8:	4b0d      	ldr	r3, [pc, #52]	; (8002af0 <rocketReliableSendHandle+0x238>)
 8002aba:	61bb      	str	r3, [r7, #24]
	config.mode = RECEIVING_RELIABLE;
 8002abc:	2300      	movs	r3, #0
 8002abe:	613b      	str	r3, [r7, #16]
    return config;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	461c      	mov	r4, r3
 8002ac4:	f107 0310 	add.w	r3, r7, #16
 8002ac8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002aca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	3728      	adds	r7, #40	; 0x28
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	0801c144 	.word	0x0801c144
 8002adc:	24000000 	.word	0x24000000
 8002ae0:	0801c17c 	.word	0x0801c17c
 8002ae4:	2400385c 	.word	0x2400385c
 8002ae8:	24003828 	.word	0x24003828
 8002aec:	0801c180 	.word	0x0801c180
 8002af0:	240039c0 	.word	0x240039c0
 8002af4:	0801c18c 	.word	0x0801c18c
 8002af8:	0801c1a0 	.word	0x0801c1a0
 8002afc:	0801c1a8 	.word	0x0801c1a8
 8002b00:	0801c1bc 	.word	0x0801c1bc
 8002b04:	24003698 	.word	0x24003698
 8002b08:	0801c1c4 	.word	0x0801c1c4
 8002b0c:	0801c1e4 	.word	0x0801c1e4
 8002b10:	0801c150 	.word	0x0801c150
 8002b14:	0801c1fc 	.word	0x0801c1fc
 8002b18:	0801c20c 	.word	0x0801c20c
 8002b1c:	0801c220 	.word	0x0801c220
 8002b20:	0801c158 	.word	0x0801c158
 8002b24:	0801c230 	.word	0x0801c230

08002b28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b2e:	4b0a      	ldr	r3, [pc, #40]	; (8002b58 <HAL_MspInit+0x30>)
 8002b30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b34:	4a08      	ldr	r2, [pc, #32]	; (8002b58 <HAL_MspInit+0x30>)
 8002b36:	f043 0302 	orr.w	r3, r3, #2
 8002b3a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002b3e:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <HAL_MspInit+0x30>)
 8002b40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	607b      	str	r3, [r7, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	58024400 	.word	0x58024400

08002b5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b08c      	sub	sp, #48	; 0x30
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b64:	f107 031c 	add.w	r3, r7, #28
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	605a      	str	r2, [r3, #4]
 8002b6e:	609a      	str	r2, [r3, #8]
 8002b70:	60da      	str	r2, [r3, #12]
 8002b72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a5d      	ldr	r2, [pc, #372]	; (8002cf0 <HAL_ADC_MspInit+0x194>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d159      	bne.n	8002c32 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002b7e:	4b5d      	ldr	r3, [pc, #372]	; (8002cf4 <HAL_ADC_MspInit+0x198>)
 8002b80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002b84:	4a5b      	ldr	r2, [pc, #364]	; (8002cf4 <HAL_ADC_MspInit+0x198>)
 8002b86:	f043 0320 	orr.w	r3, r3, #32
 8002b8a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002b8e:	4b59      	ldr	r3, [pc, #356]	; (8002cf4 <HAL_ADC_MspInit+0x198>)
 8002b90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002b94:	f003 0320 	and.w	r3, r3, #32
 8002b98:	61bb      	str	r3, [r7, #24]
 8002b9a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b9c:	4b55      	ldr	r3, [pc, #340]	; (8002cf4 <HAL_ADC_MspInit+0x198>)
 8002b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ba2:	4a54      	ldr	r2, [pc, #336]	; (8002cf4 <HAL_ADC_MspInit+0x198>)
 8002ba4:	f043 0301 	orr.w	r3, r3, #1
 8002ba8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bac:	4b51      	ldr	r3, [pc, #324]	; (8002cf4 <HAL_ADC_MspInit+0x198>)
 8002bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	617b      	str	r3, [r7, #20]
 8002bb8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_INP14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002bba:	2304      	movs	r3, #4
 8002bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc6:	f107 031c 	add.w	r3, r7, #28
 8002bca:	4619      	mov	r1, r3
 8002bcc:	484a      	ldr	r0, [pc, #296]	; (8002cf8 <HAL_ADC_MspInit+0x19c>)
 8002bce:	f005 fdd3 	bl	8008778 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 8002bd2:	4b4a      	ldr	r3, [pc, #296]	; (8002cfc <HAL_ADC_MspInit+0x1a0>)
 8002bd4:	4a4a      	ldr	r2, [pc, #296]	; (8002d00 <HAL_ADC_MspInit+0x1a4>)
 8002bd6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002bd8:	4b48      	ldr	r3, [pc, #288]	; (8002cfc <HAL_ADC_MspInit+0x1a0>)
 8002bda:	2209      	movs	r2, #9
 8002bdc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bde:	4b47      	ldr	r3, [pc, #284]	; (8002cfc <HAL_ADC_MspInit+0x1a0>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002be4:	4b45      	ldr	r3, [pc, #276]	; (8002cfc <HAL_ADC_MspInit+0x1a0>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002bea:	4b44      	ldr	r3, [pc, #272]	; (8002cfc <HAL_ADC_MspInit+0x1a0>)
 8002bec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bf0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002bf2:	4b42      	ldr	r3, [pc, #264]	; (8002cfc <HAL_ADC_MspInit+0x1a0>)
 8002bf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bf8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002bfa:	4b40      	ldr	r3, [pc, #256]	; (8002cfc <HAL_ADC_MspInit+0x1a0>)
 8002bfc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c00:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002c02:	4b3e      	ldr	r3, [pc, #248]	; (8002cfc <HAL_ADC_MspInit+0x1a0>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002c08:	4b3c      	ldr	r3, [pc, #240]	; (8002cfc <HAL_ADC_MspInit+0x1a0>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c0e:	4b3b      	ldr	r3, [pc, #236]	; (8002cfc <HAL_ADC_MspInit+0x1a0>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002c14:	4839      	ldr	r0, [pc, #228]	; (8002cfc <HAL_ADC_MspInit+0x1a0>)
 8002c16:	f003 f977 	bl	8005f08 <HAL_DMA_Init>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002c20:	f7ff fc76 	bl	8002510 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a35      	ldr	r2, [pc, #212]	; (8002cfc <HAL_ADC_MspInit+0x1a0>)
 8002c28:	659a      	str	r2, [r3, #88]	; 0x58
 8002c2a:	4a34      	ldr	r2, [pc, #208]	; (8002cfc <HAL_ADC_MspInit+0x1a0>)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002c30:	e059      	b.n	8002ce6 <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a33      	ldr	r2, [pc, #204]	; (8002d04 <HAL_ADC_MspInit+0x1a8>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d154      	bne.n	8002ce6 <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002c3c:	4b2d      	ldr	r3, [pc, #180]	; (8002cf4 <HAL_ADC_MspInit+0x198>)
 8002c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c42:	4a2c      	ldr	r2, [pc, #176]	; (8002cf4 <HAL_ADC_MspInit+0x198>)
 8002c44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c4c:	4b29      	ldr	r3, [pc, #164]	; (8002cf4 <HAL_ADC_MspInit+0x198>)
 8002c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c56:	613b      	str	r3, [r7, #16]
 8002c58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c5a:	4b26      	ldr	r3, [pc, #152]	; (8002cf4 <HAL_ADC_MspInit+0x198>)
 8002c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c60:	4a24      	ldr	r2, [pc, #144]	; (8002cf4 <HAL_ADC_MspInit+0x198>)
 8002c62:	f043 0304 	orr.w	r3, r3, #4
 8002c66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c6a:	4b22      	ldr	r3, [pc, #136]	; (8002cf4 <HAL_ADC_MspInit+0x198>)
 8002c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002c78:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002c7c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002c80:	f001 f860 	bl	8003d44 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8002c84:	4b20      	ldr	r3, [pc, #128]	; (8002d08 <HAL_ADC_MspInit+0x1ac>)
 8002c86:	4a21      	ldr	r2, [pc, #132]	; (8002d0c <HAL_ADC_MspInit+0x1b0>)
 8002c88:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002c8a:	4b1f      	ldr	r3, [pc, #124]	; (8002d08 <HAL_ADC_MspInit+0x1ac>)
 8002c8c:	2273      	movs	r2, #115	; 0x73
 8002c8e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c90:	4b1d      	ldr	r3, [pc, #116]	; (8002d08 <HAL_ADC_MspInit+0x1ac>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c96:	4b1c      	ldr	r3, [pc, #112]	; (8002d08 <HAL_ADC_MspInit+0x1ac>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002c9c:	4b1a      	ldr	r3, [pc, #104]	; (8002d08 <HAL_ADC_MspInit+0x1ac>)
 8002c9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ca2:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ca4:	4b18      	ldr	r3, [pc, #96]	; (8002d08 <HAL_ADC_MspInit+0x1ac>)
 8002ca6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002caa:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002cac:	4b16      	ldr	r3, [pc, #88]	; (8002d08 <HAL_ADC_MspInit+0x1ac>)
 8002cae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cb2:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002cb4:	4b14      	ldr	r3, [pc, #80]	; (8002d08 <HAL_ADC_MspInit+0x1ac>)
 8002cb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cba:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002cbc:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <HAL_ADC_MspInit+0x1ac>)
 8002cbe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002cc2:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cc4:	4b10      	ldr	r3, [pc, #64]	; (8002d08 <HAL_ADC_MspInit+0x1ac>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002cca:	480f      	ldr	r0, [pc, #60]	; (8002d08 <HAL_ADC_MspInit+0x1ac>)
 8002ccc:	f003 f91c 	bl	8005f08 <HAL_DMA_Init>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 8002cd6:	f7ff fc1b 	bl	8002510 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a0a      	ldr	r2, [pc, #40]	; (8002d08 <HAL_ADC_MspInit+0x1ac>)
 8002cde:	659a      	str	r2, [r3, #88]	; 0x58
 8002ce0:	4a09      	ldr	r2, [pc, #36]	; (8002d08 <HAL_ADC_MspInit+0x1ac>)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002ce6:	bf00      	nop
 8002ce8:	3730      	adds	r7, #48	; 0x30
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40022000 	.word	0x40022000
 8002cf4:	58024400 	.word	0x58024400
 8002cf8:	58020000 	.word	0x58020000
 8002cfc:	24000cd4 	.word	0x24000cd4
 8002d00:	40020088 	.word	0x40020088
 8002d04:	58026000 	.word	0x58026000
 8002d08:	24000d4c 	.word	0x24000d4c
 8002d0c:	400204b8 	.word	0x400204b8

08002d10 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b0b8      	sub	sp, #224	; 0xe0
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d18:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	605a      	str	r2, [r3, #4]
 8002d22:	609a      	str	r2, [r3, #8]
 8002d24:	60da      	str	r2, [r3, #12]
 8002d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d28:	f107 0310 	add.w	r3, r7, #16
 8002d2c:	22b8      	movs	r2, #184	; 0xb8
 8002d2e:	2100      	movs	r1, #0
 8002d30:	4618      	mov	r0, r3
 8002d32:	f018 f883 	bl	801ae3c <memset>
  if(hfdcan->Instance==FDCAN3)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a26      	ldr	r2, [pc, #152]	; (8002dd4 <HAL_FDCAN_MspInit+0xc4>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d145      	bne.n	8002dcc <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002d40:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002d4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002d50:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d52:	f107 0310 	add.w	r3, r7, #16
 8002d56:	4618      	mov	r0, r3
 8002d58:	f008 fafc 	bl	800b354 <HAL_RCCEx_PeriphCLKConfig>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8002d62:	f7ff fbd5 	bl	8002510 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002d66:	4b1c      	ldr	r3, [pc, #112]	; (8002dd8 <HAL_FDCAN_MspInit+0xc8>)
 8002d68:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002d6c:	4a1a      	ldr	r2, [pc, #104]	; (8002dd8 <HAL_FDCAN_MspInit+0xc8>)
 8002d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d72:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002d76:	4b18      	ldr	r3, [pc, #96]	; (8002dd8 <HAL_FDCAN_MspInit+0xc8>)
 8002d78:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d84:	4b14      	ldr	r3, [pc, #80]	; (8002dd8 <HAL_FDCAN_MspInit+0xc8>)
 8002d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d8a:	4a13      	ldr	r2, [pc, #76]	; (8002dd8 <HAL_FDCAN_MspInit+0xc8>)
 8002d8c:	f043 0320 	orr.w	r3, r3, #32
 8002d90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d94:	4b10      	ldr	r3, [pc, #64]	; (8002dd8 <HAL_FDCAN_MspInit+0xc8>)
 8002d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d9a:	f003 0320 	and.w	r3, r3, #32
 8002d9e:	60bb      	str	r3, [r7, #8]
 8002da0:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002da2:	23c0      	movs	r3, #192	; 0xc0
 8002da4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da8:	2302      	movs	r3, #2
 8002daa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dae:	2300      	movs	r3, #0
 8002db0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db4:	2300      	movs	r3, #0
 8002db6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8002dba:	2302      	movs	r3, #2
 8002dbc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002dc0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4805      	ldr	r0, [pc, #20]	; (8002ddc <HAL_FDCAN_MspInit+0xcc>)
 8002dc8:	f005 fcd6 	bl	8008778 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8002dcc:	bf00      	nop
 8002dce:	37e0      	adds	r7, #224	; 0xe0
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	4000d400 	.word	0x4000d400
 8002dd8:	58024400 	.word	0x58024400
 8002ddc:	58021400 	.word	0x58021400

08002de0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b0b8      	sub	sp, #224	; 0xe0
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	605a      	str	r2, [r3, #4]
 8002df2:	609a      	str	r2, [r3, #8]
 8002df4:	60da      	str	r2, [r3, #12]
 8002df6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002df8:	f107 0310 	add.w	r3, r7, #16
 8002dfc:	22b8      	movs	r2, #184	; 0xb8
 8002dfe:	2100      	movs	r1, #0
 8002e00:	4618      	mov	r0, r3
 8002e02:	f018 f81b 	bl	801ae3c <memset>
  if(hi2c->Instance==I2C2)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a2a      	ldr	r2, [pc, #168]	; (8002eb4 <HAL_I2C_MspInit+0xd4>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d14d      	bne.n	8002eac <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002e10:	f04f 0208 	mov.w	r2, #8
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e22:	f107 0310 	add.w	r3, r7, #16
 8002e26:	4618      	mov	r0, r3
 8002e28:	f008 fa94 	bl	800b354 <HAL_RCCEx_PeriphCLKConfig>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002e32:	f7ff fb6d 	bl	8002510 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e36:	4b20      	ldr	r3, [pc, #128]	; (8002eb8 <HAL_I2C_MspInit+0xd8>)
 8002e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e3c:	4a1e      	ldr	r2, [pc, #120]	; (8002eb8 <HAL_I2C_MspInit+0xd8>)
 8002e3e:	f043 0320 	orr.w	r3, r3, #32
 8002e42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e46:	4b1c      	ldr	r3, [pc, #112]	; (8002eb8 <HAL_I2C_MspInit+0xd8>)
 8002e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e4c:	f003 0320 	and.w	r3, r3, #32
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002e54:	2303      	movs	r3, #3
 8002e56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e5a:	2312      	movs	r3, #18
 8002e5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e60:	2300      	movs	r3, #0
 8002e62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e66:	2300      	movs	r3, #0
 8002e68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002e6c:	2304      	movs	r3, #4
 8002e6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e72:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002e76:	4619      	mov	r1, r3
 8002e78:	4810      	ldr	r0, [pc, #64]	; (8002ebc <HAL_I2C_MspInit+0xdc>)
 8002e7a:	f005 fc7d 	bl	8008778 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002e7e:	4b0e      	ldr	r3, [pc, #56]	; (8002eb8 <HAL_I2C_MspInit+0xd8>)
 8002e80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e84:	4a0c      	ldr	r2, [pc, #48]	; (8002eb8 <HAL_I2C_MspInit+0xd8>)
 8002e86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e8a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e8e:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <HAL_I2C_MspInit+0xd8>)
 8002e90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e98:	60bb      	str	r3, [r7, #8]
 8002e9a:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	2021      	movs	r0, #33	; 0x21
 8002ea2:	f002 fffc 	bl	8005e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002ea6:	2021      	movs	r0, #33	; 0x21
 8002ea8:	f003 f813 	bl	8005ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002eac:	bf00      	nop
 8002eae:	37e0      	adds	r7, #224	; 0xe0
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40005800 	.word	0x40005800
 8002eb8:	58024400 	.word	0x58024400
 8002ebc:	58021400 	.word	0x58021400

08002ec0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b0b2      	sub	sp, #200	; 0xc8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ec8:	f107 0310 	add.w	r3, r7, #16
 8002ecc:	22b8      	movs	r2, #184	; 0xb8
 8002ece:	2100      	movs	r1, #0
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f017 ffb3 	bl	801ae3c <memset>
  if(hrng->Instance==RNG)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a14      	ldr	r2, [pc, #80]	; (8002f2c <HAL_RNG_MspInit+0x6c>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d121      	bne.n	8002f24 <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002ee0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ee4:	f04f 0300 	mov.w	r3, #0
 8002ee8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8002eec:	2300      	movs	r3, #0
 8002eee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ef2:	f107 0310 	add.w	r3, r7, #16
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f008 fa2c 	bl	800b354 <HAL_RCCEx_PeriphCLKConfig>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 8002f02:	f7ff fb05 	bl	8002510 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002f06:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <HAL_RNG_MspInit+0x70>)
 8002f08:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002f0c:	4a08      	ldr	r2, [pc, #32]	; (8002f30 <HAL_RNG_MspInit+0x70>)
 8002f0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f12:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002f16:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <HAL_RNG_MspInit+0x70>)
 8002f18:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8002f24:	bf00      	nop
 8002f26:	37c8      	adds	r7, #200	; 0xc8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	48021800 	.word	0x48021800
 8002f30:	58024400 	.word	0x58024400

08002f34 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b0ba      	sub	sp, #232	; 0xe8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f3c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f40:	2200      	movs	r2, #0
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	605a      	str	r2, [r3, #4]
 8002f46:	609a      	str	r2, [r3, #8]
 8002f48:	60da      	str	r2, [r3, #12]
 8002f4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f4c:	f107 0318 	add.w	r3, r7, #24
 8002f50:	22b8      	movs	r2, #184	; 0xb8
 8002f52:	2100      	movs	r1, #0
 8002f54:	4618      	mov	r0, r3
 8002f56:	f017 ff71 	bl	801ae3c <memset>
  if(hsd->Instance==SDMMC2)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a5d      	ldr	r2, [pc, #372]	; (80030d4 <HAL_SD_MspInit+0x1a0>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	f040 80b3 	bne.w	80030cc <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002f66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f6a:	f04f 0300 	mov.w	r3, #0
 8002f6e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f76:	f107 0318 	add.w	r3, r7, #24
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f008 f9ea 	bl	800b354 <HAL_RCCEx_PeriphCLKConfig>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8002f86:	f7ff fac3 	bl	8002510 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8002f8a:	4b53      	ldr	r3, [pc, #332]	; (80030d8 <HAL_SD_MspInit+0x1a4>)
 8002f8c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002f90:	4a51      	ldr	r2, [pc, #324]	; (80030d8 <HAL_SD_MspInit+0x1a4>)
 8002f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f96:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002f9a:	4b4f      	ldr	r3, [pc, #316]	; (80030d8 <HAL_SD_MspInit+0x1a4>)
 8002f9c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002fa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fa4:	617b      	str	r3, [r7, #20]
 8002fa6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fa8:	4b4b      	ldr	r3, [pc, #300]	; (80030d8 <HAL_SD_MspInit+0x1a4>)
 8002faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fae:	4a4a      	ldr	r2, [pc, #296]	; (80030d8 <HAL_SD_MspInit+0x1a4>)
 8002fb0:	f043 0308 	orr.w	r3, r3, #8
 8002fb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fb8:	4b47      	ldr	r3, [pc, #284]	; (80030d8 <HAL_SD_MspInit+0x1a4>)
 8002fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fbe:	f003 0308 	and.w	r3, r3, #8
 8002fc2:	613b      	str	r3, [r7, #16]
 8002fc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002fc6:	4b44      	ldr	r3, [pc, #272]	; (80030d8 <HAL_SD_MspInit+0x1a4>)
 8002fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fcc:	4a42      	ldr	r2, [pc, #264]	; (80030d8 <HAL_SD_MspInit+0x1a4>)
 8002fce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fd6:	4b40      	ldr	r3, [pc, #256]	; (80030d8 <HAL_SD_MspInit+0x1a4>)
 8002fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002fe4:	2340      	movs	r3, #64	; 0x40
 8002fe6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fea:	2302      	movs	r3, #2
 8002fec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002ffc:	230b      	movs	r3, #11
 8002ffe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003002:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003006:	4619      	mov	r1, r3
 8003008:	4834      	ldr	r0, [pc, #208]	; (80030dc <HAL_SD_MspInit+0x1a8>)
 800300a:	f005 fbb5 	bl	8008778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800300e:	2380      	movs	r3, #128	; 0x80
 8003010:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003014:	2302      	movs	r3, #2
 8003016:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800301a:	2301      	movs	r3, #1
 800301c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003020:	2303      	movs	r3, #3
 8003022:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003026:	230b      	movs	r3, #11
 8003028:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800302c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003030:	4619      	mov	r1, r3
 8003032:	482a      	ldr	r0, [pc, #168]	; (80030dc <HAL_SD_MspInit+0x1a8>)
 8003034:	f005 fba0 	bl	8008778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003038:	f44f 7300 	mov.w	r3, #512	; 0x200
 800303c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003040:	2302      	movs	r3, #2
 8003042:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003046:	2301      	movs	r3, #1
 8003048:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800304c:	2303      	movs	r3, #3
 800304e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003052:	230b      	movs	r3, #11
 8003054:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003058:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800305c:	4619      	mov	r1, r3
 800305e:	4820      	ldr	r0, [pc, #128]	; (80030e0 <HAL_SD_MspInit+0x1ac>)
 8003060:	f005 fb8a 	bl	8008778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003064:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003068:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800306c:	2302      	movs	r3, #2
 800306e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003072:	2300      	movs	r3, #0
 8003074:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003078:	2303      	movs	r3, #3
 800307a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800307e:	230b      	movs	r3, #11
 8003080:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003084:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003088:	4619      	mov	r1, r3
 800308a:	4815      	ldr	r0, [pc, #84]	; (80030e0 <HAL_SD_MspInit+0x1ac>)
 800308c:	f005 fb74 	bl	8008778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003090:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003094:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003098:	2302      	movs	r3, #2
 800309a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309e:	2300      	movs	r3, #0
 80030a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030a4:	2303      	movs	r3, #3
 80030a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 80030aa:	230a      	movs	r3, #10
 80030ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80030b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80030b4:	4619      	mov	r1, r3
 80030b6:	480a      	ldr	r0, [pc, #40]	; (80030e0 <HAL_SD_MspInit+0x1ac>)
 80030b8:	f005 fb5e 	bl	8008778 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 80030bc:	2200      	movs	r2, #0
 80030be:	2100      	movs	r1, #0
 80030c0:	207c      	movs	r0, #124	; 0x7c
 80030c2:	f002 feec 	bl	8005e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 80030c6:	207c      	movs	r0, #124	; 0x7c
 80030c8:	f002 ff03 	bl	8005ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 80030cc:	bf00      	nop
 80030ce:	37e8      	adds	r7, #232	; 0xe8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	48022400 	.word	0x48022400
 80030d8:	58024400 	.word	0x58024400
 80030dc:	58020c00 	.word	0x58020c00
 80030e0:	58021800 	.word	0x58021800

080030e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b08e      	sub	sp, #56	; 0x38
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	605a      	str	r2, [r3, #4]
 80030f6:	609a      	str	r2, [r3, #8]
 80030f8:	60da      	str	r2, [r3, #12]
 80030fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a4f      	ldr	r2, [pc, #316]	; (8003240 <HAL_SPI_MspInit+0x15c>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d12e      	bne.n	8003164 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003106:	4b4f      	ldr	r3, [pc, #316]	; (8003244 <HAL_SPI_MspInit+0x160>)
 8003108:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800310c:	4a4d      	ldr	r2, [pc, #308]	; (8003244 <HAL_SPI_MspInit+0x160>)
 800310e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003112:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003116:	4b4b      	ldr	r3, [pc, #300]	; (8003244 <HAL_SPI_MspInit+0x160>)
 8003118:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800311c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003120:	623b      	str	r3, [r7, #32]
 8003122:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003124:	4b47      	ldr	r3, [pc, #284]	; (8003244 <HAL_SPI_MspInit+0x160>)
 8003126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800312a:	4a46      	ldr	r2, [pc, #280]	; (8003244 <HAL_SPI_MspInit+0x160>)
 800312c:	f043 0301 	orr.w	r3, r3, #1
 8003130:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003134:	4b43      	ldr	r3, [pc, #268]	; (8003244 <HAL_SPI_MspInit+0x160>)
 8003136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	61fb      	str	r3, [r7, #28]
 8003140:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003142:	23e0      	movs	r3, #224	; 0xe0
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003146:	2302      	movs	r3, #2
 8003148:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314a:	2300      	movs	r3, #0
 800314c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800314e:	2300      	movs	r3, #0
 8003150:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003152:	2305      	movs	r3, #5
 8003154:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800315a:	4619      	mov	r1, r3
 800315c:	483a      	ldr	r0, [pc, #232]	; (8003248 <HAL_SPI_MspInit+0x164>)
 800315e:	f005 fb0b 	bl	8008778 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003162:	e068      	b.n	8003236 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a38      	ldr	r2, [pc, #224]	; (800324c <HAL_SPI_MspInit+0x168>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d12f      	bne.n	80031ce <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800316e:	4b35      	ldr	r3, [pc, #212]	; (8003244 <HAL_SPI_MspInit+0x160>)
 8003170:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003174:	4a33      	ldr	r2, [pc, #204]	; (8003244 <HAL_SPI_MspInit+0x160>)
 8003176:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800317a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800317e:	4b31      	ldr	r3, [pc, #196]	; (8003244 <HAL_SPI_MspInit+0x160>)
 8003180:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003184:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003188:	61bb      	str	r3, [r7, #24]
 800318a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800318c:	4b2d      	ldr	r3, [pc, #180]	; (8003244 <HAL_SPI_MspInit+0x160>)
 800318e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003192:	4a2c      	ldr	r2, [pc, #176]	; (8003244 <HAL_SPI_MspInit+0x160>)
 8003194:	f043 0302 	orr.w	r3, r3, #2
 8003198:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800319c:	4b29      	ldr	r3, [pc, #164]	; (8003244 <HAL_SPI_MspInit+0x160>)
 800319e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	617b      	str	r3, [r7, #20]
 80031a8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80031aa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80031ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b0:	2302      	movs	r3, #2
 80031b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b4:	2300      	movs	r3, #0
 80031b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b8:	2300      	movs	r3, #0
 80031ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031bc:	2305      	movs	r3, #5
 80031be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031c4:	4619      	mov	r1, r3
 80031c6:	4822      	ldr	r0, [pc, #136]	; (8003250 <HAL_SPI_MspInit+0x16c>)
 80031c8:	f005 fad6 	bl	8008778 <HAL_GPIO_Init>
}
 80031cc:	e033      	b.n	8003236 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a20      	ldr	r2, [pc, #128]	; (8003254 <HAL_SPI_MspInit+0x170>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d12e      	bne.n	8003236 <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80031d8:	4b1a      	ldr	r3, [pc, #104]	; (8003244 <HAL_SPI_MspInit+0x160>)
 80031da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031de:	4a19      	ldr	r2, [pc, #100]	; (8003244 <HAL_SPI_MspInit+0x160>)
 80031e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031e4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80031e8:	4b16      	ldr	r3, [pc, #88]	; (8003244 <HAL_SPI_MspInit+0x160>)
 80031ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031f2:	613b      	str	r3, [r7, #16]
 80031f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031f6:	4b13      	ldr	r3, [pc, #76]	; (8003244 <HAL_SPI_MspInit+0x160>)
 80031f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031fc:	4a11      	ldr	r2, [pc, #68]	; (8003244 <HAL_SPI_MspInit+0x160>)
 80031fe:	f043 0304 	orr.w	r3, r3, #4
 8003202:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003206:	4b0f      	ldr	r3, [pc, #60]	; (8003244 <HAL_SPI_MspInit+0x160>)
 8003208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003214:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003218:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321a:	2302      	movs	r3, #2
 800321c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321e:	2300      	movs	r3, #0
 8003220:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003222:	2300      	movs	r3, #0
 8003224:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003226:	2306      	movs	r3, #6
 8003228:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800322a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800322e:	4619      	mov	r1, r3
 8003230:	4809      	ldr	r0, [pc, #36]	; (8003258 <HAL_SPI_MspInit+0x174>)
 8003232:	f005 faa1 	bl	8008778 <HAL_GPIO_Init>
}
 8003236:	bf00      	nop
 8003238:	3738      	adds	r7, #56	; 0x38
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40013000 	.word	0x40013000
 8003244:	58024400 	.word	0x58024400
 8003248:	58020000 	.word	0x58020000
 800324c:	40003800 	.word	0x40003800
 8003250:	58020400 	.word	0x58020400
 8003254:	40003c00 	.word	0x40003c00
 8003258:	58020800 	.word	0x58020800

0800325c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b08c      	sub	sp, #48	; 0x30
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003264:	f107 031c 	add.w	r3, r7, #28
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	605a      	str	r2, [r3, #4]
 800326e:	609a      	str	r2, [r3, #8]
 8003270:	60da      	str	r2, [r3, #12]
 8003272:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800327c:	d15d      	bne.n	800333a <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800327e:	4b8e      	ldr	r3, [pc, #568]	; (80034b8 <HAL_TIM_PWM_MspInit+0x25c>)
 8003280:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003284:	4a8c      	ldr	r2, [pc, #560]	; (80034b8 <HAL_TIM_PWM_MspInit+0x25c>)
 8003286:	f043 0301 	orr.w	r3, r3, #1
 800328a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800328e:	4b8a      	ldr	r3, [pc, #552]	; (80034b8 <HAL_TIM_PWM_MspInit+0x25c>)
 8003290:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	61bb      	str	r3, [r7, #24]
 800329a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800329c:	4b86      	ldr	r3, [pc, #536]	; (80034b8 <HAL_TIM_PWM_MspInit+0x25c>)
 800329e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032a2:	4a85      	ldr	r2, [pc, #532]	; (80034b8 <HAL_TIM_PWM_MspInit+0x25c>)
 80032a4:	f043 0301 	orr.w	r3, r3, #1
 80032a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032ac:	4b82      	ldr	r3, [pc, #520]	; (80034b8 <HAL_TIM_PWM_MspInit+0x25c>)
 80032ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	617b      	str	r3, [r7, #20]
 80032b8:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80032ba:	2301      	movs	r3, #1
 80032bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032be:	2302      	movs	r3, #2
 80032c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c2:	2300      	movs	r3, #0
 80032c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c6:	2300      	movs	r3, #0
 80032c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80032ca:	2301      	movs	r3, #1
 80032cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ce:	f107 031c 	add.w	r3, r7, #28
 80032d2:	4619      	mov	r1, r3
 80032d4:	4879      	ldr	r0, [pc, #484]	; (80034bc <HAL_TIM_PWM_MspInit+0x260>)
 80032d6:	f005 fa4f 	bl	8008778 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 80032da:	4b79      	ldr	r3, [pc, #484]	; (80034c0 <HAL_TIM_PWM_MspInit+0x264>)
 80032dc:	4a79      	ldr	r2, [pc, #484]	; (80034c4 <HAL_TIM_PWM_MspInit+0x268>)
 80032de:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 80032e0:	4b77      	ldr	r3, [pc, #476]	; (80034c0 <HAL_TIM_PWM_MspInit+0x264>)
 80032e2:	2214      	movs	r2, #20
 80032e4:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032e6:	4b76      	ldr	r3, [pc, #472]	; (80034c0 <HAL_TIM_PWM_MspInit+0x264>)
 80032e8:	2240      	movs	r2, #64	; 0x40
 80032ea:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80032ec:	4b74      	ldr	r3, [pc, #464]	; (80034c0 <HAL_TIM_PWM_MspInit+0x264>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80032f2:	4b73      	ldr	r3, [pc, #460]	; (80034c0 <HAL_TIM_PWM_MspInit+0x264>)
 80032f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032f8:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80032fa:	4b71      	ldr	r3, [pc, #452]	; (80034c0 <HAL_TIM_PWM_MspInit+0x264>)
 80032fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003300:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003302:	4b6f      	ldr	r3, [pc, #444]	; (80034c0 <HAL_TIM_PWM_MspInit+0x264>)
 8003304:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003308:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 800330a:	4b6d      	ldr	r3, [pc, #436]	; (80034c0 <HAL_TIM_PWM_MspInit+0x264>)
 800330c:	2200      	movs	r2, #0
 800330e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003310:	4b6b      	ldr	r3, [pc, #428]	; (80034c0 <HAL_TIM_PWM_MspInit+0x264>)
 8003312:	2200      	movs	r2, #0
 8003314:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003316:	4b6a      	ldr	r3, [pc, #424]	; (80034c0 <HAL_TIM_PWM_MspInit+0x264>)
 8003318:	2200      	movs	r2, #0
 800331a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 800331c:	4868      	ldr	r0, [pc, #416]	; (80034c0 <HAL_TIM_PWM_MspInit+0x264>)
 800331e:	f002 fdf3 	bl	8005f08 <HAL_DMA_Init>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8003328:	f7ff f8f2 	bl	8002510 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a64      	ldr	r2, [pc, #400]	; (80034c0 <HAL_TIM_PWM_MspInit+0x264>)
 8003330:	62da      	str	r2, [r3, #44]	; 0x2c
 8003332:	4a63      	ldr	r2, [pc, #396]	; (80034c0 <HAL_TIM_PWM_MspInit+0x264>)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003338:	e119      	b.n	800356e <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a62      	ldr	r2, [pc, #392]	; (80034c8 <HAL_TIM_PWM_MspInit+0x26c>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d16d      	bne.n	8003420 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003344:	4b5c      	ldr	r3, [pc, #368]	; (80034b8 <HAL_TIM_PWM_MspInit+0x25c>)
 8003346:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800334a:	4a5b      	ldr	r2, [pc, #364]	; (80034b8 <HAL_TIM_PWM_MspInit+0x25c>)
 800334c:	f043 0302 	orr.w	r3, r3, #2
 8003350:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003354:	4b58      	ldr	r3, [pc, #352]	; (80034b8 <HAL_TIM_PWM_MspInit+0x25c>)
 8003356:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	613b      	str	r3, [r7, #16]
 8003360:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 8003362:	4b5a      	ldr	r3, [pc, #360]	; (80034cc <HAL_TIM_PWM_MspInit+0x270>)
 8003364:	4a5a      	ldr	r2, [pc, #360]	; (80034d0 <HAL_TIM_PWM_MspInit+0x274>)
 8003366:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8003368:	4b58      	ldr	r3, [pc, #352]	; (80034cc <HAL_TIM_PWM_MspInit+0x270>)
 800336a:	2218      	movs	r2, #24
 800336c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800336e:	4b57      	ldr	r3, [pc, #348]	; (80034cc <HAL_TIM_PWM_MspInit+0x270>)
 8003370:	2240      	movs	r2, #64	; 0x40
 8003372:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003374:	4b55      	ldr	r3, [pc, #340]	; (80034cc <HAL_TIM_PWM_MspInit+0x270>)
 8003376:	2200      	movs	r2, #0
 8003378:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800337a:	4b54      	ldr	r3, [pc, #336]	; (80034cc <HAL_TIM_PWM_MspInit+0x270>)
 800337c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003380:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003382:	4b52      	ldr	r3, [pc, #328]	; (80034cc <HAL_TIM_PWM_MspInit+0x270>)
 8003384:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003388:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800338a:	4b50      	ldr	r3, [pc, #320]	; (80034cc <HAL_TIM_PWM_MspInit+0x270>)
 800338c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003390:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8003392:	4b4e      	ldr	r3, [pc, #312]	; (80034cc <HAL_TIM_PWM_MspInit+0x270>)
 8003394:	2200      	movs	r2, #0
 8003396:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003398:	4b4c      	ldr	r3, [pc, #304]	; (80034cc <HAL_TIM_PWM_MspInit+0x270>)
 800339a:	2200      	movs	r2, #0
 800339c:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800339e:	4b4b      	ldr	r3, [pc, #300]	; (80034cc <HAL_TIM_PWM_MspInit+0x270>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 80033a4:	4849      	ldr	r0, [pc, #292]	; (80034cc <HAL_TIM_PWM_MspInit+0x270>)
 80033a6:	f002 fdaf 	bl	8005f08 <HAL_DMA_Init>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 80033b0:	f7ff f8ae 	bl	8002510 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a45      	ldr	r2, [pc, #276]	; (80034cc <HAL_TIM_PWM_MspInit+0x270>)
 80033b8:	629a      	str	r2, [r3, #40]	; 0x28
 80033ba:	4a44      	ldr	r2, [pc, #272]	; (80034cc <HAL_TIM_PWM_MspInit+0x270>)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 80033c0:	4b44      	ldr	r3, [pc, #272]	; (80034d4 <HAL_TIM_PWM_MspInit+0x278>)
 80033c2:	4a45      	ldr	r2, [pc, #276]	; (80034d8 <HAL_TIM_PWM_MspInit+0x27c>)
 80033c4:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 80033c6:	4b43      	ldr	r3, [pc, #268]	; (80034d4 <HAL_TIM_PWM_MspInit+0x278>)
 80033c8:	2217      	movs	r2, #23
 80033ca:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033cc:	4b41      	ldr	r3, [pc, #260]	; (80034d4 <HAL_TIM_PWM_MspInit+0x278>)
 80033ce:	2240      	movs	r2, #64	; 0x40
 80033d0:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80033d2:	4b40      	ldr	r3, [pc, #256]	; (80034d4 <HAL_TIM_PWM_MspInit+0x278>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80033d8:	4b3e      	ldr	r3, [pc, #248]	; (80034d4 <HAL_TIM_PWM_MspInit+0x278>)
 80033da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033de:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80033e0:	4b3c      	ldr	r3, [pc, #240]	; (80034d4 <HAL_TIM_PWM_MspInit+0x278>)
 80033e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033e6:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80033e8:	4b3a      	ldr	r3, [pc, #232]	; (80034d4 <HAL_TIM_PWM_MspInit+0x278>)
 80033ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033ee:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 80033f0:	4b38      	ldr	r3, [pc, #224]	; (80034d4 <HAL_TIM_PWM_MspInit+0x278>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80033f6:	4b37      	ldr	r3, [pc, #220]	; (80034d4 <HAL_TIM_PWM_MspInit+0x278>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033fc:	4b35      	ldr	r3, [pc, #212]	; (80034d4 <HAL_TIM_PWM_MspInit+0x278>)
 80033fe:	2200      	movs	r2, #0
 8003400:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8003402:	4834      	ldr	r0, [pc, #208]	; (80034d4 <HAL_TIM_PWM_MspInit+0x278>)
 8003404:	f002 fd80 	bl	8005f08 <HAL_DMA_Init>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 800340e:	f7ff f87f 	bl	8002510 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a2f      	ldr	r2, [pc, #188]	; (80034d4 <HAL_TIM_PWM_MspInit+0x278>)
 8003416:	625a      	str	r2, [r3, #36]	; 0x24
 8003418:	4a2e      	ldr	r2, [pc, #184]	; (80034d4 <HAL_TIM_PWM_MspInit+0x278>)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800341e:	e0a6      	b.n	800356e <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a2d      	ldr	r2, [pc, #180]	; (80034dc <HAL_TIM_PWM_MspInit+0x280>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d15e      	bne.n	80034e8 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800342a:	4b23      	ldr	r3, [pc, #140]	; (80034b8 <HAL_TIM_PWM_MspInit+0x25c>)
 800342c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003430:	4a21      	ldr	r2, [pc, #132]	; (80034b8 <HAL_TIM_PWM_MspInit+0x25c>)
 8003432:	f043 0304 	orr.w	r3, r3, #4
 8003436:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800343a:	4b1f      	ldr	r3, [pc, #124]	; (80034b8 <HAL_TIM_PWM_MspInit+0x25c>)
 800343c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8003448:	4b25      	ldr	r3, [pc, #148]	; (80034e0 <HAL_TIM_PWM_MspInit+0x284>)
 800344a:	4a26      	ldr	r2, [pc, #152]	; (80034e4 <HAL_TIM_PWM_MspInit+0x288>)
 800344c:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 800344e:	4b24      	ldr	r3, [pc, #144]	; (80034e0 <HAL_TIM_PWM_MspInit+0x284>)
 8003450:	221f      	movs	r2, #31
 8003452:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003454:	4b22      	ldr	r3, [pc, #136]	; (80034e0 <HAL_TIM_PWM_MspInit+0x284>)
 8003456:	2240      	movs	r2, #64	; 0x40
 8003458:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800345a:	4b21      	ldr	r3, [pc, #132]	; (80034e0 <HAL_TIM_PWM_MspInit+0x284>)
 800345c:	2200      	movs	r2, #0
 800345e:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003460:	4b1f      	ldr	r3, [pc, #124]	; (80034e0 <HAL_TIM_PWM_MspInit+0x284>)
 8003462:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003466:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003468:	4b1d      	ldr	r3, [pc, #116]	; (80034e0 <HAL_TIM_PWM_MspInit+0x284>)
 800346a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800346e:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003470:	4b1b      	ldr	r3, [pc, #108]	; (80034e0 <HAL_TIM_PWM_MspInit+0x284>)
 8003472:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003476:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8003478:	4b19      	ldr	r3, [pc, #100]	; (80034e0 <HAL_TIM_PWM_MspInit+0x284>)
 800347a:	2200      	movs	r2, #0
 800347c:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800347e:	4b18      	ldr	r3, [pc, #96]	; (80034e0 <HAL_TIM_PWM_MspInit+0x284>)
 8003480:	2200      	movs	r2, #0
 8003482:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003484:	4b16      	ldr	r3, [pc, #88]	; (80034e0 <HAL_TIM_PWM_MspInit+0x284>)
 8003486:	2200      	movs	r2, #0
 8003488:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 800348a:	4815      	ldr	r0, [pc, #84]	; (80034e0 <HAL_TIM_PWM_MspInit+0x284>)
 800348c:	f002 fd3c 	bl	8005f08 <HAL_DMA_Init>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 8003496:	f7ff f83b 	bl	8002510 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a10      	ldr	r2, [pc, #64]	; (80034e0 <HAL_TIM_PWM_MspInit+0x284>)
 800349e:	62da      	str	r2, [r3, #44]	; 0x2c
 80034a0:	4a0f      	ldr	r2, [pc, #60]	; (80034e0 <HAL_TIM_PWM_MspInit+0x284>)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80034a6:	2200      	movs	r2, #0
 80034a8:	2100      	movs	r1, #0
 80034aa:	201e      	movs	r0, #30
 80034ac:	f002 fcf7 	bl	8005e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80034b0:	201e      	movs	r0, #30
 80034b2:	f002 fd0e 	bl	8005ed2 <HAL_NVIC_EnableIRQ>
}
 80034b6:	e05a      	b.n	800356e <HAL_TIM_PWM_MspInit+0x312>
 80034b8:	58024400 	.word	0x58024400
 80034bc:	58020000 	.word	0x58020000
 80034c0:	24001294 	.word	0x24001294
 80034c4:	40020028 	.word	0x40020028
 80034c8:	40000400 	.word	0x40000400
 80034cc:	2400130c 	.word	0x2400130c
 80034d0:	40020058 	.word	0x40020058
 80034d4:	24001384 	.word	0x24001384
 80034d8:	40020070 	.word	0x40020070
 80034dc:	40000800 	.word	0x40000800
 80034e0:	240013fc 	.word	0x240013fc
 80034e4:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a22      	ldr	r2, [pc, #136]	; (8003578 <HAL_TIM_PWM_MspInit+0x31c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d13d      	bne.n	800356e <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80034f2:	4b22      	ldr	r3, [pc, #136]	; (800357c <HAL_TIM_PWM_MspInit+0x320>)
 80034f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034f8:	4a20      	ldr	r2, [pc, #128]	; (800357c <HAL_TIM_PWM_MspInit+0x320>)
 80034fa:	f043 0308 	orr.w	r3, r3, #8
 80034fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003502:	4b1e      	ldr	r3, [pc, #120]	; (800357c <HAL_TIM_PWM_MspInit+0x320>)
 8003504:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003508:	f003 0308 	and.w	r3, r3, #8
 800350c:	60bb      	str	r3, [r7, #8]
 800350e:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 8003510:	4b1b      	ldr	r3, [pc, #108]	; (8003580 <HAL_TIM_PWM_MspInit+0x324>)
 8003512:	4a1c      	ldr	r2, [pc, #112]	; (8003584 <HAL_TIM_PWM_MspInit+0x328>)
 8003514:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8003516:	4b1a      	ldr	r3, [pc, #104]	; (8003580 <HAL_TIM_PWM_MspInit+0x324>)
 8003518:	223a      	movs	r2, #58	; 0x3a
 800351a:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800351c:	4b18      	ldr	r3, [pc, #96]	; (8003580 <HAL_TIM_PWM_MspInit+0x324>)
 800351e:	2240      	movs	r2, #64	; 0x40
 8003520:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8003522:	4b17      	ldr	r3, [pc, #92]	; (8003580 <HAL_TIM_PWM_MspInit+0x324>)
 8003524:	2200      	movs	r2, #0
 8003526:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8003528:	4b15      	ldr	r3, [pc, #84]	; (8003580 <HAL_TIM_PWM_MspInit+0x324>)
 800352a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800352e:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003530:	4b13      	ldr	r3, [pc, #76]	; (8003580 <HAL_TIM_PWM_MspInit+0x324>)
 8003532:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003536:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003538:	4b11      	ldr	r3, [pc, #68]	; (8003580 <HAL_TIM_PWM_MspInit+0x324>)
 800353a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800353e:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8003540:	4b0f      	ldr	r3, [pc, #60]	; (8003580 <HAL_TIM_PWM_MspInit+0x324>)
 8003542:	2200      	movs	r2, #0
 8003544:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8003546:	4b0e      	ldr	r3, [pc, #56]	; (8003580 <HAL_TIM_PWM_MspInit+0x324>)
 8003548:	2200      	movs	r2, #0
 800354a:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800354c:	4b0c      	ldr	r3, [pc, #48]	; (8003580 <HAL_TIM_PWM_MspInit+0x324>)
 800354e:	2200      	movs	r2, #0
 8003550:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 8003552:	480b      	ldr	r0, [pc, #44]	; (8003580 <HAL_TIM_PWM_MspInit+0x324>)
 8003554:	f002 fcd8 	bl	8005f08 <HAL_DMA_Init>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 800355e:	f7fe ffd7 	bl	8002510 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a06      	ldr	r2, [pc, #24]	; (8003580 <HAL_TIM_PWM_MspInit+0x324>)
 8003566:	631a      	str	r2, [r3, #48]	; 0x30
 8003568:	4a05      	ldr	r2, [pc, #20]	; (8003580 <HAL_TIM_PWM_MspInit+0x324>)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800356e:	bf00      	nop
 8003570:	3730      	adds	r7, #48	; 0x30
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40000c00 	.word	0x40000c00
 800357c:	58024400 	.word	0x58024400
 8003580:	24001474 	.word	0x24001474
 8003584:	40020040 	.word	0x40020040

08003588 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a16      	ldr	r2, [pc, #88]	; (80035f0 <HAL_TIM_Base_MspInit+0x68>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d10f      	bne.n	80035ba <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 800359a:	4b16      	ldr	r3, [pc, #88]	; (80035f4 <HAL_TIM_Base_MspInit+0x6c>)
 800359c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035a0:	4a14      	ldr	r2, [pc, #80]	; (80035f4 <HAL_TIM_Base_MspInit+0x6c>)
 80035a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80035aa:	4b12      	ldr	r3, [pc, #72]	; (80035f4 <HAL_TIM_Base_MspInit+0x6c>)
 80035ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b4:	60fb      	str	r3, [r7, #12]
 80035b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80035b8:	e013      	b.n	80035e2 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM14)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a0e      	ldr	r2, [pc, #56]	; (80035f8 <HAL_TIM_Base_MspInit+0x70>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d10e      	bne.n	80035e2 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80035c4:	4b0b      	ldr	r3, [pc, #44]	; (80035f4 <HAL_TIM_Base_MspInit+0x6c>)
 80035c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035ca:	4a0a      	ldr	r2, [pc, #40]	; (80035f4 <HAL_TIM_Base_MspInit+0x6c>)
 80035cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80035d4:	4b07      	ldr	r3, [pc, #28]	; (80035f4 <HAL_TIM_Base_MspInit+0x6c>)
 80035d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035de:	60bb      	str	r3, [r7, #8]
 80035e0:	68bb      	ldr	r3, [r7, #8]
}
 80035e2:	bf00      	nop
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	40001c00 	.word	0x40001c00
 80035f4:	58024400 	.word	0x58024400
 80035f8:	40002000 	.word	0x40002000

080035fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08c      	sub	sp, #48	; 0x30
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003604:	f107 031c 	add.w	r3, r7, #28
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	605a      	str	r2, [r3, #4]
 800360e:	609a      	str	r2, [r3, #8]
 8003610:	60da      	str	r2, [r3, #12]
 8003612:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800361c:	d120      	bne.n	8003660 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800361e:	4b52      	ldr	r3, [pc, #328]	; (8003768 <HAL_TIM_MspPostInit+0x16c>)
 8003620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003624:	4a50      	ldr	r2, [pc, #320]	; (8003768 <HAL_TIM_MspPostInit+0x16c>)
 8003626:	f043 0302 	orr.w	r3, r3, #2
 800362a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800362e:	4b4e      	ldr	r3, [pc, #312]	; (8003768 <HAL_TIM_MspPostInit+0x16c>)
 8003630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	61bb      	str	r3, [r7, #24]
 800363a:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800363c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003640:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003642:	2302      	movs	r3, #2
 8003644:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003646:	2302      	movs	r3, #2
 8003648:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800364a:	2300      	movs	r3, #0
 800364c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800364e:	2301      	movs	r3, #1
 8003650:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003652:	f107 031c 	add.w	r3, r7, #28
 8003656:	4619      	mov	r1, r3
 8003658:	4844      	ldr	r0, [pc, #272]	; (800376c <HAL_TIM_MspPostInit+0x170>)
 800365a:	f005 f88d 	bl	8008778 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800365e:	e07f      	b.n	8003760 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a42      	ldr	r2, [pc, #264]	; (8003770 <HAL_TIM_MspPostInit+0x174>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d11f      	bne.n	80036aa <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800366a:	4b3f      	ldr	r3, [pc, #252]	; (8003768 <HAL_TIM_MspPostInit+0x16c>)
 800366c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003670:	4a3d      	ldr	r2, [pc, #244]	; (8003768 <HAL_TIM_MspPostInit+0x16c>)
 8003672:	f043 0302 	orr.w	r3, r3, #2
 8003676:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800367a:	4b3b      	ldr	r3, [pc, #236]	; (8003768 <HAL_TIM_MspPostInit+0x16c>)
 800367c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	617b      	str	r3, [r7, #20]
 8003686:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003688:	2330      	movs	r3, #48	; 0x30
 800368a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368c:	2302      	movs	r3, #2
 800368e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003690:	2302      	movs	r3, #2
 8003692:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003694:	2300      	movs	r3, #0
 8003696:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003698:	2302      	movs	r3, #2
 800369a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800369c:	f107 031c 	add.w	r3, r7, #28
 80036a0:	4619      	mov	r1, r3
 80036a2:	4832      	ldr	r0, [pc, #200]	; (800376c <HAL_TIM_MspPostInit+0x170>)
 80036a4:	f005 f868 	bl	8008778 <HAL_GPIO_Init>
}
 80036a8:	e05a      	b.n	8003760 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a31      	ldr	r2, [pc, #196]	; (8003774 <HAL_TIM_MspPostInit+0x178>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d131      	bne.n	8003718 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036b4:	4b2c      	ldr	r3, [pc, #176]	; (8003768 <HAL_TIM_MspPostInit+0x16c>)
 80036b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036ba:	4a2b      	ldr	r2, [pc, #172]	; (8003768 <HAL_TIM_MspPostInit+0x16c>)
 80036bc:	f043 0308 	orr.w	r3, r3, #8
 80036c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036c4:	4b28      	ldr	r3, [pc, #160]	; (8003768 <HAL_TIM_MspPostInit+0x16c>)
 80036c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	613b      	str	r3, [r7, #16]
 80036d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80036d2:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80036d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d8:	2302      	movs	r3, #2
 80036da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036dc:	2300      	movs	r3, #0
 80036de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e0:	2300      	movs	r3, #0
 80036e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80036e4:	2302      	movs	r3, #2
 80036e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036e8:	f107 031c 	add.w	r3, r7, #28
 80036ec:	4619      	mov	r1, r3
 80036ee:	4822      	ldr	r0, [pc, #136]	; (8003778 <HAL_TIM_MspPostInit+0x17c>)
 80036f0:	f005 f842 	bl	8008778 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80036f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80036f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036fa:	2302      	movs	r3, #2
 80036fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80036fe:	2302      	movs	r3, #2
 8003700:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003702:	2300      	movs	r3, #0
 8003704:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003706:	2302      	movs	r3, #2
 8003708:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800370a:	f107 031c 	add.w	r3, r7, #28
 800370e:	4619      	mov	r1, r3
 8003710:	4819      	ldr	r0, [pc, #100]	; (8003778 <HAL_TIM_MspPostInit+0x17c>)
 8003712:	f005 f831 	bl	8008778 <HAL_GPIO_Init>
}
 8003716:	e023      	b.n	8003760 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a17      	ldr	r2, [pc, #92]	; (800377c <HAL_TIM_MspPostInit+0x180>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d11e      	bne.n	8003760 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003722:	4b11      	ldr	r3, [pc, #68]	; (8003768 <HAL_TIM_MspPostInit+0x16c>)
 8003724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003728:	4a0f      	ldr	r2, [pc, #60]	; (8003768 <HAL_TIM_MspPostInit+0x16c>)
 800372a:	f043 0301 	orr.w	r3, r3, #1
 800372e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003732:	4b0d      	ldr	r3, [pc, #52]	; (8003768 <HAL_TIM_MspPostInit+0x16c>)
 8003734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003740:	2308      	movs	r3, #8
 8003742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003744:	2302      	movs	r3, #2
 8003746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003748:	2302      	movs	r3, #2
 800374a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800374c:	2300      	movs	r3, #0
 800374e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003750:	2302      	movs	r3, #2
 8003752:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003754:	f107 031c 	add.w	r3, r7, #28
 8003758:	4619      	mov	r1, r3
 800375a:	4809      	ldr	r0, [pc, #36]	; (8003780 <HAL_TIM_MspPostInit+0x184>)
 800375c:	f005 f80c 	bl	8008778 <HAL_GPIO_Init>
}
 8003760:	bf00      	nop
 8003762:	3730      	adds	r7, #48	; 0x30
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	58024400 	.word	0x58024400
 800376c:	58020400 	.word	0x58020400
 8003770:	40000400 	.word	0x40000400
 8003774:	40000800 	.word	0x40000800
 8003778:	58020c00 	.word	0x58020c00
 800377c:	40000c00 	.word	0x40000c00
 8003780:	58020000 	.word	0x58020000

08003784 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b0ba      	sub	sp, #232	; 0xe8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800378c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	605a      	str	r2, [r3, #4]
 8003796:	609a      	str	r2, [r3, #8]
 8003798:	60da      	str	r2, [r3, #12]
 800379a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800379c:	f107 0318 	add.w	r3, r7, #24
 80037a0:	22b8      	movs	r2, #184	; 0xb8
 80037a2:	2100      	movs	r1, #0
 80037a4:	4618      	mov	r0, r3
 80037a6:	f017 fb49 	bl	801ae3c <memset>
  if(huart->Instance==UART4)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a4d      	ldr	r2, [pc, #308]	; (80038e4 <HAL_UART_MspInit+0x160>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d147      	bne.n	8003844 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80037b4:	f04f 0202 	mov.w	r2, #2
 80037b8:	f04f 0300 	mov.w	r3, #0
 80037bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80037c0:	2300      	movs	r3, #0
 80037c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037c6:	f107 0318 	add.w	r3, r7, #24
 80037ca:	4618      	mov	r0, r3
 80037cc:	f007 fdc2 	bl	800b354 <HAL_RCCEx_PeriphCLKConfig>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80037d6:	f7fe fe9b 	bl	8002510 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80037da:	4b43      	ldr	r3, [pc, #268]	; (80038e8 <HAL_UART_MspInit+0x164>)
 80037dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037e0:	4a41      	ldr	r2, [pc, #260]	; (80038e8 <HAL_UART_MspInit+0x164>)
 80037e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80037e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80037ea:	4b3f      	ldr	r3, [pc, #252]	; (80038e8 <HAL_UART_MspInit+0x164>)
 80037ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037f4:	617b      	str	r3, [r7, #20]
 80037f6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037f8:	4b3b      	ldr	r3, [pc, #236]	; (80038e8 <HAL_UART_MspInit+0x164>)
 80037fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037fe:	4a3a      	ldr	r2, [pc, #232]	; (80038e8 <HAL_UART_MspInit+0x164>)
 8003800:	f043 0302 	orr.w	r3, r3, #2
 8003804:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003808:	4b37      	ldr	r3, [pc, #220]	; (80038e8 <HAL_UART_MspInit+0x164>)
 800380a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	613b      	str	r3, [r7, #16]
 8003814:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003816:	f44f 7340 	mov.w	r3, #768	; 0x300
 800381a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800381e:	2302      	movs	r3, #2
 8003820:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003824:	2300      	movs	r3, #0
 8003826:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800382a:	2300      	movs	r3, #0
 800382c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003830:	2308      	movs	r3, #8
 8003832:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003836:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800383a:	4619      	mov	r1, r3
 800383c:	482b      	ldr	r0, [pc, #172]	; (80038ec <HAL_UART_MspInit+0x168>)
 800383e:	f004 ff9b 	bl	8008778 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003842:	e04a      	b.n	80038da <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a29      	ldr	r2, [pc, #164]	; (80038f0 <HAL_UART_MspInit+0x16c>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d145      	bne.n	80038da <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800384e:	f04f 0201 	mov.w	r2, #1
 8003852:	f04f 0300 	mov.w	r3, #0
 8003856:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800385a:	2300      	movs	r3, #0
 800385c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003860:	f107 0318 	add.w	r3, r7, #24
 8003864:	4618      	mov	r0, r3
 8003866:	f007 fd75 	bl	800b354 <HAL_RCCEx_PeriphCLKConfig>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8003870:	f7fe fe4e 	bl	8002510 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003874:	4b1c      	ldr	r3, [pc, #112]	; (80038e8 <HAL_UART_MspInit+0x164>)
 8003876:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800387a:	4a1b      	ldr	r2, [pc, #108]	; (80038e8 <HAL_UART_MspInit+0x164>)
 800387c:	f043 0320 	orr.w	r3, r3, #32
 8003880:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003884:	4b18      	ldr	r3, [pc, #96]	; (80038e8 <HAL_UART_MspInit+0x164>)
 8003886:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800388a:	f003 0320 	and.w	r3, r3, #32
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003892:	4b15      	ldr	r3, [pc, #84]	; (80038e8 <HAL_UART_MspInit+0x164>)
 8003894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003898:	4a13      	ldr	r2, [pc, #76]	; (80038e8 <HAL_UART_MspInit+0x164>)
 800389a:	f043 0304 	orr.w	r3, r3, #4
 800389e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038a2:	4b11      	ldr	r3, [pc, #68]	; (80038e8 <HAL_UART_MspInit+0x164>)
 80038a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	60bb      	str	r3, [r7, #8]
 80038ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80038b0:	23c0      	movs	r3, #192	; 0xc0
 80038b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b6:	2302      	movs	r3, #2
 80038b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038bc:	2300      	movs	r3, #0
 80038be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038c2:	2300      	movs	r3, #0
 80038c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80038c8:	2307      	movs	r3, #7
 80038ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038ce:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80038d2:	4619      	mov	r1, r3
 80038d4:	4807      	ldr	r0, [pc, #28]	; (80038f4 <HAL_UART_MspInit+0x170>)
 80038d6:	f004 ff4f 	bl	8008778 <HAL_GPIO_Init>
}
 80038da:	bf00      	nop
 80038dc:	37e8      	adds	r7, #232	; 0xe8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	40004c00 	.word	0x40004c00
 80038e8:	58024400 	.word	0x58024400
 80038ec:	58020400 	.word	0x58020400
 80038f0:	40011400 	.word	0x40011400
 80038f4:	58020800 	.word	0x58020800

080038f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038fc:	e7fe      	b.n	80038fc <NMI_Handler+0x4>

080038fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038fe:	b480      	push	{r7}
 8003900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003902:	e7fe      	b.n	8003902 <HardFault_Handler+0x4>

08003904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003908:	e7fe      	b.n	8003908 <MemManage_Handler+0x4>

0800390a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800390a:	b480      	push	{r7}
 800390c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800390e:	e7fe      	b.n	800390e <BusFault_Handler+0x4>

08003910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003914:	e7fe      	b.n	8003914 <UsageFault_Handler+0x4>

08003916 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003916:	b480      	push	{r7}
 8003918:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800391a:	bf00      	nop
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003928:	bf00      	nop
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003932:	b480      	push	{r7}
 8003934:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003936:	bf00      	nop
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003944:	f000 f9ba 	bl	8003cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003948:	bf00      	nop
 800394a:	bd80      	pop	{r7, pc}

0800394c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8003950:	4802      	ldr	r0, [pc, #8]	; (800395c <DMA1_Stream0_IRQHandler+0x10>)
 8003952:	f003 f89b 	bl	8006a8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003956:	bf00      	nop
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	240013fc 	.word	0x240013fc

08003960 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8003964:	4802      	ldr	r0, [pc, #8]	; (8003970 <DMA1_Stream1_IRQHandler+0x10>)
 8003966:	f003 f891 	bl	8006a8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800396a:	bf00      	nop
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	24001294 	.word	0x24001294

08003974 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8003978:	4802      	ldr	r0, [pc, #8]	; (8003984 <DMA1_Stream2_IRQHandler+0x10>)
 800397a:	f003 f887 	bl	8006a8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800397e:	bf00      	nop
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	24001474 	.word	0x24001474

08003988 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 800398c:	4802      	ldr	r0, [pc, #8]	; (8003998 <DMA1_Stream3_IRQHandler+0x10>)
 800398e:	f003 f87d 	bl	8006a8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003992:	bf00      	nop
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	2400130c 	.word	0x2400130c

0800399c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 80039a0:	4802      	ldr	r0, [pc, #8]	; (80039ac <DMA1_Stream4_IRQHandler+0x10>)
 80039a2:	f003 f873 	bl	8006a8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80039a6:	bf00      	nop
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	24001384 	.word	0x24001384

080039b0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80039b4:	4802      	ldr	r0, [pc, #8]	; (80039c0 <DMA1_Stream5_IRQHandler+0x10>)
 80039b6:	f003 f869 	bl	8006a8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80039ba:	bf00      	nop
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	24000cd4 	.word	0x24000cd4

080039c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80039c8:	4802      	ldr	r0, [pc, #8]	; (80039d4 <TIM4_IRQHandler+0x10>)
 80039ca:	f00d f853 	bl	8010a74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80039ce:	bf00      	nop
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	24001164 	.word	0x24001164

080039d8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80039dc:	4802      	ldr	r0, [pc, #8]	; (80039e8 <I2C2_EV_IRQHandler+0x10>)
 80039de:	f005 f935 	bl	8008c4c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80039e2:	bf00      	nop
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	24000e64 	.word	0x24000e64

080039ec <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80039f0:	4802      	ldr	r0, [pc, #8]	; (80039fc <DMA2_Stream7_IRQHandler+0x10>)
 80039f2:	f003 f84b 	bl	8006a8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80039f6:	bf00      	nop
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	24000d4c 	.word	0x24000d4c

08003a00 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003a04:	4802      	ldr	r0, [pc, #8]	; (8003a10 <OTG_HS_IRQHandler+0x10>)
 8003a06:	f005 fb2b 	bl	8009060 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8003a0a:	bf00      	nop
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	2400540c 	.word	0x2400540c

08003a14 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8003a18:	4802      	ldr	r0, [pc, #8]	; (8003a24 <SDMMC2_IRQHandler+0x10>)
 8003a1a:	f00a fc9f 	bl	800e35c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8003a1e:	bf00      	nop
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	24000eb8 	.word	0x24000eb8

08003a28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a30:	4a14      	ldr	r2, [pc, #80]	; (8003a84 <_sbrk+0x5c>)
 8003a32:	4b15      	ldr	r3, [pc, #84]	; (8003a88 <_sbrk+0x60>)
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a3c:	4b13      	ldr	r3, [pc, #76]	; (8003a8c <_sbrk+0x64>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d102      	bne.n	8003a4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a44:	4b11      	ldr	r3, [pc, #68]	; (8003a8c <_sbrk+0x64>)
 8003a46:	4a12      	ldr	r2, [pc, #72]	; (8003a90 <_sbrk+0x68>)
 8003a48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a4a:	4b10      	ldr	r3, [pc, #64]	; (8003a8c <_sbrk+0x64>)
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4413      	add	r3, r2
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d207      	bcs.n	8003a68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a58:	f017 f9f8 	bl	801ae4c <__errno>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	220c      	movs	r2, #12
 8003a60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a62:	f04f 33ff 	mov.w	r3, #4294967295
 8003a66:	e009      	b.n	8003a7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a68:	4b08      	ldr	r3, [pc, #32]	; (8003a8c <_sbrk+0x64>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a6e:	4b07      	ldr	r3, [pc, #28]	; (8003a8c <_sbrk+0x64>)
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4413      	add	r3, r2
 8003a76:	4a05      	ldr	r2, [pc, #20]	; (8003a8c <_sbrk+0x64>)
 8003a78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3718      	adds	r7, #24
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	24050000 	.word	0x24050000
 8003a88:	00000800 	.word	0x00000800
 8003a8c:	24003ce0 	.word	0x24003ce0
 8003a90:	24005c80 	.word	0x24005c80

08003a94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003a98:	4b32      	ldr	r3, [pc, #200]	; (8003b64 <SystemInit+0xd0>)
 8003a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9e:	4a31      	ldr	r2, [pc, #196]	; (8003b64 <SystemInit+0xd0>)
 8003aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003aa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003aa8:	4b2f      	ldr	r3, [pc, #188]	; (8003b68 <SystemInit+0xd4>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 030f 	and.w	r3, r3, #15
 8003ab0:	2b06      	cmp	r3, #6
 8003ab2:	d807      	bhi.n	8003ac4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003ab4:	4b2c      	ldr	r3, [pc, #176]	; (8003b68 <SystemInit+0xd4>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f023 030f 	bic.w	r3, r3, #15
 8003abc:	4a2a      	ldr	r2, [pc, #168]	; (8003b68 <SystemInit+0xd4>)
 8003abe:	f043 0307 	orr.w	r3, r3, #7
 8003ac2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003ac4:	4b29      	ldr	r3, [pc, #164]	; (8003b6c <SystemInit+0xd8>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a28      	ldr	r2, [pc, #160]	; (8003b6c <SystemInit+0xd8>)
 8003aca:	f043 0301 	orr.w	r3, r3, #1
 8003ace:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003ad0:	4b26      	ldr	r3, [pc, #152]	; (8003b6c <SystemInit+0xd8>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003ad6:	4b25      	ldr	r3, [pc, #148]	; (8003b6c <SystemInit+0xd8>)
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	4924      	ldr	r1, [pc, #144]	; (8003b6c <SystemInit+0xd8>)
 8003adc:	4b24      	ldr	r3, [pc, #144]	; (8003b70 <SystemInit+0xdc>)
 8003ade:	4013      	ands	r3, r2
 8003ae0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003ae2:	4b21      	ldr	r3, [pc, #132]	; (8003b68 <SystemInit+0xd4>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0308 	and.w	r3, r3, #8
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d007      	beq.n	8003afe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003aee:	4b1e      	ldr	r3, [pc, #120]	; (8003b68 <SystemInit+0xd4>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f023 030f 	bic.w	r3, r3, #15
 8003af6:	4a1c      	ldr	r2, [pc, #112]	; (8003b68 <SystemInit+0xd4>)
 8003af8:	f043 0307 	orr.w	r3, r3, #7
 8003afc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003afe:	4b1b      	ldr	r3, [pc, #108]	; (8003b6c <SystemInit+0xd8>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003b04:	4b19      	ldr	r3, [pc, #100]	; (8003b6c <SystemInit+0xd8>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003b0a:	4b18      	ldr	r3, [pc, #96]	; (8003b6c <SystemInit+0xd8>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003b10:	4b16      	ldr	r3, [pc, #88]	; (8003b6c <SystemInit+0xd8>)
 8003b12:	4a18      	ldr	r2, [pc, #96]	; (8003b74 <SystemInit+0xe0>)
 8003b14:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003b16:	4b15      	ldr	r3, [pc, #84]	; (8003b6c <SystemInit+0xd8>)
 8003b18:	4a17      	ldr	r2, [pc, #92]	; (8003b78 <SystemInit+0xe4>)
 8003b1a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003b1c:	4b13      	ldr	r3, [pc, #76]	; (8003b6c <SystemInit+0xd8>)
 8003b1e:	4a17      	ldr	r2, [pc, #92]	; (8003b7c <SystemInit+0xe8>)
 8003b20:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003b22:	4b12      	ldr	r3, [pc, #72]	; (8003b6c <SystemInit+0xd8>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003b28:	4b10      	ldr	r3, [pc, #64]	; (8003b6c <SystemInit+0xd8>)
 8003b2a:	4a14      	ldr	r2, [pc, #80]	; (8003b7c <SystemInit+0xe8>)
 8003b2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003b2e:	4b0f      	ldr	r3, [pc, #60]	; (8003b6c <SystemInit+0xd8>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003b34:	4b0d      	ldr	r3, [pc, #52]	; (8003b6c <SystemInit+0xd8>)
 8003b36:	4a11      	ldr	r2, [pc, #68]	; (8003b7c <SystemInit+0xe8>)
 8003b38:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003b3a:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <SystemInit+0xd8>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003b40:	4b0a      	ldr	r3, [pc, #40]	; (8003b6c <SystemInit+0xd8>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a09      	ldr	r2, [pc, #36]	; (8003b6c <SystemInit+0xd8>)
 8003b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b4a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003b4c:	4b07      	ldr	r3, [pc, #28]	; (8003b6c <SystemInit+0xd8>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003b52:	4b0b      	ldr	r3, [pc, #44]	; (8003b80 <SystemInit+0xec>)
 8003b54:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003b58:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003b5a:	bf00      	nop
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	e000ed00 	.word	0xe000ed00
 8003b68:	52002000 	.word	0x52002000
 8003b6c:	58024400 	.word	0x58024400
 8003b70:	eaf6ed7f 	.word	0xeaf6ed7f
 8003b74:	02020200 	.word	0x02020200
 8003b78:	01ff0000 	.word	0x01ff0000
 8003b7c:	01010280 	.word	0x01010280
 8003b80:	52004000 	.word	0x52004000

08003b84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003b84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003bbc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003b88:	f7ff ff84 	bl	8003a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b8c:	480c      	ldr	r0, [pc, #48]	; (8003bc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003b8e:	490d      	ldr	r1, [pc, #52]	; (8003bc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003b90:	4a0d      	ldr	r2, [pc, #52]	; (8003bc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b94:	e002      	b.n	8003b9c <LoopCopyDataInit>

08003b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b9a:	3304      	adds	r3, #4

08003b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ba0:	d3f9      	bcc.n	8003b96 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ba2:	4a0a      	ldr	r2, [pc, #40]	; (8003bcc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ba4:	4c0a      	ldr	r4, [pc, #40]	; (8003bd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ba8:	e001      	b.n	8003bae <LoopFillZerobss>

08003baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bac:	3204      	adds	r2, #4

08003bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bb0:	d3fb      	bcc.n	8003baa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003bb2:	f017 f951 	bl	801ae58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bb6:	f7fd fc9f 	bl	80014f8 <main>
  bx  lr
 8003bba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003bbc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003bc0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003bc4:	24000250 	.word	0x24000250
  ldr r2, =_sidata
 8003bc8:	0801c980 	.word	0x0801c980
  ldr r2, =_sbss
 8003bcc:	24000250 	.word	0x24000250
  ldr r4, =_ebss
 8003bd0:	24005c80 	.word	0x24005c80

08003bd4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bd4:	e7fe      	b.n	8003bd4 <ADC3_IRQHandler>
	...

08003bd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bde:	2003      	movs	r0, #3
 8003be0:	f002 f952 	bl	8005e88 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003be4:	f007 f9e0 	bl	800afa8 <HAL_RCC_GetSysClockFreq>
 8003be8:	4602      	mov	r2, r0
 8003bea:	4b15      	ldr	r3, [pc, #84]	; (8003c40 <HAL_Init+0x68>)
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	0a1b      	lsrs	r3, r3, #8
 8003bf0:	f003 030f 	and.w	r3, r3, #15
 8003bf4:	4913      	ldr	r1, [pc, #76]	; (8003c44 <HAL_Init+0x6c>)
 8003bf6:	5ccb      	ldrb	r3, [r1, r3]
 8003bf8:	f003 031f 	and.w	r3, r3, #31
 8003bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8003c00:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c02:	4b0f      	ldr	r3, [pc, #60]	; (8003c40 <HAL_Init+0x68>)
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	4a0e      	ldr	r2, [pc, #56]	; (8003c44 <HAL_Init+0x6c>)
 8003c0c:	5cd3      	ldrb	r3, [r2, r3]
 8003c0e:	f003 031f 	and.w	r3, r3, #31
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	fa22 f303 	lsr.w	r3, r2, r3
 8003c18:	4a0b      	ldr	r2, [pc, #44]	; (8003c48 <HAL_Init+0x70>)
 8003c1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c1c:	4a0b      	ldr	r2, [pc, #44]	; (8003c4c <HAL_Init+0x74>)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c22:	200f      	movs	r0, #15
 8003c24:	f000 f814 	bl	8003c50 <HAL_InitTick>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e002      	b.n	8003c38 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003c32:	f7fe ff79 	bl	8002b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	58024400 	.word	0x58024400
 8003c44:	0801c38c 	.word	0x0801c38c
 8003c48:	24000104 	.word	0x24000104
 8003c4c:	24000100 	.word	0x24000100

08003c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003c58:	4b15      	ldr	r3, [pc, #84]	; (8003cb0 <HAL_InitTick+0x60>)
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e021      	b.n	8003ca8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003c64:	4b13      	ldr	r3, [pc, #76]	; (8003cb4 <HAL_InitTick+0x64>)
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	4b11      	ldr	r3, [pc, #68]	; (8003cb0 <HAL_InitTick+0x60>)
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f002 f937 	bl	8005eee <HAL_SYSTICK_Config>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e00e      	b.n	8003ca8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b0f      	cmp	r3, #15
 8003c8e:	d80a      	bhi.n	8003ca6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c90:	2200      	movs	r2, #0
 8003c92:	6879      	ldr	r1, [r7, #4]
 8003c94:	f04f 30ff 	mov.w	r0, #4294967295
 8003c98:	f002 f901 	bl	8005e9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c9c:	4a06      	ldr	r2, [pc, #24]	; (8003cb8 <HAL_InitTick+0x68>)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	e000      	b.n	8003ca8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	2400010c 	.word	0x2400010c
 8003cb4:	24000100 	.word	0x24000100
 8003cb8:	24000108 	.word	0x24000108

08003cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003cc0:	4b06      	ldr	r3, [pc, #24]	; (8003cdc <HAL_IncTick+0x20>)
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	4b06      	ldr	r3, [pc, #24]	; (8003ce0 <HAL_IncTick+0x24>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4413      	add	r3, r2
 8003ccc:	4a04      	ldr	r2, [pc, #16]	; (8003ce0 <HAL_IncTick+0x24>)
 8003cce:	6013      	str	r3, [r2, #0]
}
 8003cd0:	bf00      	nop
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	2400010c 	.word	0x2400010c
 8003ce0:	24003ce4 	.word	0x24003ce4

08003ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8003ce8:	4b03      	ldr	r3, [pc, #12]	; (8003cf8 <HAL_GetTick+0x14>)
 8003cea:	681b      	ldr	r3, [r3, #0]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	24003ce4 	.word	0x24003ce4

08003cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d04:	f7ff ffee 	bl	8003ce4 <HAL_GetTick>
 8003d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d14:	d005      	beq.n	8003d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d16:	4b0a      	ldr	r3, [pc, #40]	; (8003d40 <HAL_Delay+0x44>)
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4413      	add	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d22:	bf00      	nop
 8003d24:	f7ff ffde 	bl	8003ce4 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d8f7      	bhi.n	8003d24 <HAL_Delay+0x28>
  {
  }
}
 8003d34:	bf00      	nop
 8003d36:	bf00      	nop
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	2400010c 	.word	0x2400010c

08003d44 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003d4e:	4b07      	ldr	r3, [pc, #28]	; (8003d6c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	43db      	mvns	r3, r3
 8003d56:	401a      	ands	r2, r3
 8003d58:	4904      	ldr	r1, [pc, #16]	; (8003d6c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	604b      	str	r3, [r1, #4]
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr
 8003d6c:	58000400 	.word	0x58000400

08003d70 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	431a      	orrs	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	609a      	str	r2, [r3, #8]
}
 8003d8a:	bf00      	nop
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
 8003d9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	609a      	str	r2, [r3, #8]
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
 8003de4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	3360      	adds	r3, #96	; 0x60
 8003dea:	461a      	mov	r2, r3
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4413      	add	r3, r2
 8003df2:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4a10      	ldr	r2, [pc, #64]	; (8003e38 <LL_ADC_SetOffset+0x60>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d10b      	bne.n	8003e14 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003e12:	e00b      	b.n	8003e2c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	430b      	orrs	r3, r1
 8003e26:	431a      	orrs	r2, r3
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	601a      	str	r2, [r3, #0]
}
 8003e2c:	bf00      	nop
 8003e2e:	371c      	adds	r7, #28
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr
 8003e38:	58026000 	.word	0x58026000

08003e3c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	3360      	adds	r3, #96	; 0x60
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f003 031f 	and.w	r3, r3, #31
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	fa01 f303 	lsl.w	r3, r1, r3
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	611a      	str	r2, [r3, #16]
}
 8003e8e:	bf00      	nop
 8003e90:	3714      	adds	r7, #20
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
	...

08003e9c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4a0c      	ldr	r2, [pc, #48]	; (8003edc <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d00e      	beq.n	8003ece <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	3360      	adds	r3, #96	; 0x60
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4413      	add	r3, r2
 8003ebc:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	601a      	str	r2, [r3, #0]
  }
}
 8003ece:	bf00      	nop
 8003ed0:	371c      	adds	r7, #28
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	58026000 	.word	0x58026000

08003ee0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b087      	sub	sp, #28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	4a0c      	ldr	r2, [pc, #48]	; (8003f20 <LL_ADC_SetOffsetSaturation+0x40>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d10e      	bne.n	8003f12 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	3360      	adds	r3, #96	; 0x60
 8003ef8:	461a      	mov	r2, r3
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003f12:	bf00      	nop
 8003f14:	371c      	adds	r7, #28
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	58026000 	.word	0x58026000

08003f24 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4a0c      	ldr	r2, [pc, #48]	; (8003f64 <LL_ADC_SetOffsetSign+0x40>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d10e      	bne.n	8003f56 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	3360      	adds	r3, #96	; 0x60
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	431a      	orrs	r2, r3
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003f56:	bf00      	nop
 8003f58:	371c      	adds	r7, #28
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	58026000 	.word	0x58026000

08003f68 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	3360      	adds	r3, #96	; 0x60
 8003f78:	461a      	mov	r2, r3
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	4a0c      	ldr	r2, [pc, #48]	; (8003fb8 <LL_ADC_SetOffsetState+0x50>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d108      	bne.n	8003f9c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	431a      	orrs	r2, r3
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003f9a:	e007      	b.n	8003fac <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	601a      	str	r2, [r3, #0]
}
 8003fac:	bf00      	nop
 8003fae:	371c      	adds	r7, #28
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	58026000 	.word	0x58026000

08003fbc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e000      	b.n	8003fd6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b087      	sub	sp, #28
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	60f8      	str	r0, [r7, #12]
 8003fea:	60b9      	str	r1, [r7, #8]
 8003fec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	3330      	adds	r3, #48	; 0x30
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	0a1b      	lsrs	r3, r3, #8
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	f003 030c 	and.w	r3, r3, #12
 8003ffe:	4413      	add	r3, r2
 8004000:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	f003 031f 	and.w	r3, r3, #31
 800400c:	211f      	movs	r1, #31
 800400e:	fa01 f303 	lsl.w	r3, r1, r3
 8004012:	43db      	mvns	r3, r3
 8004014:	401a      	ands	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	0e9b      	lsrs	r3, r3, #26
 800401a:	f003 011f 	and.w	r1, r3, #31
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	f003 031f 	and.w	r3, r3, #31
 8004024:	fa01 f303 	lsl.w	r3, r1, r3
 8004028:	431a      	orrs	r2, r3
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800402e:	bf00      	nop
 8004030:	371c      	adds	r7, #28
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800403a:	b480      	push	{r7}
 800403c:	b087      	sub	sp, #28
 800403e:	af00      	add	r7, sp, #0
 8004040:	60f8      	str	r0, [r7, #12]
 8004042:	60b9      	str	r1, [r7, #8]
 8004044:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	3314      	adds	r3, #20
 800404a:	461a      	mov	r2, r3
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	0e5b      	lsrs	r3, r3, #25
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	f003 0304 	and.w	r3, r3, #4
 8004056:	4413      	add	r3, r2
 8004058:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	0d1b      	lsrs	r3, r3, #20
 8004062:	f003 031f 	and.w	r3, r3, #31
 8004066:	2107      	movs	r1, #7
 8004068:	fa01 f303 	lsl.w	r3, r1, r3
 800406c:	43db      	mvns	r3, r3
 800406e:	401a      	ands	r2, r3
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	0d1b      	lsrs	r3, r3, #20
 8004074:	f003 031f 	and.w	r3, r3, #31
 8004078:	6879      	ldr	r1, [r7, #4]
 800407a:	fa01 f303 	lsl.w	r3, r1, r3
 800407e:	431a      	orrs	r2, r3
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004084:	bf00      	nop
 8004086:	371c      	adds	r7, #28
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4a1a      	ldr	r2, [pc, #104]	; (8004108 <LL_ADC_SetChannelSingleDiff+0x78>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d115      	bne.n	80040d0 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040b0:	43db      	mvns	r3, r3
 80040b2:	401a      	ands	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f003 0318 	and.w	r3, r3, #24
 80040ba:	4914      	ldr	r1, [pc, #80]	; (800410c <LL_ADC_SetChannelSingleDiff+0x7c>)
 80040bc:	40d9      	lsrs	r1, r3
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	400b      	ands	r3, r1
 80040c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040c6:	431a      	orrs	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80040ce:	e014      	b.n	80040fa <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040dc:	43db      	mvns	r3, r3
 80040de:	401a      	ands	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f003 0318 	and.w	r3, r3, #24
 80040e6:	4909      	ldr	r1, [pc, #36]	; (800410c <LL_ADC_SetChannelSingleDiff+0x7c>)
 80040e8:	40d9      	lsrs	r1, r3
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	400b      	ands	r3, r1
 80040ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040f2:	431a      	orrs	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80040fa:	bf00      	nop
 80040fc:	3714      	adds	r7, #20
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	58026000 	.word	0x58026000
 800410c:	000fffff 	.word	0x000fffff

08004110 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f003 031f 	and.w	r3, r3, #31
}
 8004120:	4618      	mov	r0, r3
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 800413c:	4618      	mov	r0, r3
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	4b04      	ldr	r3, [pc, #16]	; (8004168 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004156:	4013      	ands	r3, r2
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	6093      	str	r3, [r2, #8]
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr
 8004168:	5fffffc0 	.word	0x5fffffc0

0800416c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800417c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004180:	d101      	bne.n	8004186 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004182:	2301      	movs	r3, #1
 8004184:	e000      	b.n	8004188 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689a      	ldr	r2, [r3, #8]
 80041a0:	4b05      	ldr	r3, [pc, #20]	; (80041b8 <LL_ADC_EnableInternalRegulator+0x24>)
 80041a2:	4013      	ands	r3, r2
 80041a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr
 80041b8:	6fffffc0 	.word	0x6fffffc0

080041bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041d0:	d101      	bne.n	80041d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80041d2:	2301      	movs	r3, #1
 80041d4:	e000      	b.n	80041d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	4b05      	ldr	r3, [pc, #20]	; (8004208 <LL_ADC_Enable+0x24>)
 80041f2:	4013      	ands	r3, r2
 80041f4:	f043 0201 	orr.w	r2, r3, #1
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	7fffffc0 	.word	0x7fffffc0

0800420c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	4b05      	ldr	r3, [pc, #20]	; (8004230 <LL_ADC_Disable+0x24>)
 800421a:	4013      	ands	r3, r2
 800421c:	f043 0202 	orr.w	r2, r3, #2
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	7fffffc0 	.word	0x7fffffc0

08004234 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b01      	cmp	r3, #1
 8004246:	d101      	bne.n	800424c <LL_ADC_IsEnabled+0x18>
 8004248:	2301      	movs	r3, #1
 800424a:	e000      	b.n	800424e <LL_ADC_IsEnabled+0x1a>
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800425a:	b480      	push	{r7}
 800425c:	b083      	sub	sp, #12
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b02      	cmp	r3, #2
 800426c:	d101      	bne.n	8004272 <LL_ADC_IsDisableOngoing+0x18>
 800426e:	2301      	movs	r3, #1
 8004270:	e000      	b.n	8004274 <LL_ADC_IsDisableOngoing+0x1a>
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689a      	ldr	r2, [r3, #8]
 800428c:	4b05      	ldr	r3, [pc, #20]	; (80042a4 <LL_ADC_REG_StartConversion+0x24>)
 800428e:	4013      	ands	r3, r2
 8004290:	f043 0204 	orr.w	r2, r3, #4
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr
 80042a4:	7fffffc0 	.word	0x7fffffc0

080042a8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	4b05      	ldr	r3, [pc, #20]	; (80042cc <LL_ADC_REG_StopConversion+0x24>)
 80042b6:	4013      	ands	r3, r2
 80042b8:	f043 0210 	orr.w	r2, r3, #16
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr
 80042cc:	7fffffc0 	.word	0x7fffffc0

080042d0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b04      	cmp	r3, #4
 80042e2:	d101      	bne.n	80042e8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80042e4:	2301      	movs	r3, #1
 80042e6:	e000      	b.n	80042ea <LL_ADC_REG_IsConversionOngoing+0x1a>
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
	...

080042f8 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	4b05      	ldr	r3, [pc, #20]	; (800431c <LL_ADC_INJ_StopConversion+0x24>)
 8004306:	4013      	ands	r3, r2
 8004308:	f043 0220 	orr.w	r2, r3, #32
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	7fffffc0 	.word	0x7fffffc0

08004320 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f003 0308 	and.w	r3, r3, #8
 8004330:	2b08      	cmp	r3, #8
 8004332:	d101      	bne.n	8004338 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004334:	2301      	movs	r3, #1
 8004336:	e000      	b.n	800433a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
	...

08004348 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004348:	b590      	push	{r4, r7, lr}
 800434a:	b089      	sub	sp, #36	; 0x24
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004350:	2300      	movs	r3, #0
 8004352:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004354:	2300      	movs	r3, #0
 8004356:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e1ee      	b.n	8004740 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800436c:	2b00      	cmp	r3, #0
 800436e:	d109      	bne.n	8004384 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f7fe fbf3 	bl	8002b5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4618      	mov	r0, r3
 800438a:	f7ff feef 	bl	800416c <LL_ADC_IsDeepPowerDownEnabled>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d004      	beq.n	800439e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4618      	mov	r0, r3
 800439a:	f7ff fed5 	bl	8004148 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff ff0a 	bl	80041bc <LL_ADC_IsInternalRegulatorEnabled>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d114      	bne.n	80043d8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7ff feee 	bl	8004194 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043b8:	4b8e      	ldr	r3, [pc, #568]	; (80045f4 <HAL_ADC_Init+0x2ac>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	099b      	lsrs	r3, r3, #6
 80043be:	4a8e      	ldr	r2, [pc, #568]	; (80045f8 <HAL_ADC_Init+0x2b0>)
 80043c0:	fba2 2303 	umull	r2, r3, r2, r3
 80043c4:	099b      	lsrs	r3, r3, #6
 80043c6:	3301      	adds	r3, #1
 80043c8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80043ca:	e002      	b.n	80043d2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1f9      	bne.n	80043cc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4618      	mov	r0, r3
 80043de:	f7ff feed 	bl	80041bc <LL_ADC_IsInternalRegulatorEnabled>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10d      	bne.n	8004404 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ec:	f043 0210 	orr.w	r2, r3, #16
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043f8:	f043 0201 	orr.w	r2, r3, #1
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff ff61 	bl	80042d0 <LL_ADC_REG_IsConversionOngoing>
 800440e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004414:	f003 0310 	and.w	r3, r3, #16
 8004418:	2b00      	cmp	r3, #0
 800441a:	f040 8188 	bne.w	800472e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	2b00      	cmp	r3, #0
 8004422:	f040 8184 	bne.w	800472e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800442a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800442e:	f043 0202 	orr.w	r2, r3, #2
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4618      	mov	r0, r3
 800443c:	f7ff fefa 	bl	8004234 <LL_ADC_IsEnabled>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d136      	bne.n	80044b4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a6c      	ldr	r2, [pc, #432]	; (80045fc <HAL_ADC_Init+0x2b4>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d004      	beq.n	800445a <HAL_ADC_Init+0x112>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a6a      	ldr	r2, [pc, #424]	; (8004600 <HAL_ADC_Init+0x2b8>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d10e      	bne.n	8004478 <HAL_ADC_Init+0x130>
 800445a:	4868      	ldr	r0, [pc, #416]	; (80045fc <HAL_ADC_Init+0x2b4>)
 800445c:	f7ff feea 	bl	8004234 <LL_ADC_IsEnabled>
 8004460:	4604      	mov	r4, r0
 8004462:	4867      	ldr	r0, [pc, #412]	; (8004600 <HAL_ADC_Init+0x2b8>)
 8004464:	f7ff fee6 	bl	8004234 <LL_ADC_IsEnabled>
 8004468:	4603      	mov	r3, r0
 800446a:	4323      	orrs	r3, r4
 800446c:	2b00      	cmp	r3, #0
 800446e:	bf0c      	ite	eq
 8004470:	2301      	moveq	r3, #1
 8004472:	2300      	movne	r3, #0
 8004474:	b2db      	uxtb	r3, r3
 8004476:	e008      	b.n	800448a <HAL_ADC_Init+0x142>
 8004478:	4862      	ldr	r0, [pc, #392]	; (8004604 <HAL_ADC_Init+0x2bc>)
 800447a:	f7ff fedb 	bl	8004234 <LL_ADC_IsEnabled>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	bf0c      	ite	eq
 8004484:	2301      	moveq	r3, #1
 8004486:	2300      	movne	r3, #0
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d012      	beq.n	80044b4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a5a      	ldr	r2, [pc, #360]	; (80045fc <HAL_ADC_Init+0x2b4>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d004      	beq.n	80044a2 <HAL_ADC_Init+0x15a>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a58      	ldr	r2, [pc, #352]	; (8004600 <HAL_ADC_Init+0x2b8>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d101      	bne.n	80044a6 <HAL_ADC_Init+0x15e>
 80044a2:	4a59      	ldr	r2, [pc, #356]	; (8004608 <HAL_ADC_Init+0x2c0>)
 80044a4:	e000      	b.n	80044a8 <HAL_ADC_Init+0x160>
 80044a6:	4a59      	ldr	r2, [pc, #356]	; (800460c <HAL_ADC_Init+0x2c4>)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	4619      	mov	r1, r3
 80044ae:	4610      	mov	r0, r2
 80044b0:	f7ff fc5e 	bl	8003d70 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a52      	ldr	r2, [pc, #328]	; (8004604 <HAL_ADC_Init+0x2bc>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d129      	bne.n	8004512 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	7e5b      	ldrb	r3, [r3, #25]
 80044c2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80044c8:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80044ce:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	2b08      	cmp	r3, #8
 80044d6:	d013      	beq.n	8004500 <HAL_ADC_Init+0x1b8>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	2b0c      	cmp	r3, #12
 80044de:	d00d      	beq.n	80044fc <HAL_ADC_Init+0x1b4>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	2b1c      	cmp	r3, #28
 80044e6:	d007      	beq.n	80044f8 <HAL_ADC_Init+0x1b0>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	2b18      	cmp	r3, #24
 80044ee:	d101      	bne.n	80044f4 <HAL_ADC_Init+0x1ac>
 80044f0:	2318      	movs	r3, #24
 80044f2:	e006      	b.n	8004502 <HAL_ADC_Init+0x1ba>
 80044f4:	2300      	movs	r3, #0
 80044f6:	e004      	b.n	8004502 <HAL_ADC_Init+0x1ba>
 80044f8:	2310      	movs	r3, #16
 80044fa:	e002      	b.n	8004502 <HAL_ADC_Init+0x1ba>
 80044fc:	2308      	movs	r3, #8
 80044fe:	e000      	b.n	8004502 <HAL_ADC_Init+0x1ba>
 8004500:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8004502:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 3020 	ldrb.w	r3, [r3, #32]
 800450a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800450c:	4313      	orrs	r3, r2
 800450e:	61bb      	str	r3, [r7, #24]
 8004510:	e00e      	b.n	8004530 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	7e5b      	ldrb	r3, [r3, #25]
 8004516:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800451c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004522:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 3020 	ldrb.w	r3, [r3, #32]
 800452a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800452c:	4313      	orrs	r3, r2
 800452e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d106      	bne.n	8004548 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	3b01      	subs	r3, #1
 8004540:	045b      	lsls	r3, r3, #17
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	4313      	orrs	r3, r2
 8004546:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454c:	2b00      	cmp	r3, #0
 800454e:	d009      	beq.n	8004564 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004554:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800455e:	69ba      	ldr	r2, [r7, #24]
 8004560:	4313      	orrs	r3, r2
 8004562:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a26      	ldr	r2, [pc, #152]	; (8004604 <HAL_ADC_Init+0x2bc>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d115      	bne.n	800459a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	4b26      	ldr	r3, [pc, #152]	; (8004610 <HAL_ADC_Init+0x2c8>)
 8004576:	4013      	ands	r3, r2
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	6812      	ldr	r2, [r2, #0]
 800457c:	69b9      	ldr	r1, [r7, #24]
 800457e:	430b      	orrs	r3, r1
 8004580:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	611a      	str	r2, [r3, #16]
 8004598:	e009      	b.n	80045ae <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68da      	ldr	r2, [r3, #12]
 80045a0:	4b1c      	ldr	r3, [pc, #112]	; (8004614 <HAL_ADC_Init+0x2cc>)
 80045a2:	4013      	ands	r3, r2
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6812      	ldr	r2, [r2, #0]
 80045a8:	69b9      	ldr	r1, [r7, #24]
 80045aa:	430b      	orrs	r3, r1
 80045ac:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7ff fe8c 	bl	80042d0 <LL_ADC_REG_IsConversionOngoing>
 80045b8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4618      	mov	r0, r3
 80045c0:	f7ff feae 	bl	8004320 <LL_ADC_INJ_IsConversionOngoing>
 80045c4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f040 808e 	bne.w	80046ea <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f040 808a 	bne.w	80046ea <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a0a      	ldr	r2, [pc, #40]	; (8004604 <HAL_ADC_Init+0x2bc>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d11b      	bne.n	8004618 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	7e1b      	ldrb	r3, [r3, #24]
 80045e4:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80045ec:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80045ee:	4313      	orrs	r3, r2
 80045f0:	61bb      	str	r3, [r7, #24]
 80045f2:	e018      	b.n	8004626 <HAL_ADC_Init+0x2de>
 80045f4:	24000100 	.word	0x24000100
 80045f8:	053e2d63 	.word	0x053e2d63
 80045fc:	40022000 	.word	0x40022000
 8004600:	40022100 	.word	0x40022100
 8004604:	58026000 	.word	0x58026000
 8004608:	40022300 	.word	0x40022300
 800460c:	58026300 	.word	0x58026300
 8004610:	fff04007 	.word	0xfff04007
 8004614:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	7e1b      	ldrb	r3, [r3, #24]
 800461c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8004622:	4313      	orrs	r3, r2
 8004624:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	4b46      	ldr	r3, [pc, #280]	; (8004748 <HAL_ADC_Init+0x400>)
 800462e:	4013      	ands	r3, r2
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	6812      	ldr	r2, [r2, #0]
 8004634:	69b9      	ldr	r1, [r7, #24]
 8004636:	430b      	orrs	r3, r1
 8004638:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004640:	2b01      	cmp	r3, #1
 8004642:	d137      	bne.n	80046b4 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004648:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a3f      	ldr	r2, [pc, #252]	; (800474c <HAL_ADC_Init+0x404>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d116      	bne.n	8004682 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	691a      	ldr	r2, [r3, #16]
 800465a:	4b3d      	ldr	r3, [pc, #244]	; (8004750 <HAL_ADC_Init+0x408>)
 800465c:	4013      	ands	r3, r2
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004666:	4311      	orrs	r1, r2
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800466c:	4311      	orrs	r1, r2
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004672:	430a      	orrs	r2, r1
 8004674:	431a      	orrs	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0201 	orr.w	r2, r2, #1
 800467e:	611a      	str	r2, [r3, #16]
 8004680:	e020      	b.n	80046c4 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	691a      	ldr	r2, [r3, #16]
 8004688:	4b32      	ldr	r3, [pc, #200]	; (8004754 <HAL_ADC_Init+0x40c>)
 800468a:	4013      	ands	r3, r2
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004690:	3a01      	subs	r2, #1
 8004692:	0411      	lsls	r1, r2, #16
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004698:	4311      	orrs	r1, r2
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800469e:	4311      	orrs	r1, r2
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80046a4:	430a      	orrs	r2, r1
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f042 0201 	orr.w	r2, r2, #1
 80046b0:	611a      	str	r2, [r3, #16]
 80046b2:	e007      	b.n	80046c4 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	691a      	ldr	r2, [r3, #16]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0201 	bic.w	r2, r2, #1
 80046c2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a1b      	ldr	r2, [pc, #108]	; (800474c <HAL_ADC_Init+0x404>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d002      	beq.n	80046ea <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f001 f909 	bl	80058fc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d10c      	bne.n	800470c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f8:	f023 010f 	bic.w	r1, r3, #15
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	69db      	ldr	r3, [r3, #28]
 8004700:	1e5a      	subs	r2, r3, #1
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	631a      	str	r2, [r3, #48]	; 0x30
 800470a:	e007      	b.n	800471c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 020f 	bic.w	r2, r2, #15
 800471a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004720:	f023 0303 	bic.w	r3, r3, #3
 8004724:	f043 0201 	orr.w	r2, r3, #1
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	661a      	str	r2, [r3, #96]	; 0x60
 800472c:	e007      	b.n	800473e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004732:	f043 0210 	orr.w	r2, r3, #16
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800473e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004740:	4618      	mov	r0, r3
 8004742:	3724      	adds	r7, #36	; 0x24
 8004744:	46bd      	mov	sp, r7
 8004746:	bd90      	pop	{r4, r7, pc}
 8004748:	ffffbffc 	.word	0xffffbffc
 800474c:	58026000 	.word	0x58026000
 8004750:	fc00f81f 	.word	0xfc00f81f
 8004754:	fc00f81e 	.word	0xfc00f81e

08004758 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a5c      	ldr	r2, [pc, #368]	; (80048d8 <HAL_ADC_Start+0x180>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d004      	beq.n	8004774 <HAL_ADC_Start+0x1c>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a5b      	ldr	r2, [pc, #364]	; (80048dc <HAL_ADC_Start+0x184>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d101      	bne.n	8004778 <HAL_ADC_Start+0x20>
 8004774:	4b5a      	ldr	r3, [pc, #360]	; (80048e0 <HAL_ADC_Start+0x188>)
 8004776:	e000      	b.n	800477a <HAL_ADC_Start+0x22>
 8004778:	4b5a      	ldr	r3, [pc, #360]	; (80048e4 <HAL_ADC_Start+0x18c>)
 800477a:	4618      	mov	r0, r3
 800477c:	f7ff fcc8 	bl	8004110 <LL_ADC_GetMultimode>
 8004780:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f7ff fda2 	bl	80042d0 <LL_ADC_REG_IsConversionOngoing>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	f040 809a 	bne.w	80048c8 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800479a:	2b01      	cmp	r3, #1
 800479c:	d101      	bne.n	80047a2 <HAL_ADC_Start+0x4a>
 800479e:	2302      	movs	r3, #2
 80047a0:	e095      	b.n	80048ce <HAL_ADC_Start+0x176>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 ffbc 	bl	8005728 <ADC_Enable>
 80047b0:	4603      	mov	r3, r0
 80047b2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80047b4:	7dfb      	ldrb	r3, [r7, #23]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f040 8081 	bne.w	80048be <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80047c0:	4b49      	ldr	r3, [pc, #292]	; (80048e8 <HAL_ADC_Start+0x190>)
 80047c2:	4013      	ands	r3, r2
 80047c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a42      	ldr	r2, [pc, #264]	; (80048dc <HAL_ADC_Start+0x184>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d002      	beq.n	80047dc <HAL_ADC_Start+0x84>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	e000      	b.n	80047de <HAL_ADC_Start+0x86>
 80047dc:	4b3e      	ldr	r3, [pc, #248]	; (80048d8 <HAL_ADC_Start+0x180>)
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	6812      	ldr	r2, [r2, #0]
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d002      	beq.n	80047ec <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d105      	bne.n	80047f8 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004804:	d106      	bne.n	8004814 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800480a:	f023 0206 	bic.w	r2, r3, #6
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	665a      	str	r2, [r3, #100]	; 0x64
 8004812:	e002      	b.n	800481a <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	221c      	movs	r2, #28
 8004820:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a2b      	ldr	r2, [pc, #172]	; (80048dc <HAL_ADC_Start+0x184>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d002      	beq.n	800483a <HAL_ADC_Start+0xe2>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	e000      	b.n	800483c <HAL_ADC_Start+0xe4>
 800483a:	4b27      	ldr	r3, [pc, #156]	; (80048d8 <HAL_ADC_Start+0x180>)
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6812      	ldr	r2, [r2, #0]
 8004840:	4293      	cmp	r3, r2
 8004842:	d008      	beq.n	8004856 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d005      	beq.n	8004856 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	2b05      	cmp	r3, #5
 800484e:	d002      	beq.n	8004856 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	2b09      	cmp	r3, #9
 8004854:	d114      	bne.n	8004880 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d007      	beq.n	8004874 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004868:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800486c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4618      	mov	r0, r3
 800487a:	f7ff fd01 	bl	8004280 <LL_ADC_REG_StartConversion>
 800487e:	e025      	b.n	80048cc <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004884:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a12      	ldr	r2, [pc, #72]	; (80048dc <HAL_ADC_Start+0x184>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d002      	beq.n	800489c <HAL_ADC_Start+0x144>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	e000      	b.n	800489e <HAL_ADC_Start+0x146>
 800489c:	4b0e      	ldr	r3, [pc, #56]	; (80048d8 <HAL_ADC_Start+0x180>)
 800489e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00f      	beq.n	80048cc <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80048b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	661a      	str	r2, [r3, #96]	; 0x60
 80048bc:	e006      	b.n	80048cc <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80048c6:	e001      	b.n	80048cc <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80048c8:	2302      	movs	r3, #2
 80048ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80048cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3718      	adds	r7, #24
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	40022000 	.word	0x40022000
 80048dc:	40022100 	.word	0x40022100
 80048e0:	40022300 	.word	0x40022300
 80048e4:	58026300 	.word	0x58026300
 80048e8:	fffff0fe 	.word	0xfffff0fe

080048ec <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d101      	bne.n	8004902 <HAL_ADC_Stop+0x16>
 80048fe:	2302      	movs	r3, #2
 8004900:	e021      	b.n	8004946 <HAL_ADC_Stop+0x5a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800490a:	2103      	movs	r1, #3
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 fe4f 	bl	80055b0 <ADC_ConversionStop>
 8004912:	4603      	mov	r3, r0
 8004914:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004916:	7bfb      	ldrb	r3, [r7, #15]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10f      	bne.n	800493c <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 ff8d 	bl	800583c <ADC_Disable>
 8004922:	4603      	mov	r3, r0
 8004924:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004926:	7bfb      	ldrb	r3, [r7, #15]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d107      	bne.n	800493c <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004930:	4b07      	ldr	r3, [pc, #28]	; (8004950 <HAL_ADC_Stop+0x64>)
 8004932:	4013      	ands	r3, r2
 8004934:	f043 0201 	orr.w	r2, r3, #1
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004944:	7bfb      	ldrb	r3, [r7, #15]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	ffffeefe 	.word	0xffffeefe

08004954 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b088      	sub	sp, #32
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a72      	ldr	r2, [pc, #456]	; (8004b2c <HAL_ADC_PollForConversion+0x1d8>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d004      	beq.n	8004972 <HAL_ADC_PollForConversion+0x1e>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a70      	ldr	r2, [pc, #448]	; (8004b30 <HAL_ADC_PollForConversion+0x1dc>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d101      	bne.n	8004976 <HAL_ADC_PollForConversion+0x22>
 8004972:	4b70      	ldr	r3, [pc, #448]	; (8004b34 <HAL_ADC_PollForConversion+0x1e0>)
 8004974:	e000      	b.n	8004978 <HAL_ADC_PollForConversion+0x24>
 8004976:	4b70      	ldr	r3, [pc, #448]	; (8004b38 <HAL_ADC_PollForConversion+0x1e4>)
 8004978:	4618      	mov	r0, r3
 800497a:	f7ff fbc9 	bl	8004110 <LL_ADC_GetMultimode>
 800497e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	2b08      	cmp	r3, #8
 8004986:	d102      	bne.n	800498e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8004988:	2308      	movs	r3, #8
 800498a:	61fb      	str	r3, [r7, #28]
 800498c:	e037      	b.n	80049fe <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d005      	beq.n	80049a0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	2b05      	cmp	r3, #5
 8004998:	d002      	beq.n	80049a0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	2b09      	cmp	r3, #9
 800499e:	d111      	bne.n	80049c4 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d007      	beq.n	80049be <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049b2:	f043 0220 	orr.w	r2, r3, #32
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e0b1      	b.n	8004b22 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80049be:	2304      	movs	r3, #4
 80049c0:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80049c2:	e01c      	b.n	80049fe <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a58      	ldr	r2, [pc, #352]	; (8004b2c <HAL_ADC_PollForConversion+0x1d8>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d004      	beq.n	80049d8 <HAL_ADC_PollForConversion+0x84>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a57      	ldr	r2, [pc, #348]	; (8004b30 <HAL_ADC_PollForConversion+0x1dc>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d101      	bne.n	80049dc <HAL_ADC_PollForConversion+0x88>
 80049d8:	4b56      	ldr	r3, [pc, #344]	; (8004b34 <HAL_ADC_PollForConversion+0x1e0>)
 80049da:	e000      	b.n	80049de <HAL_ADC_PollForConversion+0x8a>
 80049dc:	4b56      	ldr	r3, [pc, #344]	; (8004b38 <HAL_ADC_PollForConversion+0x1e4>)
 80049de:	4618      	mov	r0, r3
 80049e0:	f7ff fba4 	bl	800412c <LL_ADC_GetMultiDMATransfer>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d007      	beq.n	80049fa <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ee:	f043 0220 	orr.w	r2, r3, #32
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e093      	b.n	8004b22 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80049fa:	2304      	movs	r3, #4
 80049fc:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80049fe:	f7ff f971 	bl	8003ce4 <HAL_GetTick>
 8004a02:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004a04:	e021      	b.n	8004a4a <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0c:	d01d      	beq.n	8004a4a <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004a0e:	f7ff f969 	bl	8003ce4 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	683a      	ldr	r2, [r7, #0]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d302      	bcc.n	8004a24 <HAL_ADC_PollForConversion+0xd0>
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d112      	bne.n	8004a4a <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10b      	bne.n	8004a4a <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a36:	f043 0204 	orr.w	r2, r3, #4
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	661a      	str	r2, [r3, #96]	; 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

          return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e06b      	b.n	8004b22 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	4013      	ands	r3, r2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0d6      	beq.n	8004a06 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a5c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	661a      	str	r2, [r3, #96]	; 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7ff faa7 	bl	8003fbc <LL_ADC_REG_IsTriggerSourceSWStart>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d01c      	beq.n	8004aae <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	7e5b      	ldrb	r3, [r3, #25]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d118      	bne.n	8004aae <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0308 	and.w	r3, r3, #8
 8004a86:	2b08      	cmp	r3, #8
 8004a88:	d111      	bne.n	8004aae <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	661a      	str	r2, [r3, #96]	; 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d105      	bne.n	8004aae <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aa6:	f043 0201 	orr.w	r2, r3, #1
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a1f      	ldr	r2, [pc, #124]	; (8004b30 <HAL_ADC_PollForConversion+0x1dc>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d002      	beq.n	8004abe <HAL_ADC_PollForConversion+0x16a>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	e000      	b.n	8004ac0 <HAL_ADC_PollForConversion+0x16c>
 8004abe:	4b1b      	ldr	r3, [pc, #108]	; (8004b2c <HAL_ADC_PollForConversion+0x1d8>)
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	6812      	ldr	r2, [r2, #0]
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d008      	beq.n	8004ada <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d005      	beq.n	8004ada <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	2b05      	cmp	r3, #5
 8004ad2:	d002      	beq.n	8004ada <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	2b09      	cmp	r3, #9
 8004ad8:	d104      	bne.n	8004ae4 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	61bb      	str	r3, [r7, #24]
 8004ae2:	e00c      	b.n	8004afe <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a11      	ldr	r2, [pc, #68]	; (8004b30 <HAL_ADC_PollForConversion+0x1dc>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d002      	beq.n	8004af4 <HAL_ADC_PollForConversion+0x1a0>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	e000      	b.n	8004af6 <HAL_ADC_PollForConversion+0x1a2>
 8004af4:	4b0d      	ldr	r3, [pc, #52]	; (8004b2c <HAL_ADC_PollForConversion+0x1d8>)
 8004af6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	2b08      	cmp	r3, #8
 8004b02:	d104      	bne.n	8004b0e <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2208      	movs	r2, #8
 8004b0a:	601a      	str	r2, [r3, #0]
 8004b0c:	e008      	b.n	8004b20 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d103      	bne.n	8004b20 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	220c      	movs	r2, #12
 8004b1e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3720      	adds	r7, #32
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	40022000 	.word	0x40022000
 8004b30:	40022100 	.word	0x40022100
 8004b34:	40022300 	.word	0x40022300
 8004b38:	58026300 	.word	0x58026300

08004b3c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
	...

08004b58 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004b58:	b590      	push	{r4, r7, lr}
 8004b5a:	b0b9      	sub	sp, #228	; 0xe4
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b62:	2300      	movs	r3, #0
 8004b64:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b72:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	4aa9      	ldr	r2, [pc, #676]	; (8004e20 <HAL_ADC_ConfigChannel+0x2c8>)
 8004b7a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d102      	bne.n	8004b8c <HAL_ADC_ConfigChannel+0x34>
 8004b86:	2302      	movs	r3, #2
 8004b88:	f000 bcfa 	b.w	8005580 <HAL_ADC_ConfigChannel+0xa28>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7ff fb99 	bl	80042d0 <LL_ADC_REG_IsConversionOngoing>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f040 84de 	bne.w	8005562 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a9e      	ldr	r2, [pc, #632]	; (8004e24 <HAL_ADC_ConfigChannel+0x2cc>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d033      	beq.n	8004c18 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d108      	bne.n	8004bce <HAL_ADC_ConfigChannel+0x76>
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	0e9b      	lsrs	r3, r3, #26
 8004bc2:	f003 031f 	and.w	r3, r3, #31
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bcc:	e01d      	b.n	8004c0a <HAL_ADC_ConfigChannel+0xb2>
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004bda:	fa93 f3a3 	rbit	r3, r3
 8004bde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004be2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004be6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004bea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8004bf2:	2320      	movs	r3, #32
 8004bf4:	e004      	b.n	8004c00 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8004bf6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004bfa:	fab3 f383 	clz	r3, r3
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	f003 031f 	and.w	r3, r3, #31
 8004c04:	2201      	movs	r2, #1
 8004c06:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	6812      	ldr	r2, [r2, #0]
 8004c0e:	69d1      	ldr	r1, [r2, #28]
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	6812      	ldr	r2, [r2, #0]
 8004c14:	430b      	orrs	r3, r1
 8004c16:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6818      	ldr	r0, [r3, #0]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	6859      	ldr	r1, [r3, #4]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	461a      	mov	r2, r3
 8004c26:	f7ff f9dc 	bl	8003fe2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7ff fb4e 	bl	80042d0 <LL_ADC_REG_IsConversionOngoing>
 8004c34:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7ff fb6f 	bl	8004320 <LL_ADC_INJ_IsConversionOngoing>
 8004c42:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004c46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f040 8270 	bne.w	8005130 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004c50:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f040 826b 	bne.w	8005130 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6818      	ldr	r0, [r3, #0]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	6819      	ldr	r1, [r3, #0]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	461a      	mov	r2, r3
 8004c68:	f7ff f9e7 	bl	800403a <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a6c      	ldr	r2, [pc, #432]	; (8004e24 <HAL_ADC_ConfigChannel+0x2cc>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d10d      	bne.n	8004c92 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	695a      	ldr	r2, [r3, #20]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	08db      	lsrs	r3, r3, #3
 8004c82:	f003 0303 	and.w	r3, r3, #3
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c90:	e032      	b.n	8004cf8 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004c92:	4b65      	ldr	r3, [pc, #404]	; (8004e28 <HAL_ADC_ConfigChannel+0x2d0>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004c9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c9e:	d10b      	bne.n	8004cb8 <HAL_ADC_ConfigChannel+0x160>
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	695a      	ldr	r2, [r3, #20]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	089b      	lsrs	r3, r3, #2
 8004cac:	f003 0307 	and.w	r3, r3, #7
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb6:	e01d      	b.n	8004cf4 <HAL_ADC_ConfigChannel+0x19c>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	f003 0310 	and.w	r3, r3, #16
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10b      	bne.n	8004cde <HAL_ADC_ConfigChannel+0x186>
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	695a      	ldr	r2, [r3, #20]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	089b      	lsrs	r3, r3, #2
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cdc:	e00a      	b.n	8004cf4 <HAL_ADC_ConfigChannel+0x19c>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	695a      	ldr	r2, [r3, #20]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	089b      	lsrs	r3, r3, #2
 8004cea:	f003 0304 	and.w	r3, r3, #4
 8004cee:	005b      	lsls	r3, r3, #1
 8004cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	2b04      	cmp	r3, #4
 8004cfe:	d048      	beq.n	8004d92 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6818      	ldr	r0, [r3, #0]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	6919      	ldr	r1, [r3, #16]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d10:	f7ff f862 	bl	8003dd8 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a42      	ldr	r2, [pc, #264]	; (8004e24 <HAL_ADC_ConfigChannel+0x2cc>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d119      	bne.n	8004d52 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6818      	ldr	r0, [r3, #0]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	6919      	ldr	r1, [r3, #16]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	69db      	ldr	r3, [r3, #28]
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	f7ff f8fa 	bl	8003f24 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6818      	ldr	r0, [r3, #0]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	6919      	ldr	r1, [r3, #16]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d102      	bne.n	8004d48 <HAL_ADC_ConfigChannel+0x1f0>
 8004d42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d46:	e000      	b.n	8004d4a <HAL_ADC_ConfigChannel+0x1f2>
 8004d48:	2300      	movs	r3, #0
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	f7ff f8c8 	bl	8003ee0 <LL_ADC_SetOffsetSaturation>
 8004d50:	e1ee      	b.n	8005130 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6818      	ldr	r0, [r3, #0]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	6919      	ldr	r1, [r3, #16]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d102      	bne.n	8004d6a <HAL_ADC_ConfigChannel+0x212>
 8004d64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004d68:	e000      	b.n	8004d6c <HAL_ADC_ConfigChannel+0x214>
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	f7ff f895 	bl	8003e9c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6818      	ldr	r0, [r3, #0]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	6919      	ldr	r1, [r3, #16]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	7e1b      	ldrb	r3, [r3, #24]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d102      	bne.n	8004d88 <HAL_ADC_ConfigChannel+0x230>
 8004d82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004d86:	e000      	b.n	8004d8a <HAL_ADC_ConfigChannel+0x232>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	f7ff f86c 	bl	8003e68 <LL_ADC_SetDataRightShift>
 8004d90:	e1ce      	b.n	8005130 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a23      	ldr	r2, [pc, #140]	; (8004e24 <HAL_ADC_ConfigChannel+0x2cc>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	f040 8181 	bne.w	80050a0 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2100      	movs	r1, #0
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7ff f849 	bl	8003e3c <LL_ADC_GetOffsetChannel>
 8004daa:	4603      	mov	r3, r0
 8004dac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10a      	bne.n	8004dca <HAL_ADC_ConfigChannel+0x272>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2100      	movs	r1, #0
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7ff f83e 	bl	8003e3c <LL_ADC_GetOffsetChannel>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	0e9b      	lsrs	r3, r3, #26
 8004dc4:	f003 021f 	and.w	r2, r3, #31
 8004dc8:	e01e      	b.n	8004e08 <HAL_ADC_ConfigChannel+0x2b0>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2100      	movs	r1, #0
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f7ff f833 	bl	8003e3c <LL_ADC_GetOffsetChannel>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ddc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004de0:	fa93 f3a3 	rbit	r3, r3
 8004de4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004de8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004dec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8004df0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d101      	bne.n	8004dfc <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8004df8:	2320      	movs	r3, #32
 8004dfa:	e004      	b.n	8004e06 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8004dfc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004e00:	fab3 f383 	clz	r3, r3
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	461a      	mov	r2, r3
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10b      	bne.n	8004e2c <HAL_ADC_ConfigChannel+0x2d4>
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	0e9b      	lsrs	r3, r3, #26
 8004e1a:	f003 031f 	and.w	r3, r3, #31
 8004e1e:	e01e      	b.n	8004e5e <HAL_ADC_ConfigChannel+0x306>
 8004e20:	47ff0000 	.word	0x47ff0000
 8004e24:	58026000 	.word	0x58026000
 8004e28:	5c001000 	.word	0x5c001000
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e38:	fa93 f3a3 	rbit	r3, r3
 8004e3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004e40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004e44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004e48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8004e50:	2320      	movs	r3, #32
 8004e52:	e004      	b.n	8004e5e <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8004e54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004e58:	fab3 f383 	clz	r3, r3
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d106      	bne.n	8004e70 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2200      	movs	r2, #0
 8004e68:	2100      	movs	r1, #0
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7ff f87c 	bl	8003f68 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2101      	movs	r1, #1
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7fe ffe0 	bl	8003e3c <LL_ADC_GetOffsetChannel>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10a      	bne.n	8004e9c <HAL_ADC_ConfigChannel+0x344>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7fe ffd5 	bl	8003e3c <LL_ADC_GetOffsetChannel>
 8004e92:	4603      	mov	r3, r0
 8004e94:	0e9b      	lsrs	r3, r3, #26
 8004e96:	f003 021f 	and.w	r2, r3, #31
 8004e9a:	e01e      	b.n	8004eda <HAL_ADC_ConfigChannel+0x382>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2101      	movs	r1, #1
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7fe ffca 	bl	8003e3c <LL_ADC_GetOffsetChannel>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004eb2:	fa93 f3a3 	rbit	r3, r3
 8004eb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004eba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ebe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004ec2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8004eca:	2320      	movs	r3, #32
 8004ecc:	e004      	b.n	8004ed8 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8004ece:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004ed2:	fab3 f383 	clz	r3, r3
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	461a      	mov	r2, r3
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d105      	bne.n	8004ef2 <HAL_ADC_ConfigChannel+0x39a>
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	0e9b      	lsrs	r3, r3, #26
 8004eec:	f003 031f 	and.w	r3, r3, #31
 8004ef0:	e018      	b.n	8004f24 <HAL_ADC_ConfigChannel+0x3cc>
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004efa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004efe:	fa93 f3a3 	rbit	r3, r3
 8004f02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004f06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f0a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004f0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8004f16:	2320      	movs	r3, #32
 8004f18:	e004      	b.n	8004f24 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8004f1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f1e:	fab3 f383 	clz	r3, r3
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d106      	bne.n	8004f36 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	2101      	movs	r1, #1
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7ff f819 	bl	8003f68 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2102      	movs	r1, #2
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7fe ff7d 	bl	8003e3c <LL_ADC_GetOffsetChannel>
 8004f42:	4603      	mov	r3, r0
 8004f44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10a      	bne.n	8004f62 <HAL_ADC_ConfigChannel+0x40a>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2102      	movs	r1, #2
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fe ff72 	bl	8003e3c <LL_ADC_GetOffsetChannel>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	0e9b      	lsrs	r3, r3, #26
 8004f5c:	f003 021f 	and.w	r2, r3, #31
 8004f60:	e01e      	b.n	8004fa0 <HAL_ADC_ConfigChannel+0x448>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2102      	movs	r1, #2
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7fe ff67 	bl	8003e3c <LL_ADC_GetOffsetChannel>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f78:	fa93 f3a3 	rbit	r3, r3
 8004f7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004f80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004f88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8004f90:	2320      	movs	r3, #32
 8004f92:	e004      	b.n	8004f9e <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8004f94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f98:	fab3 f383 	clz	r3, r3
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d105      	bne.n	8004fb8 <HAL_ADC_ConfigChannel+0x460>
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	0e9b      	lsrs	r3, r3, #26
 8004fb2:	f003 031f 	and.w	r3, r3, #31
 8004fb6:	e014      	b.n	8004fe2 <HAL_ADC_ConfigChannel+0x48a>
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fc0:	fa93 f3a3 	rbit	r3, r3
 8004fc4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004fc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004fcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004fd4:	2320      	movs	r3, #32
 8004fd6:	e004      	b.n	8004fe2 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004fd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004fdc:	fab3 f383 	clz	r3, r3
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d106      	bne.n	8004ff4 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2200      	movs	r2, #0
 8004fec:	2102      	movs	r1, #2
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7fe ffba 	bl	8003f68 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2103      	movs	r1, #3
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7fe ff1e 	bl	8003e3c <LL_ADC_GetOffsetChannel>
 8005000:	4603      	mov	r3, r0
 8005002:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10a      	bne.n	8005020 <HAL_ADC_ConfigChannel+0x4c8>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2103      	movs	r1, #3
 8005010:	4618      	mov	r0, r3
 8005012:	f7fe ff13 	bl	8003e3c <LL_ADC_GetOffsetChannel>
 8005016:	4603      	mov	r3, r0
 8005018:	0e9b      	lsrs	r3, r3, #26
 800501a:	f003 021f 	and.w	r2, r3, #31
 800501e:	e017      	b.n	8005050 <HAL_ADC_ConfigChannel+0x4f8>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2103      	movs	r1, #3
 8005026:	4618      	mov	r0, r3
 8005028:	f7fe ff08 	bl	8003e3c <LL_ADC_GetOffsetChannel>
 800502c:	4603      	mov	r3, r0
 800502e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005030:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005032:	fa93 f3a3 	rbit	r3, r3
 8005036:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800503a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800503c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8005042:	2320      	movs	r3, #32
 8005044:	e003      	b.n	800504e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8005046:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005048:	fab3 f383 	clz	r3, r3
 800504c:	b2db      	uxtb	r3, r3
 800504e:	461a      	mov	r2, r3
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005058:	2b00      	cmp	r3, #0
 800505a:	d105      	bne.n	8005068 <HAL_ADC_ConfigChannel+0x510>
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	0e9b      	lsrs	r3, r3, #26
 8005062:	f003 031f 	and.w	r3, r3, #31
 8005066:	e011      	b.n	800508c <HAL_ADC_ConfigChannel+0x534>
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800506e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005070:	fa93 f3a3 	rbit	r3, r3
 8005074:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8005076:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005078:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800507a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800507c:	2b00      	cmp	r3, #0
 800507e:	d101      	bne.n	8005084 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8005080:	2320      	movs	r3, #32
 8005082:	e003      	b.n	800508c <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8005084:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005086:	fab3 f383 	clz	r3, r3
 800508a:	b2db      	uxtb	r3, r3
 800508c:	429a      	cmp	r2, r3
 800508e:	d14f      	bne.n	8005130 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2200      	movs	r2, #0
 8005096:	2103      	movs	r1, #3
 8005098:	4618      	mov	r0, r3
 800509a:	f7fe ff65 	bl	8003f68 <LL_ADC_SetOffsetState>
 800509e:	e047      	b.n	8005130 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	069b      	lsls	r3, r3, #26
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d107      	bne.n	80050c4 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80050c2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	069b      	lsls	r3, r3, #26
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d107      	bne.n	80050e8 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80050e6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	069b      	lsls	r3, r3, #26
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d107      	bne.n	800510c <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800510a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005112:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	069b      	lsls	r3, r3, #26
 800511c:	429a      	cmp	r2, r3
 800511e:	d107      	bne.n	8005130 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800512e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4618      	mov	r0, r3
 8005136:	f7ff f87d 	bl	8004234 <LL_ADC_IsEnabled>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	f040 8219 	bne.w	8005574 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6818      	ldr	r0, [r3, #0]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	6819      	ldr	r1, [r3, #0]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	461a      	mov	r2, r3
 8005150:	f7fe ff9e 	bl	8004090 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	4aa1      	ldr	r2, [pc, #644]	; (80053e0 <HAL_ADC_ConfigChannel+0x888>)
 800515a:	4293      	cmp	r3, r2
 800515c:	f040 812e 	bne.w	80053bc <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10b      	bne.n	8005188 <HAL_ADC_ConfigChannel+0x630>
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	0e9b      	lsrs	r3, r3, #26
 8005176:	3301      	adds	r3, #1
 8005178:	f003 031f 	and.w	r3, r3, #31
 800517c:	2b09      	cmp	r3, #9
 800517e:	bf94      	ite	ls
 8005180:	2301      	movls	r3, #1
 8005182:	2300      	movhi	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	e019      	b.n	80051bc <HAL_ADC_ConfigChannel+0x664>
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800518e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005190:	fa93 f3a3 	rbit	r3, r3
 8005194:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005198:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800519a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80051a0:	2320      	movs	r3, #32
 80051a2:	e003      	b.n	80051ac <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80051a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051a6:	fab3 f383 	clz	r3, r3
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	3301      	adds	r3, #1
 80051ae:	f003 031f 	and.w	r3, r3, #31
 80051b2:	2b09      	cmp	r3, #9
 80051b4:	bf94      	ite	ls
 80051b6:	2301      	movls	r3, #1
 80051b8:	2300      	movhi	r3, #0
 80051ba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d079      	beq.n	80052b4 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d107      	bne.n	80051dc <HAL_ADC_ConfigChannel+0x684>
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	0e9b      	lsrs	r3, r3, #26
 80051d2:	3301      	adds	r3, #1
 80051d4:	069b      	lsls	r3, r3, #26
 80051d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80051da:	e015      	b.n	8005208 <HAL_ADC_ConfigChannel+0x6b0>
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051e4:	fa93 f3a3 	rbit	r3, r3
 80051e8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80051ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051ec:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80051ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80051f4:	2320      	movs	r3, #32
 80051f6:	e003      	b.n	8005200 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 80051f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051fa:	fab3 f383 	clz	r3, r3
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	3301      	adds	r3, #1
 8005202:	069b      	lsls	r3, r3, #26
 8005204:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005210:	2b00      	cmp	r3, #0
 8005212:	d109      	bne.n	8005228 <HAL_ADC_ConfigChannel+0x6d0>
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	0e9b      	lsrs	r3, r3, #26
 800521a:	3301      	adds	r3, #1
 800521c:	f003 031f 	and.w	r3, r3, #31
 8005220:	2101      	movs	r1, #1
 8005222:	fa01 f303 	lsl.w	r3, r1, r3
 8005226:	e017      	b.n	8005258 <HAL_ADC_ConfigChannel+0x700>
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800522e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005230:	fa93 f3a3 	rbit	r3, r3
 8005234:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8005236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005238:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800523a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800523c:	2b00      	cmp	r3, #0
 800523e:	d101      	bne.n	8005244 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8005240:	2320      	movs	r3, #32
 8005242:	e003      	b.n	800524c <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8005244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005246:	fab3 f383 	clz	r3, r3
 800524a:	b2db      	uxtb	r3, r3
 800524c:	3301      	adds	r3, #1
 800524e:	f003 031f 	and.w	r3, r3, #31
 8005252:	2101      	movs	r1, #1
 8005254:	fa01 f303 	lsl.w	r3, r1, r3
 8005258:	ea42 0103 	orr.w	r1, r2, r3
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10a      	bne.n	800527e <HAL_ADC_ConfigChannel+0x726>
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	0e9b      	lsrs	r3, r3, #26
 800526e:	3301      	adds	r3, #1
 8005270:	f003 021f 	and.w	r2, r3, #31
 8005274:	4613      	mov	r3, r2
 8005276:	005b      	lsls	r3, r3, #1
 8005278:	4413      	add	r3, r2
 800527a:	051b      	lsls	r3, r3, #20
 800527c:	e018      	b.n	80052b0 <HAL_ADC_ConfigChannel+0x758>
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005286:	fa93 f3a3 	rbit	r3, r3
 800528a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800528c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8005296:	2320      	movs	r3, #32
 8005298:	e003      	b.n	80052a2 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 800529a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529c:	fab3 f383 	clz	r3, r3
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	3301      	adds	r3, #1
 80052a4:	f003 021f 	and.w	r2, r3, #31
 80052a8:	4613      	mov	r3, r2
 80052aa:	005b      	lsls	r3, r3, #1
 80052ac:	4413      	add	r3, r2
 80052ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80052b0:	430b      	orrs	r3, r1
 80052b2:	e07e      	b.n	80053b2 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d107      	bne.n	80052d0 <HAL_ADC_ConfigChannel+0x778>
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	0e9b      	lsrs	r3, r3, #26
 80052c6:	3301      	adds	r3, #1
 80052c8:	069b      	lsls	r3, r3, #26
 80052ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80052ce:	e015      	b.n	80052fc <HAL_ADC_ConfigChannel+0x7a4>
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d8:	fa93 f3a3 	rbit	r3, r3
 80052dc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80052de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80052e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d101      	bne.n	80052ec <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80052e8:	2320      	movs	r3, #32
 80052ea:	e003      	b.n	80052f4 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80052ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ee:	fab3 f383 	clz	r3, r3
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	3301      	adds	r3, #1
 80052f6:	069b      	lsls	r3, r3, #26
 80052f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005304:	2b00      	cmp	r3, #0
 8005306:	d109      	bne.n	800531c <HAL_ADC_ConfigChannel+0x7c4>
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	0e9b      	lsrs	r3, r3, #26
 800530e:	3301      	adds	r3, #1
 8005310:	f003 031f 	and.w	r3, r3, #31
 8005314:	2101      	movs	r1, #1
 8005316:	fa01 f303 	lsl.w	r3, r1, r3
 800531a:	e017      	b.n	800534c <HAL_ADC_ConfigChannel+0x7f4>
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	fa93 f3a3 	rbit	r3, r3
 8005328:	61bb      	str	r3, [r7, #24]
  return result;
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800532e:	6a3b      	ldr	r3, [r7, #32]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8005334:	2320      	movs	r3, #32
 8005336:	e003      	b.n	8005340 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8005338:	6a3b      	ldr	r3, [r7, #32]
 800533a:	fab3 f383 	clz	r3, r3
 800533e:	b2db      	uxtb	r3, r3
 8005340:	3301      	adds	r3, #1
 8005342:	f003 031f 	and.w	r3, r3, #31
 8005346:	2101      	movs	r1, #1
 8005348:	fa01 f303 	lsl.w	r3, r1, r3
 800534c:	ea42 0103 	orr.w	r1, r2, r3
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10d      	bne.n	8005378 <HAL_ADC_ConfigChannel+0x820>
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	0e9b      	lsrs	r3, r3, #26
 8005362:	3301      	adds	r3, #1
 8005364:	f003 021f 	and.w	r2, r3, #31
 8005368:	4613      	mov	r3, r2
 800536a:	005b      	lsls	r3, r3, #1
 800536c:	4413      	add	r3, r2
 800536e:	3b1e      	subs	r3, #30
 8005370:	051b      	lsls	r3, r3, #20
 8005372:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005376:	e01b      	b.n	80053b0 <HAL_ADC_ConfigChannel+0x858>
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	fa93 f3a3 	rbit	r3, r3
 8005384:	60fb      	str	r3, [r7, #12]
  return result;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8005390:	2320      	movs	r3, #32
 8005392:	e003      	b.n	800539c <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	fab3 f383 	clz	r3, r3
 800539a:	b2db      	uxtb	r3, r3
 800539c:	3301      	adds	r3, #1
 800539e:	f003 021f 	and.w	r2, r3, #31
 80053a2:	4613      	mov	r3, r2
 80053a4:	005b      	lsls	r3, r3, #1
 80053a6:	4413      	add	r3, r2
 80053a8:	3b1e      	subs	r3, #30
 80053aa:	051b      	lsls	r3, r3, #20
 80053ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80053b0:	430b      	orrs	r3, r1
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	6892      	ldr	r2, [r2, #8]
 80053b6:	4619      	mov	r1, r3
 80053b8:	f7fe fe3f 	bl	800403a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f280 80d7 	bge.w	8005574 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a06      	ldr	r2, [pc, #24]	; (80053e4 <HAL_ADC_ConfigChannel+0x88c>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d004      	beq.n	80053da <HAL_ADC_ConfigChannel+0x882>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a04      	ldr	r2, [pc, #16]	; (80053e8 <HAL_ADC_ConfigChannel+0x890>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d10a      	bne.n	80053f0 <HAL_ADC_ConfigChannel+0x898>
 80053da:	4b04      	ldr	r3, [pc, #16]	; (80053ec <HAL_ADC_ConfigChannel+0x894>)
 80053dc:	e009      	b.n	80053f2 <HAL_ADC_ConfigChannel+0x89a>
 80053de:	bf00      	nop
 80053e0:	47ff0000 	.word	0x47ff0000
 80053e4:	40022000 	.word	0x40022000
 80053e8:	40022100 	.word	0x40022100
 80053ec:	40022300 	.word	0x40022300
 80053f0:	4b65      	ldr	r3, [pc, #404]	; (8005588 <HAL_ADC_ConfigChannel+0xa30>)
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7fe fce2 	bl	8003dbc <LL_ADC_GetCommonPathInternalCh>
 80053f8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a62      	ldr	r2, [pc, #392]	; (800558c <HAL_ADC_ConfigChannel+0xa34>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d004      	beq.n	8005410 <HAL_ADC_ConfigChannel+0x8b8>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a61      	ldr	r2, [pc, #388]	; (8005590 <HAL_ADC_ConfigChannel+0xa38>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d10e      	bne.n	800542e <HAL_ADC_ConfigChannel+0x8d6>
 8005410:	485e      	ldr	r0, [pc, #376]	; (800558c <HAL_ADC_ConfigChannel+0xa34>)
 8005412:	f7fe ff0f 	bl	8004234 <LL_ADC_IsEnabled>
 8005416:	4604      	mov	r4, r0
 8005418:	485d      	ldr	r0, [pc, #372]	; (8005590 <HAL_ADC_ConfigChannel+0xa38>)
 800541a:	f7fe ff0b 	bl	8004234 <LL_ADC_IsEnabled>
 800541e:	4603      	mov	r3, r0
 8005420:	4323      	orrs	r3, r4
 8005422:	2b00      	cmp	r3, #0
 8005424:	bf0c      	ite	eq
 8005426:	2301      	moveq	r3, #1
 8005428:	2300      	movne	r3, #0
 800542a:	b2db      	uxtb	r3, r3
 800542c:	e008      	b.n	8005440 <HAL_ADC_ConfigChannel+0x8e8>
 800542e:	4859      	ldr	r0, [pc, #356]	; (8005594 <HAL_ADC_ConfigChannel+0xa3c>)
 8005430:	f7fe ff00 	bl	8004234 <LL_ADC_IsEnabled>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	bf0c      	ite	eq
 800543a:	2301      	moveq	r3, #1
 800543c:	2300      	movne	r3, #0
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b00      	cmp	r3, #0
 8005442:	f000 8084 	beq.w	800554e <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a53      	ldr	r2, [pc, #332]	; (8005598 <HAL_ADC_ConfigChannel+0xa40>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d132      	bne.n	80054b6 <HAL_ADC_ConfigChannel+0x95e>
 8005450:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005454:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d12c      	bne.n	80054b6 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a4c      	ldr	r2, [pc, #304]	; (8005594 <HAL_ADC_ConfigChannel+0xa3c>)
 8005462:	4293      	cmp	r3, r2
 8005464:	f040 8086 	bne.w	8005574 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a47      	ldr	r2, [pc, #284]	; (800558c <HAL_ADC_ConfigChannel+0xa34>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d004      	beq.n	800547c <HAL_ADC_ConfigChannel+0x924>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a46      	ldr	r2, [pc, #280]	; (8005590 <HAL_ADC_ConfigChannel+0xa38>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d101      	bne.n	8005480 <HAL_ADC_ConfigChannel+0x928>
 800547c:	4a47      	ldr	r2, [pc, #284]	; (800559c <HAL_ADC_ConfigChannel+0xa44>)
 800547e:	e000      	b.n	8005482 <HAL_ADC_ConfigChannel+0x92a>
 8005480:	4a41      	ldr	r2, [pc, #260]	; (8005588 <HAL_ADC_ConfigChannel+0xa30>)
 8005482:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005486:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800548a:	4619      	mov	r1, r3
 800548c:	4610      	mov	r0, r2
 800548e:	f7fe fc82 	bl	8003d96 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005492:	4b43      	ldr	r3, [pc, #268]	; (80055a0 <HAL_ADC_ConfigChannel+0xa48>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	099b      	lsrs	r3, r3, #6
 8005498:	4a42      	ldr	r2, [pc, #264]	; (80055a4 <HAL_ADC_ConfigChannel+0xa4c>)
 800549a:	fba2 2303 	umull	r2, r3, r2, r3
 800549e:	099b      	lsrs	r3, r3, #6
 80054a0:	3301      	adds	r3, #1
 80054a2:	005b      	lsls	r3, r3, #1
 80054a4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80054a6:	e002      	b.n	80054ae <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	3b01      	subs	r3, #1
 80054ac:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1f9      	bne.n	80054a8 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80054b4:	e05e      	b.n	8005574 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a3b      	ldr	r2, [pc, #236]	; (80055a8 <HAL_ADC_ConfigChannel+0xa50>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d120      	bne.n	8005502 <HAL_ADC_ConfigChannel+0x9aa>
 80054c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80054c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d11a      	bne.n	8005502 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a30      	ldr	r2, [pc, #192]	; (8005594 <HAL_ADC_ConfigChannel+0xa3c>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d14e      	bne.n	8005574 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a2c      	ldr	r2, [pc, #176]	; (800558c <HAL_ADC_ConfigChannel+0xa34>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d004      	beq.n	80054ea <HAL_ADC_ConfigChannel+0x992>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a2a      	ldr	r2, [pc, #168]	; (8005590 <HAL_ADC_ConfigChannel+0xa38>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d101      	bne.n	80054ee <HAL_ADC_ConfigChannel+0x996>
 80054ea:	4a2c      	ldr	r2, [pc, #176]	; (800559c <HAL_ADC_ConfigChannel+0xa44>)
 80054ec:	e000      	b.n	80054f0 <HAL_ADC_ConfigChannel+0x998>
 80054ee:	4a26      	ldr	r2, [pc, #152]	; (8005588 <HAL_ADC_ConfigChannel+0xa30>)
 80054f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80054f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054f8:	4619      	mov	r1, r3
 80054fa:	4610      	mov	r0, r2
 80054fc:	f7fe fc4b 	bl	8003d96 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005500:	e038      	b.n	8005574 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a29      	ldr	r2, [pc, #164]	; (80055ac <HAL_ADC_ConfigChannel+0xa54>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d133      	bne.n	8005574 <HAL_ADC_ConfigChannel+0xa1c>
 800550c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005510:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d12d      	bne.n	8005574 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a1d      	ldr	r2, [pc, #116]	; (8005594 <HAL_ADC_ConfigChannel+0xa3c>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d128      	bne.n	8005574 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a19      	ldr	r2, [pc, #100]	; (800558c <HAL_ADC_ConfigChannel+0xa34>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d004      	beq.n	8005536 <HAL_ADC_ConfigChannel+0x9de>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a17      	ldr	r2, [pc, #92]	; (8005590 <HAL_ADC_ConfigChannel+0xa38>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d101      	bne.n	800553a <HAL_ADC_ConfigChannel+0x9e2>
 8005536:	4a19      	ldr	r2, [pc, #100]	; (800559c <HAL_ADC_ConfigChannel+0xa44>)
 8005538:	e000      	b.n	800553c <HAL_ADC_ConfigChannel+0x9e4>
 800553a:	4a13      	ldr	r2, [pc, #76]	; (8005588 <HAL_ADC_ConfigChannel+0xa30>)
 800553c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005540:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005544:	4619      	mov	r1, r3
 8005546:	4610      	mov	r0, r2
 8005548:	f7fe fc25 	bl	8003d96 <LL_ADC_SetCommonPathInternalCh>
 800554c:	e012      	b.n	8005574 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005552:	f043 0220 	orr.w	r2, r3, #32
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8005560:	e008      	b.n	8005574 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005566:	f043 0220 	orr.w	r2, r3, #32
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800557c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8005580:	4618      	mov	r0, r3
 8005582:	37e4      	adds	r7, #228	; 0xe4
 8005584:	46bd      	mov	sp, r7
 8005586:	bd90      	pop	{r4, r7, pc}
 8005588:	58026300 	.word	0x58026300
 800558c:	40022000 	.word	0x40022000
 8005590:	40022100 	.word	0x40022100
 8005594:	58026000 	.word	0x58026000
 8005598:	c7520000 	.word	0xc7520000
 800559c:	40022300 	.word	0x40022300
 80055a0:	24000100 	.word	0x24000100
 80055a4:	053e2d63 	.word	0x053e2d63
 80055a8:	c3210000 	.word	0xc3210000
 80055ac:	cb840000 	.word	0xcb840000

080055b0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b088      	sub	sp, #32
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80055ba:	2300      	movs	r3, #0
 80055bc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7fe fe82 	bl	80042d0 <LL_ADC_REG_IsConversionOngoing>
 80055cc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7fe fea4 	bl	8004320 <LL_ADC_INJ_IsConversionOngoing>
 80055d8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d103      	bne.n	80055e8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f000 8098 	beq.w	8005718 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d02a      	beq.n	800564c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	7e5b      	ldrb	r3, [r3, #25]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d126      	bne.n	800564c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	7e1b      	ldrb	r3, [r3, #24]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d122      	bne.n	800564c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8005606:	2301      	movs	r3, #1
 8005608:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800560a:	e014      	b.n	8005636 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	4a45      	ldr	r2, [pc, #276]	; (8005724 <ADC_ConversionStop+0x174>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d90d      	bls.n	8005630 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005618:	f043 0210 	orr.w	r2, r3, #16
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005624:	f043 0201 	orr.w	r2, r3, #1
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e074      	b.n	800571a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	3301      	adds	r3, #1
 8005634:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005640:	2b40      	cmp	r3, #64	; 0x40
 8005642:	d1e3      	bne.n	800560c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2240      	movs	r2, #64	; 0x40
 800564a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	2b02      	cmp	r3, #2
 8005650:	d014      	beq.n	800567c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4618      	mov	r0, r3
 8005658:	f7fe fe3a 	bl	80042d0 <LL_ADC_REG_IsConversionOngoing>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00c      	beq.n	800567c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4618      	mov	r0, r3
 8005668:	f7fe fdf7 	bl	800425a <LL_ADC_IsDisableOngoing>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d104      	bne.n	800567c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4618      	mov	r0, r3
 8005678:	f7fe fe16 	bl	80042a8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d014      	beq.n	80056ac <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4618      	mov	r0, r3
 8005688:	f7fe fe4a 	bl	8004320 <LL_ADC_INJ_IsConversionOngoing>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00c      	beq.n	80056ac <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4618      	mov	r0, r3
 8005698:	f7fe fddf 	bl	800425a <LL_ADC_IsDisableOngoing>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d104      	bne.n	80056ac <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fe fe26 	bl	80042f8 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d005      	beq.n	80056be <ADC_ConversionStop+0x10e>
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	2b03      	cmp	r3, #3
 80056b6:	d105      	bne.n	80056c4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80056b8:	230c      	movs	r3, #12
 80056ba:	617b      	str	r3, [r7, #20]
        break;
 80056bc:	e005      	b.n	80056ca <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80056be:	2308      	movs	r3, #8
 80056c0:	617b      	str	r3, [r7, #20]
        break;
 80056c2:	e002      	b.n	80056ca <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80056c4:	2304      	movs	r3, #4
 80056c6:	617b      	str	r3, [r7, #20]
        break;
 80056c8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80056ca:	f7fe fb0b 	bl	8003ce4 <HAL_GetTick>
 80056ce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80056d0:	e01b      	b.n	800570a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80056d2:	f7fe fb07 	bl	8003ce4 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	2b05      	cmp	r3, #5
 80056de:	d914      	bls.n	800570a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689a      	ldr	r2, [r3, #8]
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	4013      	ands	r3, r2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00d      	beq.n	800570a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056f2:	f043 0210 	orr.w	r2, r3, #16
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056fe:	f043 0201 	orr.w	r2, r3, #1
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e007      	b.n	800571a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	689a      	ldr	r2, [r3, #8]
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	4013      	ands	r3, r2
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1dc      	bne.n	80056d2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3720      	adds	r7, #32
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	000cdbff 	.word	0x000cdbff

08005728 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4618      	mov	r0, r3
 8005736:	f7fe fd7d 	bl	8004234 <LL_ADC_IsEnabled>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d16e      	bne.n	800581e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689a      	ldr	r2, [r3, #8]
 8005746:	4b38      	ldr	r3, [pc, #224]	; (8005828 <ADC_Enable+0x100>)
 8005748:	4013      	ands	r3, r2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00d      	beq.n	800576a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005752:	f043 0210 	orr.w	r2, r3, #16
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800575e:	f043 0201 	orr.w	r2, r3, #1
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e05a      	b.n	8005820 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4618      	mov	r0, r3
 8005770:	f7fe fd38 	bl	80041e4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005774:	f7fe fab6 	bl	8003ce4 <HAL_GetTick>
 8005778:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a2b      	ldr	r2, [pc, #172]	; (800582c <ADC_Enable+0x104>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d004      	beq.n	800578e <ADC_Enable+0x66>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a29      	ldr	r2, [pc, #164]	; (8005830 <ADC_Enable+0x108>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d101      	bne.n	8005792 <ADC_Enable+0x6a>
 800578e:	4b29      	ldr	r3, [pc, #164]	; (8005834 <ADC_Enable+0x10c>)
 8005790:	e000      	b.n	8005794 <ADC_Enable+0x6c>
 8005792:	4b29      	ldr	r3, [pc, #164]	; (8005838 <ADC_Enable+0x110>)
 8005794:	4618      	mov	r0, r3
 8005796:	f7fe fcbb 	bl	8004110 <LL_ADC_GetMultimode>
 800579a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a23      	ldr	r2, [pc, #140]	; (8005830 <ADC_Enable+0x108>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d002      	beq.n	80057ac <ADC_Enable+0x84>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	e000      	b.n	80057ae <ADC_Enable+0x86>
 80057ac:	4b1f      	ldr	r3, [pc, #124]	; (800582c <ADC_Enable+0x104>)
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	6812      	ldr	r2, [r2, #0]
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d02c      	beq.n	8005810 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d130      	bne.n	800581e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80057bc:	e028      	b.n	8005810 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fe fd36 	bl	8004234 <LL_ADC_IsEnabled>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d104      	bne.n	80057d8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7fe fd06 	bl	80041e4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80057d8:	f7fe fa84 	bl	8003ce4 <HAL_GetTick>
 80057dc:	4602      	mov	r2, r0
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d914      	bls.n	8005810 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0301 	and.w	r3, r3, #1
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d00d      	beq.n	8005810 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057f8:	f043 0210 	orr.w	r2, r3, #16
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005804:	f043 0201 	orr.w	r2, r3, #1
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e007      	b.n	8005820 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	2b01      	cmp	r3, #1
 800581c:	d1cf      	bne.n	80057be <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	8000003f 	.word	0x8000003f
 800582c:	40022000 	.word	0x40022000
 8005830:	40022100 	.word	0x40022100
 8005834:	40022300 	.word	0x40022300
 8005838:	58026300 	.word	0x58026300

0800583c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4618      	mov	r0, r3
 800584a:	f7fe fd06 	bl	800425a <LL_ADC_IsDisableOngoing>
 800584e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4618      	mov	r0, r3
 8005856:	f7fe fced 	bl	8004234 <LL_ADC_IsEnabled>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d047      	beq.n	80058f0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d144      	bne.n	80058f0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f003 030d 	and.w	r3, r3, #13
 8005870:	2b01      	cmp	r3, #1
 8005872:	d10c      	bne.n	800588e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4618      	mov	r0, r3
 800587a:	f7fe fcc7 	bl	800420c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2203      	movs	r2, #3
 8005884:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005886:	f7fe fa2d 	bl	8003ce4 <HAL_GetTick>
 800588a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800588c:	e029      	b.n	80058e2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005892:	f043 0210 	orr.w	r2, r3, #16
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800589e:	f043 0201 	orr.w	r2, r3, #1
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e023      	b.n	80058f2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80058aa:	f7fe fa1b 	bl	8003ce4 <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d914      	bls.n	80058e2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00d      	beq.n	80058e2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ca:	f043 0210 	orr.w	r2, r3, #16
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058d6:	f043 0201 	orr.w	r2, r3, #1
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e007      	b.n	80058f2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1dc      	bne.n	80058aa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
	...

080058fc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a6c      	ldr	r2, [pc, #432]	; (8005abc <ADC_ConfigureBoostMode+0x1c0>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d004      	beq.n	8005918 <ADC_ConfigureBoostMode+0x1c>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a6b      	ldr	r2, [pc, #428]	; (8005ac0 <ADC_ConfigureBoostMode+0x1c4>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d109      	bne.n	800592c <ADC_ConfigureBoostMode+0x30>
 8005918:	4b6a      	ldr	r3, [pc, #424]	; (8005ac4 <ADC_ConfigureBoostMode+0x1c8>)
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005920:	2b00      	cmp	r3, #0
 8005922:	bf14      	ite	ne
 8005924:	2301      	movne	r3, #1
 8005926:	2300      	moveq	r3, #0
 8005928:	b2db      	uxtb	r3, r3
 800592a:	e008      	b.n	800593e <ADC_ConfigureBoostMode+0x42>
 800592c:	4b66      	ldr	r3, [pc, #408]	; (8005ac8 <ADC_ConfigureBoostMode+0x1cc>)
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005934:	2b00      	cmp	r3, #0
 8005936:	bf14      	ite	ne
 8005938:	2301      	movne	r3, #1
 800593a:	2300      	moveq	r3, #0
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d01c      	beq.n	800597c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005942:	f005 fcab 	bl	800b29c <HAL_RCC_GetHCLKFreq>
 8005946:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005950:	d010      	beq.n	8005974 <ADC_ConfigureBoostMode+0x78>
 8005952:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005956:	d873      	bhi.n	8005a40 <ADC_ConfigureBoostMode+0x144>
 8005958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800595c:	d002      	beq.n	8005964 <ADC_ConfigureBoostMode+0x68>
 800595e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005962:	d16d      	bne.n	8005a40 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	0c1b      	lsrs	r3, r3, #16
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005970:	60fb      	str	r3, [r7, #12]
        break;
 8005972:	e068      	b.n	8005a46 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	089b      	lsrs	r3, r3, #2
 8005978:	60fb      	str	r3, [r7, #12]
        break;
 800597a:	e064      	b.n	8005a46 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800597c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005980:	f04f 0100 	mov.w	r1, #0
 8005984:	f006 fe86 	bl	800c694 <HAL_RCCEx_GetPeriphCLKFreq>
 8005988:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005992:	d051      	beq.n	8005a38 <ADC_ConfigureBoostMode+0x13c>
 8005994:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005998:	d854      	bhi.n	8005a44 <ADC_ConfigureBoostMode+0x148>
 800599a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800599e:	d047      	beq.n	8005a30 <ADC_ConfigureBoostMode+0x134>
 80059a0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80059a4:	d84e      	bhi.n	8005a44 <ADC_ConfigureBoostMode+0x148>
 80059a6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80059aa:	d03d      	beq.n	8005a28 <ADC_ConfigureBoostMode+0x12c>
 80059ac:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80059b0:	d848      	bhi.n	8005a44 <ADC_ConfigureBoostMode+0x148>
 80059b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059b6:	d033      	beq.n	8005a20 <ADC_ConfigureBoostMode+0x124>
 80059b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059bc:	d842      	bhi.n	8005a44 <ADC_ConfigureBoostMode+0x148>
 80059be:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80059c2:	d029      	beq.n	8005a18 <ADC_ConfigureBoostMode+0x11c>
 80059c4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80059c8:	d83c      	bhi.n	8005a44 <ADC_ConfigureBoostMode+0x148>
 80059ca:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80059ce:	d01a      	beq.n	8005a06 <ADC_ConfigureBoostMode+0x10a>
 80059d0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80059d4:	d836      	bhi.n	8005a44 <ADC_ConfigureBoostMode+0x148>
 80059d6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80059da:	d014      	beq.n	8005a06 <ADC_ConfigureBoostMode+0x10a>
 80059dc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80059e0:	d830      	bhi.n	8005a44 <ADC_ConfigureBoostMode+0x148>
 80059e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059e6:	d00e      	beq.n	8005a06 <ADC_ConfigureBoostMode+0x10a>
 80059e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059ec:	d82a      	bhi.n	8005a44 <ADC_ConfigureBoostMode+0x148>
 80059ee:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80059f2:	d008      	beq.n	8005a06 <ADC_ConfigureBoostMode+0x10a>
 80059f4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80059f8:	d824      	bhi.n	8005a44 <ADC_ConfigureBoostMode+0x148>
 80059fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80059fe:	d002      	beq.n	8005a06 <ADC_ConfigureBoostMode+0x10a>
 8005a00:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005a04:	d11e      	bne.n	8005a44 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	0c9b      	lsrs	r3, r3, #18
 8005a0c:	005b      	lsls	r3, r3, #1
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a14:	60fb      	str	r3, [r7, #12]
        break;
 8005a16:	e016      	b.n	8005a46 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	091b      	lsrs	r3, r3, #4
 8005a1c:	60fb      	str	r3, [r7, #12]
        break;
 8005a1e:	e012      	b.n	8005a46 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	095b      	lsrs	r3, r3, #5
 8005a24:	60fb      	str	r3, [r7, #12]
        break;
 8005a26:	e00e      	b.n	8005a46 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	099b      	lsrs	r3, r3, #6
 8005a2c:	60fb      	str	r3, [r7, #12]
        break;
 8005a2e:	e00a      	b.n	8005a46 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	09db      	lsrs	r3, r3, #7
 8005a34:	60fb      	str	r3, [r7, #12]
        break;
 8005a36:	e006      	b.n	8005a46 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	0a1b      	lsrs	r3, r3, #8
 8005a3c:	60fb      	str	r3, [r7, #12]
        break;
 8005a3e:	e002      	b.n	8005a46 <ADC_ConfigureBoostMode+0x14a>
        break;
 8005a40:	bf00      	nop
 8005a42:	e000      	b.n	8005a46 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005a44:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	085b      	lsrs	r3, r3, #1
 8005a4a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	4a1f      	ldr	r2, [pc, #124]	; (8005acc <ADC_ConfigureBoostMode+0x1d0>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d808      	bhi.n	8005a66 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689a      	ldr	r2, [r3, #8]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005a62:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005a64:	e025      	b.n	8005ab2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	4a19      	ldr	r2, [pc, #100]	; (8005ad0 <ADC_ConfigureBoostMode+0x1d4>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d80a      	bhi.n	8005a84 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a80:	609a      	str	r2, [r3, #8]
}
 8005a82:	e016      	b.n	8005ab2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	4a13      	ldr	r2, [pc, #76]	; (8005ad4 <ADC_ConfigureBoostMode+0x1d8>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d80a      	bhi.n	8005aa2 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a9e:	609a      	str	r2, [r3, #8]
}
 8005aa0:	e007      	b.n	8005ab2 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	689a      	ldr	r2, [r3, #8]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005ab0:	609a      	str	r2, [r3, #8]
}
 8005ab2:	bf00      	nop
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	40022000 	.word	0x40022000
 8005ac0:	40022100 	.word	0x40022100
 8005ac4:	40022300 	.word	0x40022300
 8005ac8:	58026300 	.word	0x58026300
 8005acc:	005f5e10 	.word	0x005f5e10
 8005ad0:	00bebc20 	.word	0x00bebc20
 8005ad4:	017d7840 	.word	0x017d7840

08005ad8 <LL_ADC_IsEnabled>:
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d101      	bne.n	8005af0 <LL_ADC_IsEnabled+0x18>
 8005aec:	2301      	movs	r3, #1
 8005aee:	e000      	b.n	8005af2 <LL_ADC_IsEnabled+0x1a>
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <LL_ADC_REG_IsConversionOngoing>:
{
 8005afe:	b480      	push	{r7}
 8005b00:	b083      	sub	sp, #12
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f003 0304 	and.w	r3, r3, #4
 8005b0e:	2b04      	cmp	r3, #4
 8005b10:	d101      	bne.n	8005b16 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005b12:	2301      	movs	r3, #1
 8005b14:	e000      	b.n	8005b18 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005b24:	b590      	push	{r4, r7, lr}
 8005b26:	b0a3      	sub	sp, #140	; 0x8c
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d101      	bne.n	8005b42 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005b3e:	2302      	movs	r3, #2
 8005b40:	e0c1      	b.n	8005cc6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a5e      	ldr	r2, [pc, #376]	; (8005cd0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d102      	bne.n	8005b62 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005b5c:	4b5d      	ldr	r3, [pc, #372]	; (8005cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005b5e:	60fb      	str	r3, [r7, #12]
 8005b60:	e001      	b.n	8005b66 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005b62:	2300      	movs	r3, #0
 8005b64:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d10b      	bne.n	8005b84 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b70:	f043 0220 	orr.w	r2, r3, #32
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e0a0      	b.n	8005cc6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7ff ffb9 	bl	8005afe <LL_ADC_REG_IsConversionOngoing>
 8005b8c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7ff ffb2 	bl	8005afe <LL_ADC_REG_IsConversionOngoing>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f040 8081 	bne.w	8005ca4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005ba2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d17c      	bne.n	8005ca4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a48      	ldr	r2, [pc, #288]	; (8005cd0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d004      	beq.n	8005bbe <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a46      	ldr	r2, [pc, #280]	; (8005cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d101      	bne.n	8005bc2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8005bbe:	4b46      	ldr	r3, [pc, #280]	; (8005cd8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005bc0:	e000      	b.n	8005bc4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8005bc2:	4b46      	ldr	r3, [pc, #280]	; (8005cdc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005bc4:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d039      	beq.n	8005c42 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005bce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005bde:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a3a      	ldr	r2, [pc, #232]	; (8005cd0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d004      	beq.n	8005bf4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a39      	ldr	r2, [pc, #228]	; (8005cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d10e      	bne.n	8005c12 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005bf4:	4836      	ldr	r0, [pc, #216]	; (8005cd0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005bf6:	f7ff ff6f 	bl	8005ad8 <LL_ADC_IsEnabled>
 8005bfa:	4604      	mov	r4, r0
 8005bfc:	4835      	ldr	r0, [pc, #212]	; (8005cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005bfe:	f7ff ff6b 	bl	8005ad8 <LL_ADC_IsEnabled>
 8005c02:	4603      	mov	r3, r0
 8005c04:	4323      	orrs	r3, r4
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	bf0c      	ite	eq
 8005c0a:	2301      	moveq	r3, #1
 8005c0c:	2300      	movne	r3, #0
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	e008      	b.n	8005c24 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8005c12:	4833      	ldr	r0, [pc, #204]	; (8005ce0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005c14:	f7ff ff60 	bl	8005ad8 <LL_ADC_IsEnabled>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	bf0c      	ite	eq
 8005c1e:	2301      	moveq	r3, #1
 8005c20:	2300      	movne	r3, #0
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d047      	beq.n	8005cb8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005c28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c2a:	689a      	ldr	r2, [r3, #8]
 8005c2c:	4b2d      	ldr	r3, [pc, #180]	; (8005ce4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005c2e:	4013      	ands	r3, r2
 8005c30:	683a      	ldr	r2, [r7, #0]
 8005c32:	6811      	ldr	r1, [r2, #0]
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	6892      	ldr	r2, [r2, #8]
 8005c38:	430a      	orrs	r2, r1
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c3e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005c40:	e03a      	b.n	8005cb8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005c42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005c4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c4c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a1f      	ldr	r2, [pc, #124]	; (8005cd0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d004      	beq.n	8005c62 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a1d      	ldr	r2, [pc, #116]	; (8005cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d10e      	bne.n	8005c80 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8005c62:	481b      	ldr	r0, [pc, #108]	; (8005cd0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005c64:	f7ff ff38 	bl	8005ad8 <LL_ADC_IsEnabled>
 8005c68:	4604      	mov	r4, r0
 8005c6a:	481a      	ldr	r0, [pc, #104]	; (8005cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005c6c:	f7ff ff34 	bl	8005ad8 <LL_ADC_IsEnabled>
 8005c70:	4603      	mov	r3, r0
 8005c72:	4323      	orrs	r3, r4
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	bf0c      	ite	eq
 8005c78:	2301      	moveq	r3, #1
 8005c7a:	2300      	movne	r3, #0
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	e008      	b.n	8005c92 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8005c80:	4817      	ldr	r0, [pc, #92]	; (8005ce0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005c82:	f7ff ff29 	bl	8005ad8 <LL_ADC_IsEnabled>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	bf0c      	ite	eq
 8005c8c:	2301      	moveq	r3, #1
 8005c8e:	2300      	movne	r3, #0
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d010      	beq.n	8005cb8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005c96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c98:	689a      	ldr	r2, [r3, #8]
 8005c9a:	4b12      	ldr	r3, [pc, #72]	; (8005ce4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005ca0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005ca2:	e009      	b.n	8005cb8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ca8:	f043 0220 	orr.w	r2, r3, #32
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8005cb6:	e000      	b.n	8005cba <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005cb8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005cc2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	378c      	adds	r7, #140	; 0x8c
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd90      	pop	{r4, r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	40022000 	.word	0x40022000
 8005cd4:	40022100 	.word	0x40022100
 8005cd8:	40022300 	.word	0x40022300
 8005cdc:	58026300 	.word	0x58026300
 8005ce0:	58026000 	.word	0x58026000
 8005ce4:	fffff0e0 	.word	0xfffff0e0

08005ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f003 0307 	and.w	r3, r3, #7
 8005cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005cf8:	4b0b      	ldr	r3, [pc, #44]	; (8005d28 <__NVIC_SetPriorityGrouping+0x40>)
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005d04:	4013      	ands	r3, r2
 8005d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005d10:	4b06      	ldr	r3, [pc, #24]	; (8005d2c <__NVIC_SetPriorityGrouping+0x44>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d16:	4a04      	ldr	r2, [pc, #16]	; (8005d28 <__NVIC_SetPriorityGrouping+0x40>)
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	60d3      	str	r3, [r2, #12]
}
 8005d1c:	bf00      	nop
 8005d1e:	3714      	adds	r7, #20
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	e000ed00 	.word	0xe000ed00
 8005d2c:	05fa0000 	.word	0x05fa0000

08005d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d30:	b480      	push	{r7}
 8005d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d34:	4b04      	ldr	r3, [pc, #16]	; (8005d48 <__NVIC_GetPriorityGrouping+0x18>)
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	0a1b      	lsrs	r3, r3, #8
 8005d3a:	f003 0307 	and.w	r3, r3, #7
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	e000ed00 	.word	0xe000ed00

08005d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	4603      	mov	r3, r0
 8005d54:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005d56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	db0b      	blt.n	8005d76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d5e:	88fb      	ldrh	r3, [r7, #6]
 8005d60:	f003 021f 	and.w	r2, r3, #31
 8005d64:	4907      	ldr	r1, [pc, #28]	; (8005d84 <__NVIC_EnableIRQ+0x38>)
 8005d66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d6a:	095b      	lsrs	r3, r3, #5
 8005d6c:	2001      	movs	r0, #1
 8005d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8005d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005d76:	bf00      	nop
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	e000e100 	.word	0xe000e100

08005d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	4603      	mov	r3, r0
 8005d90:	6039      	str	r1, [r7, #0]
 8005d92:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005d94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	db0a      	blt.n	8005db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	b2da      	uxtb	r2, r3
 8005da0:	490c      	ldr	r1, [pc, #48]	; (8005dd4 <__NVIC_SetPriority+0x4c>)
 8005da2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005da6:	0112      	lsls	r2, r2, #4
 8005da8:	b2d2      	uxtb	r2, r2
 8005daa:	440b      	add	r3, r1
 8005dac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005db0:	e00a      	b.n	8005dc8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	b2da      	uxtb	r2, r3
 8005db6:	4908      	ldr	r1, [pc, #32]	; (8005dd8 <__NVIC_SetPriority+0x50>)
 8005db8:	88fb      	ldrh	r3, [r7, #6]
 8005dba:	f003 030f 	and.w	r3, r3, #15
 8005dbe:	3b04      	subs	r3, #4
 8005dc0:	0112      	lsls	r2, r2, #4
 8005dc2:	b2d2      	uxtb	r2, r2
 8005dc4:	440b      	add	r3, r1
 8005dc6:	761a      	strb	r2, [r3, #24]
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr
 8005dd4:	e000e100 	.word	0xe000e100
 8005dd8:	e000ed00 	.word	0xe000ed00

08005ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b089      	sub	sp, #36	; 0x24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f003 0307 	and.w	r3, r3, #7
 8005dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	f1c3 0307 	rsb	r3, r3, #7
 8005df6:	2b04      	cmp	r3, #4
 8005df8:	bf28      	it	cs
 8005dfa:	2304      	movcs	r3, #4
 8005dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	3304      	adds	r3, #4
 8005e02:	2b06      	cmp	r3, #6
 8005e04:	d902      	bls.n	8005e0c <NVIC_EncodePriority+0x30>
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	3b03      	subs	r3, #3
 8005e0a:	e000      	b.n	8005e0e <NVIC_EncodePriority+0x32>
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e10:	f04f 32ff 	mov.w	r2, #4294967295
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1a:	43da      	mvns	r2, r3
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	401a      	ands	r2, r3
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e24:	f04f 31ff 	mov.w	r1, #4294967295
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e2e:	43d9      	mvns	r1, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e34:	4313      	orrs	r3, r2
         );
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3724      	adds	r7, #36	; 0x24
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
	...

08005e44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e54:	d301      	bcc.n	8005e5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e56:	2301      	movs	r3, #1
 8005e58:	e00f      	b.n	8005e7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e5a:	4a0a      	ldr	r2, [pc, #40]	; (8005e84 <SysTick_Config+0x40>)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e62:	210f      	movs	r1, #15
 8005e64:	f04f 30ff 	mov.w	r0, #4294967295
 8005e68:	f7ff ff8e 	bl	8005d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e6c:	4b05      	ldr	r3, [pc, #20]	; (8005e84 <SysTick_Config+0x40>)
 8005e6e:	2200      	movs	r2, #0
 8005e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e72:	4b04      	ldr	r3, [pc, #16]	; (8005e84 <SysTick_Config+0x40>)
 8005e74:	2207      	movs	r2, #7
 8005e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3708      	adds	r7, #8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	e000e010 	.word	0xe000e010

08005e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f7ff ff29 	bl	8005ce8 <__NVIC_SetPriorityGrouping>
}
 8005e96:	bf00      	nop
 8005e98:	3708      	adds	r7, #8
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b086      	sub	sp, #24
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	60b9      	str	r1, [r7, #8]
 8005ea8:	607a      	str	r2, [r7, #4]
 8005eaa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005eac:	f7ff ff40 	bl	8005d30 <__NVIC_GetPriorityGrouping>
 8005eb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	68b9      	ldr	r1, [r7, #8]
 8005eb6:	6978      	ldr	r0, [r7, #20]
 8005eb8:	f7ff ff90 	bl	8005ddc <NVIC_EncodePriority>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005ec2:	4611      	mov	r1, r2
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7ff ff5f 	bl	8005d88 <__NVIC_SetPriority>
}
 8005eca:	bf00      	nop
 8005ecc:	3718      	adds	r7, #24
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b082      	sub	sp, #8
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	4603      	mov	r3, r0
 8005eda:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005edc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7ff ff33 	bl	8005d4c <__NVIC_EnableIRQ>
}
 8005ee6:	bf00      	nop
 8005ee8:	3708      	adds	r7, #8
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b082      	sub	sp, #8
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7ff ffa4 	bl	8005e44 <SysTick_Config>
 8005efc:	4603      	mov	r3, r0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3708      	adds	r7, #8
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
	...

08005f08 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005f10:	f7fd fee8 	bl	8003ce4 <HAL_GetTick>
 8005f14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d101      	bne.n	8005f20 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e312      	b.n	8006546 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a66      	ldr	r2, [pc, #408]	; (80060c0 <HAL_DMA_Init+0x1b8>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d04a      	beq.n	8005fc0 <HAL_DMA_Init+0xb8>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a65      	ldr	r2, [pc, #404]	; (80060c4 <HAL_DMA_Init+0x1bc>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d045      	beq.n	8005fc0 <HAL_DMA_Init+0xb8>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a63      	ldr	r2, [pc, #396]	; (80060c8 <HAL_DMA_Init+0x1c0>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d040      	beq.n	8005fc0 <HAL_DMA_Init+0xb8>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a62      	ldr	r2, [pc, #392]	; (80060cc <HAL_DMA_Init+0x1c4>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d03b      	beq.n	8005fc0 <HAL_DMA_Init+0xb8>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a60      	ldr	r2, [pc, #384]	; (80060d0 <HAL_DMA_Init+0x1c8>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d036      	beq.n	8005fc0 <HAL_DMA_Init+0xb8>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a5f      	ldr	r2, [pc, #380]	; (80060d4 <HAL_DMA_Init+0x1cc>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d031      	beq.n	8005fc0 <HAL_DMA_Init+0xb8>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a5d      	ldr	r2, [pc, #372]	; (80060d8 <HAL_DMA_Init+0x1d0>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d02c      	beq.n	8005fc0 <HAL_DMA_Init+0xb8>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a5c      	ldr	r2, [pc, #368]	; (80060dc <HAL_DMA_Init+0x1d4>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d027      	beq.n	8005fc0 <HAL_DMA_Init+0xb8>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a5a      	ldr	r2, [pc, #360]	; (80060e0 <HAL_DMA_Init+0x1d8>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d022      	beq.n	8005fc0 <HAL_DMA_Init+0xb8>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a59      	ldr	r2, [pc, #356]	; (80060e4 <HAL_DMA_Init+0x1dc>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d01d      	beq.n	8005fc0 <HAL_DMA_Init+0xb8>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a57      	ldr	r2, [pc, #348]	; (80060e8 <HAL_DMA_Init+0x1e0>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d018      	beq.n	8005fc0 <HAL_DMA_Init+0xb8>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a56      	ldr	r2, [pc, #344]	; (80060ec <HAL_DMA_Init+0x1e4>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d013      	beq.n	8005fc0 <HAL_DMA_Init+0xb8>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a54      	ldr	r2, [pc, #336]	; (80060f0 <HAL_DMA_Init+0x1e8>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d00e      	beq.n	8005fc0 <HAL_DMA_Init+0xb8>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a53      	ldr	r2, [pc, #332]	; (80060f4 <HAL_DMA_Init+0x1ec>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d009      	beq.n	8005fc0 <HAL_DMA_Init+0xb8>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a51      	ldr	r2, [pc, #324]	; (80060f8 <HAL_DMA_Init+0x1f0>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d004      	beq.n	8005fc0 <HAL_DMA_Init+0xb8>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a50      	ldr	r2, [pc, #320]	; (80060fc <HAL_DMA_Init+0x1f4>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d101      	bne.n	8005fc4 <HAL_DMA_Init+0xbc>
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e000      	b.n	8005fc6 <HAL_DMA_Init+0xbe>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f000 813c 	beq.w	8006244 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2202      	movs	r2, #2
 8005fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a37      	ldr	r2, [pc, #220]	; (80060c0 <HAL_DMA_Init+0x1b8>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d04a      	beq.n	800607c <HAL_DMA_Init+0x174>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a36      	ldr	r2, [pc, #216]	; (80060c4 <HAL_DMA_Init+0x1bc>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d045      	beq.n	800607c <HAL_DMA_Init+0x174>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a34      	ldr	r2, [pc, #208]	; (80060c8 <HAL_DMA_Init+0x1c0>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d040      	beq.n	800607c <HAL_DMA_Init+0x174>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a33      	ldr	r2, [pc, #204]	; (80060cc <HAL_DMA_Init+0x1c4>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d03b      	beq.n	800607c <HAL_DMA_Init+0x174>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a31      	ldr	r2, [pc, #196]	; (80060d0 <HAL_DMA_Init+0x1c8>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d036      	beq.n	800607c <HAL_DMA_Init+0x174>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a30      	ldr	r2, [pc, #192]	; (80060d4 <HAL_DMA_Init+0x1cc>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d031      	beq.n	800607c <HAL_DMA_Init+0x174>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a2e      	ldr	r2, [pc, #184]	; (80060d8 <HAL_DMA_Init+0x1d0>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d02c      	beq.n	800607c <HAL_DMA_Init+0x174>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a2d      	ldr	r2, [pc, #180]	; (80060dc <HAL_DMA_Init+0x1d4>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d027      	beq.n	800607c <HAL_DMA_Init+0x174>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a2b      	ldr	r2, [pc, #172]	; (80060e0 <HAL_DMA_Init+0x1d8>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d022      	beq.n	800607c <HAL_DMA_Init+0x174>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a2a      	ldr	r2, [pc, #168]	; (80060e4 <HAL_DMA_Init+0x1dc>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d01d      	beq.n	800607c <HAL_DMA_Init+0x174>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a28      	ldr	r2, [pc, #160]	; (80060e8 <HAL_DMA_Init+0x1e0>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d018      	beq.n	800607c <HAL_DMA_Init+0x174>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a27      	ldr	r2, [pc, #156]	; (80060ec <HAL_DMA_Init+0x1e4>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d013      	beq.n	800607c <HAL_DMA_Init+0x174>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a25      	ldr	r2, [pc, #148]	; (80060f0 <HAL_DMA_Init+0x1e8>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d00e      	beq.n	800607c <HAL_DMA_Init+0x174>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a24      	ldr	r2, [pc, #144]	; (80060f4 <HAL_DMA_Init+0x1ec>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d009      	beq.n	800607c <HAL_DMA_Init+0x174>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a22      	ldr	r2, [pc, #136]	; (80060f8 <HAL_DMA_Init+0x1f0>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d004      	beq.n	800607c <HAL_DMA_Init+0x174>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a21      	ldr	r2, [pc, #132]	; (80060fc <HAL_DMA_Init+0x1f4>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d108      	bne.n	800608e <HAL_DMA_Init+0x186>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f022 0201 	bic.w	r2, r2, #1
 800608a:	601a      	str	r2, [r3, #0]
 800608c:	e007      	b.n	800609e <HAL_DMA_Init+0x196>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 0201 	bic.w	r2, r2, #1
 800609c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800609e:	e02f      	b.n	8006100 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80060a0:	f7fd fe20 	bl	8003ce4 <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	2b05      	cmp	r3, #5
 80060ac:	d928      	bls.n	8006100 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2220      	movs	r2, #32
 80060b2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2203      	movs	r2, #3
 80060b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e242      	b.n	8006546 <HAL_DMA_Init+0x63e>
 80060c0:	40020010 	.word	0x40020010
 80060c4:	40020028 	.word	0x40020028
 80060c8:	40020040 	.word	0x40020040
 80060cc:	40020058 	.word	0x40020058
 80060d0:	40020070 	.word	0x40020070
 80060d4:	40020088 	.word	0x40020088
 80060d8:	400200a0 	.word	0x400200a0
 80060dc:	400200b8 	.word	0x400200b8
 80060e0:	40020410 	.word	0x40020410
 80060e4:	40020428 	.word	0x40020428
 80060e8:	40020440 	.word	0x40020440
 80060ec:	40020458 	.word	0x40020458
 80060f0:	40020470 	.word	0x40020470
 80060f4:	40020488 	.word	0x40020488
 80060f8:	400204a0 	.word	0x400204a0
 80060fc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1c8      	bne.n	80060a0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	4b83      	ldr	r3, [pc, #524]	; (8006328 <HAL_DMA_Init+0x420>)
 800611a:	4013      	ands	r3, r2
 800611c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006126:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006132:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	699b      	ldr	r3, [r3, #24]
 8006138:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800613e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a1b      	ldr	r3, [r3, #32]
 8006144:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	4313      	orrs	r3, r2
 800614a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006150:	2b04      	cmp	r3, #4
 8006152:	d107      	bne.n	8006164 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800615c:	4313      	orrs	r3, r2
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	4313      	orrs	r3, r2
 8006162:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	2b28      	cmp	r3, #40	; 0x28
 800616a:	d903      	bls.n	8006174 <HAL_DMA_Init+0x26c>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	2b2e      	cmp	r3, #46	; 0x2e
 8006172:	d91f      	bls.n	80061b4 <HAL_DMA_Init+0x2ac>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	2b3e      	cmp	r3, #62	; 0x3e
 800617a:	d903      	bls.n	8006184 <HAL_DMA_Init+0x27c>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	2b42      	cmp	r3, #66	; 0x42
 8006182:	d917      	bls.n	80061b4 <HAL_DMA_Init+0x2ac>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	2b46      	cmp	r3, #70	; 0x46
 800618a:	d903      	bls.n	8006194 <HAL_DMA_Init+0x28c>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	2b48      	cmp	r3, #72	; 0x48
 8006192:	d90f      	bls.n	80061b4 <HAL_DMA_Init+0x2ac>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	2b4e      	cmp	r3, #78	; 0x4e
 800619a:	d903      	bls.n	80061a4 <HAL_DMA_Init+0x29c>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	2b52      	cmp	r3, #82	; 0x52
 80061a2:	d907      	bls.n	80061b4 <HAL_DMA_Init+0x2ac>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	2b73      	cmp	r3, #115	; 0x73
 80061aa:	d905      	bls.n	80061b8 <HAL_DMA_Init+0x2b0>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	2b77      	cmp	r3, #119	; 0x77
 80061b2:	d801      	bhi.n	80061b8 <HAL_DMA_Init+0x2b0>
 80061b4:	2301      	movs	r3, #1
 80061b6:	e000      	b.n	80061ba <HAL_DMA_Init+0x2b2>
 80061b8:	2300      	movs	r3, #0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d003      	beq.n	80061c6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061c4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	f023 0307 	bic.w	r3, r3, #7
 80061dc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e2:	697a      	ldr	r2, [r7, #20]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ec:	2b04      	cmp	r3, #4
 80061ee:	d117      	bne.n	8006220 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00e      	beq.n	8006220 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f001 fdca 	bl	8007d9c <DMA_CheckFifoParam>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d008      	beq.n	8006220 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2240      	movs	r2, #64	; 0x40
 8006212:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e192      	b.n	8006546 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	697a      	ldr	r2, [r7, #20]
 8006226:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f001 fd05 	bl	8007c38 <DMA_CalcBaseAndBitshift>
 800622e:	4603      	mov	r3, r0
 8006230:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006236:	f003 031f 	and.w	r3, r3, #31
 800623a:	223f      	movs	r2, #63	; 0x3f
 800623c:	409a      	lsls	r2, r3
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	609a      	str	r2, [r3, #8]
 8006242:	e0c8      	b.n	80063d6 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a38      	ldr	r2, [pc, #224]	; (800632c <HAL_DMA_Init+0x424>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d022      	beq.n	8006294 <HAL_DMA_Init+0x38c>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a37      	ldr	r2, [pc, #220]	; (8006330 <HAL_DMA_Init+0x428>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d01d      	beq.n	8006294 <HAL_DMA_Init+0x38c>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a35      	ldr	r2, [pc, #212]	; (8006334 <HAL_DMA_Init+0x42c>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d018      	beq.n	8006294 <HAL_DMA_Init+0x38c>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a34      	ldr	r2, [pc, #208]	; (8006338 <HAL_DMA_Init+0x430>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d013      	beq.n	8006294 <HAL_DMA_Init+0x38c>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a32      	ldr	r2, [pc, #200]	; (800633c <HAL_DMA_Init+0x434>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d00e      	beq.n	8006294 <HAL_DMA_Init+0x38c>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a31      	ldr	r2, [pc, #196]	; (8006340 <HAL_DMA_Init+0x438>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d009      	beq.n	8006294 <HAL_DMA_Init+0x38c>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a2f      	ldr	r2, [pc, #188]	; (8006344 <HAL_DMA_Init+0x43c>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d004      	beq.n	8006294 <HAL_DMA_Init+0x38c>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a2e      	ldr	r2, [pc, #184]	; (8006348 <HAL_DMA_Init+0x440>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d101      	bne.n	8006298 <HAL_DMA_Init+0x390>
 8006294:	2301      	movs	r3, #1
 8006296:	e000      	b.n	800629a <HAL_DMA_Init+0x392>
 8006298:	2300      	movs	r3, #0
 800629a:	2b00      	cmp	r3, #0
 800629c:	f000 8092 	beq.w	80063c4 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a21      	ldr	r2, [pc, #132]	; (800632c <HAL_DMA_Init+0x424>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d021      	beq.n	80062ee <HAL_DMA_Init+0x3e6>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a20      	ldr	r2, [pc, #128]	; (8006330 <HAL_DMA_Init+0x428>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d01c      	beq.n	80062ee <HAL_DMA_Init+0x3e6>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a1e      	ldr	r2, [pc, #120]	; (8006334 <HAL_DMA_Init+0x42c>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d017      	beq.n	80062ee <HAL_DMA_Init+0x3e6>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a1d      	ldr	r2, [pc, #116]	; (8006338 <HAL_DMA_Init+0x430>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d012      	beq.n	80062ee <HAL_DMA_Init+0x3e6>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a1b      	ldr	r2, [pc, #108]	; (800633c <HAL_DMA_Init+0x434>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d00d      	beq.n	80062ee <HAL_DMA_Init+0x3e6>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a1a      	ldr	r2, [pc, #104]	; (8006340 <HAL_DMA_Init+0x438>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d008      	beq.n	80062ee <HAL_DMA_Init+0x3e6>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a18      	ldr	r2, [pc, #96]	; (8006344 <HAL_DMA_Init+0x43c>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d003      	beq.n	80062ee <HAL_DMA_Init+0x3e6>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a17      	ldr	r2, [pc, #92]	; (8006348 <HAL_DMA_Init+0x440>)
 80062ec:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2202      	movs	r2, #2
 80062f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	4b10      	ldr	r3, [pc, #64]	; (800634c <HAL_DMA_Init+0x444>)
 800630a:	4013      	ands	r3, r2
 800630c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	2b40      	cmp	r3, #64	; 0x40
 8006314:	d01c      	beq.n	8006350 <HAL_DMA_Init+0x448>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	2b80      	cmp	r3, #128	; 0x80
 800631c:	d102      	bne.n	8006324 <HAL_DMA_Init+0x41c>
 800631e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006322:	e016      	b.n	8006352 <HAL_DMA_Init+0x44a>
 8006324:	2300      	movs	r3, #0
 8006326:	e014      	b.n	8006352 <HAL_DMA_Init+0x44a>
 8006328:	fe10803f 	.word	0xfe10803f
 800632c:	58025408 	.word	0x58025408
 8006330:	5802541c 	.word	0x5802541c
 8006334:	58025430 	.word	0x58025430
 8006338:	58025444 	.word	0x58025444
 800633c:	58025458 	.word	0x58025458
 8006340:	5802546c 	.word	0x5802546c
 8006344:	58025480 	.word	0x58025480
 8006348:	58025494 	.word	0x58025494
 800634c:	fffe000f 	.word	0xfffe000f
 8006350:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	68d2      	ldr	r2, [r2, #12]
 8006356:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006358:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006360:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006368:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006370:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	69db      	ldr	r3, [r3, #28]
 8006376:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006378:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a1b      	ldr	r3, [r3, #32]
 800637e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006380:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	4313      	orrs	r3, r2
 8006386:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	461a      	mov	r2, r3
 8006396:	4b6e      	ldr	r3, [pc, #440]	; (8006550 <HAL_DMA_Init+0x648>)
 8006398:	4413      	add	r3, r2
 800639a:	4a6e      	ldr	r2, [pc, #440]	; (8006554 <HAL_DMA_Init+0x64c>)
 800639c:	fba2 2303 	umull	r2, r3, r2, r3
 80063a0:	091b      	lsrs	r3, r3, #4
 80063a2:	009a      	lsls	r2, r3, #2
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f001 fc45 	bl	8007c38 <DMA_CalcBaseAndBitshift>
 80063ae:	4603      	mov	r3, r0
 80063b0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063b6:	f003 031f 	and.w	r3, r3, #31
 80063ba:	2201      	movs	r2, #1
 80063bc:	409a      	lsls	r2, r3
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	605a      	str	r2, [r3, #4]
 80063c2:	e008      	b.n	80063d6 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2240      	movs	r2, #64	; 0x40
 80063c8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2203      	movs	r2, #3
 80063ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e0b7      	b.n	8006546 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a5f      	ldr	r2, [pc, #380]	; (8006558 <HAL_DMA_Init+0x650>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d072      	beq.n	80064c6 <HAL_DMA_Init+0x5be>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a5d      	ldr	r2, [pc, #372]	; (800655c <HAL_DMA_Init+0x654>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d06d      	beq.n	80064c6 <HAL_DMA_Init+0x5be>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a5c      	ldr	r2, [pc, #368]	; (8006560 <HAL_DMA_Init+0x658>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d068      	beq.n	80064c6 <HAL_DMA_Init+0x5be>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a5a      	ldr	r2, [pc, #360]	; (8006564 <HAL_DMA_Init+0x65c>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d063      	beq.n	80064c6 <HAL_DMA_Init+0x5be>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a59      	ldr	r2, [pc, #356]	; (8006568 <HAL_DMA_Init+0x660>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d05e      	beq.n	80064c6 <HAL_DMA_Init+0x5be>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a57      	ldr	r2, [pc, #348]	; (800656c <HAL_DMA_Init+0x664>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d059      	beq.n	80064c6 <HAL_DMA_Init+0x5be>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a56      	ldr	r2, [pc, #344]	; (8006570 <HAL_DMA_Init+0x668>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d054      	beq.n	80064c6 <HAL_DMA_Init+0x5be>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a54      	ldr	r2, [pc, #336]	; (8006574 <HAL_DMA_Init+0x66c>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d04f      	beq.n	80064c6 <HAL_DMA_Init+0x5be>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a53      	ldr	r2, [pc, #332]	; (8006578 <HAL_DMA_Init+0x670>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d04a      	beq.n	80064c6 <HAL_DMA_Init+0x5be>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a51      	ldr	r2, [pc, #324]	; (800657c <HAL_DMA_Init+0x674>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d045      	beq.n	80064c6 <HAL_DMA_Init+0x5be>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a50      	ldr	r2, [pc, #320]	; (8006580 <HAL_DMA_Init+0x678>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d040      	beq.n	80064c6 <HAL_DMA_Init+0x5be>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a4e      	ldr	r2, [pc, #312]	; (8006584 <HAL_DMA_Init+0x67c>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d03b      	beq.n	80064c6 <HAL_DMA_Init+0x5be>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a4d      	ldr	r2, [pc, #308]	; (8006588 <HAL_DMA_Init+0x680>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d036      	beq.n	80064c6 <HAL_DMA_Init+0x5be>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a4b      	ldr	r2, [pc, #300]	; (800658c <HAL_DMA_Init+0x684>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d031      	beq.n	80064c6 <HAL_DMA_Init+0x5be>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a4a      	ldr	r2, [pc, #296]	; (8006590 <HAL_DMA_Init+0x688>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d02c      	beq.n	80064c6 <HAL_DMA_Init+0x5be>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a48      	ldr	r2, [pc, #288]	; (8006594 <HAL_DMA_Init+0x68c>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d027      	beq.n	80064c6 <HAL_DMA_Init+0x5be>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a47      	ldr	r2, [pc, #284]	; (8006598 <HAL_DMA_Init+0x690>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d022      	beq.n	80064c6 <HAL_DMA_Init+0x5be>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a45      	ldr	r2, [pc, #276]	; (800659c <HAL_DMA_Init+0x694>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d01d      	beq.n	80064c6 <HAL_DMA_Init+0x5be>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a44      	ldr	r2, [pc, #272]	; (80065a0 <HAL_DMA_Init+0x698>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d018      	beq.n	80064c6 <HAL_DMA_Init+0x5be>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a42      	ldr	r2, [pc, #264]	; (80065a4 <HAL_DMA_Init+0x69c>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d013      	beq.n	80064c6 <HAL_DMA_Init+0x5be>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a41      	ldr	r2, [pc, #260]	; (80065a8 <HAL_DMA_Init+0x6a0>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d00e      	beq.n	80064c6 <HAL_DMA_Init+0x5be>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a3f      	ldr	r2, [pc, #252]	; (80065ac <HAL_DMA_Init+0x6a4>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d009      	beq.n	80064c6 <HAL_DMA_Init+0x5be>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a3e      	ldr	r2, [pc, #248]	; (80065b0 <HAL_DMA_Init+0x6a8>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d004      	beq.n	80064c6 <HAL_DMA_Init+0x5be>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a3c      	ldr	r2, [pc, #240]	; (80065b4 <HAL_DMA_Init+0x6ac>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d101      	bne.n	80064ca <HAL_DMA_Init+0x5c2>
 80064c6:	2301      	movs	r3, #1
 80064c8:	e000      	b.n	80064cc <HAL_DMA_Init+0x5c4>
 80064ca:	2300      	movs	r3, #0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d032      	beq.n	8006536 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f001 fcdf 	bl	8007e94 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	2b80      	cmp	r3, #128	; 0x80
 80064dc:	d102      	bne.n	80064e4 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064ec:	b2d2      	uxtb	r2, r2
 80064ee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80064f8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d010      	beq.n	8006524 <HAL_DMA_Init+0x61c>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	2b08      	cmp	r3, #8
 8006508:	d80c      	bhi.n	8006524 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f001 fd5c 	bl	8007fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006514:	2200      	movs	r2, #0
 8006516:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006520:	605a      	str	r2, [r3, #4]
 8006522:	e008      	b.n	8006536 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3718      	adds	r7, #24
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	a7fdabf8 	.word	0xa7fdabf8
 8006554:	cccccccd 	.word	0xcccccccd
 8006558:	40020010 	.word	0x40020010
 800655c:	40020028 	.word	0x40020028
 8006560:	40020040 	.word	0x40020040
 8006564:	40020058 	.word	0x40020058
 8006568:	40020070 	.word	0x40020070
 800656c:	40020088 	.word	0x40020088
 8006570:	400200a0 	.word	0x400200a0
 8006574:	400200b8 	.word	0x400200b8
 8006578:	40020410 	.word	0x40020410
 800657c:	40020428 	.word	0x40020428
 8006580:	40020440 	.word	0x40020440
 8006584:	40020458 	.word	0x40020458
 8006588:	40020470 	.word	0x40020470
 800658c:	40020488 	.word	0x40020488
 8006590:	400204a0 	.word	0x400204a0
 8006594:	400204b8 	.word	0x400204b8
 8006598:	58025408 	.word	0x58025408
 800659c:	5802541c 	.word	0x5802541c
 80065a0:	58025430 	.word	0x58025430
 80065a4:	58025444 	.word	0x58025444
 80065a8:	58025458 	.word	0x58025458
 80065ac:	5802546c 	.word	0x5802546c
 80065b0:	58025480 	.word	0x58025480
 80065b4:	58025494 	.word	0x58025494

080065b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
 80065c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065c6:	2300      	movs	r3, #0
 80065c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d101      	bne.n	80065d4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e226      	b.n	8006a22 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d101      	bne.n	80065e2 <HAL_DMA_Start_IT+0x2a>
 80065de:	2302      	movs	r3, #2
 80065e0:	e21f      	b.n	8006a22 <HAL_DMA_Start_IT+0x46a>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	f040 820a 	bne.w	8006a0c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2202      	movs	r2, #2
 80065fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a68      	ldr	r2, [pc, #416]	; (80067ac <HAL_DMA_Start_IT+0x1f4>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d04a      	beq.n	80066a6 <HAL_DMA_Start_IT+0xee>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a66      	ldr	r2, [pc, #408]	; (80067b0 <HAL_DMA_Start_IT+0x1f8>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d045      	beq.n	80066a6 <HAL_DMA_Start_IT+0xee>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a65      	ldr	r2, [pc, #404]	; (80067b4 <HAL_DMA_Start_IT+0x1fc>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d040      	beq.n	80066a6 <HAL_DMA_Start_IT+0xee>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a63      	ldr	r2, [pc, #396]	; (80067b8 <HAL_DMA_Start_IT+0x200>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d03b      	beq.n	80066a6 <HAL_DMA_Start_IT+0xee>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a62      	ldr	r2, [pc, #392]	; (80067bc <HAL_DMA_Start_IT+0x204>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d036      	beq.n	80066a6 <HAL_DMA_Start_IT+0xee>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a60      	ldr	r2, [pc, #384]	; (80067c0 <HAL_DMA_Start_IT+0x208>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d031      	beq.n	80066a6 <HAL_DMA_Start_IT+0xee>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a5f      	ldr	r2, [pc, #380]	; (80067c4 <HAL_DMA_Start_IT+0x20c>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d02c      	beq.n	80066a6 <HAL_DMA_Start_IT+0xee>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a5d      	ldr	r2, [pc, #372]	; (80067c8 <HAL_DMA_Start_IT+0x210>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d027      	beq.n	80066a6 <HAL_DMA_Start_IT+0xee>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a5c      	ldr	r2, [pc, #368]	; (80067cc <HAL_DMA_Start_IT+0x214>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d022      	beq.n	80066a6 <HAL_DMA_Start_IT+0xee>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a5a      	ldr	r2, [pc, #360]	; (80067d0 <HAL_DMA_Start_IT+0x218>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d01d      	beq.n	80066a6 <HAL_DMA_Start_IT+0xee>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a59      	ldr	r2, [pc, #356]	; (80067d4 <HAL_DMA_Start_IT+0x21c>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d018      	beq.n	80066a6 <HAL_DMA_Start_IT+0xee>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a57      	ldr	r2, [pc, #348]	; (80067d8 <HAL_DMA_Start_IT+0x220>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d013      	beq.n	80066a6 <HAL_DMA_Start_IT+0xee>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a56      	ldr	r2, [pc, #344]	; (80067dc <HAL_DMA_Start_IT+0x224>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d00e      	beq.n	80066a6 <HAL_DMA_Start_IT+0xee>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a54      	ldr	r2, [pc, #336]	; (80067e0 <HAL_DMA_Start_IT+0x228>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d009      	beq.n	80066a6 <HAL_DMA_Start_IT+0xee>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a53      	ldr	r2, [pc, #332]	; (80067e4 <HAL_DMA_Start_IT+0x22c>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d004      	beq.n	80066a6 <HAL_DMA_Start_IT+0xee>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a51      	ldr	r2, [pc, #324]	; (80067e8 <HAL_DMA_Start_IT+0x230>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d108      	bne.n	80066b8 <HAL_DMA_Start_IT+0x100>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f022 0201 	bic.w	r2, r2, #1
 80066b4:	601a      	str	r2, [r3, #0]
 80066b6:	e007      	b.n	80066c8 <HAL_DMA_Start_IT+0x110>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f022 0201 	bic.w	r2, r2, #1
 80066c6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	68b9      	ldr	r1, [r7, #8]
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f001 f906 	bl	80078e0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a34      	ldr	r2, [pc, #208]	; (80067ac <HAL_DMA_Start_IT+0x1f4>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d04a      	beq.n	8006774 <HAL_DMA_Start_IT+0x1bc>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a33      	ldr	r2, [pc, #204]	; (80067b0 <HAL_DMA_Start_IT+0x1f8>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d045      	beq.n	8006774 <HAL_DMA_Start_IT+0x1bc>
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a31      	ldr	r2, [pc, #196]	; (80067b4 <HAL_DMA_Start_IT+0x1fc>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d040      	beq.n	8006774 <HAL_DMA_Start_IT+0x1bc>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a30      	ldr	r2, [pc, #192]	; (80067b8 <HAL_DMA_Start_IT+0x200>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d03b      	beq.n	8006774 <HAL_DMA_Start_IT+0x1bc>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a2e      	ldr	r2, [pc, #184]	; (80067bc <HAL_DMA_Start_IT+0x204>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d036      	beq.n	8006774 <HAL_DMA_Start_IT+0x1bc>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a2d      	ldr	r2, [pc, #180]	; (80067c0 <HAL_DMA_Start_IT+0x208>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d031      	beq.n	8006774 <HAL_DMA_Start_IT+0x1bc>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a2b      	ldr	r2, [pc, #172]	; (80067c4 <HAL_DMA_Start_IT+0x20c>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d02c      	beq.n	8006774 <HAL_DMA_Start_IT+0x1bc>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a2a      	ldr	r2, [pc, #168]	; (80067c8 <HAL_DMA_Start_IT+0x210>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d027      	beq.n	8006774 <HAL_DMA_Start_IT+0x1bc>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a28      	ldr	r2, [pc, #160]	; (80067cc <HAL_DMA_Start_IT+0x214>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d022      	beq.n	8006774 <HAL_DMA_Start_IT+0x1bc>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a27      	ldr	r2, [pc, #156]	; (80067d0 <HAL_DMA_Start_IT+0x218>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d01d      	beq.n	8006774 <HAL_DMA_Start_IT+0x1bc>
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a25      	ldr	r2, [pc, #148]	; (80067d4 <HAL_DMA_Start_IT+0x21c>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d018      	beq.n	8006774 <HAL_DMA_Start_IT+0x1bc>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a24      	ldr	r2, [pc, #144]	; (80067d8 <HAL_DMA_Start_IT+0x220>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d013      	beq.n	8006774 <HAL_DMA_Start_IT+0x1bc>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a22      	ldr	r2, [pc, #136]	; (80067dc <HAL_DMA_Start_IT+0x224>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d00e      	beq.n	8006774 <HAL_DMA_Start_IT+0x1bc>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a21      	ldr	r2, [pc, #132]	; (80067e0 <HAL_DMA_Start_IT+0x228>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d009      	beq.n	8006774 <HAL_DMA_Start_IT+0x1bc>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a1f      	ldr	r2, [pc, #124]	; (80067e4 <HAL_DMA_Start_IT+0x22c>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d004      	beq.n	8006774 <HAL_DMA_Start_IT+0x1bc>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a1e      	ldr	r2, [pc, #120]	; (80067e8 <HAL_DMA_Start_IT+0x230>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d101      	bne.n	8006778 <HAL_DMA_Start_IT+0x1c0>
 8006774:	2301      	movs	r3, #1
 8006776:	e000      	b.n	800677a <HAL_DMA_Start_IT+0x1c2>
 8006778:	2300      	movs	r3, #0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d036      	beq.n	80067ec <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f023 021e 	bic.w	r2, r3, #30
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f042 0216 	orr.w	r2, r2, #22
 8006790:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006796:	2b00      	cmp	r3, #0
 8006798:	d03e      	beq.n	8006818 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f042 0208 	orr.w	r2, r2, #8
 80067a8:	601a      	str	r2, [r3, #0]
 80067aa:	e035      	b.n	8006818 <HAL_DMA_Start_IT+0x260>
 80067ac:	40020010 	.word	0x40020010
 80067b0:	40020028 	.word	0x40020028
 80067b4:	40020040 	.word	0x40020040
 80067b8:	40020058 	.word	0x40020058
 80067bc:	40020070 	.word	0x40020070
 80067c0:	40020088 	.word	0x40020088
 80067c4:	400200a0 	.word	0x400200a0
 80067c8:	400200b8 	.word	0x400200b8
 80067cc:	40020410 	.word	0x40020410
 80067d0:	40020428 	.word	0x40020428
 80067d4:	40020440 	.word	0x40020440
 80067d8:	40020458 	.word	0x40020458
 80067dc:	40020470 	.word	0x40020470
 80067e0:	40020488 	.word	0x40020488
 80067e4:	400204a0 	.word	0x400204a0
 80067e8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f023 020e 	bic.w	r2, r3, #14
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f042 020a 	orr.w	r2, r2, #10
 80067fe:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006804:	2b00      	cmp	r3, #0
 8006806:	d007      	beq.n	8006818 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f042 0204 	orr.w	r2, r2, #4
 8006816:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a83      	ldr	r2, [pc, #524]	; (8006a2c <HAL_DMA_Start_IT+0x474>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d072      	beq.n	8006908 <HAL_DMA_Start_IT+0x350>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a82      	ldr	r2, [pc, #520]	; (8006a30 <HAL_DMA_Start_IT+0x478>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d06d      	beq.n	8006908 <HAL_DMA_Start_IT+0x350>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a80      	ldr	r2, [pc, #512]	; (8006a34 <HAL_DMA_Start_IT+0x47c>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d068      	beq.n	8006908 <HAL_DMA_Start_IT+0x350>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a7f      	ldr	r2, [pc, #508]	; (8006a38 <HAL_DMA_Start_IT+0x480>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d063      	beq.n	8006908 <HAL_DMA_Start_IT+0x350>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a7d      	ldr	r2, [pc, #500]	; (8006a3c <HAL_DMA_Start_IT+0x484>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d05e      	beq.n	8006908 <HAL_DMA_Start_IT+0x350>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a7c      	ldr	r2, [pc, #496]	; (8006a40 <HAL_DMA_Start_IT+0x488>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d059      	beq.n	8006908 <HAL_DMA_Start_IT+0x350>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a7a      	ldr	r2, [pc, #488]	; (8006a44 <HAL_DMA_Start_IT+0x48c>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d054      	beq.n	8006908 <HAL_DMA_Start_IT+0x350>
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a79      	ldr	r2, [pc, #484]	; (8006a48 <HAL_DMA_Start_IT+0x490>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d04f      	beq.n	8006908 <HAL_DMA_Start_IT+0x350>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a77      	ldr	r2, [pc, #476]	; (8006a4c <HAL_DMA_Start_IT+0x494>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d04a      	beq.n	8006908 <HAL_DMA_Start_IT+0x350>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a76      	ldr	r2, [pc, #472]	; (8006a50 <HAL_DMA_Start_IT+0x498>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d045      	beq.n	8006908 <HAL_DMA_Start_IT+0x350>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a74      	ldr	r2, [pc, #464]	; (8006a54 <HAL_DMA_Start_IT+0x49c>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d040      	beq.n	8006908 <HAL_DMA_Start_IT+0x350>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a73      	ldr	r2, [pc, #460]	; (8006a58 <HAL_DMA_Start_IT+0x4a0>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d03b      	beq.n	8006908 <HAL_DMA_Start_IT+0x350>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a71      	ldr	r2, [pc, #452]	; (8006a5c <HAL_DMA_Start_IT+0x4a4>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d036      	beq.n	8006908 <HAL_DMA_Start_IT+0x350>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a70      	ldr	r2, [pc, #448]	; (8006a60 <HAL_DMA_Start_IT+0x4a8>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d031      	beq.n	8006908 <HAL_DMA_Start_IT+0x350>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a6e      	ldr	r2, [pc, #440]	; (8006a64 <HAL_DMA_Start_IT+0x4ac>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d02c      	beq.n	8006908 <HAL_DMA_Start_IT+0x350>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a6d      	ldr	r2, [pc, #436]	; (8006a68 <HAL_DMA_Start_IT+0x4b0>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d027      	beq.n	8006908 <HAL_DMA_Start_IT+0x350>
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a6b      	ldr	r2, [pc, #428]	; (8006a6c <HAL_DMA_Start_IT+0x4b4>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d022      	beq.n	8006908 <HAL_DMA_Start_IT+0x350>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a6a      	ldr	r2, [pc, #424]	; (8006a70 <HAL_DMA_Start_IT+0x4b8>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d01d      	beq.n	8006908 <HAL_DMA_Start_IT+0x350>
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a68      	ldr	r2, [pc, #416]	; (8006a74 <HAL_DMA_Start_IT+0x4bc>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d018      	beq.n	8006908 <HAL_DMA_Start_IT+0x350>
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a67      	ldr	r2, [pc, #412]	; (8006a78 <HAL_DMA_Start_IT+0x4c0>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d013      	beq.n	8006908 <HAL_DMA_Start_IT+0x350>
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a65      	ldr	r2, [pc, #404]	; (8006a7c <HAL_DMA_Start_IT+0x4c4>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d00e      	beq.n	8006908 <HAL_DMA_Start_IT+0x350>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a64      	ldr	r2, [pc, #400]	; (8006a80 <HAL_DMA_Start_IT+0x4c8>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d009      	beq.n	8006908 <HAL_DMA_Start_IT+0x350>
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a62      	ldr	r2, [pc, #392]	; (8006a84 <HAL_DMA_Start_IT+0x4cc>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d004      	beq.n	8006908 <HAL_DMA_Start_IT+0x350>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a61      	ldr	r2, [pc, #388]	; (8006a88 <HAL_DMA_Start_IT+0x4d0>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d101      	bne.n	800690c <HAL_DMA_Start_IT+0x354>
 8006908:	2301      	movs	r3, #1
 800690a:	e000      	b.n	800690e <HAL_DMA_Start_IT+0x356>
 800690c:	2300      	movs	r3, #0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d01a      	beq.n	8006948 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800691c:	2b00      	cmp	r3, #0
 800691e:	d007      	beq.n	8006930 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800692a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800692e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006934:	2b00      	cmp	r3, #0
 8006936:	d007      	beq.n	8006948 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006942:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006946:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a37      	ldr	r2, [pc, #220]	; (8006a2c <HAL_DMA_Start_IT+0x474>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d04a      	beq.n	80069e8 <HAL_DMA_Start_IT+0x430>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a36      	ldr	r2, [pc, #216]	; (8006a30 <HAL_DMA_Start_IT+0x478>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d045      	beq.n	80069e8 <HAL_DMA_Start_IT+0x430>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a34      	ldr	r2, [pc, #208]	; (8006a34 <HAL_DMA_Start_IT+0x47c>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d040      	beq.n	80069e8 <HAL_DMA_Start_IT+0x430>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a33      	ldr	r2, [pc, #204]	; (8006a38 <HAL_DMA_Start_IT+0x480>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d03b      	beq.n	80069e8 <HAL_DMA_Start_IT+0x430>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a31      	ldr	r2, [pc, #196]	; (8006a3c <HAL_DMA_Start_IT+0x484>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d036      	beq.n	80069e8 <HAL_DMA_Start_IT+0x430>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a30      	ldr	r2, [pc, #192]	; (8006a40 <HAL_DMA_Start_IT+0x488>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d031      	beq.n	80069e8 <HAL_DMA_Start_IT+0x430>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a2e      	ldr	r2, [pc, #184]	; (8006a44 <HAL_DMA_Start_IT+0x48c>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d02c      	beq.n	80069e8 <HAL_DMA_Start_IT+0x430>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a2d      	ldr	r2, [pc, #180]	; (8006a48 <HAL_DMA_Start_IT+0x490>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d027      	beq.n	80069e8 <HAL_DMA_Start_IT+0x430>
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a2b      	ldr	r2, [pc, #172]	; (8006a4c <HAL_DMA_Start_IT+0x494>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d022      	beq.n	80069e8 <HAL_DMA_Start_IT+0x430>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a2a      	ldr	r2, [pc, #168]	; (8006a50 <HAL_DMA_Start_IT+0x498>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d01d      	beq.n	80069e8 <HAL_DMA_Start_IT+0x430>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a28      	ldr	r2, [pc, #160]	; (8006a54 <HAL_DMA_Start_IT+0x49c>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d018      	beq.n	80069e8 <HAL_DMA_Start_IT+0x430>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a27      	ldr	r2, [pc, #156]	; (8006a58 <HAL_DMA_Start_IT+0x4a0>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d013      	beq.n	80069e8 <HAL_DMA_Start_IT+0x430>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a25      	ldr	r2, [pc, #148]	; (8006a5c <HAL_DMA_Start_IT+0x4a4>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d00e      	beq.n	80069e8 <HAL_DMA_Start_IT+0x430>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a24      	ldr	r2, [pc, #144]	; (8006a60 <HAL_DMA_Start_IT+0x4a8>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d009      	beq.n	80069e8 <HAL_DMA_Start_IT+0x430>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a22      	ldr	r2, [pc, #136]	; (8006a64 <HAL_DMA_Start_IT+0x4ac>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d004      	beq.n	80069e8 <HAL_DMA_Start_IT+0x430>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a21      	ldr	r2, [pc, #132]	; (8006a68 <HAL_DMA_Start_IT+0x4b0>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d108      	bne.n	80069fa <HAL_DMA_Start_IT+0x442>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f042 0201 	orr.w	r2, r2, #1
 80069f6:	601a      	str	r2, [r3, #0]
 80069f8:	e012      	b.n	8006a20 <HAL_DMA_Start_IT+0x468>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f042 0201 	orr.w	r2, r2, #1
 8006a08:	601a      	str	r2, [r3, #0]
 8006a0a:	e009      	b.n	8006a20 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a12:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006a20:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3718      	adds	r7, #24
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	40020010 	.word	0x40020010
 8006a30:	40020028 	.word	0x40020028
 8006a34:	40020040 	.word	0x40020040
 8006a38:	40020058 	.word	0x40020058
 8006a3c:	40020070 	.word	0x40020070
 8006a40:	40020088 	.word	0x40020088
 8006a44:	400200a0 	.word	0x400200a0
 8006a48:	400200b8 	.word	0x400200b8
 8006a4c:	40020410 	.word	0x40020410
 8006a50:	40020428 	.word	0x40020428
 8006a54:	40020440 	.word	0x40020440
 8006a58:	40020458 	.word	0x40020458
 8006a5c:	40020470 	.word	0x40020470
 8006a60:	40020488 	.word	0x40020488
 8006a64:	400204a0 	.word	0x400204a0
 8006a68:	400204b8 	.word	0x400204b8
 8006a6c:	58025408 	.word	0x58025408
 8006a70:	5802541c 	.word	0x5802541c
 8006a74:	58025430 	.word	0x58025430
 8006a78:	58025444 	.word	0x58025444
 8006a7c:	58025458 	.word	0x58025458
 8006a80:	5802546c 	.word	0x5802546c
 8006a84:	58025480 	.word	0x58025480
 8006a88:	58025494 	.word	0x58025494

08006a8c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b08a      	sub	sp, #40	; 0x28
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006a94:	2300      	movs	r3, #0
 8006a96:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006a98:	4b67      	ldr	r3, [pc, #412]	; (8006c38 <HAL_DMA_IRQHandler+0x1ac>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a67      	ldr	r2, [pc, #412]	; (8006c3c <HAL_DMA_IRQHandler+0x1b0>)
 8006a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006aa2:	0a9b      	lsrs	r3, r3, #10
 8006aa4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aaa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ab0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006ab2:	6a3b      	ldr	r3, [r7, #32]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a5f      	ldr	r2, [pc, #380]	; (8006c40 <HAL_DMA_IRQHandler+0x1b4>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d04a      	beq.n	8006b5e <HAL_DMA_IRQHandler+0xd2>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a5d      	ldr	r2, [pc, #372]	; (8006c44 <HAL_DMA_IRQHandler+0x1b8>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d045      	beq.n	8006b5e <HAL_DMA_IRQHandler+0xd2>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a5c      	ldr	r2, [pc, #368]	; (8006c48 <HAL_DMA_IRQHandler+0x1bc>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d040      	beq.n	8006b5e <HAL_DMA_IRQHandler+0xd2>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a5a      	ldr	r2, [pc, #360]	; (8006c4c <HAL_DMA_IRQHandler+0x1c0>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d03b      	beq.n	8006b5e <HAL_DMA_IRQHandler+0xd2>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a59      	ldr	r2, [pc, #356]	; (8006c50 <HAL_DMA_IRQHandler+0x1c4>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d036      	beq.n	8006b5e <HAL_DMA_IRQHandler+0xd2>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a57      	ldr	r2, [pc, #348]	; (8006c54 <HAL_DMA_IRQHandler+0x1c8>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d031      	beq.n	8006b5e <HAL_DMA_IRQHandler+0xd2>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a56      	ldr	r2, [pc, #344]	; (8006c58 <HAL_DMA_IRQHandler+0x1cc>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d02c      	beq.n	8006b5e <HAL_DMA_IRQHandler+0xd2>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a54      	ldr	r2, [pc, #336]	; (8006c5c <HAL_DMA_IRQHandler+0x1d0>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d027      	beq.n	8006b5e <HAL_DMA_IRQHandler+0xd2>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a53      	ldr	r2, [pc, #332]	; (8006c60 <HAL_DMA_IRQHandler+0x1d4>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d022      	beq.n	8006b5e <HAL_DMA_IRQHandler+0xd2>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a51      	ldr	r2, [pc, #324]	; (8006c64 <HAL_DMA_IRQHandler+0x1d8>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d01d      	beq.n	8006b5e <HAL_DMA_IRQHandler+0xd2>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a50      	ldr	r2, [pc, #320]	; (8006c68 <HAL_DMA_IRQHandler+0x1dc>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d018      	beq.n	8006b5e <HAL_DMA_IRQHandler+0xd2>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a4e      	ldr	r2, [pc, #312]	; (8006c6c <HAL_DMA_IRQHandler+0x1e0>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d013      	beq.n	8006b5e <HAL_DMA_IRQHandler+0xd2>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a4d      	ldr	r2, [pc, #308]	; (8006c70 <HAL_DMA_IRQHandler+0x1e4>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d00e      	beq.n	8006b5e <HAL_DMA_IRQHandler+0xd2>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a4b      	ldr	r2, [pc, #300]	; (8006c74 <HAL_DMA_IRQHandler+0x1e8>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d009      	beq.n	8006b5e <HAL_DMA_IRQHandler+0xd2>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a4a      	ldr	r2, [pc, #296]	; (8006c78 <HAL_DMA_IRQHandler+0x1ec>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d004      	beq.n	8006b5e <HAL_DMA_IRQHandler+0xd2>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a48      	ldr	r2, [pc, #288]	; (8006c7c <HAL_DMA_IRQHandler+0x1f0>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d101      	bne.n	8006b62 <HAL_DMA_IRQHandler+0xd6>
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e000      	b.n	8006b64 <HAL_DMA_IRQHandler+0xd8>
 8006b62:	2300      	movs	r3, #0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f000 842b 	beq.w	80073c0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b6e:	f003 031f 	and.w	r3, r3, #31
 8006b72:	2208      	movs	r2, #8
 8006b74:	409a      	lsls	r2, r3
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	4013      	ands	r3, r2
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f000 80a2 	beq.w	8006cc4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a2e      	ldr	r2, [pc, #184]	; (8006c40 <HAL_DMA_IRQHandler+0x1b4>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d04a      	beq.n	8006c20 <HAL_DMA_IRQHandler+0x194>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a2d      	ldr	r2, [pc, #180]	; (8006c44 <HAL_DMA_IRQHandler+0x1b8>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d045      	beq.n	8006c20 <HAL_DMA_IRQHandler+0x194>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a2b      	ldr	r2, [pc, #172]	; (8006c48 <HAL_DMA_IRQHandler+0x1bc>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d040      	beq.n	8006c20 <HAL_DMA_IRQHandler+0x194>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a2a      	ldr	r2, [pc, #168]	; (8006c4c <HAL_DMA_IRQHandler+0x1c0>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d03b      	beq.n	8006c20 <HAL_DMA_IRQHandler+0x194>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a28      	ldr	r2, [pc, #160]	; (8006c50 <HAL_DMA_IRQHandler+0x1c4>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d036      	beq.n	8006c20 <HAL_DMA_IRQHandler+0x194>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a27      	ldr	r2, [pc, #156]	; (8006c54 <HAL_DMA_IRQHandler+0x1c8>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d031      	beq.n	8006c20 <HAL_DMA_IRQHandler+0x194>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a25      	ldr	r2, [pc, #148]	; (8006c58 <HAL_DMA_IRQHandler+0x1cc>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d02c      	beq.n	8006c20 <HAL_DMA_IRQHandler+0x194>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a24      	ldr	r2, [pc, #144]	; (8006c5c <HAL_DMA_IRQHandler+0x1d0>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d027      	beq.n	8006c20 <HAL_DMA_IRQHandler+0x194>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a22      	ldr	r2, [pc, #136]	; (8006c60 <HAL_DMA_IRQHandler+0x1d4>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d022      	beq.n	8006c20 <HAL_DMA_IRQHandler+0x194>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a21      	ldr	r2, [pc, #132]	; (8006c64 <HAL_DMA_IRQHandler+0x1d8>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d01d      	beq.n	8006c20 <HAL_DMA_IRQHandler+0x194>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a1f      	ldr	r2, [pc, #124]	; (8006c68 <HAL_DMA_IRQHandler+0x1dc>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d018      	beq.n	8006c20 <HAL_DMA_IRQHandler+0x194>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a1e      	ldr	r2, [pc, #120]	; (8006c6c <HAL_DMA_IRQHandler+0x1e0>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d013      	beq.n	8006c20 <HAL_DMA_IRQHandler+0x194>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a1c      	ldr	r2, [pc, #112]	; (8006c70 <HAL_DMA_IRQHandler+0x1e4>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d00e      	beq.n	8006c20 <HAL_DMA_IRQHandler+0x194>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a1b      	ldr	r2, [pc, #108]	; (8006c74 <HAL_DMA_IRQHandler+0x1e8>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d009      	beq.n	8006c20 <HAL_DMA_IRQHandler+0x194>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a19      	ldr	r2, [pc, #100]	; (8006c78 <HAL_DMA_IRQHandler+0x1ec>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d004      	beq.n	8006c20 <HAL_DMA_IRQHandler+0x194>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a18      	ldr	r2, [pc, #96]	; (8006c7c <HAL_DMA_IRQHandler+0x1f0>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d12f      	bne.n	8006c80 <HAL_DMA_IRQHandler+0x1f4>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 0304 	and.w	r3, r3, #4
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	bf14      	ite	ne
 8006c2e:	2301      	movne	r3, #1
 8006c30:	2300      	moveq	r3, #0
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	e02e      	b.n	8006c94 <HAL_DMA_IRQHandler+0x208>
 8006c36:	bf00      	nop
 8006c38:	24000100 	.word	0x24000100
 8006c3c:	1b4e81b5 	.word	0x1b4e81b5
 8006c40:	40020010 	.word	0x40020010
 8006c44:	40020028 	.word	0x40020028
 8006c48:	40020040 	.word	0x40020040
 8006c4c:	40020058 	.word	0x40020058
 8006c50:	40020070 	.word	0x40020070
 8006c54:	40020088 	.word	0x40020088
 8006c58:	400200a0 	.word	0x400200a0
 8006c5c:	400200b8 	.word	0x400200b8
 8006c60:	40020410 	.word	0x40020410
 8006c64:	40020428 	.word	0x40020428
 8006c68:	40020440 	.word	0x40020440
 8006c6c:	40020458 	.word	0x40020458
 8006c70:	40020470 	.word	0x40020470
 8006c74:	40020488 	.word	0x40020488
 8006c78:	400204a0 	.word	0x400204a0
 8006c7c:	400204b8 	.word	0x400204b8
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0308 	and.w	r3, r3, #8
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	bf14      	ite	ne
 8006c8e:	2301      	movne	r3, #1
 8006c90:	2300      	moveq	r3, #0
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d015      	beq.n	8006cc4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f022 0204 	bic.w	r2, r2, #4
 8006ca6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cac:	f003 031f 	and.w	r3, r3, #31
 8006cb0:	2208      	movs	r2, #8
 8006cb2:	409a      	lsls	r2, r3
 8006cb4:	6a3b      	ldr	r3, [r7, #32]
 8006cb6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cbc:	f043 0201 	orr.w	r2, r3, #1
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cc8:	f003 031f 	and.w	r3, r3, #31
 8006ccc:	69ba      	ldr	r2, [r7, #24]
 8006cce:	fa22 f303 	lsr.w	r3, r2, r3
 8006cd2:	f003 0301 	and.w	r3, r3, #1
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d06e      	beq.n	8006db8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a69      	ldr	r2, [pc, #420]	; (8006e84 <HAL_DMA_IRQHandler+0x3f8>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d04a      	beq.n	8006d7a <HAL_DMA_IRQHandler+0x2ee>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a67      	ldr	r2, [pc, #412]	; (8006e88 <HAL_DMA_IRQHandler+0x3fc>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d045      	beq.n	8006d7a <HAL_DMA_IRQHandler+0x2ee>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a66      	ldr	r2, [pc, #408]	; (8006e8c <HAL_DMA_IRQHandler+0x400>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d040      	beq.n	8006d7a <HAL_DMA_IRQHandler+0x2ee>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a64      	ldr	r2, [pc, #400]	; (8006e90 <HAL_DMA_IRQHandler+0x404>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d03b      	beq.n	8006d7a <HAL_DMA_IRQHandler+0x2ee>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a63      	ldr	r2, [pc, #396]	; (8006e94 <HAL_DMA_IRQHandler+0x408>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d036      	beq.n	8006d7a <HAL_DMA_IRQHandler+0x2ee>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a61      	ldr	r2, [pc, #388]	; (8006e98 <HAL_DMA_IRQHandler+0x40c>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d031      	beq.n	8006d7a <HAL_DMA_IRQHandler+0x2ee>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a60      	ldr	r2, [pc, #384]	; (8006e9c <HAL_DMA_IRQHandler+0x410>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d02c      	beq.n	8006d7a <HAL_DMA_IRQHandler+0x2ee>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a5e      	ldr	r2, [pc, #376]	; (8006ea0 <HAL_DMA_IRQHandler+0x414>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d027      	beq.n	8006d7a <HAL_DMA_IRQHandler+0x2ee>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a5d      	ldr	r2, [pc, #372]	; (8006ea4 <HAL_DMA_IRQHandler+0x418>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d022      	beq.n	8006d7a <HAL_DMA_IRQHandler+0x2ee>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a5b      	ldr	r2, [pc, #364]	; (8006ea8 <HAL_DMA_IRQHandler+0x41c>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d01d      	beq.n	8006d7a <HAL_DMA_IRQHandler+0x2ee>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a5a      	ldr	r2, [pc, #360]	; (8006eac <HAL_DMA_IRQHandler+0x420>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d018      	beq.n	8006d7a <HAL_DMA_IRQHandler+0x2ee>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a58      	ldr	r2, [pc, #352]	; (8006eb0 <HAL_DMA_IRQHandler+0x424>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d013      	beq.n	8006d7a <HAL_DMA_IRQHandler+0x2ee>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a57      	ldr	r2, [pc, #348]	; (8006eb4 <HAL_DMA_IRQHandler+0x428>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d00e      	beq.n	8006d7a <HAL_DMA_IRQHandler+0x2ee>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a55      	ldr	r2, [pc, #340]	; (8006eb8 <HAL_DMA_IRQHandler+0x42c>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d009      	beq.n	8006d7a <HAL_DMA_IRQHandler+0x2ee>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a54      	ldr	r2, [pc, #336]	; (8006ebc <HAL_DMA_IRQHandler+0x430>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d004      	beq.n	8006d7a <HAL_DMA_IRQHandler+0x2ee>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a52      	ldr	r2, [pc, #328]	; (8006ec0 <HAL_DMA_IRQHandler+0x434>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d10a      	bne.n	8006d90 <HAL_DMA_IRQHandler+0x304>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	695b      	ldr	r3, [r3, #20]
 8006d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	bf14      	ite	ne
 8006d88:	2301      	movne	r3, #1
 8006d8a:	2300      	moveq	r3, #0
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	e003      	b.n	8006d98 <HAL_DMA_IRQHandler+0x30c>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2300      	movs	r3, #0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00d      	beq.n	8006db8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006da0:	f003 031f 	and.w	r3, r3, #31
 8006da4:	2201      	movs	r2, #1
 8006da6:	409a      	lsls	r2, r3
 8006da8:	6a3b      	ldr	r3, [r7, #32]
 8006daa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db0:	f043 0202 	orr.w	r2, r3, #2
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dbc:	f003 031f 	and.w	r3, r3, #31
 8006dc0:	2204      	movs	r2, #4
 8006dc2:	409a      	lsls	r2, r3
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f000 808f 	beq.w	8006eec <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a2c      	ldr	r2, [pc, #176]	; (8006e84 <HAL_DMA_IRQHandler+0x3f8>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d04a      	beq.n	8006e6e <HAL_DMA_IRQHandler+0x3e2>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a2a      	ldr	r2, [pc, #168]	; (8006e88 <HAL_DMA_IRQHandler+0x3fc>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d045      	beq.n	8006e6e <HAL_DMA_IRQHandler+0x3e2>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a29      	ldr	r2, [pc, #164]	; (8006e8c <HAL_DMA_IRQHandler+0x400>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d040      	beq.n	8006e6e <HAL_DMA_IRQHandler+0x3e2>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a27      	ldr	r2, [pc, #156]	; (8006e90 <HAL_DMA_IRQHandler+0x404>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d03b      	beq.n	8006e6e <HAL_DMA_IRQHandler+0x3e2>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a26      	ldr	r2, [pc, #152]	; (8006e94 <HAL_DMA_IRQHandler+0x408>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d036      	beq.n	8006e6e <HAL_DMA_IRQHandler+0x3e2>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a24      	ldr	r2, [pc, #144]	; (8006e98 <HAL_DMA_IRQHandler+0x40c>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d031      	beq.n	8006e6e <HAL_DMA_IRQHandler+0x3e2>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a23      	ldr	r2, [pc, #140]	; (8006e9c <HAL_DMA_IRQHandler+0x410>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d02c      	beq.n	8006e6e <HAL_DMA_IRQHandler+0x3e2>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a21      	ldr	r2, [pc, #132]	; (8006ea0 <HAL_DMA_IRQHandler+0x414>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d027      	beq.n	8006e6e <HAL_DMA_IRQHandler+0x3e2>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a20      	ldr	r2, [pc, #128]	; (8006ea4 <HAL_DMA_IRQHandler+0x418>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d022      	beq.n	8006e6e <HAL_DMA_IRQHandler+0x3e2>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a1e      	ldr	r2, [pc, #120]	; (8006ea8 <HAL_DMA_IRQHandler+0x41c>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d01d      	beq.n	8006e6e <HAL_DMA_IRQHandler+0x3e2>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a1d      	ldr	r2, [pc, #116]	; (8006eac <HAL_DMA_IRQHandler+0x420>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d018      	beq.n	8006e6e <HAL_DMA_IRQHandler+0x3e2>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a1b      	ldr	r2, [pc, #108]	; (8006eb0 <HAL_DMA_IRQHandler+0x424>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d013      	beq.n	8006e6e <HAL_DMA_IRQHandler+0x3e2>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a1a      	ldr	r2, [pc, #104]	; (8006eb4 <HAL_DMA_IRQHandler+0x428>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d00e      	beq.n	8006e6e <HAL_DMA_IRQHandler+0x3e2>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a18      	ldr	r2, [pc, #96]	; (8006eb8 <HAL_DMA_IRQHandler+0x42c>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d009      	beq.n	8006e6e <HAL_DMA_IRQHandler+0x3e2>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a17      	ldr	r2, [pc, #92]	; (8006ebc <HAL_DMA_IRQHandler+0x430>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d004      	beq.n	8006e6e <HAL_DMA_IRQHandler+0x3e2>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a15      	ldr	r2, [pc, #84]	; (8006ec0 <HAL_DMA_IRQHandler+0x434>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d12a      	bne.n	8006ec4 <HAL_DMA_IRQHandler+0x438>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0302 	and.w	r3, r3, #2
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	bf14      	ite	ne
 8006e7c:	2301      	movne	r3, #1
 8006e7e:	2300      	moveq	r3, #0
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	e023      	b.n	8006ecc <HAL_DMA_IRQHandler+0x440>
 8006e84:	40020010 	.word	0x40020010
 8006e88:	40020028 	.word	0x40020028
 8006e8c:	40020040 	.word	0x40020040
 8006e90:	40020058 	.word	0x40020058
 8006e94:	40020070 	.word	0x40020070
 8006e98:	40020088 	.word	0x40020088
 8006e9c:	400200a0 	.word	0x400200a0
 8006ea0:	400200b8 	.word	0x400200b8
 8006ea4:	40020410 	.word	0x40020410
 8006ea8:	40020428 	.word	0x40020428
 8006eac:	40020440 	.word	0x40020440
 8006eb0:	40020458 	.word	0x40020458
 8006eb4:	40020470 	.word	0x40020470
 8006eb8:	40020488 	.word	0x40020488
 8006ebc:	400204a0 	.word	0x400204a0
 8006ec0:	400204b8 	.word	0x400204b8
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2300      	movs	r3, #0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00d      	beq.n	8006eec <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ed4:	f003 031f 	and.w	r3, r3, #31
 8006ed8:	2204      	movs	r2, #4
 8006eda:	409a      	lsls	r2, r3
 8006edc:	6a3b      	ldr	r3, [r7, #32]
 8006ede:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee4:	f043 0204 	orr.w	r2, r3, #4
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ef0:	f003 031f 	and.w	r3, r3, #31
 8006ef4:	2210      	movs	r2, #16
 8006ef6:	409a      	lsls	r2, r3
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	4013      	ands	r3, r2
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f000 80a6 	beq.w	800704e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a85      	ldr	r2, [pc, #532]	; (800711c <HAL_DMA_IRQHandler+0x690>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d04a      	beq.n	8006fa2 <HAL_DMA_IRQHandler+0x516>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a83      	ldr	r2, [pc, #524]	; (8007120 <HAL_DMA_IRQHandler+0x694>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d045      	beq.n	8006fa2 <HAL_DMA_IRQHandler+0x516>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a82      	ldr	r2, [pc, #520]	; (8007124 <HAL_DMA_IRQHandler+0x698>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d040      	beq.n	8006fa2 <HAL_DMA_IRQHandler+0x516>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a80      	ldr	r2, [pc, #512]	; (8007128 <HAL_DMA_IRQHandler+0x69c>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d03b      	beq.n	8006fa2 <HAL_DMA_IRQHandler+0x516>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a7f      	ldr	r2, [pc, #508]	; (800712c <HAL_DMA_IRQHandler+0x6a0>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d036      	beq.n	8006fa2 <HAL_DMA_IRQHandler+0x516>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a7d      	ldr	r2, [pc, #500]	; (8007130 <HAL_DMA_IRQHandler+0x6a4>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d031      	beq.n	8006fa2 <HAL_DMA_IRQHandler+0x516>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a7c      	ldr	r2, [pc, #496]	; (8007134 <HAL_DMA_IRQHandler+0x6a8>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d02c      	beq.n	8006fa2 <HAL_DMA_IRQHandler+0x516>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a7a      	ldr	r2, [pc, #488]	; (8007138 <HAL_DMA_IRQHandler+0x6ac>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d027      	beq.n	8006fa2 <HAL_DMA_IRQHandler+0x516>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a79      	ldr	r2, [pc, #484]	; (800713c <HAL_DMA_IRQHandler+0x6b0>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d022      	beq.n	8006fa2 <HAL_DMA_IRQHandler+0x516>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a77      	ldr	r2, [pc, #476]	; (8007140 <HAL_DMA_IRQHandler+0x6b4>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d01d      	beq.n	8006fa2 <HAL_DMA_IRQHandler+0x516>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a76      	ldr	r2, [pc, #472]	; (8007144 <HAL_DMA_IRQHandler+0x6b8>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d018      	beq.n	8006fa2 <HAL_DMA_IRQHandler+0x516>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a74      	ldr	r2, [pc, #464]	; (8007148 <HAL_DMA_IRQHandler+0x6bc>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d013      	beq.n	8006fa2 <HAL_DMA_IRQHandler+0x516>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a73      	ldr	r2, [pc, #460]	; (800714c <HAL_DMA_IRQHandler+0x6c0>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d00e      	beq.n	8006fa2 <HAL_DMA_IRQHandler+0x516>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a71      	ldr	r2, [pc, #452]	; (8007150 <HAL_DMA_IRQHandler+0x6c4>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d009      	beq.n	8006fa2 <HAL_DMA_IRQHandler+0x516>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a70      	ldr	r2, [pc, #448]	; (8007154 <HAL_DMA_IRQHandler+0x6c8>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d004      	beq.n	8006fa2 <HAL_DMA_IRQHandler+0x516>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a6e      	ldr	r2, [pc, #440]	; (8007158 <HAL_DMA_IRQHandler+0x6cc>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d10a      	bne.n	8006fb8 <HAL_DMA_IRQHandler+0x52c>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0308 	and.w	r3, r3, #8
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	bf14      	ite	ne
 8006fb0:	2301      	movne	r3, #1
 8006fb2:	2300      	moveq	r3, #0
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	e009      	b.n	8006fcc <HAL_DMA_IRQHandler+0x540>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 0304 	and.w	r3, r3, #4
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	bf14      	ite	ne
 8006fc6:	2301      	movne	r3, #1
 8006fc8:	2300      	moveq	r3, #0
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d03e      	beq.n	800704e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fd4:	f003 031f 	and.w	r3, r3, #31
 8006fd8:	2210      	movs	r2, #16
 8006fda:	409a      	lsls	r2, r3
 8006fdc:	6a3b      	ldr	r3, [r7, #32]
 8006fde:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d018      	beq.n	8007020 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d108      	bne.n	800700e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007000:	2b00      	cmp	r3, #0
 8007002:	d024      	beq.n	800704e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	4798      	blx	r3
 800700c:	e01f      	b.n	800704e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007012:	2b00      	cmp	r3, #0
 8007014:	d01b      	beq.n	800704e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	4798      	blx	r3
 800701e:	e016      	b.n	800704e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800702a:	2b00      	cmp	r3, #0
 800702c:	d107      	bne.n	800703e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f022 0208 	bic.w	r2, r2, #8
 800703c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007042:	2b00      	cmp	r3, #0
 8007044:	d003      	beq.n	800704e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007052:	f003 031f 	and.w	r3, r3, #31
 8007056:	2220      	movs	r2, #32
 8007058:	409a      	lsls	r2, r3
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	4013      	ands	r3, r2
 800705e:	2b00      	cmp	r3, #0
 8007060:	f000 8110 	beq.w	8007284 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a2c      	ldr	r2, [pc, #176]	; (800711c <HAL_DMA_IRQHandler+0x690>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d04a      	beq.n	8007104 <HAL_DMA_IRQHandler+0x678>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a2b      	ldr	r2, [pc, #172]	; (8007120 <HAL_DMA_IRQHandler+0x694>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d045      	beq.n	8007104 <HAL_DMA_IRQHandler+0x678>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a29      	ldr	r2, [pc, #164]	; (8007124 <HAL_DMA_IRQHandler+0x698>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d040      	beq.n	8007104 <HAL_DMA_IRQHandler+0x678>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a28      	ldr	r2, [pc, #160]	; (8007128 <HAL_DMA_IRQHandler+0x69c>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d03b      	beq.n	8007104 <HAL_DMA_IRQHandler+0x678>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a26      	ldr	r2, [pc, #152]	; (800712c <HAL_DMA_IRQHandler+0x6a0>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d036      	beq.n	8007104 <HAL_DMA_IRQHandler+0x678>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a25      	ldr	r2, [pc, #148]	; (8007130 <HAL_DMA_IRQHandler+0x6a4>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d031      	beq.n	8007104 <HAL_DMA_IRQHandler+0x678>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a23      	ldr	r2, [pc, #140]	; (8007134 <HAL_DMA_IRQHandler+0x6a8>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d02c      	beq.n	8007104 <HAL_DMA_IRQHandler+0x678>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a22      	ldr	r2, [pc, #136]	; (8007138 <HAL_DMA_IRQHandler+0x6ac>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d027      	beq.n	8007104 <HAL_DMA_IRQHandler+0x678>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a20      	ldr	r2, [pc, #128]	; (800713c <HAL_DMA_IRQHandler+0x6b0>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d022      	beq.n	8007104 <HAL_DMA_IRQHandler+0x678>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a1f      	ldr	r2, [pc, #124]	; (8007140 <HAL_DMA_IRQHandler+0x6b4>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d01d      	beq.n	8007104 <HAL_DMA_IRQHandler+0x678>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a1d      	ldr	r2, [pc, #116]	; (8007144 <HAL_DMA_IRQHandler+0x6b8>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d018      	beq.n	8007104 <HAL_DMA_IRQHandler+0x678>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a1c      	ldr	r2, [pc, #112]	; (8007148 <HAL_DMA_IRQHandler+0x6bc>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d013      	beq.n	8007104 <HAL_DMA_IRQHandler+0x678>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a1a      	ldr	r2, [pc, #104]	; (800714c <HAL_DMA_IRQHandler+0x6c0>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d00e      	beq.n	8007104 <HAL_DMA_IRQHandler+0x678>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a19      	ldr	r2, [pc, #100]	; (8007150 <HAL_DMA_IRQHandler+0x6c4>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d009      	beq.n	8007104 <HAL_DMA_IRQHandler+0x678>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a17      	ldr	r2, [pc, #92]	; (8007154 <HAL_DMA_IRQHandler+0x6c8>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d004      	beq.n	8007104 <HAL_DMA_IRQHandler+0x678>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a16      	ldr	r2, [pc, #88]	; (8007158 <HAL_DMA_IRQHandler+0x6cc>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d12b      	bne.n	800715c <HAL_DMA_IRQHandler+0x6d0>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 0310 	and.w	r3, r3, #16
 800710e:	2b00      	cmp	r3, #0
 8007110:	bf14      	ite	ne
 8007112:	2301      	movne	r3, #1
 8007114:	2300      	moveq	r3, #0
 8007116:	b2db      	uxtb	r3, r3
 8007118:	e02a      	b.n	8007170 <HAL_DMA_IRQHandler+0x6e4>
 800711a:	bf00      	nop
 800711c:	40020010 	.word	0x40020010
 8007120:	40020028 	.word	0x40020028
 8007124:	40020040 	.word	0x40020040
 8007128:	40020058 	.word	0x40020058
 800712c:	40020070 	.word	0x40020070
 8007130:	40020088 	.word	0x40020088
 8007134:	400200a0 	.word	0x400200a0
 8007138:	400200b8 	.word	0x400200b8
 800713c:	40020410 	.word	0x40020410
 8007140:	40020428 	.word	0x40020428
 8007144:	40020440 	.word	0x40020440
 8007148:	40020458 	.word	0x40020458
 800714c:	40020470 	.word	0x40020470
 8007150:	40020488 	.word	0x40020488
 8007154:	400204a0 	.word	0x400204a0
 8007158:	400204b8 	.word	0x400204b8
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0302 	and.w	r3, r3, #2
 8007166:	2b00      	cmp	r3, #0
 8007168:	bf14      	ite	ne
 800716a:	2301      	movne	r3, #1
 800716c:	2300      	moveq	r3, #0
 800716e:	b2db      	uxtb	r3, r3
 8007170:	2b00      	cmp	r3, #0
 8007172:	f000 8087 	beq.w	8007284 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800717a:	f003 031f 	and.w	r3, r3, #31
 800717e:	2220      	movs	r2, #32
 8007180:	409a      	lsls	r2, r3
 8007182:	6a3b      	ldr	r3, [r7, #32]
 8007184:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800718c:	b2db      	uxtb	r3, r3
 800718e:	2b04      	cmp	r3, #4
 8007190:	d139      	bne.n	8007206 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f022 0216 	bic.w	r2, r2, #22
 80071a0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	695a      	ldr	r2, [r3, #20]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071b0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d103      	bne.n	80071c2 <HAL_DMA_IRQHandler+0x736>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d007      	beq.n	80071d2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f022 0208 	bic.w	r2, r2, #8
 80071d0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071d6:	f003 031f 	and.w	r3, r3, #31
 80071da:	223f      	movs	r2, #63	; 0x3f
 80071dc:	409a      	lsls	r2, r3
 80071de:	6a3b      	ldr	r3, [r7, #32]
 80071e0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	f000 834a 	beq.w	8007890 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	4798      	blx	r3
          }
          return;
 8007204:	e344      	b.n	8007890 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d018      	beq.n	8007246 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800721e:	2b00      	cmp	r3, #0
 8007220:	d108      	bne.n	8007234 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007226:	2b00      	cmp	r3, #0
 8007228:	d02c      	beq.n	8007284 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	4798      	blx	r3
 8007232:	e027      	b.n	8007284 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007238:	2b00      	cmp	r3, #0
 800723a:	d023      	beq.n	8007284 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	4798      	blx	r3
 8007244:	e01e      	b.n	8007284 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007250:	2b00      	cmp	r3, #0
 8007252:	d10f      	bne.n	8007274 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f022 0210 	bic.w	r2, r2, #16
 8007262:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007278:	2b00      	cmp	r3, #0
 800727a:	d003      	beq.n	8007284 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007288:	2b00      	cmp	r3, #0
 800728a:	f000 8306 	beq.w	800789a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007292:	f003 0301 	and.w	r3, r3, #1
 8007296:	2b00      	cmp	r3, #0
 8007298:	f000 8088 	beq.w	80073ac <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2204      	movs	r2, #4
 80072a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a7a      	ldr	r2, [pc, #488]	; (8007494 <HAL_DMA_IRQHandler+0xa08>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d04a      	beq.n	8007344 <HAL_DMA_IRQHandler+0x8b8>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a79      	ldr	r2, [pc, #484]	; (8007498 <HAL_DMA_IRQHandler+0xa0c>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d045      	beq.n	8007344 <HAL_DMA_IRQHandler+0x8b8>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a77      	ldr	r2, [pc, #476]	; (800749c <HAL_DMA_IRQHandler+0xa10>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d040      	beq.n	8007344 <HAL_DMA_IRQHandler+0x8b8>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a76      	ldr	r2, [pc, #472]	; (80074a0 <HAL_DMA_IRQHandler+0xa14>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d03b      	beq.n	8007344 <HAL_DMA_IRQHandler+0x8b8>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a74      	ldr	r2, [pc, #464]	; (80074a4 <HAL_DMA_IRQHandler+0xa18>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d036      	beq.n	8007344 <HAL_DMA_IRQHandler+0x8b8>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a73      	ldr	r2, [pc, #460]	; (80074a8 <HAL_DMA_IRQHandler+0xa1c>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d031      	beq.n	8007344 <HAL_DMA_IRQHandler+0x8b8>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a71      	ldr	r2, [pc, #452]	; (80074ac <HAL_DMA_IRQHandler+0xa20>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d02c      	beq.n	8007344 <HAL_DMA_IRQHandler+0x8b8>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a70      	ldr	r2, [pc, #448]	; (80074b0 <HAL_DMA_IRQHandler+0xa24>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d027      	beq.n	8007344 <HAL_DMA_IRQHandler+0x8b8>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a6e      	ldr	r2, [pc, #440]	; (80074b4 <HAL_DMA_IRQHandler+0xa28>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d022      	beq.n	8007344 <HAL_DMA_IRQHandler+0x8b8>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a6d      	ldr	r2, [pc, #436]	; (80074b8 <HAL_DMA_IRQHandler+0xa2c>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d01d      	beq.n	8007344 <HAL_DMA_IRQHandler+0x8b8>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a6b      	ldr	r2, [pc, #428]	; (80074bc <HAL_DMA_IRQHandler+0xa30>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d018      	beq.n	8007344 <HAL_DMA_IRQHandler+0x8b8>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a6a      	ldr	r2, [pc, #424]	; (80074c0 <HAL_DMA_IRQHandler+0xa34>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d013      	beq.n	8007344 <HAL_DMA_IRQHandler+0x8b8>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a68      	ldr	r2, [pc, #416]	; (80074c4 <HAL_DMA_IRQHandler+0xa38>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d00e      	beq.n	8007344 <HAL_DMA_IRQHandler+0x8b8>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a67      	ldr	r2, [pc, #412]	; (80074c8 <HAL_DMA_IRQHandler+0xa3c>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d009      	beq.n	8007344 <HAL_DMA_IRQHandler+0x8b8>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a65      	ldr	r2, [pc, #404]	; (80074cc <HAL_DMA_IRQHandler+0xa40>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d004      	beq.n	8007344 <HAL_DMA_IRQHandler+0x8b8>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a64      	ldr	r2, [pc, #400]	; (80074d0 <HAL_DMA_IRQHandler+0xa44>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d108      	bne.n	8007356 <HAL_DMA_IRQHandler+0x8ca>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f022 0201 	bic.w	r2, r2, #1
 8007352:	601a      	str	r2, [r3, #0]
 8007354:	e007      	b.n	8007366 <HAL_DMA_IRQHandler+0x8da>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f022 0201 	bic.w	r2, r2, #1
 8007364:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	3301      	adds	r3, #1
 800736a:	60fb      	str	r3, [r7, #12]
 800736c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800736e:	429a      	cmp	r2, r3
 8007370:	d307      	bcc.n	8007382 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 0301 	and.w	r3, r3, #1
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1f2      	bne.n	8007366 <HAL_DMA_IRQHandler+0x8da>
 8007380:	e000      	b.n	8007384 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007382:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 0301 	and.w	r3, r3, #1
 800738e:	2b00      	cmp	r3, #0
 8007390:	d004      	beq.n	800739c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2203      	movs	r2, #3
 8007396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800739a:	e003      	b.n	80073a4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f000 8272 	beq.w	800789a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	4798      	blx	r3
 80073be:	e26c      	b.n	800789a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a43      	ldr	r2, [pc, #268]	; (80074d4 <HAL_DMA_IRQHandler+0xa48>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d022      	beq.n	8007410 <HAL_DMA_IRQHandler+0x984>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a42      	ldr	r2, [pc, #264]	; (80074d8 <HAL_DMA_IRQHandler+0xa4c>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d01d      	beq.n	8007410 <HAL_DMA_IRQHandler+0x984>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a40      	ldr	r2, [pc, #256]	; (80074dc <HAL_DMA_IRQHandler+0xa50>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d018      	beq.n	8007410 <HAL_DMA_IRQHandler+0x984>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a3f      	ldr	r2, [pc, #252]	; (80074e0 <HAL_DMA_IRQHandler+0xa54>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d013      	beq.n	8007410 <HAL_DMA_IRQHandler+0x984>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a3d      	ldr	r2, [pc, #244]	; (80074e4 <HAL_DMA_IRQHandler+0xa58>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d00e      	beq.n	8007410 <HAL_DMA_IRQHandler+0x984>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a3c      	ldr	r2, [pc, #240]	; (80074e8 <HAL_DMA_IRQHandler+0xa5c>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d009      	beq.n	8007410 <HAL_DMA_IRQHandler+0x984>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a3a      	ldr	r2, [pc, #232]	; (80074ec <HAL_DMA_IRQHandler+0xa60>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d004      	beq.n	8007410 <HAL_DMA_IRQHandler+0x984>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a39      	ldr	r2, [pc, #228]	; (80074f0 <HAL_DMA_IRQHandler+0xa64>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d101      	bne.n	8007414 <HAL_DMA_IRQHandler+0x988>
 8007410:	2301      	movs	r3, #1
 8007412:	e000      	b.n	8007416 <HAL_DMA_IRQHandler+0x98a>
 8007414:	2300      	movs	r3, #0
 8007416:	2b00      	cmp	r3, #0
 8007418:	f000 823f 	beq.w	800789a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007428:	f003 031f 	and.w	r3, r3, #31
 800742c:	2204      	movs	r2, #4
 800742e:	409a      	lsls	r2, r3
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	4013      	ands	r3, r2
 8007434:	2b00      	cmp	r3, #0
 8007436:	f000 80cd 	beq.w	80075d4 <HAL_DMA_IRQHandler+0xb48>
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	f003 0304 	and.w	r3, r3, #4
 8007440:	2b00      	cmp	r3, #0
 8007442:	f000 80c7 	beq.w	80075d4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800744a:	f003 031f 	and.w	r3, r3, #31
 800744e:	2204      	movs	r2, #4
 8007450:	409a      	lsls	r2, r3
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800745c:	2b00      	cmp	r3, #0
 800745e:	d049      	beq.n	80074f4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007466:	2b00      	cmp	r3, #0
 8007468:	d109      	bne.n	800747e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800746e:	2b00      	cmp	r3, #0
 8007470:	f000 8210 	beq.w	8007894 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800747c:	e20a      	b.n	8007894 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007482:	2b00      	cmp	r3, #0
 8007484:	f000 8206 	beq.w	8007894 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007490:	e200      	b.n	8007894 <HAL_DMA_IRQHandler+0xe08>
 8007492:	bf00      	nop
 8007494:	40020010 	.word	0x40020010
 8007498:	40020028 	.word	0x40020028
 800749c:	40020040 	.word	0x40020040
 80074a0:	40020058 	.word	0x40020058
 80074a4:	40020070 	.word	0x40020070
 80074a8:	40020088 	.word	0x40020088
 80074ac:	400200a0 	.word	0x400200a0
 80074b0:	400200b8 	.word	0x400200b8
 80074b4:	40020410 	.word	0x40020410
 80074b8:	40020428 	.word	0x40020428
 80074bc:	40020440 	.word	0x40020440
 80074c0:	40020458 	.word	0x40020458
 80074c4:	40020470 	.word	0x40020470
 80074c8:	40020488 	.word	0x40020488
 80074cc:	400204a0 	.word	0x400204a0
 80074d0:	400204b8 	.word	0x400204b8
 80074d4:	58025408 	.word	0x58025408
 80074d8:	5802541c 	.word	0x5802541c
 80074dc:	58025430 	.word	0x58025430
 80074e0:	58025444 	.word	0x58025444
 80074e4:	58025458 	.word	0x58025458
 80074e8:	5802546c 	.word	0x5802546c
 80074ec:	58025480 	.word	0x58025480
 80074f0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	f003 0320 	and.w	r3, r3, #32
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d160      	bne.n	80075c0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a7f      	ldr	r2, [pc, #508]	; (8007700 <HAL_DMA_IRQHandler+0xc74>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d04a      	beq.n	800759e <HAL_DMA_IRQHandler+0xb12>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a7d      	ldr	r2, [pc, #500]	; (8007704 <HAL_DMA_IRQHandler+0xc78>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d045      	beq.n	800759e <HAL_DMA_IRQHandler+0xb12>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a7c      	ldr	r2, [pc, #496]	; (8007708 <HAL_DMA_IRQHandler+0xc7c>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d040      	beq.n	800759e <HAL_DMA_IRQHandler+0xb12>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a7a      	ldr	r2, [pc, #488]	; (800770c <HAL_DMA_IRQHandler+0xc80>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d03b      	beq.n	800759e <HAL_DMA_IRQHandler+0xb12>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a79      	ldr	r2, [pc, #484]	; (8007710 <HAL_DMA_IRQHandler+0xc84>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d036      	beq.n	800759e <HAL_DMA_IRQHandler+0xb12>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a77      	ldr	r2, [pc, #476]	; (8007714 <HAL_DMA_IRQHandler+0xc88>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d031      	beq.n	800759e <HAL_DMA_IRQHandler+0xb12>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a76      	ldr	r2, [pc, #472]	; (8007718 <HAL_DMA_IRQHandler+0xc8c>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d02c      	beq.n	800759e <HAL_DMA_IRQHandler+0xb12>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a74      	ldr	r2, [pc, #464]	; (800771c <HAL_DMA_IRQHandler+0xc90>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d027      	beq.n	800759e <HAL_DMA_IRQHandler+0xb12>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a73      	ldr	r2, [pc, #460]	; (8007720 <HAL_DMA_IRQHandler+0xc94>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d022      	beq.n	800759e <HAL_DMA_IRQHandler+0xb12>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a71      	ldr	r2, [pc, #452]	; (8007724 <HAL_DMA_IRQHandler+0xc98>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d01d      	beq.n	800759e <HAL_DMA_IRQHandler+0xb12>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a70      	ldr	r2, [pc, #448]	; (8007728 <HAL_DMA_IRQHandler+0xc9c>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d018      	beq.n	800759e <HAL_DMA_IRQHandler+0xb12>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a6e      	ldr	r2, [pc, #440]	; (800772c <HAL_DMA_IRQHandler+0xca0>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d013      	beq.n	800759e <HAL_DMA_IRQHandler+0xb12>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a6d      	ldr	r2, [pc, #436]	; (8007730 <HAL_DMA_IRQHandler+0xca4>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d00e      	beq.n	800759e <HAL_DMA_IRQHandler+0xb12>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a6b      	ldr	r2, [pc, #428]	; (8007734 <HAL_DMA_IRQHandler+0xca8>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d009      	beq.n	800759e <HAL_DMA_IRQHandler+0xb12>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a6a      	ldr	r2, [pc, #424]	; (8007738 <HAL_DMA_IRQHandler+0xcac>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d004      	beq.n	800759e <HAL_DMA_IRQHandler+0xb12>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a68      	ldr	r2, [pc, #416]	; (800773c <HAL_DMA_IRQHandler+0xcb0>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d108      	bne.n	80075b0 <HAL_DMA_IRQHandler+0xb24>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f022 0208 	bic.w	r2, r2, #8
 80075ac:	601a      	str	r2, [r3, #0]
 80075ae:	e007      	b.n	80075c0 <HAL_DMA_IRQHandler+0xb34>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f022 0204 	bic.w	r2, r2, #4
 80075be:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f000 8165 	beq.w	8007894 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075d2:	e15f      	b.n	8007894 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075d8:	f003 031f 	and.w	r3, r3, #31
 80075dc:	2202      	movs	r2, #2
 80075de:	409a      	lsls	r2, r3
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	4013      	ands	r3, r2
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f000 80c5 	beq.w	8007774 <HAL_DMA_IRQHandler+0xce8>
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	f003 0302 	and.w	r3, r3, #2
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	f000 80bf 	beq.w	8007774 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075fa:	f003 031f 	and.w	r3, r3, #31
 80075fe:	2202      	movs	r2, #2
 8007600:	409a      	lsls	r2, r3
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800760c:	2b00      	cmp	r3, #0
 800760e:	d018      	beq.n	8007642 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d109      	bne.n	800762e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800761e:	2b00      	cmp	r3, #0
 8007620:	f000 813a 	beq.w	8007898 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800762c:	e134      	b.n	8007898 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007632:	2b00      	cmp	r3, #0
 8007634:	f000 8130 	beq.w	8007898 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007640:	e12a      	b.n	8007898 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	f003 0320 	and.w	r3, r3, #32
 8007648:	2b00      	cmp	r3, #0
 800764a:	f040 8089 	bne.w	8007760 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a2b      	ldr	r2, [pc, #172]	; (8007700 <HAL_DMA_IRQHandler+0xc74>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d04a      	beq.n	80076ee <HAL_DMA_IRQHandler+0xc62>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a29      	ldr	r2, [pc, #164]	; (8007704 <HAL_DMA_IRQHandler+0xc78>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d045      	beq.n	80076ee <HAL_DMA_IRQHandler+0xc62>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a28      	ldr	r2, [pc, #160]	; (8007708 <HAL_DMA_IRQHandler+0xc7c>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d040      	beq.n	80076ee <HAL_DMA_IRQHandler+0xc62>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a26      	ldr	r2, [pc, #152]	; (800770c <HAL_DMA_IRQHandler+0xc80>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d03b      	beq.n	80076ee <HAL_DMA_IRQHandler+0xc62>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a25      	ldr	r2, [pc, #148]	; (8007710 <HAL_DMA_IRQHandler+0xc84>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d036      	beq.n	80076ee <HAL_DMA_IRQHandler+0xc62>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a23      	ldr	r2, [pc, #140]	; (8007714 <HAL_DMA_IRQHandler+0xc88>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d031      	beq.n	80076ee <HAL_DMA_IRQHandler+0xc62>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a22      	ldr	r2, [pc, #136]	; (8007718 <HAL_DMA_IRQHandler+0xc8c>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d02c      	beq.n	80076ee <HAL_DMA_IRQHandler+0xc62>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a20      	ldr	r2, [pc, #128]	; (800771c <HAL_DMA_IRQHandler+0xc90>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d027      	beq.n	80076ee <HAL_DMA_IRQHandler+0xc62>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a1f      	ldr	r2, [pc, #124]	; (8007720 <HAL_DMA_IRQHandler+0xc94>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d022      	beq.n	80076ee <HAL_DMA_IRQHandler+0xc62>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a1d      	ldr	r2, [pc, #116]	; (8007724 <HAL_DMA_IRQHandler+0xc98>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d01d      	beq.n	80076ee <HAL_DMA_IRQHandler+0xc62>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a1c      	ldr	r2, [pc, #112]	; (8007728 <HAL_DMA_IRQHandler+0xc9c>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d018      	beq.n	80076ee <HAL_DMA_IRQHandler+0xc62>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a1a      	ldr	r2, [pc, #104]	; (800772c <HAL_DMA_IRQHandler+0xca0>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d013      	beq.n	80076ee <HAL_DMA_IRQHandler+0xc62>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a19      	ldr	r2, [pc, #100]	; (8007730 <HAL_DMA_IRQHandler+0xca4>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d00e      	beq.n	80076ee <HAL_DMA_IRQHandler+0xc62>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a17      	ldr	r2, [pc, #92]	; (8007734 <HAL_DMA_IRQHandler+0xca8>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d009      	beq.n	80076ee <HAL_DMA_IRQHandler+0xc62>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a16      	ldr	r2, [pc, #88]	; (8007738 <HAL_DMA_IRQHandler+0xcac>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d004      	beq.n	80076ee <HAL_DMA_IRQHandler+0xc62>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a14      	ldr	r2, [pc, #80]	; (800773c <HAL_DMA_IRQHandler+0xcb0>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d128      	bne.n	8007740 <HAL_DMA_IRQHandler+0xcb4>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f022 0214 	bic.w	r2, r2, #20
 80076fc:	601a      	str	r2, [r3, #0]
 80076fe:	e027      	b.n	8007750 <HAL_DMA_IRQHandler+0xcc4>
 8007700:	40020010 	.word	0x40020010
 8007704:	40020028 	.word	0x40020028
 8007708:	40020040 	.word	0x40020040
 800770c:	40020058 	.word	0x40020058
 8007710:	40020070 	.word	0x40020070
 8007714:	40020088 	.word	0x40020088
 8007718:	400200a0 	.word	0x400200a0
 800771c:	400200b8 	.word	0x400200b8
 8007720:	40020410 	.word	0x40020410
 8007724:	40020428 	.word	0x40020428
 8007728:	40020440 	.word	0x40020440
 800772c:	40020458 	.word	0x40020458
 8007730:	40020470 	.word	0x40020470
 8007734:	40020488 	.word	0x40020488
 8007738:	400204a0 	.word	0x400204a0
 800773c:	400204b8 	.word	0x400204b8
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f022 020a 	bic.w	r2, r2, #10
 800774e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007764:	2b00      	cmp	r3, #0
 8007766:	f000 8097 	beq.w	8007898 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007772:	e091      	b.n	8007898 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007778:	f003 031f 	and.w	r3, r3, #31
 800777c:	2208      	movs	r2, #8
 800777e:	409a      	lsls	r2, r3
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	4013      	ands	r3, r2
 8007784:	2b00      	cmp	r3, #0
 8007786:	f000 8088 	beq.w	800789a <HAL_DMA_IRQHandler+0xe0e>
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	f003 0308 	and.w	r3, r3, #8
 8007790:	2b00      	cmp	r3, #0
 8007792:	f000 8082 	beq.w	800789a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a41      	ldr	r2, [pc, #260]	; (80078a0 <HAL_DMA_IRQHandler+0xe14>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d04a      	beq.n	8007836 <HAL_DMA_IRQHandler+0xdaa>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a3f      	ldr	r2, [pc, #252]	; (80078a4 <HAL_DMA_IRQHandler+0xe18>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d045      	beq.n	8007836 <HAL_DMA_IRQHandler+0xdaa>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a3e      	ldr	r2, [pc, #248]	; (80078a8 <HAL_DMA_IRQHandler+0xe1c>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d040      	beq.n	8007836 <HAL_DMA_IRQHandler+0xdaa>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a3c      	ldr	r2, [pc, #240]	; (80078ac <HAL_DMA_IRQHandler+0xe20>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d03b      	beq.n	8007836 <HAL_DMA_IRQHandler+0xdaa>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a3b      	ldr	r2, [pc, #236]	; (80078b0 <HAL_DMA_IRQHandler+0xe24>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d036      	beq.n	8007836 <HAL_DMA_IRQHandler+0xdaa>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a39      	ldr	r2, [pc, #228]	; (80078b4 <HAL_DMA_IRQHandler+0xe28>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d031      	beq.n	8007836 <HAL_DMA_IRQHandler+0xdaa>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a38      	ldr	r2, [pc, #224]	; (80078b8 <HAL_DMA_IRQHandler+0xe2c>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d02c      	beq.n	8007836 <HAL_DMA_IRQHandler+0xdaa>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a36      	ldr	r2, [pc, #216]	; (80078bc <HAL_DMA_IRQHandler+0xe30>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d027      	beq.n	8007836 <HAL_DMA_IRQHandler+0xdaa>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a35      	ldr	r2, [pc, #212]	; (80078c0 <HAL_DMA_IRQHandler+0xe34>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d022      	beq.n	8007836 <HAL_DMA_IRQHandler+0xdaa>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a33      	ldr	r2, [pc, #204]	; (80078c4 <HAL_DMA_IRQHandler+0xe38>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d01d      	beq.n	8007836 <HAL_DMA_IRQHandler+0xdaa>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a32      	ldr	r2, [pc, #200]	; (80078c8 <HAL_DMA_IRQHandler+0xe3c>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d018      	beq.n	8007836 <HAL_DMA_IRQHandler+0xdaa>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a30      	ldr	r2, [pc, #192]	; (80078cc <HAL_DMA_IRQHandler+0xe40>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d013      	beq.n	8007836 <HAL_DMA_IRQHandler+0xdaa>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a2f      	ldr	r2, [pc, #188]	; (80078d0 <HAL_DMA_IRQHandler+0xe44>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d00e      	beq.n	8007836 <HAL_DMA_IRQHandler+0xdaa>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a2d      	ldr	r2, [pc, #180]	; (80078d4 <HAL_DMA_IRQHandler+0xe48>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d009      	beq.n	8007836 <HAL_DMA_IRQHandler+0xdaa>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a2c      	ldr	r2, [pc, #176]	; (80078d8 <HAL_DMA_IRQHandler+0xe4c>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d004      	beq.n	8007836 <HAL_DMA_IRQHandler+0xdaa>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a2a      	ldr	r2, [pc, #168]	; (80078dc <HAL_DMA_IRQHandler+0xe50>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d108      	bne.n	8007848 <HAL_DMA_IRQHandler+0xdbc>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f022 021c 	bic.w	r2, r2, #28
 8007844:	601a      	str	r2, [r3, #0]
 8007846:	e007      	b.n	8007858 <HAL_DMA_IRQHandler+0xdcc>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f022 020e 	bic.w	r2, r2, #14
 8007856:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800785c:	f003 031f 	and.w	r3, r3, #31
 8007860:	2201      	movs	r2, #1
 8007862:	409a      	lsls	r2, r3
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2201      	movs	r2, #1
 8007872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007882:	2b00      	cmp	r3, #0
 8007884:	d009      	beq.n	800789a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	4798      	blx	r3
 800788e:	e004      	b.n	800789a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007890:	bf00      	nop
 8007892:	e002      	b.n	800789a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007894:	bf00      	nop
 8007896:	e000      	b.n	800789a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007898:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800789a:	3728      	adds	r7, #40	; 0x28
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	40020010 	.word	0x40020010
 80078a4:	40020028 	.word	0x40020028
 80078a8:	40020040 	.word	0x40020040
 80078ac:	40020058 	.word	0x40020058
 80078b0:	40020070 	.word	0x40020070
 80078b4:	40020088 	.word	0x40020088
 80078b8:	400200a0 	.word	0x400200a0
 80078bc:	400200b8 	.word	0x400200b8
 80078c0:	40020410 	.word	0x40020410
 80078c4:	40020428 	.word	0x40020428
 80078c8:	40020440 	.word	0x40020440
 80078cc:	40020458 	.word	0x40020458
 80078d0:	40020470 	.word	0x40020470
 80078d4:	40020488 	.word	0x40020488
 80078d8:	400204a0 	.word	0x400204a0
 80078dc:	400204b8 	.word	0x400204b8

080078e0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b087      	sub	sp, #28
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	607a      	str	r2, [r7, #4]
 80078ec:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078f2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078f8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a7f      	ldr	r2, [pc, #508]	; (8007afc <DMA_SetConfig+0x21c>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d072      	beq.n	80079ea <DMA_SetConfig+0x10a>
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a7d      	ldr	r2, [pc, #500]	; (8007b00 <DMA_SetConfig+0x220>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d06d      	beq.n	80079ea <DMA_SetConfig+0x10a>
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a7c      	ldr	r2, [pc, #496]	; (8007b04 <DMA_SetConfig+0x224>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d068      	beq.n	80079ea <DMA_SetConfig+0x10a>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a7a      	ldr	r2, [pc, #488]	; (8007b08 <DMA_SetConfig+0x228>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d063      	beq.n	80079ea <DMA_SetConfig+0x10a>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a79      	ldr	r2, [pc, #484]	; (8007b0c <DMA_SetConfig+0x22c>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d05e      	beq.n	80079ea <DMA_SetConfig+0x10a>
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a77      	ldr	r2, [pc, #476]	; (8007b10 <DMA_SetConfig+0x230>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d059      	beq.n	80079ea <DMA_SetConfig+0x10a>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a76      	ldr	r2, [pc, #472]	; (8007b14 <DMA_SetConfig+0x234>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d054      	beq.n	80079ea <DMA_SetConfig+0x10a>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a74      	ldr	r2, [pc, #464]	; (8007b18 <DMA_SetConfig+0x238>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d04f      	beq.n	80079ea <DMA_SetConfig+0x10a>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a73      	ldr	r2, [pc, #460]	; (8007b1c <DMA_SetConfig+0x23c>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d04a      	beq.n	80079ea <DMA_SetConfig+0x10a>
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a71      	ldr	r2, [pc, #452]	; (8007b20 <DMA_SetConfig+0x240>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d045      	beq.n	80079ea <DMA_SetConfig+0x10a>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a70      	ldr	r2, [pc, #448]	; (8007b24 <DMA_SetConfig+0x244>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d040      	beq.n	80079ea <DMA_SetConfig+0x10a>
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a6e      	ldr	r2, [pc, #440]	; (8007b28 <DMA_SetConfig+0x248>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d03b      	beq.n	80079ea <DMA_SetConfig+0x10a>
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a6d      	ldr	r2, [pc, #436]	; (8007b2c <DMA_SetConfig+0x24c>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d036      	beq.n	80079ea <DMA_SetConfig+0x10a>
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a6b      	ldr	r2, [pc, #428]	; (8007b30 <DMA_SetConfig+0x250>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d031      	beq.n	80079ea <DMA_SetConfig+0x10a>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a6a      	ldr	r2, [pc, #424]	; (8007b34 <DMA_SetConfig+0x254>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d02c      	beq.n	80079ea <DMA_SetConfig+0x10a>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a68      	ldr	r2, [pc, #416]	; (8007b38 <DMA_SetConfig+0x258>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d027      	beq.n	80079ea <DMA_SetConfig+0x10a>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a67      	ldr	r2, [pc, #412]	; (8007b3c <DMA_SetConfig+0x25c>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d022      	beq.n	80079ea <DMA_SetConfig+0x10a>
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a65      	ldr	r2, [pc, #404]	; (8007b40 <DMA_SetConfig+0x260>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d01d      	beq.n	80079ea <DMA_SetConfig+0x10a>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a64      	ldr	r2, [pc, #400]	; (8007b44 <DMA_SetConfig+0x264>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d018      	beq.n	80079ea <DMA_SetConfig+0x10a>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a62      	ldr	r2, [pc, #392]	; (8007b48 <DMA_SetConfig+0x268>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d013      	beq.n	80079ea <DMA_SetConfig+0x10a>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a61      	ldr	r2, [pc, #388]	; (8007b4c <DMA_SetConfig+0x26c>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d00e      	beq.n	80079ea <DMA_SetConfig+0x10a>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a5f      	ldr	r2, [pc, #380]	; (8007b50 <DMA_SetConfig+0x270>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d009      	beq.n	80079ea <DMA_SetConfig+0x10a>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a5e      	ldr	r2, [pc, #376]	; (8007b54 <DMA_SetConfig+0x274>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d004      	beq.n	80079ea <DMA_SetConfig+0x10a>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a5c      	ldr	r2, [pc, #368]	; (8007b58 <DMA_SetConfig+0x278>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d101      	bne.n	80079ee <DMA_SetConfig+0x10e>
 80079ea:	2301      	movs	r3, #1
 80079ec:	e000      	b.n	80079f0 <DMA_SetConfig+0x110>
 80079ee:	2300      	movs	r3, #0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00d      	beq.n	8007a10 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80079fc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d004      	beq.n	8007a10 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007a0e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a39      	ldr	r2, [pc, #228]	; (8007afc <DMA_SetConfig+0x21c>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d04a      	beq.n	8007ab0 <DMA_SetConfig+0x1d0>
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a38      	ldr	r2, [pc, #224]	; (8007b00 <DMA_SetConfig+0x220>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d045      	beq.n	8007ab0 <DMA_SetConfig+0x1d0>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a36      	ldr	r2, [pc, #216]	; (8007b04 <DMA_SetConfig+0x224>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d040      	beq.n	8007ab0 <DMA_SetConfig+0x1d0>
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a35      	ldr	r2, [pc, #212]	; (8007b08 <DMA_SetConfig+0x228>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d03b      	beq.n	8007ab0 <DMA_SetConfig+0x1d0>
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a33      	ldr	r2, [pc, #204]	; (8007b0c <DMA_SetConfig+0x22c>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d036      	beq.n	8007ab0 <DMA_SetConfig+0x1d0>
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a32      	ldr	r2, [pc, #200]	; (8007b10 <DMA_SetConfig+0x230>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d031      	beq.n	8007ab0 <DMA_SetConfig+0x1d0>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a30      	ldr	r2, [pc, #192]	; (8007b14 <DMA_SetConfig+0x234>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d02c      	beq.n	8007ab0 <DMA_SetConfig+0x1d0>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a2f      	ldr	r2, [pc, #188]	; (8007b18 <DMA_SetConfig+0x238>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d027      	beq.n	8007ab0 <DMA_SetConfig+0x1d0>
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a2d      	ldr	r2, [pc, #180]	; (8007b1c <DMA_SetConfig+0x23c>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d022      	beq.n	8007ab0 <DMA_SetConfig+0x1d0>
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a2c      	ldr	r2, [pc, #176]	; (8007b20 <DMA_SetConfig+0x240>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d01d      	beq.n	8007ab0 <DMA_SetConfig+0x1d0>
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a2a      	ldr	r2, [pc, #168]	; (8007b24 <DMA_SetConfig+0x244>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d018      	beq.n	8007ab0 <DMA_SetConfig+0x1d0>
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a29      	ldr	r2, [pc, #164]	; (8007b28 <DMA_SetConfig+0x248>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d013      	beq.n	8007ab0 <DMA_SetConfig+0x1d0>
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a27      	ldr	r2, [pc, #156]	; (8007b2c <DMA_SetConfig+0x24c>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d00e      	beq.n	8007ab0 <DMA_SetConfig+0x1d0>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a26      	ldr	r2, [pc, #152]	; (8007b30 <DMA_SetConfig+0x250>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d009      	beq.n	8007ab0 <DMA_SetConfig+0x1d0>
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a24      	ldr	r2, [pc, #144]	; (8007b34 <DMA_SetConfig+0x254>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d004      	beq.n	8007ab0 <DMA_SetConfig+0x1d0>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a23      	ldr	r2, [pc, #140]	; (8007b38 <DMA_SetConfig+0x258>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d101      	bne.n	8007ab4 <DMA_SetConfig+0x1d4>
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e000      	b.n	8007ab6 <DMA_SetConfig+0x1d6>
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d059      	beq.n	8007b6e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007abe:	f003 031f 	and.w	r3, r3, #31
 8007ac2:	223f      	movs	r2, #63	; 0x3f
 8007ac4:	409a      	lsls	r2, r3
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007ad8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	683a      	ldr	r2, [r7, #0]
 8007ae0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	2b40      	cmp	r3, #64	; 0x40
 8007ae8:	d138      	bne.n	8007b5c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	68ba      	ldr	r2, [r7, #8]
 8007af8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007afa:	e086      	b.n	8007c0a <DMA_SetConfig+0x32a>
 8007afc:	40020010 	.word	0x40020010
 8007b00:	40020028 	.word	0x40020028
 8007b04:	40020040 	.word	0x40020040
 8007b08:	40020058 	.word	0x40020058
 8007b0c:	40020070 	.word	0x40020070
 8007b10:	40020088 	.word	0x40020088
 8007b14:	400200a0 	.word	0x400200a0
 8007b18:	400200b8 	.word	0x400200b8
 8007b1c:	40020410 	.word	0x40020410
 8007b20:	40020428 	.word	0x40020428
 8007b24:	40020440 	.word	0x40020440
 8007b28:	40020458 	.word	0x40020458
 8007b2c:	40020470 	.word	0x40020470
 8007b30:	40020488 	.word	0x40020488
 8007b34:	400204a0 	.word	0x400204a0
 8007b38:	400204b8 	.word	0x400204b8
 8007b3c:	58025408 	.word	0x58025408
 8007b40:	5802541c 	.word	0x5802541c
 8007b44:	58025430 	.word	0x58025430
 8007b48:	58025444 	.word	0x58025444
 8007b4c:	58025458 	.word	0x58025458
 8007b50:	5802546c 	.word	0x5802546c
 8007b54:	58025480 	.word	0x58025480
 8007b58:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	68ba      	ldr	r2, [r7, #8]
 8007b62:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	60da      	str	r2, [r3, #12]
}
 8007b6c:	e04d      	b.n	8007c0a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a29      	ldr	r2, [pc, #164]	; (8007c18 <DMA_SetConfig+0x338>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d022      	beq.n	8007bbe <DMA_SetConfig+0x2de>
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a27      	ldr	r2, [pc, #156]	; (8007c1c <DMA_SetConfig+0x33c>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d01d      	beq.n	8007bbe <DMA_SetConfig+0x2de>
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a26      	ldr	r2, [pc, #152]	; (8007c20 <DMA_SetConfig+0x340>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d018      	beq.n	8007bbe <DMA_SetConfig+0x2de>
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a24      	ldr	r2, [pc, #144]	; (8007c24 <DMA_SetConfig+0x344>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d013      	beq.n	8007bbe <DMA_SetConfig+0x2de>
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a23      	ldr	r2, [pc, #140]	; (8007c28 <DMA_SetConfig+0x348>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d00e      	beq.n	8007bbe <DMA_SetConfig+0x2de>
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a21      	ldr	r2, [pc, #132]	; (8007c2c <DMA_SetConfig+0x34c>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d009      	beq.n	8007bbe <DMA_SetConfig+0x2de>
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a20      	ldr	r2, [pc, #128]	; (8007c30 <DMA_SetConfig+0x350>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d004      	beq.n	8007bbe <DMA_SetConfig+0x2de>
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a1e      	ldr	r2, [pc, #120]	; (8007c34 <DMA_SetConfig+0x354>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d101      	bne.n	8007bc2 <DMA_SetConfig+0x2e2>
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e000      	b.n	8007bc4 <DMA_SetConfig+0x2e4>
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d020      	beq.n	8007c0a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bcc:	f003 031f 	and.w	r3, r3, #31
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	409a      	lsls	r2, r3
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	683a      	ldr	r2, [r7, #0]
 8007bde:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	2b40      	cmp	r3, #64	; 0x40
 8007be6:	d108      	bne.n	8007bfa <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68ba      	ldr	r2, [r7, #8]
 8007bf6:	60da      	str	r2, [r3, #12]
}
 8007bf8:	e007      	b.n	8007c0a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	68ba      	ldr	r2, [r7, #8]
 8007c00:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	60da      	str	r2, [r3, #12]
}
 8007c0a:	bf00      	nop
 8007c0c:	371c      	adds	r7, #28
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr
 8007c16:	bf00      	nop
 8007c18:	58025408 	.word	0x58025408
 8007c1c:	5802541c 	.word	0x5802541c
 8007c20:	58025430 	.word	0x58025430
 8007c24:	58025444 	.word	0x58025444
 8007c28:	58025458 	.word	0x58025458
 8007c2c:	5802546c 	.word	0x5802546c
 8007c30:	58025480 	.word	0x58025480
 8007c34:	58025494 	.word	0x58025494

08007c38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a42      	ldr	r2, [pc, #264]	; (8007d50 <DMA_CalcBaseAndBitshift+0x118>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d04a      	beq.n	8007ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a41      	ldr	r2, [pc, #260]	; (8007d54 <DMA_CalcBaseAndBitshift+0x11c>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d045      	beq.n	8007ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a3f      	ldr	r2, [pc, #252]	; (8007d58 <DMA_CalcBaseAndBitshift+0x120>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d040      	beq.n	8007ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a3e      	ldr	r2, [pc, #248]	; (8007d5c <DMA_CalcBaseAndBitshift+0x124>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d03b      	beq.n	8007ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a3c      	ldr	r2, [pc, #240]	; (8007d60 <DMA_CalcBaseAndBitshift+0x128>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d036      	beq.n	8007ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a3b      	ldr	r2, [pc, #236]	; (8007d64 <DMA_CalcBaseAndBitshift+0x12c>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d031      	beq.n	8007ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a39      	ldr	r2, [pc, #228]	; (8007d68 <DMA_CalcBaseAndBitshift+0x130>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d02c      	beq.n	8007ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a38      	ldr	r2, [pc, #224]	; (8007d6c <DMA_CalcBaseAndBitshift+0x134>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d027      	beq.n	8007ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a36      	ldr	r2, [pc, #216]	; (8007d70 <DMA_CalcBaseAndBitshift+0x138>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d022      	beq.n	8007ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a35      	ldr	r2, [pc, #212]	; (8007d74 <DMA_CalcBaseAndBitshift+0x13c>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d01d      	beq.n	8007ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a33      	ldr	r2, [pc, #204]	; (8007d78 <DMA_CalcBaseAndBitshift+0x140>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d018      	beq.n	8007ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a32      	ldr	r2, [pc, #200]	; (8007d7c <DMA_CalcBaseAndBitshift+0x144>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d013      	beq.n	8007ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a30      	ldr	r2, [pc, #192]	; (8007d80 <DMA_CalcBaseAndBitshift+0x148>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d00e      	beq.n	8007ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a2f      	ldr	r2, [pc, #188]	; (8007d84 <DMA_CalcBaseAndBitshift+0x14c>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d009      	beq.n	8007ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a2d      	ldr	r2, [pc, #180]	; (8007d88 <DMA_CalcBaseAndBitshift+0x150>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d004      	beq.n	8007ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a2c      	ldr	r2, [pc, #176]	; (8007d8c <DMA_CalcBaseAndBitshift+0x154>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d101      	bne.n	8007ce4 <DMA_CalcBaseAndBitshift+0xac>
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e000      	b.n	8007ce6 <DMA_CalcBaseAndBitshift+0xae>
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d024      	beq.n	8007d34 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	3b10      	subs	r3, #16
 8007cf2:	4a27      	ldr	r2, [pc, #156]	; (8007d90 <DMA_CalcBaseAndBitshift+0x158>)
 8007cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8007cf8:	091b      	lsrs	r3, r3, #4
 8007cfa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f003 0307 	and.w	r3, r3, #7
 8007d02:	4a24      	ldr	r2, [pc, #144]	; (8007d94 <DMA_CalcBaseAndBitshift+0x15c>)
 8007d04:	5cd3      	ldrb	r3, [r2, r3]
 8007d06:	461a      	mov	r2, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2b03      	cmp	r3, #3
 8007d10:	d908      	bls.n	8007d24 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	461a      	mov	r2, r3
 8007d18:	4b1f      	ldr	r3, [pc, #124]	; (8007d98 <DMA_CalcBaseAndBitshift+0x160>)
 8007d1a:	4013      	ands	r3, r2
 8007d1c:	1d1a      	adds	r2, r3, #4
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	659a      	str	r2, [r3, #88]	; 0x58
 8007d22:	e00d      	b.n	8007d40 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	461a      	mov	r2, r3
 8007d2a:	4b1b      	ldr	r3, [pc, #108]	; (8007d98 <DMA_CalcBaseAndBitshift+0x160>)
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	6593      	str	r3, [r2, #88]	; 0x58
 8007d32:	e005      	b.n	8007d40 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3714      	adds	r7, #20
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr
 8007d50:	40020010 	.word	0x40020010
 8007d54:	40020028 	.word	0x40020028
 8007d58:	40020040 	.word	0x40020040
 8007d5c:	40020058 	.word	0x40020058
 8007d60:	40020070 	.word	0x40020070
 8007d64:	40020088 	.word	0x40020088
 8007d68:	400200a0 	.word	0x400200a0
 8007d6c:	400200b8 	.word	0x400200b8
 8007d70:	40020410 	.word	0x40020410
 8007d74:	40020428 	.word	0x40020428
 8007d78:	40020440 	.word	0x40020440
 8007d7c:	40020458 	.word	0x40020458
 8007d80:	40020470 	.word	0x40020470
 8007d84:	40020488 	.word	0x40020488
 8007d88:	400204a0 	.word	0x400204a0
 8007d8c:	400204b8 	.word	0x400204b8
 8007d90:	aaaaaaab 	.word	0xaaaaaaab
 8007d94:	0801c39c 	.word	0x0801c39c
 8007d98:	fffffc00 	.word	0xfffffc00

08007d9c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b085      	sub	sp, #20
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007da4:	2300      	movs	r3, #0
 8007da6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	699b      	ldr	r3, [r3, #24]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d120      	bne.n	8007df2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db4:	2b03      	cmp	r3, #3
 8007db6:	d858      	bhi.n	8007e6a <DMA_CheckFifoParam+0xce>
 8007db8:	a201      	add	r2, pc, #4	; (adr r2, 8007dc0 <DMA_CheckFifoParam+0x24>)
 8007dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dbe:	bf00      	nop
 8007dc0:	08007dd1 	.word	0x08007dd1
 8007dc4:	08007de3 	.word	0x08007de3
 8007dc8:	08007dd1 	.word	0x08007dd1
 8007dcc:	08007e6b 	.word	0x08007e6b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d048      	beq.n	8007e6e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007de0:	e045      	b.n	8007e6e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007dea:	d142      	bne.n	8007e72 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007df0:	e03f      	b.n	8007e72 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	699b      	ldr	r3, [r3, #24]
 8007df6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dfa:	d123      	bne.n	8007e44 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e00:	2b03      	cmp	r3, #3
 8007e02:	d838      	bhi.n	8007e76 <DMA_CheckFifoParam+0xda>
 8007e04:	a201      	add	r2, pc, #4	; (adr r2, 8007e0c <DMA_CheckFifoParam+0x70>)
 8007e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e0a:	bf00      	nop
 8007e0c:	08007e1d 	.word	0x08007e1d
 8007e10:	08007e23 	.word	0x08007e23
 8007e14:	08007e1d 	.word	0x08007e1d
 8007e18:	08007e35 	.word	0x08007e35
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	73fb      	strb	r3, [r7, #15]
        break;
 8007e20:	e030      	b.n	8007e84 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d025      	beq.n	8007e7a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007e32:	e022      	b.n	8007e7a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007e3c:	d11f      	bne.n	8007e7e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007e42:	e01c      	b.n	8007e7e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e48:	2b02      	cmp	r3, #2
 8007e4a:	d902      	bls.n	8007e52 <DMA_CheckFifoParam+0xb6>
 8007e4c:	2b03      	cmp	r3, #3
 8007e4e:	d003      	beq.n	8007e58 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007e50:	e018      	b.n	8007e84 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	73fb      	strb	r3, [r7, #15]
        break;
 8007e56:	e015      	b.n	8007e84 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00e      	beq.n	8007e82 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	73fb      	strb	r3, [r7, #15]
    break;
 8007e68:	e00b      	b.n	8007e82 <DMA_CheckFifoParam+0xe6>
        break;
 8007e6a:	bf00      	nop
 8007e6c:	e00a      	b.n	8007e84 <DMA_CheckFifoParam+0xe8>
        break;
 8007e6e:	bf00      	nop
 8007e70:	e008      	b.n	8007e84 <DMA_CheckFifoParam+0xe8>
        break;
 8007e72:	bf00      	nop
 8007e74:	e006      	b.n	8007e84 <DMA_CheckFifoParam+0xe8>
        break;
 8007e76:	bf00      	nop
 8007e78:	e004      	b.n	8007e84 <DMA_CheckFifoParam+0xe8>
        break;
 8007e7a:	bf00      	nop
 8007e7c:	e002      	b.n	8007e84 <DMA_CheckFifoParam+0xe8>
        break;
 8007e7e:	bf00      	nop
 8007e80:	e000      	b.n	8007e84 <DMA_CheckFifoParam+0xe8>
    break;
 8007e82:	bf00      	nop
    }
  }

  return status;
 8007e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3714      	adds	r7, #20
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop

08007e94 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b085      	sub	sp, #20
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a38      	ldr	r2, [pc, #224]	; (8007f88 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d022      	beq.n	8007ef2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a36      	ldr	r2, [pc, #216]	; (8007f8c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d01d      	beq.n	8007ef2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a35      	ldr	r2, [pc, #212]	; (8007f90 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d018      	beq.n	8007ef2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a33      	ldr	r2, [pc, #204]	; (8007f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d013      	beq.n	8007ef2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a32      	ldr	r2, [pc, #200]	; (8007f98 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d00e      	beq.n	8007ef2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a30      	ldr	r2, [pc, #192]	; (8007f9c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d009      	beq.n	8007ef2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a2f      	ldr	r2, [pc, #188]	; (8007fa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d004      	beq.n	8007ef2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a2d      	ldr	r2, [pc, #180]	; (8007fa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d101      	bne.n	8007ef6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e000      	b.n	8007ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d01a      	beq.n	8007f32 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	3b08      	subs	r3, #8
 8007f04:	4a28      	ldr	r2, [pc, #160]	; (8007fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007f06:	fba2 2303 	umull	r2, r3, r2, r3
 8007f0a:	091b      	lsrs	r3, r3, #4
 8007f0c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	4b26      	ldr	r3, [pc, #152]	; (8007fac <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007f12:	4413      	add	r3, r2
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	461a      	mov	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a24      	ldr	r2, [pc, #144]	; (8007fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007f20:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f003 031f 	and.w	r3, r3, #31
 8007f28:	2201      	movs	r2, #1
 8007f2a:	409a      	lsls	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007f30:	e024      	b.n	8007f7c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	3b10      	subs	r3, #16
 8007f3a:	4a1e      	ldr	r2, [pc, #120]	; (8007fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8007f40:	091b      	lsrs	r3, r3, #4
 8007f42:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	4a1c      	ldr	r2, [pc, #112]	; (8007fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d806      	bhi.n	8007f5a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	4a1b      	ldr	r2, [pc, #108]	; (8007fbc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d902      	bls.n	8007f5a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	3308      	adds	r3, #8
 8007f58:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007f5a:	68fa      	ldr	r2, [r7, #12]
 8007f5c:	4b18      	ldr	r3, [pc, #96]	; (8007fc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007f5e:	4413      	add	r3, r2
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	461a      	mov	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	4a16      	ldr	r2, [pc, #88]	; (8007fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007f6c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f003 031f 	and.w	r3, r3, #31
 8007f74:	2201      	movs	r2, #1
 8007f76:	409a      	lsls	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007f7c:	bf00      	nop
 8007f7e:	3714      	adds	r7, #20
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr
 8007f88:	58025408 	.word	0x58025408
 8007f8c:	5802541c 	.word	0x5802541c
 8007f90:	58025430 	.word	0x58025430
 8007f94:	58025444 	.word	0x58025444
 8007f98:	58025458 	.word	0x58025458
 8007f9c:	5802546c 	.word	0x5802546c
 8007fa0:	58025480 	.word	0x58025480
 8007fa4:	58025494 	.word	0x58025494
 8007fa8:	cccccccd 	.word	0xcccccccd
 8007fac:	16009600 	.word	0x16009600
 8007fb0:	58025880 	.word	0x58025880
 8007fb4:	aaaaaaab 	.word	0xaaaaaaab
 8007fb8:	400204b8 	.word	0x400204b8
 8007fbc:	4002040f 	.word	0x4002040f
 8007fc0:	10008200 	.word	0x10008200
 8007fc4:	40020880 	.word	0x40020880

08007fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d04a      	beq.n	8008074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2b08      	cmp	r3, #8
 8007fe2:	d847      	bhi.n	8008074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a25      	ldr	r2, [pc, #148]	; (8008080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d022      	beq.n	8008034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a24      	ldr	r2, [pc, #144]	; (8008084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d01d      	beq.n	8008034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a22      	ldr	r2, [pc, #136]	; (8008088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d018      	beq.n	8008034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a21      	ldr	r2, [pc, #132]	; (800808c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d013      	beq.n	8008034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a1f      	ldr	r2, [pc, #124]	; (8008090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d00e      	beq.n	8008034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a1e      	ldr	r2, [pc, #120]	; (8008094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d009      	beq.n	8008034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a1c      	ldr	r2, [pc, #112]	; (8008098 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d004      	beq.n	8008034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a1b      	ldr	r2, [pc, #108]	; (800809c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d101      	bne.n	8008038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008034:	2301      	movs	r3, #1
 8008036:	e000      	b.n	800803a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008038:	2300      	movs	r3, #0
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00a      	beq.n	8008054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800803e:	68fa      	ldr	r2, [r7, #12]
 8008040:	4b17      	ldr	r3, [pc, #92]	; (80080a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008042:	4413      	add	r3, r2
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	461a      	mov	r2, r3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a15      	ldr	r2, [pc, #84]	; (80080a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008050:	671a      	str	r2, [r3, #112]	; 0x70
 8008052:	e009      	b.n	8008068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	4b14      	ldr	r3, [pc, #80]	; (80080a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008058:	4413      	add	r3, r2
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	461a      	mov	r2, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	4a11      	ldr	r2, [pc, #68]	; (80080ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008066:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	3b01      	subs	r3, #1
 800806c:	2201      	movs	r2, #1
 800806e:	409a      	lsls	r2, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008074:	bf00      	nop
 8008076:	3714      	adds	r7, #20
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr
 8008080:	58025408 	.word	0x58025408
 8008084:	5802541c 	.word	0x5802541c
 8008088:	58025430 	.word	0x58025430
 800808c:	58025444 	.word	0x58025444
 8008090:	58025458 	.word	0x58025458
 8008094:	5802546c 	.word	0x5802546c
 8008098:	58025480 	.word	0x58025480
 800809c:	58025494 	.word	0x58025494
 80080a0:	1600963f 	.word	0x1600963f
 80080a4:	58025940 	.word	0x58025940
 80080a8:	1000823f 	.word	0x1000823f
 80080ac:	40020940 	.word	0x40020940

080080b0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b098      	sub	sp, #96	; 0x60
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80080b8:	4a84      	ldr	r2, [pc, #528]	; (80082cc <HAL_FDCAN_Init+0x21c>)
 80080ba:	f107 030c 	add.w	r3, r7, #12
 80080be:	4611      	mov	r1, r2
 80080c0:	224c      	movs	r2, #76	; 0x4c
 80080c2:	4618      	mov	r0, r3
 80080c4:	f012 fef6 	bl	801aeb4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d101      	bne.n	80080d2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	e1c6      	b.n	8008460 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a7e      	ldr	r2, [pc, #504]	; (80082d0 <HAL_FDCAN_Init+0x220>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d106      	bne.n	80080ea <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80080e4:	461a      	mov	r2, r3
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d106      	bne.n	8008104 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f7fa fe06 	bl	8002d10 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	699a      	ldr	r2, [r3, #24]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f022 0210 	bic.w	r2, r2, #16
 8008112:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008114:	f7fb fde6 	bl	8003ce4 <HAL_GetTick>
 8008118:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800811a:	e014      	b.n	8008146 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800811c:	f7fb fde2 	bl	8003ce4 <HAL_GetTick>
 8008120:	4602      	mov	r2, r0
 8008122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008124:	1ad3      	subs	r3, r2, r3
 8008126:	2b0a      	cmp	r3, #10
 8008128:	d90d      	bls.n	8008146 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008130:	f043 0201 	orr.w	r2, r3, #1
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2203      	movs	r2, #3
 800813e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e18c      	b.n	8008460 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	699b      	ldr	r3, [r3, #24]
 800814c:	f003 0308 	and.w	r3, r3, #8
 8008150:	2b08      	cmp	r3, #8
 8008152:	d0e3      	beq.n	800811c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	699a      	ldr	r2, [r3, #24]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f042 0201 	orr.w	r2, r2, #1
 8008162:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008164:	f7fb fdbe 	bl	8003ce4 <HAL_GetTick>
 8008168:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800816a:	e014      	b.n	8008196 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800816c:	f7fb fdba 	bl	8003ce4 <HAL_GetTick>
 8008170:	4602      	mov	r2, r0
 8008172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008174:	1ad3      	subs	r3, r2, r3
 8008176:	2b0a      	cmp	r3, #10
 8008178:	d90d      	bls.n	8008196 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008180:	f043 0201 	orr.w	r2, r3, #1
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2203      	movs	r2, #3
 800818e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	e164      	b.n	8008460 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	699b      	ldr	r3, [r3, #24]
 800819c:	f003 0301 	and.w	r3, r3, #1
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d0e3      	beq.n	800816c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	699a      	ldr	r2, [r3, #24]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f042 0202 	orr.w	r2, r2, #2
 80081b2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	7c1b      	ldrb	r3, [r3, #16]
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d108      	bne.n	80081ce <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	699a      	ldr	r2, [r3, #24]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081ca:	619a      	str	r2, [r3, #24]
 80081cc:	e007      	b.n	80081de <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	699a      	ldr	r2, [r3, #24]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081dc:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	7c5b      	ldrb	r3, [r3, #17]
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d108      	bne.n	80081f8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	699a      	ldr	r2, [r3, #24]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80081f4:	619a      	str	r2, [r3, #24]
 80081f6:	e007      	b.n	8008208 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	699a      	ldr	r2, [r3, #24]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008206:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	7c9b      	ldrb	r3, [r3, #18]
 800820c:	2b01      	cmp	r3, #1
 800820e:	d108      	bne.n	8008222 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	699a      	ldr	r2, [r3, #24]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800821e:	619a      	str	r2, [r3, #24]
 8008220:	e007      	b.n	8008232 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	699a      	ldr	r2, [r3, #24]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008230:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	699b      	ldr	r3, [r3, #24]
 8008238:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	689a      	ldr	r2, [r3, #8]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	430a      	orrs	r2, r1
 8008246:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	699a      	ldr	r2, [r3, #24]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8008256:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	691a      	ldr	r2, [r3, #16]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f022 0210 	bic.w	r2, r2, #16
 8008266:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	2b01      	cmp	r3, #1
 800826e:	d108      	bne.n	8008282 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	699a      	ldr	r2, [r3, #24]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f042 0204 	orr.w	r2, r2, #4
 800827e:	619a      	str	r2, [r3, #24]
 8008280:	e030      	b.n	80082e4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d02c      	beq.n	80082e4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	2b02      	cmp	r3, #2
 8008290:	d020      	beq.n	80082d4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	699a      	ldr	r2, [r3, #24]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80082a0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	691a      	ldr	r2, [r3, #16]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f042 0210 	orr.w	r2, r2, #16
 80082b0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	2b03      	cmp	r3, #3
 80082b8:	d114      	bne.n	80082e4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	699a      	ldr	r2, [r3, #24]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f042 0220 	orr.w	r2, r2, #32
 80082c8:	619a      	str	r2, [r3, #24]
 80082ca:	e00b      	b.n	80082e4 <HAL_FDCAN_Init+0x234>
 80082cc:	0801c240 	.word	0x0801c240
 80082d0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	699a      	ldr	r2, [r3, #24]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f042 0220 	orr.w	r2, r2, #32
 80082e2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	699b      	ldr	r3, [r3, #24]
 80082e8:	3b01      	subs	r3, #1
 80082ea:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	69db      	ldr	r3, [r3, #28]
 80082f0:	3b01      	subs	r3, #1
 80082f2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80082f4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6a1b      	ldr	r3, [r3, #32]
 80082fa:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80082fc:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	695b      	ldr	r3, [r3, #20]
 8008304:	3b01      	subs	r3, #1
 8008306:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800830c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800830e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008318:	d115      	bne.n	8008346 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800831e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008324:	3b01      	subs	r3, #1
 8008326:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008328:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800832e:	3b01      	subs	r3, #1
 8008330:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8008332:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833a:	3b01      	subs	r3, #1
 800833c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8008342:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008344:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00a      	beq.n	8008364 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	430a      	orrs	r2, r1
 8008360:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800836c:	4413      	add	r3, r2
 800836e:	2b00      	cmp	r3, #0
 8008370:	d011      	beq.n	8008396 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800837a:	f023 0107 	bic.w	r1, r3, #7
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	3360      	adds	r3, #96	; 0x60
 8008386:	443b      	add	r3, r7
 8008388:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	430a      	orrs	r2, r1
 8008392:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800839a:	2b00      	cmp	r3, #0
 800839c:	d011      	beq.n	80083c2 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80083a6:	f023 0107 	bic.w	r1, r3, #7
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	3360      	adds	r3, #96	; 0x60
 80083b2:	443b      	add	r3, r7
 80083b4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	430a      	orrs	r2, r1
 80083be:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d012      	beq.n	80083f0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80083d2:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	3360      	adds	r3, #96	; 0x60
 80083de:	443b      	add	r3, r7
 80083e0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80083e4:	011a      	lsls	r2, r3, #4
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	430a      	orrs	r2, r1
 80083ec:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d012      	beq.n	800841e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008400:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	3360      	adds	r3, #96	; 0x60
 800840c:	443b      	add	r3, r7
 800840e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8008412:	021a      	lsls	r2, r3, #8
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	430a      	orrs	r2, r1
 800841a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a11      	ldr	r2, [pc, #68]	; (8008468 <HAL_FDCAN_Init+0x3b8>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d107      	bne.n	8008438 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	689a      	ldr	r2, [r3, #8]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	f022 0203 	bic.w	r2, r2, #3
 8008436:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 f80b 	bl	800846c <FDCAN_CalcultateRamBlockAddresses>
 8008456:	4603      	mov	r3, r0
 8008458:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 800845c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8008460:	4618      	mov	r0, r3
 8008462:	3760      	adds	r7, #96	; 0x60
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	4000a000 	.word	0x4000a000

0800846c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800846c:	b480      	push	{r7}
 800846e:	b085      	sub	sp, #20
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008478:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8008482:	4ba7      	ldr	r3, [pc, #668]	; (8008720 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008484:	4013      	ands	r3, r2
 8008486:	68ba      	ldr	r2, [r7, #8]
 8008488:	0091      	lsls	r1, r2, #2
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	6812      	ldr	r2, [r2, #0]
 800848e:	430b      	orrs	r3, r1
 8008490:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800849c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a4:	041a      	lsls	r2, r3, #16
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	430a      	orrs	r2, r1
 80084ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b4:	68ba      	ldr	r2, [r7, #8]
 80084b6:	4413      	add	r3, r2
 80084b8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80084c2:	4b97      	ldr	r3, [pc, #604]	; (8008720 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80084c4:	4013      	ands	r3, r2
 80084c6:	68ba      	ldr	r2, [r7, #8]
 80084c8:	0091      	lsls	r1, r2, #2
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	6812      	ldr	r2, [r2, #0]
 80084ce:	430b      	orrs	r3, r1
 80084d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084dc:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084e4:	041a      	lsls	r2, r3, #16
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	430a      	orrs	r2, r1
 80084ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084f4:	005b      	lsls	r3, r3, #1
 80084f6:	68ba      	ldr	r2, [r7, #8]
 80084f8:	4413      	add	r3, r2
 80084fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8008504:	4b86      	ldr	r3, [pc, #536]	; (8008720 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008506:	4013      	ands	r3, r2
 8008508:	68ba      	ldr	r2, [r7, #8]
 800850a:	0091      	lsls	r1, r2, #2
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	6812      	ldr	r2, [r2, #0]
 8008510:	430b      	orrs	r3, r1
 8008512:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800851e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008526:	041a      	lsls	r2, r3, #16
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	430a      	orrs	r2, r1
 800852e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800853a:	fb02 f303 	mul.w	r3, r2, r3
 800853e:	68ba      	ldr	r2, [r7, #8]
 8008540:	4413      	add	r3, r2
 8008542:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800854c:	4b74      	ldr	r3, [pc, #464]	; (8008720 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800854e:	4013      	ands	r3, r2
 8008550:	68ba      	ldr	r2, [r7, #8]
 8008552:	0091      	lsls	r1, r2, #2
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	6812      	ldr	r2, [r2, #0]
 8008558:	430b      	orrs	r3, r1
 800855a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008566:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800856e:	041a      	lsls	r2, r3, #16
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	430a      	orrs	r2, r1
 8008576:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008582:	fb02 f303 	mul.w	r3, r2, r3
 8008586:	68ba      	ldr	r2, [r7, #8]
 8008588:	4413      	add	r3, r2
 800858a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8008594:	4b62      	ldr	r3, [pc, #392]	; (8008720 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008596:	4013      	ands	r3, r2
 8008598:	68ba      	ldr	r2, [r7, #8]
 800859a:	0091      	lsls	r1, r2, #2
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	6812      	ldr	r2, [r2, #0]
 80085a0:	430b      	orrs	r3, r1
 80085a2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80085ae:	fb02 f303 	mul.w	r3, r2, r3
 80085b2:	68ba      	ldr	r2, [r7, #8]
 80085b4:	4413      	add	r3, r2
 80085b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80085c0:	4b57      	ldr	r3, [pc, #348]	; (8008720 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80085c2:	4013      	ands	r3, r2
 80085c4:	68ba      	ldr	r2, [r7, #8]
 80085c6:	0091      	lsls	r1, r2, #2
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	6812      	ldr	r2, [r2, #0]
 80085cc:	430b      	orrs	r3, r1
 80085ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80085da:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085e2:	041a      	lsls	r2, r3, #16
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	430a      	orrs	r2, r1
 80085ea:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085f2:	005b      	lsls	r3, r3, #1
 80085f4:	68ba      	ldr	r2, [r7, #8]
 80085f6:	4413      	add	r3, r2
 80085f8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8008602:	4b47      	ldr	r3, [pc, #284]	; (8008720 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008604:	4013      	ands	r3, r2
 8008606:	68ba      	ldr	r2, [r7, #8]
 8008608:	0091      	lsls	r1, r2, #2
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	6812      	ldr	r2, [r2, #0]
 800860e:	430b      	orrs	r3, r1
 8008610:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800861c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008624:	041a      	lsls	r2, r3, #16
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	430a      	orrs	r2, r1
 800862c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008638:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008640:	061a      	lsls	r2, r3, #24
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	430a      	orrs	r2, r1
 8008648:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008650:	4b34      	ldr	r3, [pc, #208]	; (8008724 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8008652:	4413      	add	r3, r2
 8008654:	009a      	lsls	r2, r3, #2
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	441a      	add	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008672:	00db      	lsls	r3, r3, #3
 8008674:	441a      	add	r2, r3
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008682:	6879      	ldr	r1, [r7, #4]
 8008684:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8008686:	fb01 f303 	mul.w	r3, r1, r3
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	441a      	add	r2, r3
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800869a:	6879      	ldr	r1, [r7, #4]
 800869c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800869e:	fb01 f303 	mul.w	r3, r1, r3
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	441a      	add	r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086b2:	6879      	ldr	r1, [r7, #4]
 80086b4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80086b6:	fb01 f303 	mul.w	r3, r1, r3
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	441a      	add	r2, r3
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086ce:	00db      	lsls	r3, r3, #3
 80086d0:	441a      	add	r2, r3
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086e2:	6879      	ldr	r1, [r7, #4]
 80086e4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80086e6:	fb01 f303 	mul.w	r3, r1, r3
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	441a      	add	r2, r3
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086fe:	6879      	ldr	r1, [r7, #4]
 8008700:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8008702:	fb01 f303 	mul.w	r3, r1, r3
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	441a      	add	r2, r3
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008716:	4a04      	ldr	r2, [pc, #16]	; (8008728 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d915      	bls.n	8008748 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800871c:	e006      	b.n	800872c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800871e:	bf00      	nop
 8008720:	ffff0003 	.word	0xffff0003
 8008724:	10002b00 	.word	0x10002b00
 8008728:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008732:	f043 0220 	orr.w	r2, r3, #32
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2203      	movs	r2, #3
 8008740:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8008744:	2301      	movs	r3, #1
 8008746:	e010      	b.n	800876a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800874c:	60fb      	str	r3, [r7, #12]
 800874e:	e005      	b.n	800875c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2200      	movs	r2, #0
 8008754:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	3304      	adds	r3, #4
 800875a:	60fb      	str	r3, [r7, #12]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008762:	68fa      	ldr	r2, [r7, #12]
 8008764:	429a      	cmp	r2, r3
 8008766:	d3f3      	bcc.n	8008750 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	3714      	adds	r7, #20
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr
 8008776:	bf00      	nop

08008778 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008778:	b480      	push	{r7}
 800877a:	b089      	sub	sp, #36	; 0x24
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008782:	2300      	movs	r3, #0
 8008784:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008786:	4b86      	ldr	r3, [pc, #536]	; (80089a0 <HAL_GPIO_Init+0x228>)
 8008788:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800878a:	e18c      	b.n	8008aa6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	2101      	movs	r1, #1
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	fa01 f303 	lsl.w	r3, r1, r3
 8008798:	4013      	ands	r3, r2
 800879a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	f000 817e 	beq.w	8008aa0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	f003 0303 	and.w	r3, r3, #3
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d005      	beq.n	80087bc <HAL_GPIO_Init+0x44>
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	f003 0303 	and.w	r3, r3, #3
 80087b8:	2b02      	cmp	r3, #2
 80087ba:	d130      	bne.n	800881e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80087c2:	69fb      	ldr	r3, [r7, #28]
 80087c4:	005b      	lsls	r3, r3, #1
 80087c6:	2203      	movs	r2, #3
 80087c8:	fa02 f303 	lsl.w	r3, r2, r3
 80087cc:	43db      	mvns	r3, r3
 80087ce:	69ba      	ldr	r2, [r7, #24]
 80087d0:	4013      	ands	r3, r2
 80087d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	68da      	ldr	r2, [r3, #12]
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	005b      	lsls	r3, r3, #1
 80087dc:	fa02 f303 	lsl.w	r3, r2, r3
 80087e0:	69ba      	ldr	r2, [r7, #24]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	69ba      	ldr	r2, [r7, #24]
 80087ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80087f2:	2201      	movs	r2, #1
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	fa02 f303 	lsl.w	r3, r2, r3
 80087fa:	43db      	mvns	r3, r3
 80087fc:	69ba      	ldr	r2, [r7, #24]
 80087fe:	4013      	ands	r3, r2
 8008800:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	091b      	lsrs	r3, r3, #4
 8008808:	f003 0201 	and.w	r2, r3, #1
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	fa02 f303 	lsl.w	r3, r2, r3
 8008812:	69ba      	ldr	r2, [r7, #24]
 8008814:	4313      	orrs	r3, r2
 8008816:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	69ba      	ldr	r2, [r7, #24]
 800881c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	f003 0303 	and.w	r3, r3, #3
 8008826:	2b03      	cmp	r3, #3
 8008828:	d017      	beq.n	800885a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	005b      	lsls	r3, r3, #1
 8008834:	2203      	movs	r2, #3
 8008836:	fa02 f303 	lsl.w	r3, r2, r3
 800883a:	43db      	mvns	r3, r3
 800883c:	69ba      	ldr	r2, [r7, #24]
 800883e:	4013      	ands	r3, r2
 8008840:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	689a      	ldr	r2, [r3, #8]
 8008846:	69fb      	ldr	r3, [r7, #28]
 8008848:	005b      	lsls	r3, r3, #1
 800884a:	fa02 f303 	lsl.w	r3, r2, r3
 800884e:	69ba      	ldr	r2, [r7, #24]
 8008850:	4313      	orrs	r3, r2
 8008852:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	69ba      	ldr	r2, [r7, #24]
 8008858:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	f003 0303 	and.w	r3, r3, #3
 8008862:	2b02      	cmp	r3, #2
 8008864:	d123      	bne.n	80088ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	08da      	lsrs	r2, r3, #3
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	3208      	adds	r2, #8
 800886e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008872:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	f003 0307 	and.w	r3, r3, #7
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	220f      	movs	r2, #15
 800887e:	fa02 f303 	lsl.w	r3, r2, r3
 8008882:	43db      	mvns	r3, r3
 8008884:	69ba      	ldr	r2, [r7, #24]
 8008886:	4013      	ands	r3, r2
 8008888:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	691a      	ldr	r2, [r3, #16]
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	f003 0307 	and.w	r3, r3, #7
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	fa02 f303 	lsl.w	r3, r2, r3
 800889a:	69ba      	ldr	r2, [r7, #24]
 800889c:	4313      	orrs	r3, r2
 800889e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	08da      	lsrs	r2, r3, #3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	3208      	adds	r2, #8
 80088a8:	69b9      	ldr	r1, [r7, #24]
 80088aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	005b      	lsls	r3, r3, #1
 80088b8:	2203      	movs	r2, #3
 80088ba:	fa02 f303 	lsl.w	r3, r2, r3
 80088be:	43db      	mvns	r3, r3
 80088c0:	69ba      	ldr	r2, [r7, #24]
 80088c2:	4013      	ands	r3, r2
 80088c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	f003 0203 	and.w	r2, r3, #3
 80088ce:	69fb      	ldr	r3, [r7, #28]
 80088d0:	005b      	lsls	r3, r3, #1
 80088d2:	fa02 f303 	lsl.w	r3, r2, r3
 80088d6:	69ba      	ldr	r2, [r7, #24]
 80088d8:	4313      	orrs	r3, r2
 80088da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	69ba      	ldr	r2, [r7, #24]
 80088e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	f000 80d8 	beq.w	8008aa0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80088f0:	4b2c      	ldr	r3, [pc, #176]	; (80089a4 <HAL_GPIO_Init+0x22c>)
 80088f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80088f6:	4a2b      	ldr	r2, [pc, #172]	; (80089a4 <HAL_GPIO_Init+0x22c>)
 80088f8:	f043 0302 	orr.w	r3, r3, #2
 80088fc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008900:	4b28      	ldr	r3, [pc, #160]	; (80089a4 <HAL_GPIO_Init+0x22c>)
 8008902:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008906:	f003 0302 	and.w	r3, r3, #2
 800890a:	60fb      	str	r3, [r7, #12]
 800890c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800890e:	4a26      	ldr	r2, [pc, #152]	; (80089a8 <HAL_GPIO_Init+0x230>)
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	089b      	lsrs	r3, r3, #2
 8008914:	3302      	adds	r3, #2
 8008916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800891a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	f003 0303 	and.w	r3, r3, #3
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	220f      	movs	r2, #15
 8008926:	fa02 f303 	lsl.w	r3, r2, r3
 800892a:	43db      	mvns	r3, r3
 800892c:	69ba      	ldr	r2, [r7, #24]
 800892e:	4013      	ands	r3, r2
 8008930:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4a1d      	ldr	r2, [pc, #116]	; (80089ac <HAL_GPIO_Init+0x234>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d04a      	beq.n	80089d0 <HAL_GPIO_Init+0x258>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	4a1c      	ldr	r2, [pc, #112]	; (80089b0 <HAL_GPIO_Init+0x238>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d02b      	beq.n	800899a <HAL_GPIO_Init+0x222>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	4a1b      	ldr	r2, [pc, #108]	; (80089b4 <HAL_GPIO_Init+0x23c>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d025      	beq.n	8008996 <HAL_GPIO_Init+0x21e>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4a1a      	ldr	r2, [pc, #104]	; (80089b8 <HAL_GPIO_Init+0x240>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d01f      	beq.n	8008992 <HAL_GPIO_Init+0x21a>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4a19      	ldr	r2, [pc, #100]	; (80089bc <HAL_GPIO_Init+0x244>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d019      	beq.n	800898e <HAL_GPIO_Init+0x216>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	4a18      	ldr	r2, [pc, #96]	; (80089c0 <HAL_GPIO_Init+0x248>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d013      	beq.n	800898a <HAL_GPIO_Init+0x212>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	4a17      	ldr	r2, [pc, #92]	; (80089c4 <HAL_GPIO_Init+0x24c>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d00d      	beq.n	8008986 <HAL_GPIO_Init+0x20e>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4a16      	ldr	r2, [pc, #88]	; (80089c8 <HAL_GPIO_Init+0x250>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d007      	beq.n	8008982 <HAL_GPIO_Init+0x20a>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	4a15      	ldr	r2, [pc, #84]	; (80089cc <HAL_GPIO_Init+0x254>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d101      	bne.n	800897e <HAL_GPIO_Init+0x206>
 800897a:	2309      	movs	r3, #9
 800897c:	e029      	b.n	80089d2 <HAL_GPIO_Init+0x25a>
 800897e:	230a      	movs	r3, #10
 8008980:	e027      	b.n	80089d2 <HAL_GPIO_Init+0x25a>
 8008982:	2307      	movs	r3, #7
 8008984:	e025      	b.n	80089d2 <HAL_GPIO_Init+0x25a>
 8008986:	2306      	movs	r3, #6
 8008988:	e023      	b.n	80089d2 <HAL_GPIO_Init+0x25a>
 800898a:	2305      	movs	r3, #5
 800898c:	e021      	b.n	80089d2 <HAL_GPIO_Init+0x25a>
 800898e:	2304      	movs	r3, #4
 8008990:	e01f      	b.n	80089d2 <HAL_GPIO_Init+0x25a>
 8008992:	2303      	movs	r3, #3
 8008994:	e01d      	b.n	80089d2 <HAL_GPIO_Init+0x25a>
 8008996:	2302      	movs	r3, #2
 8008998:	e01b      	b.n	80089d2 <HAL_GPIO_Init+0x25a>
 800899a:	2301      	movs	r3, #1
 800899c:	e019      	b.n	80089d2 <HAL_GPIO_Init+0x25a>
 800899e:	bf00      	nop
 80089a0:	58000080 	.word	0x58000080
 80089a4:	58024400 	.word	0x58024400
 80089a8:	58000400 	.word	0x58000400
 80089ac:	58020000 	.word	0x58020000
 80089b0:	58020400 	.word	0x58020400
 80089b4:	58020800 	.word	0x58020800
 80089b8:	58020c00 	.word	0x58020c00
 80089bc:	58021000 	.word	0x58021000
 80089c0:	58021400 	.word	0x58021400
 80089c4:	58021800 	.word	0x58021800
 80089c8:	58021c00 	.word	0x58021c00
 80089cc:	58022400 	.word	0x58022400
 80089d0:	2300      	movs	r3, #0
 80089d2:	69fa      	ldr	r2, [r7, #28]
 80089d4:	f002 0203 	and.w	r2, r2, #3
 80089d8:	0092      	lsls	r2, r2, #2
 80089da:	4093      	lsls	r3, r2
 80089dc:	69ba      	ldr	r2, [r7, #24]
 80089de:	4313      	orrs	r3, r2
 80089e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80089e2:	4938      	ldr	r1, [pc, #224]	; (8008ac4 <HAL_GPIO_Init+0x34c>)
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	089b      	lsrs	r3, r3, #2
 80089e8:	3302      	adds	r3, #2
 80089ea:	69ba      	ldr	r2, [r7, #24]
 80089ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80089f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	43db      	mvns	r3, r3
 80089fc:	69ba      	ldr	r2, [r7, #24]
 80089fe:	4013      	ands	r3, r2
 8008a00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d003      	beq.n	8008a16 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008a0e:	69ba      	ldr	r2, [r7, #24]
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	4313      	orrs	r3, r2
 8008a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008a16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	43db      	mvns	r3, r3
 8008a2a:	69ba      	ldr	r2, [r7, #24]
 8008a2c:	4013      	ands	r3, r2
 8008a2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d003      	beq.n	8008a44 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008a3c:	69ba      	ldr	r2, [r7, #24]
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	4313      	orrs	r3, r2
 8008a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008a44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008a48:	69bb      	ldr	r3, [r7, #24]
 8008a4a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	43db      	mvns	r3, r3
 8008a56:	69ba      	ldr	r2, [r7, #24]
 8008a58:	4013      	ands	r3, r2
 8008a5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d003      	beq.n	8008a70 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008a68:	69ba      	ldr	r2, [r7, #24]
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	69ba      	ldr	r2, [r7, #24]
 8008a74:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	43db      	mvns	r3, r3
 8008a80:	69ba      	ldr	r2, [r7, #24]
 8008a82:	4013      	ands	r3, r2
 8008a84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d003      	beq.n	8008a9a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008a92:	69ba      	ldr	r2, [r7, #24]
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	69ba      	ldr	r2, [r7, #24]
 8008a9e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	fa22 f303 	lsr.w	r3, r2, r3
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	f47f ae6b 	bne.w	800878c <HAL_GPIO_Init+0x14>
  }
}
 8008ab6:	bf00      	nop
 8008ab8:	bf00      	nop
 8008aba:	3724      	adds	r7, #36	; 0x24
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr
 8008ac4:	58000400 	.word	0x58000400

08008ac8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b085      	sub	sp, #20
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	691a      	ldr	r2, [r3, #16]
 8008ad8:	887b      	ldrh	r3, [r7, #2]
 8008ada:	4013      	ands	r3, r2
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d002      	beq.n	8008ae6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	73fb      	strb	r3, [r7, #15]
 8008ae4:	e001      	b.n	8008aea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3714      	adds	r7, #20
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	460b      	mov	r3, r1
 8008b02:	807b      	strh	r3, [r7, #2]
 8008b04:	4613      	mov	r3, r2
 8008b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008b08:	787b      	ldrb	r3, [r7, #1]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d003      	beq.n	8008b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008b0e:	887a      	ldrh	r2, [r7, #2]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008b14:	e003      	b.n	8008b1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008b16:	887b      	ldrh	r3, [r7, #2]
 8008b18:	041a      	lsls	r2, r3, #16
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	619a      	str	r2, [r3, #24]
}
 8008b1e:	bf00      	nop
 8008b20:	370c      	adds	r7, #12
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr
	...

08008b2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d101      	bne.n	8008b3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e07f      	b.n	8008c3e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d106      	bne.n	8008b58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f7fa f944 	bl	8002de0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2224      	movs	r2, #36	; 0x24
 8008b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f022 0201 	bic.w	r2, r2, #1
 8008b6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	685a      	ldr	r2, [r3, #4]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008b7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	689a      	ldr	r2, [r3, #8]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008b8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d107      	bne.n	8008ba6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	689a      	ldr	r2, [r3, #8]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ba2:	609a      	str	r2, [r3, #8]
 8008ba4:	e006      	b.n	8008bb4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	689a      	ldr	r2, [r3, #8]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008bb2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	2b02      	cmp	r3, #2
 8008bba:	d104      	bne.n	8008bc6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008bc4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	6859      	ldr	r1, [r3, #4]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	4b1d      	ldr	r3, [pc, #116]	; (8008c48 <HAL_I2C_Init+0x11c>)
 8008bd2:	430b      	orrs	r3, r1
 8008bd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	68da      	ldr	r2, [r3, #12]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008be4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	691a      	ldr	r2, [r3, #16]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	695b      	ldr	r3, [r3, #20]
 8008bee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	699b      	ldr	r3, [r3, #24]
 8008bf6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	430a      	orrs	r2, r1
 8008bfe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	69d9      	ldr	r1, [r3, #28]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6a1a      	ldr	r2, [r3, #32]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	430a      	orrs	r2, r1
 8008c0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f042 0201 	orr.w	r2, r2, #1
 8008c1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2220      	movs	r2, #32
 8008c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2200      	movs	r2, #0
 8008c32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3708      	adds	r7, #8
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	02008000 	.word	0x02008000

08008c4c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	699b      	ldr	r3, [r3, #24]
 8008c5a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d005      	beq.n	8008c78 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c70:	68ba      	ldr	r2, [r7, #8]
 8008c72:	68f9      	ldr	r1, [r7, #12]
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	4798      	blx	r3
  }
}
 8008c78:	bf00      	nop
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	2b20      	cmp	r3, #32
 8008c94:	d138      	bne.n	8008d08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d101      	bne.n	8008ca4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008ca0:	2302      	movs	r3, #2
 8008ca2:	e032      	b.n	8008d0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2224      	movs	r2, #36	; 0x24
 8008cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f022 0201 	bic.w	r2, r2, #1
 8008cc2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008cd2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	6819      	ldr	r1, [r3, #0]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	683a      	ldr	r2, [r7, #0]
 8008ce0:	430a      	orrs	r2, r1
 8008ce2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f042 0201 	orr.w	r2, r2, #1
 8008cf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2220      	movs	r2, #32
 8008cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008d04:	2300      	movs	r3, #0
 8008d06:	e000      	b.n	8008d0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008d08:	2302      	movs	r3, #2
  }
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	370c      	adds	r7, #12
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr

08008d16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008d16:	b480      	push	{r7}
 8008d18:	b085      	sub	sp, #20
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
 8008d1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	2b20      	cmp	r3, #32
 8008d2a:	d139      	bne.n	8008da0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d101      	bne.n	8008d3a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008d36:	2302      	movs	r3, #2
 8008d38:	e033      	b.n	8008da2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2224      	movs	r2, #36	; 0x24
 8008d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f022 0201 	bic.w	r2, r2, #1
 8008d58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008d68:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	021b      	lsls	r3, r3, #8
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	4313      	orrs	r3, r2
 8008d72:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f042 0201 	orr.w	r2, r2, #1
 8008d8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2220      	movs	r2, #32
 8008d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	e000      	b.n	8008da2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008da0:	2302      	movs	r3, #2
  }
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3714      	adds	r7, #20
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr

08008dae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008dae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008db0:	b08f      	sub	sp, #60	; 0x3c
 8008db2:	af0a      	add	r7, sp, #40	; 0x28
 8008db4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d101      	bne.n	8008dc0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	e116      	b.n	8008fee <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d106      	bne.n	8008de0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f011 fcd4 	bl	801a788 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2203      	movs	r2, #3
 8008de4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d102      	bne.n	8008dfa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f00a fea5 	bl	8013b4e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	603b      	str	r3, [r7, #0]
 8008e0a:	687e      	ldr	r6, [r7, #4]
 8008e0c:	466d      	mov	r5, sp
 8008e0e:	f106 0410 	add.w	r4, r6, #16
 8008e12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008e14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008e16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008e18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008e1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008e1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8008e22:	1d33      	adds	r3, r6, #4
 8008e24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e26:	6838      	ldr	r0, [r7, #0]
 8008e28:	f00a fd70 	bl	801390c <USB_CoreInit>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d005      	beq.n	8008e3e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2202      	movs	r2, #2
 8008e36:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e0d7      	b.n	8008fee <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	2100      	movs	r1, #0
 8008e44:	4618      	mov	r0, r3
 8008e46:	f00a fe93 	bl	8013b70 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	73fb      	strb	r3, [r7, #15]
 8008e4e:	e04a      	b.n	8008ee6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008e50:	7bfa      	ldrb	r2, [r7, #15]
 8008e52:	6879      	ldr	r1, [r7, #4]
 8008e54:	4613      	mov	r3, r2
 8008e56:	00db      	lsls	r3, r3, #3
 8008e58:	4413      	add	r3, r2
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	440b      	add	r3, r1
 8008e5e:	333d      	adds	r3, #61	; 0x3d
 8008e60:	2201      	movs	r2, #1
 8008e62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008e64:	7bfa      	ldrb	r2, [r7, #15]
 8008e66:	6879      	ldr	r1, [r7, #4]
 8008e68:	4613      	mov	r3, r2
 8008e6a:	00db      	lsls	r3, r3, #3
 8008e6c:	4413      	add	r3, r2
 8008e6e:	009b      	lsls	r3, r3, #2
 8008e70:	440b      	add	r3, r1
 8008e72:	333c      	adds	r3, #60	; 0x3c
 8008e74:	7bfa      	ldrb	r2, [r7, #15]
 8008e76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008e78:	7bfa      	ldrb	r2, [r7, #15]
 8008e7a:	7bfb      	ldrb	r3, [r7, #15]
 8008e7c:	b298      	uxth	r0, r3
 8008e7e:	6879      	ldr	r1, [r7, #4]
 8008e80:	4613      	mov	r3, r2
 8008e82:	00db      	lsls	r3, r3, #3
 8008e84:	4413      	add	r3, r2
 8008e86:	009b      	lsls	r3, r3, #2
 8008e88:	440b      	add	r3, r1
 8008e8a:	3356      	adds	r3, #86	; 0x56
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008e90:	7bfa      	ldrb	r2, [r7, #15]
 8008e92:	6879      	ldr	r1, [r7, #4]
 8008e94:	4613      	mov	r3, r2
 8008e96:	00db      	lsls	r3, r3, #3
 8008e98:	4413      	add	r3, r2
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	440b      	add	r3, r1
 8008e9e:	3340      	adds	r3, #64	; 0x40
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008ea4:	7bfa      	ldrb	r2, [r7, #15]
 8008ea6:	6879      	ldr	r1, [r7, #4]
 8008ea8:	4613      	mov	r3, r2
 8008eaa:	00db      	lsls	r3, r3, #3
 8008eac:	4413      	add	r3, r2
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	440b      	add	r3, r1
 8008eb2:	3344      	adds	r3, #68	; 0x44
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008eb8:	7bfa      	ldrb	r2, [r7, #15]
 8008eba:	6879      	ldr	r1, [r7, #4]
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	00db      	lsls	r3, r3, #3
 8008ec0:	4413      	add	r3, r2
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	440b      	add	r3, r1
 8008ec6:	3348      	adds	r3, #72	; 0x48
 8008ec8:	2200      	movs	r2, #0
 8008eca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008ecc:	7bfa      	ldrb	r2, [r7, #15]
 8008ece:	6879      	ldr	r1, [r7, #4]
 8008ed0:	4613      	mov	r3, r2
 8008ed2:	00db      	lsls	r3, r3, #3
 8008ed4:	4413      	add	r3, r2
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	440b      	add	r3, r1
 8008eda:	334c      	adds	r3, #76	; 0x4c
 8008edc:	2200      	movs	r2, #0
 8008ede:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008ee0:	7bfb      	ldrb	r3, [r7, #15]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	73fb      	strb	r3, [r7, #15]
 8008ee6:	7bfa      	ldrb	r2, [r7, #15]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d3af      	bcc.n	8008e50 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	73fb      	strb	r3, [r7, #15]
 8008ef4:	e044      	b.n	8008f80 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008ef6:	7bfa      	ldrb	r2, [r7, #15]
 8008ef8:	6879      	ldr	r1, [r7, #4]
 8008efa:	4613      	mov	r3, r2
 8008efc:	00db      	lsls	r3, r3, #3
 8008efe:	4413      	add	r3, r2
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	440b      	add	r3, r1
 8008f04:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008f08:	2200      	movs	r2, #0
 8008f0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008f0c:	7bfa      	ldrb	r2, [r7, #15]
 8008f0e:	6879      	ldr	r1, [r7, #4]
 8008f10:	4613      	mov	r3, r2
 8008f12:	00db      	lsls	r3, r3, #3
 8008f14:	4413      	add	r3, r2
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	440b      	add	r3, r1
 8008f1a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8008f1e:	7bfa      	ldrb	r2, [r7, #15]
 8008f20:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008f22:	7bfa      	ldrb	r2, [r7, #15]
 8008f24:	6879      	ldr	r1, [r7, #4]
 8008f26:	4613      	mov	r3, r2
 8008f28:	00db      	lsls	r3, r3, #3
 8008f2a:	4413      	add	r3, r2
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	440b      	add	r3, r1
 8008f30:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008f34:	2200      	movs	r2, #0
 8008f36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008f38:	7bfa      	ldrb	r2, [r7, #15]
 8008f3a:	6879      	ldr	r1, [r7, #4]
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	00db      	lsls	r3, r3, #3
 8008f40:	4413      	add	r3, r2
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	440b      	add	r3, r1
 8008f46:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008f4e:	7bfa      	ldrb	r2, [r7, #15]
 8008f50:	6879      	ldr	r1, [r7, #4]
 8008f52:	4613      	mov	r3, r2
 8008f54:	00db      	lsls	r3, r3, #3
 8008f56:	4413      	add	r3, r2
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	440b      	add	r3, r1
 8008f5c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008f60:	2200      	movs	r2, #0
 8008f62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008f64:	7bfa      	ldrb	r2, [r7, #15]
 8008f66:	6879      	ldr	r1, [r7, #4]
 8008f68:	4613      	mov	r3, r2
 8008f6a:	00db      	lsls	r3, r3, #3
 8008f6c:	4413      	add	r3, r2
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	440b      	add	r3, r1
 8008f72:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008f76:	2200      	movs	r2, #0
 8008f78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008f7a:	7bfb      	ldrb	r3, [r7, #15]
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	73fb      	strb	r3, [r7, #15]
 8008f80:	7bfa      	ldrb	r2, [r7, #15]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d3b5      	bcc.n	8008ef6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	603b      	str	r3, [r7, #0]
 8008f90:	687e      	ldr	r6, [r7, #4]
 8008f92:	466d      	mov	r5, sp
 8008f94:	f106 0410 	add.w	r4, r6, #16
 8008f98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008f9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008f9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008f9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008fa0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008fa4:	e885 0003 	stmia.w	r5, {r0, r1}
 8008fa8:	1d33      	adds	r3, r6, #4
 8008faa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008fac:	6838      	ldr	r0, [r7, #0]
 8008fae:	f00a fe2b 	bl	8013c08 <USB_DevInit>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d005      	beq.n	8008fc4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2202      	movs	r2, #2
 8008fbc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e014      	b.n	8008fee <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d102      	bne.n	8008fe2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f001 f96f 	bl	800a2c0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f00b fe6d 	bl	8014cc6 <USB_DevDisconnect>

  return HAL_OK;
 8008fec:	2300      	movs	r3, #0
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3714      	adds	r7, #20
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008ff6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b084      	sub	sp, #16
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800900a:	2b01      	cmp	r3, #1
 800900c:	d101      	bne.n	8009012 <HAL_PCD_Start+0x1c>
 800900e:	2302      	movs	r3, #2
 8009010:	e022      	b.n	8009058 <HAL_PCD_Start+0x62>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2201      	movs	r2, #1
 8009016:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800901e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009022:	2b00      	cmp	r3, #0
 8009024:	d109      	bne.n	800903a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800902a:	2b01      	cmp	r3, #1
 800902c:	d105      	bne.n	800903a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009032:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4618      	mov	r0, r3
 8009040:	f00a fd74 	bl	8013b2c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4618      	mov	r0, r3
 800904a:	f00b fe1b 	bl	8014c84 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2200      	movs	r2, #0
 8009052:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3710      	adds	r7, #16
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009060:	b590      	push	{r4, r7, lr}
 8009062:	b08d      	sub	sp, #52	; 0x34
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800906e:	6a3b      	ldr	r3, [r7, #32]
 8009070:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4618      	mov	r0, r3
 8009078:	f00b fed9 	bl	8014e2e <USB_GetMode>
 800907c:	4603      	mov	r3, r0
 800907e:	2b00      	cmp	r3, #0
 8009080:	f040 84b7 	bne.w	80099f2 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4618      	mov	r0, r3
 800908a:	f00b fe3d 	bl	8014d08 <USB_ReadInterrupts>
 800908e:	4603      	mov	r3, r0
 8009090:	2b00      	cmp	r3, #0
 8009092:	f000 84ad 	beq.w	80099f0 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	0a1b      	lsrs	r3, r3, #8
 80090a0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4618      	mov	r0, r3
 80090b0:	f00b fe2a 	bl	8014d08 <USB_ReadInterrupts>
 80090b4:	4603      	mov	r3, r0
 80090b6:	f003 0302 	and.w	r3, r3, #2
 80090ba:	2b02      	cmp	r3, #2
 80090bc:	d107      	bne.n	80090ce <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	695a      	ldr	r2, [r3, #20]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f002 0202 	and.w	r2, r2, #2
 80090cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4618      	mov	r0, r3
 80090d4:	f00b fe18 	bl	8014d08 <USB_ReadInterrupts>
 80090d8:	4603      	mov	r3, r0
 80090da:	f003 0310 	and.w	r3, r3, #16
 80090de:	2b10      	cmp	r3, #16
 80090e0:	d161      	bne.n	80091a6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	699a      	ldr	r2, [r3, #24]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f022 0210 	bic.w	r2, r2, #16
 80090f0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80090f2:	6a3b      	ldr	r3, [r7, #32]
 80090f4:	6a1b      	ldr	r3, [r3, #32]
 80090f6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80090f8:	69bb      	ldr	r3, [r7, #24]
 80090fa:	f003 020f 	and.w	r2, r3, #15
 80090fe:	4613      	mov	r3, r2
 8009100:	00db      	lsls	r3, r3, #3
 8009102:	4413      	add	r3, r2
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	4413      	add	r3, r2
 800910e:	3304      	adds	r3, #4
 8009110:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009112:	69bb      	ldr	r3, [r7, #24]
 8009114:	0c5b      	lsrs	r3, r3, #17
 8009116:	f003 030f 	and.w	r3, r3, #15
 800911a:	2b02      	cmp	r3, #2
 800911c:	d124      	bne.n	8009168 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800911e:	69ba      	ldr	r2, [r7, #24]
 8009120:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009124:	4013      	ands	r3, r2
 8009126:	2b00      	cmp	r3, #0
 8009128:	d035      	beq.n	8009196 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800912e:	69bb      	ldr	r3, [r7, #24]
 8009130:	091b      	lsrs	r3, r3, #4
 8009132:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009134:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009138:	b29b      	uxth	r3, r3
 800913a:	461a      	mov	r2, r3
 800913c:	6a38      	ldr	r0, [r7, #32]
 800913e:	f00b fc4f 	bl	80149e0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	68da      	ldr	r2, [r3, #12]
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	091b      	lsrs	r3, r3, #4
 800914a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800914e:	441a      	add	r2, r3
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	695a      	ldr	r2, [r3, #20]
 8009158:	69bb      	ldr	r3, [r7, #24]
 800915a:	091b      	lsrs	r3, r3, #4
 800915c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009160:	441a      	add	r2, r3
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	615a      	str	r2, [r3, #20]
 8009166:	e016      	b.n	8009196 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8009168:	69bb      	ldr	r3, [r7, #24]
 800916a:	0c5b      	lsrs	r3, r3, #17
 800916c:	f003 030f 	and.w	r3, r3, #15
 8009170:	2b06      	cmp	r3, #6
 8009172:	d110      	bne.n	8009196 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800917a:	2208      	movs	r2, #8
 800917c:	4619      	mov	r1, r3
 800917e:	6a38      	ldr	r0, [r7, #32]
 8009180:	f00b fc2e 	bl	80149e0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	695a      	ldr	r2, [r3, #20]
 8009188:	69bb      	ldr	r3, [r7, #24]
 800918a:	091b      	lsrs	r3, r3, #4
 800918c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009190:	441a      	add	r2, r3
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	699a      	ldr	r2, [r3, #24]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f042 0210 	orr.w	r2, r2, #16
 80091a4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4618      	mov	r0, r3
 80091ac:	f00b fdac 	bl	8014d08 <USB_ReadInterrupts>
 80091b0:	4603      	mov	r3, r0
 80091b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80091b6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80091ba:	f040 80a7 	bne.w	800930c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80091be:	2300      	movs	r3, #0
 80091c0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4618      	mov	r0, r3
 80091c8:	f00b fdb1 	bl	8014d2e <USB_ReadDevAllOutEpInterrupt>
 80091cc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80091ce:	e099      	b.n	8009304 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80091d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d2:	f003 0301 	and.w	r3, r3, #1
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	f000 808e 	beq.w	80092f8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091e2:	b2d2      	uxtb	r2, r2
 80091e4:	4611      	mov	r1, r2
 80091e6:	4618      	mov	r0, r3
 80091e8:	f00b fdd5 	bl	8014d96 <USB_ReadDevOutEPInterrupt>
 80091ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	f003 0301 	and.w	r3, r3, #1
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d00c      	beq.n	8009212 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80091f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fa:	015a      	lsls	r2, r3, #5
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	4413      	add	r3, r2
 8009200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009204:	461a      	mov	r2, r3
 8009206:	2301      	movs	r3, #1
 8009208:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800920a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 fed1 	bl	8009fb4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	f003 0308 	and.w	r3, r3, #8
 8009218:	2b00      	cmp	r3, #0
 800921a:	d00c      	beq.n	8009236 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800921c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921e:	015a      	lsls	r2, r3, #5
 8009220:	69fb      	ldr	r3, [r7, #28]
 8009222:	4413      	add	r3, r2
 8009224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009228:	461a      	mov	r2, r3
 800922a:	2308      	movs	r3, #8
 800922c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800922e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 ffa7 	bl	800a184 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	f003 0310 	and.w	r3, r3, #16
 800923c:	2b00      	cmp	r3, #0
 800923e:	d008      	beq.n	8009252 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009242:	015a      	lsls	r2, r3, #5
 8009244:	69fb      	ldr	r3, [r7, #28]
 8009246:	4413      	add	r3, r2
 8009248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800924c:	461a      	mov	r2, r3
 800924e:	2310      	movs	r3, #16
 8009250:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	f003 0302 	and.w	r3, r3, #2
 8009258:	2b00      	cmp	r3, #0
 800925a:	d030      	beq.n	80092be <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800925c:	6a3b      	ldr	r3, [r7, #32]
 800925e:	695b      	ldr	r3, [r3, #20]
 8009260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009264:	2b80      	cmp	r3, #128	; 0x80
 8009266:	d109      	bne.n	800927c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8009268:	69fb      	ldr	r3, [r7, #28]
 800926a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	69fa      	ldr	r2, [r7, #28]
 8009272:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009276:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800927a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800927c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800927e:	4613      	mov	r3, r2
 8009280:	00db      	lsls	r3, r3, #3
 8009282:	4413      	add	r3, r2
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	4413      	add	r3, r2
 800928e:	3304      	adds	r3, #4
 8009290:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	78db      	ldrb	r3, [r3, #3]
 8009296:	2b01      	cmp	r3, #1
 8009298:	d108      	bne.n	80092ac <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	2200      	movs	r2, #0
 800929e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80092a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	4619      	mov	r1, r3
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f011 fb66 	bl	801a978 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80092ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ae:	015a      	lsls	r2, r3, #5
 80092b0:	69fb      	ldr	r3, [r7, #28]
 80092b2:	4413      	add	r3, r2
 80092b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092b8:	461a      	mov	r2, r3
 80092ba:	2302      	movs	r3, #2
 80092bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	f003 0320 	and.w	r3, r3, #32
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d008      	beq.n	80092da <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80092c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ca:	015a      	lsls	r2, r3, #5
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	4413      	add	r3, r2
 80092d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092d4:	461a      	mov	r2, r3
 80092d6:	2320      	movs	r3, #32
 80092d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d009      	beq.n	80092f8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80092e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e6:	015a      	lsls	r2, r3, #5
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	4413      	add	r3, r2
 80092ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092f0:	461a      	mov	r2, r3
 80092f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80092f6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80092f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fa:	3301      	adds	r3, #1
 80092fc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80092fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009300:	085b      	lsrs	r3, r3, #1
 8009302:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009306:	2b00      	cmp	r3, #0
 8009308:	f47f af62 	bne.w	80091d0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4618      	mov	r0, r3
 8009312:	f00b fcf9 	bl	8014d08 <USB_ReadInterrupts>
 8009316:	4603      	mov	r3, r0
 8009318:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800931c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009320:	f040 80db 	bne.w	80094da <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4618      	mov	r0, r3
 800932a:	f00b fd1a 	bl	8014d62 <USB_ReadDevAllInEpInterrupt>
 800932e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009330:	2300      	movs	r3, #0
 8009332:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009334:	e0cd      	b.n	80094d2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009338:	f003 0301 	and.w	r3, r3, #1
 800933c:	2b00      	cmp	r3, #0
 800933e:	f000 80c2 	beq.w	80094c6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009348:	b2d2      	uxtb	r2, r2
 800934a:	4611      	mov	r1, r2
 800934c:	4618      	mov	r0, r3
 800934e:	f00b fd40 	bl	8014dd2 <USB_ReadDevInEPInterrupt>
 8009352:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	f003 0301 	and.w	r3, r3, #1
 800935a:	2b00      	cmp	r3, #0
 800935c:	d057      	beq.n	800940e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800935e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009360:	f003 030f 	and.w	r3, r3, #15
 8009364:	2201      	movs	r2, #1
 8009366:	fa02 f303 	lsl.w	r3, r2, r3
 800936a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800936c:	69fb      	ldr	r3, [r7, #28]
 800936e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009372:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	43db      	mvns	r3, r3
 8009378:	69f9      	ldr	r1, [r7, #28]
 800937a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800937e:	4013      	ands	r3, r2
 8009380:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009384:	015a      	lsls	r2, r3, #5
 8009386:	69fb      	ldr	r3, [r7, #28]
 8009388:	4413      	add	r3, r2
 800938a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800938e:	461a      	mov	r2, r3
 8009390:	2301      	movs	r3, #1
 8009392:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	2b01      	cmp	r3, #1
 800939a:	d132      	bne.n	8009402 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800939c:	6879      	ldr	r1, [r7, #4]
 800939e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093a0:	4613      	mov	r3, r2
 80093a2:	00db      	lsls	r3, r3, #3
 80093a4:	4413      	add	r3, r2
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	440b      	add	r3, r1
 80093aa:	3348      	adds	r3, #72	; 0x48
 80093ac:	6819      	ldr	r1, [r3, #0]
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093b2:	4613      	mov	r3, r2
 80093b4:	00db      	lsls	r3, r3, #3
 80093b6:	4413      	add	r3, r2
 80093b8:	009b      	lsls	r3, r3, #2
 80093ba:	4403      	add	r3, r0
 80093bc:	3344      	adds	r3, #68	; 0x44
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4419      	add	r1, r3
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093c6:	4613      	mov	r3, r2
 80093c8:	00db      	lsls	r3, r3, #3
 80093ca:	4413      	add	r3, r2
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	4403      	add	r3, r0
 80093d0:	3348      	adds	r3, #72	; 0x48
 80093d2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80093d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d113      	bne.n	8009402 <HAL_PCD_IRQHandler+0x3a2>
 80093da:	6879      	ldr	r1, [r7, #4]
 80093dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093de:	4613      	mov	r3, r2
 80093e0:	00db      	lsls	r3, r3, #3
 80093e2:	4413      	add	r3, r2
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	440b      	add	r3, r1
 80093e8:	334c      	adds	r3, #76	; 0x4c
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d108      	bne.n	8009402 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6818      	ldr	r0, [r3, #0]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80093fa:	461a      	mov	r2, r3
 80093fc:	2101      	movs	r1, #1
 80093fe:	f00b fd49 	bl	8014e94 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009404:	b2db      	uxtb	r3, r3
 8009406:	4619      	mov	r1, r3
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f011 fa30 	bl	801a86e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	f003 0308 	and.w	r3, r3, #8
 8009414:	2b00      	cmp	r3, #0
 8009416:	d008      	beq.n	800942a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941a:	015a      	lsls	r2, r3, #5
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	4413      	add	r3, r2
 8009420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009424:	461a      	mov	r2, r3
 8009426:	2308      	movs	r3, #8
 8009428:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	f003 0310 	and.w	r3, r3, #16
 8009430:	2b00      	cmp	r3, #0
 8009432:	d008      	beq.n	8009446 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009436:	015a      	lsls	r2, r3, #5
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	4413      	add	r3, r2
 800943c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009440:	461a      	mov	r2, r3
 8009442:	2310      	movs	r3, #16
 8009444:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800944c:	2b00      	cmp	r3, #0
 800944e:	d008      	beq.n	8009462 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009452:	015a      	lsls	r2, r3, #5
 8009454:	69fb      	ldr	r3, [r7, #28]
 8009456:	4413      	add	r3, r2
 8009458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800945c:	461a      	mov	r2, r3
 800945e:	2340      	movs	r3, #64	; 0x40
 8009460:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	f003 0302 	and.w	r3, r3, #2
 8009468:	2b00      	cmp	r3, #0
 800946a:	d023      	beq.n	80094b4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800946c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800946e:	6a38      	ldr	r0, [r7, #32]
 8009470:	f00a fd28 	bl	8013ec4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8009474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009476:	4613      	mov	r3, r2
 8009478:	00db      	lsls	r3, r3, #3
 800947a:	4413      	add	r3, r2
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	3338      	adds	r3, #56	; 0x38
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	4413      	add	r3, r2
 8009484:	3304      	adds	r3, #4
 8009486:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	78db      	ldrb	r3, [r3, #3]
 800948c:	2b01      	cmp	r3, #1
 800948e:	d108      	bne.n	80094a2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	2200      	movs	r2, #0
 8009494:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009498:	b2db      	uxtb	r3, r3
 800949a:	4619      	mov	r1, r3
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f011 fa7d 	bl	801a99c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80094a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a4:	015a      	lsls	r2, r3, #5
 80094a6:	69fb      	ldr	r3, [r7, #28]
 80094a8:	4413      	add	r3, r2
 80094aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094ae:	461a      	mov	r2, r3
 80094b0:	2302      	movs	r3, #2
 80094b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d003      	beq.n	80094c6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80094be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 fcea 	bl	8009e9a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80094c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c8:	3301      	adds	r3, #1
 80094ca:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80094cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ce:	085b      	lsrs	r3, r3, #1
 80094d0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80094d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	f47f af2e 	bne.w	8009336 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4618      	mov	r0, r3
 80094e0:	f00b fc12 	bl	8014d08 <USB_ReadInterrupts>
 80094e4:	4603      	mov	r3, r0
 80094e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094ee:	d122      	bne.n	8009536 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80094f0:	69fb      	ldr	r3, [r7, #28]
 80094f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	69fa      	ldr	r2, [r7, #28]
 80094fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094fe:	f023 0301 	bic.w	r3, r3, #1
 8009502:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800950a:	2b01      	cmp	r3, #1
 800950c:	d108      	bne.n	8009520 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2200      	movs	r2, #0
 8009512:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009516:	2100      	movs	r1, #0
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 fef5 	bl	800a308 <HAL_PCDEx_LPM_Callback>
 800951e:	e002      	b.n	8009526 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f011 fa1b 	bl	801a95c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	695a      	ldr	r2, [r3, #20]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009534:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4618      	mov	r0, r3
 800953c:	f00b fbe4 	bl	8014d08 <USB_ReadInterrupts>
 8009540:	4603      	mov	r3, r0
 8009542:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009546:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800954a:	d112      	bne.n	8009572 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800954c:	69fb      	ldr	r3, [r7, #28]
 800954e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009552:	689b      	ldr	r3, [r3, #8]
 8009554:	f003 0301 	and.w	r3, r3, #1
 8009558:	2b01      	cmp	r3, #1
 800955a:	d102      	bne.n	8009562 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f011 f9d7 	bl	801a910 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	695a      	ldr	r2, [r3, #20]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009570:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4618      	mov	r0, r3
 8009578:	f00b fbc6 	bl	8014d08 <USB_ReadInterrupts>
 800957c:	4603      	mov	r3, r0
 800957e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009582:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009586:	d121      	bne.n	80095cc <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	695a      	ldr	r2, [r3, #20]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8009596:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d111      	bne.n	80095c6 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2201      	movs	r2, #1
 80095a6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095b0:	089b      	lsrs	r3, r3, #2
 80095b2:	f003 020f 	and.w	r2, r3, #15
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80095bc:	2101      	movs	r1, #1
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 fea2 	bl	800a308 <HAL_PCDEx_LPM_Callback>
 80095c4:	e002      	b.n	80095cc <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f011 f9a2 	bl	801a910 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4618      	mov	r0, r3
 80095d2:	f00b fb99 	bl	8014d08 <USB_ReadInterrupts>
 80095d6:	4603      	mov	r3, r0
 80095d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80095dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095e0:	f040 80b7 	bne.w	8009752 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80095e4:	69fb      	ldr	r3, [r7, #28]
 80095e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	69fa      	ldr	r2, [r7, #28]
 80095ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095f2:	f023 0301 	bic.w	r3, r3, #1
 80095f6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2110      	movs	r1, #16
 80095fe:	4618      	mov	r0, r3
 8009600:	f00a fc60 	bl	8013ec4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009604:	2300      	movs	r3, #0
 8009606:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009608:	e046      	b.n	8009698 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800960a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800960c:	015a      	lsls	r2, r3, #5
 800960e:	69fb      	ldr	r3, [r7, #28]
 8009610:	4413      	add	r3, r2
 8009612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009616:	461a      	mov	r2, r3
 8009618:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800961c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800961e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009620:	015a      	lsls	r2, r3, #5
 8009622:	69fb      	ldr	r3, [r7, #28]
 8009624:	4413      	add	r3, r2
 8009626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800962e:	0151      	lsls	r1, r2, #5
 8009630:	69fa      	ldr	r2, [r7, #28]
 8009632:	440a      	add	r2, r1
 8009634:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009638:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800963c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800963e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009640:	015a      	lsls	r2, r3, #5
 8009642:	69fb      	ldr	r3, [r7, #28]
 8009644:	4413      	add	r3, r2
 8009646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800964a:	461a      	mov	r2, r3
 800964c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009650:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009654:	015a      	lsls	r2, r3, #5
 8009656:	69fb      	ldr	r3, [r7, #28]
 8009658:	4413      	add	r3, r2
 800965a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009662:	0151      	lsls	r1, r2, #5
 8009664:	69fa      	ldr	r2, [r7, #28]
 8009666:	440a      	add	r2, r1
 8009668:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800966c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009670:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009674:	015a      	lsls	r2, r3, #5
 8009676:	69fb      	ldr	r3, [r7, #28]
 8009678:	4413      	add	r3, r2
 800967a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009682:	0151      	lsls	r1, r2, #5
 8009684:	69fa      	ldr	r2, [r7, #28]
 8009686:	440a      	add	r2, r1
 8009688:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800968c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009690:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009694:	3301      	adds	r3, #1
 8009696:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800969e:	429a      	cmp	r2, r3
 80096a0:	d3b3      	bcc.n	800960a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80096a2:	69fb      	ldr	r3, [r7, #28]
 80096a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096a8:	69db      	ldr	r3, [r3, #28]
 80096aa:	69fa      	ldr	r2, [r7, #28]
 80096ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80096b0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80096b4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d016      	beq.n	80096ec <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80096be:	69fb      	ldr	r3, [r7, #28]
 80096c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096c8:	69fa      	ldr	r2, [r7, #28]
 80096ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80096ce:	f043 030b 	orr.w	r3, r3, #11
 80096d2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096de:	69fa      	ldr	r2, [r7, #28]
 80096e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80096e4:	f043 030b 	orr.w	r3, r3, #11
 80096e8:	6453      	str	r3, [r2, #68]	; 0x44
 80096ea:	e015      	b.n	8009718 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80096ec:	69fb      	ldr	r3, [r7, #28]
 80096ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096f2:	695a      	ldr	r2, [r3, #20]
 80096f4:	69fb      	ldr	r3, [r7, #28]
 80096f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096fa:	4619      	mov	r1, r3
 80096fc:	f242 032b 	movw	r3, #8235	; 0x202b
 8009700:	4313      	orrs	r3, r2
 8009702:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800970a:	691b      	ldr	r3, [r3, #16]
 800970c:	69fa      	ldr	r2, [r7, #28]
 800970e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009712:	f043 030b 	orr.w	r3, r3, #11
 8009716:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	69fa      	ldr	r2, [r7, #28]
 8009722:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009726:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800972a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6818      	ldr	r0, [r3, #0]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	68db      	ldr	r3, [r3, #12]
 8009734:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800973c:	461a      	mov	r2, r3
 800973e:	f00b fba9 	bl	8014e94 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	695a      	ldr	r2, [r3, #20]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009750:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4618      	mov	r0, r3
 8009758:	f00b fad6 	bl	8014d08 <USB_ReadInterrupts>
 800975c:	4603      	mov	r3, r0
 800975e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009766:	d124      	bne.n	80097b2 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4618      	mov	r0, r3
 800976e:	f00b fb6d 	bl	8014e4c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4618      	mov	r0, r3
 8009778:	f00a fc21 	bl	8013fbe <USB_GetDevSpeed>
 800977c:	4603      	mov	r3, r0
 800977e:	461a      	mov	r2, r3
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681c      	ldr	r4, [r3, #0]
 8009788:	f001 fd88 	bl	800b29c <HAL_RCC_GetHCLKFreq>
 800978c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009792:	b2db      	uxtb	r3, r3
 8009794:	461a      	mov	r2, r3
 8009796:	4620      	mov	r0, r4
 8009798:	f00a f926 	bl	80139e8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f011 f88e 	bl	801a8be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	695a      	ldr	r2, [r3, #20]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80097b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4618      	mov	r0, r3
 80097b8:	f00b faa6 	bl	8014d08 <USB_ReadInterrupts>
 80097bc:	4603      	mov	r3, r0
 80097be:	f003 0308 	and.w	r3, r3, #8
 80097c2:	2b08      	cmp	r3, #8
 80097c4:	d10a      	bne.n	80097dc <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f011 f86b 	bl	801a8a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	695a      	ldr	r2, [r3, #20]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f002 0208 	and.w	r2, r2, #8
 80097da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4618      	mov	r0, r3
 80097e2:	f00b fa91 	bl	8014d08 <USB_ReadInterrupts>
 80097e6:	4603      	mov	r3, r0
 80097e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097ec:	2b80      	cmp	r3, #128	; 0x80
 80097ee:	d122      	bne.n	8009836 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80097f0:	6a3b      	ldr	r3, [r7, #32]
 80097f2:	699b      	ldr	r3, [r3, #24]
 80097f4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80097f8:	6a3b      	ldr	r3, [r7, #32]
 80097fa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80097fc:	2301      	movs	r3, #1
 80097fe:	627b      	str	r3, [r7, #36]	; 0x24
 8009800:	e014      	b.n	800982c <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009802:	6879      	ldr	r1, [r7, #4]
 8009804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009806:	4613      	mov	r3, r2
 8009808:	00db      	lsls	r3, r3, #3
 800980a:	4413      	add	r3, r2
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	440b      	add	r3, r1
 8009810:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	2b01      	cmp	r3, #1
 8009818:	d105      	bne.n	8009826 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800981a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981c:	b2db      	uxtb	r3, r3
 800981e:	4619      	mov	r1, r3
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 fb09 	bl	8009e38 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009828:	3301      	adds	r3, #1
 800982a:	627b      	str	r3, [r7, #36]	; 0x24
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009832:	429a      	cmp	r2, r3
 8009834:	d3e5      	bcc.n	8009802 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4618      	mov	r0, r3
 800983c:	f00b fa64 	bl	8014d08 <USB_ReadInterrupts>
 8009840:	4603      	mov	r3, r0
 8009842:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009846:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800984a:	d13b      	bne.n	80098c4 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800984c:	2301      	movs	r3, #1
 800984e:	627b      	str	r3, [r7, #36]	; 0x24
 8009850:	e02b      	b.n	80098aa <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009854:	015a      	lsls	r2, r3, #5
 8009856:	69fb      	ldr	r3, [r7, #28]
 8009858:	4413      	add	r3, r2
 800985a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009862:	6879      	ldr	r1, [r7, #4]
 8009864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009866:	4613      	mov	r3, r2
 8009868:	00db      	lsls	r3, r3, #3
 800986a:	4413      	add	r3, r2
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	440b      	add	r3, r1
 8009870:	3340      	adds	r3, #64	; 0x40
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	2b01      	cmp	r3, #1
 8009876:	d115      	bne.n	80098a4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8009878:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800987a:	2b00      	cmp	r3, #0
 800987c:	da12      	bge.n	80098a4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800987e:	6879      	ldr	r1, [r7, #4]
 8009880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009882:	4613      	mov	r3, r2
 8009884:	00db      	lsls	r3, r3, #3
 8009886:	4413      	add	r3, r2
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	440b      	add	r3, r1
 800988c:	333f      	adds	r3, #63	; 0x3f
 800988e:	2201      	movs	r2, #1
 8009890:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8009892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009894:	b2db      	uxtb	r3, r3
 8009896:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800989a:	b2db      	uxtb	r3, r3
 800989c:	4619      	mov	r1, r3
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 faca 	bl	8009e38 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80098a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a6:	3301      	adds	r3, #1
 80098a8:	627b      	str	r3, [r7, #36]	; 0x24
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d3ce      	bcc.n	8009852 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	695a      	ldr	r2, [r3, #20]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80098c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4618      	mov	r0, r3
 80098ca:	f00b fa1d 	bl	8014d08 <USB_ReadInterrupts>
 80098ce:	4603      	mov	r3, r0
 80098d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80098d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80098d8:	d155      	bne.n	8009986 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80098da:	2301      	movs	r3, #1
 80098dc:	627b      	str	r3, [r7, #36]	; 0x24
 80098de:	e045      	b.n	800996c <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80098e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e2:	015a      	lsls	r2, r3, #5
 80098e4:	69fb      	ldr	r3, [r7, #28]
 80098e6:	4413      	add	r3, r2
 80098e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80098f0:	6879      	ldr	r1, [r7, #4]
 80098f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098f4:	4613      	mov	r3, r2
 80098f6:	00db      	lsls	r3, r3, #3
 80098f8:	4413      	add	r3, r2
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	440b      	add	r3, r1
 80098fe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	2b01      	cmp	r3, #1
 8009906:	d12e      	bne.n	8009966 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009908:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800990a:	2b00      	cmp	r3, #0
 800990c:	da2b      	bge.n	8009966 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800990e:	69bb      	ldr	r3, [r7, #24]
 8009910:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800991a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800991e:	429a      	cmp	r2, r3
 8009920:	d121      	bne.n	8009966 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8009922:	6879      	ldr	r1, [r7, #4]
 8009924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009926:	4613      	mov	r3, r2
 8009928:	00db      	lsls	r3, r3, #3
 800992a:	4413      	add	r3, r2
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	440b      	add	r3, r1
 8009930:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009934:	2201      	movs	r2, #1
 8009936:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009938:	6a3b      	ldr	r3, [r7, #32]
 800993a:	699b      	ldr	r3, [r3, #24]
 800993c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009940:	6a3b      	ldr	r3, [r7, #32]
 8009942:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8009944:	6a3b      	ldr	r3, [r7, #32]
 8009946:	695b      	ldr	r3, [r3, #20]
 8009948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800994c:	2b00      	cmp	r3, #0
 800994e:	d10a      	bne.n	8009966 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8009950:	69fb      	ldr	r3, [r7, #28]
 8009952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	69fa      	ldr	r2, [r7, #28]
 800995a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800995e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009962:	6053      	str	r3, [r2, #4]
            break;
 8009964:	e007      	b.n	8009976 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009968:	3301      	adds	r3, #1
 800996a:	627b      	str	r3, [r7, #36]	; 0x24
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009972:	429a      	cmp	r2, r3
 8009974:	d3b4      	bcc.n	80098e0 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	695a      	ldr	r2, [r3, #20]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8009984:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4618      	mov	r0, r3
 800998c:	f00b f9bc 	bl	8014d08 <USB_ReadInterrupts>
 8009990:	4603      	mov	r3, r0
 8009992:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800999a:	d10a      	bne.n	80099b2 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f011 f80f 	bl	801a9c0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	695a      	ldr	r2, [r3, #20]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80099b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4618      	mov	r0, r3
 80099b8:	f00b f9a6 	bl	8014d08 <USB_ReadInterrupts>
 80099bc:	4603      	mov	r3, r0
 80099be:	f003 0304 	and.w	r3, r3, #4
 80099c2:	2b04      	cmp	r3, #4
 80099c4:	d115      	bne.n	80099f2 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80099ce:	69bb      	ldr	r3, [r7, #24]
 80099d0:	f003 0304 	and.w	r3, r3, #4
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d002      	beq.n	80099de <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f010 ffff 	bl	801a9dc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	6859      	ldr	r1, [r3, #4]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	69ba      	ldr	r2, [r7, #24]
 80099ea:	430a      	orrs	r2, r1
 80099ec:	605a      	str	r2, [r3, #4]
 80099ee:	e000      	b.n	80099f2 <HAL_PCD_IRQHandler+0x992>
      return;
 80099f0:	bf00      	nop
    }
  }
}
 80099f2:	3734      	adds	r7, #52	; 0x34
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd90      	pop	{r4, r7, pc}

080099f8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	460b      	mov	r3, r1
 8009a02:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d101      	bne.n	8009a12 <HAL_PCD_SetAddress+0x1a>
 8009a0e:	2302      	movs	r3, #2
 8009a10:	e013      	b.n	8009a3a <HAL_PCD_SetAddress+0x42>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2201      	movs	r2, #1
 8009a16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	78fa      	ldrb	r2, [r7, #3]
 8009a1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	78fa      	ldrb	r2, [r7, #3]
 8009a28:	4611      	mov	r1, r2
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f00b f904 	bl	8014c38 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009a38:	2300      	movs	r3, #0
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3708      	adds	r7, #8
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}

08009a42 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b084      	sub	sp, #16
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
 8009a4a:	4608      	mov	r0, r1
 8009a4c:	4611      	mov	r1, r2
 8009a4e:	461a      	mov	r2, r3
 8009a50:	4603      	mov	r3, r0
 8009a52:	70fb      	strb	r3, [r7, #3]
 8009a54:	460b      	mov	r3, r1
 8009a56:	803b      	strh	r3, [r7, #0]
 8009a58:	4613      	mov	r3, r2
 8009a5a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009a60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	da0f      	bge.n	8009a88 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009a68:	78fb      	ldrb	r3, [r7, #3]
 8009a6a:	f003 020f 	and.w	r2, r3, #15
 8009a6e:	4613      	mov	r3, r2
 8009a70:	00db      	lsls	r3, r3, #3
 8009a72:	4413      	add	r3, r2
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	3338      	adds	r3, #56	; 0x38
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	4413      	add	r3, r2
 8009a7c:	3304      	adds	r3, #4
 8009a7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2201      	movs	r2, #1
 8009a84:	705a      	strb	r2, [r3, #1]
 8009a86:	e00f      	b.n	8009aa8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009a88:	78fb      	ldrb	r3, [r7, #3]
 8009a8a:	f003 020f 	and.w	r2, r3, #15
 8009a8e:	4613      	mov	r3, r2
 8009a90:	00db      	lsls	r3, r3, #3
 8009a92:	4413      	add	r3, r2
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	4413      	add	r3, r2
 8009a9e:	3304      	adds	r3, #4
 8009aa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009aa8:	78fb      	ldrb	r3, [r7, #3]
 8009aaa:	f003 030f 	and.w	r3, r3, #15
 8009aae:	b2da      	uxtb	r2, r3
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009ab4:	883a      	ldrh	r2, [r7, #0]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	78ba      	ldrb	r2, [r7, #2]
 8009abe:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	785b      	ldrb	r3, [r3, #1]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d004      	beq.n	8009ad2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	b29a      	uxth	r2, r3
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009ad2:	78bb      	ldrb	r3, [r7, #2]
 8009ad4:	2b02      	cmp	r3, #2
 8009ad6:	d102      	bne.n	8009ade <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2200      	movs	r2, #0
 8009adc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d101      	bne.n	8009aec <HAL_PCD_EP_Open+0xaa>
 8009ae8:	2302      	movs	r3, #2
 8009aea:	e00e      	b.n	8009b0a <HAL_PCD_EP_Open+0xc8>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2201      	movs	r2, #1
 8009af0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68f9      	ldr	r1, [r7, #12]
 8009afa:	4618      	mov	r0, r3
 8009afc:	f00a fa84 	bl	8014008 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2200      	movs	r2, #0
 8009b04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8009b08:	7afb      	ldrb	r3, [r7, #11]
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3710      	adds	r7, #16
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b084      	sub	sp, #16
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	6078      	str	r0, [r7, #4]
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009b1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	da0f      	bge.n	8009b46 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009b26:	78fb      	ldrb	r3, [r7, #3]
 8009b28:	f003 020f 	and.w	r2, r3, #15
 8009b2c:	4613      	mov	r3, r2
 8009b2e:	00db      	lsls	r3, r3, #3
 8009b30:	4413      	add	r3, r2
 8009b32:	009b      	lsls	r3, r3, #2
 8009b34:	3338      	adds	r3, #56	; 0x38
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	4413      	add	r3, r2
 8009b3a:	3304      	adds	r3, #4
 8009b3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2201      	movs	r2, #1
 8009b42:	705a      	strb	r2, [r3, #1]
 8009b44:	e00f      	b.n	8009b66 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009b46:	78fb      	ldrb	r3, [r7, #3]
 8009b48:	f003 020f 	and.w	r2, r3, #15
 8009b4c:	4613      	mov	r3, r2
 8009b4e:	00db      	lsls	r3, r3, #3
 8009b50:	4413      	add	r3, r2
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009b58:	687a      	ldr	r2, [r7, #4]
 8009b5a:	4413      	add	r3, r2
 8009b5c:	3304      	adds	r3, #4
 8009b5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2200      	movs	r2, #0
 8009b64:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009b66:	78fb      	ldrb	r3, [r7, #3]
 8009b68:	f003 030f 	and.w	r3, r3, #15
 8009b6c:	b2da      	uxtb	r2, r3
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d101      	bne.n	8009b80 <HAL_PCD_EP_Close+0x6e>
 8009b7c:	2302      	movs	r3, #2
 8009b7e:	e00e      	b.n	8009b9e <HAL_PCD_EP_Close+0x8c>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2201      	movs	r2, #1
 8009b84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	68f9      	ldr	r1, [r7, #12]
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f00a fac2 	bl	8014118 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8009b9c:	2300      	movs	r3, #0
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3710      	adds	r7, #16
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}

08009ba6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009ba6:	b580      	push	{r7, lr}
 8009ba8:	b086      	sub	sp, #24
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	60f8      	str	r0, [r7, #12]
 8009bae:	607a      	str	r2, [r7, #4]
 8009bb0:	603b      	str	r3, [r7, #0]
 8009bb2:	460b      	mov	r3, r1
 8009bb4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009bb6:	7afb      	ldrb	r3, [r7, #11]
 8009bb8:	f003 020f 	and.w	r2, r3, #15
 8009bbc:	4613      	mov	r3, r2
 8009bbe:	00db      	lsls	r3, r3, #3
 8009bc0:	4413      	add	r3, r2
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009bc8:	68fa      	ldr	r2, [r7, #12]
 8009bca:	4413      	add	r3, r2
 8009bcc:	3304      	adds	r3, #4
 8009bce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	683a      	ldr	r2, [r7, #0]
 8009bda:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	2200      	movs	r2, #0
 8009be0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	2200      	movs	r2, #0
 8009be6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009be8:	7afb      	ldrb	r3, [r7, #11]
 8009bea:	f003 030f 	and.w	r3, r3, #15
 8009bee:	b2da      	uxtb	r2, r3
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d102      	bne.n	8009c02 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	6818      	ldr	r0, [r3, #0]
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	68db      	ldr	r3, [r3, #12]
 8009c0a:	b2db      	uxtb	r3, r3
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	6979      	ldr	r1, [r7, #20]
 8009c10:	f00a fb5e 	bl	80142d0 <USB_EPStartXfer>

  return HAL_OK;
 8009c14:	2300      	movs	r3, #0
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3718      	adds	r7, #24
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}

08009c1e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009c1e:	b480      	push	{r7}
 8009c20:	b083      	sub	sp, #12
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
 8009c26:	460b      	mov	r3, r1
 8009c28:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009c2a:	78fb      	ldrb	r3, [r7, #3]
 8009c2c:	f003 020f 	and.w	r2, r3, #15
 8009c30:	6879      	ldr	r1, [r7, #4]
 8009c32:	4613      	mov	r3, r2
 8009c34:	00db      	lsls	r3, r3, #3
 8009c36:	4413      	add	r3, r2
 8009c38:	009b      	lsls	r3, r3, #2
 8009c3a:	440b      	add	r3, r1
 8009c3c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8009c40:	681b      	ldr	r3, [r3, #0]
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	370c      	adds	r7, #12
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr

08009c4e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009c4e:	b580      	push	{r7, lr}
 8009c50:	b086      	sub	sp, #24
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	60f8      	str	r0, [r7, #12]
 8009c56:	607a      	str	r2, [r7, #4]
 8009c58:	603b      	str	r3, [r7, #0]
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009c5e:	7afb      	ldrb	r3, [r7, #11]
 8009c60:	f003 020f 	and.w	r2, r3, #15
 8009c64:	4613      	mov	r3, r2
 8009c66:	00db      	lsls	r3, r3, #3
 8009c68:	4413      	add	r3, r2
 8009c6a:	009b      	lsls	r3, r3, #2
 8009c6c:	3338      	adds	r3, #56	; 0x38
 8009c6e:	68fa      	ldr	r2, [r7, #12]
 8009c70:	4413      	add	r3, r2
 8009c72:	3304      	adds	r3, #4
 8009c74:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	683a      	ldr	r2, [r7, #0]
 8009c80:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	2200      	movs	r2, #0
 8009c86:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009c8e:	7afb      	ldrb	r3, [r7, #11]
 8009c90:	f003 030f 	and.w	r3, r3, #15
 8009c94:	b2da      	uxtb	r2, r3
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	68db      	ldr	r3, [r3, #12]
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d102      	bne.n	8009ca8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	6818      	ldr	r0, [r3, #0]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	b2db      	uxtb	r3, r3
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	6979      	ldr	r1, [r7, #20]
 8009cb6:	f00a fb0b 	bl	80142d0 <USB_EPStartXfer>

  return HAL_OK;
 8009cba:	2300      	movs	r3, #0
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3718      	adds	r7, #24
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	460b      	mov	r3, r1
 8009cce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009cd0:	78fb      	ldrb	r3, [r7, #3]
 8009cd2:	f003 020f 	and.w	r2, r3, #15
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d901      	bls.n	8009ce2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e050      	b.n	8009d84 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009ce2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	da0f      	bge.n	8009d0a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009cea:	78fb      	ldrb	r3, [r7, #3]
 8009cec:	f003 020f 	and.w	r2, r3, #15
 8009cf0:	4613      	mov	r3, r2
 8009cf2:	00db      	lsls	r3, r3, #3
 8009cf4:	4413      	add	r3, r2
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	3338      	adds	r3, #56	; 0x38
 8009cfa:	687a      	ldr	r2, [r7, #4]
 8009cfc:	4413      	add	r3, r2
 8009cfe:	3304      	adds	r3, #4
 8009d00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2201      	movs	r2, #1
 8009d06:	705a      	strb	r2, [r3, #1]
 8009d08:	e00d      	b.n	8009d26 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009d0a:	78fa      	ldrb	r2, [r7, #3]
 8009d0c:	4613      	mov	r3, r2
 8009d0e:	00db      	lsls	r3, r3, #3
 8009d10:	4413      	add	r3, r2
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	4413      	add	r3, r2
 8009d1c:	3304      	adds	r3, #4
 8009d1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2200      	movs	r2, #0
 8009d24:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2201      	movs	r2, #1
 8009d2a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009d2c:	78fb      	ldrb	r3, [r7, #3]
 8009d2e:	f003 030f 	and.w	r3, r3, #15
 8009d32:	b2da      	uxtb	r2, r3
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	d101      	bne.n	8009d46 <HAL_PCD_EP_SetStall+0x82>
 8009d42:	2302      	movs	r3, #2
 8009d44:	e01e      	b.n	8009d84 <HAL_PCD_EP_SetStall+0xc0>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2201      	movs	r2, #1
 8009d4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	68f9      	ldr	r1, [r7, #12]
 8009d54:	4618      	mov	r0, r3
 8009d56:	f00a fe9b 	bl	8014a90 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009d5a:	78fb      	ldrb	r3, [r7, #3]
 8009d5c:	f003 030f 	and.w	r3, r3, #15
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d10a      	bne.n	8009d7a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6818      	ldr	r0, [r3, #0]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	68db      	ldr	r3, [r3, #12]
 8009d6c:	b2d9      	uxtb	r1, r3
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009d74:	461a      	mov	r2, r3
 8009d76:	f00b f88d 	bl	8014e94 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009d82:	2300      	movs	r3, #0
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3710      	adds	r7, #16
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	460b      	mov	r3, r1
 8009d96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009d98:	78fb      	ldrb	r3, [r7, #3]
 8009d9a:	f003 020f 	and.w	r2, r3, #15
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d901      	bls.n	8009daa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009da6:	2301      	movs	r3, #1
 8009da8:	e042      	b.n	8009e30 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009daa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	da0f      	bge.n	8009dd2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009db2:	78fb      	ldrb	r3, [r7, #3]
 8009db4:	f003 020f 	and.w	r2, r3, #15
 8009db8:	4613      	mov	r3, r2
 8009dba:	00db      	lsls	r3, r3, #3
 8009dbc:	4413      	add	r3, r2
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	3338      	adds	r3, #56	; 0x38
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	4413      	add	r3, r2
 8009dc6:	3304      	adds	r3, #4
 8009dc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2201      	movs	r2, #1
 8009dce:	705a      	strb	r2, [r3, #1]
 8009dd0:	e00f      	b.n	8009df2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009dd2:	78fb      	ldrb	r3, [r7, #3]
 8009dd4:	f003 020f 	and.w	r2, r3, #15
 8009dd8:	4613      	mov	r3, r2
 8009dda:	00db      	lsls	r3, r3, #3
 8009ddc:	4413      	add	r3, r2
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	4413      	add	r3, r2
 8009de8:	3304      	adds	r3, #4
 8009dea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2200      	movs	r2, #0
 8009df0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2200      	movs	r2, #0
 8009df6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009df8:	78fb      	ldrb	r3, [r7, #3]
 8009dfa:	f003 030f 	and.w	r3, r3, #15
 8009dfe:	b2da      	uxtb	r2, r3
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	d101      	bne.n	8009e12 <HAL_PCD_EP_ClrStall+0x86>
 8009e0e:	2302      	movs	r3, #2
 8009e10:	e00e      	b.n	8009e30 <HAL_PCD_EP_ClrStall+0xa4>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2201      	movs	r2, #1
 8009e16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	68f9      	ldr	r1, [r7, #12]
 8009e20:	4618      	mov	r0, r3
 8009e22:	f00a fea3 	bl	8014b6c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009e2e:	2300      	movs	r3, #0
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3710      	adds	r7, #16
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b084      	sub	sp, #16
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	460b      	mov	r3, r1
 8009e42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009e44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	da0c      	bge.n	8009e66 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009e4c:	78fb      	ldrb	r3, [r7, #3]
 8009e4e:	f003 020f 	and.w	r2, r3, #15
 8009e52:	4613      	mov	r3, r2
 8009e54:	00db      	lsls	r3, r3, #3
 8009e56:	4413      	add	r3, r2
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	3338      	adds	r3, #56	; 0x38
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	4413      	add	r3, r2
 8009e60:	3304      	adds	r3, #4
 8009e62:	60fb      	str	r3, [r7, #12]
 8009e64:	e00c      	b.n	8009e80 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009e66:	78fb      	ldrb	r3, [r7, #3]
 8009e68:	f003 020f 	and.w	r2, r3, #15
 8009e6c:	4613      	mov	r3, r2
 8009e6e:	00db      	lsls	r3, r3, #3
 8009e70:	4413      	add	r3, r2
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009e78:	687a      	ldr	r2, [r7, #4]
 8009e7a:	4413      	add	r3, r2
 8009e7c:	3304      	adds	r3, #4
 8009e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	68f9      	ldr	r1, [r7, #12]
 8009e86:	4618      	mov	r0, r3
 8009e88:	f00a fcc2 	bl	8014810 <USB_EPStopXfer>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009e90:	7afb      	ldrb	r3, [r7, #11]
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3710      	adds	r7, #16
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}

08009e9a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009e9a:	b580      	push	{r7, lr}
 8009e9c:	b08a      	sub	sp, #40	; 0x28
 8009e9e:	af02      	add	r7, sp, #8
 8009ea0:	6078      	str	r0, [r7, #4]
 8009ea2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009eae:	683a      	ldr	r2, [r7, #0]
 8009eb0:	4613      	mov	r3, r2
 8009eb2:	00db      	lsls	r3, r3, #3
 8009eb4:	4413      	add	r3, r2
 8009eb6:	009b      	lsls	r3, r3, #2
 8009eb8:	3338      	adds	r3, #56	; 0x38
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	4413      	add	r3, r2
 8009ebe:	3304      	adds	r3, #4
 8009ec0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	695a      	ldr	r2, [r3, #20]
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	691b      	ldr	r3, [r3, #16]
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d901      	bls.n	8009ed2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e06c      	b.n	8009fac <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	691a      	ldr	r2, [r3, #16]
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	695b      	ldr	r3, [r3, #20]
 8009eda:	1ad3      	subs	r3, r2, r3
 8009edc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	689b      	ldr	r3, [r3, #8]
 8009ee2:	69fa      	ldr	r2, [r7, #28]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d902      	bls.n	8009eee <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009eee:	69fb      	ldr	r3, [r7, #28]
 8009ef0:	3303      	adds	r3, #3
 8009ef2:	089b      	lsrs	r3, r3, #2
 8009ef4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009ef6:	e02b      	b.n	8009f50 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	691a      	ldr	r2, [r3, #16]
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	695b      	ldr	r3, [r3, #20]
 8009f00:	1ad3      	subs	r3, r2, r3
 8009f02:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	69fa      	ldr	r2, [r7, #28]
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d902      	bls.n	8009f14 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	689b      	ldr	r3, [r3, #8]
 8009f12:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009f14:	69fb      	ldr	r3, [r7, #28]
 8009f16:	3303      	adds	r3, #3
 8009f18:	089b      	lsrs	r3, r3, #2
 8009f1a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	68d9      	ldr	r1, [r3, #12]
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	b2da      	uxtb	r2, r3
 8009f24:	69fb      	ldr	r3, [r7, #28]
 8009f26:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	9300      	str	r3, [sp, #0]
 8009f30:	4603      	mov	r3, r0
 8009f32:	6978      	ldr	r0, [r7, #20]
 8009f34:	f00a fd16 	bl	8014964 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	68da      	ldr	r2, [r3, #12]
 8009f3c:	69fb      	ldr	r3, [r7, #28]
 8009f3e:	441a      	add	r2, r3
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	695a      	ldr	r2, [r3, #20]
 8009f48:	69fb      	ldr	r3, [r7, #28]
 8009f4a:	441a      	add	r2, r3
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	015a      	lsls	r2, r3, #5
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	4413      	add	r3, r2
 8009f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f5c:	699b      	ldr	r3, [r3, #24]
 8009f5e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009f60:	69ba      	ldr	r2, [r7, #24]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d809      	bhi.n	8009f7a <PCD_WriteEmptyTxFifo+0xe0>
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	695a      	ldr	r2, [r3, #20]
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d203      	bcs.n	8009f7a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	691b      	ldr	r3, [r3, #16]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d1be      	bne.n	8009ef8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	691a      	ldr	r2, [r3, #16]
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	695b      	ldr	r3, [r3, #20]
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d811      	bhi.n	8009faa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	f003 030f 	and.w	r3, r3, #15
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8009f92:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	43db      	mvns	r3, r3
 8009fa0:	6939      	ldr	r1, [r7, #16]
 8009fa2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009fa6:	4013      	ands	r3, r2
 8009fa8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8009faa:	2300      	movs	r3, #0
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3720      	adds	r7, #32
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b088      	sub	sp, #32
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fc4:	69fb      	ldr	r3, [r7, #28]
 8009fc6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009fc8:	69fb      	ldr	r3, [r7, #28]
 8009fca:	333c      	adds	r3, #60	; 0x3c
 8009fcc:	3304      	adds	r3, #4
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	015a      	lsls	r2, r3, #5
 8009fd6:	69bb      	ldr	r3, [r7, #24]
 8009fd8:	4413      	add	r3, r2
 8009fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fde:	689b      	ldr	r3, [r3, #8]
 8009fe0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	68db      	ldr	r3, [r3, #12]
 8009fe6:	2b01      	cmp	r3, #1
 8009fe8:	d17b      	bne.n	800a0e2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	f003 0308 	and.w	r3, r3, #8
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d015      	beq.n	800a020 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	4a61      	ldr	r2, [pc, #388]	; (800a17c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	f240 80b9 	bls.w	800a170 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a004:	2b00      	cmp	r3, #0
 800a006:	f000 80b3 	beq.w	800a170 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	015a      	lsls	r2, r3, #5
 800a00e:	69bb      	ldr	r3, [r7, #24]
 800a010:	4413      	add	r3, r2
 800a012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a016:	461a      	mov	r2, r3
 800a018:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a01c:	6093      	str	r3, [r2, #8]
 800a01e:	e0a7      	b.n	800a170 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	f003 0320 	and.w	r3, r3, #32
 800a026:	2b00      	cmp	r3, #0
 800a028:	d009      	beq.n	800a03e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	015a      	lsls	r2, r3, #5
 800a02e:	69bb      	ldr	r3, [r7, #24]
 800a030:	4413      	add	r3, r2
 800a032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a036:	461a      	mov	r2, r3
 800a038:	2320      	movs	r3, #32
 800a03a:	6093      	str	r3, [r2, #8]
 800a03c:	e098      	b.n	800a170 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a044:	2b00      	cmp	r3, #0
 800a046:	f040 8093 	bne.w	800a170 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	4a4b      	ldr	r2, [pc, #300]	; (800a17c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d90f      	bls.n	800a072 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d00a      	beq.n	800a072 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	015a      	lsls	r2, r3, #5
 800a060:	69bb      	ldr	r3, [r7, #24]
 800a062:	4413      	add	r3, r2
 800a064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a068:	461a      	mov	r2, r3
 800a06a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a06e:	6093      	str	r3, [r2, #8]
 800a070:	e07e      	b.n	800a170 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800a072:	683a      	ldr	r2, [r7, #0]
 800a074:	4613      	mov	r3, r2
 800a076:	00db      	lsls	r3, r3, #3
 800a078:	4413      	add	r3, r2
 800a07a:	009b      	lsls	r3, r3, #2
 800a07c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	4413      	add	r3, r2
 800a084:	3304      	adds	r3, #4
 800a086:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	6a1a      	ldr	r2, [r3, #32]
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	0159      	lsls	r1, r3, #5
 800a090:	69bb      	ldr	r3, [r7, #24]
 800a092:	440b      	add	r3, r1
 800a094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a098:	691b      	ldr	r3, [r3, #16]
 800a09a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a09e:	1ad2      	subs	r2, r2, r3
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d114      	bne.n	800a0d4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	691b      	ldr	r3, [r3, #16]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d109      	bne.n	800a0c6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6818      	ldr	r0, [r3, #0]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a0bc:	461a      	mov	r2, r3
 800a0be:	2101      	movs	r1, #1
 800a0c0:	f00a fee8 	bl	8014e94 <USB_EP0_OutStart>
 800a0c4:	e006      	b.n	800a0d4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	68da      	ldr	r2, [r3, #12]
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	695b      	ldr	r3, [r3, #20]
 800a0ce:	441a      	add	r2, r3
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	4619      	mov	r1, r3
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f010 fbac 	bl	801a838 <HAL_PCD_DataOutStageCallback>
 800a0e0:	e046      	b.n	800a170 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	4a26      	ldr	r2, [pc, #152]	; (800a180 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d124      	bne.n	800a134 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d00a      	beq.n	800a10a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	015a      	lsls	r2, r3, #5
 800a0f8:	69bb      	ldr	r3, [r7, #24]
 800a0fa:	4413      	add	r3, r2
 800a0fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a100:	461a      	mov	r2, r3
 800a102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a106:	6093      	str	r3, [r2, #8]
 800a108:	e032      	b.n	800a170 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	f003 0320 	and.w	r3, r3, #32
 800a110:	2b00      	cmp	r3, #0
 800a112:	d008      	beq.n	800a126 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	015a      	lsls	r2, r3, #5
 800a118:	69bb      	ldr	r3, [r7, #24]
 800a11a:	4413      	add	r3, r2
 800a11c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a120:	461a      	mov	r2, r3
 800a122:	2320      	movs	r3, #32
 800a124:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	4619      	mov	r1, r3
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f010 fb83 	bl	801a838 <HAL_PCD_DataOutStageCallback>
 800a132:	e01d      	b.n	800a170 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d114      	bne.n	800a164 <PCD_EP_OutXfrComplete_int+0x1b0>
 800a13a:	6879      	ldr	r1, [r7, #4]
 800a13c:	683a      	ldr	r2, [r7, #0]
 800a13e:	4613      	mov	r3, r2
 800a140:	00db      	lsls	r3, r3, #3
 800a142:	4413      	add	r3, r2
 800a144:	009b      	lsls	r3, r3, #2
 800a146:	440b      	add	r3, r1
 800a148:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d108      	bne.n	800a164 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6818      	ldr	r0, [r3, #0]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a15c:	461a      	mov	r2, r3
 800a15e:	2100      	movs	r1, #0
 800a160:	f00a fe98 	bl	8014e94 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	b2db      	uxtb	r3, r3
 800a168:	4619      	mov	r1, r3
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f010 fb64 	bl	801a838 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a170:	2300      	movs	r3, #0
}
 800a172:	4618      	mov	r0, r3
 800a174:	3720      	adds	r7, #32
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}
 800a17a:	bf00      	nop
 800a17c:	4f54300a 	.word	0x4f54300a
 800a180:	4f54310a 	.word	0x4f54310a

0800a184 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b086      	sub	sp, #24
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	333c      	adds	r3, #60	; 0x3c
 800a19c:	3304      	adds	r3, #4
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	015a      	lsls	r2, r3, #5
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	4413      	add	r3, r2
 800a1aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1ae:	689b      	ldr	r3, [r3, #8]
 800a1b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	4a15      	ldr	r2, [pc, #84]	; (800a20c <PCD_EP_OutSetupPacket_int+0x88>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d90e      	bls.n	800a1d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d009      	beq.n	800a1d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	015a      	lsls	r2, r3, #5
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	4413      	add	r3, r2
 800a1cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f010 fb1b 	bl	801a814 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	4a0a      	ldr	r2, [pc, #40]	; (800a20c <PCD_EP_OutSetupPacket_int+0x88>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d90c      	bls.n	800a200 <PCD_EP_OutSetupPacket_int+0x7c>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	68db      	ldr	r3, [r3, #12]
 800a1ea:	2b01      	cmp	r3, #1
 800a1ec:	d108      	bne.n	800a200 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6818      	ldr	r0, [r3, #0]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	2101      	movs	r1, #1
 800a1fc:	f00a fe4a 	bl	8014e94 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a200:	2300      	movs	r3, #0
}
 800a202:	4618      	mov	r0, r3
 800a204:	3718      	adds	r7, #24
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop
 800a20c:	4f54300a 	.word	0x4f54300a

0800a210 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a210:	b480      	push	{r7}
 800a212:	b085      	sub	sp, #20
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	460b      	mov	r3, r1
 800a21a:	70fb      	strb	r3, [r7, #3]
 800a21c:	4613      	mov	r3, r2
 800a21e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a226:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a228:	78fb      	ldrb	r3, [r7, #3]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d107      	bne.n	800a23e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a22e:	883b      	ldrh	r3, [r7, #0]
 800a230:	0419      	lsls	r1, r3, #16
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	68ba      	ldr	r2, [r7, #8]
 800a238:	430a      	orrs	r2, r1
 800a23a:	629a      	str	r2, [r3, #40]	; 0x28
 800a23c:	e028      	b.n	800a290 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a244:	0c1b      	lsrs	r3, r3, #16
 800a246:	68ba      	ldr	r2, [r7, #8]
 800a248:	4413      	add	r3, r2
 800a24a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a24c:	2300      	movs	r3, #0
 800a24e:	73fb      	strb	r3, [r7, #15]
 800a250:	e00d      	b.n	800a26e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681a      	ldr	r2, [r3, #0]
 800a256:	7bfb      	ldrb	r3, [r7, #15]
 800a258:	3340      	adds	r3, #64	; 0x40
 800a25a:	009b      	lsls	r3, r3, #2
 800a25c:	4413      	add	r3, r2
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	0c1b      	lsrs	r3, r3, #16
 800a262:	68ba      	ldr	r2, [r7, #8]
 800a264:	4413      	add	r3, r2
 800a266:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a268:	7bfb      	ldrb	r3, [r7, #15]
 800a26a:	3301      	adds	r3, #1
 800a26c:	73fb      	strb	r3, [r7, #15]
 800a26e:	7bfa      	ldrb	r2, [r7, #15]
 800a270:	78fb      	ldrb	r3, [r7, #3]
 800a272:	3b01      	subs	r3, #1
 800a274:	429a      	cmp	r2, r3
 800a276:	d3ec      	bcc.n	800a252 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a278:	883b      	ldrh	r3, [r7, #0]
 800a27a:	0418      	lsls	r0, r3, #16
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6819      	ldr	r1, [r3, #0]
 800a280:	78fb      	ldrb	r3, [r7, #3]
 800a282:	3b01      	subs	r3, #1
 800a284:	68ba      	ldr	r2, [r7, #8]
 800a286:	4302      	orrs	r2, r0
 800a288:	3340      	adds	r3, #64	; 0x40
 800a28a:	009b      	lsls	r3, r3, #2
 800a28c:	440b      	add	r3, r1
 800a28e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a290:	2300      	movs	r3, #0
}
 800a292:	4618      	mov	r0, r3
 800a294:	3714      	adds	r7, #20
 800a296:	46bd      	mov	sp, r7
 800a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29c:	4770      	bx	lr

0800a29e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a29e:	b480      	push	{r7}
 800a2a0:	b083      	sub	sp, #12
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	887a      	ldrh	r2, [r7, #2]
 800a2b0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a2b2:	2300      	movs	r3, #0
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	370c      	adds	r7, #12
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b085      	sub	sp, #20
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2201      	movs	r2, #1
 800a2d2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	699b      	ldr	r3, [r3, #24]
 800a2e2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a2ee:	4b05      	ldr	r3, [pc, #20]	; (800a304 <HAL_PCDEx_ActivateLPM+0x44>)
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	68fa      	ldr	r2, [r7, #12]
 800a2f4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800a2f6:	2300      	movs	r3, #0
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3714      	adds	r7, #20
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr
 800a304:	10000003 	.word	0x10000003

0800a308 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a308:	b480      	push	{r7}
 800a30a:	b083      	sub	sp, #12
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	460b      	mov	r3, r1
 800a312:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a314:	bf00      	nop
 800a316:	370c      	adds	r7, #12
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a328:	4b19      	ldr	r3, [pc, #100]	; (800a390 <HAL_PWREx_ConfigSupply+0x70>)
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	f003 0304 	and.w	r3, r3, #4
 800a330:	2b04      	cmp	r3, #4
 800a332:	d00a      	beq.n	800a34a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a334:	4b16      	ldr	r3, [pc, #88]	; (800a390 <HAL_PWREx_ConfigSupply+0x70>)
 800a336:	68db      	ldr	r3, [r3, #12]
 800a338:	f003 0307 	and.w	r3, r3, #7
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	429a      	cmp	r2, r3
 800a340:	d001      	beq.n	800a346 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a342:	2301      	movs	r3, #1
 800a344:	e01f      	b.n	800a386 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a346:	2300      	movs	r3, #0
 800a348:	e01d      	b.n	800a386 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a34a:	4b11      	ldr	r3, [pc, #68]	; (800a390 <HAL_PWREx_ConfigSupply+0x70>)
 800a34c:	68db      	ldr	r3, [r3, #12]
 800a34e:	f023 0207 	bic.w	r2, r3, #7
 800a352:	490f      	ldr	r1, [pc, #60]	; (800a390 <HAL_PWREx_ConfigSupply+0x70>)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	4313      	orrs	r3, r2
 800a358:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a35a:	f7f9 fcc3 	bl	8003ce4 <HAL_GetTick>
 800a35e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a360:	e009      	b.n	800a376 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a362:	f7f9 fcbf 	bl	8003ce4 <HAL_GetTick>
 800a366:	4602      	mov	r2, r0
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	1ad3      	subs	r3, r2, r3
 800a36c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a370:	d901      	bls.n	800a376 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a372:	2301      	movs	r3, #1
 800a374:	e007      	b.n	800a386 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a376:	4b06      	ldr	r3, [pc, #24]	; (800a390 <HAL_PWREx_ConfigSupply+0x70>)
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a37e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a382:	d1ee      	bne.n	800a362 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a384:	2300      	movs	r3, #0
}
 800a386:	4618      	mov	r0, r3
 800a388:	3710      	adds	r7, #16
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	58024800 	.word	0x58024800

0800a394 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800a394:	b480      	push	{r7}
 800a396:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800a398:	4b05      	ldr	r3, [pc, #20]	; (800a3b0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a39a:	68db      	ldr	r3, [r3, #12]
 800a39c:	4a04      	ldr	r2, [pc, #16]	; (800a3b0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a39e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a3a2:	60d3      	str	r3, [r2, #12]
}
 800a3a4:	bf00      	nop
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr
 800a3ae:	bf00      	nop
 800a3b0:	58024800 	.word	0x58024800

0800a3b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b08c      	sub	sp, #48	; 0x30
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d101      	bne.n	800a3c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e3c8      	b.n	800ab58 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f003 0301 	and.w	r3, r3, #1
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	f000 8087 	beq.w	800a4e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a3d4:	4b88      	ldr	r3, [pc, #544]	; (800a5f8 <HAL_RCC_OscConfig+0x244>)
 800a3d6:	691b      	ldr	r3, [r3, #16]
 800a3d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a3dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a3de:	4b86      	ldr	r3, [pc, #536]	; (800a5f8 <HAL_RCC_OscConfig+0x244>)
 800a3e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3e2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e6:	2b10      	cmp	r3, #16
 800a3e8:	d007      	beq.n	800a3fa <HAL_RCC_OscConfig+0x46>
 800a3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ec:	2b18      	cmp	r3, #24
 800a3ee:	d110      	bne.n	800a412 <HAL_RCC_OscConfig+0x5e>
 800a3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f2:	f003 0303 	and.w	r3, r3, #3
 800a3f6:	2b02      	cmp	r3, #2
 800a3f8:	d10b      	bne.n	800a412 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a3fa:	4b7f      	ldr	r3, [pc, #508]	; (800a5f8 <HAL_RCC_OscConfig+0x244>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a402:	2b00      	cmp	r3, #0
 800a404:	d06c      	beq.n	800a4e0 <HAL_RCC_OscConfig+0x12c>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d168      	bne.n	800a4e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a40e:	2301      	movs	r3, #1
 800a410:	e3a2      	b.n	800ab58 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	685b      	ldr	r3, [r3, #4]
 800a416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a41a:	d106      	bne.n	800a42a <HAL_RCC_OscConfig+0x76>
 800a41c:	4b76      	ldr	r3, [pc, #472]	; (800a5f8 <HAL_RCC_OscConfig+0x244>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a75      	ldr	r2, [pc, #468]	; (800a5f8 <HAL_RCC_OscConfig+0x244>)
 800a422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a426:	6013      	str	r3, [r2, #0]
 800a428:	e02e      	b.n	800a488 <HAL_RCC_OscConfig+0xd4>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d10c      	bne.n	800a44c <HAL_RCC_OscConfig+0x98>
 800a432:	4b71      	ldr	r3, [pc, #452]	; (800a5f8 <HAL_RCC_OscConfig+0x244>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a70      	ldr	r2, [pc, #448]	; (800a5f8 <HAL_RCC_OscConfig+0x244>)
 800a438:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a43c:	6013      	str	r3, [r2, #0]
 800a43e:	4b6e      	ldr	r3, [pc, #440]	; (800a5f8 <HAL_RCC_OscConfig+0x244>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	4a6d      	ldr	r2, [pc, #436]	; (800a5f8 <HAL_RCC_OscConfig+0x244>)
 800a444:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a448:	6013      	str	r3, [r2, #0]
 800a44a:	e01d      	b.n	800a488 <HAL_RCC_OscConfig+0xd4>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a454:	d10c      	bne.n	800a470 <HAL_RCC_OscConfig+0xbc>
 800a456:	4b68      	ldr	r3, [pc, #416]	; (800a5f8 <HAL_RCC_OscConfig+0x244>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a67      	ldr	r2, [pc, #412]	; (800a5f8 <HAL_RCC_OscConfig+0x244>)
 800a45c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a460:	6013      	str	r3, [r2, #0]
 800a462:	4b65      	ldr	r3, [pc, #404]	; (800a5f8 <HAL_RCC_OscConfig+0x244>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	4a64      	ldr	r2, [pc, #400]	; (800a5f8 <HAL_RCC_OscConfig+0x244>)
 800a468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a46c:	6013      	str	r3, [r2, #0]
 800a46e:	e00b      	b.n	800a488 <HAL_RCC_OscConfig+0xd4>
 800a470:	4b61      	ldr	r3, [pc, #388]	; (800a5f8 <HAL_RCC_OscConfig+0x244>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4a60      	ldr	r2, [pc, #384]	; (800a5f8 <HAL_RCC_OscConfig+0x244>)
 800a476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a47a:	6013      	str	r3, [r2, #0]
 800a47c:	4b5e      	ldr	r3, [pc, #376]	; (800a5f8 <HAL_RCC_OscConfig+0x244>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4a5d      	ldr	r2, [pc, #372]	; (800a5f8 <HAL_RCC_OscConfig+0x244>)
 800a482:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a486:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d013      	beq.n	800a4b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a490:	f7f9 fc28 	bl	8003ce4 <HAL_GetTick>
 800a494:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a496:	e008      	b.n	800a4aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a498:	f7f9 fc24 	bl	8003ce4 <HAL_GetTick>
 800a49c:	4602      	mov	r2, r0
 800a49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a0:	1ad3      	subs	r3, r2, r3
 800a4a2:	2b64      	cmp	r3, #100	; 0x64
 800a4a4:	d901      	bls.n	800a4aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a4a6:	2303      	movs	r3, #3
 800a4a8:	e356      	b.n	800ab58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a4aa:	4b53      	ldr	r3, [pc, #332]	; (800a5f8 <HAL_RCC_OscConfig+0x244>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d0f0      	beq.n	800a498 <HAL_RCC_OscConfig+0xe4>
 800a4b6:	e014      	b.n	800a4e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4b8:	f7f9 fc14 	bl	8003ce4 <HAL_GetTick>
 800a4bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a4be:	e008      	b.n	800a4d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a4c0:	f7f9 fc10 	bl	8003ce4 <HAL_GetTick>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c8:	1ad3      	subs	r3, r2, r3
 800a4ca:	2b64      	cmp	r3, #100	; 0x64
 800a4cc:	d901      	bls.n	800a4d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a4ce:	2303      	movs	r3, #3
 800a4d0:	e342      	b.n	800ab58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a4d2:	4b49      	ldr	r3, [pc, #292]	; (800a5f8 <HAL_RCC_OscConfig+0x244>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d1f0      	bne.n	800a4c0 <HAL_RCC_OscConfig+0x10c>
 800a4de:	e000      	b.n	800a4e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a4e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f003 0302 	and.w	r3, r3, #2
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	f000 808c 	beq.w	800a608 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a4f0:	4b41      	ldr	r3, [pc, #260]	; (800a5f8 <HAL_RCC_OscConfig+0x244>)
 800a4f2:	691b      	ldr	r3, [r3, #16]
 800a4f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a4f8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a4fa:	4b3f      	ldr	r3, [pc, #252]	; (800a5f8 <HAL_RCC_OscConfig+0x244>)
 800a4fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4fe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a500:	6a3b      	ldr	r3, [r7, #32]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d007      	beq.n	800a516 <HAL_RCC_OscConfig+0x162>
 800a506:	6a3b      	ldr	r3, [r7, #32]
 800a508:	2b18      	cmp	r3, #24
 800a50a:	d137      	bne.n	800a57c <HAL_RCC_OscConfig+0x1c8>
 800a50c:	69fb      	ldr	r3, [r7, #28]
 800a50e:	f003 0303 	and.w	r3, r3, #3
 800a512:	2b00      	cmp	r3, #0
 800a514:	d132      	bne.n	800a57c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a516:	4b38      	ldr	r3, [pc, #224]	; (800a5f8 <HAL_RCC_OscConfig+0x244>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f003 0304 	and.w	r3, r3, #4
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d005      	beq.n	800a52e <HAL_RCC_OscConfig+0x17a>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d101      	bne.n	800a52e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a52a:	2301      	movs	r3, #1
 800a52c:	e314      	b.n	800ab58 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a52e:	4b32      	ldr	r3, [pc, #200]	; (800a5f8 <HAL_RCC_OscConfig+0x244>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f023 0219 	bic.w	r2, r3, #25
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	68db      	ldr	r3, [r3, #12]
 800a53a:	492f      	ldr	r1, [pc, #188]	; (800a5f8 <HAL_RCC_OscConfig+0x244>)
 800a53c:	4313      	orrs	r3, r2
 800a53e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a540:	f7f9 fbd0 	bl	8003ce4 <HAL_GetTick>
 800a544:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a546:	e008      	b.n	800a55a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a548:	f7f9 fbcc 	bl	8003ce4 <HAL_GetTick>
 800a54c:	4602      	mov	r2, r0
 800a54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a550:	1ad3      	subs	r3, r2, r3
 800a552:	2b02      	cmp	r3, #2
 800a554:	d901      	bls.n	800a55a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800a556:	2303      	movs	r3, #3
 800a558:	e2fe      	b.n	800ab58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a55a:	4b27      	ldr	r3, [pc, #156]	; (800a5f8 <HAL_RCC_OscConfig+0x244>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f003 0304 	and.w	r3, r3, #4
 800a562:	2b00      	cmp	r3, #0
 800a564:	d0f0      	beq.n	800a548 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a566:	4b24      	ldr	r3, [pc, #144]	; (800a5f8 <HAL_RCC_OscConfig+0x244>)
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	691b      	ldr	r3, [r3, #16]
 800a572:	061b      	lsls	r3, r3, #24
 800a574:	4920      	ldr	r1, [pc, #128]	; (800a5f8 <HAL_RCC_OscConfig+0x244>)
 800a576:	4313      	orrs	r3, r2
 800a578:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a57a:	e045      	b.n	800a608 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d026      	beq.n	800a5d2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a584:	4b1c      	ldr	r3, [pc, #112]	; (800a5f8 <HAL_RCC_OscConfig+0x244>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f023 0219 	bic.w	r2, r3, #25
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	68db      	ldr	r3, [r3, #12]
 800a590:	4919      	ldr	r1, [pc, #100]	; (800a5f8 <HAL_RCC_OscConfig+0x244>)
 800a592:	4313      	orrs	r3, r2
 800a594:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a596:	f7f9 fba5 	bl	8003ce4 <HAL_GetTick>
 800a59a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a59c:	e008      	b.n	800a5b0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a59e:	f7f9 fba1 	bl	8003ce4 <HAL_GetTick>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a6:	1ad3      	subs	r3, r2, r3
 800a5a8:	2b02      	cmp	r3, #2
 800a5aa:	d901      	bls.n	800a5b0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800a5ac:	2303      	movs	r3, #3
 800a5ae:	e2d3      	b.n	800ab58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a5b0:	4b11      	ldr	r3, [pc, #68]	; (800a5f8 <HAL_RCC_OscConfig+0x244>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f003 0304 	and.w	r3, r3, #4
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d0f0      	beq.n	800a59e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a5bc:	4b0e      	ldr	r3, [pc, #56]	; (800a5f8 <HAL_RCC_OscConfig+0x244>)
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	691b      	ldr	r3, [r3, #16]
 800a5c8:	061b      	lsls	r3, r3, #24
 800a5ca:	490b      	ldr	r1, [pc, #44]	; (800a5f8 <HAL_RCC_OscConfig+0x244>)
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	604b      	str	r3, [r1, #4]
 800a5d0:	e01a      	b.n	800a608 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a5d2:	4b09      	ldr	r3, [pc, #36]	; (800a5f8 <HAL_RCC_OscConfig+0x244>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a08      	ldr	r2, [pc, #32]	; (800a5f8 <HAL_RCC_OscConfig+0x244>)
 800a5d8:	f023 0301 	bic.w	r3, r3, #1
 800a5dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5de:	f7f9 fb81 	bl	8003ce4 <HAL_GetTick>
 800a5e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a5e4:	e00a      	b.n	800a5fc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a5e6:	f7f9 fb7d 	bl	8003ce4 <HAL_GetTick>
 800a5ea:	4602      	mov	r2, r0
 800a5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ee:	1ad3      	subs	r3, r2, r3
 800a5f0:	2b02      	cmp	r3, #2
 800a5f2:	d903      	bls.n	800a5fc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a5f4:	2303      	movs	r3, #3
 800a5f6:	e2af      	b.n	800ab58 <HAL_RCC_OscConfig+0x7a4>
 800a5f8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a5fc:	4b96      	ldr	r3, [pc, #600]	; (800a858 <HAL_RCC_OscConfig+0x4a4>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f003 0304 	and.w	r3, r3, #4
 800a604:	2b00      	cmp	r3, #0
 800a606:	d1ee      	bne.n	800a5e6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f003 0310 	and.w	r3, r3, #16
 800a610:	2b00      	cmp	r3, #0
 800a612:	d06a      	beq.n	800a6ea <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a614:	4b90      	ldr	r3, [pc, #576]	; (800a858 <HAL_RCC_OscConfig+0x4a4>)
 800a616:	691b      	ldr	r3, [r3, #16]
 800a618:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a61c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a61e:	4b8e      	ldr	r3, [pc, #568]	; (800a858 <HAL_RCC_OscConfig+0x4a4>)
 800a620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a622:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a624:	69bb      	ldr	r3, [r7, #24]
 800a626:	2b08      	cmp	r3, #8
 800a628:	d007      	beq.n	800a63a <HAL_RCC_OscConfig+0x286>
 800a62a:	69bb      	ldr	r3, [r7, #24]
 800a62c:	2b18      	cmp	r3, #24
 800a62e:	d11b      	bne.n	800a668 <HAL_RCC_OscConfig+0x2b4>
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	f003 0303 	and.w	r3, r3, #3
 800a636:	2b01      	cmp	r3, #1
 800a638:	d116      	bne.n	800a668 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a63a:	4b87      	ldr	r3, [pc, #540]	; (800a858 <HAL_RCC_OscConfig+0x4a4>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a642:	2b00      	cmp	r3, #0
 800a644:	d005      	beq.n	800a652 <HAL_RCC_OscConfig+0x29e>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	69db      	ldr	r3, [r3, #28]
 800a64a:	2b80      	cmp	r3, #128	; 0x80
 800a64c:	d001      	beq.n	800a652 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800a64e:	2301      	movs	r3, #1
 800a650:	e282      	b.n	800ab58 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a652:	4b81      	ldr	r3, [pc, #516]	; (800a858 <HAL_RCC_OscConfig+0x4a4>)
 800a654:	68db      	ldr	r3, [r3, #12]
 800a656:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6a1b      	ldr	r3, [r3, #32]
 800a65e:	061b      	lsls	r3, r3, #24
 800a660:	497d      	ldr	r1, [pc, #500]	; (800a858 <HAL_RCC_OscConfig+0x4a4>)
 800a662:	4313      	orrs	r3, r2
 800a664:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a666:	e040      	b.n	800a6ea <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	69db      	ldr	r3, [r3, #28]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d023      	beq.n	800a6b8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a670:	4b79      	ldr	r3, [pc, #484]	; (800a858 <HAL_RCC_OscConfig+0x4a4>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a78      	ldr	r2, [pc, #480]	; (800a858 <HAL_RCC_OscConfig+0x4a4>)
 800a676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a67a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a67c:	f7f9 fb32 	bl	8003ce4 <HAL_GetTick>
 800a680:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a682:	e008      	b.n	800a696 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a684:	f7f9 fb2e 	bl	8003ce4 <HAL_GetTick>
 800a688:	4602      	mov	r2, r0
 800a68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a68c:	1ad3      	subs	r3, r2, r3
 800a68e:	2b02      	cmp	r3, #2
 800a690:	d901      	bls.n	800a696 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a692:	2303      	movs	r3, #3
 800a694:	e260      	b.n	800ab58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a696:	4b70      	ldr	r3, [pc, #448]	; (800a858 <HAL_RCC_OscConfig+0x4a4>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d0f0      	beq.n	800a684 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a6a2:	4b6d      	ldr	r3, [pc, #436]	; (800a858 <HAL_RCC_OscConfig+0x4a4>)
 800a6a4:	68db      	ldr	r3, [r3, #12]
 800a6a6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6a1b      	ldr	r3, [r3, #32]
 800a6ae:	061b      	lsls	r3, r3, #24
 800a6b0:	4969      	ldr	r1, [pc, #420]	; (800a858 <HAL_RCC_OscConfig+0x4a4>)
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	60cb      	str	r3, [r1, #12]
 800a6b6:	e018      	b.n	800a6ea <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a6b8:	4b67      	ldr	r3, [pc, #412]	; (800a858 <HAL_RCC_OscConfig+0x4a4>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4a66      	ldr	r2, [pc, #408]	; (800a858 <HAL_RCC_OscConfig+0x4a4>)
 800a6be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6c4:	f7f9 fb0e 	bl	8003ce4 <HAL_GetTick>
 800a6c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a6ca:	e008      	b.n	800a6de <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a6cc:	f7f9 fb0a 	bl	8003ce4 <HAL_GetTick>
 800a6d0:	4602      	mov	r2, r0
 800a6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d4:	1ad3      	subs	r3, r2, r3
 800a6d6:	2b02      	cmp	r3, #2
 800a6d8:	d901      	bls.n	800a6de <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800a6da:	2303      	movs	r3, #3
 800a6dc:	e23c      	b.n	800ab58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a6de:	4b5e      	ldr	r3, [pc, #376]	; (800a858 <HAL_RCC_OscConfig+0x4a4>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d1f0      	bne.n	800a6cc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f003 0308 	and.w	r3, r3, #8
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d036      	beq.n	800a764 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	695b      	ldr	r3, [r3, #20]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d019      	beq.n	800a732 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a6fe:	4b56      	ldr	r3, [pc, #344]	; (800a858 <HAL_RCC_OscConfig+0x4a4>)
 800a700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a702:	4a55      	ldr	r2, [pc, #340]	; (800a858 <HAL_RCC_OscConfig+0x4a4>)
 800a704:	f043 0301 	orr.w	r3, r3, #1
 800a708:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a70a:	f7f9 faeb 	bl	8003ce4 <HAL_GetTick>
 800a70e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a710:	e008      	b.n	800a724 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a712:	f7f9 fae7 	bl	8003ce4 <HAL_GetTick>
 800a716:	4602      	mov	r2, r0
 800a718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71a:	1ad3      	subs	r3, r2, r3
 800a71c:	2b02      	cmp	r3, #2
 800a71e:	d901      	bls.n	800a724 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800a720:	2303      	movs	r3, #3
 800a722:	e219      	b.n	800ab58 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a724:	4b4c      	ldr	r3, [pc, #304]	; (800a858 <HAL_RCC_OscConfig+0x4a4>)
 800a726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a728:	f003 0302 	and.w	r3, r3, #2
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d0f0      	beq.n	800a712 <HAL_RCC_OscConfig+0x35e>
 800a730:	e018      	b.n	800a764 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a732:	4b49      	ldr	r3, [pc, #292]	; (800a858 <HAL_RCC_OscConfig+0x4a4>)
 800a734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a736:	4a48      	ldr	r2, [pc, #288]	; (800a858 <HAL_RCC_OscConfig+0x4a4>)
 800a738:	f023 0301 	bic.w	r3, r3, #1
 800a73c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a73e:	f7f9 fad1 	bl	8003ce4 <HAL_GetTick>
 800a742:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a744:	e008      	b.n	800a758 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a746:	f7f9 facd 	bl	8003ce4 <HAL_GetTick>
 800a74a:	4602      	mov	r2, r0
 800a74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74e:	1ad3      	subs	r3, r2, r3
 800a750:	2b02      	cmp	r3, #2
 800a752:	d901      	bls.n	800a758 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800a754:	2303      	movs	r3, #3
 800a756:	e1ff      	b.n	800ab58 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a758:	4b3f      	ldr	r3, [pc, #252]	; (800a858 <HAL_RCC_OscConfig+0x4a4>)
 800a75a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a75c:	f003 0302 	and.w	r3, r3, #2
 800a760:	2b00      	cmp	r3, #0
 800a762:	d1f0      	bne.n	800a746 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f003 0320 	and.w	r3, r3, #32
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d036      	beq.n	800a7de <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	699b      	ldr	r3, [r3, #24]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d019      	beq.n	800a7ac <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a778:	4b37      	ldr	r3, [pc, #220]	; (800a858 <HAL_RCC_OscConfig+0x4a4>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4a36      	ldr	r2, [pc, #216]	; (800a858 <HAL_RCC_OscConfig+0x4a4>)
 800a77e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a782:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a784:	f7f9 faae 	bl	8003ce4 <HAL_GetTick>
 800a788:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a78a:	e008      	b.n	800a79e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a78c:	f7f9 faaa 	bl	8003ce4 <HAL_GetTick>
 800a790:	4602      	mov	r2, r0
 800a792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a794:	1ad3      	subs	r3, r2, r3
 800a796:	2b02      	cmp	r3, #2
 800a798:	d901      	bls.n	800a79e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800a79a:	2303      	movs	r3, #3
 800a79c:	e1dc      	b.n	800ab58 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a79e:	4b2e      	ldr	r3, [pc, #184]	; (800a858 <HAL_RCC_OscConfig+0x4a4>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d0f0      	beq.n	800a78c <HAL_RCC_OscConfig+0x3d8>
 800a7aa:	e018      	b.n	800a7de <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a7ac:	4b2a      	ldr	r3, [pc, #168]	; (800a858 <HAL_RCC_OscConfig+0x4a4>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4a29      	ldr	r2, [pc, #164]	; (800a858 <HAL_RCC_OscConfig+0x4a4>)
 800a7b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a7b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a7b8:	f7f9 fa94 	bl	8003ce4 <HAL_GetTick>
 800a7bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a7be:	e008      	b.n	800a7d2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a7c0:	f7f9 fa90 	bl	8003ce4 <HAL_GetTick>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c8:	1ad3      	subs	r3, r2, r3
 800a7ca:	2b02      	cmp	r3, #2
 800a7cc:	d901      	bls.n	800a7d2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800a7ce:	2303      	movs	r3, #3
 800a7d0:	e1c2      	b.n	800ab58 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a7d2:	4b21      	ldr	r3, [pc, #132]	; (800a858 <HAL_RCC_OscConfig+0x4a4>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d1f0      	bne.n	800a7c0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f003 0304 	and.w	r3, r3, #4
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	f000 8086 	beq.w	800a8f8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a7ec:	4b1b      	ldr	r3, [pc, #108]	; (800a85c <HAL_RCC_OscConfig+0x4a8>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a1a      	ldr	r2, [pc, #104]	; (800a85c <HAL_RCC_OscConfig+0x4a8>)
 800a7f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a7f8:	f7f9 fa74 	bl	8003ce4 <HAL_GetTick>
 800a7fc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a7fe:	e008      	b.n	800a812 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a800:	f7f9 fa70 	bl	8003ce4 <HAL_GetTick>
 800a804:	4602      	mov	r2, r0
 800a806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a808:	1ad3      	subs	r3, r2, r3
 800a80a:	2b64      	cmp	r3, #100	; 0x64
 800a80c:	d901      	bls.n	800a812 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800a80e:	2303      	movs	r3, #3
 800a810:	e1a2      	b.n	800ab58 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a812:	4b12      	ldr	r3, [pc, #72]	; (800a85c <HAL_RCC_OscConfig+0x4a8>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d0f0      	beq.n	800a800 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	689b      	ldr	r3, [r3, #8]
 800a822:	2b01      	cmp	r3, #1
 800a824:	d106      	bne.n	800a834 <HAL_RCC_OscConfig+0x480>
 800a826:	4b0c      	ldr	r3, [pc, #48]	; (800a858 <HAL_RCC_OscConfig+0x4a4>)
 800a828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a82a:	4a0b      	ldr	r2, [pc, #44]	; (800a858 <HAL_RCC_OscConfig+0x4a4>)
 800a82c:	f043 0301 	orr.w	r3, r3, #1
 800a830:	6713      	str	r3, [r2, #112]	; 0x70
 800a832:	e032      	b.n	800a89a <HAL_RCC_OscConfig+0x4e6>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	689b      	ldr	r3, [r3, #8]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d111      	bne.n	800a860 <HAL_RCC_OscConfig+0x4ac>
 800a83c:	4b06      	ldr	r3, [pc, #24]	; (800a858 <HAL_RCC_OscConfig+0x4a4>)
 800a83e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a840:	4a05      	ldr	r2, [pc, #20]	; (800a858 <HAL_RCC_OscConfig+0x4a4>)
 800a842:	f023 0301 	bic.w	r3, r3, #1
 800a846:	6713      	str	r3, [r2, #112]	; 0x70
 800a848:	4b03      	ldr	r3, [pc, #12]	; (800a858 <HAL_RCC_OscConfig+0x4a4>)
 800a84a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a84c:	4a02      	ldr	r2, [pc, #8]	; (800a858 <HAL_RCC_OscConfig+0x4a4>)
 800a84e:	f023 0304 	bic.w	r3, r3, #4
 800a852:	6713      	str	r3, [r2, #112]	; 0x70
 800a854:	e021      	b.n	800a89a <HAL_RCC_OscConfig+0x4e6>
 800a856:	bf00      	nop
 800a858:	58024400 	.word	0x58024400
 800a85c:	58024800 	.word	0x58024800
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	689b      	ldr	r3, [r3, #8]
 800a864:	2b05      	cmp	r3, #5
 800a866:	d10c      	bne.n	800a882 <HAL_RCC_OscConfig+0x4ce>
 800a868:	4b83      	ldr	r3, [pc, #524]	; (800aa78 <HAL_RCC_OscConfig+0x6c4>)
 800a86a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a86c:	4a82      	ldr	r2, [pc, #520]	; (800aa78 <HAL_RCC_OscConfig+0x6c4>)
 800a86e:	f043 0304 	orr.w	r3, r3, #4
 800a872:	6713      	str	r3, [r2, #112]	; 0x70
 800a874:	4b80      	ldr	r3, [pc, #512]	; (800aa78 <HAL_RCC_OscConfig+0x6c4>)
 800a876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a878:	4a7f      	ldr	r2, [pc, #508]	; (800aa78 <HAL_RCC_OscConfig+0x6c4>)
 800a87a:	f043 0301 	orr.w	r3, r3, #1
 800a87e:	6713      	str	r3, [r2, #112]	; 0x70
 800a880:	e00b      	b.n	800a89a <HAL_RCC_OscConfig+0x4e6>
 800a882:	4b7d      	ldr	r3, [pc, #500]	; (800aa78 <HAL_RCC_OscConfig+0x6c4>)
 800a884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a886:	4a7c      	ldr	r2, [pc, #496]	; (800aa78 <HAL_RCC_OscConfig+0x6c4>)
 800a888:	f023 0301 	bic.w	r3, r3, #1
 800a88c:	6713      	str	r3, [r2, #112]	; 0x70
 800a88e:	4b7a      	ldr	r3, [pc, #488]	; (800aa78 <HAL_RCC_OscConfig+0x6c4>)
 800a890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a892:	4a79      	ldr	r2, [pc, #484]	; (800aa78 <HAL_RCC_OscConfig+0x6c4>)
 800a894:	f023 0304 	bic.w	r3, r3, #4
 800a898:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	689b      	ldr	r3, [r3, #8]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d015      	beq.n	800a8ce <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8a2:	f7f9 fa1f 	bl	8003ce4 <HAL_GetTick>
 800a8a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a8a8:	e00a      	b.n	800a8c0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a8aa:	f7f9 fa1b 	bl	8003ce4 <HAL_GetTick>
 800a8ae:	4602      	mov	r2, r0
 800a8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b2:	1ad3      	subs	r3, r2, r3
 800a8b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d901      	bls.n	800a8c0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800a8bc:	2303      	movs	r3, #3
 800a8be:	e14b      	b.n	800ab58 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a8c0:	4b6d      	ldr	r3, [pc, #436]	; (800aa78 <HAL_RCC_OscConfig+0x6c4>)
 800a8c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8c4:	f003 0302 	and.w	r3, r3, #2
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d0ee      	beq.n	800a8aa <HAL_RCC_OscConfig+0x4f6>
 800a8cc:	e014      	b.n	800a8f8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8ce:	f7f9 fa09 	bl	8003ce4 <HAL_GetTick>
 800a8d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a8d4:	e00a      	b.n	800a8ec <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a8d6:	f7f9 fa05 	bl	8003ce4 <HAL_GetTick>
 800a8da:	4602      	mov	r2, r0
 800a8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8de:	1ad3      	subs	r3, r2, r3
 800a8e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d901      	bls.n	800a8ec <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800a8e8:	2303      	movs	r3, #3
 800a8ea:	e135      	b.n	800ab58 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a8ec:	4b62      	ldr	r3, [pc, #392]	; (800aa78 <HAL_RCC_OscConfig+0x6c4>)
 800a8ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8f0:	f003 0302 	and.w	r3, r3, #2
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d1ee      	bne.n	800a8d6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	f000 812a 	beq.w	800ab56 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a902:	4b5d      	ldr	r3, [pc, #372]	; (800aa78 <HAL_RCC_OscConfig+0x6c4>)
 800a904:	691b      	ldr	r3, [r3, #16]
 800a906:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a90a:	2b18      	cmp	r3, #24
 800a90c:	f000 80ba 	beq.w	800aa84 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a914:	2b02      	cmp	r3, #2
 800a916:	f040 8095 	bne.w	800aa44 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a91a:	4b57      	ldr	r3, [pc, #348]	; (800aa78 <HAL_RCC_OscConfig+0x6c4>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4a56      	ldr	r2, [pc, #344]	; (800aa78 <HAL_RCC_OscConfig+0x6c4>)
 800a920:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a924:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a926:	f7f9 f9dd 	bl	8003ce4 <HAL_GetTick>
 800a92a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a92c:	e008      	b.n	800a940 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a92e:	f7f9 f9d9 	bl	8003ce4 <HAL_GetTick>
 800a932:	4602      	mov	r2, r0
 800a934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a936:	1ad3      	subs	r3, r2, r3
 800a938:	2b02      	cmp	r3, #2
 800a93a:	d901      	bls.n	800a940 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800a93c:	2303      	movs	r3, #3
 800a93e:	e10b      	b.n	800ab58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a940:	4b4d      	ldr	r3, [pc, #308]	; (800aa78 <HAL_RCC_OscConfig+0x6c4>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d1f0      	bne.n	800a92e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a94c:	4b4a      	ldr	r3, [pc, #296]	; (800aa78 <HAL_RCC_OscConfig+0x6c4>)
 800a94e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a950:	4b4a      	ldr	r3, [pc, #296]	; (800aa7c <HAL_RCC_OscConfig+0x6c8>)
 800a952:	4013      	ands	r3, r2
 800a954:	687a      	ldr	r2, [r7, #4]
 800a956:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a95c:	0112      	lsls	r2, r2, #4
 800a95e:	430a      	orrs	r2, r1
 800a960:	4945      	ldr	r1, [pc, #276]	; (800aa78 <HAL_RCC_OscConfig+0x6c4>)
 800a962:	4313      	orrs	r3, r2
 800a964:	628b      	str	r3, [r1, #40]	; 0x28
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a96a:	3b01      	subs	r3, #1
 800a96c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a974:	3b01      	subs	r3, #1
 800a976:	025b      	lsls	r3, r3, #9
 800a978:	b29b      	uxth	r3, r3
 800a97a:	431a      	orrs	r2, r3
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a980:	3b01      	subs	r3, #1
 800a982:	041b      	lsls	r3, r3, #16
 800a984:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a988:	431a      	orrs	r2, r3
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a98e:	3b01      	subs	r3, #1
 800a990:	061b      	lsls	r3, r3, #24
 800a992:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a996:	4938      	ldr	r1, [pc, #224]	; (800aa78 <HAL_RCC_OscConfig+0x6c4>)
 800a998:	4313      	orrs	r3, r2
 800a99a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a99c:	4b36      	ldr	r3, [pc, #216]	; (800aa78 <HAL_RCC_OscConfig+0x6c4>)
 800a99e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9a0:	4a35      	ldr	r2, [pc, #212]	; (800aa78 <HAL_RCC_OscConfig+0x6c4>)
 800a9a2:	f023 0301 	bic.w	r3, r3, #1
 800a9a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a9a8:	4b33      	ldr	r3, [pc, #204]	; (800aa78 <HAL_RCC_OscConfig+0x6c4>)
 800a9aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a9ac:	4b34      	ldr	r3, [pc, #208]	; (800aa80 <HAL_RCC_OscConfig+0x6cc>)
 800a9ae:	4013      	ands	r3, r2
 800a9b0:	687a      	ldr	r2, [r7, #4]
 800a9b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a9b4:	00d2      	lsls	r2, r2, #3
 800a9b6:	4930      	ldr	r1, [pc, #192]	; (800aa78 <HAL_RCC_OscConfig+0x6c4>)
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a9bc:	4b2e      	ldr	r3, [pc, #184]	; (800aa78 <HAL_RCC_OscConfig+0x6c4>)
 800a9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c0:	f023 020c 	bic.w	r2, r3, #12
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9c8:	492b      	ldr	r1, [pc, #172]	; (800aa78 <HAL_RCC_OscConfig+0x6c4>)
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a9ce:	4b2a      	ldr	r3, [pc, #168]	; (800aa78 <HAL_RCC_OscConfig+0x6c4>)
 800a9d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d2:	f023 0202 	bic.w	r2, r3, #2
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9da:	4927      	ldr	r1, [pc, #156]	; (800aa78 <HAL_RCC_OscConfig+0x6c4>)
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a9e0:	4b25      	ldr	r3, [pc, #148]	; (800aa78 <HAL_RCC_OscConfig+0x6c4>)
 800a9e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e4:	4a24      	ldr	r2, [pc, #144]	; (800aa78 <HAL_RCC_OscConfig+0x6c4>)
 800a9e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9ec:	4b22      	ldr	r3, [pc, #136]	; (800aa78 <HAL_RCC_OscConfig+0x6c4>)
 800a9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f0:	4a21      	ldr	r2, [pc, #132]	; (800aa78 <HAL_RCC_OscConfig+0x6c4>)
 800a9f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a9f8:	4b1f      	ldr	r3, [pc, #124]	; (800aa78 <HAL_RCC_OscConfig+0x6c4>)
 800a9fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9fc:	4a1e      	ldr	r2, [pc, #120]	; (800aa78 <HAL_RCC_OscConfig+0x6c4>)
 800a9fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aa02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800aa04:	4b1c      	ldr	r3, [pc, #112]	; (800aa78 <HAL_RCC_OscConfig+0x6c4>)
 800aa06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa08:	4a1b      	ldr	r2, [pc, #108]	; (800aa78 <HAL_RCC_OscConfig+0x6c4>)
 800aa0a:	f043 0301 	orr.w	r3, r3, #1
 800aa0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aa10:	4b19      	ldr	r3, [pc, #100]	; (800aa78 <HAL_RCC_OscConfig+0x6c4>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4a18      	ldr	r2, [pc, #96]	; (800aa78 <HAL_RCC_OscConfig+0x6c4>)
 800aa16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aa1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa1c:	f7f9 f962 	bl	8003ce4 <HAL_GetTick>
 800aa20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aa22:	e008      	b.n	800aa36 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa24:	f7f9 f95e 	bl	8003ce4 <HAL_GetTick>
 800aa28:	4602      	mov	r2, r0
 800aa2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa2c:	1ad3      	subs	r3, r2, r3
 800aa2e:	2b02      	cmp	r3, #2
 800aa30:	d901      	bls.n	800aa36 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800aa32:	2303      	movs	r3, #3
 800aa34:	e090      	b.n	800ab58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aa36:	4b10      	ldr	r3, [pc, #64]	; (800aa78 <HAL_RCC_OscConfig+0x6c4>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d0f0      	beq.n	800aa24 <HAL_RCC_OscConfig+0x670>
 800aa42:	e088      	b.n	800ab56 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa44:	4b0c      	ldr	r3, [pc, #48]	; (800aa78 <HAL_RCC_OscConfig+0x6c4>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	4a0b      	ldr	r2, [pc, #44]	; (800aa78 <HAL_RCC_OscConfig+0x6c4>)
 800aa4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aa4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa50:	f7f9 f948 	bl	8003ce4 <HAL_GetTick>
 800aa54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aa56:	e008      	b.n	800aa6a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa58:	f7f9 f944 	bl	8003ce4 <HAL_GetTick>
 800aa5c:	4602      	mov	r2, r0
 800aa5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa60:	1ad3      	subs	r3, r2, r3
 800aa62:	2b02      	cmp	r3, #2
 800aa64:	d901      	bls.n	800aa6a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800aa66:	2303      	movs	r3, #3
 800aa68:	e076      	b.n	800ab58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aa6a:	4b03      	ldr	r3, [pc, #12]	; (800aa78 <HAL_RCC_OscConfig+0x6c4>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d1f0      	bne.n	800aa58 <HAL_RCC_OscConfig+0x6a4>
 800aa76:	e06e      	b.n	800ab56 <HAL_RCC_OscConfig+0x7a2>
 800aa78:	58024400 	.word	0x58024400
 800aa7c:	fffffc0c 	.word	0xfffffc0c
 800aa80:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800aa84:	4b36      	ldr	r3, [pc, #216]	; (800ab60 <HAL_RCC_OscConfig+0x7ac>)
 800aa86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa88:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800aa8a:	4b35      	ldr	r3, [pc, #212]	; (800ab60 <HAL_RCC_OscConfig+0x7ac>)
 800aa8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa8e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	d031      	beq.n	800aafc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	f003 0203 	and.w	r2, r3, #3
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d12a      	bne.n	800aafc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	091b      	lsrs	r3, r3, #4
 800aaaa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d122      	bne.n	800aafc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aac0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d11a      	bne.n	800aafc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	0a5b      	lsrs	r3, r3, #9
 800aaca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aad2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d111      	bne.n	800aafc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	0c1b      	lsrs	r3, r3, #16
 800aadc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aae4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d108      	bne.n	800aafc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	0e1b      	lsrs	r3, r3, #24
 800aaee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaf6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d001      	beq.n	800ab00 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800aafc:	2301      	movs	r3, #1
 800aafe:	e02b      	b.n	800ab58 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ab00:	4b17      	ldr	r3, [pc, #92]	; (800ab60 <HAL_RCC_OscConfig+0x7ac>)
 800ab02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab04:	08db      	lsrs	r3, r3, #3
 800ab06:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab0a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab10:	693a      	ldr	r2, [r7, #16]
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d01f      	beq.n	800ab56 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800ab16:	4b12      	ldr	r3, [pc, #72]	; (800ab60 <HAL_RCC_OscConfig+0x7ac>)
 800ab18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab1a:	4a11      	ldr	r2, [pc, #68]	; (800ab60 <HAL_RCC_OscConfig+0x7ac>)
 800ab1c:	f023 0301 	bic.w	r3, r3, #1
 800ab20:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ab22:	f7f9 f8df 	bl	8003ce4 <HAL_GetTick>
 800ab26:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800ab28:	bf00      	nop
 800ab2a:	f7f9 f8db 	bl	8003ce4 <HAL_GetTick>
 800ab2e:	4602      	mov	r2, r0
 800ab30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d0f9      	beq.n	800ab2a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ab36:	4b0a      	ldr	r3, [pc, #40]	; (800ab60 <HAL_RCC_OscConfig+0x7ac>)
 800ab38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab3a:	4b0a      	ldr	r3, [pc, #40]	; (800ab64 <HAL_RCC_OscConfig+0x7b0>)
 800ab3c:	4013      	ands	r3, r2
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ab42:	00d2      	lsls	r2, r2, #3
 800ab44:	4906      	ldr	r1, [pc, #24]	; (800ab60 <HAL_RCC_OscConfig+0x7ac>)
 800ab46:	4313      	orrs	r3, r2
 800ab48:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800ab4a:	4b05      	ldr	r3, [pc, #20]	; (800ab60 <HAL_RCC_OscConfig+0x7ac>)
 800ab4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab4e:	4a04      	ldr	r2, [pc, #16]	; (800ab60 <HAL_RCC_OscConfig+0x7ac>)
 800ab50:	f043 0301 	orr.w	r3, r3, #1
 800ab54:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800ab56:	2300      	movs	r3, #0
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3730      	adds	r7, #48	; 0x30
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	58024400 	.word	0x58024400
 800ab64:	ffff0007 	.word	0xffff0007

0800ab68 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b086      	sub	sp, #24
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d101      	bne.n	800ab7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	e19c      	b.n	800aeb6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ab7c:	4b8a      	ldr	r3, [pc, #552]	; (800ada8 <HAL_RCC_ClockConfig+0x240>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f003 030f 	and.w	r3, r3, #15
 800ab84:	683a      	ldr	r2, [r7, #0]
 800ab86:	429a      	cmp	r2, r3
 800ab88:	d910      	bls.n	800abac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab8a:	4b87      	ldr	r3, [pc, #540]	; (800ada8 <HAL_RCC_ClockConfig+0x240>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f023 020f 	bic.w	r2, r3, #15
 800ab92:	4985      	ldr	r1, [pc, #532]	; (800ada8 <HAL_RCC_ClockConfig+0x240>)
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	4313      	orrs	r3, r2
 800ab98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab9a:	4b83      	ldr	r3, [pc, #524]	; (800ada8 <HAL_RCC_ClockConfig+0x240>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f003 030f 	and.w	r3, r3, #15
 800aba2:	683a      	ldr	r2, [r7, #0]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d001      	beq.n	800abac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800aba8:	2301      	movs	r3, #1
 800abaa:	e184      	b.n	800aeb6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f003 0304 	and.w	r3, r3, #4
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d010      	beq.n	800abda <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	691a      	ldr	r2, [r3, #16]
 800abbc:	4b7b      	ldr	r3, [pc, #492]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800abbe:	699b      	ldr	r3, [r3, #24]
 800abc0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d908      	bls.n	800abda <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800abc8:	4b78      	ldr	r3, [pc, #480]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800abca:	699b      	ldr	r3, [r3, #24]
 800abcc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	691b      	ldr	r3, [r3, #16]
 800abd4:	4975      	ldr	r1, [pc, #468]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800abd6:	4313      	orrs	r3, r2
 800abd8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f003 0308 	and.w	r3, r3, #8
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d010      	beq.n	800ac08 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	695a      	ldr	r2, [r3, #20]
 800abea:	4b70      	ldr	r3, [pc, #448]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800abec:	69db      	ldr	r3, [r3, #28]
 800abee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d908      	bls.n	800ac08 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800abf6:	4b6d      	ldr	r3, [pc, #436]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800abf8:	69db      	ldr	r3, [r3, #28]
 800abfa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	695b      	ldr	r3, [r3, #20]
 800ac02:	496a      	ldr	r1, [pc, #424]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800ac04:	4313      	orrs	r3, r2
 800ac06:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f003 0310 	and.w	r3, r3, #16
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d010      	beq.n	800ac36 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	699a      	ldr	r2, [r3, #24]
 800ac18:	4b64      	ldr	r3, [pc, #400]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800ac1a:	69db      	ldr	r3, [r3, #28]
 800ac1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d908      	bls.n	800ac36 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ac24:	4b61      	ldr	r3, [pc, #388]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800ac26:	69db      	ldr	r3, [r3, #28]
 800ac28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	699b      	ldr	r3, [r3, #24]
 800ac30:	495e      	ldr	r1, [pc, #376]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800ac32:	4313      	orrs	r3, r2
 800ac34:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f003 0320 	and.w	r3, r3, #32
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d010      	beq.n	800ac64 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	69da      	ldr	r2, [r3, #28]
 800ac46:	4b59      	ldr	r3, [pc, #356]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800ac48:	6a1b      	ldr	r3, [r3, #32]
 800ac4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d908      	bls.n	800ac64 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ac52:	4b56      	ldr	r3, [pc, #344]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800ac54:	6a1b      	ldr	r3, [r3, #32]
 800ac56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	69db      	ldr	r3, [r3, #28]
 800ac5e:	4953      	ldr	r1, [pc, #332]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800ac60:	4313      	orrs	r3, r2
 800ac62:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f003 0302 	and.w	r3, r3, #2
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d010      	beq.n	800ac92 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	68da      	ldr	r2, [r3, #12]
 800ac74:	4b4d      	ldr	r3, [pc, #308]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800ac76:	699b      	ldr	r3, [r3, #24]
 800ac78:	f003 030f 	and.w	r3, r3, #15
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d908      	bls.n	800ac92 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ac80:	4b4a      	ldr	r3, [pc, #296]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800ac82:	699b      	ldr	r3, [r3, #24]
 800ac84:	f023 020f 	bic.w	r2, r3, #15
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	68db      	ldr	r3, [r3, #12]
 800ac8c:	4947      	ldr	r1, [pc, #284]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f003 0301 	and.w	r3, r3, #1
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d055      	beq.n	800ad4a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800ac9e:	4b43      	ldr	r3, [pc, #268]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800aca0:	699b      	ldr	r3, [r3, #24]
 800aca2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	689b      	ldr	r3, [r3, #8]
 800acaa:	4940      	ldr	r1, [pc, #256]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800acac:	4313      	orrs	r3, r2
 800acae:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	2b02      	cmp	r3, #2
 800acb6:	d107      	bne.n	800acc8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800acb8:	4b3c      	ldr	r3, [pc, #240]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d121      	bne.n	800ad08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800acc4:	2301      	movs	r3, #1
 800acc6:	e0f6      	b.n	800aeb6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	2b03      	cmp	r3, #3
 800acce:	d107      	bne.n	800ace0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800acd0:	4b36      	ldr	r3, [pc, #216]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d115      	bne.n	800ad08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800acdc:	2301      	movs	r3, #1
 800acde:	e0ea      	b.n	800aeb6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	d107      	bne.n	800acf8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ace8:	4b30      	ldr	r3, [pc, #192]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d109      	bne.n	800ad08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800acf4:	2301      	movs	r3, #1
 800acf6:	e0de      	b.n	800aeb6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800acf8:	4b2c      	ldr	r3, [pc, #176]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f003 0304 	and.w	r3, r3, #4
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d101      	bne.n	800ad08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ad04:	2301      	movs	r3, #1
 800ad06:	e0d6      	b.n	800aeb6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ad08:	4b28      	ldr	r3, [pc, #160]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800ad0a:	691b      	ldr	r3, [r3, #16]
 800ad0c:	f023 0207 	bic.w	r2, r3, #7
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	4925      	ldr	r1, [pc, #148]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800ad16:	4313      	orrs	r3, r2
 800ad18:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad1a:	f7f8 ffe3 	bl	8003ce4 <HAL_GetTick>
 800ad1e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad20:	e00a      	b.n	800ad38 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ad22:	f7f8 ffdf 	bl	8003ce4 <HAL_GetTick>
 800ad26:	4602      	mov	r2, r0
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	1ad3      	subs	r3, r2, r3
 800ad2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d901      	bls.n	800ad38 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800ad34:	2303      	movs	r3, #3
 800ad36:	e0be      	b.n	800aeb6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad38:	4b1c      	ldr	r3, [pc, #112]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800ad3a:	691b      	ldr	r3, [r3, #16]
 800ad3c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	00db      	lsls	r3, r3, #3
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d1eb      	bne.n	800ad22 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f003 0302 	and.w	r3, r3, #2
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d010      	beq.n	800ad78 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	68da      	ldr	r2, [r3, #12]
 800ad5a:	4b14      	ldr	r3, [pc, #80]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800ad5c:	699b      	ldr	r3, [r3, #24]
 800ad5e:	f003 030f 	and.w	r3, r3, #15
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d208      	bcs.n	800ad78 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad66:	4b11      	ldr	r3, [pc, #68]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800ad68:	699b      	ldr	r3, [r3, #24]
 800ad6a:	f023 020f 	bic.w	r2, r3, #15
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	68db      	ldr	r3, [r3, #12]
 800ad72:	490e      	ldr	r1, [pc, #56]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800ad74:	4313      	orrs	r3, r2
 800ad76:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ad78:	4b0b      	ldr	r3, [pc, #44]	; (800ada8 <HAL_RCC_ClockConfig+0x240>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f003 030f 	and.w	r3, r3, #15
 800ad80:	683a      	ldr	r2, [r7, #0]
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d214      	bcs.n	800adb0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad86:	4b08      	ldr	r3, [pc, #32]	; (800ada8 <HAL_RCC_ClockConfig+0x240>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f023 020f 	bic.w	r2, r3, #15
 800ad8e:	4906      	ldr	r1, [pc, #24]	; (800ada8 <HAL_RCC_ClockConfig+0x240>)
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	4313      	orrs	r3, r2
 800ad94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad96:	4b04      	ldr	r3, [pc, #16]	; (800ada8 <HAL_RCC_ClockConfig+0x240>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f003 030f 	and.w	r3, r3, #15
 800ad9e:	683a      	ldr	r2, [r7, #0]
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d005      	beq.n	800adb0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800ada4:	2301      	movs	r3, #1
 800ada6:	e086      	b.n	800aeb6 <HAL_RCC_ClockConfig+0x34e>
 800ada8:	52002000 	.word	0x52002000
 800adac:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f003 0304 	and.w	r3, r3, #4
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d010      	beq.n	800adde <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	691a      	ldr	r2, [r3, #16]
 800adc0:	4b3f      	ldr	r3, [pc, #252]	; (800aec0 <HAL_RCC_ClockConfig+0x358>)
 800adc2:	699b      	ldr	r3, [r3, #24]
 800adc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800adc8:	429a      	cmp	r2, r3
 800adca:	d208      	bcs.n	800adde <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800adcc:	4b3c      	ldr	r3, [pc, #240]	; (800aec0 <HAL_RCC_ClockConfig+0x358>)
 800adce:	699b      	ldr	r3, [r3, #24]
 800add0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	691b      	ldr	r3, [r3, #16]
 800add8:	4939      	ldr	r1, [pc, #228]	; (800aec0 <HAL_RCC_ClockConfig+0x358>)
 800adda:	4313      	orrs	r3, r2
 800addc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f003 0308 	and.w	r3, r3, #8
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d010      	beq.n	800ae0c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	695a      	ldr	r2, [r3, #20]
 800adee:	4b34      	ldr	r3, [pc, #208]	; (800aec0 <HAL_RCC_ClockConfig+0x358>)
 800adf0:	69db      	ldr	r3, [r3, #28]
 800adf2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d208      	bcs.n	800ae0c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800adfa:	4b31      	ldr	r3, [pc, #196]	; (800aec0 <HAL_RCC_ClockConfig+0x358>)
 800adfc:	69db      	ldr	r3, [r3, #28]
 800adfe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	695b      	ldr	r3, [r3, #20]
 800ae06:	492e      	ldr	r1, [pc, #184]	; (800aec0 <HAL_RCC_ClockConfig+0x358>)
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f003 0310 	and.w	r3, r3, #16
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d010      	beq.n	800ae3a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	699a      	ldr	r2, [r3, #24]
 800ae1c:	4b28      	ldr	r3, [pc, #160]	; (800aec0 <HAL_RCC_ClockConfig+0x358>)
 800ae1e:	69db      	ldr	r3, [r3, #28]
 800ae20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d208      	bcs.n	800ae3a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ae28:	4b25      	ldr	r3, [pc, #148]	; (800aec0 <HAL_RCC_ClockConfig+0x358>)
 800ae2a:	69db      	ldr	r3, [r3, #28]
 800ae2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	699b      	ldr	r3, [r3, #24]
 800ae34:	4922      	ldr	r1, [pc, #136]	; (800aec0 <HAL_RCC_ClockConfig+0x358>)
 800ae36:	4313      	orrs	r3, r2
 800ae38:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f003 0320 	and.w	r3, r3, #32
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d010      	beq.n	800ae68 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	69da      	ldr	r2, [r3, #28]
 800ae4a:	4b1d      	ldr	r3, [pc, #116]	; (800aec0 <HAL_RCC_ClockConfig+0x358>)
 800ae4c:	6a1b      	ldr	r3, [r3, #32]
 800ae4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d208      	bcs.n	800ae68 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ae56:	4b1a      	ldr	r3, [pc, #104]	; (800aec0 <HAL_RCC_ClockConfig+0x358>)
 800ae58:	6a1b      	ldr	r3, [r3, #32]
 800ae5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	69db      	ldr	r3, [r3, #28]
 800ae62:	4917      	ldr	r1, [pc, #92]	; (800aec0 <HAL_RCC_ClockConfig+0x358>)
 800ae64:	4313      	orrs	r3, r2
 800ae66:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ae68:	f000 f89e 	bl	800afa8 <HAL_RCC_GetSysClockFreq>
 800ae6c:	4602      	mov	r2, r0
 800ae6e:	4b14      	ldr	r3, [pc, #80]	; (800aec0 <HAL_RCC_ClockConfig+0x358>)
 800ae70:	699b      	ldr	r3, [r3, #24]
 800ae72:	0a1b      	lsrs	r3, r3, #8
 800ae74:	f003 030f 	and.w	r3, r3, #15
 800ae78:	4912      	ldr	r1, [pc, #72]	; (800aec4 <HAL_RCC_ClockConfig+0x35c>)
 800ae7a:	5ccb      	ldrb	r3, [r1, r3]
 800ae7c:	f003 031f 	and.w	r3, r3, #31
 800ae80:	fa22 f303 	lsr.w	r3, r2, r3
 800ae84:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ae86:	4b0e      	ldr	r3, [pc, #56]	; (800aec0 <HAL_RCC_ClockConfig+0x358>)
 800ae88:	699b      	ldr	r3, [r3, #24]
 800ae8a:	f003 030f 	and.w	r3, r3, #15
 800ae8e:	4a0d      	ldr	r2, [pc, #52]	; (800aec4 <HAL_RCC_ClockConfig+0x35c>)
 800ae90:	5cd3      	ldrb	r3, [r2, r3]
 800ae92:	f003 031f 	and.w	r3, r3, #31
 800ae96:	693a      	ldr	r2, [r7, #16]
 800ae98:	fa22 f303 	lsr.w	r3, r2, r3
 800ae9c:	4a0a      	ldr	r2, [pc, #40]	; (800aec8 <HAL_RCC_ClockConfig+0x360>)
 800ae9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800aea0:	4a0a      	ldr	r2, [pc, #40]	; (800aecc <HAL_RCC_ClockConfig+0x364>)
 800aea2:	693b      	ldr	r3, [r7, #16]
 800aea4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800aea6:	4b0a      	ldr	r3, [pc, #40]	; (800aed0 <HAL_RCC_ClockConfig+0x368>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7f8 fed0 	bl	8003c50 <HAL_InitTick>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800aeb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3718      	adds	r7, #24
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
 800aebe:	bf00      	nop
 800aec0:	58024400 	.word	0x58024400
 800aec4:	0801c38c 	.word	0x0801c38c
 800aec8:	24000104 	.word	0x24000104
 800aecc:	24000100 	.word	0x24000100
 800aed0:	24000108 	.word	0x24000108

0800aed4 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b08c      	sub	sp, #48	; 0x30
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	60f8      	str	r0, [r7, #12]
 800aedc:	60b9      	str	r1, [r7, #8]
 800aede:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d12a      	bne.n	800af3c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800aee6:	4b2d      	ldr	r3, [pc, #180]	; (800af9c <HAL_RCC_MCOConfig+0xc8>)
 800aee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aeec:	4a2b      	ldr	r2, [pc, #172]	; (800af9c <HAL_RCC_MCOConfig+0xc8>)
 800aeee:	f043 0301 	orr.w	r3, r3, #1
 800aef2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800aef6:	4b29      	ldr	r3, [pc, #164]	; (800af9c <HAL_RCC_MCOConfig+0xc8>)
 800aef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aefc:	f003 0301 	and.w	r3, r3, #1
 800af00:	61bb      	str	r3, [r7, #24]
 800af02:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800af04:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af0a:	2302      	movs	r3, #2
 800af0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af0e:	2303      	movs	r3, #3
 800af10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af12:	2300      	movs	r3, #0
 800af14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800af16:	2300      	movs	r3, #0
 800af18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800af1a:	f107 031c 	add.w	r3, r7, #28
 800af1e:	4619      	mov	r1, r3
 800af20:	481f      	ldr	r0, [pc, #124]	; (800afa0 <HAL_RCC_MCOConfig+0xcc>)
 800af22:	f7fd fc29 	bl	8008778 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800af26:	4b1d      	ldr	r3, [pc, #116]	; (800af9c <HAL_RCC_MCOConfig+0xc8>)
 800af28:	691b      	ldr	r3, [r3, #16]
 800af2a:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800af2e:	68b9      	ldr	r1, [r7, #8]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	430b      	orrs	r3, r1
 800af34:	4919      	ldr	r1, [pc, #100]	; (800af9c <HAL_RCC_MCOConfig+0xc8>)
 800af36:	4313      	orrs	r3, r2
 800af38:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800af3a:	e02a      	b.n	800af92 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800af3c:	4b17      	ldr	r3, [pc, #92]	; (800af9c <HAL_RCC_MCOConfig+0xc8>)
 800af3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800af42:	4a16      	ldr	r2, [pc, #88]	; (800af9c <HAL_RCC_MCOConfig+0xc8>)
 800af44:	f043 0304 	orr.w	r3, r3, #4
 800af48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800af4c:	4b13      	ldr	r3, [pc, #76]	; (800af9c <HAL_RCC_MCOConfig+0xc8>)
 800af4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800af52:	f003 0304 	and.w	r3, r3, #4
 800af56:	617b      	str	r3, [r7, #20]
 800af58:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800af5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af60:	2302      	movs	r3, #2
 800af62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af64:	2303      	movs	r3, #3
 800af66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af68:	2300      	movs	r3, #0
 800af6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800af6c:	2300      	movs	r3, #0
 800af6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800af70:	f107 031c 	add.w	r3, r7, #28
 800af74:	4619      	mov	r1, r3
 800af76:	480b      	ldr	r0, [pc, #44]	; (800afa4 <HAL_RCC_MCOConfig+0xd0>)
 800af78:	f7fd fbfe 	bl	8008778 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800af7c:	4b07      	ldr	r3, [pc, #28]	; (800af9c <HAL_RCC_MCOConfig+0xc8>)
 800af7e:	691b      	ldr	r3, [r3, #16]
 800af80:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	01d9      	lsls	r1, r3, #7
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	430b      	orrs	r3, r1
 800af8c:	4903      	ldr	r1, [pc, #12]	; (800af9c <HAL_RCC_MCOConfig+0xc8>)
 800af8e:	4313      	orrs	r3, r2
 800af90:	610b      	str	r3, [r1, #16]
}
 800af92:	bf00      	nop
 800af94:	3730      	adds	r7, #48	; 0x30
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	bf00      	nop
 800af9c:	58024400 	.word	0x58024400
 800afa0:	58020000 	.word	0x58020000
 800afa4:	58020800 	.word	0x58020800

0800afa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b089      	sub	sp, #36	; 0x24
 800afac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800afae:	4bb3      	ldr	r3, [pc, #716]	; (800b27c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afb0:	691b      	ldr	r3, [r3, #16]
 800afb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800afb6:	2b18      	cmp	r3, #24
 800afb8:	f200 8155 	bhi.w	800b266 <HAL_RCC_GetSysClockFreq+0x2be>
 800afbc:	a201      	add	r2, pc, #4	; (adr r2, 800afc4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800afbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afc2:	bf00      	nop
 800afc4:	0800b029 	.word	0x0800b029
 800afc8:	0800b267 	.word	0x0800b267
 800afcc:	0800b267 	.word	0x0800b267
 800afd0:	0800b267 	.word	0x0800b267
 800afd4:	0800b267 	.word	0x0800b267
 800afd8:	0800b267 	.word	0x0800b267
 800afdc:	0800b267 	.word	0x0800b267
 800afe0:	0800b267 	.word	0x0800b267
 800afe4:	0800b04f 	.word	0x0800b04f
 800afe8:	0800b267 	.word	0x0800b267
 800afec:	0800b267 	.word	0x0800b267
 800aff0:	0800b267 	.word	0x0800b267
 800aff4:	0800b267 	.word	0x0800b267
 800aff8:	0800b267 	.word	0x0800b267
 800affc:	0800b267 	.word	0x0800b267
 800b000:	0800b267 	.word	0x0800b267
 800b004:	0800b055 	.word	0x0800b055
 800b008:	0800b267 	.word	0x0800b267
 800b00c:	0800b267 	.word	0x0800b267
 800b010:	0800b267 	.word	0x0800b267
 800b014:	0800b267 	.word	0x0800b267
 800b018:	0800b267 	.word	0x0800b267
 800b01c:	0800b267 	.word	0x0800b267
 800b020:	0800b267 	.word	0x0800b267
 800b024:	0800b05b 	.word	0x0800b05b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b028:	4b94      	ldr	r3, [pc, #592]	; (800b27c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f003 0320 	and.w	r3, r3, #32
 800b030:	2b00      	cmp	r3, #0
 800b032:	d009      	beq.n	800b048 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b034:	4b91      	ldr	r3, [pc, #580]	; (800b27c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	08db      	lsrs	r3, r3, #3
 800b03a:	f003 0303 	and.w	r3, r3, #3
 800b03e:	4a90      	ldr	r2, [pc, #576]	; (800b280 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b040:	fa22 f303 	lsr.w	r3, r2, r3
 800b044:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b046:	e111      	b.n	800b26c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b048:	4b8d      	ldr	r3, [pc, #564]	; (800b280 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b04a:	61bb      	str	r3, [r7, #24]
      break;
 800b04c:	e10e      	b.n	800b26c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b04e:	4b8d      	ldr	r3, [pc, #564]	; (800b284 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b050:	61bb      	str	r3, [r7, #24]
      break;
 800b052:	e10b      	b.n	800b26c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b054:	4b8c      	ldr	r3, [pc, #560]	; (800b288 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b056:	61bb      	str	r3, [r7, #24]
      break;
 800b058:	e108      	b.n	800b26c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b05a:	4b88      	ldr	r3, [pc, #544]	; (800b27c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b05c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b05e:	f003 0303 	and.w	r3, r3, #3
 800b062:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b064:	4b85      	ldr	r3, [pc, #532]	; (800b27c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b068:	091b      	lsrs	r3, r3, #4
 800b06a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b06e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b070:	4b82      	ldr	r3, [pc, #520]	; (800b27c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b074:	f003 0301 	and.w	r3, r3, #1
 800b078:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b07a:	4b80      	ldr	r3, [pc, #512]	; (800b27c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b07c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b07e:	08db      	lsrs	r3, r3, #3
 800b080:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b084:	68fa      	ldr	r2, [r7, #12]
 800b086:	fb02 f303 	mul.w	r3, r2, r3
 800b08a:	ee07 3a90 	vmov	s15, r3
 800b08e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b092:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	f000 80e1 	beq.w	800b260 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	2b02      	cmp	r3, #2
 800b0a2:	f000 8083 	beq.w	800b1ac <HAL_RCC_GetSysClockFreq+0x204>
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	2b02      	cmp	r3, #2
 800b0aa:	f200 80a1 	bhi.w	800b1f0 <HAL_RCC_GetSysClockFreq+0x248>
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d003      	beq.n	800b0bc <HAL_RCC_GetSysClockFreq+0x114>
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	2b01      	cmp	r3, #1
 800b0b8:	d056      	beq.n	800b168 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b0ba:	e099      	b.n	800b1f0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0bc:	4b6f      	ldr	r3, [pc, #444]	; (800b27c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f003 0320 	and.w	r3, r3, #32
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d02d      	beq.n	800b124 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b0c8:	4b6c      	ldr	r3, [pc, #432]	; (800b27c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	08db      	lsrs	r3, r3, #3
 800b0ce:	f003 0303 	and.w	r3, r3, #3
 800b0d2:	4a6b      	ldr	r2, [pc, #428]	; (800b280 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b0d4:	fa22 f303 	lsr.w	r3, r2, r3
 800b0d8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	ee07 3a90 	vmov	s15, r3
 800b0e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	ee07 3a90 	vmov	s15, r3
 800b0ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0f2:	4b62      	ldr	r3, [pc, #392]	; (800b27c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0fa:	ee07 3a90 	vmov	s15, r3
 800b0fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b102:	ed97 6a02 	vldr	s12, [r7, #8]
 800b106:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b28c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b10a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b10e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b11a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b11e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b122:	e087      	b.n	800b234 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	ee07 3a90 	vmov	s15, r3
 800b12a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b12e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b290 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b136:	4b51      	ldr	r3, [pc, #324]	; (800b27c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b13a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b13e:	ee07 3a90 	vmov	s15, r3
 800b142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b146:	ed97 6a02 	vldr	s12, [r7, #8]
 800b14a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b28c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b14e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b15a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b15e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b162:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b166:	e065      	b.n	800b234 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	ee07 3a90 	vmov	s15, r3
 800b16e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b172:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b294 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b17a:	4b40      	ldr	r3, [pc, #256]	; (800b27c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b17c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b17e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b182:	ee07 3a90 	vmov	s15, r3
 800b186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b18a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b18e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b28c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b19a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b19e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b1aa:	e043      	b.n	800b234 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	ee07 3a90 	vmov	s15, r3
 800b1b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1b6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b298 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b1ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1be:	4b2f      	ldr	r3, [pc, #188]	; (800b27c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1c6:	ee07 3a90 	vmov	s15, r3
 800b1ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1ce:	ed97 6a02 	vldr	s12, [r7, #8]
 800b1d2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b28c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b1d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b1ee:	e021      	b.n	800b234 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	ee07 3a90 	vmov	s15, r3
 800b1f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1fa:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b294 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b1fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b202:	4b1e      	ldr	r3, [pc, #120]	; (800b27c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b20a:	ee07 3a90 	vmov	s15, r3
 800b20e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b212:	ed97 6a02 	vldr	s12, [r7, #8]
 800b216:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b28c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b21a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b21e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b22a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b22e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b232:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b234:	4b11      	ldr	r3, [pc, #68]	; (800b27c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b238:	0a5b      	lsrs	r3, r3, #9
 800b23a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b23e:	3301      	adds	r3, #1
 800b240:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	ee07 3a90 	vmov	s15, r3
 800b248:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b24c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b254:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b258:	ee17 3a90 	vmov	r3, s15
 800b25c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b25e:	e005      	b.n	800b26c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b260:	2300      	movs	r3, #0
 800b262:	61bb      	str	r3, [r7, #24]
      break;
 800b264:	e002      	b.n	800b26c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b266:	4b07      	ldr	r3, [pc, #28]	; (800b284 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b268:	61bb      	str	r3, [r7, #24]
      break;
 800b26a:	bf00      	nop
  }

  return sysclockfreq;
 800b26c:	69bb      	ldr	r3, [r7, #24]
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3724      	adds	r7, #36	; 0x24
 800b272:	46bd      	mov	sp, r7
 800b274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b278:	4770      	bx	lr
 800b27a:	bf00      	nop
 800b27c:	58024400 	.word	0x58024400
 800b280:	03d09000 	.word	0x03d09000
 800b284:	003d0900 	.word	0x003d0900
 800b288:	02faf080 	.word	0x02faf080
 800b28c:	46000000 	.word	0x46000000
 800b290:	4c742400 	.word	0x4c742400
 800b294:	4a742400 	.word	0x4a742400
 800b298:	4c3ebc20 	.word	0x4c3ebc20

0800b29c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b082      	sub	sp, #8
 800b2a0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b2a2:	f7ff fe81 	bl	800afa8 <HAL_RCC_GetSysClockFreq>
 800b2a6:	4602      	mov	r2, r0
 800b2a8:	4b10      	ldr	r3, [pc, #64]	; (800b2ec <HAL_RCC_GetHCLKFreq+0x50>)
 800b2aa:	699b      	ldr	r3, [r3, #24]
 800b2ac:	0a1b      	lsrs	r3, r3, #8
 800b2ae:	f003 030f 	and.w	r3, r3, #15
 800b2b2:	490f      	ldr	r1, [pc, #60]	; (800b2f0 <HAL_RCC_GetHCLKFreq+0x54>)
 800b2b4:	5ccb      	ldrb	r3, [r1, r3]
 800b2b6:	f003 031f 	and.w	r3, r3, #31
 800b2ba:	fa22 f303 	lsr.w	r3, r2, r3
 800b2be:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b2c0:	4b0a      	ldr	r3, [pc, #40]	; (800b2ec <HAL_RCC_GetHCLKFreq+0x50>)
 800b2c2:	699b      	ldr	r3, [r3, #24]
 800b2c4:	f003 030f 	and.w	r3, r3, #15
 800b2c8:	4a09      	ldr	r2, [pc, #36]	; (800b2f0 <HAL_RCC_GetHCLKFreq+0x54>)
 800b2ca:	5cd3      	ldrb	r3, [r2, r3]
 800b2cc:	f003 031f 	and.w	r3, r3, #31
 800b2d0:	687a      	ldr	r2, [r7, #4]
 800b2d2:	fa22 f303 	lsr.w	r3, r2, r3
 800b2d6:	4a07      	ldr	r2, [pc, #28]	; (800b2f4 <HAL_RCC_GetHCLKFreq+0x58>)
 800b2d8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b2da:	4a07      	ldr	r2, [pc, #28]	; (800b2f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b2e0:	4b04      	ldr	r3, [pc, #16]	; (800b2f4 <HAL_RCC_GetHCLKFreq+0x58>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3708      	adds	r7, #8
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}
 800b2ec:	58024400 	.word	0x58024400
 800b2f0:	0801c38c 	.word	0x0801c38c
 800b2f4:	24000104 	.word	0x24000104
 800b2f8:	24000100 	.word	0x24000100

0800b2fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b300:	f7ff ffcc 	bl	800b29c <HAL_RCC_GetHCLKFreq>
 800b304:	4602      	mov	r2, r0
 800b306:	4b06      	ldr	r3, [pc, #24]	; (800b320 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b308:	69db      	ldr	r3, [r3, #28]
 800b30a:	091b      	lsrs	r3, r3, #4
 800b30c:	f003 0307 	and.w	r3, r3, #7
 800b310:	4904      	ldr	r1, [pc, #16]	; (800b324 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b312:	5ccb      	ldrb	r3, [r1, r3]
 800b314:	f003 031f 	and.w	r3, r3, #31
 800b318:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	bd80      	pop	{r7, pc}
 800b320:	58024400 	.word	0x58024400
 800b324:	0801c38c 	.word	0x0801c38c

0800b328 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b32c:	f7ff ffb6 	bl	800b29c <HAL_RCC_GetHCLKFreq>
 800b330:	4602      	mov	r2, r0
 800b332:	4b06      	ldr	r3, [pc, #24]	; (800b34c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b334:	69db      	ldr	r3, [r3, #28]
 800b336:	0a1b      	lsrs	r3, r3, #8
 800b338:	f003 0307 	and.w	r3, r3, #7
 800b33c:	4904      	ldr	r1, [pc, #16]	; (800b350 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b33e:	5ccb      	ldrb	r3, [r1, r3]
 800b340:	f003 031f 	and.w	r3, r3, #31
 800b344:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b348:	4618      	mov	r0, r3
 800b34a:	bd80      	pop	{r7, pc}
 800b34c:	58024400 	.word	0x58024400
 800b350:	0801c38c 	.word	0x0801c38c

0800b354 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b358:	b0c6      	sub	sp, #280	; 0x118
 800b35a:	af00      	add	r7, sp, #0
 800b35c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b360:	2300      	movs	r3, #0
 800b362:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b366:	2300      	movs	r3, #0
 800b368:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b36c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b374:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b378:	2500      	movs	r5, #0
 800b37a:	ea54 0305 	orrs.w	r3, r4, r5
 800b37e:	d049      	beq.n	800b414 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b380:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b384:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b386:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b38a:	d02f      	beq.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b38c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b390:	d828      	bhi.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b392:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b396:	d01a      	beq.n	800b3ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b398:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b39c:	d822      	bhi.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d003      	beq.n	800b3aa <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b3a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3a6:	d007      	beq.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b3a8:	e01c      	b.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3aa:	4bab      	ldr	r3, [pc, #684]	; (800b658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b3ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ae:	4aaa      	ldr	r2, [pc, #680]	; (800b658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b3b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b3b6:	e01a      	b.n	800b3ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b3b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3bc:	3308      	adds	r3, #8
 800b3be:	2102      	movs	r1, #2
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f002 fa49 	bl	800d858 <RCCEx_PLL2_Config>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b3cc:	e00f      	b.n	800b3ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b3ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3d2:	3328      	adds	r3, #40	; 0x28
 800b3d4:	2102      	movs	r1, #2
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f002 faf0 	bl	800d9bc <RCCEx_PLL3_Config>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b3e2:	e004      	b.n	800b3ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b3ea:	e000      	b.n	800b3ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b3ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3ee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d10a      	bne.n	800b40c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b3f6:	4b98      	ldr	r3, [pc, #608]	; (800b658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b3f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3fa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b3fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b402:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b404:	4a94      	ldr	r2, [pc, #592]	; (800b658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b406:	430b      	orrs	r3, r1
 800b408:	6513      	str	r3, [r2, #80]	; 0x50
 800b40a:	e003      	b.n	800b414 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b40c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b410:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b414:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b41c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b420:	f04f 0900 	mov.w	r9, #0
 800b424:	ea58 0309 	orrs.w	r3, r8, r9
 800b428:	d047      	beq.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b42a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b42e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b430:	2b04      	cmp	r3, #4
 800b432:	d82a      	bhi.n	800b48a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b434:	a201      	add	r2, pc, #4	; (adr r2, 800b43c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b43a:	bf00      	nop
 800b43c:	0800b451 	.word	0x0800b451
 800b440:	0800b45f 	.word	0x0800b45f
 800b444:	0800b475 	.word	0x0800b475
 800b448:	0800b493 	.word	0x0800b493
 800b44c:	0800b493 	.word	0x0800b493
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b450:	4b81      	ldr	r3, [pc, #516]	; (800b658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b454:	4a80      	ldr	r2, [pc, #512]	; (800b658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b45a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b45c:	e01a      	b.n	800b494 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b45e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b462:	3308      	adds	r3, #8
 800b464:	2100      	movs	r1, #0
 800b466:	4618      	mov	r0, r3
 800b468:	f002 f9f6 	bl	800d858 <RCCEx_PLL2_Config>
 800b46c:	4603      	mov	r3, r0
 800b46e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b472:	e00f      	b.n	800b494 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b474:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b478:	3328      	adds	r3, #40	; 0x28
 800b47a:	2100      	movs	r1, #0
 800b47c:	4618      	mov	r0, r3
 800b47e:	f002 fa9d 	bl	800d9bc <RCCEx_PLL3_Config>
 800b482:	4603      	mov	r3, r0
 800b484:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b488:	e004      	b.n	800b494 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b48a:	2301      	movs	r3, #1
 800b48c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b490:	e000      	b.n	800b494 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b492:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b494:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d10a      	bne.n	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b49c:	4b6e      	ldr	r3, [pc, #440]	; (800b658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b49e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4a0:	f023 0107 	bic.w	r1, r3, #7
 800b4a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4aa:	4a6b      	ldr	r2, [pc, #428]	; (800b658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b4ac:	430b      	orrs	r3, r1
 800b4ae:	6513      	str	r3, [r2, #80]	; 0x50
 800b4b0:	e003      	b.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4b6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b4ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c2:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800b4c6:	f04f 0b00 	mov.w	fp, #0
 800b4ca:	ea5a 030b 	orrs.w	r3, sl, fp
 800b4ce:	d05b      	beq.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b4d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b4d8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800b4dc:	d03b      	beq.n	800b556 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800b4de:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800b4e2:	d834      	bhi.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b4e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b4e8:	d037      	beq.n	800b55a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b4ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b4ee:	d82e      	bhi.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b4f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b4f4:	d033      	beq.n	800b55e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800b4f6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b4fa:	d828      	bhi.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b4fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b500:	d01a      	beq.n	800b538 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800b502:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b506:	d822      	bhi.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d003      	beq.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800b50c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b510:	d007      	beq.n	800b522 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800b512:	e01c      	b.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b514:	4b50      	ldr	r3, [pc, #320]	; (800b658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b518:	4a4f      	ldr	r2, [pc, #316]	; (800b658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b51a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b51e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b520:	e01e      	b.n	800b560 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b522:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b526:	3308      	adds	r3, #8
 800b528:	2100      	movs	r1, #0
 800b52a:	4618      	mov	r0, r3
 800b52c:	f002 f994 	bl	800d858 <RCCEx_PLL2_Config>
 800b530:	4603      	mov	r3, r0
 800b532:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b536:	e013      	b.n	800b560 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b538:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b53c:	3328      	adds	r3, #40	; 0x28
 800b53e:	2100      	movs	r1, #0
 800b540:	4618      	mov	r0, r3
 800b542:	f002 fa3b 	bl	800d9bc <RCCEx_PLL3_Config>
 800b546:	4603      	mov	r3, r0
 800b548:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b54c:	e008      	b.n	800b560 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b54e:	2301      	movs	r3, #1
 800b550:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b554:	e004      	b.n	800b560 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b556:	bf00      	nop
 800b558:	e002      	b.n	800b560 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b55a:	bf00      	nop
 800b55c:	e000      	b.n	800b560 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b55e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b560:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b564:	2b00      	cmp	r3, #0
 800b566:	d10b      	bne.n	800b580 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b568:	4b3b      	ldr	r3, [pc, #236]	; (800b658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b56a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b56c:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b570:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b574:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b578:	4a37      	ldr	r2, [pc, #220]	; (800b658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b57a:	430b      	orrs	r3, r1
 800b57c:	6593      	str	r3, [r2, #88]	; 0x58
 800b57e:	e003      	b.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b580:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b584:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b588:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b590:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b594:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b598:	2300      	movs	r3, #0
 800b59a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b59e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b5a2:	460b      	mov	r3, r1
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	d05d      	beq.n	800b664 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b5a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b5b0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800b5b4:	d03b      	beq.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800b5b6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800b5ba:	d834      	bhi.n	800b626 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b5bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b5c0:	d037      	beq.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800b5c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b5c6:	d82e      	bhi.n	800b626 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b5c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b5cc:	d033      	beq.n	800b636 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800b5ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b5d2:	d828      	bhi.n	800b626 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b5d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b5d8:	d01a      	beq.n	800b610 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800b5da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b5de:	d822      	bhi.n	800b626 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d003      	beq.n	800b5ec <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b5e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b5e8:	d007      	beq.n	800b5fa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800b5ea:	e01c      	b.n	800b626 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5ec:	4b1a      	ldr	r3, [pc, #104]	; (800b658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f0:	4a19      	ldr	r2, [pc, #100]	; (800b658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b5f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b5f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b5f8:	e01e      	b.n	800b638 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b5fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5fe:	3308      	adds	r3, #8
 800b600:	2100      	movs	r1, #0
 800b602:	4618      	mov	r0, r3
 800b604:	f002 f928 	bl	800d858 <RCCEx_PLL2_Config>
 800b608:	4603      	mov	r3, r0
 800b60a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b60e:	e013      	b.n	800b638 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b614:	3328      	adds	r3, #40	; 0x28
 800b616:	2100      	movs	r1, #0
 800b618:	4618      	mov	r0, r3
 800b61a:	f002 f9cf 	bl	800d9bc <RCCEx_PLL3_Config>
 800b61e:	4603      	mov	r3, r0
 800b620:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b624:	e008      	b.n	800b638 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b626:	2301      	movs	r3, #1
 800b628:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b62c:	e004      	b.n	800b638 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b62e:	bf00      	nop
 800b630:	e002      	b.n	800b638 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b632:	bf00      	nop
 800b634:	e000      	b.n	800b638 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b636:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b638:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d10d      	bne.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b640:	4b05      	ldr	r3, [pc, #20]	; (800b658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b644:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b648:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b64c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b650:	4a01      	ldr	r2, [pc, #4]	; (800b658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b652:	430b      	orrs	r3, r1
 800b654:	6593      	str	r3, [r2, #88]	; 0x58
 800b656:	e005      	b.n	800b664 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800b658:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b65c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b660:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b664:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b670:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b674:	2300      	movs	r3, #0
 800b676:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b67a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b67e:	460b      	mov	r3, r1
 800b680:	4313      	orrs	r3, r2
 800b682:	d03a      	beq.n	800b6fa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800b684:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b68a:	2b30      	cmp	r3, #48	; 0x30
 800b68c:	d01f      	beq.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800b68e:	2b30      	cmp	r3, #48	; 0x30
 800b690:	d819      	bhi.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b692:	2b20      	cmp	r3, #32
 800b694:	d00c      	beq.n	800b6b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800b696:	2b20      	cmp	r3, #32
 800b698:	d815      	bhi.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d019      	beq.n	800b6d2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b69e:	2b10      	cmp	r3, #16
 800b6a0:	d111      	bne.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6a2:	4baa      	ldr	r3, [pc, #680]	; (800b94c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b6a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6a6:	4aa9      	ldr	r2, [pc, #676]	; (800b94c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b6a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b6ae:	e011      	b.n	800b6d4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b6b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6b4:	3308      	adds	r3, #8
 800b6b6:	2102      	movs	r1, #2
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f002 f8cd 	bl	800d858 <RCCEx_PLL2_Config>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b6c4:	e006      	b.n	800b6d4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b6cc:	e002      	b.n	800b6d4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b6ce:	bf00      	nop
 800b6d0:	e000      	b.n	800b6d4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b6d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d10a      	bne.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b6dc:	4b9b      	ldr	r3, [pc, #620]	; (800b94c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b6de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6e0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b6e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6ea:	4a98      	ldr	r2, [pc, #608]	; (800b94c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b6ec:	430b      	orrs	r3, r1
 800b6ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b6f0:	e003      	b.n	800b6fa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6f6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b6fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b702:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b706:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b70a:	2300      	movs	r3, #0
 800b70c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b710:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b714:	460b      	mov	r3, r1
 800b716:	4313      	orrs	r3, r2
 800b718:	d051      	beq.n	800b7be <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b71a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b71e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b720:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b724:	d035      	beq.n	800b792 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800b726:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b72a:	d82e      	bhi.n	800b78a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b72c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b730:	d031      	beq.n	800b796 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800b732:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b736:	d828      	bhi.n	800b78a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b738:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b73c:	d01a      	beq.n	800b774 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800b73e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b742:	d822      	bhi.n	800b78a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b744:	2b00      	cmp	r3, #0
 800b746:	d003      	beq.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800b748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b74c:	d007      	beq.n	800b75e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800b74e:	e01c      	b.n	800b78a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b750:	4b7e      	ldr	r3, [pc, #504]	; (800b94c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b754:	4a7d      	ldr	r2, [pc, #500]	; (800b94c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b75a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b75c:	e01c      	b.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b75e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b762:	3308      	adds	r3, #8
 800b764:	2100      	movs	r1, #0
 800b766:	4618      	mov	r0, r3
 800b768:	f002 f876 	bl	800d858 <RCCEx_PLL2_Config>
 800b76c:	4603      	mov	r3, r0
 800b76e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b772:	e011      	b.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b778:	3328      	adds	r3, #40	; 0x28
 800b77a:	2100      	movs	r1, #0
 800b77c:	4618      	mov	r0, r3
 800b77e:	f002 f91d 	bl	800d9bc <RCCEx_PLL3_Config>
 800b782:	4603      	mov	r3, r0
 800b784:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b788:	e006      	b.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b78a:	2301      	movs	r3, #1
 800b78c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b790:	e002      	b.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b792:	bf00      	nop
 800b794:	e000      	b.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b796:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b798:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d10a      	bne.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b7a0:	4b6a      	ldr	r3, [pc, #424]	; (800b94c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b7a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7a4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b7a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7ae:	4a67      	ldr	r2, [pc, #412]	; (800b94c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b7b0:	430b      	orrs	r3, r1
 800b7b2:	6513      	str	r3, [r2, #80]	; 0x50
 800b7b4:	e003      	b.n	800b7be <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7b6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7ba:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b7be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b7ca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b7d4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b7d8:	460b      	mov	r3, r1
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	d053      	beq.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b7de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b7e8:	d033      	beq.n	800b852 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800b7ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b7ee:	d82c      	bhi.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b7f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b7f4:	d02f      	beq.n	800b856 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800b7f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b7fa:	d826      	bhi.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b7fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b800:	d02b      	beq.n	800b85a <HAL_RCCEx_PeriphCLKConfig+0x506>
 800b802:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b806:	d820      	bhi.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b808:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b80c:	d012      	beq.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800b80e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b812:	d81a      	bhi.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b814:	2b00      	cmp	r3, #0
 800b816:	d022      	beq.n	800b85e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800b818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b81c:	d115      	bne.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b81e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b822:	3308      	adds	r3, #8
 800b824:	2101      	movs	r1, #1
 800b826:	4618      	mov	r0, r3
 800b828:	f002 f816 	bl	800d858 <RCCEx_PLL2_Config>
 800b82c:	4603      	mov	r3, r0
 800b82e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b832:	e015      	b.n	800b860 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b838:	3328      	adds	r3, #40	; 0x28
 800b83a:	2101      	movs	r1, #1
 800b83c:	4618      	mov	r0, r3
 800b83e:	f002 f8bd 	bl	800d9bc <RCCEx_PLL3_Config>
 800b842:	4603      	mov	r3, r0
 800b844:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b848:	e00a      	b.n	800b860 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b84a:	2301      	movs	r3, #1
 800b84c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b850:	e006      	b.n	800b860 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b852:	bf00      	nop
 800b854:	e004      	b.n	800b860 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b856:	bf00      	nop
 800b858:	e002      	b.n	800b860 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b85a:	bf00      	nop
 800b85c:	e000      	b.n	800b860 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b85e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b860:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b864:	2b00      	cmp	r3, #0
 800b866:	d10a      	bne.n	800b87e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b868:	4b38      	ldr	r3, [pc, #224]	; (800b94c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b86a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b86c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b870:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b876:	4a35      	ldr	r2, [pc, #212]	; (800b94c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b878:	430b      	orrs	r3, r1
 800b87a:	6513      	str	r3, [r2, #80]	; 0x50
 800b87c:	e003      	b.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b87e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b882:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b886:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b892:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b896:	2300      	movs	r3, #0
 800b898:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b89c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b8a0:	460b      	mov	r3, r1
 800b8a2:	4313      	orrs	r3, r2
 800b8a4:	d058      	beq.n	800b958 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b8a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b8ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b8b2:	d033      	beq.n	800b91c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800b8b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b8b8:	d82c      	bhi.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b8ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8be:	d02f      	beq.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800b8c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8c4:	d826      	bhi.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b8c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b8ca:	d02b      	beq.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800b8cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b8d0:	d820      	bhi.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b8d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8d6:	d012      	beq.n	800b8fe <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800b8d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8dc:	d81a      	bhi.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d022      	beq.n	800b928 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b8e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8e6:	d115      	bne.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b8e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8ec:	3308      	adds	r3, #8
 800b8ee:	2101      	movs	r1, #1
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f001 ffb1 	bl	800d858 <RCCEx_PLL2_Config>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b8fc:	e015      	b.n	800b92a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b8fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b902:	3328      	adds	r3, #40	; 0x28
 800b904:	2101      	movs	r1, #1
 800b906:	4618      	mov	r0, r3
 800b908:	f002 f858 	bl	800d9bc <RCCEx_PLL3_Config>
 800b90c:	4603      	mov	r3, r0
 800b90e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b912:	e00a      	b.n	800b92a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b914:	2301      	movs	r3, #1
 800b916:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b91a:	e006      	b.n	800b92a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b91c:	bf00      	nop
 800b91e:	e004      	b.n	800b92a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b920:	bf00      	nop
 800b922:	e002      	b.n	800b92a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b924:	bf00      	nop
 800b926:	e000      	b.n	800b92a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b928:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b92a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d10e      	bne.n	800b950 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b932:	4b06      	ldr	r3, [pc, #24]	; (800b94c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b936:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b93a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b93e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b942:	4a02      	ldr	r2, [pc, #8]	; (800b94c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b944:	430b      	orrs	r3, r1
 800b946:	6593      	str	r3, [r2, #88]	; 0x58
 800b948:	e006      	b.n	800b958 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800b94a:	bf00      	nop
 800b94c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b950:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b954:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b960:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b964:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b968:	2300      	movs	r3, #0
 800b96a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b96e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b972:	460b      	mov	r3, r1
 800b974:	4313      	orrs	r3, r2
 800b976:	d037      	beq.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b978:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b97c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b97e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b982:	d00e      	beq.n	800b9a2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800b984:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b988:	d816      	bhi.n	800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d018      	beq.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800b98e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b992:	d111      	bne.n	800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b994:	4bc4      	ldr	r3, [pc, #784]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b998:	4ac3      	ldr	r2, [pc, #780]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b99a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b99e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b9a0:	e00f      	b.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b9a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9a6:	3308      	adds	r3, #8
 800b9a8:	2101      	movs	r1, #1
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f001 ff54 	bl	800d858 <RCCEx_PLL2_Config>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b9b6:	e004      	b.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b9be:	e000      	b.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800b9c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d10a      	bne.n	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b9ca:	4bb7      	ldr	r3, [pc, #732]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b9cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9ce:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b9d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9d8:	4ab3      	ldr	r2, [pc, #716]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b9da:	430b      	orrs	r3, r1
 800b9dc:	6513      	str	r3, [r2, #80]	; 0x50
 800b9de:	e003      	b.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b9e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b9f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b9fe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800ba02:	460b      	mov	r3, r1
 800ba04:	4313      	orrs	r3, r2
 800ba06:	d039      	beq.n	800ba7c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800ba08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba0e:	2b03      	cmp	r3, #3
 800ba10:	d81c      	bhi.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800ba12:	a201      	add	r2, pc, #4	; (adr r2, 800ba18 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800ba14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba18:	0800ba55 	.word	0x0800ba55
 800ba1c:	0800ba29 	.word	0x0800ba29
 800ba20:	0800ba37 	.word	0x0800ba37
 800ba24:	0800ba55 	.word	0x0800ba55
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba28:	4b9f      	ldr	r3, [pc, #636]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba2c:	4a9e      	ldr	r2, [pc, #632]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ba34:	e00f      	b.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ba36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba3a:	3308      	adds	r3, #8
 800ba3c:	2102      	movs	r1, #2
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f001 ff0a 	bl	800d858 <RCCEx_PLL2_Config>
 800ba44:	4603      	mov	r3, r0
 800ba46:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ba4a:	e004      	b.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ba52:	e000      	b.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800ba54:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba56:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d10a      	bne.n	800ba74 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ba5e:	4b92      	ldr	r3, [pc, #584]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba62:	f023 0103 	bic.w	r1, r3, #3
 800ba66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba6c:	4a8e      	ldr	r2, [pc, #568]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba6e:	430b      	orrs	r3, r1
 800ba70:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ba72:	e003      	b.n	800ba7c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba78:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ba7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba84:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800ba88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ba92:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ba96:	460b      	mov	r3, r1
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	f000 8099 	beq.w	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ba9e:	4b83      	ldr	r3, [pc, #524]	; (800bcac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	4a82      	ldr	r2, [pc, #520]	; (800bcac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800baa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800baa8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800baaa:	f7f8 f91b 	bl	8003ce4 <HAL_GetTick>
 800baae:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bab2:	e00b      	b.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bab4:	f7f8 f916 	bl	8003ce4 <HAL_GetTick>
 800bab8:	4602      	mov	r2, r0
 800baba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800babe:	1ad3      	subs	r3, r2, r3
 800bac0:	2b64      	cmp	r3, #100	; 0x64
 800bac2:	d903      	bls.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800bac4:	2303      	movs	r3, #3
 800bac6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800baca:	e005      	b.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bacc:	4b77      	ldr	r3, [pc, #476]	; (800bcac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d0ed      	beq.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800bad8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800badc:	2b00      	cmp	r3, #0
 800bade:	d173      	bne.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bae0:	4b71      	ldr	r3, [pc, #452]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bae2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bae8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800baec:	4053      	eors	r3, r2
 800baee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d015      	beq.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800baf6:	4b6c      	ldr	r3, [pc, #432]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800baf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bafa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bafe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bb02:	4b69      	ldr	r3, [pc, #420]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb06:	4a68      	ldr	r2, [pc, #416]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb0c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bb0e:	4b66      	ldr	r3, [pc, #408]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb12:	4a65      	ldr	r2, [pc, #404]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb18:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bb1a:	4a63      	ldr	r2, [pc, #396]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb20:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bb22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bb2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb2e:	d118      	bne.n	800bb62 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb30:	f7f8 f8d8 	bl	8003ce4 <HAL_GetTick>
 800bb34:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bb38:	e00d      	b.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb3a:	f7f8 f8d3 	bl	8003ce4 <HAL_GetTick>
 800bb3e:	4602      	mov	r2, r0
 800bb40:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800bb44:	1ad2      	subs	r2, r2, r3
 800bb46:	f241 3388 	movw	r3, #5000	; 0x1388
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	d903      	bls.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800bb4e:	2303      	movs	r3, #3
 800bb50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800bb54:	e005      	b.n	800bb62 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bb56:	4b54      	ldr	r3, [pc, #336]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb5a:	f003 0302 	and.w	r3, r3, #2
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d0eb      	beq.n	800bb3a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800bb62:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d129      	bne.n	800bbbe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bb6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bb72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb7a:	d10e      	bne.n	800bb9a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800bb7c:	4b4a      	ldr	r3, [pc, #296]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb7e:	691b      	ldr	r3, [r3, #16]
 800bb80:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800bb84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bb8c:	091a      	lsrs	r2, r3, #4
 800bb8e:	4b48      	ldr	r3, [pc, #288]	; (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800bb90:	4013      	ands	r3, r2
 800bb92:	4a45      	ldr	r2, [pc, #276]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb94:	430b      	orrs	r3, r1
 800bb96:	6113      	str	r3, [r2, #16]
 800bb98:	e005      	b.n	800bba6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800bb9a:	4b43      	ldr	r3, [pc, #268]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb9c:	691b      	ldr	r3, [r3, #16]
 800bb9e:	4a42      	ldr	r2, [pc, #264]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bba0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bba4:	6113      	str	r3, [r2, #16]
 800bba6:	4b40      	ldr	r3, [pc, #256]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bba8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800bbaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bbb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bbb6:	4a3c      	ldr	r2, [pc, #240]	; (800bca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bbb8:	430b      	orrs	r3, r1
 800bbba:	6713      	str	r3, [r2, #112]	; 0x70
 800bbbc:	e008      	b.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bbbe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbc2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800bbc6:	e003      	b.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbc8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbcc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bbd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd8:	f002 0301 	and.w	r3, r2, #1
 800bbdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bbe6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800bbea:	460b      	mov	r3, r1
 800bbec:	4313      	orrs	r3, r2
 800bbee:	f000 808f 	beq.w	800bd10 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800bbf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbf8:	2b28      	cmp	r3, #40	; 0x28
 800bbfa:	d871      	bhi.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800bbfc:	a201      	add	r2, pc, #4	; (adr r2, 800bc04 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800bbfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc02:	bf00      	nop
 800bc04:	0800bce9 	.word	0x0800bce9
 800bc08:	0800bce1 	.word	0x0800bce1
 800bc0c:	0800bce1 	.word	0x0800bce1
 800bc10:	0800bce1 	.word	0x0800bce1
 800bc14:	0800bce1 	.word	0x0800bce1
 800bc18:	0800bce1 	.word	0x0800bce1
 800bc1c:	0800bce1 	.word	0x0800bce1
 800bc20:	0800bce1 	.word	0x0800bce1
 800bc24:	0800bcb5 	.word	0x0800bcb5
 800bc28:	0800bce1 	.word	0x0800bce1
 800bc2c:	0800bce1 	.word	0x0800bce1
 800bc30:	0800bce1 	.word	0x0800bce1
 800bc34:	0800bce1 	.word	0x0800bce1
 800bc38:	0800bce1 	.word	0x0800bce1
 800bc3c:	0800bce1 	.word	0x0800bce1
 800bc40:	0800bce1 	.word	0x0800bce1
 800bc44:	0800bccb 	.word	0x0800bccb
 800bc48:	0800bce1 	.word	0x0800bce1
 800bc4c:	0800bce1 	.word	0x0800bce1
 800bc50:	0800bce1 	.word	0x0800bce1
 800bc54:	0800bce1 	.word	0x0800bce1
 800bc58:	0800bce1 	.word	0x0800bce1
 800bc5c:	0800bce1 	.word	0x0800bce1
 800bc60:	0800bce1 	.word	0x0800bce1
 800bc64:	0800bce9 	.word	0x0800bce9
 800bc68:	0800bce1 	.word	0x0800bce1
 800bc6c:	0800bce1 	.word	0x0800bce1
 800bc70:	0800bce1 	.word	0x0800bce1
 800bc74:	0800bce1 	.word	0x0800bce1
 800bc78:	0800bce1 	.word	0x0800bce1
 800bc7c:	0800bce1 	.word	0x0800bce1
 800bc80:	0800bce1 	.word	0x0800bce1
 800bc84:	0800bce9 	.word	0x0800bce9
 800bc88:	0800bce1 	.word	0x0800bce1
 800bc8c:	0800bce1 	.word	0x0800bce1
 800bc90:	0800bce1 	.word	0x0800bce1
 800bc94:	0800bce1 	.word	0x0800bce1
 800bc98:	0800bce1 	.word	0x0800bce1
 800bc9c:	0800bce1 	.word	0x0800bce1
 800bca0:	0800bce1 	.word	0x0800bce1
 800bca4:	0800bce9 	.word	0x0800bce9
 800bca8:	58024400 	.word	0x58024400
 800bcac:	58024800 	.word	0x58024800
 800bcb0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bcb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcb8:	3308      	adds	r3, #8
 800bcba:	2101      	movs	r1, #1
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f001 fdcb 	bl	800d858 <RCCEx_PLL2_Config>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bcc8:	e00f      	b.n	800bcea <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bcca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcce:	3328      	adds	r3, #40	; 0x28
 800bcd0:	2101      	movs	r1, #1
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f001 fe72 	bl	800d9bc <RCCEx_PLL3_Config>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bcde:	e004      	b.n	800bcea <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bce0:	2301      	movs	r3, #1
 800bce2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bce6:	e000      	b.n	800bcea <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800bce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d10a      	bne.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bcf2:	4bbf      	ldr	r3, [pc, #764]	; (800bff0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bcf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcf6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800bcfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd00:	4abb      	ldr	r2, [pc, #748]	; (800bff0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bd02:	430b      	orrs	r3, r1
 800bd04:	6553      	str	r3, [r2, #84]	; 0x54
 800bd06:	e003      	b.n	800bd10 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd0c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bd10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd18:	f002 0302 	and.w	r3, r2, #2
 800bd1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bd20:	2300      	movs	r3, #0
 800bd22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bd26:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800bd2a:	460b      	mov	r3, r1
 800bd2c:	4313      	orrs	r3, r2
 800bd2e:	d041      	beq.n	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800bd30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd36:	2b05      	cmp	r3, #5
 800bd38:	d824      	bhi.n	800bd84 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800bd3a:	a201      	add	r2, pc, #4	; (adr r2, 800bd40 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800bd3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd40:	0800bd8d 	.word	0x0800bd8d
 800bd44:	0800bd59 	.word	0x0800bd59
 800bd48:	0800bd6f 	.word	0x0800bd6f
 800bd4c:	0800bd8d 	.word	0x0800bd8d
 800bd50:	0800bd8d 	.word	0x0800bd8d
 800bd54:	0800bd8d 	.word	0x0800bd8d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bd58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd5c:	3308      	adds	r3, #8
 800bd5e:	2101      	movs	r1, #1
 800bd60:	4618      	mov	r0, r3
 800bd62:	f001 fd79 	bl	800d858 <RCCEx_PLL2_Config>
 800bd66:	4603      	mov	r3, r0
 800bd68:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bd6c:	e00f      	b.n	800bd8e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bd6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd72:	3328      	adds	r3, #40	; 0x28
 800bd74:	2101      	movs	r1, #1
 800bd76:	4618      	mov	r0, r3
 800bd78:	f001 fe20 	bl	800d9bc <RCCEx_PLL3_Config>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bd82:	e004      	b.n	800bd8e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd84:	2301      	movs	r3, #1
 800bd86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bd8a:	e000      	b.n	800bd8e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800bd8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd8e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d10a      	bne.n	800bdac <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bd96:	4b96      	ldr	r3, [pc, #600]	; (800bff0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bd98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd9a:	f023 0107 	bic.w	r1, r3, #7
 800bd9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bda2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bda4:	4a92      	ldr	r2, [pc, #584]	; (800bff0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bda6:	430b      	orrs	r3, r1
 800bda8:	6553      	str	r3, [r2, #84]	; 0x54
 800bdaa:	e003      	b.n	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bdb0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bdb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdbc:	f002 0304 	and.w	r3, r2, #4
 800bdc0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bdca:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bdce:	460b      	mov	r3, r1
 800bdd0:	4313      	orrs	r3, r2
 800bdd2:	d044      	beq.n	800be5e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bdd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bddc:	2b05      	cmp	r3, #5
 800bdde:	d825      	bhi.n	800be2c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800bde0:	a201      	add	r2, pc, #4	; (adr r2, 800bde8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800bde2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bde6:	bf00      	nop
 800bde8:	0800be35 	.word	0x0800be35
 800bdec:	0800be01 	.word	0x0800be01
 800bdf0:	0800be17 	.word	0x0800be17
 800bdf4:	0800be35 	.word	0x0800be35
 800bdf8:	0800be35 	.word	0x0800be35
 800bdfc:	0800be35 	.word	0x0800be35
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800be00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be04:	3308      	adds	r3, #8
 800be06:	2101      	movs	r1, #1
 800be08:	4618      	mov	r0, r3
 800be0a:	f001 fd25 	bl	800d858 <RCCEx_PLL2_Config>
 800be0e:	4603      	mov	r3, r0
 800be10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800be14:	e00f      	b.n	800be36 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800be16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be1a:	3328      	adds	r3, #40	; 0x28
 800be1c:	2101      	movs	r1, #1
 800be1e:	4618      	mov	r0, r3
 800be20:	f001 fdcc 	bl	800d9bc <RCCEx_PLL3_Config>
 800be24:	4603      	mov	r3, r0
 800be26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800be2a:	e004      	b.n	800be36 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be2c:	2301      	movs	r3, #1
 800be2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800be32:	e000      	b.n	800be36 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800be34:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be36:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d10b      	bne.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800be3e:	4b6c      	ldr	r3, [pc, #432]	; (800bff0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800be40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be42:	f023 0107 	bic.w	r1, r3, #7
 800be46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be4e:	4a68      	ldr	r2, [pc, #416]	; (800bff0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800be50:	430b      	orrs	r3, r1
 800be52:	6593      	str	r3, [r2, #88]	; 0x58
 800be54:	e003      	b.n	800be5e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be56:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be5a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800be5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be66:	f002 0320 	and.w	r3, r2, #32
 800be6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800be6e:	2300      	movs	r3, #0
 800be70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800be74:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800be78:	460b      	mov	r3, r1
 800be7a:	4313      	orrs	r3, r2
 800be7c:	d055      	beq.n	800bf2a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800be7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800be8a:	d033      	beq.n	800bef4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800be8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800be90:	d82c      	bhi.n	800beec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800be92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be96:	d02f      	beq.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800be98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be9c:	d826      	bhi.n	800beec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800be9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bea2:	d02b      	beq.n	800befc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800bea4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bea8:	d820      	bhi.n	800beec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800beaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800beae:	d012      	beq.n	800bed6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800beb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800beb4:	d81a      	bhi.n	800beec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d022      	beq.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800beba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bebe:	d115      	bne.n	800beec <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bec4:	3308      	adds	r3, #8
 800bec6:	2100      	movs	r1, #0
 800bec8:	4618      	mov	r0, r3
 800beca:	f001 fcc5 	bl	800d858 <RCCEx_PLL2_Config>
 800bece:	4603      	mov	r3, r0
 800bed0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bed4:	e015      	b.n	800bf02 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800beda:	3328      	adds	r3, #40	; 0x28
 800bedc:	2102      	movs	r1, #2
 800bede:	4618      	mov	r0, r3
 800bee0:	f001 fd6c 	bl	800d9bc <RCCEx_PLL3_Config>
 800bee4:	4603      	mov	r3, r0
 800bee6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800beea:	e00a      	b.n	800bf02 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800beec:	2301      	movs	r3, #1
 800beee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bef2:	e006      	b.n	800bf02 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800bef4:	bf00      	nop
 800bef6:	e004      	b.n	800bf02 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800bef8:	bf00      	nop
 800befa:	e002      	b.n	800bf02 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800befc:	bf00      	nop
 800befe:	e000      	b.n	800bf02 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800bf00:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf02:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d10b      	bne.n	800bf22 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bf0a:	4b39      	ldr	r3, [pc, #228]	; (800bff0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bf0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf0e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bf12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf1a:	4a35      	ldr	r2, [pc, #212]	; (800bff0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bf1c:	430b      	orrs	r3, r1
 800bf1e:	6553      	str	r3, [r2, #84]	; 0x54
 800bf20:	e003      	b.n	800bf2a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf22:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf26:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bf2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf32:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800bf36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bf40:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800bf44:	460b      	mov	r3, r1
 800bf46:	4313      	orrs	r3, r2
 800bf48:	d058      	beq.n	800bffc <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bf4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bf52:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bf56:	d033      	beq.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800bf58:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bf5c:	d82c      	bhi.n	800bfb8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800bf5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf62:	d02f      	beq.n	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800bf64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf68:	d826      	bhi.n	800bfb8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800bf6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bf6e:	d02b      	beq.n	800bfc8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800bf70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bf74:	d820      	bhi.n	800bfb8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800bf76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf7a:	d012      	beq.n	800bfa2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800bf7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf80:	d81a      	bhi.n	800bfb8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d022      	beq.n	800bfcc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800bf86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf8a:	d115      	bne.n	800bfb8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bf8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf90:	3308      	adds	r3, #8
 800bf92:	2100      	movs	r1, #0
 800bf94:	4618      	mov	r0, r3
 800bf96:	f001 fc5f 	bl	800d858 <RCCEx_PLL2_Config>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bfa0:	e015      	b.n	800bfce <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bfa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfa6:	3328      	adds	r3, #40	; 0x28
 800bfa8:	2102      	movs	r1, #2
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f001 fd06 	bl	800d9bc <RCCEx_PLL3_Config>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bfb6:	e00a      	b.n	800bfce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bfb8:	2301      	movs	r3, #1
 800bfba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bfbe:	e006      	b.n	800bfce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800bfc0:	bf00      	nop
 800bfc2:	e004      	b.n	800bfce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800bfc4:	bf00      	nop
 800bfc6:	e002      	b.n	800bfce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800bfc8:	bf00      	nop
 800bfca:	e000      	b.n	800bfce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800bfcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bfce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d10e      	bne.n	800bff4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bfd6:	4b06      	ldr	r3, [pc, #24]	; (800bff0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bfd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfda:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800bfde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfe2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bfe6:	4a02      	ldr	r2, [pc, #8]	; (800bff0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bfe8:	430b      	orrs	r3, r1
 800bfea:	6593      	str	r3, [r2, #88]	; 0x58
 800bfec:	e006      	b.n	800bffc <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800bfee:	bf00      	nop
 800bff0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bff4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bff8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c004:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800c008:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c00c:	2300      	movs	r3, #0
 800c00e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c012:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c016:	460b      	mov	r3, r1
 800c018:	4313      	orrs	r3, r2
 800c01a:	d055      	beq.n	800c0c8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c01c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c020:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c024:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c028:	d033      	beq.n	800c092 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800c02a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c02e:	d82c      	bhi.n	800c08a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c030:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c034:	d02f      	beq.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c036:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c03a:	d826      	bhi.n	800c08a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c03c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c040:	d02b      	beq.n	800c09a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c042:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c046:	d820      	bhi.n	800c08a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c048:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c04c:	d012      	beq.n	800c074 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800c04e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c052:	d81a      	bhi.n	800c08a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c054:	2b00      	cmp	r3, #0
 800c056:	d022      	beq.n	800c09e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c058:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c05c:	d115      	bne.n	800c08a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c05e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c062:	3308      	adds	r3, #8
 800c064:	2100      	movs	r1, #0
 800c066:	4618      	mov	r0, r3
 800c068:	f001 fbf6 	bl	800d858 <RCCEx_PLL2_Config>
 800c06c:	4603      	mov	r3, r0
 800c06e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c072:	e015      	b.n	800c0a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c074:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c078:	3328      	adds	r3, #40	; 0x28
 800c07a:	2102      	movs	r1, #2
 800c07c:	4618      	mov	r0, r3
 800c07e:	f001 fc9d 	bl	800d9bc <RCCEx_PLL3_Config>
 800c082:	4603      	mov	r3, r0
 800c084:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c088:	e00a      	b.n	800c0a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c08a:	2301      	movs	r3, #1
 800c08c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c090:	e006      	b.n	800c0a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c092:	bf00      	nop
 800c094:	e004      	b.n	800c0a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c096:	bf00      	nop
 800c098:	e002      	b.n	800c0a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c09a:	bf00      	nop
 800c09c:	e000      	b.n	800c0a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c09e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c0a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d10b      	bne.n	800c0c0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c0a8:	4ba0      	ldr	r3, [pc, #640]	; (800c32c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c0aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0ac:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c0b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c0b8:	4a9c      	ldr	r2, [pc, #624]	; (800c32c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c0ba:	430b      	orrs	r3, r1
 800c0bc:	6593      	str	r3, [r2, #88]	; 0x58
 800c0be:	e003      	b.n	800c0c8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c0c4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800c0c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d0:	f002 0308 	and.w	r3, r2, #8
 800c0d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c0d8:	2300      	movs	r3, #0
 800c0da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c0de:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c0e2:	460b      	mov	r3, r1
 800c0e4:	4313      	orrs	r3, r2
 800c0e6:	d01e      	beq.n	800c126 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800c0e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0f4:	d10c      	bne.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c0f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0fa:	3328      	adds	r3, #40	; 0x28
 800c0fc:	2102      	movs	r1, #2
 800c0fe:	4618      	mov	r0, r3
 800c100:	f001 fc5c 	bl	800d9bc <RCCEx_PLL3_Config>
 800c104:	4603      	mov	r3, r0
 800c106:	2b00      	cmp	r3, #0
 800c108:	d002      	beq.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800c10a:	2301      	movs	r3, #1
 800c10c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800c110:	4b86      	ldr	r3, [pc, #536]	; (800c32c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c114:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c118:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c11c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c120:	4a82      	ldr	r2, [pc, #520]	; (800c32c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c122:	430b      	orrs	r3, r1
 800c124:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c12e:	f002 0310 	and.w	r3, r2, #16
 800c132:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c136:	2300      	movs	r3, #0
 800c138:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c13c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c140:	460b      	mov	r3, r1
 800c142:	4313      	orrs	r3, r2
 800c144:	d01e      	beq.n	800c184 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c146:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c14a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c14e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c152:	d10c      	bne.n	800c16e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c154:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c158:	3328      	adds	r3, #40	; 0x28
 800c15a:	2102      	movs	r1, #2
 800c15c:	4618      	mov	r0, r3
 800c15e:	f001 fc2d 	bl	800d9bc <RCCEx_PLL3_Config>
 800c162:	4603      	mov	r3, r0
 800c164:	2b00      	cmp	r3, #0
 800c166:	d002      	beq.n	800c16e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800c168:	2301      	movs	r3, #1
 800c16a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c16e:	4b6f      	ldr	r3, [pc, #444]	; (800c32c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c172:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c176:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c17a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c17e:	4a6b      	ldr	r2, [pc, #428]	; (800c32c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c180:	430b      	orrs	r3, r1
 800c182:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c184:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c18c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c190:	67bb      	str	r3, [r7, #120]	; 0x78
 800c192:	2300      	movs	r3, #0
 800c194:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c196:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c19a:	460b      	mov	r3, r1
 800c19c:	4313      	orrs	r3, r2
 800c19e:	d03e      	beq.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c1a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c1a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1ac:	d022      	beq.n	800c1f4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c1ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1b2:	d81b      	bhi.n	800c1ec <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d003      	beq.n	800c1c0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800c1b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1bc:	d00b      	beq.n	800c1d6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800c1be:	e015      	b.n	800c1ec <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c1c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1c4:	3308      	adds	r3, #8
 800c1c6:	2100      	movs	r1, #0
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f001 fb45 	bl	800d858 <RCCEx_PLL2_Config>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c1d4:	e00f      	b.n	800c1f6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c1d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1da:	3328      	adds	r3, #40	; 0x28
 800c1dc:	2102      	movs	r1, #2
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f001 fbec 	bl	800d9bc <RCCEx_PLL3_Config>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c1ea:	e004      	b.n	800c1f6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c1f2:	e000      	b.n	800c1f6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800c1f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d10b      	bne.n	800c216 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c1fe:	4b4b      	ldr	r3, [pc, #300]	; (800c32c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c202:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c206:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c20a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c20e:	4a47      	ldr	r2, [pc, #284]	; (800c32c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c210:	430b      	orrs	r3, r1
 800c212:	6593      	str	r3, [r2, #88]	; 0x58
 800c214:	e003      	b.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c216:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c21a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c21e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c226:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c22a:	673b      	str	r3, [r7, #112]	; 0x70
 800c22c:	2300      	movs	r3, #0
 800c22e:	677b      	str	r3, [r7, #116]	; 0x74
 800c230:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c234:	460b      	mov	r3, r1
 800c236:	4313      	orrs	r3, r2
 800c238:	d03b      	beq.n	800c2b2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c23a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c23e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c242:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c246:	d01f      	beq.n	800c288 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c248:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c24c:	d818      	bhi.n	800c280 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800c24e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c252:	d003      	beq.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800c254:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c258:	d007      	beq.n	800c26a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800c25a:	e011      	b.n	800c280 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c25c:	4b33      	ldr	r3, [pc, #204]	; (800c32c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c260:	4a32      	ldr	r2, [pc, #200]	; (800c32c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c262:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c266:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c268:	e00f      	b.n	800c28a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c26a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c26e:	3328      	adds	r3, #40	; 0x28
 800c270:	2101      	movs	r1, #1
 800c272:	4618      	mov	r0, r3
 800c274:	f001 fba2 	bl	800d9bc <RCCEx_PLL3_Config>
 800c278:	4603      	mov	r3, r0
 800c27a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800c27e:	e004      	b.n	800c28a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c280:	2301      	movs	r3, #1
 800c282:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c286:	e000      	b.n	800c28a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800c288:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c28a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d10b      	bne.n	800c2aa <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c292:	4b26      	ldr	r3, [pc, #152]	; (800c32c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c296:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c29a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c29e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2a2:	4a22      	ldr	r2, [pc, #136]	; (800c32c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c2a4:	430b      	orrs	r3, r1
 800c2a6:	6553      	str	r3, [r2, #84]	; 0x54
 800c2a8:	e003      	b.n	800c2b2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c2ae:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c2b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ba:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c2be:	66bb      	str	r3, [r7, #104]	; 0x68
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c2c4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c2c8:	460b      	mov	r3, r1
 800c2ca:	4313      	orrs	r3, r2
 800c2cc:	d034      	beq.n	800c338 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c2ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d003      	beq.n	800c2e0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800c2d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2dc:	d007      	beq.n	800c2ee <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800c2de:	e011      	b.n	800c304 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c2e0:	4b12      	ldr	r3, [pc, #72]	; (800c32c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2e4:	4a11      	ldr	r2, [pc, #68]	; (800c32c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c2e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c2ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c2ec:	e00e      	b.n	800c30c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c2ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2f2:	3308      	adds	r3, #8
 800c2f4:	2102      	movs	r1, #2
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f001 faae 	bl	800d858 <RCCEx_PLL2_Config>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c302:	e003      	b.n	800c30c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800c304:	2301      	movs	r3, #1
 800c306:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c30a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c30c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c310:	2b00      	cmp	r3, #0
 800c312:	d10d      	bne.n	800c330 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c314:	4b05      	ldr	r3, [pc, #20]	; (800c32c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c318:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c31c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c322:	4a02      	ldr	r2, [pc, #8]	; (800c32c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c324:	430b      	orrs	r3, r1
 800c326:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c328:	e006      	b.n	800c338 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800c32a:	bf00      	nop
 800c32c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c330:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c334:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c340:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c344:	663b      	str	r3, [r7, #96]	; 0x60
 800c346:	2300      	movs	r3, #0
 800c348:	667b      	str	r3, [r7, #100]	; 0x64
 800c34a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c34e:	460b      	mov	r3, r1
 800c350:	4313      	orrs	r3, r2
 800c352:	d00c      	beq.n	800c36e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c354:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c358:	3328      	adds	r3, #40	; 0x28
 800c35a:	2102      	movs	r1, #2
 800c35c:	4618      	mov	r0, r3
 800c35e:	f001 fb2d 	bl	800d9bc <RCCEx_PLL3_Config>
 800c362:	4603      	mov	r3, r0
 800c364:	2b00      	cmp	r3, #0
 800c366:	d002      	beq.n	800c36e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800c368:	2301      	movs	r3, #1
 800c36a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c36e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c376:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c37a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c37c:	2300      	movs	r3, #0
 800c37e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c380:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c384:	460b      	mov	r3, r1
 800c386:	4313      	orrs	r3, r2
 800c388:	d036      	beq.n	800c3f8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c38a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c38e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c390:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c394:	d018      	beq.n	800c3c8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800c396:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c39a:	d811      	bhi.n	800c3c0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c39c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3a0:	d014      	beq.n	800c3cc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800c3a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3a6:	d80b      	bhi.n	800c3c0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d011      	beq.n	800c3d0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800c3ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3b0:	d106      	bne.n	800c3c0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3b2:	4bb7      	ldr	r3, [pc, #732]	; (800c690 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3b6:	4ab6      	ldr	r2, [pc, #728]	; (800c690 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c3b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c3bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c3be:	e008      	b.n	800c3d2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c3c6:	e004      	b.n	800c3d2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c3c8:	bf00      	nop
 800c3ca:	e002      	b.n	800c3d2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c3cc:	bf00      	nop
 800c3ce:	e000      	b.n	800c3d2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c3d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c3d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d10a      	bne.n	800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c3da:	4bad      	ldr	r3, [pc, #692]	; (800c690 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c3dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c3e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3e8:	4aa9      	ldr	r2, [pc, #676]	; (800c690 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c3ea:	430b      	orrs	r3, r1
 800c3ec:	6553      	str	r3, [r2, #84]	; 0x54
 800c3ee:	e003      	b.n	800c3f8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c3f4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c3f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c400:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c404:	653b      	str	r3, [r7, #80]	; 0x50
 800c406:	2300      	movs	r3, #0
 800c408:	657b      	str	r3, [r7, #84]	; 0x54
 800c40a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c40e:	460b      	mov	r3, r1
 800c410:	4313      	orrs	r3, r2
 800c412:	d009      	beq.n	800c428 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c414:	4b9e      	ldr	r3, [pc, #632]	; (800c690 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c418:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c41c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c422:	4a9b      	ldr	r2, [pc, #620]	; (800c690 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c424:	430b      	orrs	r3, r1
 800c426:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c428:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c430:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c434:	64bb      	str	r3, [r7, #72]	; 0x48
 800c436:	2300      	movs	r3, #0
 800c438:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c43a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c43e:	460b      	mov	r3, r1
 800c440:	4313      	orrs	r3, r2
 800c442:	d009      	beq.n	800c458 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c444:	4b92      	ldr	r3, [pc, #584]	; (800c690 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c448:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c44c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c450:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c452:	4a8f      	ldr	r2, [pc, #572]	; (800c690 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c454:	430b      	orrs	r3, r1
 800c456:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c458:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c460:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c464:	643b      	str	r3, [r7, #64]	; 0x40
 800c466:	2300      	movs	r3, #0
 800c468:	647b      	str	r3, [r7, #68]	; 0x44
 800c46a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c46e:	460b      	mov	r3, r1
 800c470:	4313      	orrs	r3, r2
 800c472:	d00e      	beq.n	800c492 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c474:	4b86      	ldr	r3, [pc, #536]	; (800c690 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c476:	691b      	ldr	r3, [r3, #16]
 800c478:	4a85      	ldr	r2, [pc, #532]	; (800c690 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c47a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c47e:	6113      	str	r3, [r2, #16]
 800c480:	4b83      	ldr	r3, [pc, #524]	; (800c690 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c482:	6919      	ldr	r1, [r3, #16]
 800c484:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c488:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c48c:	4a80      	ldr	r2, [pc, #512]	; (800c690 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c48e:	430b      	orrs	r3, r1
 800c490:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c492:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c49a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c49e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4a4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c4a8:	460b      	mov	r3, r1
 800c4aa:	4313      	orrs	r3, r2
 800c4ac:	d009      	beq.n	800c4c2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c4ae:	4b78      	ldr	r3, [pc, #480]	; (800c690 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c4b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4b2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c4b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4bc:	4a74      	ldr	r2, [pc, #464]	; (800c690 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c4be:	430b      	orrs	r3, r1
 800c4c0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c4c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ca:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c4ce:	633b      	str	r3, [r7, #48]	; 0x30
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	637b      	str	r3, [r7, #52]	; 0x34
 800c4d4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c4d8:	460b      	mov	r3, r1
 800c4da:	4313      	orrs	r3, r2
 800c4dc:	d00a      	beq.n	800c4f4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c4de:	4b6c      	ldr	r3, [pc, #432]	; (800c690 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c4e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4e2:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c4e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4ee:	4a68      	ldr	r2, [pc, #416]	; (800c690 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c4f0:	430b      	orrs	r3, r1
 800c4f2:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c4f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4fc:	2100      	movs	r1, #0
 800c4fe:	62b9      	str	r1, [r7, #40]	; 0x28
 800c500:	f003 0301 	and.w	r3, r3, #1
 800c504:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c506:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c50a:	460b      	mov	r3, r1
 800c50c:	4313      	orrs	r3, r2
 800c50e:	d011      	beq.n	800c534 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c510:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c514:	3308      	adds	r3, #8
 800c516:	2100      	movs	r1, #0
 800c518:	4618      	mov	r0, r3
 800c51a:	f001 f99d 	bl	800d858 <RCCEx_PLL2_Config>
 800c51e:	4603      	mov	r3, r0
 800c520:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c524:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d003      	beq.n	800c534 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c52c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c530:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c534:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c53c:	2100      	movs	r1, #0
 800c53e:	6239      	str	r1, [r7, #32]
 800c540:	f003 0302 	and.w	r3, r3, #2
 800c544:	627b      	str	r3, [r7, #36]	; 0x24
 800c546:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c54a:	460b      	mov	r3, r1
 800c54c:	4313      	orrs	r3, r2
 800c54e:	d011      	beq.n	800c574 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c554:	3308      	adds	r3, #8
 800c556:	2101      	movs	r1, #1
 800c558:	4618      	mov	r0, r3
 800c55a:	f001 f97d 	bl	800d858 <RCCEx_PLL2_Config>
 800c55e:	4603      	mov	r3, r0
 800c560:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c564:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d003      	beq.n	800c574 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c56c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c570:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c57c:	2100      	movs	r1, #0
 800c57e:	61b9      	str	r1, [r7, #24]
 800c580:	f003 0304 	and.w	r3, r3, #4
 800c584:	61fb      	str	r3, [r7, #28]
 800c586:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c58a:	460b      	mov	r3, r1
 800c58c:	4313      	orrs	r3, r2
 800c58e:	d011      	beq.n	800c5b4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c590:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c594:	3308      	adds	r3, #8
 800c596:	2102      	movs	r1, #2
 800c598:	4618      	mov	r0, r3
 800c59a:	f001 f95d 	bl	800d858 <RCCEx_PLL2_Config>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c5a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d003      	beq.n	800c5b4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c5b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c5b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5bc:	2100      	movs	r1, #0
 800c5be:	6139      	str	r1, [r7, #16]
 800c5c0:	f003 0308 	and.w	r3, r3, #8
 800c5c4:	617b      	str	r3, [r7, #20]
 800c5c6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c5ca:	460b      	mov	r3, r1
 800c5cc:	4313      	orrs	r3, r2
 800c5ce:	d011      	beq.n	800c5f4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c5d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5d4:	3328      	adds	r3, #40	; 0x28
 800c5d6:	2100      	movs	r1, #0
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f001 f9ef 	bl	800d9bc <RCCEx_PLL3_Config>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800c5e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d003      	beq.n	800c5f4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c5f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c5f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5fc:	2100      	movs	r1, #0
 800c5fe:	60b9      	str	r1, [r7, #8]
 800c600:	f003 0310 	and.w	r3, r3, #16
 800c604:	60fb      	str	r3, [r7, #12]
 800c606:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c60a:	460b      	mov	r3, r1
 800c60c:	4313      	orrs	r3, r2
 800c60e:	d011      	beq.n	800c634 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c614:	3328      	adds	r3, #40	; 0x28
 800c616:	2101      	movs	r1, #1
 800c618:	4618      	mov	r0, r3
 800c61a:	f001 f9cf 	bl	800d9bc <RCCEx_PLL3_Config>
 800c61e:	4603      	mov	r3, r0
 800c620:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c624:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d003      	beq.n	800c634 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c62c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c630:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c63c:	2100      	movs	r1, #0
 800c63e:	6039      	str	r1, [r7, #0]
 800c640:	f003 0320 	and.w	r3, r3, #32
 800c644:	607b      	str	r3, [r7, #4]
 800c646:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c64a:	460b      	mov	r3, r1
 800c64c:	4313      	orrs	r3, r2
 800c64e:	d011      	beq.n	800c674 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c650:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c654:	3328      	adds	r3, #40	; 0x28
 800c656:	2102      	movs	r1, #2
 800c658:	4618      	mov	r0, r3
 800c65a:	f001 f9af 	bl	800d9bc <RCCEx_PLL3_Config>
 800c65e:	4603      	mov	r3, r0
 800c660:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c664:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d003      	beq.n	800c674 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c66c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c670:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800c674:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d101      	bne.n	800c680 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800c67c:	2300      	movs	r3, #0
 800c67e:	e000      	b.n	800c682 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800c680:	2301      	movs	r3, #1
}
 800c682:	4618      	mov	r0, r3
 800c684:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800c688:	46bd      	mov	sp, r7
 800c68a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c68e:	bf00      	nop
 800c690:	58024400 	.word	0x58024400

0800c694 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b090      	sub	sp, #64	; 0x40
 800c698:	af00      	add	r7, sp, #0
 800c69a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c69e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6a2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c6a6:	430b      	orrs	r3, r1
 800c6a8:	f040 8094 	bne.w	800c7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c6ac:	4b9b      	ldr	r3, [pc, #620]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c6ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6b0:	f003 0307 	and.w	r3, r3, #7
 800c6b4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b8:	2b04      	cmp	r3, #4
 800c6ba:	f200 8087 	bhi.w	800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c6be:	a201      	add	r2, pc, #4	; (adr r2, 800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c6c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6c4:	0800c6d9 	.word	0x0800c6d9
 800c6c8:	0800c701 	.word	0x0800c701
 800c6cc:	0800c729 	.word	0x0800c729
 800c6d0:	0800c7c5 	.word	0x0800c7c5
 800c6d4:	0800c751 	.word	0x0800c751
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c6d8:	4b90      	ldr	r3, [pc, #576]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c6e4:	d108      	bne.n	800c6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c6e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f000 ff62 	bl	800d5b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6f4:	f000 bc93 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6fc:	f000 bc8f 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c700:	4b86      	ldr	r3, [pc, #536]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c708:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c70c:	d108      	bne.n	800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c70e:	f107 0318 	add.w	r3, r7, #24
 800c712:	4618      	mov	r0, r3
 800c714:	f000 fca6 	bl	800d064 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c718:	69bb      	ldr	r3, [r7, #24]
 800c71a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c71c:	f000 bc7f 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c720:	2300      	movs	r3, #0
 800c722:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c724:	f000 bc7b 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c728:	4b7c      	ldr	r3, [pc, #496]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c734:	d108      	bne.n	800c748 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c736:	f107 030c 	add.w	r3, r7, #12
 800c73a:	4618      	mov	r0, r3
 800c73c:	f000 fde6 	bl	800d30c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c744:	f000 bc6b 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c748:	2300      	movs	r3, #0
 800c74a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c74c:	f000 bc67 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c750:	4b72      	ldr	r3, [pc, #456]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c754:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c758:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c75a:	4b70      	ldr	r3, [pc, #448]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f003 0304 	and.w	r3, r3, #4
 800c762:	2b04      	cmp	r3, #4
 800c764:	d10c      	bne.n	800c780 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d109      	bne.n	800c780 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c76c:	4b6b      	ldr	r3, [pc, #428]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	08db      	lsrs	r3, r3, #3
 800c772:	f003 0303 	and.w	r3, r3, #3
 800c776:	4a6a      	ldr	r2, [pc, #424]	; (800c920 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c778:	fa22 f303 	lsr.w	r3, r2, r3
 800c77c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c77e:	e01f      	b.n	800c7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c780:	4b66      	ldr	r3, [pc, #408]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c788:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c78c:	d106      	bne.n	800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c78e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c790:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c794:	d102      	bne.n	800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c796:	4b63      	ldr	r3, [pc, #396]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c798:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c79a:	e011      	b.n	800c7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c79c:	4b5f      	ldr	r3, [pc, #380]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c7a8:	d106      	bne.n	800c7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c7aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7b0:	d102      	bne.n	800c7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c7b2:	4b5d      	ldr	r3, [pc, #372]	; (800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c7b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7b6:	e003      	b.n	800c7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c7bc:	f000 bc2f 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c7c0:	f000 bc2d 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c7c4:	4b59      	ldr	r3, [pc, #356]	; (800c92c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c7c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7c8:	f000 bc29 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7d0:	f000 bc25 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c7d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7d8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c7dc:	430b      	orrs	r3, r1
 800c7de:	f040 80a7 	bne.w	800c930 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c7e2:	4b4e      	ldr	r3, [pc, #312]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c7e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7e6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c7ea:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c7f2:	d054      	beq.n	800c89e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800c7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c7fa:	f200 808b 	bhi.w	800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c800:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c804:	f000 8083 	beq.w	800c90e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800c808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c80a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c80e:	f200 8081 	bhi.w	800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c814:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c818:	d02f      	beq.n	800c87a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c81c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c820:	d878      	bhi.n	800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c824:	2b00      	cmp	r3, #0
 800c826:	d004      	beq.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800c828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c82a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c82e:	d012      	beq.n	800c856 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800c830:	e070      	b.n	800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c832:	4b3a      	ldr	r3, [pc, #232]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c83a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c83e:	d107      	bne.n	800c850 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c844:	4618      	mov	r0, r3
 800c846:	f000 feb5 	bl	800d5b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c84c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c84e:	e3e6      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c850:	2300      	movs	r3, #0
 800c852:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c854:	e3e3      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c856:	4b31      	ldr	r3, [pc, #196]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c85e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c862:	d107      	bne.n	800c874 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c864:	f107 0318 	add.w	r3, r7, #24
 800c868:	4618      	mov	r0, r3
 800c86a:	f000 fbfb 	bl	800d064 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c86e:	69bb      	ldr	r3, [r7, #24]
 800c870:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c872:	e3d4      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c874:	2300      	movs	r3, #0
 800c876:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c878:	e3d1      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c87a:	4b28      	ldr	r3, [pc, #160]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c882:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c886:	d107      	bne.n	800c898 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c888:	f107 030c 	add.w	r3, r7, #12
 800c88c:	4618      	mov	r0, r3
 800c88e:	f000 fd3d 	bl	800d30c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c896:	e3c2      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c898:	2300      	movs	r3, #0
 800c89a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c89c:	e3bf      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c89e:	4b1f      	ldr	r3, [pc, #124]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c8a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c8a6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c8a8:	4b1c      	ldr	r3, [pc, #112]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f003 0304 	and.w	r3, r3, #4
 800c8b0:	2b04      	cmp	r3, #4
 800c8b2:	d10c      	bne.n	800c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800c8b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d109      	bne.n	800c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c8ba:	4b18      	ldr	r3, [pc, #96]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	08db      	lsrs	r3, r3, #3
 800c8c0:	f003 0303 	and.w	r3, r3, #3
 800c8c4:	4a16      	ldr	r2, [pc, #88]	; (800c920 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c8c6:	fa22 f303 	lsr.w	r3, r2, r3
 800c8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8cc:	e01e      	b.n	800c90c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c8ce:	4b13      	ldr	r3, [pc, #76]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8da:	d106      	bne.n	800c8ea <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800c8dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c8e2:	d102      	bne.n	800c8ea <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c8e4:	4b0f      	ldr	r3, [pc, #60]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c8e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8e8:	e010      	b.n	800c90c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c8ea:	4b0c      	ldr	r3, [pc, #48]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c8f6:	d106      	bne.n	800c906 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800c8f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8fe:	d102      	bne.n	800c906 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c900:	4b09      	ldr	r3, [pc, #36]	; (800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c902:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c904:	e002      	b.n	800c90c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c906:	2300      	movs	r3, #0
 800c908:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c90a:	e388      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c90c:	e387      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c90e:	4b07      	ldr	r3, [pc, #28]	; (800c92c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c910:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c912:	e384      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c914:	2300      	movs	r3, #0
 800c916:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c918:	e381      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c91a:	bf00      	nop
 800c91c:	58024400 	.word	0x58024400
 800c920:	03d09000 	.word	0x03d09000
 800c924:	003d0900 	.word	0x003d0900
 800c928:	02faf080 	.word	0x02faf080
 800c92c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c930:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c934:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c938:	430b      	orrs	r3, r1
 800c93a:	f040 809c 	bne.w	800ca76 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c93e:	4b9e      	ldr	r3, [pc, #632]	; (800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c942:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c946:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c94a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c94e:	d054      	beq.n	800c9fa <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800c950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c952:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c956:	f200 808b 	bhi.w	800ca70 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c95c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c960:	f000 8083 	beq.w	800ca6a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800c964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c966:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c96a:	f200 8081 	bhi.w	800ca70 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c970:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c974:	d02f      	beq.n	800c9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800c976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c978:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c97c:	d878      	bhi.n	800ca70 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c980:	2b00      	cmp	r3, #0
 800c982:	d004      	beq.n	800c98e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800c984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c986:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c98a:	d012      	beq.n	800c9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800c98c:	e070      	b.n	800ca70 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c98e:	4b8a      	ldr	r3, [pc, #552]	; (800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c996:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c99a:	d107      	bne.n	800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c99c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f000 fe07 	bl	800d5b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9aa:	e338      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9b0:	e335      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c9b2:	4b81      	ldr	r3, [pc, #516]	; (800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c9ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c9be:	d107      	bne.n	800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9c0:	f107 0318 	add.w	r3, r7, #24
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f000 fb4d 	bl	800d064 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c9ca:	69bb      	ldr	r3, [r7, #24]
 800c9cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9ce:	e326      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9d4:	e323      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c9d6:	4b78      	ldr	r3, [pc, #480]	; (800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c9de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9e2:	d107      	bne.n	800c9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9e4:	f107 030c 	add.w	r3, r7, #12
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f000 fc8f 	bl	800d30c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9f2:	e314      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9f8:	e311      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c9fa:	4b6f      	ldr	r3, [pc, #444]	; (800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c9fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ca02:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ca04:	4b6c      	ldr	r3, [pc, #432]	; (800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	f003 0304 	and.w	r3, r3, #4
 800ca0c:	2b04      	cmp	r3, #4
 800ca0e:	d10c      	bne.n	800ca2a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800ca10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d109      	bne.n	800ca2a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca16:	4b68      	ldr	r3, [pc, #416]	; (800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	08db      	lsrs	r3, r3, #3
 800ca1c:	f003 0303 	and.w	r3, r3, #3
 800ca20:	4a66      	ldr	r2, [pc, #408]	; (800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800ca22:	fa22 f303 	lsr.w	r3, r2, r3
 800ca26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca28:	e01e      	b.n	800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ca2a:	4b63      	ldr	r3, [pc, #396]	; (800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca36:	d106      	bne.n	800ca46 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800ca38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ca3e:	d102      	bne.n	800ca46 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ca40:	4b5f      	ldr	r3, [pc, #380]	; (800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800ca42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca44:	e010      	b.n	800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ca46:	4b5c      	ldr	r3, [pc, #368]	; (800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca52:	d106      	bne.n	800ca62 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800ca54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca5a:	d102      	bne.n	800ca62 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ca5c:	4b59      	ldr	r3, [pc, #356]	; (800cbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ca5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca60:	e002      	b.n	800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ca62:	2300      	movs	r3, #0
 800ca64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ca66:	e2da      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ca68:	e2d9      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ca6a:	4b57      	ldr	r3, [pc, #348]	; (800cbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ca6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca6e:	e2d6      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ca70:	2300      	movs	r3, #0
 800ca72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca74:	e2d3      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ca76:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca7a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800ca7e:	430b      	orrs	r3, r1
 800ca80:	f040 80a7 	bne.w	800cbd2 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ca84:	4b4c      	ldr	r3, [pc, #304]	; (800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ca86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca88:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800ca8c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ca8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ca94:	d055      	beq.n	800cb42 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800ca96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ca9c:	f200 8096 	bhi.w	800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800caa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caa2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800caa6:	f000 8084 	beq.w	800cbb2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800caaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cab0:	f200 808c 	bhi.w	800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800caba:	d030      	beq.n	800cb1e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800cabc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cabe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cac2:	f200 8083 	bhi.w	800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d004      	beq.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800cacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cad2:	d012      	beq.n	800cafa <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800cad4:	e07a      	b.n	800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cad6:	4b38      	ldr	r3, [pc, #224]	; (800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cade:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cae2:	d107      	bne.n	800caf4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cae8:	4618      	mov	r0, r3
 800caea:	f000 fd63 	bl	800d5b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800caee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800caf2:	e294      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800caf4:	2300      	movs	r3, #0
 800caf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caf8:	e291      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cafa:	4b2f      	ldr	r3, [pc, #188]	; (800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb06:	d107      	bne.n	800cb18 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb08:	f107 0318 	add.w	r3, r7, #24
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f000 faa9 	bl	800d064 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cb12:	69bb      	ldr	r3, [r7, #24]
 800cb14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb16:	e282      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb1c:	e27f      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cb1e:	4b26      	ldr	r3, [pc, #152]	; (800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb2a:	d107      	bne.n	800cb3c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb2c:	f107 030c 	add.w	r3, r7, #12
 800cb30:	4618      	mov	r0, r3
 800cb32:	f000 fbeb 	bl	800d30c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb3a:	e270      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb40:	e26d      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cb42:	4b1d      	ldr	r3, [pc, #116]	; (800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cb44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cb4a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cb4c:	4b1a      	ldr	r3, [pc, #104]	; (800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	f003 0304 	and.w	r3, r3, #4
 800cb54:	2b04      	cmp	r3, #4
 800cb56:	d10c      	bne.n	800cb72 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800cb58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d109      	bne.n	800cb72 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb5e:	4b16      	ldr	r3, [pc, #88]	; (800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	08db      	lsrs	r3, r3, #3
 800cb64:	f003 0303 	and.w	r3, r3, #3
 800cb68:	4a14      	ldr	r2, [pc, #80]	; (800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800cb6a:	fa22 f303 	lsr.w	r3, r2, r3
 800cb6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb70:	e01e      	b.n	800cbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cb72:	4b11      	ldr	r3, [pc, #68]	; (800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb7e:	d106      	bne.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800cb80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb86:	d102      	bne.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cb88:	4b0d      	ldr	r3, [pc, #52]	; (800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800cb8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb8c:	e010      	b.n	800cbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cb8e:	4b0a      	ldr	r3, [pc, #40]	; (800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb9a:	d106      	bne.n	800cbaa <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800cb9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cba2:	d102      	bne.n	800cbaa <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cba4:	4b07      	ldr	r3, [pc, #28]	; (800cbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cba6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cba8:	e002      	b.n	800cbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cbae:	e236      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cbb0:	e235      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cbb2:	4b05      	ldr	r3, [pc, #20]	; (800cbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800cbb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbb6:	e232      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cbb8:	58024400 	.word	0x58024400
 800cbbc:	03d09000 	.word	0x03d09000
 800cbc0:	003d0900 	.word	0x003d0900
 800cbc4:	02faf080 	.word	0x02faf080
 800cbc8:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbd0:	e225      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800cbd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbd6:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800cbda:	430b      	orrs	r3, r1
 800cbdc:	f040 8085 	bne.w	800ccea <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800cbe0:	4b9c      	ldr	r3, [pc, #624]	; (800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cbe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbe4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800cbe8:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800cbea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cbf0:	d06b      	beq.n	800ccca <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800cbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cbf8:	d874      	bhi.n	800cce4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800cbfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbfc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cc00:	d056      	beq.n	800ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800cc02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cc08:	d86c      	bhi.n	800cce4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800cc0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc0c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cc10:	d03b      	beq.n	800cc8a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800cc12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc14:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cc18:	d864      	bhi.n	800cce4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800cc1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc20:	d021      	beq.n	800cc66 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800cc22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc28:	d85c      	bhi.n	800cce4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800cc2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d004      	beq.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800cc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc36:	d004      	beq.n	800cc42 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800cc38:	e054      	b.n	800cce4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800cc3a:	f7fe fb5f 	bl	800b2fc <HAL_RCC_GetPCLK1Freq>
 800cc3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cc40:	e1ed      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cc42:	4b84      	ldr	r3, [pc, #528]	; (800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cc4e:	d107      	bne.n	800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc50:	f107 0318 	add.w	r3, r7, #24
 800cc54:	4618      	mov	r0, r3
 800cc56:	f000 fa05 	bl	800d064 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cc5a:	69fb      	ldr	r3, [r7, #28]
 800cc5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc5e:	e1de      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc60:	2300      	movs	r3, #0
 800cc62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc64:	e1db      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cc66:	4b7b      	ldr	r3, [pc, #492]	; (800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc72:	d107      	bne.n	800cc84 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc74:	f107 030c 	add.w	r3, r7, #12
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f000 fb47 	bl	800d30c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cc7e:	693b      	ldr	r3, [r7, #16]
 800cc80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc82:	e1cc      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc84:	2300      	movs	r3, #0
 800cc86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc88:	e1c9      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cc8a:	4b72      	ldr	r3, [pc, #456]	; (800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	f003 0304 	and.w	r3, r3, #4
 800cc92:	2b04      	cmp	r3, #4
 800cc94:	d109      	bne.n	800ccaa <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc96:	4b6f      	ldr	r3, [pc, #444]	; (800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	08db      	lsrs	r3, r3, #3
 800cc9c:	f003 0303 	and.w	r3, r3, #3
 800cca0:	4a6d      	ldr	r2, [pc, #436]	; (800ce58 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800cca2:	fa22 f303 	lsr.w	r3, r2, r3
 800cca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cca8:	e1b9      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccae:	e1b6      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ccb0:	4b68      	ldr	r3, [pc, #416]	; (800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ccbc:	d102      	bne.n	800ccc4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800ccbe:	4b67      	ldr	r3, [pc, #412]	; (800ce5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800ccc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccc2:	e1ac      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccc8:	e1a9      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ccca:	4b62      	ldr	r3, [pc, #392]	; (800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ccd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ccd6:	d102      	bne.n	800ccde <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800ccd8:	4b61      	ldr	r3, [pc, #388]	; (800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800ccda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccdc:	e19f      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ccde:	2300      	movs	r3, #0
 800cce0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cce2:	e19c      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800cce4:	2300      	movs	r3, #0
 800cce6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cce8:	e199      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ccea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ccee:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800ccf2:	430b      	orrs	r3, r1
 800ccf4:	d173      	bne.n	800cdde <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ccf6:	4b57      	ldr	r3, [pc, #348]	; (800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ccf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccfa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ccfe:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cd00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd06:	d02f      	beq.n	800cd68 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800cd08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd0e:	d863      	bhi.n	800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800cd10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d004      	beq.n	800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800cd16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd1c:	d012      	beq.n	800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800cd1e:	e05b      	b.n	800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd20:	4b4c      	ldr	r3, [pc, #304]	; (800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cd2c:	d107      	bne.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd2e:	f107 0318 	add.w	r3, r7, #24
 800cd32:	4618      	mov	r0, r3
 800cd34:	f000 f996 	bl	800d064 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cd38:	69bb      	ldr	r3, [r7, #24]
 800cd3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd3c:	e16f      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd42:	e16c      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cd44:	4b43      	ldr	r3, [pc, #268]	; (800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd50:	d107      	bne.n	800cd62 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd52:	f107 030c 	add.w	r3, r7, #12
 800cd56:	4618      	mov	r0, r3
 800cd58:	f000 fad8 	bl	800d30c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd60:	e15d      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cd62:	2300      	movs	r3, #0
 800cd64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd66:	e15a      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cd68:	4b3a      	ldr	r3, [pc, #232]	; (800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cd6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cd70:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cd72:	4b38      	ldr	r3, [pc, #224]	; (800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	f003 0304 	and.w	r3, r3, #4
 800cd7a:	2b04      	cmp	r3, #4
 800cd7c:	d10c      	bne.n	800cd98 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800cd7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d109      	bne.n	800cd98 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd84:	4b33      	ldr	r3, [pc, #204]	; (800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	08db      	lsrs	r3, r3, #3
 800cd8a:	f003 0303 	and.w	r3, r3, #3
 800cd8e:	4a32      	ldr	r2, [pc, #200]	; (800ce58 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800cd90:	fa22 f303 	lsr.w	r3, r2, r3
 800cd94:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd96:	e01e      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cd98:	4b2e      	ldr	r3, [pc, #184]	; (800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cda0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cda4:	d106      	bne.n	800cdb4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800cda6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cda8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cdac:	d102      	bne.n	800cdb4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cdae:	4b2b      	ldr	r3, [pc, #172]	; (800ce5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800cdb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cdb2:	e010      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cdb4:	4b27      	ldr	r3, [pc, #156]	; (800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cdbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cdc0:	d106      	bne.n	800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800cdc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cdc8:	d102      	bne.n	800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cdca:	4b25      	ldr	r3, [pc, #148]	; (800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800cdcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cdce:	e002      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cdd4:	e123      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cdd6:	e122      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cddc:	e11f      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cdde:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cde2:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800cde6:	430b      	orrs	r3, r1
 800cde8:	d13c      	bne.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cdea:	4b1a      	ldr	r3, [pc, #104]	; (800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cdec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cdee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cdf2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cdf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d004      	beq.n	800ce04 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800cdfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce00:	d012      	beq.n	800ce28 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800ce02:	e023      	b.n	800ce4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ce04:	4b13      	ldr	r3, [pc, #76]	; (800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ce10:	d107      	bne.n	800ce22 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ce12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce16:	4618      	mov	r0, r3
 800ce18:	f000 fbcc 	bl	800d5b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ce1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce20:	e0fd      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce22:	2300      	movs	r3, #0
 800ce24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce26:	e0fa      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce28:	4b0a      	ldr	r3, [pc, #40]	; (800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ce34:	d107      	bne.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce36:	f107 0318 	add.w	r3, r7, #24
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f000 f912 	bl	800d064 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ce40:	6a3b      	ldr	r3, [r7, #32]
 800ce42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce44:	e0eb      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce46:	2300      	movs	r3, #0
 800ce48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce4a:	e0e8      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce50:	e0e5      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ce52:	bf00      	nop
 800ce54:	58024400 	.word	0x58024400
 800ce58:	03d09000 	.word	0x03d09000
 800ce5c:	003d0900 	.word	0x003d0900
 800ce60:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ce64:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce68:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800ce6c:	430b      	orrs	r3, r1
 800ce6e:	f040 8085 	bne.w	800cf7c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800ce72:	4b6d      	ldr	r3, [pc, #436]	; (800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ce74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce76:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800ce7a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ce7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ce82:	d06b      	beq.n	800cf5c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800ce84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ce8a:	d874      	bhi.n	800cf76 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ce8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce92:	d056      	beq.n	800cf42 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800ce94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce9a:	d86c      	bhi.n	800cf76 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ce9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cea2:	d03b      	beq.n	800cf1c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800cea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cea6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ceaa:	d864      	bhi.n	800cf76 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ceac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ceb2:	d021      	beq.n	800cef8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800ceb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ceba:	d85c      	bhi.n	800cf76 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800cebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d004      	beq.n	800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800cec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cec4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cec8:	d004      	beq.n	800ced4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800ceca:	e054      	b.n	800cf76 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800cecc:	f000 f8b4 	bl	800d038 <HAL_RCCEx_GetD3PCLK1Freq>
 800ced0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ced2:	e0a4      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ced4:	4b54      	ldr	r3, [pc, #336]	; (800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cedc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cee0:	d107      	bne.n	800cef2 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cee2:	f107 0318 	add.w	r3, r7, #24
 800cee6:	4618      	mov	r0, r3
 800cee8:	f000 f8bc 	bl	800d064 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ceec:	69fb      	ldr	r3, [r7, #28]
 800ceee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cef0:	e095      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cef2:	2300      	movs	r3, #0
 800cef4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cef6:	e092      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cef8:	4b4b      	ldr	r3, [pc, #300]	; (800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf04:	d107      	bne.n	800cf16 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf06:	f107 030c 	add.w	r3, r7, #12
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f000 f9fe 	bl	800d30c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cf10:	693b      	ldr	r3, [r7, #16]
 800cf12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf14:	e083      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf16:	2300      	movs	r3, #0
 800cf18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf1a:	e080      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cf1c:	4b42      	ldr	r3, [pc, #264]	; (800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	f003 0304 	and.w	r3, r3, #4
 800cf24:	2b04      	cmp	r3, #4
 800cf26:	d109      	bne.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf28:	4b3f      	ldr	r3, [pc, #252]	; (800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	08db      	lsrs	r3, r3, #3
 800cf2e:	f003 0303 	and.w	r3, r3, #3
 800cf32:	4a3e      	ldr	r2, [pc, #248]	; (800d02c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800cf34:	fa22 f303 	lsr.w	r3, r2, r3
 800cf38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf3a:	e070      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf40:	e06d      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cf42:	4b39      	ldr	r3, [pc, #228]	; (800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf4e:	d102      	bne.n	800cf56 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800cf50:	4b37      	ldr	r3, [pc, #220]	; (800d030 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800cf52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf54:	e063      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf56:	2300      	movs	r3, #0
 800cf58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf5a:	e060      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cf5c:	4b32      	ldr	r3, [pc, #200]	; (800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf68:	d102      	bne.n	800cf70 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800cf6a:	4b32      	ldr	r3, [pc, #200]	; (800d034 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800cf6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf6e:	e056      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf70:	2300      	movs	r3, #0
 800cf72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf74:	e053      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800cf76:	2300      	movs	r3, #0
 800cf78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf7a:	e050      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800cf7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf80:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800cf84:	430b      	orrs	r3, r1
 800cf86:	d148      	bne.n	800d01a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800cf88:	4b27      	ldr	r3, [pc, #156]	; (800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cf8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cf90:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cf92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf98:	d02a      	beq.n	800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800cf9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cfa0:	d838      	bhi.n	800d014 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800cfa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d004      	beq.n	800cfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800cfa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cfae:	d00d      	beq.n	800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800cfb0:	e030      	b.n	800d014 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cfb2:	4b1d      	ldr	r3, [pc, #116]	; (800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cfba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cfbe:	d102      	bne.n	800cfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800cfc0:	4b1c      	ldr	r3, [pc, #112]	; (800d034 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800cfc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfc4:	e02b      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfca:	e028      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cfcc:	4b16      	ldr	r3, [pc, #88]	; (800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cfd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cfd8:	d107      	bne.n	800cfea <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cfda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f000 fae8 	bl	800d5b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cfe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfe8:	e019      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cfea:	2300      	movs	r3, #0
 800cfec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfee:	e016      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cff0:	4b0d      	ldr	r3, [pc, #52]	; (800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cff8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cffc:	d107      	bne.n	800d00e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cffe:	f107 0318 	add.w	r3, r7, #24
 800d002:	4618      	mov	r0, r3
 800d004:	f000 f82e 	bl	800d064 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d008:	69fb      	ldr	r3, [r7, #28]
 800d00a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d00c:	e007      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d00e:	2300      	movs	r3, #0
 800d010:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d012:	e004      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d014:	2300      	movs	r3, #0
 800d016:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d018:	e001      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800d01a:	2300      	movs	r3, #0
 800d01c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800d01e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d020:	4618      	mov	r0, r3
 800d022:	3740      	adds	r7, #64	; 0x40
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}
 800d028:	58024400 	.word	0x58024400
 800d02c:	03d09000 	.word	0x03d09000
 800d030:	003d0900 	.word	0x003d0900
 800d034:	02faf080 	.word	0x02faf080

0800d038 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d03c:	f7fe f92e 	bl	800b29c <HAL_RCC_GetHCLKFreq>
 800d040:	4602      	mov	r2, r0
 800d042:	4b06      	ldr	r3, [pc, #24]	; (800d05c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d044:	6a1b      	ldr	r3, [r3, #32]
 800d046:	091b      	lsrs	r3, r3, #4
 800d048:	f003 0307 	and.w	r3, r3, #7
 800d04c:	4904      	ldr	r1, [pc, #16]	; (800d060 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d04e:	5ccb      	ldrb	r3, [r1, r3]
 800d050:	f003 031f 	and.w	r3, r3, #31
 800d054:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d058:	4618      	mov	r0, r3
 800d05a:	bd80      	pop	{r7, pc}
 800d05c:	58024400 	.word	0x58024400
 800d060:	0801c38c 	.word	0x0801c38c

0800d064 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d064:	b480      	push	{r7}
 800d066:	b089      	sub	sp, #36	; 0x24
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d06c:	4ba1      	ldr	r3, [pc, #644]	; (800d2f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d06e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d070:	f003 0303 	and.w	r3, r3, #3
 800d074:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d076:	4b9f      	ldr	r3, [pc, #636]	; (800d2f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d07a:	0b1b      	lsrs	r3, r3, #12
 800d07c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d080:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d082:	4b9c      	ldr	r3, [pc, #624]	; (800d2f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d086:	091b      	lsrs	r3, r3, #4
 800d088:	f003 0301 	and.w	r3, r3, #1
 800d08c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d08e:	4b99      	ldr	r3, [pc, #612]	; (800d2f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d092:	08db      	lsrs	r3, r3, #3
 800d094:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d098:	693a      	ldr	r2, [r7, #16]
 800d09a:	fb02 f303 	mul.w	r3, r2, r3
 800d09e:	ee07 3a90 	vmov	s15, r3
 800d0a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	f000 8111 	beq.w	800d2d4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d0b2:	69bb      	ldr	r3, [r7, #24]
 800d0b4:	2b02      	cmp	r3, #2
 800d0b6:	f000 8083 	beq.w	800d1c0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d0ba:	69bb      	ldr	r3, [r7, #24]
 800d0bc:	2b02      	cmp	r3, #2
 800d0be:	f200 80a1 	bhi.w	800d204 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d0c2:	69bb      	ldr	r3, [r7, #24]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d003      	beq.n	800d0d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d0c8:	69bb      	ldr	r3, [r7, #24]
 800d0ca:	2b01      	cmp	r3, #1
 800d0cc:	d056      	beq.n	800d17c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d0ce:	e099      	b.n	800d204 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d0d0:	4b88      	ldr	r3, [pc, #544]	; (800d2f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	f003 0320 	and.w	r3, r3, #32
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d02d      	beq.n	800d138 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d0dc:	4b85      	ldr	r3, [pc, #532]	; (800d2f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	08db      	lsrs	r3, r3, #3
 800d0e2:	f003 0303 	and.w	r3, r3, #3
 800d0e6:	4a84      	ldr	r2, [pc, #528]	; (800d2f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d0e8:	fa22 f303 	lsr.w	r3, r2, r3
 800d0ec:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d0ee:	68bb      	ldr	r3, [r7, #8]
 800d0f0:	ee07 3a90 	vmov	s15, r3
 800d0f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0f8:	697b      	ldr	r3, [r7, #20]
 800d0fa:	ee07 3a90 	vmov	s15, r3
 800d0fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d106:	4b7b      	ldr	r3, [pc, #492]	; (800d2f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d10a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d10e:	ee07 3a90 	vmov	s15, r3
 800d112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d116:	ed97 6a03 	vldr	s12, [r7, #12]
 800d11a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d2fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d11e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d12a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d12e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d132:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d136:	e087      	b.n	800d248 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d138:	697b      	ldr	r3, [r7, #20]
 800d13a:	ee07 3a90 	vmov	s15, r3
 800d13e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d142:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d300 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d14a:	4b6a      	ldr	r3, [pc, #424]	; (800d2f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d14c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d14e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d152:	ee07 3a90 	vmov	s15, r3
 800d156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d15a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d15e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d2fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d16a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d16e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d172:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d176:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d17a:	e065      	b.n	800d248 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	ee07 3a90 	vmov	s15, r3
 800d182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d186:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d304 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d18a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d18e:	4b59      	ldr	r3, [pc, #356]	; (800d2f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d196:	ee07 3a90 	vmov	s15, r3
 800d19a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d19e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d2fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d1a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d1be:	e043      	b.n	800d248 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d1c0:	697b      	ldr	r3, [r7, #20]
 800d1c2:	ee07 3a90 	vmov	s15, r3
 800d1c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d308 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d1ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1d2:	4b48      	ldr	r3, [pc, #288]	; (800d2f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1da:	ee07 3a90 	vmov	s15, r3
 800d1de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d2fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d1ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d202:	e021      	b.n	800d248 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	ee07 3a90 	vmov	s15, r3
 800d20a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d20e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d304 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d216:	4b37      	ldr	r3, [pc, #220]	; (800d2f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d21a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d21e:	ee07 3a90 	vmov	s15, r3
 800d222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d226:	ed97 6a03 	vldr	s12, [r7, #12]
 800d22a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d2fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d22e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d236:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d23a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d23e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d242:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d246:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d248:	4b2a      	ldr	r3, [pc, #168]	; (800d2f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d24a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d24c:	0a5b      	lsrs	r3, r3, #9
 800d24e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d252:	ee07 3a90 	vmov	s15, r3
 800d256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d25a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d25e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d262:	edd7 6a07 	vldr	s13, [r7, #28]
 800d266:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d26a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d26e:	ee17 2a90 	vmov	r2, s15
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d276:	4b1f      	ldr	r3, [pc, #124]	; (800d2f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d27a:	0c1b      	lsrs	r3, r3, #16
 800d27c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d280:	ee07 3a90 	vmov	s15, r3
 800d284:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d288:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d28c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d290:	edd7 6a07 	vldr	s13, [r7, #28]
 800d294:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d298:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d29c:	ee17 2a90 	vmov	r2, s15
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d2a4:	4b13      	ldr	r3, [pc, #76]	; (800d2f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2a8:	0e1b      	lsrs	r3, r3, #24
 800d2aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2ae:	ee07 3a90 	vmov	s15, r3
 800d2b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d2ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d2be:	edd7 6a07 	vldr	s13, [r7, #28]
 800d2c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d2c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2ca:	ee17 2a90 	vmov	r2, s15
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d2d2:	e008      	b.n	800d2e6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2200      	movs	r2, #0
 800d2de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	609a      	str	r2, [r3, #8]
}
 800d2e6:	bf00      	nop
 800d2e8:	3724      	adds	r7, #36	; 0x24
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f0:	4770      	bx	lr
 800d2f2:	bf00      	nop
 800d2f4:	58024400 	.word	0x58024400
 800d2f8:	03d09000 	.word	0x03d09000
 800d2fc:	46000000 	.word	0x46000000
 800d300:	4c742400 	.word	0x4c742400
 800d304:	4a742400 	.word	0x4a742400
 800d308:	4c3ebc20 	.word	0x4c3ebc20

0800d30c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d30c:	b480      	push	{r7}
 800d30e:	b089      	sub	sp, #36	; 0x24
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d314:	4ba1      	ldr	r3, [pc, #644]	; (800d59c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d318:	f003 0303 	and.w	r3, r3, #3
 800d31c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d31e:	4b9f      	ldr	r3, [pc, #636]	; (800d59c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d322:	0d1b      	lsrs	r3, r3, #20
 800d324:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d328:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d32a:	4b9c      	ldr	r3, [pc, #624]	; (800d59c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d32c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d32e:	0a1b      	lsrs	r3, r3, #8
 800d330:	f003 0301 	and.w	r3, r3, #1
 800d334:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d336:	4b99      	ldr	r3, [pc, #612]	; (800d59c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d33a:	08db      	lsrs	r3, r3, #3
 800d33c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d340:	693a      	ldr	r2, [r7, #16]
 800d342:	fb02 f303 	mul.w	r3, r2, r3
 800d346:	ee07 3a90 	vmov	s15, r3
 800d34a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d34e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d352:	697b      	ldr	r3, [r7, #20]
 800d354:	2b00      	cmp	r3, #0
 800d356:	f000 8111 	beq.w	800d57c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d35a:	69bb      	ldr	r3, [r7, #24]
 800d35c:	2b02      	cmp	r3, #2
 800d35e:	f000 8083 	beq.w	800d468 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d362:	69bb      	ldr	r3, [r7, #24]
 800d364:	2b02      	cmp	r3, #2
 800d366:	f200 80a1 	bhi.w	800d4ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d36a:	69bb      	ldr	r3, [r7, #24]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d003      	beq.n	800d378 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d370:	69bb      	ldr	r3, [r7, #24]
 800d372:	2b01      	cmp	r3, #1
 800d374:	d056      	beq.n	800d424 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d376:	e099      	b.n	800d4ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d378:	4b88      	ldr	r3, [pc, #544]	; (800d59c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	f003 0320 	and.w	r3, r3, #32
 800d380:	2b00      	cmp	r3, #0
 800d382:	d02d      	beq.n	800d3e0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d384:	4b85      	ldr	r3, [pc, #532]	; (800d59c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	08db      	lsrs	r3, r3, #3
 800d38a:	f003 0303 	and.w	r3, r3, #3
 800d38e:	4a84      	ldr	r2, [pc, #528]	; (800d5a0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d390:	fa22 f303 	lsr.w	r3, r2, r3
 800d394:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	ee07 3a90 	vmov	s15, r3
 800d39c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	ee07 3a90 	vmov	s15, r3
 800d3a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3ae:	4b7b      	ldr	r3, [pc, #492]	; (800d59c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3b6:	ee07 3a90 	vmov	s15, r3
 800d3ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3be:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d3c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d3de:	e087      	b.n	800d4f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	ee07 3a90 	vmov	s15, r3
 800d3e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3ea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d5a8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d3ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3f2:	4b6a      	ldr	r3, [pc, #424]	; (800d59c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3fa:	ee07 3a90 	vmov	s15, r3
 800d3fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d402:	ed97 6a03 	vldr	s12, [r7, #12]
 800d406:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d40a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d40e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d412:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d41a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d41e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d422:	e065      	b.n	800d4f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d424:	697b      	ldr	r3, [r7, #20]
 800d426:	ee07 3a90 	vmov	s15, r3
 800d42a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d42e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d5ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d436:	4b59      	ldr	r3, [pc, #356]	; (800d59c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d43a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d43e:	ee07 3a90 	vmov	s15, r3
 800d442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d446:	ed97 6a03 	vldr	s12, [r7, #12]
 800d44a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d44e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d456:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d45a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d45e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d462:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d466:	e043      	b.n	800d4f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d468:	697b      	ldr	r3, [r7, #20]
 800d46a:	ee07 3a90 	vmov	s15, r3
 800d46e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d472:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d47a:	4b48      	ldr	r3, [pc, #288]	; (800d59c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d47c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d47e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d482:	ee07 3a90 	vmov	s15, r3
 800d486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d48a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d48e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d49a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d49e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d4aa:	e021      	b.n	800d4f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d4ac:	697b      	ldr	r3, [r7, #20]
 800d4ae:	ee07 3a90 	vmov	s15, r3
 800d4b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d5ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d4ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4be:	4b37      	ldr	r3, [pc, #220]	; (800d59c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4c6:	ee07 3a90 	vmov	s15, r3
 800d4ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d4d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d4ee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d4f0:	4b2a      	ldr	r3, [pc, #168]	; (800d59c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4f4:	0a5b      	lsrs	r3, r3, #9
 800d4f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4fa:	ee07 3a90 	vmov	s15, r3
 800d4fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d502:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d506:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d50a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d50e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d512:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d516:	ee17 2a90 	vmov	r2, s15
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d51e:	4b1f      	ldr	r3, [pc, #124]	; (800d59c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d522:	0c1b      	lsrs	r3, r3, #16
 800d524:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d528:	ee07 3a90 	vmov	s15, r3
 800d52c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d530:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d534:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d538:	edd7 6a07 	vldr	s13, [r7, #28]
 800d53c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d540:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d544:	ee17 2a90 	vmov	r2, s15
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d54c:	4b13      	ldr	r3, [pc, #76]	; (800d59c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d54e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d550:	0e1b      	lsrs	r3, r3, #24
 800d552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d556:	ee07 3a90 	vmov	s15, r3
 800d55a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d55e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d562:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d566:	edd7 6a07 	vldr	s13, [r7, #28]
 800d56a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d56e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d572:	ee17 2a90 	vmov	r2, s15
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d57a:	e008      	b.n	800d58e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2200      	movs	r2, #0
 800d580:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	2200      	movs	r2, #0
 800d586:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2200      	movs	r2, #0
 800d58c:	609a      	str	r2, [r3, #8]
}
 800d58e:	bf00      	nop
 800d590:	3724      	adds	r7, #36	; 0x24
 800d592:	46bd      	mov	sp, r7
 800d594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d598:	4770      	bx	lr
 800d59a:	bf00      	nop
 800d59c:	58024400 	.word	0x58024400
 800d5a0:	03d09000 	.word	0x03d09000
 800d5a4:	46000000 	.word	0x46000000
 800d5a8:	4c742400 	.word	0x4c742400
 800d5ac:	4a742400 	.word	0x4a742400
 800d5b0:	4c3ebc20 	.word	0x4c3ebc20

0800d5b4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	b089      	sub	sp, #36	; 0x24
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d5bc:	4ba0      	ldr	r3, [pc, #640]	; (800d840 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5c0:	f003 0303 	and.w	r3, r3, #3
 800d5c4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d5c6:	4b9e      	ldr	r3, [pc, #632]	; (800d840 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5ca:	091b      	lsrs	r3, r3, #4
 800d5cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d5d0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d5d2:	4b9b      	ldr	r3, [pc, #620]	; (800d840 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5d6:	f003 0301 	and.w	r3, r3, #1
 800d5da:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d5dc:	4b98      	ldr	r3, [pc, #608]	; (800d840 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5e0:	08db      	lsrs	r3, r3, #3
 800d5e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d5e6:	693a      	ldr	r2, [r7, #16]
 800d5e8:	fb02 f303 	mul.w	r3, r2, r3
 800d5ec:	ee07 3a90 	vmov	s15, r3
 800d5f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5f4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d5f8:	697b      	ldr	r3, [r7, #20]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	f000 8111 	beq.w	800d822 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d600:	69bb      	ldr	r3, [r7, #24]
 800d602:	2b02      	cmp	r3, #2
 800d604:	f000 8083 	beq.w	800d70e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d608:	69bb      	ldr	r3, [r7, #24]
 800d60a:	2b02      	cmp	r3, #2
 800d60c:	f200 80a1 	bhi.w	800d752 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d610:	69bb      	ldr	r3, [r7, #24]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d003      	beq.n	800d61e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d616:	69bb      	ldr	r3, [r7, #24]
 800d618:	2b01      	cmp	r3, #1
 800d61a:	d056      	beq.n	800d6ca <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d61c:	e099      	b.n	800d752 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d61e:	4b88      	ldr	r3, [pc, #544]	; (800d840 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	f003 0320 	and.w	r3, r3, #32
 800d626:	2b00      	cmp	r3, #0
 800d628:	d02d      	beq.n	800d686 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d62a:	4b85      	ldr	r3, [pc, #532]	; (800d840 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	08db      	lsrs	r3, r3, #3
 800d630:	f003 0303 	and.w	r3, r3, #3
 800d634:	4a83      	ldr	r2, [pc, #524]	; (800d844 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d636:	fa22 f303 	lsr.w	r3, r2, r3
 800d63a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d63c:	68bb      	ldr	r3, [r7, #8]
 800d63e:	ee07 3a90 	vmov	s15, r3
 800d642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d646:	697b      	ldr	r3, [r7, #20]
 800d648:	ee07 3a90 	vmov	s15, r3
 800d64c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d650:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d654:	4b7a      	ldr	r3, [pc, #488]	; (800d840 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d65c:	ee07 3a90 	vmov	s15, r3
 800d660:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d664:	ed97 6a03 	vldr	s12, [r7, #12]
 800d668:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d848 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d66c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d670:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d674:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d678:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d67c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d680:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d684:	e087      	b.n	800d796 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d686:	697b      	ldr	r3, [r7, #20]
 800d688:	ee07 3a90 	vmov	s15, r3
 800d68c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d690:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d84c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d694:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d698:	4b69      	ldr	r3, [pc, #420]	; (800d840 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d69a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d69c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6a0:	ee07 3a90 	vmov	s15, r3
 800d6a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6a8:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6ac:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d848 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d6b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d6c8:	e065      	b.n	800d796 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d6ca:	697b      	ldr	r3, [r7, #20]
 800d6cc:	ee07 3a90 	vmov	s15, r3
 800d6d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6d4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d850 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d6d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6dc:	4b58      	ldr	r3, [pc, #352]	; (800d840 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6e4:	ee07 3a90 	vmov	s15, r3
 800d6e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6ec:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6f0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d848 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d6f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d700:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d704:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d708:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d70c:	e043      	b.n	800d796 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d70e:	697b      	ldr	r3, [r7, #20]
 800d710:	ee07 3a90 	vmov	s15, r3
 800d714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d718:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d854 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d71c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d720:	4b47      	ldr	r3, [pc, #284]	; (800d840 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d728:	ee07 3a90 	vmov	s15, r3
 800d72c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d730:	ed97 6a03 	vldr	s12, [r7, #12]
 800d734:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d848 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d738:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d73c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d740:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d744:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d74c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d750:	e021      	b.n	800d796 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d752:	697b      	ldr	r3, [r7, #20]
 800d754:	ee07 3a90 	vmov	s15, r3
 800d758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d75c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d84c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d760:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d764:	4b36      	ldr	r3, [pc, #216]	; (800d840 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d76c:	ee07 3a90 	vmov	s15, r3
 800d770:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d774:	ed97 6a03 	vldr	s12, [r7, #12]
 800d778:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d848 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d77c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d780:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d784:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d788:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d78c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d790:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d794:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d796:	4b2a      	ldr	r3, [pc, #168]	; (800d840 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d79a:	0a5b      	lsrs	r3, r3, #9
 800d79c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7a0:	ee07 3a90 	vmov	s15, r3
 800d7a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d7ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d7b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800d7b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7bc:	ee17 2a90 	vmov	r2, s15
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d7c4:	4b1e      	ldr	r3, [pc, #120]	; (800d840 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d7c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7c8:	0c1b      	lsrs	r3, r3, #16
 800d7ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7ce:	ee07 3a90 	vmov	s15, r3
 800d7d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d7da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d7de:	edd7 6a07 	vldr	s13, [r7, #28]
 800d7e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7ea:	ee17 2a90 	vmov	r2, s15
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d7f2:	4b13      	ldr	r3, [pc, #76]	; (800d840 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d7f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7f6:	0e1b      	lsrs	r3, r3, #24
 800d7f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7fc:	ee07 3a90 	vmov	s15, r3
 800d800:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d804:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d808:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d80c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d810:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d814:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d818:	ee17 2a90 	vmov	r2, s15
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d820:	e008      	b.n	800d834 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2200      	movs	r2, #0
 800d826:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2200      	movs	r2, #0
 800d82c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2200      	movs	r2, #0
 800d832:	609a      	str	r2, [r3, #8]
}
 800d834:	bf00      	nop
 800d836:	3724      	adds	r7, #36	; 0x24
 800d838:	46bd      	mov	sp, r7
 800d83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83e:	4770      	bx	lr
 800d840:	58024400 	.word	0x58024400
 800d844:	03d09000 	.word	0x03d09000
 800d848:	46000000 	.word	0x46000000
 800d84c:	4c742400 	.word	0x4c742400
 800d850:	4a742400 	.word	0x4a742400
 800d854:	4c3ebc20 	.word	0x4c3ebc20

0800d858 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b084      	sub	sp, #16
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d862:	2300      	movs	r3, #0
 800d864:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d866:	4b53      	ldr	r3, [pc, #332]	; (800d9b4 <RCCEx_PLL2_Config+0x15c>)
 800d868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d86a:	f003 0303 	and.w	r3, r3, #3
 800d86e:	2b03      	cmp	r3, #3
 800d870:	d101      	bne.n	800d876 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d872:	2301      	movs	r3, #1
 800d874:	e099      	b.n	800d9aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d876:	4b4f      	ldr	r3, [pc, #316]	; (800d9b4 <RCCEx_PLL2_Config+0x15c>)
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	4a4e      	ldr	r2, [pc, #312]	; (800d9b4 <RCCEx_PLL2_Config+0x15c>)
 800d87c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d880:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d882:	f7f6 fa2f 	bl	8003ce4 <HAL_GetTick>
 800d886:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d888:	e008      	b.n	800d89c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d88a:	f7f6 fa2b 	bl	8003ce4 <HAL_GetTick>
 800d88e:	4602      	mov	r2, r0
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	1ad3      	subs	r3, r2, r3
 800d894:	2b02      	cmp	r3, #2
 800d896:	d901      	bls.n	800d89c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d898:	2303      	movs	r3, #3
 800d89a:	e086      	b.n	800d9aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d89c:	4b45      	ldr	r3, [pc, #276]	; (800d9b4 <RCCEx_PLL2_Config+0x15c>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d1f0      	bne.n	800d88a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d8a8:	4b42      	ldr	r3, [pc, #264]	; (800d9b4 <RCCEx_PLL2_Config+0x15c>)
 800d8aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	031b      	lsls	r3, r3, #12
 800d8b6:	493f      	ldr	r1, [pc, #252]	; (800d9b4 <RCCEx_PLL2_Config+0x15c>)
 800d8b8:	4313      	orrs	r3, r2
 800d8ba:	628b      	str	r3, [r1, #40]	; 0x28
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	685b      	ldr	r3, [r3, #4]
 800d8c0:	3b01      	subs	r3, #1
 800d8c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	689b      	ldr	r3, [r3, #8]
 800d8ca:	3b01      	subs	r3, #1
 800d8cc:	025b      	lsls	r3, r3, #9
 800d8ce:	b29b      	uxth	r3, r3
 800d8d0:	431a      	orrs	r2, r3
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	68db      	ldr	r3, [r3, #12]
 800d8d6:	3b01      	subs	r3, #1
 800d8d8:	041b      	lsls	r3, r3, #16
 800d8da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d8de:	431a      	orrs	r2, r3
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	691b      	ldr	r3, [r3, #16]
 800d8e4:	3b01      	subs	r3, #1
 800d8e6:	061b      	lsls	r3, r3, #24
 800d8e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d8ec:	4931      	ldr	r1, [pc, #196]	; (800d9b4 <RCCEx_PLL2_Config+0x15c>)
 800d8ee:	4313      	orrs	r3, r2
 800d8f0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d8f2:	4b30      	ldr	r3, [pc, #192]	; (800d9b4 <RCCEx_PLL2_Config+0x15c>)
 800d8f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	695b      	ldr	r3, [r3, #20]
 800d8fe:	492d      	ldr	r1, [pc, #180]	; (800d9b4 <RCCEx_PLL2_Config+0x15c>)
 800d900:	4313      	orrs	r3, r2
 800d902:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d904:	4b2b      	ldr	r3, [pc, #172]	; (800d9b4 <RCCEx_PLL2_Config+0x15c>)
 800d906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d908:	f023 0220 	bic.w	r2, r3, #32
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	699b      	ldr	r3, [r3, #24]
 800d910:	4928      	ldr	r1, [pc, #160]	; (800d9b4 <RCCEx_PLL2_Config+0x15c>)
 800d912:	4313      	orrs	r3, r2
 800d914:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d916:	4b27      	ldr	r3, [pc, #156]	; (800d9b4 <RCCEx_PLL2_Config+0x15c>)
 800d918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d91a:	4a26      	ldr	r2, [pc, #152]	; (800d9b4 <RCCEx_PLL2_Config+0x15c>)
 800d91c:	f023 0310 	bic.w	r3, r3, #16
 800d920:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d922:	4b24      	ldr	r3, [pc, #144]	; (800d9b4 <RCCEx_PLL2_Config+0x15c>)
 800d924:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d926:	4b24      	ldr	r3, [pc, #144]	; (800d9b8 <RCCEx_PLL2_Config+0x160>)
 800d928:	4013      	ands	r3, r2
 800d92a:	687a      	ldr	r2, [r7, #4]
 800d92c:	69d2      	ldr	r2, [r2, #28]
 800d92e:	00d2      	lsls	r2, r2, #3
 800d930:	4920      	ldr	r1, [pc, #128]	; (800d9b4 <RCCEx_PLL2_Config+0x15c>)
 800d932:	4313      	orrs	r3, r2
 800d934:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d936:	4b1f      	ldr	r3, [pc, #124]	; (800d9b4 <RCCEx_PLL2_Config+0x15c>)
 800d938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d93a:	4a1e      	ldr	r2, [pc, #120]	; (800d9b4 <RCCEx_PLL2_Config+0x15c>)
 800d93c:	f043 0310 	orr.w	r3, r3, #16
 800d940:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d106      	bne.n	800d956 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d948:	4b1a      	ldr	r3, [pc, #104]	; (800d9b4 <RCCEx_PLL2_Config+0x15c>)
 800d94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d94c:	4a19      	ldr	r2, [pc, #100]	; (800d9b4 <RCCEx_PLL2_Config+0x15c>)
 800d94e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d952:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d954:	e00f      	b.n	800d976 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	2b01      	cmp	r3, #1
 800d95a:	d106      	bne.n	800d96a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d95c:	4b15      	ldr	r3, [pc, #84]	; (800d9b4 <RCCEx_PLL2_Config+0x15c>)
 800d95e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d960:	4a14      	ldr	r2, [pc, #80]	; (800d9b4 <RCCEx_PLL2_Config+0x15c>)
 800d962:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d966:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d968:	e005      	b.n	800d976 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d96a:	4b12      	ldr	r3, [pc, #72]	; (800d9b4 <RCCEx_PLL2_Config+0x15c>)
 800d96c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d96e:	4a11      	ldr	r2, [pc, #68]	; (800d9b4 <RCCEx_PLL2_Config+0x15c>)
 800d970:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d974:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d976:	4b0f      	ldr	r3, [pc, #60]	; (800d9b4 <RCCEx_PLL2_Config+0x15c>)
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	4a0e      	ldr	r2, [pc, #56]	; (800d9b4 <RCCEx_PLL2_Config+0x15c>)
 800d97c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d980:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d982:	f7f6 f9af 	bl	8003ce4 <HAL_GetTick>
 800d986:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d988:	e008      	b.n	800d99c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d98a:	f7f6 f9ab 	bl	8003ce4 <HAL_GetTick>
 800d98e:	4602      	mov	r2, r0
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	1ad3      	subs	r3, r2, r3
 800d994:	2b02      	cmp	r3, #2
 800d996:	d901      	bls.n	800d99c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d998:	2303      	movs	r3, #3
 800d99a:	e006      	b.n	800d9aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d99c:	4b05      	ldr	r3, [pc, #20]	; (800d9b4 <RCCEx_PLL2_Config+0x15c>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d0f0      	beq.n	800d98a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d9a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	3710      	adds	r7, #16
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}
 800d9b2:	bf00      	nop
 800d9b4:	58024400 	.word	0x58024400
 800d9b8:	ffff0007 	.word	0xffff0007

0800d9bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b084      	sub	sp, #16
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
 800d9c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d9ca:	4b53      	ldr	r3, [pc, #332]	; (800db18 <RCCEx_PLL3_Config+0x15c>)
 800d9cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9ce:	f003 0303 	and.w	r3, r3, #3
 800d9d2:	2b03      	cmp	r3, #3
 800d9d4:	d101      	bne.n	800d9da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d9d6:	2301      	movs	r3, #1
 800d9d8:	e099      	b.n	800db0e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d9da:	4b4f      	ldr	r3, [pc, #316]	; (800db18 <RCCEx_PLL3_Config+0x15c>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	4a4e      	ldr	r2, [pc, #312]	; (800db18 <RCCEx_PLL3_Config+0x15c>)
 800d9e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d9e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d9e6:	f7f6 f97d 	bl	8003ce4 <HAL_GetTick>
 800d9ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d9ec:	e008      	b.n	800da00 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d9ee:	f7f6 f979 	bl	8003ce4 <HAL_GetTick>
 800d9f2:	4602      	mov	r2, r0
 800d9f4:	68bb      	ldr	r3, [r7, #8]
 800d9f6:	1ad3      	subs	r3, r2, r3
 800d9f8:	2b02      	cmp	r3, #2
 800d9fa:	d901      	bls.n	800da00 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d9fc:	2303      	movs	r3, #3
 800d9fe:	e086      	b.n	800db0e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800da00:	4b45      	ldr	r3, [pc, #276]	; (800db18 <RCCEx_PLL3_Config+0x15c>)
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d1f0      	bne.n	800d9ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800da0c:	4b42      	ldr	r3, [pc, #264]	; (800db18 <RCCEx_PLL3_Config+0x15c>)
 800da0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da10:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	051b      	lsls	r3, r3, #20
 800da1a:	493f      	ldr	r1, [pc, #252]	; (800db18 <RCCEx_PLL3_Config+0x15c>)
 800da1c:	4313      	orrs	r3, r2
 800da1e:	628b      	str	r3, [r1, #40]	; 0x28
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	685b      	ldr	r3, [r3, #4]
 800da24:	3b01      	subs	r3, #1
 800da26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	689b      	ldr	r3, [r3, #8]
 800da2e:	3b01      	subs	r3, #1
 800da30:	025b      	lsls	r3, r3, #9
 800da32:	b29b      	uxth	r3, r3
 800da34:	431a      	orrs	r2, r3
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	68db      	ldr	r3, [r3, #12]
 800da3a:	3b01      	subs	r3, #1
 800da3c:	041b      	lsls	r3, r3, #16
 800da3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800da42:	431a      	orrs	r2, r3
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	691b      	ldr	r3, [r3, #16]
 800da48:	3b01      	subs	r3, #1
 800da4a:	061b      	lsls	r3, r3, #24
 800da4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800da50:	4931      	ldr	r1, [pc, #196]	; (800db18 <RCCEx_PLL3_Config+0x15c>)
 800da52:	4313      	orrs	r3, r2
 800da54:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800da56:	4b30      	ldr	r3, [pc, #192]	; (800db18 <RCCEx_PLL3_Config+0x15c>)
 800da58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	695b      	ldr	r3, [r3, #20]
 800da62:	492d      	ldr	r1, [pc, #180]	; (800db18 <RCCEx_PLL3_Config+0x15c>)
 800da64:	4313      	orrs	r3, r2
 800da66:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800da68:	4b2b      	ldr	r3, [pc, #172]	; (800db18 <RCCEx_PLL3_Config+0x15c>)
 800da6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da6c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	699b      	ldr	r3, [r3, #24]
 800da74:	4928      	ldr	r1, [pc, #160]	; (800db18 <RCCEx_PLL3_Config+0x15c>)
 800da76:	4313      	orrs	r3, r2
 800da78:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800da7a:	4b27      	ldr	r3, [pc, #156]	; (800db18 <RCCEx_PLL3_Config+0x15c>)
 800da7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da7e:	4a26      	ldr	r2, [pc, #152]	; (800db18 <RCCEx_PLL3_Config+0x15c>)
 800da80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800da86:	4b24      	ldr	r3, [pc, #144]	; (800db18 <RCCEx_PLL3_Config+0x15c>)
 800da88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800da8a:	4b24      	ldr	r3, [pc, #144]	; (800db1c <RCCEx_PLL3_Config+0x160>)
 800da8c:	4013      	ands	r3, r2
 800da8e:	687a      	ldr	r2, [r7, #4]
 800da90:	69d2      	ldr	r2, [r2, #28]
 800da92:	00d2      	lsls	r2, r2, #3
 800da94:	4920      	ldr	r1, [pc, #128]	; (800db18 <RCCEx_PLL3_Config+0x15c>)
 800da96:	4313      	orrs	r3, r2
 800da98:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800da9a:	4b1f      	ldr	r3, [pc, #124]	; (800db18 <RCCEx_PLL3_Config+0x15c>)
 800da9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da9e:	4a1e      	ldr	r2, [pc, #120]	; (800db18 <RCCEx_PLL3_Config+0x15c>)
 800daa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800daa4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d106      	bne.n	800daba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800daac:	4b1a      	ldr	r3, [pc, #104]	; (800db18 <RCCEx_PLL3_Config+0x15c>)
 800daae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dab0:	4a19      	ldr	r2, [pc, #100]	; (800db18 <RCCEx_PLL3_Config+0x15c>)
 800dab2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800dab6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dab8:	e00f      	b.n	800dada <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	2b01      	cmp	r3, #1
 800dabe:	d106      	bne.n	800dace <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800dac0:	4b15      	ldr	r3, [pc, #84]	; (800db18 <RCCEx_PLL3_Config+0x15c>)
 800dac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dac4:	4a14      	ldr	r2, [pc, #80]	; (800db18 <RCCEx_PLL3_Config+0x15c>)
 800dac6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800daca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dacc:	e005      	b.n	800dada <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800dace:	4b12      	ldr	r3, [pc, #72]	; (800db18 <RCCEx_PLL3_Config+0x15c>)
 800dad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dad2:	4a11      	ldr	r2, [pc, #68]	; (800db18 <RCCEx_PLL3_Config+0x15c>)
 800dad4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800dad8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800dada:	4b0f      	ldr	r3, [pc, #60]	; (800db18 <RCCEx_PLL3_Config+0x15c>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	4a0e      	ldr	r2, [pc, #56]	; (800db18 <RCCEx_PLL3_Config+0x15c>)
 800dae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dae4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dae6:	f7f6 f8fd 	bl	8003ce4 <HAL_GetTick>
 800daea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800daec:	e008      	b.n	800db00 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800daee:	f7f6 f8f9 	bl	8003ce4 <HAL_GetTick>
 800daf2:	4602      	mov	r2, r0
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	1ad3      	subs	r3, r2, r3
 800daf8:	2b02      	cmp	r3, #2
 800dafa:	d901      	bls.n	800db00 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dafc:	2303      	movs	r3, #3
 800dafe:	e006      	b.n	800db0e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800db00:	4b05      	ldr	r3, [pc, #20]	; (800db18 <RCCEx_PLL3_Config+0x15c>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d0f0      	beq.n	800daee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800db0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800db0e:	4618      	mov	r0, r3
 800db10:	3710      	adds	r7, #16
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}
 800db16:	bf00      	nop
 800db18:	58024400 	.word	0x58024400
 800db1c:	ffff0007 	.word	0xffff0007

0800db20 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b084      	sub	sp, #16
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d101      	bne.n	800db32 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800db2e:	2301      	movs	r3, #1
 800db30:	e092      	b.n	800dc58 <HAL_RNG_Init+0x138>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	7a5b      	ldrb	r3, [r3, #9]
 800db36:	b2db      	uxtb	r3, r3
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d105      	bne.n	800db48 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2200      	movs	r2, #0
 800db40:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	f7f5 f9bc 	bl	8002ec0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2202      	movs	r2, #2
 800db4c:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	681a      	ldr	r2, [r3, #0]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	f022 0204 	bic.w	r2, r2, #4
 800db5c:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	681a      	ldr	r2, [r3, #0]
 800db64:	4b3e      	ldr	r3, [pc, #248]	; (800dc60 <HAL_RNG_Init+0x140>)
 800db66:	4013      	ands	r3, r2
 800db68:	687a      	ldr	r2, [r7, #4]
 800db6a:	6852      	ldr	r2, [r2, #4]
 800db6c:	431a      	orrs	r2, r3
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800db76:	601a      	str	r2, [r3, #0]

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	4a39      	ldr	r2, [pc, #228]	; (800dc64 <HAL_RNG_Init+0x144>)
 800db7e:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	f247 2274 	movw	r2, #29300	; 0x7274
 800db88:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	681a      	ldr	r2, [r3, #0]
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800db98:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800db9a:	f7f6 f8a3 	bl	8003ce4 <HAL_GetTick>
 800db9e:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800dba0:	e016      	b.n	800dbd0 <HAL_RNG_Init+0xb0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800dba2:	f7f6 f89f 	bl	8003ce4 <HAL_GetTick>
 800dba6:	4602      	mov	r2, r0
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	1ad3      	subs	r3, r2, r3
 800dbac:	2b02      	cmp	r3, #2
 800dbae:	d90f      	bls.n	800dbd0 <HAL_RNG_Init+0xb0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dbba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dbbe:	d107      	bne.n	800dbd0 <HAL_RNG_Init+0xb0>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2201      	movs	r2, #1
 800dbc4:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2202      	movs	r2, #2
 800dbca:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800dbcc:	2301      	movs	r3, #1
 800dbce:	e043      	b.n	800dc58 <HAL_RNG_Init+0x138>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dbda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dbde:	d0e0      	beq.n	800dba2 <HAL_RNG_Init+0x82>
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	681a      	ldr	r2, [r3, #0]
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	f042 0204 	orr.w	r2, r2, #4
 800dbee:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	685b      	ldr	r3, [r3, #4]
 800dbf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbfa:	2b40      	cmp	r3, #64	; 0x40
 800dbfc:	d104      	bne.n	800dc08 <HAL_RNG_Init+0xe8>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2204      	movs	r2, #4
 800dc02:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800dc04:	2301      	movs	r3, #1
 800dc06:	e027      	b.n	800dc58 <HAL_RNG_Init+0x138>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800dc08:	f7f6 f86c 	bl	8003ce4 <HAL_GetTick>
 800dc0c:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800dc0e:	e015      	b.n	800dc3c <HAL_RNG_Init+0x11c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800dc10:	f7f6 f868 	bl	8003ce4 <HAL_GetTick>
 800dc14:	4602      	mov	r2, r0
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	1ad3      	subs	r3, r2, r3
 800dc1a:	2b02      	cmp	r3, #2
 800dc1c:	d90e      	bls.n	800dc3c <HAL_RNG_Init+0x11c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	685b      	ldr	r3, [r3, #4]
 800dc24:	f003 0304 	and.w	r3, r3, #4
 800dc28:	2b04      	cmp	r3, #4
 800dc2a:	d107      	bne.n	800dc3c <HAL_RNG_Init+0x11c>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2204      	movs	r2, #4
 800dc30:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	2202      	movs	r2, #2
 800dc36:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800dc38:	2301      	movs	r3, #1
 800dc3a:	e00d      	b.n	800dc58 <HAL_RNG_Init+0x138>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	685b      	ldr	r3, [r3, #4]
 800dc42:	f003 0304 	and.w	r3, r3, #4
 800dc46:	2b04      	cmp	r3, #4
 800dc48:	d0e2      	beq.n	800dc10 <HAL_RNG_Init+0xf0>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2201      	movs	r2, #1
 800dc4e:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2200      	movs	r2, #0
 800dc54:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800dc56:	2300      	movs	r3, #0
}
 800dc58:	4618      	mov	r0, r3
 800dc5a:	3710      	adds	r7, #16
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	bd80      	pop	{r7, pc}
 800dc60:	bfffffdf 	.word	0xbfffffdf
 800dc64:	17590abc 	.word	0x17590abc

0800dc68 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b084      	sub	sp, #16
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
 800dc70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dc72:	2300      	movs	r3, #0
 800dc74:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	7a1b      	ldrb	r3, [r3, #8]
 800dc7a:	2b01      	cmp	r3, #1
 800dc7c:	d101      	bne.n	800dc82 <HAL_RNG_GenerateRandomNumber+0x1a>
 800dc7e:	2302      	movs	r3, #2
 800dc80:	e06d      	b.n	800dd5e <HAL_RNG_GenerateRandomNumber+0xf6>
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2201      	movs	r2, #1
 800dc86:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	7a5b      	ldrb	r3, [r3, #9]
 800dc8c:	b2db      	uxtb	r3, r3
 800dc8e:	2b01      	cmp	r3, #1
 800dc90:	d15c      	bne.n	800dd4c <HAL_RNG_GenerateRandomNumber+0xe4>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	2202      	movs	r2, #2
 800dc96:	725a      	strb	r2, [r3, #9]
#if defined(RNG_CR_CONDRST)
    /* Check if there is a seed error */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	685b      	ldr	r3, [r3, #4]
 800dc9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dca2:	2b40      	cmp	r3, #64	; 0x40
 800dca4:	d10c      	bne.n	800dcc0 <HAL_RNG_GenerateRandomNumber+0x58>
    {
      /* Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	2208      	movs	r2, #8
 800dcaa:	60da      	str	r2, [r3, #12]
      /* Reset from seed error */
      status = RNG_RecoverSeedError(hrng);
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f000 f864 	bl	800dd7a <RNG_RecoverSeedError>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_ERROR)
 800dcb6:	7bfb      	ldrb	r3, [r7, #15]
 800dcb8:	2b01      	cmp	r3, #1
 800dcba:	d101      	bne.n	800dcc0 <HAL_RNG_GenerateRandomNumber+0x58>
      {
        return status;
 800dcbc:	7bfb      	ldrb	r3, [r7, #15]
 800dcbe:	e04e      	b.n	800dd5e <HAL_RNG_GenerateRandomNumber+0xf6>
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 800dcc0:	f7f6 f810 	bl	8003ce4 <HAL_GetTick>
 800dcc4:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800dcc6:	e018      	b.n	800dcfa <HAL_RNG_GenerateRandomNumber+0x92>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800dcc8:	f7f6 f80c 	bl	8003ce4 <HAL_GetTick>
 800dccc:	4602      	mov	r2, r0
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	1ad3      	subs	r3, r2, r3
 800dcd2:	2b02      	cmp	r3, #2
 800dcd4:	d911      	bls.n	800dcfa <HAL_RNG_GenerateRandomNumber+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	685b      	ldr	r3, [r3, #4]
 800dcdc:	f003 0301 	and.w	r3, r3, #1
 800dce0:	2b01      	cmp	r3, #1
 800dce2:	d00a      	beq.n	800dcfa <HAL_RNG_GenerateRandomNumber+0x92>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2201      	movs	r2, #1
 800dce8:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2202      	movs	r2, #2
 800dcee:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	e031      	b.n	800dd5e <HAL_RNG_GenerateRandomNumber+0xf6>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	685b      	ldr	r3, [r3, #4]
 800dd00:	f003 0301 	and.w	r3, r3, #1
 800dd04:	2b01      	cmp	r3, #1
 800dd06:	d1df      	bne.n	800dcc8 <HAL_RNG_GenerateRandomNumber+0x60>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	689a      	ldr	r2, [r3, #8]
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	611a      	str	r2, [r3, #16]
#if defined(RNG_CR_CONDRST)
    /* In case of seed error, the value available in the RNG_DR register must not
       be used as it may not have enough entropy */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	685b      	ldr	r3, [r3, #4]
 800dd18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd1c:	2b40      	cmp	r3, #64	; 0x40
 800dd1e:	d10d      	bne.n	800dd3c <HAL_RNG_GenerateRandomNumber+0xd4>
    {
      /* Update the error code and status */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2208      	movs	r2, #8
 800dd24:	60da      	str	r2, [r3, #12]
      status = HAL_ERROR;
 800dd26:	2301      	movs	r3, #1
 800dd28:	73fb      	strb	r3, [r7, #15]
      /* Clear bit DRDY */
      CLEAR_BIT(hrng->Instance->SR, RNG_FLAG_DRDY);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	685a      	ldr	r2, [r3, #4]
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	f022 0201 	bic.w	r2, r2, #1
 800dd38:	605a      	str	r2, [r3, #4]
 800dd3a:	e003      	b.n	800dd44 <HAL_RNG_GenerateRandomNumber+0xdc>
    }
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	691a      	ldr	r2, [r3, #16]
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	601a      	str	r2, [r3, #0]
    }
#else
    *random32bit = hrng->RandomNumber;

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	2201      	movs	r2, #1
 800dd48:	725a      	strb	r2, [r3, #9]
 800dd4a:	e004      	b.n	800dd56 <HAL_RNG_GenerateRandomNumber+0xee>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2204      	movs	r2, #4
 800dd50:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800dd52:	2301      	movs	r3, #1
 800dd54:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	2200      	movs	r2, #0
 800dd5a:	721a      	strb	r2, [r3, #8]

  return status;
 800dd5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd5e:	4618      	mov	r0, r3
 800dd60:	3710      	adds	r7, #16
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}

0800dd66 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 800dd66:	b480      	push	{r7}
 800dd68:	b083      	sub	sp, #12
 800dd6a:	af00      	add	r7, sp, #0
 800dd6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 800dd6e:	bf00      	nop
 800dd70:	370c      	adds	r7, #12
 800dd72:	46bd      	mov	sp, r7
 800dd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd78:	4770      	bx	lr

0800dd7a <RNG_RecoverSeedError>:
  * @brief  RNG sequence to recover from a seed error
  * @param  hrng pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef RNG_RecoverSeedError(RNG_HandleTypeDef *hrng)
{
 800dd7a:	b580      	push	{r7, lr}
 800dd7c:	b084      	sub	sp, #16
 800dd7e:	af00      	add	r7, sp, #0
 800dd80:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dd82:	2300      	movs	r3, #0
 800dd84:	60fb      	str	r3, [r7, #12]

  /*Check if seed error current status (SECS)is set */
  if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	685b      	ldr	r3, [r3, #4]
 800dd8c:	f003 0304 	and.w	r3, r3, #4
 800dd90:	2b04      	cmp	r3, #4
 800dd92:	d008      	beq.n	800dda6 <RNG_RecoverSeedError+0x2c>
  {
    /* RNG performed the reset automatically (auto-reset) */
    /* Clear bit SEIS */
    CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	685a      	ldr	r2, [r3, #4]
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dda2:	605a      	str	r2, [r3, #4]
 800dda4:	e05f      	b.n	800de66 <RNG_RecoverSeedError+0xec>
  }
  else  /* Sequence to fully recover from a seed error*/
  {
    /* Writing bit CONDRST=1*/
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	681a      	ldr	r2, [r3, #0]
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800ddb4:	601a      	str	r2, [r3, #0]
    /* Writing bit CONDRST=0*/
    CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	681a      	ldr	r2, [r3, #0]
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800ddc4:	601a      	str	r2, [r3, #0]

    /* Wait for conditioning reset process to be completed */
    count = RNG_TIMEOUT_VALUE;
 800ddc6:	2302      	movs	r3, #2
 800ddc8:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	3b01      	subs	r3, #1
 800ddce:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d110      	bne.n	800ddf8 <RNG_RecoverSeedError+0x7e>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	2201      	movs	r2, #1
 800ddda:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	68db      	ldr	r3, [r3, #12]
 800dde0:	f043 0202 	orr.w	r2, r3, #2
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2200      	movs	r2, #0
 800ddec:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f7ff ffb9 	bl	800dd66 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800ddf4:	2301      	movs	r3, #1
 800ddf6:	e03d      	b.n	800de74 <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST));
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800de02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de06:	d0e0      	beq.n	800ddca <RNG_RecoverSeedError+0x50>

    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	685b      	ldr	r3, [r3, #4]
 800de0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de12:	2b40      	cmp	r3, #64	; 0x40
 800de14:	d107      	bne.n	800de26 <RNG_RecoverSeedError+0xac>
    {
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	685a      	ldr	r2, [r3, #4]
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800de24:	605a      	str	r2, [r3, #4]
    }

    /* Wait for SECS to be cleared */
    count = RNG_TIMEOUT_VALUE;
 800de26:	2302      	movs	r3, #2
 800de28:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	3b01      	subs	r3, #1
 800de2e:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d110      	bne.n	800de58 <RNG_RecoverSeedError+0xde>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2201      	movs	r2, #1
 800de3a:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	68db      	ldr	r3, [r3, #12]
 800de40:	f043 0202 	orr.w	r2, r3, #2
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2200      	movs	r2, #0
 800de4c:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f7ff ff89 	bl	800dd66 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800de54:	2301      	movs	r3, #1
 800de56:	e00d      	b.n	800de74 <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	685b      	ldr	r3, [r3, #4]
 800de5e:	f003 0304 	and.w	r3, r3, #4
 800de62:	2b04      	cmp	r3, #4
 800de64:	d0e1      	beq.n	800de2a <RNG_RecoverSeedError+0xb0>
  }
  /* Update the error code */
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	68db      	ldr	r3, [r3, #12]
 800de6a:	f023 0208 	bic.w	r2, r3, #8
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 800de72:	2300      	movs	r3, #0
}
 800de74:	4618      	mov	r0, r3
 800de76:	3710      	adds	r7, #16
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}

0800de7c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b08a      	sub	sp, #40	; 0x28
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d101      	bne.n	800de8e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800de8a:	2301      	movs	r3, #1
 800de8c:	e075      	b.n	800df7a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800de94:	b2db      	uxtb	r3, r3
 800de96:	2b00      	cmp	r3, #0
 800de98:	d105      	bne.n	800dea6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	2200      	movs	r2, #0
 800de9e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	f7f5 f847 	bl	8002f34 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	2204      	movs	r2, #4
 800deaa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800deae:	6878      	ldr	r0, [r7, #4]
 800deb0:	f000 f868 	bl	800df84 <HAL_SD_InitCard>
 800deb4:	4603      	mov	r3, r0
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d001      	beq.n	800debe <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800deba:	2301      	movs	r3, #1
 800debc:	e05d      	b.n	800df7a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800debe:	f107 0308 	add.w	r3, r7, #8
 800dec2:	4619      	mov	r1, r3
 800dec4:	6878      	ldr	r0, [r7, #4]
 800dec6:	f000 fdaf 	bl	800ea28 <HAL_SD_GetCardStatus>
 800deca:	4603      	mov	r3, r0
 800decc:	2b00      	cmp	r3, #0
 800dece:	d001      	beq.n	800ded4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800ded0:	2301      	movs	r3, #1
 800ded2:	e052      	b.n	800df7a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800ded4:	7e3b      	ldrb	r3, [r7, #24]
 800ded6:	b2db      	uxtb	r3, r3
 800ded8:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800deda:	7e7b      	ldrb	r3, [r7, #25]
 800dedc:	b2db      	uxtb	r3, r3
 800dede:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dee4:	2b01      	cmp	r3, #1
 800dee6:	d10a      	bne.n	800defe <HAL_SD_Init+0x82>
 800dee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deea:	2b00      	cmp	r3, #0
 800deec:	d102      	bne.n	800def4 <HAL_SD_Init+0x78>
 800deee:	6a3b      	ldr	r3, [r7, #32]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d004      	beq.n	800defe <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800defa:	659a      	str	r2, [r3, #88]	; 0x58
 800defc:	e00b      	b.n	800df16 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df02:	2b01      	cmp	r3, #1
 800df04:	d104      	bne.n	800df10 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	f44f 7280 	mov.w	r2, #256	; 0x100
 800df0c:	659a      	str	r2, [r3, #88]	; 0x58
 800df0e:	e002      	b.n	800df16 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2200      	movs	r2, #0
 800df14:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	68db      	ldr	r3, [r3, #12]
 800df1a:	4619      	mov	r1, r3
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	f000 fe6d 	bl	800ebfc <HAL_SD_ConfigWideBusOperation>
 800df22:	4603      	mov	r3, r0
 800df24:	2b00      	cmp	r3, #0
 800df26:	d001      	beq.n	800df2c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800df28:	2301      	movs	r3, #1
 800df2a:	e026      	b.n	800df7a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800df2c:	f7f5 feda 	bl	8003ce4 <HAL_GetTick>
 800df30:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800df32:	e011      	b.n	800df58 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800df34:	f7f5 fed6 	bl	8003ce4 <HAL_GetTick>
 800df38:	4602      	mov	r2, r0
 800df3a:	69fb      	ldr	r3, [r7, #28]
 800df3c:	1ad3      	subs	r3, r2, r3
 800df3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df42:	d109      	bne.n	800df58 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800df4a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2201      	movs	r2, #1
 800df50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800df54:	2303      	movs	r3, #3
 800df56:	e010      	b.n	800df7a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f000 ff61 	bl	800ee20 <HAL_SD_GetCardState>
 800df5e:	4603      	mov	r3, r0
 800df60:	2b04      	cmp	r3, #4
 800df62:	d1e7      	bne.n	800df34 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2200      	movs	r2, #0
 800df68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2200      	movs	r2, #0
 800df6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	2201      	movs	r2, #1
 800df74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800df78:	2300      	movs	r3, #0
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	3728      	adds	r7, #40	; 0x28
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}
	...

0800df84 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800df84:	b590      	push	{r4, r7, lr}
 800df86:	b08d      	sub	sp, #52	; 0x34
 800df88:	af02      	add	r7, sp, #8
 800df8a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800df8c:	2300      	movs	r3, #0
 800df8e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800df90:	2300      	movs	r3, #0
 800df92:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800df94:	2300      	movs	r3, #0
 800df96:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800df98:	2300      	movs	r3, #0
 800df9a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800df9c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800dfa0:	f04f 0100 	mov.w	r1, #0
 800dfa4:	f7fe fb76 	bl	800c694 <HAL_RCCEx_GetPeriphCLKFreq>
 800dfa8:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800dfaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d109      	bne.n	800dfc4 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2201      	movs	r2, #1
 800dfb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800dfbe:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	e070      	b.n	800e0a6 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800dfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc6:	0a1b      	lsrs	r3, r3, #8
 800dfc8:	4a39      	ldr	r2, [pc, #228]	; (800e0b0 <HAL_SD_InitCard+0x12c>)
 800dfca:	fba2 2303 	umull	r2, r3, r2, r3
 800dfce:	091b      	lsrs	r3, r3, #4
 800dfd0:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681c      	ldr	r4, [r3, #0]
 800dfd6:	466a      	mov	r2, sp
 800dfd8:	f107 0318 	add.w	r3, r7, #24
 800dfdc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dfe0:	e882 0003 	stmia.w	r2, {r0, r1}
 800dfe4:	f107 030c 	add.w	r3, r7, #12
 800dfe8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dfea:	4620      	mov	r0, r4
 800dfec:	f004 fec4 	bl	8012d78 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	4618      	mov	r0, r3
 800dff6:	f004 ff07 	bl	8012e08 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800dffa:	69fb      	ldr	r3, [r7, #28]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d005      	beq.n	800e00c <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800e000:	69fb      	ldr	r3, [r7, #28]
 800e002:	005b      	lsls	r3, r3, #1
 800e004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e006:	fbb2 f3f3 	udiv	r3, r2, r3
 800e00a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800e00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d007      	beq.n	800e022 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800e012:	4a28      	ldr	r2, [pc, #160]	; (800e0b4 <HAL_SD_InitCard+0x130>)
 800e014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e016:	fbb2 f3f3 	udiv	r3, r2, r3
 800e01a:	3301      	adds	r3, #1
 800e01c:	4618      	mov	r0, r3
 800e01e:	f7f5 fe6d 	bl	8003cfc <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800e022:	6878      	ldr	r0, [r7, #4]
 800e024:	f000 ffea 	bl	800effc <SD_PowerON>
 800e028:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e02a:	6a3b      	ldr	r3, [r7, #32]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d00b      	beq.n	800e048 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2201      	movs	r2, #1
 800e034:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e03c:	6a3b      	ldr	r3, [r7, #32]
 800e03e:	431a      	orrs	r2, r3
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e044:	2301      	movs	r3, #1
 800e046:	e02e      	b.n	800e0a6 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800e048:	6878      	ldr	r0, [r7, #4]
 800e04a:	f000 ff09 	bl	800ee60 <SD_InitCard>
 800e04e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e050:	6a3b      	ldr	r3, [r7, #32]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d00b      	beq.n	800e06e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	2201      	movs	r2, #1
 800e05a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e062:	6a3b      	ldr	r3, [r7, #32]
 800e064:	431a      	orrs	r2, r3
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e06a:	2301      	movs	r3, #1
 800e06c:	e01b      	b.n	800e0a6 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e076:	4618      	mov	r0, r3
 800e078:	f004 ff5c 	bl	8012f34 <SDMMC_CmdBlockLength>
 800e07c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e07e:	6a3b      	ldr	r3, [r7, #32]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d00f      	beq.n	800e0a4 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	4a0b      	ldr	r2, [pc, #44]	; (800e0b8 <HAL_SD_InitCard+0x134>)
 800e08a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e090:	6a3b      	ldr	r3, [r7, #32]
 800e092:	431a      	orrs	r2, r3
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	2201      	movs	r2, #1
 800e09c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800e0a0:	2301      	movs	r3, #1
 800e0a2:	e000      	b.n	800e0a6 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800e0a4:	2300      	movs	r3, #0
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	372c      	adds	r7, #44	; 0x2c
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd90      	pop	{r4, r7, pc}
 800e0ae:	bf00      	nop
 800e0b0:	014f8b59 	.word	0x014f8b59
 800e0b4:	00012110 	.word	0x00012110
 800e0b8:	1fe00fff 	.word	0x1fe00fff

0800e0bc <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b08c      	sub	sp, #48	; 0x30
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	60f8      	str	r0, [r7, #12]
 800e0c4:	60b9      	str	r1, [r7, #8]
 800e0c6:	607a      	str	r2, [r7, #4]
 800e0c8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800e0ce:	68bb      	ldr	r3, [r7, #8]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d107      	bne.n	800e0e4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0d8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e0e0:	2301      	movs	r3, #1
 800e0e2:	e08d      	b.n	800e200 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e0ea:	b2db      	uxtb	r3, r3
 800e0ec:	2b01      	cmp	r3, #1
 800e0ee:	f040 8086 	bne.w	800e1fe <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e0f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	441a      	add	r2, r3
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e102:	429a      	cmp	r2, r3
 800e104:	d907      	bls.n	800e116 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e10a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e112:	2301      	movs	r3, #1
 800e114:	e074      	b.n	800e200 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	2203      	movs	r2, #3
 800e11a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	2200      	movs	r2, #0
 800e124:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	68ba      	ldr	r2, [r7, #8]
 800e12a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800e12c:	683b      	ldr	r3, [r7, #0]
 800e12e:	025a      	lsls	r2, r3, #9
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e138:	2b01      	cmp	r3, #1
 800e13a:	d002      	beq.n	800e142 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800e13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e13e:	025b      	lsls	r3, r3, #9
 800e140:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e142:	f04f 33ff 	mov.w	r3, #4294967295
 800e146:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	025b      	lsls	r3, r3, #9
 800e14c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e14e:	2390      	movs	r3, #144	; 0x90
 800e150:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e152:	2302      	movs	r3, #2
 800e154:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e156:	2300      	movs	r3, #0
 800e158:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800e15a:	2300      	movs	r3, #0
 800e15c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	f107 0210 	add.w	r2, r7, #16
 800e166:	4611      	mov	r1, r2
 800e168:	4618      	mov	r0, r3
 800e16a:	f004 feb7 	bl	8012edc <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	68da      	ldr	r2, [r3, #12]
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e17c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	68ba      	ldr	r2, [r7, #8]
 800e184:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	2201      	movs	r2, #1
 800e18c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	2b01      	cmp	r3, #1
 800e192:	d90a      	bls.n	800e1aa <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	2282      	movs	r2, #130	; 0x82
 800e198:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f004 ff0d 	bl	8012fc0 <SDMMC_CmdReadMultiBlock>
 800e1a6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e1a8:	e009      	b.n	800e1be <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	2281      	movs	r2, #129	; 0x81
 800e1ae:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f004 fedf 	bl	8012f7a <SDMMC_CmdReadSingleBlock>
 800e1bc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800e1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d012      	beq.n	800e1ea <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	4a0f      	ldr	r2, [pc, #60]	; (800e208 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800e1ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1d2:	431a      	orrs	r2, r3
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	2201      	movs	r2, #1
 800e1dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	e00a      	b.n	800e200 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800e1f8:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	e000      	b.n	800e200 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800e1fe:	2302      	movs	r3, #2
  }
}
 800e200:	4618      	mov	r0, r3
 800e202:	3730      	adds	r7, #48	; 0x30
 800e204:	46bd      	mov	sp, r7
 800e206:	bd80      	pop	{r7, pc}
 800e208:	1fe00fff 	.word	0x1fe00fff

0800e20c <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b08c      	sub	sp, #48	; 0x30
 800e210:	af00      	add	r7, sp, #0
 800e212:	60f8      	str	r0, [r7, #12]
 800e214:	60b9      	str	r1, [r7, #8]
 800e216:	607a      	str	r2, [r7, #4]
 800e218:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800e21e:	68bb      	ldr	r3, [r7, #8]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d107      	bne.n	800e234 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e228:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e230:	2301      	movs	r3, #1
 800e232:	e08d      	b.n	800e350 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e23a:	b2db      	uxtb	r3, r3
 800e23c:	2b01      	cmp	r3, #1
 800e23e:	f040 8086 	bne.w	800e34e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	2200      	movs	r2, #0
 800e246:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e248:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	441a      	add	r2, r3
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e252:	429a      	cmp	r2, r3
 800e254:	d907      	bls.n	800e266 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e25a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e262:	2301      	movs	r3, #1
 800e264:	e074      	b.n	800e350 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	2203      	movs	r2, #3
 800e26a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	2200      	movs	r2, #0
 800e274:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	68ba      	ldr	r2, [r7, #8]
 800e27a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	025a      	lsls	r2, r3, #9
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e288:	2b01      	cmp	r3, #1
 800e28a:	d002      	beq.n	800e292 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800e28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e28e:	025b      	lsls	r3, r3, #9
 800e290:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e292:	f04f 33ff 	mov.w	r3, #4294967295
 800e296:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	025b      	lsls	r3, r3, #9
 800e29c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e29e:	2390      	movs	r3, #144	; 0x90
 800e2a0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	f107 0210 	add.w	r2, r7, #16
 800e2b6:	4611      	mov	r1, r2
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f004 fe0f 	bl	8012edc <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	68da      	ldr	r2, [r3, #12]
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e2cc:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	68ba      	ldr	r2, [r7, #8]
 800e2d4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	2201      	movs	r2, #1
 800e2dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	2b01      	cmp	r3, #1
 800e2e2:	d90a      	bls.n	800e2fa <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	22a0      	movs	r2, #160	; 0xa0
 800e2e8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	f004 feab 	bl	801304c <SDMMC_CmdWriteMultiBlock>
 800e2f6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e2f8:	e009      	b.n	800e30e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	2290      	movs	r2, #144	; 0x90
 800e2fe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e306:	4618      	mov	r0, r3
 800e308:	f004 fe7d 	bl	8013006 <SDMMC_CmdWriteSingleBlock>
 800e30c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800e30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e310:	2b00      	cmp	r3, #0
 800e312:	d012      	beq.n	800e33a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	4a0f      	ldr	r2, [pc, #60]	; (800e358 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800e31a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e322:	431a      	orrs	r2, r3
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	2201      	movs	r2, #1
 800e32c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	2200      	movs	r2, #0
 800e334:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800e336:	2301      	movs	r3, #1
 800e338:	e00a      	b.n	800e350 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800e348:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800e34a:	2300      	movs	r3, #0
 800e34c:	e000      	b.n	800e350 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800e34e:	2302      	movs	r3, #2
  }
}
 800e350:	4618      	mov	r0, r3
 800e352:	3730      	adds	r7, #48	; 0x30
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}
 800e358:	1fe00fff 	.word	0x1fe00fff

0800e35c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b084      	sub	sp, #16
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e368:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e370:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e374:	2b00      	cmp	r3, #0
 800e376:	d008      	beq.n	800e38a <HAL_SD_IRQHandler+0x2e>
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	f003 0308 	and.w	r3, r3, #8
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d003      	beq.n	800e38a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f001 f926 	bl	800f5d4 <SD_Read_IT>
 800e388:	e19a      	b.n	800e6c0 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e394:	2b00      	cmp	r3, #0
 800e396:	f000 80ac 	beq.w	800e4f2 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e3a2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681a      	ldr	r2, [r3, #0]
 800e3ae:	4b59      	ldr	r3, [pc, #356]	; (800e514 <HAL_SD_IRQHandler+0x1b8>)
 800e3b0:	400b      	ands	r3, r1
 800e3b2:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e3c2:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	68da      	ldr	r2, [r3, #12]
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e3d2:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	f003 0308 	and.w	r3, r3, #8
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d038      	beq.n	800e450 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	f003 0302 	and.w	r3, r3, #2
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d104      	bne.n	800e3f2 <HAL_SD_IRQHandler+0x96>
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	f003 0320 	and.w	r3, r3, #32
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d011      	beq.n	800e416 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f004 fe4c 	bl	8013094 <SDMMC_CmdStopTransfer>
 800e3fc:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800e3fe:	68bb      	ldr	r3, [r7, #8]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d008      	beq.n	800e416 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	431a      	orrs	r2, r3
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800e410:	6878      	ldr	r0, [r7, #4]
 800e412:	f000 f95b 	bl	800e6cc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	4a3f      	ldr	r2, [pc, #252]	; (800e518 <HAL_SD_IRQHandler+0x1bc>)
 800e41c:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2201      	movs	r2, #1
 800e422:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2200      	movs	r2, #0
 800e42a:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	f003 0301 	and.w	r3, r3, #1
 800e432:	2b00      	cmp	r3, #0
 800e434:	d104      	bne.n	800e440 <HAL_SD_IRQHandler+0xe4>
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	f003 0302 	and.w	r3, r3, #2
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d003      	beq.n	800e448 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800e440:	6878      	ldr	r0, [r7, #4]
 800e442:	f006 fe55 	bl	80150f0 <HAL_SD_RxCpltCallback>
 800e446:	e13b      	b.n	800e6c0 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f006 fe47 	bl	80150dc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800e44e:	e137      	b.n	800e6c0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e456:	2b00      	cmp	r3, #0
 800e458:	f000 8132 	beq.w	800e6c0 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	2200      	movs	r2, #0
 800e462:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	2200      	movs	r2, #0
 800e46a:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	2200      	movs	r2, #0
 800e472:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	f003 0302 	and.w	r3, r3, #2
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d104      	bne.n	800e488 <HAL_SD_IRQHandler+0x12c>
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	f003 0320 	and.w	r3, r3, #32
 800e484:	2b00      	cmp	r3, #0
 800e486:	d011      	beq.n	800e4ac <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	4618      	mov	r0, r3
 800e48e:	f004 fe01 	bl	8013094 <SDMMC_CmdStopTransfer>
 800e492:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d008      	beq.n	800e4ac <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e49e:	68bb      	ldr	r3, [r7, #8]
 800e4a0:	431a      	orrs	r2, r3
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	f000 f910 	bl	800e6cc <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2201      	movs	r2, #1
 800e4b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	f003 0310 	and.w	r3, r3, #16
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d104      	bne.n	800e4ce <HAL_SD_IRQHandler+0x172>
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	f003 0320 	and.w	r3, r3, #32
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d002      	beq.n	800e4d4 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800e4ce:	6878      	ldr	r0, [r7, #4]
 800e4d0:	f006 fe04 	bl	80150dc <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	f003 0301 	and.w	r3, r3, #1
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d105      	bne.n	800e4ea <HAL_SD_IRQHandler+0x18e>
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	f003 0302 	and.w	r3, r3, #2
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	f000 80eb 	beq.w	800e6c0 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800e4ea:	6878      	ldr	r0, [r7, #4]
 800e4ec:	f006 fe00 	bl	80150f0 <HAL_SD_RxCpltCallback>
}
 800e4f0:	e0e6      	b.n	800e6c0 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d00d      	beq.n	800e51c <HAL_SD_IRQHandler+0x1c0>
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	f003 0308 	and.w	r3, r3, #8
 800e506:	2b00      	cmp	r3, #0
 800e508:	d008      	beq.n	800e51c <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800e50a:	6878      	ldr	r0, [r7, #4]
 800e50c:	f001 f8a8 	bl	800f660 <SD_Write_IT>
 800e510:	e0d6      	b.n	800e6c0 <HAL_SD_IRQHandler+0x364>
 800e512:	bf00      	nop
 800e514:	ffff3ec5 	.word	0xffff3ec5
 800e518:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e522:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800e526:	2b00      	cmp	r3, #0
 800e528:	f000 809d 	beq.w	800e666 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e532:	f003 0302 	and.w	r3, r3, #2
 800e536:	2b00      	cmp	r3, #0
 800e538:	d005      	beq.n	800e546 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e53e:	f043 0202 	orr.w	r2, r3, #2
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e54c:	f003 0308 	and.w	r3, r3, #8
 800e550:	2b00      	cmp	r3, #0
 800e552:	d005      	beq.n	800e560 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e558:	f043 0208 	orr.w	r2, r3, #8
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e566:	f003 0320 	and.w	r3, r3, #32
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d005      	beq.n	800e57a <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e572:	f043 0220 	orr.w	r2, r3, #32
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e580:	f003 0310 	and.w	r3, r3, #16
 800e584:	2b00      	cmp	r3, #0
 800e586:	d005      	beq.n	800e594 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e58c:	f043 0210 	orr.w	r2, r3, #16
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	4a4b      	ldr	r2, [pc, #300]	; (800e6c8 <HAL_SD_IRQHandler+0x36c>)
 800e59a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800e5aa:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	68da      	ldr	r2, [r3, #12]
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e5ba:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e5ca:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	68da      	ldr	r2, [r3, #12]
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e5da:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	f004 fd57 	bl	8013094 <SDMMC_CmdStopTransfer>
 800e5e6:	4602      	mov	r2, r0
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5ec:	431a      	orrs	r2, r3
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	68da      	ldr	r2, [r3, #12]
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e600:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e60a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	f003 0308 	and.w	r3, r3, #8
 800e612:	2b00      	cmp	r3, #0
 800e614:	d00a      	beq.n	800e62c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	2201      	movs	r2, #1
 800e61a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	2200      	movs	r2, #0
 800e622:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800e624:	6878      	ldr	r0, [r7, #4]
 800e626:	f000 f851 	bl	800e6cc <HAL_SD_ErrorCallback>
}
 800e62a:	e049      	b.n	800e6c0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e632:	2b00      	cmp	r3, #0
 800e634:	d044      	beq.n	800e6c0 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d040      	beq.n	800e6c0 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e64c:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	2200      	movs	r2, #0
 800e654:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	2201      	movs	r2, #1
 800e65a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800e65e:	6878      	ldr	r0, [r7, #4]
 800e660:	f000 f834 	bl	800e6cc <HAL_SD_ErrorCallback>
}
 800e664:	e02c      	b.n	800e6c0 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e66c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e670:	2b00      	cmp	r3, #0
 800e672:	d025      	beq.n	800e6c0 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e67c:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e684:	f003 0304 	and.w	r3, r3, #4
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d10c      	bne.n	800e6a6 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	f003 0320 	and.w	r3, r3, #32
 800e692:	2b00      	cmp	r3, #0
 800e694:	d003      	beq.n	800e69e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800e696:	6878      	ldr	r0, [r7, #4]
 800e698:	f001 f84a 	bl	800f730 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800e69c:	e010      	b.n	800e6c0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	f001 f832 	bl	800f708 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800e6a4:	e00c      	b.n	800e6c0 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	f003 0320 	and.w	r3, r3, #32
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d003      	beq.n	800e6b8 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800e6b0:	6878      	ldr	r0, [r7, #4]
 800e6b2:	f001 f833 	bl	800f71c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800e6b6:	e003      	b.n	800e6c0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800e6b8:	6878      	ldr	r0, [r7, #4]
 800e6ba:	f001 f81b 	bl	800f6f4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800e6be:	e7ff      	b.n	800e6c0 <HAL_SD_IRQHandler+0x364>
 800e6c0:	bf00      	nop
 800e6c2:	3710      	adds	r7, #16
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bd80      	pop	{r7, pc}
 800e6c8:	18000f3a 	.word	0x18000f3a

0800e6cc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800e6cc:	b480      	push	{r7}
 800e6ce:	b083      	sub	sp, #12
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800e6d4:	bf00      	nop
 800e6d6:	370c      	adds	r7, #12
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6de:	4770      	bx	lr

0800e6e0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800e6e0:	b480      	push	{r7}
 800e6e2:	b083      	sub	sp, #12
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e6ee:	0f9b      	lsrs	r3, r3, #30
 800e6f0:	b2da      	uxtb	r2, r3
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e6fa:	0e9b      	lsrs	r3, r3, #26
 800e6fc:	b2db      	uxtb	r3, r3
 800e6fe:	f003 030f 	and.w	r3, r3, #15
 800e702:	b2da      	uxtb	r2, r3
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e70c:	0e1b      	lsrs	r3, r3, #24
 800e70e:	b2db      	uxtb	r3, r3
 800e710:	f003 0303 	and.w	r3, r3, #3
 800e714:	b2da      	uxtb	r2, r3
 800e716:	683b      	ldr	r3, [r7, #0]
 800e718:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e71e:	0c1b      	lsrs	r3, r3, #16
 800e720:	b2da      	uxtb	r2, r3
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e72a:	0a1b      	lsrs	r3, r3, #8
 800e72c:	b2da      	uxtb	r2, r3
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e736:	b2da      	uxtb	r2, r3
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e740:	0d1b      	lsrs	r3, r3, #20
 800e742:	b29a      	uxth	r2, r3
 800e744:	683b      	ldr	r3, [r7, #0]
 800e746:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e74c:	0c1b      	lsrs	r3, r3, #16
 800e74e:	b2db      	uxtb	r3, r3
 800e750:	f003 030f 	and.w	r3, r3, #15
 800e754:	b2da      	uxtb	r2, r3
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e75e:	0bdb      	lsrs	r3, r3, #15
 800e760:	b2db      	uxtb	r3, r3
 800e762:	f003 0301 	and.w	r3, r3, #1
 800e766:	b2da      	uxtb	r2, r3
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e770:	0b9b      	lsrs	r3, r3, #14
 800e772:	b2db      	uxtb	r3, r3
 800e774:	f003 0301 	and.w	r3, r3, #1
 800e778:	b2da      	uxtb	r2, r3
 800e77a:	683b      	ldr	r3, [r7, #0]
 800e77c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e782:	0b5b      	lsrs	r3, r3, #13
 800e784:	b2db      	uxtb	r3, r3
 800e786:	f003 0301 	and.w	r3, r3, #1
 800e78a:	b2da      	uxtb	r2, r3
 800e78c:	683b      	ldr	r3, [r7, #0]
 800e78e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e794:	0b1b      	lsrs	r3, r3, #12
 800e796:	b2db      	uxtb	r3, r3
 800e798:	f003 0301 	and.w	r3, r3, #1
 800e79c:	b2da      	uxtb	r2, r3
 800e79e:	683b      	ldr	r3, [r7, #0]
 800e7a0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800e7a2:	683b      	ldr	r3, [r7, #0]
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d163      	bne.n	800e878 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e7b4:	009a      	lsls	r2, r3, #2
 800e7b6:	f640 73fc 	movw	r3, #4092	; 0xffc
 800e7ba:	4013      	ands	r3, r2
 800e7bc:	687a      	ldr	r2, [r7, #4]
 800e7be:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800e7c0:	0f92      	lsrs	r2, r2, #30
 800e7c2:	431a      	orrs	r2, r3
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7cc:	0edb      	lsrs	r3, r3, #27
 800e7ce:	b2db      	uxtb	r3, r3
 800e7d0:	f003 0307 	and.w	r3, r3, #7
 800e7d4:	b2da      	uxtb	r2, r3
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7de:	0e1b      	lsrs	r3, r3, #24
 800e7e0:	b2db      	uxtb	r3, r3
 800e7e2:	f003 0307 	and.w	r3, r3, #7
 800e7e6:	b2da      	uxtb	r2, r3
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7f0:	0d5b      	lsrs	r3, r3, #21
 800e7f2:	b2db      	uxtb	r3, r3
 800e7f4:	f003 0307 	and.w	r3, r3, #7
 800e7f8:	b2da      	uxtb	r2, r3
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e802:	0c9b      	lsrs	r3, r3, #18
 800e804:	b2db      	uxtb	r3, r3
 800e806:	f003 0307 	and.w	r3, r3, #7
 800e80a:	b2da      	uxtb	r2, r3
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e814:	0bdb      	lsrs	r3, r3, #15
 800e816:	b2db      	uxtb	r3, r3
 800e818:	f003 0307 	and.w	r3, r3, #7
 800e81c:	b2da      	uxtb	r2, r3
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	691b      	ldr	r3, [r3, #16]
 800e826:	1c5a      	adds	r2, r3, #1
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	7e1b      	ldrb	r3, [r3, #24]
 800e830:	b2db      	uxtb	r3, r3
 800e832:	f003 0307 	and.w	r3, r3, #7
 800e836:	3302      	adds	r3, #2
 800e838:	2201      	movs	r2, #1
 800e83a:	fa02 f303 	lsl.w	r3, r2, r3
 800e83e:	687a      	ldr	r2, [r7, #4]
 800e840:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e842:	fb03 f202 	mul.w	r2, r3, r2
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	7a1b      	ldrb	r3, [r3, #8]
 800e84e:	b2db      	uxtb	r3, r3
 800e850:	f003 030f 	and.w	r3, r3, #15
 800e854:	2201      	movs	r2, #1
 800e856:	409a      	lsls	r2, r3
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e860:	687a      	ldr	r2, [r7, #4]
 800e862:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800e864:	0a52      	lsrs	r2, r2, #9
 800e866:	fb03 f202 	mul.w	r2, r3, r2
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e874:	655a      	str	r2, [r3, #84]	; 0x54
 800e876:	e031      	b.n	800e8dc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e87c:	2b01      	cmp	r3, #1
 800e87e:	d11d      	bne.n	800e8bc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e884:	041b      	lsls	r3, r3, #16
 800e886:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e88e:	0c1b      	lsrs	r3, r3, #16
 800e890:	431a      	orrs	r2, r3
 800e892:	683b      	ldr	r3, [r7, #0]
 800e894:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	691b      	ldr	r3, [r3, #16]
 800e89a:	3301      	adds	r3, #1
 800e89c:	029a      	lsls	r2, r3, #10
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e8b0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	655a      	str	r2, [r3, #84]	; 0x54
 800e8ba:	e00f      	b.n	800e8dc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	4a58      	ldr	r2, [pc, #352]	; (800ea24 <HAL_SD_GetCardCSD+0x344>)
 800e8c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2201      	movs	r2, #1
 800e8d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800e8d8:	2301      	movs	r3, #1
 800e8da:	e09d      	b.n	800ea18 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8e0:	0b9b      	lsrs	r3, r3, #14
 800e8e2:	b2db      	uxtb	r3, r3
 800e8e4:	f003 0301 	and.w	r3, r3, #1
 800e8e8:	b2da      	uxtb	r2, r3
 800e8ea:	683b      	ldr	r3, [r7, #0]
 800e8ec:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8f2:	09db      	lsrs	r3, r3, #7
 800e8f4:	b2db      	uxtb	r3, r3
 800e8f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e8fa:	b2da      	uxtb	r2, r3
 800e8fc:	683b      	ldr	r3, [r7, #0]
 800e8fe:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e904:	b2db      	uxtb	r3, r3
 800e906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e90a:	b2da      	uxtb	r2, r3
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e914:	0fdb      	lsrs	r3, r3, #31
 800e916:	b2da      	uxtb	r2, r3
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e920:	0f5b      	lsrs	r3, r3, #29
 800e922:	b2db      	uxtb	r3, r3
 800e924:	f003 0303 	and.w	r3, r3, #3
 800e928:	b2da      	uxtb	r2, r3
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e932:	0e9b      	lsrs	r3, r3, #26
 800e934:	b2db      	uxtb	r3, r3
 800e936:	f003 0307 	and.w	r3, r3, #7
 800e93a:	b2da      	uxtb	r2, r3
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e944:	0d9b      	lsrs	r3, r3, #22
 800e946:	b2db      	uxtb	r3, r3
 800e948:	f003 030f 	and.w	r3, r3, #15
 800e94c:	b2da      	uxtb	r2, r3
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e956:	0d5b      	lsrs	r3, r3, #21
 800e958:	b2db      	uxtb	r3, r3
 800e95a:	f003 0301 	and.w	r3, r3, #1
 800e95e:	b2da      	uxtb	r2, r3
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e966:	683b      	ldr	r3, [r7, #0]
 800e968:	2200      	movs	r2, #0
 800e96a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e972:	0c1b      	lsrs	r3, r3, #16
 800e974:	b2db      	uxtb	r3, r3
 800e976:	f003 0301 	and.w	r3, r3, #1
 800e97a:	b2da      	uxtb	r2, r3
 800e97c:	683b      	ldr	r3, [r7, #0]
 800e97e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e986:	0bdb      	lsrs	r3, r3, #15
 800e988:	b2db      	uxtb	r3, r3
 800e98a:	f003 0301 	and.w	r3, r3, #1
 800e98e:	b2da      	uxtb	r2, r3
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e99a:	0b9b      	lsrs	r3, r3, #14
 800e99c:	b2db      	uxtb	r3, r3
 800e99e:	f003 0301 	and.w	r3, r3, #1
 800e9a2:	b2da      	uxtb	r2, r3
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9ae:	0b5b      	lsrs	r3, r3, #13
 800e9b0:	b2db      	uxtb	r3, r3
 800e9b2:	f003 0301 	and.w	r3, r3, #1
 800e9b6:	b2da      	uxtb	r2, r3
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9c2:	0b1b      	lsrs	r3, r3, #12
 800e9c4:	b2db      	uxtb	r3, r3
 800e9c6:	f003 0301 	and.w	r3, r3, #1
 800e9ca:	b2da      	uxtb	r2, r3
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9d6:	0a9b      	lsrs	r3, r3, #10
 800e9d8:	b2db      	uxtb	r3, r3
 800e9da:	f003 0303 	and.w	r3, r3, #3
 800e9de:	b2da      	uxtb	r2, r3
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9ea:	0a1b      	lsrs	r3, r3, #8
 800e9ec:	b2db      	uxtb	r3, r3
 800e9ee:	f003 0303 	and.w	r3, r3, #3
 800e9f2:	b2da      	uxtb	r2, r3
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9fe:	085b      	lsrs	r3, r3, #1
 800ea00:	b2db      	uxtb	r3, r3
 800ea02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea06:	b2da      	uxtb	r2, r3
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	2201      	movs	r2, #1
 800ea12:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800ea16:	2300      	movs	r3, #0
}
 800ea18:	4618      	mov	r0, r3
 800ea1a:	370c      	adds	r7, #12
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea22:	4770      	bx	lr
 800ea24:	1fe00fff 	.word	0x1fe00fff

0800ea28 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b094      	sub	sp, #80	; 0x50
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
 800ea30:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800ea32:	2300      	movs	r3, #0
 800ea34:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ea3e:	b2db      	uxtb	r3, r3
 800ea40:	2b03      	cmp	r3, #3
 800ea42:	d101      	bne.n	800ea48 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800ea44:	2301      	movs	r3, #1
 800ea46:	e0a7      	b.n	800eb98 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800ea48:	f107 0308 	add.w	r3, r7, #8
 800ea4c:	4619      	mov	r1, r3
 800ea4e:	6878      	ldr	r0, [r7, #4]
 800ea50:	f000 fb62 	bl	800f118 <SD_SendSDStatus>
 800ea54:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ea56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d011      	beq.n	800ea80 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	4a4f      	ldr	r2, [pc, #316]	; (800eba0 <HAL_SD_GetCardStatus+0x178>)
 800ea62:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea6a:	431a      	orrs	r2, r3
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	2201      	movs	r2, #1
 800ea74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800ea78:	2301      	movs	r3, #1
 800ea7a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ea7e:	e070      	b.n	800eb62 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800ea80:	68bb      	ldr	r3, [r7, #8]
 800ea82:	099b      	lsrs	r3, r3, #6
 800ea84:	b2db      	uxtb	r3, r3
 800ea86:	f003 0303 	and.w	r3, r3, #3
 800ea8a:	b2da      	uxtb	r2, r3
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	095b      	lsrs	r3, r3, #5
 800ea94:	b2db      	uxtb	r3, r3
 800ea96:	f003 0301 	and.w	r3, r3, #1
 800ea9a:	b2da      	uxtb	r2, r3
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	0a1b      	lsrs	r3, r3, #8
 800eaa4:	b29b      	uxth	r3, r3
 800eaa6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800eaaa:	b29a      	uxth	r2, r3
 800eaac:	68bb      	ldr	r3, [r7, #8]
 800eaae:	0e1b      	lsrs	r3, r3, #24
 800eab0:	b29b      	uxth	r3, r3
 800eab2:	4313      	orrs	r3, r2
 800eab4:	b29a      	uxth	r2, r3
 800eab6:	683b      	ldr	r3, [r7, #0]
 800eab8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	061a      	lsls	r2, r3, #24
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	021b      	lsls	r3, r3, #8
 800eac2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eac6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	0a1b      	lsrs	r3, r3, #8
 800eacc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ead0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	0e1b      	lsrs	r3, r3, #24
 800ead6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800eadc:	693b      	ldr	r3, [r7, #16]
 800eade:	b2da      	uxtb	r2, r3
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800eae4:	693b      	ldr	r3, [r7, #16]
 800eae6:	0a1b      	lsrs	r3, r3, #8
 800eae8:	b2da      	uxtb	r2, r3
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800eaee:	693b      	ldr	r3, [r7, #16]
 800eaf0:	0d1b      	lsrs	r3, r3, #20
 800eaf2:	b2db      	uxtb	r3, r3
 800eaf4:	f003 030f 	and.w	r3, r3, #15
 800eaf8:	b2da      	uxtb	r2, r3
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800eafe:	693b      	ldr	r3, [r7, #16]
 800eb00:	0c1b      	lsrs	r3, r3, #16
 800eb02:	b29b      	uxth	r3, r3
 800eb04:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800eb08:	b29a      	uxth	r2, r3
 800eb0a:	697b      	ldr	r3, [r7, #20]
 800eb0c:	b29b      	uxth	r3, r3
 800eb0e:	b2db      	uxtb	r3, r3
 800eb10:	b29b      	uxth	r3, r3
 800eb12:	4313      	orrs	r3, r2
 800eb14:	b29a      	uxth	r2, r3
 800eb16:	683b      	ldr	r3, [r7, #0]
 800eb18:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800eb1a:	697b      	ldr	r3, [r7, #20]
 800eb1c:	0a9b      	lsrs	r3, r3, #10
 800eb1e:	b2db      	uxtb	r3, r3
 800eb20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eb24:	b2da      	uxtb	r2, r3
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800eb2a:	697b      	ldr	r3, [r7, #20]
 800eb2c:	0a1b      	lsrs	r3, r3, #8
 800eb2e:	b2db      	uxtb	r3, r3
 800eb30:	f003 0303 	and.w	r3, r3, #3
 800eb34:	b2da      	uxtb	r2, r3
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	091b      	lsrs	r3, r3, #4
 800eb3e:	b2db      	uxtb	r3, r3
 800eb40:	f003 030f 	and.w	r3, r3, #15
 800eb44:	b2da      	uxtb	r2, r3
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800eb4a:	697b      	ldr	r3, [r7, #20]
 800eb4c:	b2db      	uxtb	r3, r3
 800eb4e:	f003 030f 	and.w	r3, r3, #15
 800eb52:	b2da      	uxtb	r2, r3
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800eb58:	69bb      	ldr	r3, [r7, #24]
 800eb5a:	0e1b      	lsrs	r3, r3, #24
 800eb5c:	b2da      	uxtb	r2, r3
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	f44f 7100 	mov.w	r1, #512	; 0x200
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	f004 f9e2 	bl	8012f34 <SDMMC_CmdBlockLength>
 800eb70:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800eb72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d00d      	beq.n	800eb94 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	4a08      	ldr	r2, [pc, #32]	; (800eba0 <HAL_SD_GetCardStatus+0x178>)
 800eb7e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eb84:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	2201      	movs	r2, #1
 800eb8a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800eb8e:	2301      	movs	r3, #1
 800eb90:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800eb94:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800eb98:	4618      	mov	r0, r3
 800eb9a:	3750      	adds	r7, #80	; 0x50
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}
 800eba0:	1fe00fff 	.word	0x1fe00fff

0800eba4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800eba4:	b480      	push	{r7}
 800eba6:	b083      	sub	sp, #12
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
 800ebac:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ebb2:	683b      	ldr	r3, [r7, #0]
 800ebb4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ebda:	683b      	ldr	r3, [r7, #0]
 800ebdc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ebea:	683b      	ldr	r3, [r7, #0]
 800ebec:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ebee:	2300      	movs	r3, #0
}
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	370c      	adds	r7, #12
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfa:	4770      	bx	lr

0800ebfc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ebfc:	b590      	push	{r4, r7, lr}
 800ebfe:	b08d      	sub	sp, #52	; 0x34
 800ec00:	af02      	add	r7, sp, #8
 800ec02:	6078      	str	r0, [r7, #4]
 800ec04:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800ec06:	2300      	movs	r3, #0
 800ec08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2203      	movs	r2, #3
 800ec10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec18:	2b03      	cmp	r3, #3
 800ec1a:	d02e      	beq.n	800ec7a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ec22:	d106      	bne.n	800ec32 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec28:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	635a      	str	r2, [r3, #52]	; 0x34
 800ec30:	e029      	b.n	800ec86 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ec38:	d10a      	bne.n	800ec50 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ec3a:	6878      	ldr	r0, [r7, #4]
 800ec3c:	f000 fb64 	bl	800f308 <SD_WideBus_Enable>
 800ec40:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ec46:	6a3b      	ldr	r3, [r7, #32]
 800ec48:	431a      	orrs	r2, r3
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	635a      	str	r2, [r3, #52]	; 0x34
 800ec4e:	e01a      	b.n	800ec86 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d10a      	bne.n	800ec6c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ec56:	6878      	ldr	r0, [r7, #4]
 800ec58:	f000 fba1 	bl	800f39e <SD_WideBus_Disable>
 800ec5c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ec62:	6a3b      	ldr	r3, [r7, #32]
 800ec64:	431a      	orrs	r2, r3
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	635a      	str	r2, [r3, #52]	; 0x34
 800ec6a:	e00c      	b.n	800ec86 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec70:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	635a      	str	r2, [r3, #52]	; 0x34
 800ec78:	e005      	b.n	800ec86 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec7e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d007      	beq.n	800ec9e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	4a5f      	ldr	r2, [pc, #380]	; (800ee10 <HAL_SD_ConfigWideBusOperation+0x214>)
 800ec94:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ec96:	2301      	movs	r3, #1
 800ec98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ec9c:	e096      	b.n	800edcc <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800ec9e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800eca2:	f04f 0100 	mov.w	r1, #0
 800eca6:	f7fd fcf5 	bl	800c694 <HAL_RCCEx_GetPeriphCLKFreq>
 800ecaa:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800ecac:	69fb      	ldr	r3, [r7, #28]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	f000 8083 	beq.w	800edba <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	685b      	ldr	r3, [r3, #4]
 800ecb8:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	689b      	ldr	r3, [r3, #8]
 800ecbe:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	691b      	ldr	r3, [r3, #16]
 800ecc8:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	695a      	ldr	r2, [r3, #20]
 800ecce:	69fb      	ldr	r3, [r7, #28]
 800ecd0:	4950      	ldr	r1, [pc, #320]	; (800ee14 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ecd2:	fba1 1303 	umull	r1, r3, r1, r3
 800ecd6:	0e1b      	lsrs	r3, r3, #24
 800ecd8:	429a      	cmp	r2, r3
 800ecda:	d303      	bcc.n	800ece4 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	695b      	ldr	r3, [r3, #20]
 800ece0:	61bb      	str	r3, [r7, #24]
 800ece2:	e05a      	b.n	800ed9a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ece8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ecec:	d103      	bne.n	800ecf6 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	695b      	ldr	r3, [r3, #20]
 800ecf2:	61bb      	str	r3, [r7, #24]
 800ecf4:	e051      	b.n	800ed9a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ecfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ecfe:	d126      	bne.n	800ed4e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	695b      	ldr	r3, [r3, #20]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d10e      	bne.n	800ed26 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800ed08:	69fb      	ldr	r3, [r7, #28]
 800ed0a:	4a43      	ldr	r2, [pc, #268]	; (800ee18 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ed0c:	4293      	cmp	r3, r2
 800ed0e:	d906      	bls.n	800ed1e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ed10:	69fb      	ldr	r3, [r7, #28]
 800ed12:	4a40      	ldr	r2, [pc, #256]	; (800ee14 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ed14:	fba2 2303 	umull	r2, r3, r2, r3
 800ed18:	0e5b      	lsrs	r3, r3, #25
 800ed1a:	61bb      	str	r3, [r7, #24]
 800ed1c:	e03d      	b.n	800ed9a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	695b      	ldr	r3, [r3, #20]
 800ed22:	61bb      	str	r3, [r7, #24]
 800ed24:	e039      	b.n	800ed9a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	695b      	ldr	r3, [r3, #20]
 800ed2a:	005b      	lsls	r3, r3, #1
 800ed2c:	69fa      	ldr	r2, [r7, #28]
 800ed2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed32:	4a39      	ldr	r2, [pc, #228]	; (800ee18 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ed34:	4293      	cmp	r3, r2
 800ed36:	d906      	bls.n	800ed46 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ed38:	69fb      	ldr	r3, [r7, #28]
 800ed3a:	4a36      	ldr	r2, [pc, #216]	; (800ee14 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ed3c:	fba2 2303 	umull	r2, r3, r2, r3
 800ed40:	0e5b      	lsrs	r3, r3, #25
 800ed42:	61bb      	str	r3, [r7, #24]
 800ed44:	e029      	b.n	800ed9a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	695b      	ldr	r3, [r3, #20]
 800ed4a:	61bb      	str	r3, [r7, #24]
 800ed4c:	e025      	b.n	800ed9a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	695b      	ldr	r3, [r3, #20]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d10e      	bne.n	800ed74 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800ed56:	69fb      	ldr	r3, [r7, #28]
 800ed58:	4a30      	ldr	r2, [pc, #192]	; (800ee1c <HAL_SD_ConfigWideBusOperation+0x220>)
 800ed5a:	4293      	cmp	r3, r2
 800ed5c:	d906      	bls.n	800ed6c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ed5e:	69fb      	ldr	r3, [r7, #28]
 800ed60:	4a2c      	ldr	r2, [pc, #176]	; (800ee14 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ed62:	fba2 2303 	umull	r2, r3, r2, r3
 800ed66:	0e1b      	lsrs	r3, r3, #24
 800ed68:	61bb      	str	r3, [r7, #24]
 800ed6a:	e016      	b.n	800ed9a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	695b      	ldr	r3, [r3, #20]
 800ed70:	61bb      	str	r3, [r7, #24]
 800ed72:	e012      	b.n	800ed9a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	695b      	ldr	r3, [r3, #20]
 800ed78:	005b      	lsls	r3, r3, #1
 800ed7a:	69fa      	ldr	r2, [r7, #28]
 800ed7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed80:	4a26      	ldr	r2, [pc, #152]	; (800ee1c <HAL_SD_ConfigWideBusOperation+0x220>)
 800ed82:	4293      	cmp	r3, r2
 800ed84:	d906      	bls.n	800ed94 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ed86:	69fb      	ldr	r3, [r7, #28]
 800ed88:	4a22      	ldr	r2, [pc, #136]	; (800ee14 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ed8a:	fba2 2303 	umull	r2, r3, r2, r3
 800ed8e:	0e1b      	lsrs	r3, r3, #24
 800ed90:	61bb      	str	r3, [r7, #24]
 800ed92:	e002      	b.n	800ed9a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	695b      	ldr	r3, [r3, #20]
 800ed98:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681c      	ldr	r4, [r3, #0]
 800ed9e:	466a      	mov	r2, sp
 800eda0:	f107 0314 	add.w	r3, r7, #20
 800eda4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800eda8:	e882 0003 	stmia.w	r2, {r0, r1}
 800edac:	f107 0308 	add.w	r3, r7, #8
 800edb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800edb2:	4620      	mov	r0, r4
 800edb4:	f003 ffe0 	bl	8012d78 <SDMMC_Init>
 800edb8:	e008      	b.n	800edcc <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edbe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800edc6:	2301      	movs	r3, #1
 800edc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800edd4:	4618      	mov	r0, r3
 800edd6:	f004 f8ad 	bl	8012f34 <SDMMC_CmdBlockLength>
 800edda:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800eddc:	6a3b      	ldr	r3, [r7, #32]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d00c      	beq.n	800edfc <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	4a0a      	ldr	r2, [pc, #40]	; (800ee10 <HAL_SD_ConfigWideBusOperation+0x214>)
 800ede8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800edee:	6a3b      	ldr	r3, [r7, #32]
 800edf0:	431a      	orrs	r2, r3
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800edf6:	2301      	movs	r3, #1
 800edf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	2201      	movs	r2, #1
 800ee00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800ee04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ee08:	4618      	mov	r0, r3
 800ee0a:	372c      	adds	r7, #44	; 0x2c
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd90      	pop	{r4, r7, pc}
 800ee10:	1fe00fff 	.word	0x1fe00fff
 800ee14:	55e63b89 	.word	0x55e63b89
 800ee18:	02faf080 	.word	0x02faf080
 800ee1c:	017d7840 	.word	0x017d7840

0800ee20 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b086      	sub	sp, #24
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ee28:	2300      	movs	r3, #0
 800ee2a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ee2c:	f107 030c 	add.w	r3, r7, #12
 800ee30:	4619      	mov	r1, r3
 800ee32:	6878      	ldr	r0, [r7, #4]
 800ee34:	f000 fa40 	bl	800f2b8 <SD_SendStatus>
 800ee38:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ee3a:	697b      	ldr	r3, [r7, #20]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d005      	beq.n	800ee4c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ee44:	697b      	ldr	r3, [r7, #20]
 800ee46:	431a      	orrs	r2, r3
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	0a5b      	lsrs	r3, r3, #9
 800ee50:	f003 030f 	and.w	r3, r3, #15
 800ee54:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ee56:	693b      	ldr	r3, [r7, #16]
}
 800ee58:	4618      	mov	r0, r3
 800ee5a:	3718      	adds	r7, #24
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd80      	pop	{r7, pc}

0800ee60 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b090      	sub	sp, #64	; 0x40
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800ee68:	2300      	movs	r3, #0
 800ee6a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800ee6c:	f7f4 ff3a 	bl	8003ce4 <HAL_GetTick>
 800ee70:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	4618      	mov	r0, r3
 800ee78:	f003 ffd7 	bl	8012e2a <SDMMC_GetPowerState>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d102      	bne.n	800ee88 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ee82:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ee86:	e0b5      	b.n	800eff4 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee8c:	2b03      	cmp	r3, #3
 800ee8e:	d02e      	beq.n	800eeee <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	4618      	mov	r0, r3
 800ee96:	f004 fa22 	bl	80132de <SDMMC_CmdSendCID>
 800ee9a:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800ee9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d001      	beq.n	800eea6 <SD_InitCard+0x46>
    {
      return errorstate;
 800eea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eea4:	e0a6      	b.n	800eff4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	2100      	movs	r1, #0
 800eeac:	4618      	mov	r0, r3
 800eeae:	f004 f802 	bl	8012eb6 <SDMMC_GetResponse>
 800eeb2:	4602      	mov	r2, r0
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	2104      	movs	r1, #4
 800eebe:	4618      	mov	r0, r3
 800eec0:	f003 fff9 	bl	8012eb6 <SDMMC_GetResponse>
 800eec4:	4602      	mov	r2, r0
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	2108      	movs	r1, #8
 800eed0:	4618      	mov	r0, r3
 800eed2:	f003 fff0 	bl	8012eb6 <SDMMC_GetResponse>
 800eed6:	4602      	mov	r2, r0
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	210c      	movs	r1, #12
 800eee2:	4618      	mov	r0, r3
 800eee4:	f003 ffe7 	bl	8012eb6 <SDMMC_GetResponse>
 800eee8:	4602      	mov	r2, r0
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eef2:	2b03      	cmp	r3, #3
 800eef4:	d01d      	beq.n	800ef32 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800eef6:	e019      	b.n	800ef2c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	f107 020a 	add.w	r2, r7, #10
 800ef00:	4611      	mov	r1, r2
 800ef02:	4618      	mov	r0, r3
 800ef04:	f004 fa2a 	bl	801335c <SDMMC_CmdSetRelAdd>
 800ef08:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800ef0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d001      	beq.n	800ef14 <SD_InitCard+0xb4>
      {
        return errorstate;
 800ef10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef12:	e06f      	b.n	800eff4 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800ef14:	f7f4 fee6 	bl	8003ce4 <HAL_GetTick>
 800ef18:	4602      	mov	r2, r0
 800ef1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef1c:	1ad3      	subs	r3, r2, r3
 800ef1e:	f241 3287 	movw	r2, #4999	; 0x1387
 800ef22:	4293      	cmp	r3, r2
 800ef24:	d902      	bls.n	800ef2c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800ef26:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ef2a:	e063      	b.n	800eff4 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800ef2c:	897b      	ldrh	r3, [r7, #10]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d0e2      	beq.n	800eef8 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef36:	2b03      	cmp	r3, #3
 800ef38:	d036      	beq.n	800efa8 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ef3a:	897b      	ldrh	r3, [r7, #10]
 800ef3c:	461a      	mov	r2, r3
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681a      	ldr	r2, [r3, #0]
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef4a:	041b      	lsls	r3, r3, #16
 800ef4c:	4619      	mov	r1, r3
 800ef4e:	4610      	mov	r0, r2
 800ef50:	f004 f9e4 	bl	801331c <SDMMC_CmdSendCSD>
 800ef54:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800ef56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d001      	beq.n	800ef60 <SD_InitCard+0x100>
    {
      return errorstate;
 800ef5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef5e:	e049      	b.n	800eff4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	2100      	movs	r1, #0
 800ef66:	4618      	mov	r0, r3
 800ef68:	f003 ffa5 	bl	8012eb6 <SDMMC_GetResponse>
 800ef6c:	4602      	mov	r2, r0
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	2104      	movs	r1, #4
 800ef78:	4618      	mov	r0, r3
 800ef7a:	f003 ff9c 	bl	8012eb6 <SDMMC_GetResponse>
 800ef7e:	4602      	mov	r2, r0
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	2108      	movs	r1, #8
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f003 ff93 	bl	8012eb6 <SDMMC_GetResponse>
 800ef90:	4602      	mov	r2, r0
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	210c      	movs	r1, #12
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f003 ff8a 	bl	8012eb6 <SDMMC_GetResponse>
 800efa2:	4602      	mov	r2, r0
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	2104      	movs	r1, #4
 800efae:	4618      	mov	r0, r3
 800efb0:	f003 ff81 	bl	8012eb6 <SDMMC_GetResponse>
 800efb4:	4603      	mov	r3, r0
 800efb6:	0d1a      	lsrs	r2, r3, #20
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800efbc:	f107 030c 	add.w	r3, r7, #12
 800efc0:	4619      	mov	r1, r3
 800efc2:	6878      	ldr	r0, [r7, #4]
 800efc4:	f7ff fb8c 	bl	800e6e0 <HAL_SD_GetCardCSD>
 800efc8:	4603      	mov	r3, r0
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d002      	beq.n	800efd4 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800efce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800efd2:	e00f      	b.n	800eff4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681a      	ldr	r2, [r3, #0]
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800efdc:	041b      	lsls	r3, r3, #16
 800efde:	4619      	mov	r1, r3
 800efe0:	4610      	mov	r0, r2
 800efe2:	f004 f893 	bl	801310c <SDMMC_CmdSelDesel>
 800efe6:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800efe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efea:	2b00      	cmp	r3, #0
 800efec:	d001      	beq.n	800eff2 <SD_InitCard+0x192>
  {
    return errorstate;
 800efee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eff0:	e000      	b.n	800eff4 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800eff2:	2300      	movs	r3, #0
}
 800eff4:	4618      	mov	r0, r3
 800eff6:	3740      	adds	r7, #64	; 0x40
 800eff8:	46bd      	mov	sp, r7
 800effa:	bd80      	pop	{r7, pc}

0800effc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b086      	sub	sp, #24
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f004:	2300      	movs	r3, #0
 800f006:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800f008:	2300      	movs	r3, #0
 800f00a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800f00c:	2300      	movs	r3, #0
 800f00e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	4618      	mov	r0, r3
 800f016:	f004 f89c 	bl	8013152 <SDMMC_CmdGoIdleState>
 800f01a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d001      	beq.n	800f026 <SD_PowerON+0x2a>
  {
    return errorstate;
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	e072      	b.n	800f10c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	4618      	mov	r0, r3
 800f02c:	f004 f8af 	bl	801318e <SDMMC_CmdOperCond>
 800f030:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f038:	d10d      	bne.n	800f056 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	2200      	movs	r2, #0
 800f03e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	4618      	mov	r0, r3
 800f046:	f004 f884 	bl	8013152 <SDMMC_CmdGoIdleState>
 800f04a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d004      	beq.n	800f05c <SD_PowerON+0x60>
    {
      return errorstate;
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	e05a      	b.n	800f10c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	2201      	movs	r2, #1
 800f05a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f060:	2b01      	cmp	r3, #1
 800f062:	d137      	bne.n	800f0d4 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	2100      	movs	r1, #0
 800f06a:	4618      	mov	r0, r3
 800f06c:	f004 f8af 	bl	80131ce <SDMMC_CmdAppCommand>
 800f070:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d02d      	beq.n	800f0d4 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f078:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f07c:	e046      	b.n	800f10c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	2100      	movs	r1, #0
 800f084:	4618      	mov	r0, r3
 800f086:	f004 f8a2 	bl	80131ce <SDMMC_CmdAppCommand>
 800f08a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d001      	beq.n	800f096 <SD_PowerON+0x9a>
    {
      return errorstate;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	e03a      	b.n	800f10c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	491e      	ldr	r1, [pc, #120]	; (800f114 <SD_PowerON+0x118>)
 800f09c:	4618      	mov	r0, r3
 800f09e:	f004 f8b9 	bl	8013214 <SDMMC_CmdAppOperCommand>
 800f0a2:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d002      	beq.n	800f0b0 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f0aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f0ae:	e02d      	b.n	800f10c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	2100      	movs	r1, #0
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f003 fefd 	bl	8012eb6 <SDMMC_GetResponse>
 800f0bc:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800f0be:	697b      	ldr	r3, [r7, #20]
 800f0c0:	0fdb      	lsrs	r3, r3, #31
 800f0c2:	2b01      	cmp	r3, #1
 800f0c4:	d101      	bne.n	800f0ca <SD_PowerON+0xce>
 800f0c6:	2301      	movs	r3, #1
 800f0c8:	e000      	b.n	800f0cc <SD_PowerON+0xd0>
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	613b      	str	r3, [r7, #16]

    count++;
 800f0ce:	68bb      	ldr	r3, [r7, #8]
 800f0d0:	3301      	adds	r3, #1
 800f0d2:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800f0d4:	68bb      	ldr	r3, [r7, #8]
 800f0d6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f0da:	4293      	cmp	r3, r2
 800f0dc:	d802      	bhi.n	800f0e4 <SD_PowerON+0xe8>
 800f0de:	693b      	ldr	r3, [r7, #16]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d0cc      	beq.n	800f07e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800f0e4:	68bb      	ldr	r3, [r7, #8]
 800f0e6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f0ea:	4293      	cmp	r3, r2
 800f0ec:	d902      	bls.n	800f0f4 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800f0ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f0f2:	e00b      	b.n	800f10c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800f0fa:	697b      	ldr	r3, [r7, #20]
 800f0fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f100:	2b00      	cmp	r3, #0
 800f102:	d002      	beq.n	800f10a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2201      	movs	r2, #1
 800f108:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800f10a:	2300      	movs	r3, #0
}
 800f10c:	4618      	mov	r0, r3
 800f10e:	3718      	adds	r7, #24
 800f110:	46bd      	mov	sp, r7
 800f112:	bd80      	pop	{r7, pc}
 800f114:	c1100000 	.word	0xc1100000

0800f118 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b08c      	sub	sp, #48	; 0x30
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
 800f120:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f122:	f7f4 fddf 	bl	8003ce4 <HAL_GetTick>
 800f126:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800f128:	683b      	ldr	r3, [r7, #0]
 800f12a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	2100      	movs	r1, #0
 800f132:	4618      	mov	r0, r3
 800f134:	f003 febf 	bl	8012eb6 <SDMMC_GetResponse>
 800f138:	4603      	mov	r3, r0
 800f13a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f13e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f142:	d102      	bne.n	800f14a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f144:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f148:	e0b0      	b.n	800f2ac <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	2140      	movs	r1, #64	; 0x40
 800f150:	4618      	mov	r0, r3
 800f152:	f003 feef 	bl	8012f34 <SDMMC_CmdBlockLength>
 800f156:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f158:	6a3b      	ldr	r3, [r7, #32]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d005      	beq.n	800f16a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800f166:	6a3b      	ldr	r3, [r7, #32]
 800f168:	e0a0      	b.n	800f2ac <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	681a      	ldr	r2, [r3, #0]
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f172:	041b      	lsls	r3, r3, #16
 800f174:	4619      	mov	r1, r3
 800f176:	4610      	mov	r0, r2
 800f178:	f004 f829 	bl	80131ce <SDMMC_CmdAppCommand>
 800f17c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f17e:	6a3b      	ldr	r3, [r7, #32]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d005      	beq.n	800f190 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800f18c:	6a3b      	ldr	r3, [r7, #32]
 800f18e:	e08d      	b.n	800f2ac <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f190:	f04f 33ff 	mov.w	r3, #4294967295
 800f194:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800f196:	2340      	movs	r3, #64	; 0x40
 800f198:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800f19a:	2360      	movs	r3, #96	; 0x60
 800f19c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f19e:	2302      	movs	r3, #2
 800f1a0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f1a6:	2301      	movs	r3, #1
 800f1a8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	f107 0208 	add.w	r2, r7, #8
 800f1b2:	4611      	mov	r1, r2
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	f003 fe91 	bl	8012edc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f004 f911 	bl	80133e6 <SDMMC_CmdStatusRegister>
 800f1c4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f1c6:	6a3b      	ldr	r3, [r7, #32]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d02b      	beq.n	800f224 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800f1d4:	6a3b      	ldr	r3, [r7, #32]
 800f1d6:	e069      	b.n	800f2ac <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d013      	beq.n	800f20e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f1ea:	e00d      	b.n	800f208 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	f003 fdeb 	bl	8012dcc <SDMMC_ReadFIFO>
 800f1f6:	4602      	mov	r2, r0
 800f1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1fa:	601a      	str	r2, [r3, #0]
        pData++;
 800f1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1fe:	3304      	adds	r3, #4
 800f200:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800f202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f204:	3301      	adds	r3, #1
 800f206:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f20a:	2b07      	cmp	r3, #7
 800f20c:	d9ee      	bls.n	800f1ec <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f20e:	f7f4 fd69 	bl	8003ce4 <HAL_GetTick>
 800f212:	4602      	mov	r2, r0
 800f214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f216:	1ad3      	subs	r3, r2, r3
 800f218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f21c:	d102      	bne.n	800f224 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f21e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f222:	e043      	b.n	800f2ac <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f22a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d0d2      	beq.n	800f1d8 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f238:	f003 0308 	and.w	r3, r3, #8
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d001      	beq.n	800f244 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f240:	2308      	movs	r3, #8
 800f242:	e033      	b.n	800f2ac <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f24a:	f003 0302 	and.w	r3, r3, #2
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d001      	beq.n	800f256 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f252:	2302      	movs	r3, #2
 800f254:	e02a      	b.n	800f2ac <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f25c:	f003 0320 	and.w	r3, r3, #32
 800f260:	2b00      	cmp	r3, #0
 800f262:	d017      	beq.n	800f294 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800f264:	2320      	movs	r3, #32
 800f266:	e021      	b.n	800f2ac <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	4618      	mov	r0, r3
 800f26e:	f003 fdad 	bl	8012dcc <SDMMC_ReadFIFO>
 800f272:	4602      	mov	r2, r0
 800f274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f276:	601a      	str	r2, [r3, #0]
    pData++;
 800f278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f27a:	3304      	adds	r3, #4
 800f27c:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f27e:	f7f4 fd31 	bl	8003ce4 <HAL_GetTick>
 800f282:	4602      	mov	r2, r0
 800f284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f286:	1ad3      	subs	r3, r2, r3
 800f288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f28c:	d102      	bne.n	800f294 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f28e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f292:	e00b      	b.n	800f2ac <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f29a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d1e2      	bne.n	800f268 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	4a03      	ldr	r2, [pc, #12]	; (800f2b4 <SD_SendSDStatus+0x19c>)
 800f2a8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800f2aa:	2300      	movs	r3, #0
}
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	3730      	adds	r7, #48	; 0x30
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bd80      	pop	{r7, pc}
 800f2b4:	18000f3a 	.word	0x18000f3a

0800f2b8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b084      	sub	sp, #16
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
 800f2c0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800f2c2:	683b      	ldr	r3, [r7, #0]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d102      	bne.n	800f2ce <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800f2c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f2cc:	e018      	b.n	800f300 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681a      	ldr	r2, [r3, #0]
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2d6:	041b      	lsls	r3, r3, #16
 800f2d8:	4619      	mov	r1, r3
 800f2da:	4610      	mov	r0, r2
 800f2dc:	f004 f860 	bl	80133a0 <SDMMC_CmdSendStatus>
 800f2e0:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d001      	beq.n	800f2ec <SD_SendStatus+0x34>
  {
    return errorstate;
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	e009      	b.n	800f300 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	2100      	movs	r1, #0
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f003 fddf 	bl	8012eb6 <SDMMC_GetResponse>
 800f2f8:	4602      	mov	r2, r0
 800f2fa:	683b      	ldr	r3, [r7, #0]
 800f2fc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800f2fe:	2300      	movs	r3, #0
}
 800f300:	4618      	mov	r0, r3
 800f302:	3710      	adds	r7, #16
 800f304:	46bd      	mov	sp, r7
 800f306:	bd80      	pop	{r7, pc}

0800f308 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b086      	sub	sp, #24
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800f310:	2300      	movs	r3, #0
 800f312:	60fb      	str	r3, [r7, #12]
 800f314:	2300      	movs	r3, #0
 800f316:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	2100      	movs	r1, #0
 800f31e:	4618      	mov	r0, r3
 800f320:	f003 fdc9 	bl	8012eb6 <SDMMC_GetResponse>
 800f324:	4603      	mov	r3, r0
 800f326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f32a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f32e:	d102      	bne.n	800f336 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f330:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f334:	e02f      	b.n	800f396 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f336:	f107 030c 	add.w	r3, r7, #12
 800f33a:	4619      	mov	r1, r3
 800f33c:	6878      	ldr	r0, [r7, #4]
 800f33e:	f000 f879 	bl	800f434 <SD_FindSCR>
 800f342:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f344:	697b      	ldr	r3, [r7, #20]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d001      	beq.n	800f34e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800f34a:	697b      	ldr	r3, [r7, #20]
 800f34c:	e023      	b.n	800f396 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f34e:	693b      	ldr	r3, [r7, #16]
 800f350:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f354:	2b00      	cmp	r3, #0
 800f356:	d01c      	beq.n	800f392 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681a      	ldr	r2, [r3, #0]
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f360:	041b      	lsls	r3, r3, #16
 800f362:	4619      	mov	r1, r3
 800f364:	4610      	mov	r0, r2
 800f366:	f003 ff32 	bl	80131ce <SDMMC_CmdAppCommand>
 800f36a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f36c:	697b      	ldr	r3, [r7, #20]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d001      	beq.n	800f376 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800f372:	697b      	ldr	r3, [r7, #20]
 800f374:	e00f      	b.n	800f396 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	2102      	movs	r1, #2
 800f37c:	4618      	mov	r0, r3
 800f37e:	f003 ff69 	bl	8013254 <SDMMC_CmdBusWidth>
 800f382:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f384:	697b      	ldr	r3, [r7, #20]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d001      	beq.n	800f38e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800f38a:	697b      	ldr	r3, [r7, #20]
 800f38c:	e003      	b.n	800f396 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f38e:	2300      	movs	r3, #0
 800f390:	e001      	b.n	800f396 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f392:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f396:	4618      	mov	r0, r3
 800f398:	3718      	adds	r7, #24
 800f39a:	46bd      	mov	sp, r7
 800f39c:	bd80      	pop	{r7, pc}

0800f39e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800f39e:	b580      	push	{r7, lr}
 800f3a0:	b086      	sub	sp, #24
 800f3a2:	af00      	add	r7, sp, #0
 800f3a4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	60fb      	str	r3, [r7, #12]
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	2100      	movs	r1, #0
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	f003 fd7e 	bl	8012eb6 <SDMMC_GetResponse>
 800f3ba:	4603      	mov	r3, r0
 800f3bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f3c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f3c4:	d102      	bne.n	800f3cc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f3c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f3ca:	e02f      	b.n	800f42c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f3cc:	f107 030c 	add.w	r3, r7, #12
 800f3d0:	4619      	mov	r1, r3
 800f3d2:	6878      	ldr	r0, [r7, #4]
 800f3d4:	f000 f82e 	bl	800f434 <SD_FindSCR>
 800f3d8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f3da:	697b      	ldr	r3, [r7, #20]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d001      	beq.n	800f3e4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800f3e0:	697b      	ldr	r3, [r7, #20]
 800f3e2:	e023      	b.n	800f42c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f3e4:	693b      	ldr	r3, [r7, #16]
 800f3e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d01c      	beq.n	800f428 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681a      	ldr	r2, [r3, #0]
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3f6:	041b      	lsls	r3, r3, #16
 800f3f8:	4619      	mov	r1, r3
 800f3fa:	4610      	mov	r0, r2
 800f3fc:	f003 fee7 	bl	80131ce <SDMMC_CmdAppCommand>
 800f400:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f402:	697b      	ldr	r3, [r7, #20]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d001      	beq.n	800f40c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800f408:	697b      	ldr	r3, [r7, #20]
 800f40a:	e00f      	b.n	800f42c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	2100      	movs	r1, #0
 800f412:	4618      	mov	r0, r3
 800f414:	f003 ff1e 	bl	8013254 <SDMMC_CmdBusWidth>
 800f418:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f41a:	697b      	ldr	r3, [r7, #20]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d001      	beq.n	800f424 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800f420:	697b      	ldr	r3, [r7, #20]
 800f422:	e003      	b.n	800f42c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f424:	2300      	movs	r3, #0
 800f426:	e001      	b.n	800f42c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f428:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f42c:	4618      	mov	r0, r3
 800f42e:	3718      	adds	r7, #24
 800f430:	46bd      	mov	sp, r7
 800f432:	bd80      	pop	{r7, pc}

0800f434 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800f434:	b580      	push	{r7, lr}
 800f436:	b08e      	sub	sp, #56	; 0x38
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
 800f43c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f43e:	f7f4 fc51 	bl	8003ce4 <HAL_GetTick>
 800f442:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800f444:	2300      	movs	r3, #0
 800f446:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800f448:	2300      	movs	r3, #0
 800f44a:	60bb      	str	r3, [r7, #8]
 800f44c:	2300      	movs	r3, #0
 800f44e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800f450:	683b      	ldr	r3, [r7, #0]
 800f452:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	2108      	movs	r1, #8
 800f45a:	4618      	mov	r0, r3
 800f45c:	f003 fd6a 	bl	8012f34 <SDMMC_CmdBlockLength>
 800f460:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f464:	2b00      	cmp	r3, #0
 800f466:	d001      	beq.n	800f46c <SD_FindSCR+0x38>
  {
    return errorstate;
 800f468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f46a:	e0ad      	b.n	800f5c8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	681a      	ldr	r2, [r3, #0]
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f474:	041b      	lsls	r3, r3, #16
 800f476:	4619      	mov	r1, r3
 800f478:	4610      	mov	r0, r2
 800f47a:	f003 fea8 	bl	80131ce <SDMMC_CmdAppCommand>
 800f47e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f482:	2b00      	cmp	r3, #0
 800f484:	d001      	beq.n	800f48a <SD_FindSCR+0x56>
  {
    return errorstate;
 800f486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f488:	e09e      	b.n	800f5c8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f48a:	f04f 33ff 	mov.w	r3, #4294967295
 800f48e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800f490:	2308      	movs	r3, #8
 800f492:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800f494:	2330      	movs	r3, #48	; 0x30
 800f496:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f498:	2302      	movs	r3, #2
 800f49a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f49c:	2300      	movs	r3, #0
 800f49e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f4a0:	2301      	movs	r3, #1
 800f4a2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	f107 0210 	add.w	r2, r7, #16
 800f4ac:	4611      	mov	r1, r2
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f003 fd14 	bl	8012edc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	f003 feee 	bl	801329a <SDMMC_CmdSendSCR>
 800f4be:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d027      	beq.n	800f516 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800f4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c8:	e07e      	b.n	800f5c8 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d113      	bne.n	800f500 <SD_FindSCR+0xcc>
 800f4d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d110      	bne.n	800f500 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	f003 fc72 	bl	8012dcc <SDMMC_ReadFIFO>
 800f4e8:	4603      	mov	r3, r0
 800f4ea:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	f003 fc6b 	bl	8012dcc <SDMMC_ReadFIFO>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	60fb      	str	r3, [r7, #12]
      index++;
 800f4fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4fc:	3301      	adds	r3, #1
 800f4fe:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f500:	f7f4 fbf0 	bl	8003ce4 <HAL_GetTick>
 800f504:	4602      	mov	r2, r0
 800f506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f508:	1ad3      	subs	r3, r2, r3
 800f50a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f50e:	d102      	bne.n	800f516 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f510:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f514:	e058      	b.n	800f5c8 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f51c:	f240 532a 	movw	r3, #1322	; 0x52a
 800f520:	4013      	ands	r3, r2
 800f522:	2b00      	cmp	r3, #0
 800f524:	d0d1      	beq.n	800f4ca <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f52c:	f003 0308 	and.w	r3, r3, #8
 800f530:	2b00      	cmp	r3, #0
 800f532:	d005      	beq.n	800f540 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	2208      	movs	r2, #8
 800f53a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f53c:	2308      	movs	r3, #8
 800f53e:	e043      	b.n	800f5c8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f546:	f003 0302 	and.w	r3, r3, #2
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d005      	beq.n	800f55a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	2202      	movs	r2, #2
 800f554:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f556:	2302      	movs	r3, #2
 800f558:	e036      	b.n	800f5c8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f560:	f003 0320 	and.w	r3, r3, #32
 800f564:	2b00      	cmp	r3, #0
 800f566:	d005      	beq.n	800f574 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	2220      	movs	r2, #32
 800f56e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800f570:	2320      	movs	r3, #32
 800f572:	e029      	b.n	800f5c8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	4a15      	ldr	r2, [pc, #84]	; (800f5d0 <SD_FindSCR+0x19c>)
 800f57a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	061a      	lsls	r2, r3, #24
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	021b      	lsls	r3, r3, #8
 800f584:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f588:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	0a1b      	lsrs	r3, r3, #8
 800f58e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f592:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	0e1b      	lsrs	r3, r3, #24
 800f598:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f59c:	601a      	str	r2, [r3, #0]
    scr++;
 800f59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5a0:	3304      	adds	r3, #4
 800f5a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f5a4:	68bb      	ldr	r3, [r7, #8]
 800f5a6:	061a      	lsls	r2, r3, #24
 800f5a8:	68bb      	ldr	r3, [r7, #8]
 800f5aa:	021b      	lsls	r3, r3, #8
 800f5ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f5b0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	0a1b      	lsrs	r3, r3, #8
 800f5b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f5ba:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f5bc:	68bb      	ldr	r3, [r7, #8]
 800f5be:	0e1b      	lsrs	r3, r3, #24
 800f5c0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5c4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800f5c6:	2300      	movs	r3, #0
}
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	3738      	adds	r7, #56	; 0x38
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	bd80      	pop	{r7, pc}
 800f5d0:	18000f3a 	.word	0x18000f3a

0800f5d4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b086      	sub	sp, #24
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5e0:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5e6:	2b1f      	cmp	r3, #31
 800f5e8:	d936      	bls.n	800f658 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	617b      	str	r3, [r7, #20]
 800f5ee:	e027      	b.n	800f640 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	f003 fbe9 	bl	8012dcc <SDMMC_ReadFIFO>
 800f5fa:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	b2da      	uxtb	r2, r3
 800f600:	693b      	ldr	r3, [r7, #16]
 800f602:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f604:	693b      	ldr	r3, [r7, #16]
 800f606:	3301      	adds	r3, #1
 800f608:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	0a1b      	lsrs	r3, r3, #8
 800f60e:	b2da      	uxtb	r2, r3
 800f610:	693b      	ldr	r3, [r7, #16]
 800f612:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f614:	693b      	ldr	r3, [r7, #16]
 800f616:	3301      	adds	r3, #1
 800f618:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	0c1b      	lsrs	r3, r3, #16
 800f61e:	b2da      	uxtb	r2, r3
 800f620:	693b      	ldr	r3, [r7, #16]
 800f622:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f624:	693b      	ldr	r3, [r7, #16]
 800f626:	3301      	adds	r3, #1
 800f628:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	0e1b      	lsrs	r3, r3, #24
 800f62e:	b2da      	uxtb	r2, r3
 800f630:	693b      	ldr	r3, [r7, #16]
 800f632:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f634:	693b      	ldr	r3, [r7, #16]
 800f636:	3301      	adds	r3, #1
 800f638:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800f63a:	697b      	ldr	r3, [r7, #20]
 800f63c:	3301      	adds	r3, #1
 800f63e:	617b      	str	r3, [r7, #20]
 800f640:	697b      	ldr	r3, [r7, #20]
 800f642:	2b07      	cmp	r3, #7
 800f644:	d9d4      	bls.n	800f5f0 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	693a      	ldr	r2, [r7, #16]
 800f64a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f650:	f1a3 0220 	sub.w	r2, r3, #32
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800f658:	bf00      	nop
 800f65a:	3718      	adds	r7, #24
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bd80      	pop	{r7, pc}

0800f660 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b086      	sub	sp, #24
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	69db      	ldr	r3, [r3, #28]
 800f66c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	6a1b      	ldr	r3, [r3, #32]
 800f672:	2b1f      	cmp	r3, #31
 800f674:	d93a      	bls.n	800f6ec <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800f676:	2300      	movs	r3, #0
 800f678:	617b      	str	r3, [r7, #20]
 800f67a:	e02b      	b.n	800f6d4 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800f67c:	693b      	ldr	r3, [r7, #16]
 800f67e:	781b      	ldrb	r3, [r3, #0]
 800f680:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f682:	693b      	ldr	r3, [r7, #16]
 800f684:	3301      	adds	r3, #1
 800f686:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800f688:	693b      	ldr	r3, [r7, #16]
 800f68a:	781b      	ldrb	r3, [r3, #0]
 800f68c:	021a      	lsls	r2, r3, #8
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	4313      	orrs	r3, r2
 800f692:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f694:	693b      	ldr	r3, [r7, #16]
 800f696:	3301      	adds	r3, #1
 800f698:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800f69a:	693b      	ldr	r3, [r7, #16]
 800f69c:	781b      	ldrb	r3, [r3, #0]
 800f69e:	041a      	lsls	r2, r3, #16
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	4313      	orrs	r3, r2
 800f6a4:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f6a6:	693b      	ldr	r3, [r7, #16]
 800f6a8:	3301      	adds	r3, #1
 800f6aa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800f6ac:	693b      	ldr	r3, [r7, #16]
 800f6ae:	781b      	ldrb	r3, [r3, #0]
 800f6b0:	061a      	lsls	r2, r3, #24
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	4313      	orrs	r3, r2
 800f6b6:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f6b8:	693b      	ldr	r3, [r7, #16]
 800f6ba:	3301      	adds	r3, #1
 800f6bc:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	f107 020c 	add.w	r2, r7, #12
 800f6c6:	4611      	mov	r1, r2
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	f003 fb8c 	bl	8012de6 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800f6ce:	697b      	ldr	r3, [r7, #20]
 800f6d0:	3301      	adds	r3, #1
 800f6d2:	617b      	str	r3, [r7, #20]
 800f6d4:	697b      	ldr	r3, [r7, #20]
 800f6d6:	2b07      	cmp	r3, #7
 800f6d8:	d9d0      	bls.n	800f67c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	693a      	ldr	r2, [r7, #16]
 800f6de:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	6a1b      	ldr	r3, [r3, #32]
 800f6e4:	f1a3 0220 	sub.w	r2, r3, #32
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	621a      	str	r2, [r3, #32]
  }
}
 800f6ec:	bf00      	nop
 800f6ee:	3718      	adds	r7, #24
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	bd80      	pop	{r7, pc}

0800f6f4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800f6f4:	b480      	push	{r7}
 800f6f6:	b083      	sub	sp, #12
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800f6fc:	bf00      	nop
 800f6fe:	370c      	adds	r7, #12
 800f700:	46bd      	mov	sp, r7
 800f702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f706:	4770      	bx	lr

0800f708 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800f708:	b480      	push	{r7}
 800f70a:	b083      	sub	sp, #12
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800f710:	bf00      	nop
 800f712:	370c      	adds	r7, #12
 800f714:	46bd      	mov	sp, r7
 800f716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71a:	4770      	bx	lr

0800f71c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800f71c:	b480      	push	{r7}
 800f71e:	b083      	sub	sp, #12
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800f724:	bf00      	nop
 800f726:	370c      	adds	r7, #12
 800f728:	46bd      	mov	sp, r7
 800f72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72e:	4770      	bx	lr

0800f730 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800f730:	b480      	push	{r7}
 800f732:	b083      	sub	sp, #12
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800f738:	bf00      	nop
 800f73a:	370c      	adds	r7, #12
 800f73c:	46bd      	mov	sp, r7
 800f73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f742:	4770      	bx	lr

0800f744 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b084      	sub	sp, #16
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d101      	bne.n	800f756 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f752:	2301      	movs	r3, #1
 800f754:	e10f      	b.n	800f976 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	2200      	movs	r2, #0
 800f75a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	4a87      	ldr	r2, [pc, #540]	; (800f980 <HAL_SPI_Init+0x23c>)
 800f762:	4293      	cmp	r3, r2
 800f764:	d00f      	beq.n	800f786 <HAL_SPI_Init+0x42>
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	4a86      	ldr	r2, [pc, #536]	; (800f984 <HAL_SPI_Init+0x240>)
 800f76c:	4293      	cmp	r3, r2
 800f76e:	d00a      	beq.n	800f786 <HAL_SPI_Init+0x42>
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	4a84      	ldr	r2, [pc, #528]	; (800f988 <HAL_SPI_Init+0x244>)
 800f776:	4293      	cmp	r3, r2
 800f778:	d005      	beq.n	800f786 <HAL_SPI_Init+0x42>
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	68db      	ldr	r3, [r3, #12]
 800f77e:	2b0f      	cmp	r3, #15
 800f780:	d901      	bls.n	800f786 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800f782:	2301      	movs	r3, #1
 800f784:	e0f7      	b.n	800f976 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800f786:	6878      	ldr	r0, [r7, #4]
 800f788:	f000 fd5a 	bl	8010240 <SPI_GetPacketSize>
 800f78c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	4a7b      	ldr	r2, [pc, #492]	; (800f980 <HAL_SPI_Init+0x23c>)
 800f794:	4293      	cmp	r3, r2
 800f796:	d00c      	beq.n	800f7b2 <HAL_SPI_Init+0x6e>
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	4a79      	ldr	r2, [pc, #484]	; (800f984 <HAL_SPI_Init+0x240>)
 800f79e:	4293      	cmp	r3, r2
 800f7a0:	d007      	beq.n	800f7b2 <HAL_SPI_Init+0x6e>
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	4a78      	ldr	r2, [pc, #480]	; (800f988 <HAL_SPI_Init+0x244>)
 800f7a8:	4293      	cmp	r3, r2
 800f7aa:	d002      	beq.n	800f7b2 <HAL_SPI_Init+0x6e>
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	2b08      	cmp	r3, #8
 800f7b0:	d811      	bhi.n	800f7d6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f7b6:	4a72      	ldr	r2, [pc, #456]	; (800f980 <HAL_SPI_Init+0x23c>)
 800f7b8:	4293      	cmp	r3, r2
 800f7ba:	d009      	beq.n	800f7d0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	4a70      	ldr	r2, [pc, #448]	; (800f984 <HAL_SPI_Init+0x240>)
 800f7c2:	4293      	cmp	r3, r2
 800f7c4:	d004      	beq.n	800f7d0 <HAL_SPI_Init+0x8c>
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	4a6f      	ldr	r2, [pc, #444]	; (800f988 <HAL_SPI_Init+0x244>)
 800f7cc:	4293      	cmp	r3, r2
 800f7ce:	d104      	bne.n	800f7da <HAL_SPI_Init+0x96>
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	2b10      	cmp	r3, #16
 800f7d4:	d901      	bls.n	800f7da <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800f7d6:	2301      	movs	r3, #1
 800f7d8:	e0cd      	b.n	800f976 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f7e0:	b2db      	uxtb	r3, r3
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d106      	bne.n	800f7f4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	2200      	movs	r2, #0
 800f7ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f7ee:	6878      	ldr	r0, [r7, #4]
 800f7f0:	f7f3 fc78 	bl	80030e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2202      	movs	r2, #2
 800f7f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	681a      	ldr	r2, [r3, #0]
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	f022 0201 	bic.w	r2, r2, #1
 800f80a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	689b      	ldr	r3, [r3, #8]
 800f812:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800f816:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	699b      	ldr	r3, [r3, #24]
 800f81c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f820:	d119      	bne.n	800f856 <HAL_SPI_Init+0x112>
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	685b      	ldr	r3, [r3, #4]
 800f826:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f82a:	d103      	bne.n	800f834 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f830:	2b00      	cmp	r3, #0
 800f832:	d008      	beq.n	800f846 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d10c      	bne.n	800f856 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f840:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f844:	d107      	bne.n	800f856 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	681a      	ldr	r2, [r3, #0]
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f854:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	685b      	ldr	r3, [r3, #4]
 800f85a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d00f      	beq.n	800f882 <HAL_SPI_Init+0x13e>
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	68db      	ldr	r3, [r3, #12]
 800f866:	2b06      	cmp	r3, #6
 800f868:	d90b      	bls.n	800f882 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	430a      	orrs	r2, r1
 800f87e:	601a      	str	r2, [r3, #0]
 800f880:	e007      	b.n	800f892 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	681a      	ldr	r2, [r3, #0]
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f890:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	69da      	ldr	r2, [r3, #28]
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f89a:	431a      	orrs	r2, r3
 800f89c:	68bb      	ldr	r3, [r7, #8]
 800f89e:	431a      	orrs	r2, r3
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8a4:	ea42 0103 	orr.w	r1, r2, r3
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	68da      	ldr	r2, [r3, #12]
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	430a      	orrs	r2, r1
 800f8b2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8bc:	431a      	orrs	r2, r3
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8c2:	431a      	orrs	r2, r3
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	699b      	ldr	r3, [r3, #24]
 800f8c8:	431a      	orrs	r2, r3
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	691b      	ldr	r3, [r3, #16]
 800f8ce:	431a      	orrs	r2, r3
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	695b      	ldr	r3, [r3, #20]
 800f8d4:	431a      	orrs	r2, r3
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	6a1b      	ldr	r3, [r3, #32]
 800f8da:	431a      	orrs	r2, r3
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	685b      	ldr	r3, [r3, #4]
 800f8e0:	431a      	orrs	r2, r3
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f8e6:	431a      	orrs	r2, r3
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	689b      	ldr	r3, [r3, #8]
 800f8ec:	431a      	orrs	r2, r3
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f8f2:	ea42 0103 	orr.w	r1, r2, r3
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	430a      	orrs	r2, r1
 800f900:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	685b      	ldr	r3, [r3, #4]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d113      	bne.n	800f932 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	689b      	ldr	r3, [r3, #8]
 800f910:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f91c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	689b      	ldr	r3, [r3, #8]
 800f924:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f930:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	f022 0201 	bic.w	r2, r2, #1
 800f940:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	685b      	ldr	r3, [r3, #4]
 800f946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d00a      	beq.n	800f964 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	68db      	ldr	r3, [r3, #12]
 800f954:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	430a      	orrs	r2, r1
 800f962:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	2200      	movs	r2, #0
 800f968:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	2201      	movs	r2, #1
 800f970:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800f974:	2300      	movs	r3, #0
}
 800f976:	4618      	mov	r0, r3
 800f978:	3710      	adds	r7, #16
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}
 800f97e:	bf00      	nop
 800f980:	40013000 	.word	0x40013000
 800f984:	40003800 	.word	0x40003800
 800f988:	40003c00 	.word	0x40003c00

0800f98c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b08a      	sub	sp, #40	; 0x28
 800f990:	af02      	add	r7, sp, #8
 800f992:	60f8      	str	r0, [r7, #12]
 800f994:	60b9      	str	r1, [r7, #8]
 800f996:	603b      	str	r3, [r7, #0]
 800f998:	4613      	mov	r3, r2
 800f99a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	3320      	adds	r3, #32
 800f9a2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f9ae:	2b01      	cmp	r3, #1
 800f9b0:	d101      	bne.n	800f9b6 <HAL_SPI_Transmit+0x2a>
 800f9b2:	2302      	movs	r3, #2
 800f9b4:	e1e1      	b.n	800fd7a <HAL_SPI_Transmit+0x3ee>
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	2201      	movs	r2, #1
 800f9ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f9be:	f7f4 f991 	bl	8003ce4 <HAL_GetTick>
 800f9c2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f9ca:	b2db      	uxtb	r3, r3
 800f9cc:	2b01      	cmp	r3, #1
 800f9ce:	d007      	beq.n	800f9e0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800f9d0:	2302      	movs	r3, #2
 800f9d2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f9dc:	7efb      	ldrb	r3, [r7, #27]
 800f9de:	e1cc      	b.n	800fd7a <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f9e0:	68bb      	ldr	r3, [r7, #8]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d002      	beq.n	800f9ec <HAL_SPI_Transmit+0x60>
 800f9e6:	88fb      	ldrh	r3, [r7, #6]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d107      	bne.n	800f9fc <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800f9ec:	2301      	movs	r3, #1
 800f9ee:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f9f8:	7efb      	ldrb	r3, [r7, #27]
 800f9fa:	e1be      	b.n	800fd7a <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	2203      	movs	r2, #3
 800fa00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	2200      	movs	r2, #0
 800fa08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	68ba      	ldr	r2, [r7, #8]
 800fa10:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	88fa      	ldrh	r2, [r7, #6]
 800fa16:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	88fa      	ldrh	r2, [r7, #6]
 800fa1e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	2200      	movs	r2, #0
 800fa26:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	2200      	movs	r2, #0
 800fa34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	2200      	movs	r2, #0
 800fa42:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	689b      	ldr	r3, [r3, #8]
 800fa48:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800fa4c:	d108      	bne.n	800fa60 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	681a      	ldr	r2, [r3, #0]
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fa5c:	601a      	str	r2, [r3, #0]
 800fa5e:	e009      	b.n	800fa74 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	68db      	ldr	r3, [r3, #12]
 800fa66:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800fa72:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	685a      	ldr	r2, [r3, #4]
 800fa7a:	4b96      	ldr	r3, [pc, #600]	; (800fcd4 <HAL_SPI_Transmit+0x348>)
 800fa7c:	4013      	ands	r3, r2
 800fa7e:	88f9      	ldrh	r1, [r7, #6]
 800fa80:	68fa      	ldr	r2, [r7, #12]
 800fa82:	6812      	ldr	r2, [r2, #0]
 800fa84:	430b      	orrs	r3, r1
 800fa86:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	681a      	ldr	r2, [r3, #0]
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	f042 0201 	orr.w	r2, r2, #1
 800fa96:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	685b      	ldr	r3, [r3, #4]
 800fa9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800faa0:	d107      	bne.n	800fab2 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	681a      	ldr	r2, [r3, #0]
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fab0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	68db      	ldr	r3, [r3, #12]
 800fab6:	2b0f      	cmp	r3, #15
 800fab8:	d947      	bls.n	800fb4a <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800faba:	e03f      	b.n	800fb3c <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	695b      	ldr	r3, [r3, #20]
 800fac2:	f003 0302 	and.w	r3, r3, #2
 800fac6:	2b02      	cmp	r3, #2
 800fac8:	d114      	bne.n	800faf4 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	6812      	ldr	r2, [r2, #0]
 800fad4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fada:	1d1a      	adds	r2, r3, #4
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fae6:	b29b      	uxth	r3, r3
 800fae8:	3b01      	subs	r3, #1
 800faea:	b29a      	uxth	r2, r3
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800faf2:	e023      	b.n	800fb3c <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800faf4:	f7f4 f8f6 	bl	8003ce4 <HAL_GetTick>
 800faf8:	4602      	mov	r2, r0
 800fafa:	697b      	ldr	r3, [r7, #20]
 800fafc:	1ad3      	subs	r3, r2, r3
 800fafe:	683a      	ldr	r2, [r7, #0]
 800fb00:	429a      	cmp	r2, r3
 800fb02:	d803      	bhi.n	800fb0c <HAL_SPI_Transmit+0x180>
 800fb04:	683b      	ldr	r3, [r7, #0]
 800fb06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb0a:	d102      	bne.n	800fb12 <HAL_SPI_Transmit+0x186>
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d114      	bne.n	800fb3c <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fb12:	68f8      	ldr	r0, [r7, #12]
 800fb14:	f000 fac6 	bl	80100a4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fb26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	2201      	movs	r2, #1
 800fb34:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800fb38:	2303      	movs	r3, #3
 800fb3a:	e11e      	b.n	800fd7a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fb42:	b29b      	uxth	r3, r3
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d1b9      	bne.n	800fabc <HAL_SPI_Transmit+0x130>
 800fb48:	e0f1      	b.n	800fd2e <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	68db      	ldr	r3, [r3, #12]
 800fb4e:	2b07      	cmp	r3, #7
 800fb50:	f240 80e6 	bls.w	800fd20 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800fb54:	e05d      	b.n	800fc12 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	695b      	ldr	r3, [r3, #20]
 800fb5c:	f003 0302 	and.w	r3, r3, #2
 800fb60:	2b02      	cmp	r3, #2
 800fb62:	d132      	bne.n	800fbca <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fb6a:	b29b      	uxth	r3, r3
 800fb6c:	2b01      	cmp	r3, #1
 800fb6e:	d918      	bls.n	800fba2 <HAL_SPI_Transmit+0x216>
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d014      	beq.n	800fba2 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	6812      	ldr	r2, [r2, #0]
 800fb82:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fb88:	1d1a      	adds	r2, r3, #4
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fb94:	b29b      	uxth	r3, r3
 800fb96:	3b02      	subs	r3, #2
 800fb98:	b29a      	uxth	r2, r3
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fba0:	e037      	b.n	800fc12 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fba6:	881a      	ldrh	r2, [r3, #0]
 800fba8:	69fb      	ldr	r3, [r7, #28]
 800fbaa:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fbb0:	1c9a      	adds	r2, r3, #2
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fbbc:	b29b      	uxth	r3, r3
 800fbbe:	3b01      	subs	r3, #1
 800fbc0:	b29a      	uxth	r2, r3
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fbc8:	e023      	b.n	800fc12 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fbca:	f7f4 f88b 	bl	8003ce4 <HAL_GetTick>
 800fbce:	4602      	mov	r2, r0
 800fbd0:	697b      	ldr	r3, [r7, #20]
 800fbd2:	1ad3      	subs	r3, r2, r3
 800fbd4:	683a      	ldr	r2, [r7, #0]
 800fbd6:	429a      	cmp	r2, r3
 800fbd8:	d803      	bhi.n	800fbe2 <HAL_SPI_Transmit+0x256>
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbe0:	d102      	bne.n	800fbe8 <HAL_SPI_Transmit+0x25c>
 800fbe2:	683b      	ldr	r3, [r7, #0]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d114      	bne.n	800fc12 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fbe8:	68f8      	ldr	r0, [r7, #12]
 800fbea:	f000 fa5b 	bl	80100a4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fbfc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	2201      	movs	r2, #1
 800fc0a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800fc0e:	2303      	movs	r3, #3
 800fc10:	e0b3      	b.n	800fd7a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fc18:	b29b      	uxth	r3, r3
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d19b      	bne.n	800fb56 <HAL_SPI_Transmit+0x1ca>
 800fc1e:	e086      	b.n	800fd2e <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	695b      	ldr	r3, [r3, #20]
 800fc26:	f003 0302 	and.w	r3, r3, #2
 800fc2a:	2b02      	cmp	r3, #2
 800fc2c:	d154      	bne.n	800fcd8 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fc34:	b29b      	uxth	r3, r3
 800fc36:	2b03      	cmp	r3, #3
 800fc38:	d918      	bls.n	800fc6c <HAL_SPI_Transmit+0x2e0>
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc3e:	2b40      	cmp	r3, #64	; 0x40
 800fc40:	d914      	bls.n	800fc6c <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	6812      	ldr	r2, [r2, #0]
 800fc4c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fc52:	1d1a      	adds	r2, r3, #4
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fc5e:	b29b      	uxth	r3, r3
 800fc60:	3b04      	subs	r3, #4
 800fc62:	b29a      	uxth	r2, r3
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fc6a:	e059      	b.n	800fd20 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fc72:	b29b      	uxth	r3, r3
 800fc74:	2b01      	cmp	r3, #1
 800fc76:	d917      	bls.n	800fca8 <HAL_SPI_Transmit+0x31c>
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d013      	beq.n	800fca8 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fc84:	881a      	ldrh	r2, [r3, #0]
 800fc86:	69fb      	ldr	r3, [r7, #28]
 800fc88:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fc8e:	1c9a      	adds	r2, r3, #2
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fc9a:	b29b      	uxth	r3, r3
 800fc9c:	3b02      	subs	r3, #2
 800fc9e:	b29a      	uxth	r2, r3
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fca6:	e03b      	b.n	800fd20 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	3320      	adds	r3, #32
 800fcb2:	7812      	ldrb	r2, [r2, #0]
 800fcb4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fcba:	1c5a      	adds	r2, r3, #1
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fcc6:	b29b      	uxth	r3, r3
 800fcc8:	3b01      	subs	r3, #1
 800fcca:	b29a      	uxth	r2, r3
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fcd2:	e025      	b.n	800fd20 <HAL_SPI_Transmit+0x394>
 800fcd4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fcd8:	f7f4 f804 	bl	8003ce4 <HAL_GetTick>
 800fcdc:	4602      	mov	r2, r0
 800fcde:	697b      	ldr	r3, [r7, #20]
 800fce0:	1ad3      	subs	r3, r2, r3
 800fce2:	683a      	ldr	r2, [r7, #0]
 800fce4:	429a      	cmp	r2, r3
 800fce6:	d803      	bhi.n	800fcf0 <HAL_SPI_Transmit+0x364>
 800fce8:	683b      	ldr	r3, [r7, #0]
 800fcea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcee:	d102      	bne.n	800fcf6 <HAL_SPI_Transmit+0x36a>
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d114      	bne.n	800fd20 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fcf6:	68f8      	ldr	r0, [r7, #12]
 800fcf8:	f000 f9d4 	bl	80100a4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	2200      	movs	r2, #0
 800fd00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	2201      	movs	r2, #1
 800fd18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800fd1c:	2303      	movs	r3, #3
 800fd1e:	e02c      	b.n	800fd7a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fd26:	b29b      	uxth	r3, r3
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	f47f af79 	bne.w	800fc20 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800fd2e:	697b      	ldr	r3, [r7, #20]
 800fd30:	9300      	str	r3, [sp, #0]
 800fd32:	683b      	ldr	r3, [r7, #0]
 800fd34:	2200      	movs	r2, #0
 800fd36:	2108      	movs	r1, #8
 800fd38:	68f8      	ldr	r0, [r7, #12]
 800fd3a:	f000 fa53 	bl	80101e4 <SPI_WaitOnFlagUntilTimeout>
 800fd3e:	4603      	mov	r3, r0
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d007      	beq.n	800fd54 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd4a:	f043 0220 	orr.w	r2, r3, #32
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800fd54:	68f8      	ldr	r0, [r7, #12]
 800fd56:	f000 f9a5 	bl	80100a4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	2201      	movs	r2, #1
 800fd66:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d001      	beq.n	800fd78 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800fd74:	2301      	movs	r3, #1
 800fd76:	e000      	b.n	800fd7a <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800fd78:	7efb      	ldrb	r3, [r7, #27]
}
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	3720      	adds	r7, #32
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	bd80      	pop	{r7, pc}
 800fd82:	bf00      	nop

0800fd84 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b088      	sub	sp, #32
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	60f8      	str	r0, [r7, #12]
 800fd8c:	60b9      	str	r1, [r7, #8]
 800fd8e:	603b      	str	r3, [r7, #0]
 800fd90:	4613      	mov	r3, r2
 800fd92:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800fd94:	2300      	movs	r3, #0
 800fd96:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	3330      	adds	r3, #48	; 0x30
 800fd9e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fda6:	2b01      	cmp	r3, #1
 800fda8:	d101      	bne.n	800fdae <HAL_SPI_Receive+0x2a>
 800fdaa:	2302      	movs	r3, #2
 800fdac:	e173      	b.n	8010096 <HAL_SPI_Receive+0x312>
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	2201      	movs	r2, #1
 800fdb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fdb6:	f7f3 ff95 	bl	8003ce4 <HAL_GetTick>
 800fdba:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fdc2:	b2db      	uxtb	r3, r3
 800fdc4:	2b01      	cmp	r3, #1
 800fdc6:	d007      	beq.n	800fdd8 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800fdc8:	2302      	movs	r3, #2
 800fdca:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	2200      	movs	r2, #0
 800fdd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800fdd4:	7ffb      	ldrb	r3, [r7, #31]
 800fdd6:	e15e      	b.n	8010096 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800fdd8:	68bb      	ldr	r3, [r7, #8]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d002      	beq.n	800fde4 <HAL_SPI_Receive+0x60>
 800fdde:	88fb      	ldrh	r3, [r7, #6]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d107      	bne.n	800fdf4 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800fde4:	2301      	movs	r3, #1
 800fde6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	2200      	movs	r2, #0
 800fdec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800fdf0:	7ffb      	ldrb	r3, [r7, #31]
 800fdf2:	e150      	b.n	8010096 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	2204      	movs	r2, #4
 800fdf8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	2200      	movs	r2, #0
 800fe00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	68ba      	ldr	r2, [r7, #8]
 800fe08:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	88fa      	ldrh	r2, [r7, #6]
 800fe0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	88fa      	ldrh	r2, [r7, #6]
 800fe16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	2200      	movs	r2, #0
 800fe24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	2200      	movs	r2, #0
 800fe34:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	2200      	movs	r2, #0
 800fe3a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	689b      	ldr	r3, [r3, #8]
 800fe40:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800fe44:	d108      	bne.n	800fe58 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	681a      	ldr	r2, [r3, #0]
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fe54:	601a      	str	r2, [r3, #0]
 800fe56:	e009      	b.n	800fe6c <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	68db      	ldr	r3, [r3, #12]
 800fe5e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800fe6a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	685a      	ldr	r2, [r3, #4]
 800fe72:	4b8b      	ldr	r3, [pc, #556]	; (80100a0 <HAL_SPI_Receive+0x31c>)
 800fe74:	4013      	ands	r3, r2
 800fe76:	88f9      	ldrh	r1, [r7, #6]
 800fe78:	68fa      	ldr	r2, [r7, #12]
 800fe7a:	6812      	ldr	r2, [r2, #0]
 800fe7c:	430b      	orrs	r3, r1
 800fe7e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	681a      	ldr	r2, [r3, #0]
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	f042 0201 	orr.w	r2, r2, #1
 800fe8e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	685b      	ldr	r3, [r3, #4]
 800fe94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fe98:	d107      	bne.n	800feaa <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	681a      	ldr	r2, [r3, #0]
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fea8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	68db      	ldr	r3, [r3, #12]
 800feae:	2b0f      	cmp	r3, #15
 800feb0:	d948      	bls.n	800ff44 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800feb2:	e040      	b.n	800ff36 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	695a      	ldr	r2, [r3, #20]
 800feba:	f248 0308 	movw	r3, #32776	; 0x8008
 800febe:	4013      	ands	r3, r2
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d014      	beq.n	800feee <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	681a      	ldr	r2, [r3, #0]
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fecc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800fece:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fed4:	1d1a      	adds	r2, r3, #4
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fee0:	b29b      	uxth	r3, r3
 800fee2:	3b01      	subs	r3, #1
 800fee4:	b29a      	uxth	r2, r3
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800feec:	e023      	b.n	800ff36 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800feee:	f7f3 fef9 	bl	8003ce4 <HAL_GetTick>
 800fef2:	4602      	mov	r2, r0
 800fef4:	697b      	ldr	r3, [r7, #20]
 800fef6:	1ad3      	subs	r3, r2, r3
 800fef8:	683a      	ldr	r2, [r7, #0]
 800fefa:	429a      	cmp	r2, r3
 800fefc:	d803      	bhi.n	800ff06 <HAL_SPI_Receive+0x182>
 800fefe:	683b      	ldr	r3, [r7, #0]
 800ff00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff04:	d102      	bne.n	800ff0c <HAL_SPI_Receive+0x188>
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d114      	bne.n	800ff36 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ff0c:	68f8      	ldr	r0, [r7, #12]
 800ff0e:	f000 f8c9 	bl	80100a4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	2200      	movs	r2, #0
 800ff16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ff20:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	2201      	movs	r2, #1
 800ff2e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ff32:	2303      	movs	r3, #3
 800ff34:	e0af      	b.n	8010096 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ff3c:	b29b      	uxth	r3, r3
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d1b8      	bne.n	800feb4 <HAL_SPI_Receive+0x130>
 800ff42:	e095      	b.n	8010070 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	68db      	ldr	r3, [r3, #12]
 800ff48:	2b07      	cmp	r3, #7
 800ff4a:	f240 808b 	bls.w	8010064 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ff4e:	e03f      	b.n	800ffd0 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	695b      	ldr	r3, [r3, #20]
 800ff56:	f003 0301 	and.w	r3, r3, #1
 800ff5a:	2b01      	cmp	r3, #1
 800ff5c:	d114      	bne.n	800ff88 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ff62:	69ba      	ldr	r2, [r7, #24]
 800ff64:	8812      	ldrh	r2, [r2, #0]
 800ff66:	b292      	uxth	r2, r2
 800ff68:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ff6e:	1c9a      	adds	r2, r3, #2
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ff7a:	b29b      	uxth	r3, r3
 800ff7c:	3b01      	subs	r3, #1
 800ff7e:	b29a      	uxth	r2, r3
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ff86:	e023      	b.n	800ffd0 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ff88:	f7f3 feac 	bl	8003ce4 <HAL_GetTick>
 800ff8c:	4602      	mov	r2, r0
 800ff8e:	697b      	ldr	r3, [r7, #20]
 800ff90:	1ad3      	subs	r3, r2, r3
 800ff92:	683a      	ldr	r2, [r7, #0]
 800ff94:	429a      	cmp	r2, r3
 800ff96:	d803      	bhi.n	800ffa0 <HAL_SPI_Receive+0x21c>
 800ff98:	683b      	ldr	r3, [r7, #0]
 800ff9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff9e:	d102      	bne.n	800ffa6 <HAL_SPI_Receive+0x222>
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d114      	bne.n	800ffd0 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ffa6:	68f8      	ldr	r0, [r7, #12]
 800ffa8:	f000 f87c 	bl	80100a4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	2200      	movs	r2, #0
 800ffb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ffba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	2201      	movs	r2, #1
 800ffc8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ffcc:	2303      	movs	r3, #3
 800ffce:	e062      	b.n	8010096 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ffd6:	b29b      	uxth	r3, r3
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d1b9      	bne.n	800ff50 <HAL_SPI_Receive+0x1cc>
 800ffdc:	e048      	b.n	8010070 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	695b      	ldr	r3, [r3, #20]
 800ffe4:	f003 0301 	and.w	r3, r3, #1
 800ffe8:	2b01      	cmp	r3, #1
 800ffea:	d117      	bne.n	801001c <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fff8:	7812      	ldrb	r2, [r2, #0]
 800fffa:	b2d2      	uxtb	r2, r2
 800fffc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010002:	1c5a      	adds	r2, r3, #1
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801000e:	b29b      	uxth	r3, r3
 8010010:	3b01      	subs	r3, #1
 8010012:	b29a      	uxth	r2, r3
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801001a:	e023      	b.n	8010064 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801001c:	f7f3 fe62 	bl	8003ce4 <HAL_GetTick>
 8010020:	4602      	mov	r2, r0
 8010022:	697b      	ldr	r3, [r7, #20]
 8010024:	1ad3      	subs	r3, r2, r3
 8010026:	683a      	ldr	r2, [r7, #0]
 8010028:	429a      	cmp	r2, r3
 801002a:	d803      	bhi.n	8010034 <HAL_SPI_Receive+0x2b0>
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010032:	d102      	bne.n	801003a <HAL_SPI_Receive+0x2b6>
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d114      	bne.n	8010064 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801003a:	68f8      	ldr	r0, [r7, #12]
 801003c:	f000 f832 	bl	80100a4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	2200      	movs	r2, #0
 8010044:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801004e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	2201      	movs	r2, #1
 801005c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010060:	2303      	movs	r3, #3
 8010062:	e018      	b.n	8010096 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801006a:	b29b      	uxth	r3, r3
 801006c:	2b00      	cmp	r3, #0
 801006e:	d1b6      	bne.n	800ffde <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010070:	68f8      	ldr	r0, [r7, #12]
 8010072:	f000 f817 	bl	80100a4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	2200      	movs	r2, #0
 801007a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	2201      	movs	r2, #1
 8010082:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801008c:	2b00      	cmp	r3, #0
 801008e:	d001      	beq.n	8010094 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 8010090:	2301      	movs	r3, #1
 8010092:	e000      	b.n	8010096 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 8010094:	7ffb      	ldrb	r3, [r7, #31]
}
 8010096:	4618      	mov	r0, r3
 8010098:	3720      	adds	r7, #32
 801009a:	46bd      	mov	sp, r7
 801009c:	bd80      	pop	{r7, pc}
 801009e:	bf00      	nop
 80100a0:	ffff0000 	.word	0xffff0000

080100a4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80100a4:	b480      	push	{r7}
 80100a6:	b085      	sub	sp, #20
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	695b      	ldr	r3, [r3, #20]
 80100b2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	699a      	ldr	r2, [r3, #24]
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	f042 0208 	orr.w	r2, r2, #8
 80100c2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	699a      	ldr	r2, [r3, #24]
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	f042 0210 	orr.w	r2, r2, #16
 80100d2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	681a      	ldr	r2, [r3, #0]
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	f022 0201 	bic.w	r2, r2, #1
 80100e2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	6919      	ldr	r1, [r3, #16]
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	681a      	ldr	r2, [r3, #0]
 80100ee:	4b3c      	ldr	r3, [pc, #240]	; (80101e0 <SPI_CloseTransfer+0x13c>)
 80100f0:	400b      	ands	r3, r1
 80100f2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	689a      	ldr	r2, [r3, #8]
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8010102:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801010a:	b2db      	uxtb	r3, r3
 801010c:	2b04      	cmp	r3, #4
 801010e:	d014      	beq.n	801013a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	f003 0320 	and.w	r3, r3, #32
 8010116:	2b00      	cmp	r3, #0
 8010118:	d00f      	beq.n	801013a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010120:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	699a      	ldr	r2, [r3, #24]
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	f042 0220 	orr.w	r2, r2, #32
 8010138:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010140:	b2db      	uxtb	r3, r3
 8010142:	2b03      	cmp	r3, #3
 8010144:	d014      	beq.n	8010170 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801014c:	2b00      	cmp	r3, #0
 801014e:	d00f      	beq.n	8010170 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010156:	f043 0204 	orr.w	r2, r3, #4
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	699a      	ldr	r2, [r3, #24]
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801016e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010176:	2b00      	cmp	r3, #0
 8010178:	d00f      	beq.n	801019a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010180:	f043 0201 	orr.w	r2, r3, #1
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	699a      	ldr	r2, [r3, #24]
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010198:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d00f      	beq.n	80101c4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80101aa:	f043 0208 	orr.w	r2, r3, #8
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	699a      	ldr	r2, [r3, #24]
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80101c2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	2200      	movs	r2, #0
 80101c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	2200      	movs	r2, #0
 80101d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80101d4:	bf00      	nop
 80101d6:	3714      	adds	r7, #20
 80101d8:	46bd      	mov	sp, r7
 80101da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101de:	4770      	bx	lr
 80101e0:	fffffc90 	.word	0xfffffc90

080101e4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b084      	sub	sp, #16
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	60f8      	str	r0, [r7, #12]
 80101ec:	60b9      	str	r1, [r7, #8]
 80101ee:	603b      	str	r3, [r7, #0]
 80101f0:	4613      	mov	r3, r2
 80101f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80101f4:	e010      	b.n	8010218 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80101f6:	f7f3 fd75 	bl	8003ce4 <HAL_GetTick>
 80101fa:	4602      	mov	r2, r0
 80101fc:	69bb      	ldr	r3, [r7, #24]
 80101fe:	1ad3      	subs	r3, r2, r3
 8010200:	683a      	ldr	r2, [r7, #0]
 8010202:	429a      	cmp	r2, r3
 8010204:	d803      	bhi.n	801020e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8010206:	683b      	ldr	r3, [r7, #0]
 8010208:	f1b3 3fff 	cmp.w	r3, #4294967295
 801020c:	d102      	bne.n	8010214 <SPI_WaitOnFlagUntilTimeout+0x30>
 801020e:	683b      	ldr	r3, [r7, #0]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d101      	bne.n	8010218 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8010214:	2303      	movs	r3, #3
 8010216:	e00f      	b.n	8010238 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	695a      	ldr	r2, [r3, #20]
 801021e:	68bb      	ldr	r3, [r7, #8]
 8010220:	4013      	ands	r3, r2
 8010222:	68ba      	ldr	r2, [r7, #8]
 8010224:	429a      	cmp	r2, r3
 8010226:	bf0c      	ite	eq
 8010228:	2301      	moveq	r3, #1
 801022a:	2300      	movne	r3, #0
 801022c:	b2db      	uxtb	r3, r3
 801022e:	461a      	mov	r2, r3
 8010230:	79fb      	ldrb	r3, [r7, #7]
 8010232:	429a      	cmp	r2, r3
 8010234:	d0df      	beq.n	80101f6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8010236:	2300      	movs	r3, #0
}
 8010238:	4618      	mov	r0, r3
 801023a:	3710      	adds	r7, #16
 801023c:	46bd      	mov	sp, r7
 801023e:	bd80      	pop	{r7, pc}

08010240 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8010240:	b480      	push	{r7}
 8010242:	b085      	sub	sp, #20
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801024c:	095b      	lsrs	r3, r3, #5
 801024e:	3301      	adds	r3, #1
 8010250:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	68db      	ldr	r3, [r3, #12]
 8010256:	3301      	adds	r3, #1
 8010258:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801025a:	68bb      	ldr	r3, [r7, #8]
 801025c:	3307      	adds	r3, #7
 801025e:	08db      	lsrs	r3, r3, #3
 8010260:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8010262:	68bb      	ldr	r3, [r7, #8]
 8010264:	68fa      	ldr	r2, [r7, #12]
 8010266:	fb02 f303 	mul.w	r3, r2, r3
}
 801026a:	4618      	mov	r0, r3
 801026c:	3714      	adds	r7, #20
 801026e:	46bd      	mov	sp, r7
 8010270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010274:	4770      	bx	lr

08010276 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010276:	b580      	push	{r7, lr}
 8010278:	b082      	sub	sp, #8
 801027a:	af00      	add	r7, sp, #0
 801027c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d101      	bne.n	8010288 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010284:	2301      	movs	r3, #1
 8010286:	e049      	b.n	801031c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801028e:	b2db      	uxtb	r3, r3
 8010290:	2b00      	cmp	r3, #0
 8010292:	d106      	bne.n	80102a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	2200      	movs	r2, #0
 8010298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801029c:	6878      	ldr	r0, [r7, #4]
 801029e:	f7f3 f973 	bl	8003588 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	2202      	movs	r2, #2
 80102a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	681a      	ldr	r2, [r3, #0]
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	3304      	adds	r3, #4
 80102b2:	4619      	mov	r1, r3
 80102b4:	4610      	mov	r0, r2
 80102b6:	f000 ff29 	bl	801110c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	2201      	movs	r2, #1
 80102be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	2201      	movs	r2, #1
 80102c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	2201      	movs	r2, #1
 80102ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	2201      	movs	r2, #1
 80102d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	2201      	movs	r2, #1
 80102de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	2201      	movs	r2, #1
 80102e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	2201      	movs	r2, #1
 80102ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	2201      	movs	r2, #1
 80102f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	2201      	movs	r2, #1
 80102fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	2201      	movs	r2, #1
 8010306:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	2201      	movs	r2, #1
 801030e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	2201      	movs	r2, #1
 8010316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801031a:	2300      	movs	r3, #0
}
 801031c:	4618      	mov	r0, r3
 801031e:	3708      	adds	r7, #8
 8010320:	46bd      	mov	sp, r7
 8010322:	bd80      	pop	{r7, pc}

08010324 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b082      	sub	sp, #8
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d101      	bne.n	8010336 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010332:	2301      	movs	r3, #1
 8010334:	e049      	b.n	80103ca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801033c:	b2db      	uxtb	r3, r3
 801033e:	2b00      	cmp	r3, #0
 8010340:	d106      	bne.n	8010350 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	2200      	movs	r2, #0
 8010346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801034a:	6878      	ldr	r0, [r7, #4]
 801034c:	f7f2 ff86 	bl	800325c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	2202      	movs	r2, #2
 8010354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	681a      	ldr	r2, [r3, #0]
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	3304      	adds	r3, #4
 8010360:	4619      	mov	r1, r3
 8010362:	4610      	mov	r0, r2
 8010364:	f000 fed2 	bl	801110c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	2201      	movs	r2, #1
 801036c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	2201      	movs	r2, #1
 8010374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	2201      	movs	r2, #1
 801037c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	2201      	movs	r2, #1
 8010384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	2201      	movs	r2, #1
 801038c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	2201      	movs	r2, #1
 8010394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2201      	movs	r2, #1
 801039c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	2201      	movs	r2, #1
 80103a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	2201      	movs	r2, #1
 80103ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	2201      	movs	r2, #1
 80103b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	2201      	movs	r2, #1
 80103bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	2201      	movs	r2, #1
 80103c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80103c8:	2300      	movs	r3, #0
}
 80103ca:	4618      	mov	r0, r3
 80103cc:	3708      	adds	r7, #8
 80103ce:	46bd      	mov	sp, r7
 80103d0:	bd80      	pop	{r7, pc}
	...

080103d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b084      	sub	sp, #16
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
 80103dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80103de:	683b      	ldr	r3, [r7, #0]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d109      	bne.n	80103f8 <HAL_TIM_PWM_Start+0x24>
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80103ea:	b2db      	uxtb	r3, r3
 80103ec:	2b01      	cmp	r3, #1
 80103ee:	bf14      	ite	ne
 80103f0:	2301      	movne	r3, #1
 80103f2:	2300      	moveq	r3, #0
 80103f4:	b2db      	uxtb	r3, r3
 80103f6:	e03c      	b.n	8010472 <HAL_TIM_PWM_Start+0x9e>
 80103f8:	683b      	ldr	r3, [r7, #0]
 80103fa:	2b04      	cmp	r3, #4
 80103fc:	d109      	bne.n	8010412 <HAL_TIM_PWM_Start+0x3e>
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010404:	b2db      	uxtb	r3, r3
 8010406:	2b01      	cmp	r3, #1
 8010408:	bf14      	ite	ne
 801040a:	2301      	movne	r3, #1
 801040c:	2300      	moveq	r3, #0
 801040e:	b2db      	uxtb	r3, r3
 8010410:	e02f      	b.n	8010472 <HAL_TIM_PWM_Start+0x9e>
 8010412:	683b      	ldr	r3, [r7, #0]
 8010414:	2b08      	cmp	r3, #8
 8010416:	d109      	bne.n	801042c <HAL_TIM_PWM_Start+0x58>
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801041e:	b2db      	uxtb	r3, r3
 8010420:	2b01      	cmp	r3, #1
 8010422:	bf14      	ite	ne
 8010424:	2301      	movne	r3, #1
 8010426:	2300      	moveq	r3, #0
 8010428:	b2db      	uxtb	r3, r3
 801042a:	e022      	b.n	8010472 <HAL_TIM_PWM_Start+0x9e>
 801042c:	683b      	ldr	r3, [r7, #0]
 801042e:	2b0c      	cmp	r3, #12
 8010430:	d109      	bne.n	8010446 <HAL_TIM_PWM_Start+0x72>
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010438:	b2db      	uxtb	r3, r3
 801043a:	2b01      	cmp	r3, #1
 801043c:	bf14      	ite	ne
 801043e:	2301      	movne	r3, #1
 8010440:	2300      	moveq	r3, #0
 8010442:	b2db      	uxtb	r3, r3
 8010444:	e015      	b.n	8010472 <HAL_TIM_PWM_Start+0x9e>
 8010446:	683b      	ldr	r3, [r7, #0]
 8010448:	2b10      	cmp	r3, #16
 801044a:	d109      	bne.n	8010460 <HAL_TIM_PWM_Start+0x8c>
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010452:	b2db      	uxtb	r3, r3
 8010454:	2b01      	cmp	r3, #1
 8010456:	bf14      	ite	ne
 8010458:	2301      	movne	r3, #1
 801045a:	2300      	moveq	r3, #0
 801045c:	b2db      	uxtb	r3, r3
 801045e:	e008      	b.n	8010472 <HAL_TIM_PWM_Start+0x9e>
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010466:	b2db      	uxtb	r3, r3
 8010468:	2b01      	cmp	r3, #1
 801046a:	bf14      	ite	ne
 801046c:	2301      	movne	r3, #1
 801046e:	2300      	moveq	r3, #0
 8010470:	b2db      	uxtb	r3, r3
 8010472:	2b00      	cmp	r3, #0
 8010474:	d001      	beq.n	801047a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8010476:	2301      	movs	r3, #1
 8010478:	e0ab      	b.n	80105d2 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801047a:	683b      	ldr	r3, [r7, #0]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d104      	bne.n	801048a <HAL_TIM_PWM_Start+0xb6>
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	2202      	movs	r2, #2
 8010484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010488:	e023      	b.n	80104d2 <HAL_TIM_PWM_Start+0xfe>
 801048a:	683b      	ldr	r3, [r7, #0]
 801048c:	2b04      	cmp	r3, #4
 801048e:	d104      	bne.n	801049a <HAL_TIM_PWM_Start+0xc6>
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	2202      	movs	r2, #2
 8010494:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010498:	e01b      	b.n	80104d2 <HAL_TIM_PWM_Start+0xfe>
 801049a:	683b      	ldr	r3, [r7, #0]
 801049c:	2b08      	cmp	r3, #8
 801049e:	d104      	bne.n	80104aa <HAL_TIM_PWM_Start+0xd6>
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	2202      	movs	r2, #2
 80104a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80104a8:	e013      	b.n	80104d2 <HAL_TIM_PWM_Start+0xfe>
 80104aa:	683b      	ldr	r3, [r7, #0]
 80104ac:	2b0c      	cmp	r3, #12
 80104ae:	d104      	bne.n	80104ba <HAL_TIM_PWM_Start+0xe6>
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	2202      	movs	r2, #2
 80104b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80104b8:	e00b      	b.n	80104d2 <HAL_TIM_PWM_Start+0xfe>
 80104ba:	683b      	ldr	r3, [r7, #0]
 80104bc:	2b10      	cmp	r3, #16
 80104be:	d104      	bne.n	80104ca <HAL_TIM_PWM_Start+0xf6>
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	2202      	movs	r2, #2
 80104c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80104c8:	e003      	b.n	80104d2 <HAL_TIM_PWM_Start+0xfe>
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	2202      	movs	r2, #2
 80104ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	2201      	movs	r2, #1
 80104d8:	6839      	ldr	r1, [r7, #0]
 80104da:	4618      	mov	r0, r3
 80104dc:	f001 f992 	bl	8011804 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	4a3d      	ldr	r2, [pc, #244]	; (80105dc <HAL_TIM_PWM_Start+0x208>)
 80104e6:	4293      	cmp	r3, r2
 80104e8:	d013      	beq.n	8010512 <HAL_TIM_PWM_Start+0x13e>
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	4a3c      	ldr	r2, [pc, #240]	; (80105e0 <HAL_TIM_PWM_Start+0x20c>)
 80104f0:	4293      	cmp	r3, r2
 80104f2:	d00e      	beq.n	8010512 <HAL_TIM_PWM_Start+0x13e>
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	4a3a      	ldr	r2, [pc, #232]	; (80105e4 <HAL_TIM_PWM_Start+0x210>)
 80104fa:	4293      	cmp	r3, r2
 80104fc:	d009      	beq.n	8010512 <HAL_TIM_PWM_Start+0x13e>
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	4a39      	ldr	r2, [pc, #228]	; (80105e8 <HAL_TIM_PWM_Start+0x214>)
 8010504:	4293      	cmp	r3, r2
 8010506:	d004      	beq.n	8010512 <HAL_TIM_PWM_Start+0x13e>
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	4a37      	ldr	r2, [pc, #220]	; (80105ec <HAL_TIM_PWM_Start+0x218>)
 801050e:	4293      	cmp	r3, r2
 8010510:	d101      	bne.n	8010516 <HAL_TIM_PWM_Start+0x142>
 8010512:	2301      	movs	r3, #1
 8010514:	e000      	b.n	8010518 <HAL_TIM_PWM_Start+0x144>
 8010516:	2300      	movs	r3, #0
 8010518:	2b00      	cmp	r3, #0
 801051a:	d007      	beq.n	801052c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801052a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	4a2a      	ldr	r2, [pc, #168]	; (80105dc <HAL_TIM_PWM_Start+0x208>)
 8010532:	4293      	cmp	r3, r2
 8010534:	d02c      	beq.n	8010590 <HAL_TIM_PWM_Start+0x1bc>
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801053e:	d027      	beq.n	8010590 <HAL_TIM_PWM_Start+0x1bc>
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	4a2a      	ldr	r2, [pc, #168]	; (80105f0 <HAL_TIM_PWM_Start+0x21c>)
 8010546:	4293      	cmp	r3, r2
 8010548:	d022      	beq.n	8010590 <HAL_TIM_PWM_Start+0x1bc>
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	4a29      	ldr	r2, [pc, #164]	; (80105f4 <HAL_TIM_PWM_Start+0x220>)
 8010550:	4293      	cmp	r3, r2
 8010552:	d01d      	beq.n	8010590 <HAL_TIM_PWM_Start+0x1bc>
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	4a27      	ldr	r2, [pc, #156]	; (80105f8 <HAL_TIM_PWM_Start+0x224>)
 801055a:	4293      	cmp	r3, r2
 801055c:	d018      	beq.n	8010590 <HAL_TIM_PWM_Start+0x1bc>
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	4a1f      	ldr	r2, [pc, #124]	; (80105e0 <HAL_TIM_PWM_Start+0x20c>)
 8010564:	4293      	cmp	r3, r2
 8010566:	d013      	beq.n	8010590 <HAL_TIM_PWM_Start+0x1bc>
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	4a23      	ldr	r2, [pc, #140]	; (80105fc <HAL_TIM_PWM_Start+0x228>)
 801056e:	4293      	cmp	r3, r2
 8010570:	d00e      	beq.n	8010590 <HAL_TIM_PWM_Start+0x1bc>
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	4a1b      	ldr	r2, [pc, #108]	; (80105e4 <HAL_TIM_PWM_Start+0x210>)
 8010578:	4293      	cmp	r3, r2
 801057a:	d009      	beq.n	8010590 <HAL_TIM_PWM_Start+0x1bc>
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	4a1f      	ldr	r2, [pc, #124]	; (8010600 <HAL_TIM_PWM_Start+0x22c>)
 8010582:	4293      	cmp	r3, r2
 8010584:	d004      	beq.n	8010590 <HAL_TIM_PWM_Start+0x1bc>
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	4a1e      	ldr	r2, [pc, #120]	; (8010604 <HAL_TIM_PWM_Start+0x230>)
 801058c:	4293      	cmp	r3, r2
 801058e:	d115      	bne.n	80105bc <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	689a      	ldr	r2, [r3, #8]
 8010596:	4b1c      	ldr	r3, [pc, #112]	; (8010608 <HAL_TIM_PWM_Start+0x234>)
 8010598:	4013      	ands	r3, r2
 801059a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	2b06      	cmp	r3, #6
 80105a0:	d015      	beq.n	80105ce <HAL_TIM_PWM_Start+0x1fa>
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80105a8:	d011      	beq.n	80105ce <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	681a      	ldr	r2, [r3, #0]
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	f042 0201 	orr.w	r2, r2, #1
 80105b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80105ba:	e008      	b.n	80105ce <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	681a      	ldr	r2, [r3, #0]
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	f042 0201 	orr.w	r2, r2, #1
 80105ca:	601a      	str	r2, [r3, #0]
 80105cc:	e000      	b.n	80105d0 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80105ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80105d0:	2300      	movs	r3, #0
}
 80105d2:	4618      	mov	r0, r3
 80105d4:	3710      	adds	r7, #16
 80105d6:	46bd      	mov	sp, r7
 80105d8:	bd80      	pop	{r7, pc}
 80105da:	bf00      	nop
 80105dc:	40010000 	.word	0x40010000
 80105e0:	40010400 	.word	0x40010400
 80105e4:	40014000 	.word	0x40014000
 80105e8:	40014400 	.word	0x40014400
 80105ec:	40014800 	.word	0x40014800
 80105f0:	40000400 	.word	0x40000400
 80105f4:	40000800 	.word	0x40000800
 80105f8:	40000c00 	.word	0x40000c00
 80105fc:	40001800 	.word	0x40001800
 8010600:	4000e000 	.word	0x4000e000
 8010604:	4000e400 	.word	0x4000e400
 8010608:	00010007 	.word	0x00010007

0801060c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b086      	sub	sp, #24
 8010610:	af00      	add	r7, sp, #0
 8010612:	60f8      	str	r0, [r7, #12]
 8010614:	60b9      	str	r1, [r7, #8]
 8010616:	607a      	str	r2, [r7, #4]
 8010618:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 801061a:	2300      	movs	r3, #0
 801061c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 801061e:	68bb      	ldr	r3, [r7, #8]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d109      	bne.n	8010638 <HAL_TIM_PWM_Start_DMA+0x2c>
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801062a:	b2db      	uxtb	r3, r3
 801062c:	2b02      	cmp	r3, #2
 801062e:	bf0c      	ite	eq
 8010630:	2301      	moveq	r3, #1
 8010632:	2300      	movne	r3, #0
 8010634:	b2db      	uxtb	r3, r3
 8010636:	e03c      	b.n	80106b2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8010638:	68bb      	ldr	r3, [r7, #8]
 801063a:	2b04      	cmp	r3, #4
 801063c:	d109      	bne.n	8010652 <HAL_TIM_PWM_Start_DMA+0x46>
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010644:	b2db      	uxtb	r3, r3
 8010646:	2b02      	cmp	r3, #2
 8010648:	bf0c      	ite	eq
 801064a:	2301      	moveq	r3, #1
 801064c:	2300      	movne	r3, #0
 801064e:	b2db      	uxtb	r3, r3
 8010650:	e02f      	b.n	80106b2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8010652:	68bb      	ldr	r3, [r7, #8]
 8010654:	2b08      	cmp	r3, #8
 8010656:	d109      	bne.n	801066c <HAL_TIM_PWM_Start_DMA+0x60>
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801065e:	b2db      	uxtb	r3, r3
 8010660:	2b02      	cmp	r3, #2
 8010662:	bf0c      	ite	eq
 8010664:	2301      	moveq	r3, #1
 8010666:	2300      	movne	r3, #0
 8010668:	b2db      	uxtb	r3, r3
 801066a:	e022      	b.n	80106b2 <HAL_TIM_PWM_Start_DMA+0xa6>
 801066c:	68bb      	ldr	r3, [r7, #8]
 801066e:	2b0c      	cmp	r3, #12
 8010670:	d109      	bne.n	8010686 <HAL_TIM_PWM_Start_DMA+0x7a>
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010678:	b2db      	uxtb	r3, r3
 801067a:	2b02      	cmp	r3, #2
 801067c:	bf0c      	ite	eq
 801067e:	2301      	moveq	r3, #1
 8010680:	2300      	movne	r3, #0
 8010682:	b2db      	uxtb	r3, r3
 8010684:	e015      	b.n	80106b2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8010686:	68bb      	ldr	r3, [r7, #8]
 8010688:	2b10      	cmp	r3, #16
 801068a:	d109      	bne.n	80106a0 <HAL_TIM_PWM_Start_DMA+0x94>
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010692:	b2db      	uxtb	r3, r3
 8010694:	2b02      	cmp	r3, #2
 8010696:	bf0c      	ite	eq
 8010698:	2301      	moveq	r3, #1
 801069a:	2300      	movne	r3, #0
 801069c:	b2db      	uxtb	r3, r3
 801069e:	e008      	b.n	80106b2 <HAL_TIM_PWM_Start_DMA+0xa6>
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80106a6:	b2db      	uxtb	r3, r3
 80106a8:	2b02      	cmp	r3, #2
 80106aa:	bf0c      	ite	eq
 80106ac:	2301      	moveq	r3, #1
 80106ae:	2300      	movne	r3, #0
 80106b0:	b2db      	uxtb	r3, r3
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d001      	beq.n	80106ba <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80106b6:	2302      	movs	r3, #2
 80106b8:	e1ba      	b.n	8010a30 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80106ba:	68bb      	ldr	r3, [r7, #8]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d109      	bne.n	80106d4 <HAL_TIM_PWM_Start_DMA+0xc8>
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80106c6:	b2db      	uxtb	r3, r3
 80106c8:	2b01      	cmp	r3, #1
 80106ca:	bf0c      	ite	eq
 80106cc:	2301      	moveq	r3, #1
 80106ce:	2300      	movne	r3, #0
 80106d0:	b2db      	uxtb	r3, r3
 80106d2:	e03c      	b.n	801074e <HAL_TIM_PWM_Start_DMA+0x142>
 80106d4:	68bb      	ldr	r3, [r7, #8]
 80106d6:	2b04      	cmp	r3, #4
 80106d8:	d109      	bne.n	80106ee <HAL_TIM_PWM_Start_DMA+0xe2>
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80106e0:	b2db      	uxtb	r3, r3
 80106e2:	2b01      	cmp	r3, #1
 80106e4:	bf0c      	ite	eq
 80106e6:	2301      	moveq	r3, #1
 80106e8:	2300      	movne	r3, #0
 80106ea:	b2db      	uxtb	r3, r3
 80106ec:	e02f      	b.n	801074e <HAL_TIM_PWM_Start_DMA+0x142>
 80106ee:	68bb      	ldr	r3, [r7, #8]
 80106f0:	2b08      	cmp	r3, #8
 80106f2:	d109      	bne.n	8010708 <HAL_TIM_PWM_Start_DMA+0xfc>
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80106fa:	b2db      	uxtb	r3, r3
 80106fc:	2b01      	cmp	r3, #1
 80106fe:	bf0c      	ite	eq
 8010700:	2301      	moveq	r3, #1
 8010702:	2300      	movne	r3, #0
 8010704:	b2db      	uxtb	r3, r3
 8010706:	e022      	b.n	801074e <HAL_TIM_PWM_Start_DMA+0x142>
 8010708:	68bb      	ldr	r3, [r7, #8]
 801070a:	2b0c      	cmp	r3, #12
 801070c:	d109      	bne.n	8010722 <HAL_TIM_PWM_Start_DMA+0x116>
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010714:	b2db      	uxtb	r3, r3
 8010716:	2b01      	cmp	r3, #1
 8010718:	bf0c      	ite	eq
 801071a:	2301      	moveq	r3, #1
 801071c:	2300      	movne	r3, #0
 801071e:	b2db      	uxtb	r3, r3
 8010720:	e015      	b.n	801074e <HAL_TIM_PWM_Start_DMA+0x142>
 8010722:	68bb      	ldr	r3, [r7, #8]
 8010724:	2b10      	cmp	r3, #16
 8010726:	d109      	bne.n	801073c <HAL_TIM_PWM_Start_DMA+0x130>
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801072e:	b2db      	uxtb	r3, r3
 8010730:	2b01      	cmp	r3, #1
 8010732:	bf0c      	ite	eq
 8010734:	2301      	moveq	r3, #1
 8010736:	2300      	movne	r3, #0
 8010738:	b2db      	uxtb	r3, r3
 801073a:	e008      	b.n	801074e <HAL_TIM_PWM_Start_DMA+0x142>
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010742:	b2db      	uxtb	r3, r3
 8010744:	2b01      	cmp	r3, #1
 8010746:	bf0c      	ite	eq
 8010748:	2301      	moveq	r3, #1
 801074a:	2300      	movne	r3, #0
 801074c:	b2db      	uxtb	r3, r3
 801074e:	2b00      	cmp	r3, #0
 8010750:	d034      	beq.n	80107bc <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d002      	beq.n	801075e <HAL_TIM_PWM_Start_DMA+0x152>
 8010758:	887b      	ldrh	r3, [r7, #2]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d101      	bne.n	8010762 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 801075e:	2301      	movs	r3, #1
 8010760:	e166      	b.n	8010a30 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010762:	68bb      	ldr	r3, [r7, #8]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d104      	bne.n	8010772 <HAL_TIM_PWM_Start_DMA+0x166>
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	2202      	movs	r2, #2
 801076c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010770:	e026      	b.n	80107c0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010772:	68bb      	ldr	r3, [r7, #8]
 8010774:	2b04      	cmp	r3, #4
 8010776:	d104      	bne.n	8010782 <HAL_TIM_PWM_Start_DMA+0x176>
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	2202      	movs	r2, #2
 801077c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010780:	e01e      	b.n	80107c0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010782:	68bb      	ldr	r3, [r7, #8]
 8010784:	2b08      	cmp	r3, #8
 8010786:	d104      	bne.n	8010792 <HAL_TIM_PWM_Start_DMA+0x186>
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	2202      	movs	r2, #2
 801078c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010790:	e016      	b.n	80107c0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010792:	68bb      	ldr	r3, [r7, #8]
 8010794:	2b0c      	cmp	r3, #12
 8010796:	d104      	bne.n	80107a2 <HAL_TIM_PWM_Start_DMA+0x196>
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	2202      	movs	r2, #2
 801079c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80107a0:	e00e      	b.n	80107c0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80107a2:	68bb      	ldr	r3, [r7, #8]
 80107a4:	2b10      	cmp	r3, #16
 80107a6:	d104      	bne.n	80107b2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	2202      	movs	r2, #2
 80107ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80107b0:	e006      	b.n	80107c0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	2202      	movs	r2, #2
 80107b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80107ba:	e001      	b.n	80107c0 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80107bc:	2301      	movs	r3, #1
 80107be:	e137      	b.n	8010a30 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 80107c0:	68bb      	ldr	r3, [r7, #8]
 80107c2:	2b0c      	cmp	r3, #12
 80107c4:	f200 80ae 	bhi.w	8010924 <HAL_TIM_PWM_Start_DMA+0x318>
 80107c8:	a201      	add	r2, pc, #4	; (adr r2, 80107d0 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80107ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107ce:	bf00      	nop
 80107d0:	08010805 	.word	0x08010805
 80107d4:	08010925 	.word	0x08010925
 80107d8:	08010925 	.word	0x08010925
 80107dc:	08010925 	.word	0x08010925
 80107e0:	0801084d 	.word	0x0801084d
 80107e4:	08010925 	.word	0x08010925
 80107e8:	08010925 	.word	0x08010925
 80107ec:	08010925 	.word	0x08010925
 80107f0:	08010895 	.word	0x08010895
 80107f4:	08010925 	.word	0x08010925
 80107f8:	08010925 	.word	0x08010925
 80107fc:	08010925 	.word	0x08010925
 8010800:	080108dd 	.word	0x080108dd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010808:	4a8b      	ldr	r2, [pc, #556]	; (8010a38 <HAL_TIM_PWM_Start_DMA+0x42c>)
 801080a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010810:	4a8a      	ldr	r2, [pc, #552]	; (8010a3c <HAL_TIM_PWM_Start_DMA+0x430>)
 8010812:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010818:	4a89      	ldr	r2, [pc, #548]	; (8010a40 <HAL_TIM_PWM_Start_DMA+0x434>)
 801081a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8010820:	6879      	ldr	r1, [r7, #4]
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	3334      	adds	r3, #52	; 0x34
 8010828:	461a      	mov	r2, r3
 801082a:	887b      	ldrh	r3, [r7, #2]
 801082c:	f7f5 fec4 	bl	80065b8 <HAL_DMA_Start_IT>
 8010830:	4603      	mov	r3, r0
 8010832:	2b00      	cmp	r3, #0
 8010834:	d001      	beq.n	801083a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010836:	2301      	movs	r3, #1
 8010838:	e0fa      	b.n	8010a30 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	68da      	ldr	r2, [r3, #12]
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010848:	60da      	str	r2, [r3, #12]
      break;
 801084a:	e06e      	b.n	801092a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010850:	4a79      	ldr	r2, [pc, #484]	; (8010a38 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8010852:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010858:	4a78      	ldr	r2, [pc, #480]	; (8010a3c <HAL_TIM_PWM_Start_DMA+0x430>)
 801085a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010860:	4a77      	ldr	r2, [pc, #476]	; (8010a40 <HAL_TIM_PWM_Start_DMA+0x434>)
 8010862:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8010868:	6879      	ldr	r1, [r7, #4]
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	3338      	adds	r3, #56	; 0x38
 8010870:	461a      	mov	r2, r3
 8010872:	887b      	ldrh	r3, [r7, #2]
 8010874:	f7f5 fea0 	bl	80065b8 <HAL_DMA_Start_IT>
 8010878:	4603      	mov	r3, r0
 801087a:	2b00      	cmp	r3, #0
 801087c:	d001      	beq.n	8010882 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 801087e:	2301      	movs	r3, #1
 8010880:	e0d6      	b.n	8010a30 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	68da      	ldr	r2, [r3, #12]
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010890:	60da      	str	r2, [r3, #12]
      break;
 8010892:	e04a      	b.n	801092a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010898:	4a67      	ldr	r2, [pc, #412]	; (8010a38 <HAL_TIM_PWM_Start_DMA+0x42c>)
 801089a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108a0:	4a66      	ldr	r2, [pc, #408]	; (8010a3c <HAL_TIM_PWM_Start_DMA+0x430>)
 80108a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108a8:	4a65      	ldr	r2, [pc, #404]	; (8010a40 <HAL_TIM_PWM_Start_DMA+0x434>)
 80108aa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80108b0:	6879      	ldr	r1, [r7, #4]
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	333c      	adds	r3, #60	; 0x3c
 80108b8:	461a      	mov	r2, r3
 80108ba:	887b      	ldrh	r3, [r7, #2]
 80108bc:	f7f5 fe7c 	bl	80065b8 <HAL_DMA_Start_IT>
 80108c0:	4603      	mov	r3, r0
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d001      	beq.n	80108ca <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80108c6:	2301      	movs	r3, #1
 80108c8:	e0b2      	b.n	8010a30 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	68da      	ldr	r2, [r3, #12]
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80108d8:	60da      	str	r2, [r3, #12]
      break;
 80108da:	e026      	b.n	801092a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108e0:	4a55      	ldr	r2, [pc, #340]	; (8010a38 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80108e2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108e8:	4a54      	ldr	r2, [pc, #336]	; (8010a3c <HAL_TIM_PWM_Start_DMA+0x430>)
 80108ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108f0:	4a53      	ldr	r2, [pc, #332]	; (8010a40 <HAL_TIM_PWM_Start_DMA+0x434>)
 80108f2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80108f8:	6879      	ldr	r1, [r7, #4]
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	3340      	adds	r3, #64	; 0x40
 8010900:	461a      	mov	r2, r3
 8010902:	887b      	ldrh	r3, [r7, #2]
 8010904:	f7f5 fe58 	bl	80065b8 <HAL_DMA_Start_IT>
 8010908:	4603      	mov	r3, r0
 801090a:	2b00      	cmp	r3, #0
 801090c:	d001      	beq.n	8010912 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 801090e:	2301      	movs	r3, #1
 8010910:	e08e      	b.n	8010a30 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	68da      	ldr	r2, [r3, #12]
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010920:	60da      	str	r2, [r3, #12]
      break;
 8010922:	e002      	b.n	801092a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8010924:	2301      	movs	r3, #1
 8010926:	75fb      	strb	r3, [r7, #23]
      break;
 8010928:	bf00      	nop
  }

  if (status == HAL_OK)
 801092a:	7dfb      	ldrb	r3, [r7, #23]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d17e      	bne.n	8010a2e <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	2201      	movs	r2, #1
 8010936:	68b9      	ldr	r1, [r7, #8]
 8010938:	4618      	mov	r0, r3
 801093a:	f000 ff63 	bl	8011804 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	4a40      	ldr	r2, [pc, #256]	; (8010a44 <HAL_TIM_PWM_Start_DMA+0x438>)
 8010944:	4293      	cmp	r3, r2
 8010946:	d013      	beq.n	8010970 <HAL_TIM_PWM_Start_DMA+0x364>
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	4a3e      	ldr	r2, [pc, #248]	; (8010a48 <HAL_TIM_PWM_Start_DMA+0x43c>)
 801094e:	4293      	cmp	r3, r2
 8010950:	d00e      	beq.n	8010970 <HAL_TIM_PWM_Start_DMA+0x364>
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	4a3d      	ldr	r2, [pc, #244]	; (8010a4c <HAL_TIM_PWM_Start_DMA+0x440>)
 8010958:	4293      	cmp	r3, r2
 801095a:	d009      	beq.n	8010970 <HAL_TIM_PWM_Start_DMA+0x364>
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	4a3b      	ldr	r2, [pc, #236]	; (8010a50 <HAL_TIM_PWM_Start_DMA+0x444>)
 8010962:	4293      	cmp	r3, r2
 8010964:	d004      	beq.n	8010970 <HAL_TIM_PWM_Start_DMA+0x364>
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	4a3a      	ldr	r2, [pc, #232]	; (8010a54 <HAL_TIM_PWM_Start_DMA+0x448>)
 801096c:	4293      	cmp	r3, r2
 801096e:	d101      	bne.n	8010974 <HAL_TIM_PWM_Start_DMA+0x368>
 8010970:	2301      	movs	r3, #1
 8010972:	e000      	b.n	8010976 <HAL_TIM_PWM_Start_DMA+0x36a>
 8010974:	2300      	movs	r3, #0
 8010976:	2b00      	cmp	r3, #0
 8010978:	d007      	beq.n	801098a <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010988:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	4a2d      	ldr	r2, [pc, #180]	; (8010a44 <HAL_TIM_PWM_Start_DMA+0x438>)
 8010990:	4293      	cmp	r3, r2
 8010992:	d02c      	beq.n	80109ee <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801099c:	d027      	beq.n	80109ee <HAL_TIM_PWM_Start_DMA+0x3e2>
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	4a2d      	ldr	r2, [pc, #180]	; (8010a58 <HAL_TIM_PWM_Start_DMA+0x44c>)
 80109a4:	4293      	cmp	r3, r2
 80109a6:	d022      	beq.n	80109ee <HAL_TIM_PWM_Start_DMA+0x3e2>
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	4a2b      	ldr	r2, [pc, #172]	; (8010a5c <HAL_TIM_PWM_Start_DMA+0x450>)
 80109ae:	4293      	cmp	r3, r2
 80109b0:	d01d      	beq.n	80109ee <HAL_TIM_PWM_Start_DMA+0x3e2>
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	4a2a      	ldr	r2, [pc, #168]	; (8010a60 <HAL_TIM_PWM_Start_DMA+0x454>)
 80109b8:	4293      	cmp	r3, r2
 80109ba:	d018      	beq.n	80109ee <HAL_TIM_PWM_Start_DMA+0x3e2>
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	4a21      	ldr	r2, [pc, #132]	; (8010a48 <HAL_TIM_PWM_Start_DMA+0x43c>)
 80109c2:	4293      	cmp	r3, r2
 80109c4:	d013      	beq.n	80109ee <HAL_TIM_PWM_Start_DMA+0x3e2>
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	4a26      	ldr	r2, [pc, #152]	; (8010a64 <HAL_TIM_PWM_Start_DMA+0x458>)
 80109cc:	4293      	cmp	r3, r2
 80109ce:	d00e      	beq.n	80109ee <HAL_TIM_PWM_Start_DMA+0x3e2>
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	4a1d      	ldr	r2, [pc, #116]	; (8010a4c <HAL_TIM_PWM_Start_DMA+0x440>)
 80109d6:	4293      	cmp	r3, r2
 80109d8:	d009      	beq.n	80109ee <HAL_TIM_PWM_Start_DMA+0x3e2>
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	4a22      	ldr	r2, [pc, #136]	; (8010a68 <HAL_TIM_PWM_Start_DMA+0x45c>)
 80109e0:	4293      	cmp	r3, r2
 80109e2:	d004      	beq.n	80109ee <HAL_TIM_PWM_Start_DMA+0x3e2>
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	4a20      	ldr	r2, [pc, #128]	; (8010a6c <HAL_TIM_PWM_Start_DMA+0x460>)
 80109ea:	4293      	cmp	r3, r2
 80109ec:	d115      	bne.n	8010a1a <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	689a      	ldr	r2, [r3, #8]
 80109f4:	4b1e      	ldr	r3, [pc, #120]	; (8010a70 <HAL_TIM_PWM_Start_DMA+0x464>)
 80109f6:	4013      	ands	r3, r2
 80109f8:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80109fa:	693b      	ldr	r3, [r7, #16]
 80109fc:	2b06      	cmp	r3, #6
 80109fe:	d015      	beq.n	8010a2c <HAL_TIM_PWM_Start_DMA+0x420>
 8010a00:	693b      	ldr	r3, [r7, #16]
 8010a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010a06:	d011      	beq.n	8010a2c <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	681a      	ldr	r2, [r3, #0]
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	f042 0201 	orr.w	r2, r2, #1
 8010a16:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010a18:	e008      	b.n	8010a2c <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	681a      	ldr	r2, [r3, #0]
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	f042 0201 	orr.w	r2, r2, #1
 8010a28:	601a      	str	r2, [r3, #0]
 8010a2a:	e000      	b.n	8010a2e <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010a2c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8010a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a30:	4618      	mov	r0, r3
 8010a32:	3718      	adds	r7, #24
 8010a34:	46bd      	mov	sp, r7
 8010a36:	bd80      	pop	{r7, pc}
 8010a38:	08010ffb 	.word	0x08010ffb
 8010a3c:	080110a3 	.word	0x080110a3
 8010a40:	08010f69 	.word	0x08010f69
 8010a44:	40010000 	.word	0x40010000
 8010a48:	40010400 	.word	0x40010400
 8010a4c:	40014000 	.word	0x40014000
 8010a50:	40014400 	.word	0x40014400
 8010a54:	40014800 	.word	0x40014800
 8010a58:	40000400 	.word	0x40000400
 8010a5c:	40000800 	.word	0x40000800
 8010a60:	40000c00 	.word	0x40000c00
 8010a64:	40001800 	.word	0x40001800
 8010a68:	4000e000 	.word	0x4000e000
 8010a6c:	4000e400 	.word	0x4000e400
 8010a70:	00010007 	.word	0x00010007

08010a74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b082      	sub	sp, #8
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	691b      	ldr	r3, [r3, #16]
 8010a82:	f003 0302 	and.w	r3, r3, #2
 8010a86:	2b02      	cmp	r3, #2
 8010a88:	d122      	bne.n	8010ad0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	68db      	ldr	r3, [r3, #12]
 8010a90:	f003 0302 	and.w	r3, r3, #2
 8010a94:	2b02      	cmp	r3, #2
 8010a96:	d11b      	bne.n	8010ad0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	f06f 0202 	mvn.w	r2, #2
 8010aa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	2201      	movs	r2, #1
 8010aa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	699b      	ldr	r3, [r3, #24]
 8010aae:	f003 0303 	and.w	r3, r3, #3
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d003      	beq.n	8010abe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010ab6:	6878      	ldr	r0, [r7, #4]
 8010ab8:	f000 fa24 	bl	8010f04 <HAL_TIM_IC_CaptureCallback>
 8010abc:	e005      	b.n	8010aca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010abe:	6878      	ldr	r0, [r7, #4]
 8010ac0:	f000 fa16 	bl	8010ef0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010ac4:	6878      	ldr	r0, [r7, #4]
 8010ac6:	f000 fa27 	bl	8010f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	2200      	movs	r2, #0
 8010ace:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	691b      	ldr	r3, [r3, #16]
 8010ad6:	f003 0304 	and.w	r3, r3, #4
 8010ada:	2b04      	cmp	r3, #4
 8010adc:	d122      	bne.n	8010b24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	68db      	ldr	r3, [r3, #12]
 8010ae4:	f003 0304 	and.w	r3, r3, #4
 8010ae8:	2b04      	cmp	r3, #4
 8010aea:	d11b      	bne.n	8010b24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	f06f 0204 	mvn.w	r2, #4
 8010af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	2202      	movs	r2, #2
 8010afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	699b      	ldr	r3, [r3, #24]
 8010b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d003      	beq.n	8010b12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010b0a:	6878      	ldr	r0, [r7, #4]
 8010b0c:	f000 f9fa 	bl	8010f04 <HAL_TIM_IC_CaptureCallback>
 8010b10:	e005      	b.n	8010b1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010b12:	6878      	ldr	r0, [r7, #4]
 8010b14:	f000 f9ec 	bl	8010ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010b18:	6878      	ldr	r0, [r7, #4]
 8010b1a:	f000 f9fd 	bl	8010f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	2200      	movs	r2, #0
 8010b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	691b      	ldr	r3, [r3, #16]
 8010b2a:	f003 0308 	and.w	r3, r3, #8
 8010b2e:	2b08      	cmp	r3, #8
 8010b30:	d122      	bne.n	8010b78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	68db      	ldr	r3, [r3, #12]
 8010b38:	f003 0308 	and.w	r3, r3, #8
 8010b3c:	2b08      	cmp	r3, #8
 8010b3e:	d11b      	bne.n	8010b78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	f06f 0208 	mvn.w	r2, #8
 8010b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	2204      	movs	r2, #4
 8010b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	69db      	ldr	r3, [r3, #28]
 8010b56:	f003 0303 	and.w	r3, r3, #3
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d003      	beq.n	8010b66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010b5e:	6878      	ldr	r0, [r7, #4]
 8010b60:	f000 f9d0 	bl	8010f04 <HAL_TIM_IC_CaptureCallback>
 8010b64:	e005      	b.n	8010b72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010b66:	6878      	ldr	r0, [r7, #4]
 8010b68:	f000 f9c2 	bl	8010ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010b6c:	6878      	ldr	r0, [r7, #4]
 8010b6e:	f000 f9d3 	bl	8010f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	2200      	movs	r2, #0
 8010b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	691b      	ldr	r3, [r3, #16]
 8010b7e:	f003 0310 	and.w	r3, r3, #16
 8010b82:	2b10      	cmp	r3, #16
 8010b84:	d122      	bne.n	8010bcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	68db      	ldr	r3, [r3, #12]
 8010b8c:	f003 0310 	and.w	r3, r3, #16
 8010b90:	2b10      	cmp	r3, #16
 8010b92:	d11b      	bne.n	8010bcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	f06f 0210 	mvn.w	r2, #16
 8010b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	2208      	movs	r2, #8
 8010ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	69db      	ldr	r3, [r3, #28]
 8010baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d003      	beq.n	8010bba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010bb2:	6878      	ldr	r0, [r7, #4]
 8010bb4:	f000 f9a6 	bl	8010f04 <HAL_TIM_IC_CaptureCallback>
 8010bb8:	e005      	b.n	8010bc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010bba:	6878      	ldr	r0, [r7, #4]
 8010bbc:	f000 f998 	bl	8010ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010bc0:	6878      	ldr	r0, [r7, #4]
 8010bc2:	f000 f9a9 	bl	8010f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	2200      	movs	r2, #0
 8010bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	691b      	ldr	r3, [r3, #16]
 8010bd2:	f003 0301 	and.w	r3, r3, #1
 8010bd6:	2b01      	cmp	r3, #1
 8010bd8:	d10e      	bne.n	8010bf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	68db      	ldr	r3, [r3, #12]
 8010be0:	f003 0301 	and.w	r3, r3, #1
 8010be4:	2b01      	cmp	r3, #1
 8010be6:	d107      	bne.n	8010bf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	f06f 0201 	mvn.w	r2, #1
 8010bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010bf2:	6878      	ldr	r0, [r7, #4]
 8010bf4:	f000 f972 	bl	8010edc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	691b      	ldr	r3, [r3, #16]
 8010bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c02:	2b80      	cmp	r3, #128	; 0x80
 8010c04:	d10e      	bne.n	8010c24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	68db      	ldr	r3, [r3, #12]
 8010c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c10:	2b80      	cmp	r3, #128	; 0x80
 8010c12:	d107      	bne.n	8010c24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010c1e:	6878      	ldr	r0, [r7, #4]
 8010c20:	f000 febc 	bl	801199c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	691b      	ldr	r3, [r3, #16]
 8010c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010c32:	d10e      	bne.n	8010c52 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	68db      	ldr	r3, [r3, #12]
 8010c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c3e:	2b80      	cmp	r3, #128	; 0x80
 8010c40:	d107      	bne.n	8010c52 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010c4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010c4c:	6878      	ldr	r0, [r7, #4]
 8010c4e:	f000 feaf 	bl	80119b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	691b      	ldr	r3, [r3, #16]
 8010c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c5c:	2b40      	cmp	r3, #64	; 0x40
 8010c5e:	d10e      	bne.n	8010c7e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	68db      	ldr	r3, [r3, #12]
 8010c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c6a:	2b40      	cmp	r3, #64	; 0x40
 8010c6c:	d107      	bne.n	8010c7e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010c76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010c78:	6878      	ldr	r0, [r7, #4]
 8010c7a:	f000 f961 	bl	8010f40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	691b      	ldr	r3, [r3, #16]
 8010c84:	f003 0320 	and.w	r3, r3, #32
 8010c88:	2b20      	cmp	r3, #32
 8010c8a:	d10e      	bne.n	8010caa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	68db      	ldr	r3, [r3, #12]
 8010c92:	f003 0320 	and.w	r3, r3, #32
 8010c96:	2b20      	cmp	r3, #32
 8010c98:	d107      	bne.n	8010caa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	f06f 0220 	mvn.w	r2, #32
 8010ca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010ca4:	6878      	ldr	r0, [r7, #4]
 8010ca6:	f000 fe6f 	bl	8011988 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010caa:	bf00      	nop
 8010cac:	3708      	adds	r7, #8
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	bd80      	pop	{r7, pc}
	...

08010cb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	b086      	sub	sp, #24
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	60f8      	str	r0, [r7, #12]
 8010cbc:	60b9      	str	r1, [r7, #8]
 8010cbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010cca:	2b01      	cmp	r3, #1
 8010ccc:	d101      	bne.n	8010cd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8010cce:	2302      	movs	r3, #2
 8010cd0:	e0ff      	b.n	8010ed2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	2201      	movs	r2, #1
 8010cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	2b14      	cmp	r3, #20
 8010cde:	f200 80f0 	bhi.w	8010ec2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8010ce2:	a201      	add	r2, pc, #4	; (adr r2, 8010ce8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ce8:	08010d3d 	.word	0x08010d3d
 8010cec:	08010ec3 	.word	0x08010ec3
 8010cf0:	08010ec3 	.word	0x08010ec3
 8010cf4:	08010ec3 	.word	0x08010ec3
 8010cf8:	08010d7d 	.word	0x08010d7d
 8010cfc:	08010ec3 	.word	0x08010ec3
 8010d00:	08010ec3 	.word	0x08010ec3
 8010d04:	08010ec3 	.word	0x08010ec3
 8010d08:	08010dbf 	.word	0x08010dbf
 8010d0c:	08010ec3 	.word	0x08010ec3
 8010d10:	08010ec3 	.word	0x08010ec3
 8010d14:	08010ec3 	.word	0x08010ec3
 8010d18:	08010dff 	.word	0x08010dff
 8010d1c:	08010ec3 	.word	0x08010ec3
 8010d20:	08010ec3 	.word	0x08010ec3
 8010d24:	08010ec3 	.word	0x08010ec3
 8010d28:	08010e41 	.word	0x08010e41
 8010d2c:	08010ec3 	.word	0x08010ec3
 8010d30:	08010ec3 	.word	0x08010ec3
 8010d34:	08010ec3 	.word	0x08010ec3
 8010d38:	08010e81 	.word	0x08010e81
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	68b9      	ldr	r1, [r7, #8]
 8010d42:	4618      	mov	r0, r3
 8010d44:	f000 fa88 	bl	8011258 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	699a      	ldr	r2, [r3, #24]
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	f042 0208 	orr.w	r2, r2, #8
 8010d56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	699a      	ldr	r2, [r3, #24]
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	f022 0204 	bic.w	r2, r2, #4
 8010d66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	6999      	ldr	r1, [r3, #24]
 8010d6e:	68bb      	ldr	r3, [r7, #8]
 8010d70:	691a      	ldr	r2, [r3, #16]
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	430a      	orrs	r2, r1
 8010d78:	619a      	str	r2, [r3, #24]
      break;
 8010d7a:	e0a5      	b.n	8010ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	68b9      	ldr	r1, [r7, #8]
 8010d82:	4618      	mov	r0, r3
 8010d84:	f000 faf8 	bl	8011378 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	699a      	ldr	r2, [r3, #24]
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010d96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	699a      	ldr	r2, [r3, #24]
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010da6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	6999      	ldr	r1, [r3, #24]
 8010dae:	68bb      	ldr	r3, [r7, #8]
 8010db0:	691b      	ldr	r3, [r3, #16]
 8010db2:	021a      	lsls	r2, r3, #8
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	430a      	orrs	r2, r1
 8010dba:	619a      	str	r2, [r3, #24]
      break;
 8010dbc:	e084      	b.n	8010ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	68b9      	ldr	r1, [r7, #8]
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	f000 fb61 	bl	801148c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	69da      	ldr	r2, [r3, #28]
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	f042 0208 	orr.w	r2, r2, #8
 8010dd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	69da      	ldr	r2, [r3, #28]
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	f022 0204 	bic.w	r2, r2, #4
 8010de8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	69d9      	ldr	r1, [r3, #28]
 8010df0:	68bb      	ldr	r3, [r7, #8]
 8010df2:	691a      	ldr	r2, [r3, #16]
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	430a      	orrs	r2, r1
 8010dfa:	61da      	str	r2, [r3, #28]
      break;
 8010dfc:	e064      	b.n	8010ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	68b9      	ldr	r1, [r7, #8]
 8010e04:	4618      	mov	r0, r3
 8010e06:	f000 fbc9 	bl	801159c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	69da      	ldr	r2, [r3, #28]
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010e18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	69da      	ldr	r2, [r3, #28]
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010e28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	69d9      	ldr	r1, [r3, #28]
 8010e30:	68bb      	ldr	r3, [r7, #8]
 8010e32:	691b      	ldr	r3, [r3, #16]
 8010e34:	021a      	lsls	r2, r3, #8
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	430a      	orrs	r2, r1
 8010e3c:	61da      	str	r2, [r3, #28]
      break;
 8010e3e:	e043      	b.n	8010ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	68b9      	ldr	r1, [r7, #8]
 8010e46:	4618      	mov	r0, r3
 8010e48:	f000 fc12 	bl	8011670 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	f042 0208 	orr.w	r2, r2, #8
 8010e5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	f022 0204 	bic.w	r2, r2, #4
 8010e6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010e72:	68bb      	ldr	r3, [r7, #8]
 8010e74:	691a      	ldr	r2, [r3, #16]
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	430a      	orrs	r2, r1
 8010e7c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010e7e:	e023      	b.n	8010ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	68b9      	ldr	r1, [r7, #8]
 8010e86:	4618      	mov	r0, r3
 8010e88:	f000 fc56 	bl	8011738 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010e9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010eaa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010eb2:	68bb      	ldr	r3, [r7, #8]
 8010eb4:	691b      	ldr	r3, [r3, #16]
 8010eb6:	021a      	lsls	r2, r3, #8
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	430a      	orrs	r2, r1
 8010ebe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010ec0:	e002      	b.n	8010ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8010ec2:	2301      	movs	r3, #1
 8010ec4:	75fb      	strb	r3, [r7, #23]
      break;
 8010ec6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	2200      	movs	r2, #0
 8010ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010ed0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	3718      	adds	r7, #24
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	bd80      	pop	{r7, pc}
 8010eda:	bf00      	nop

08010edc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010edc:	b480      	push	{r7}
 8010ede:	b083      	sub	sp, #12
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8010ee4:	bf00      	nop
 8010ee6:	370c      	adds	r7, #12
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eee:	4770      	bx	lr

08010ef0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010ef0:	b480      	push	{r7}
 8010ef2:	b083      	sub	sp, #12
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010ef8:	bf00      	nop
 8010efa:	370c      	adds	r7, #12
 8010efc:	46bd      	mov	sp, r7
 8010efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f02:	4770      	bx	lr

08010f04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010f04:	b480      	push	{r7}
 8010f06:	b083      	sub	sp, #12
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010f0c:	bf00      	nop
 8010f0e:	370c      	adds	r7, #12
 8010f10:	46bd      	mov	sp, r7
 8010f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f16:	4770      	bx	lr

08010f18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010f18:	b480      	push	{r7}
 8010f1a:	b083      	sub	sp, #12
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010f20:	bf00      	nop
 8010f22:	370c      	adds	r7, #12
 8010f24:	46bd      	mov	sp, r7
 8010f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2a:	4770      	bx	lr

08010f2c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010f2c:	b480      	push	{r7}
 8010f2e:	b083      	sub	sp, #12
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8010f34:	bf00      	nop
 8010f36:	370c      	adds	r7, #12
 8010f38:	46bd      	mov	sp, r7
 8010f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f3e:	4770      	bx	lr

08010f40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010f40:	b480      	push	{r7}
 8010f42:	b083      	sub	sp, #12
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010f48:	bf00      	nop
 8010f4a:	370c      	adds	r7, #12
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f52:	4770      	bx	lr

08010f54 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8010f54:	b480      	push	{r7}
 8010f56:	b083      	sub	sp, #12
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8010f5c:	bf00      	nop
 8010f5e:	370c      	adds	r7, #12
 8010f60:	46bd      	mov	sp, r7
 8010f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f66:	4770      	bx	lr

08010f68 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b084      	sub	sp, #16
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f74:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f7a:	687a      	ldr	r2, [r7, #4]
 8010f7c:	429a      	cmp	r2, r3
 8010f7e:	d107      	bne.n	8010f90 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	2201      	movs	r2, #1
 8010f84:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	2201      	movs	r2, #1
 8010f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010f8e:	e02a      	b.n	8010fe6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f94:	687a      	ldr	r2, [r7, #4]
 8010f96:	429a      	cmp	r2, r3
 8010f98:	d107      	bne.n	8010faa <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	2202      	movs	r2, #2
 8010f9e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	2201      	movs	r2, #1
 8010fa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010fa8:	e01d      	b.n	8010fe6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fae:	687a      	ldr	r2, [r7, #4]
 8010fb0:	429a      	cmp	r2, r3
 8010fb2:	d107      	bne.n	8010fc4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	2204      	movs	r2, #4
 8010fb8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	2201      	movs	r2, #1
 8010fbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010fc2:	e010      	b.n	8010fe6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fc8:	687a      	ldr	r2, [r7, #4]
 8010fca:	429a      	cmp	r2, r3
 8010fcc:	d107      	bne.n	8010fde <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	2208      	movs	r2, #8
 8010fd2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	2201      	movs	r2, #1
 8010fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010fdc:	e003      	b.n	8010fe6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	2201      	movs	r2, #1
 8010fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8010fe6:	68f8      	ldr	r0, [r7, #12]
 8010fe8:	f7ff ffb4 	bl	8010f54 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	2200      	movs	r2, #0
 8010ff0:	771a      	strb	r2, [r3, #28]
}
 8010ff2:	bf00      	nop
 8010ff4:	3710      	adds	r7, #16
 8010ff6:	46bd      	mov	sp, r7
 8010ff8:	bd80      	pop	{r7, pc}

08010ffa <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8010ffa:	b580      	push	{r7, lr}
 8010ffc:	b084      	sub	sp, #16
 8010ffe:	af00      	add	r7, sp, #0
 8011000:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011006:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801100c:	687a      	ldr	r2, [r7, #4]
 801100e:	429a      	cmp	r2, r3
 8011010:	d10b      	bne.n	801102a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	2201      	movs	r2, #1
 8011016:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	69db      	ldr	r3, [r3, #28]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d136      	bne.n	801108e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	2201      	movs	r2, #1
 8011024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011028:	e031      	b.n	801108e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801102e:	687a      	ldr	r2, [r7, #4]
 8011030:	429a      	cmp	r2, r3
 8011032:	d10b      	bne.n	801104c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	2202      	movs	r2, #2
 8011038:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	69db      	ldr	r3, [r3, #28]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d125      	bne.n	801108e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	2201      	movs	r2, #1
 8011046:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801104a:	e020      	b.n	801108e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011050:	687a      	ldr	r2, [r7, #4]
 8011052:	429a      	cmp	r2, r3
 8011054:	d10b      	bne.n	801106e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	2204      	movs	r2, #4
 801105a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	69db      	ldr	r3, [r3, #28]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d114      	bne.n	801108e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	2201      	movs	r2, #1
 8011068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801106c:	e00f      	b.n	801108e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011072:	687a      	ldr	r2, [r7, #4]
 8011074:	429a      	cmp	r2, r3
 8011076:	d10a      	bne.n	801108e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	2208      	movs	r2, #8
 801107c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	69db      	ldr	r3, [r3, #28]
 8011082:	2b00      	cmp	r3, #0
 8011084:	d103      	bne.n	801108e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	2201      	movs	r2, #1
 801108a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 801108e:	68f8      	ldr	r0, [r7, #12]
 8011090:	f7ff ff42 	bl	8010f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	2200      	movs	r2, #0
 8011098:	771a      	strb	r2, [r3, #28]
}
 801109a:	bf00      	nop
 801109c:	3710      	adds	r7, #16
 801109e:	46bd      	mov	sp, r7
 80110a0:	bd80      	pop	{r7, pc}

080110a2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80110a2:	b580      	push	{r7, lr}
 80110a4:	b084      	sub	sp, #16
 80110a6:	af00      	add	r7, sp, #0
 80110a8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110ae:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110b4:	687a      	ldr	r2, [r7, #4]
 80110b6:	429a      	cmp	r2, r3
 80110b8:	d103      	bne.n	80110c2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	2201      	movs	r2, #1
 80110be:	771a      	strb	r2, [r3, #28]
 80110c0:	e019      	b.n	80110f6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110c6:	687a      	ldr	r2, [r7, #4]
 80110c8:	429a      	cmp	r2, r3
 80110ca:	d103      	bne.n	80110d4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	2202      	movs	r2, #2
 80110d0:	771a      	strb	r2, [r3, #28]
 80110d2:	e010      	b.n	80110f6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110d8:	687a      	ldr	r2, [r7, #4]
 80110da:	429a      	cmp	r2, r3
 80110dc:	d103      	bne.n	80110e6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	2204      	movs	r2, #4
 80110e2:	771a      	strb	r2, [r3, #28]
 80110e4:	e007      	b.n	80110f6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110ea:	687a      	ldr	r2, [r7, #4]
 80110ec:	429a      	cmp	r2, r3
 80110ee:	d102      	bne.n	80110f6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	2208      	movs	r2, #8
 80110f4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80110f6:	68f8      	ldr	r0, [r7, #12]
 80110f8:	f7ff ff18 	bl	8010f2c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	2200      	movs	r2, #0
 8011100:	771a      	strb	r2, [r3, #28]
}
 8011102:	bf00      	nop
 8011104:	3710      	adds	r7, #16
 8011106:	46bd      	mov	sp, r7
 8011108:	bd80      	pop	{r7, pc}
	...

0801110c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801110c:	b480      	push	{r7}
 801110e:	b085      	sub	sp, #20
 8011110:	af00      	add	r7, sp, #0
 8011112:	6078      	str	r0, [r7, #4]
 8011114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	4a44      	ldr	r2, [pc, #272]	; (8011230 <TIM_Base_SetConfig+0x124>)
 8011120:	4293      	cmp	r3, r2
 8011122:	d013      	beq.n	801114c <TIM_Base_SetConfig+0x40>
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801112a:	d00f      	beq.n	801114c <TIM_Base_SetConfig+0x40>
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	4a41      	ldr	r2, [pc, #260]	; (8011234 <TIM_Base_SetConfig+0x128>)
 8011130:	4293      	cmp	r3, r2
 8011132:	d00b      	beq.n	801114c <TIM_Base_SetConfig+0x40>
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	4a40      	ldr	r2, [pc, #256]	; (8011238 <TIM_Base_SetConfig+0x12c>)
 8011138:	4293      	cmp	r3, r2
 801113a:	d007      	beq.n	801114c <TIM_Base_SetConfig+0x40>
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	4a3f      	ldr	r2, [pc, #252]	; (801123c <TIM_Base_SetConfig+0x130>)
 8011140:	4293      	cmp	r3, r2
 8011142:	d003      	beq.n	801114c <TIM_Base_SetConfig+0x40>
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	4a3e      	ldr	r2, [pc, #248]	; (8011240 <TIM_Base_SetConfig+0x134>)
 8011148:	4293      	cmp	r3, r2
 801114a:	d108      	bne.n	801115e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011152:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011154:	683b      	ldr	r3, [r7, #0]
 8011156:	685b      	ldr	r3, [r3, #4]
 8011158:	68fa      	ldr	r2, [r7, #12]
 801115a:	4313      	orrs	r3, r2
 801115c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	4a33      	ldr	r2, [pc, #204]	; (8011230 <TIM_Base_SetConfig+0x124>)
 8011162:	4293      	cmp	r3, r2
 8011164:	d027      	beq.n	80111b6 <TIM_Base_SetConfig+0xaa>
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801116c:	d023      	beq.n	80111b6 <TIM_Base_SetConfig+0xaa>
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	4a30      	ldr	r2, [pc, #192]	; (8011234 <TIM_Base_SetConfig+0x128>)
 8011172:	4293      	cmp	r3, r2
 8011174:	d01f      	beq.n	80111b6 <TIM_Base_SetConfig+0xaa>
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	4a2f      	ldr	r2, [pc, #188]	; (8011238 <TIM_Base_SetConfig+0x12c>)
 801117a:	4293      	cmp	r3, r2
 801117c:	d01b      	beq.n	80111b6 <TIM_Base_SetConfig+0xaa>
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	4a2e      	ldr	r2, [pc, #184]	; (801123c <TIM_Base_SetConfig+0x130>)
 8011182:	4293      	cmp	r3, r2
 8011184:	d017      	beq.n	80111b6 <TIM_Base_SetConfig+0xaa>
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	4a2d      	ldr	r2, [pc, #180]	; (8011240 <TIM_Base_SetConfig+0x134>)
 801118a:	4293      	cmp	r3, r2
 801118c:	d013      	beq.n	80111b6 <TIM_Base_SetConfig+0xaa>
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	4a2c      	ldr	r2, [pc, #176]	; (8011244 <TIM_Base_SetConfig+0x138>)
 8011192:	4293      	cmp	r3, r2
 8011194:	d00f      	beq.n	80111b6 <TIM_Base_SetConfig+0xaa>
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	4a2b      	ldr	r2, [pc, #172]	; (8011248 <TIM_Base_SetConfig+0x13c>)
 801119a:	4293      	cmp	r3, r2
 801119c:	d00b      	beq.n	80111b6 <TIM_Base_SetConfig+0xaa>
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	4a2a      	ldr	r2, [pc, #168]	; (801124c <TIM_Base_SetConfig+0x140>)
 80111a2:	4293      	cmp	r3, r2
 80111a4:	d007      	beq.n	80111b6 <TIM_Base_SetConfig+0xaa>
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	4a29      	ldr	r2, [pc, #164]	; (8011250 <TIM_Base_SetConfig+0x144>)
 80111aa:	4293      	cmp	r3, r2
 80111ac:	d003      	beq.n	80111b6 <TIM_Base_SetConfig+0xaa>
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	4a28      	ldr	r2, [pc, #160]	; (8011254 <TIM_Base_SetConfig+0x148>)
 80111b2:	4293      	cmp	r3, r2
 80111b4:	d108      	bne.n	80111c8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80111bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80111be:	683b      	ldr	r3, [r7, #0]
 80111c0:	68db      	ldr	r3, [r3, #12]
 80111c2:	68fa      	ldr	r2, [r7, #12]
 80111c4:	4313      	orrs	r3, r2
 80111c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80111ce:	683b      	ldr	r3, [r7, #0]
 80111d0:	695b      	ldr	r3, [r3, #20]
 80111d2:	4313      	orrs	r3, r2
 80111d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	68fa      	ldr	r2, [r7, #12]
 80111da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80111dc:	683b      	ldr	r3, [r7, #0]
 80111de:	689a      	ldr	r2, [r3, #8]
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80111e4:	683b      	ldr	r3, [r7, #0]
 80111e6:	681a      	ldr	r2, [r3, #0]
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	4a10      	ldr	r2, [pc, #64]	; (8011230 <TIM_Base_SetConfig+0x124>)
 80111f0:	4293      	cmp	r3, r2
 80111f2:	d00f      	beq.n	8011214 <TIM_Base_SetConfig+0x108>
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	4a12      	ldr	r2, [pc, #72]	; (8011240 <TIM_Base_SetConfig+0x134>)
 80111f8:	4293      	cmp	r3, r2
 80111fa:	d00b      	beq.n	8011214 <TIM_Base_SetConfig+0x108>
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	4a11      	ldr	r2, [pc, #68]	; (8011244 <TIM_Base_SetConfig+0x138>)
 8011200:	4293      	cmp	r3, r2
 8011202:	d007      	beq.n	8011214 <TIM_Base_SetConfig+0x108>
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	4a10      	ldr	r2, [pc, #64]	; (8011248 <TIM_Base_SetConfig+0x13c>)
 8011208:	4293      	cmp	r3, r2
 801120a:	d003      	beq.n	8011214 <TIM_Base_SetConfig+0x108>
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	4a0f      	ldr	r2, [pc, #60]	; (801124c <TIM_Base_SetConfig+0x140>)
 8011210:	4293      	cmp	r3, r2
 8011212:	d103      	bne.n	801121c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011214:	683b      	ldr	r3, [r7, #0]
 8011216:	691a      	ldr	r2, [r3, #16]
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	2201      	movs	r2, #1
 8011220:	615a      	str	r2, [r3, #20]
}
 8011222:	bf00      	nop
 8011224:	3714      	adds	r7, #20
 8011226:	46bd      	mov	sp, r7
 8011228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801122c:	4770      	bx	lr
 801122e:	bf00      	nop
 8011230:	40010000 	.word	0x40010000
 8011234:	40000400 	.word	0x40000400
 8011238:	40000800 	.word	0x40000800
 801123c:	40000c00 	.word	0x40000c00
 8011240:	40010400 	.word	0x40010400
 8011244:	40014000 	.word	0x40014000
 8011248:	40014400 	.word	0x40014400
 801124c:	40014800 	.word	0x40014800
 8011250:	4000e000 	.word	0x4000e000
 8011254:	4000e400 	.word	0x4000e400

08011258 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011258:	b480      	push	{r7}
 801125a:	b087      	sub	sp, #28
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
 8011260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	6a1b      	ldr	r3, [r3, #32]
 8011266:	f023 0201 	bic.w	r2, r3, #1
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	6a1b      	ldr	r3, [r3, #32]
 8011272:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	685b      	ldr	r3, [r3, #4]
 8011278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	699b      	ldr	r3, [r3, #24]
 801127e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8011280:	68fa      	ldr	r2, [r7, #12]
 8011282:	4b37      	ldr	r3, [pc, #220]	; (8011360 <TIM_OC1_SetConfig+0x108>)
 8011284:	4013      	ands	r3, r2
 8011286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	f023 0303 	bic.w	r3, r3, #3
 801128e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011290:	683b      	ldr	r3, [r7, #0]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	68fa      	ldr	r2, [r7, #12]
 8011296:	4313      	orrs	r3, r2
 8011298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801129a:	697b      	ldr	r3, [r7, #20]
 801129c:	f023 0302 	bic.w	r3, r3, #2
 80112a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80112a2:	683b      	ldr	r3, [r7, #0]
 80112a4:	689b      	ldr	r3, [r3, #8]
 80112a6:	697a      	ldr	r2, [r7, #20]
 80112a8:	4313      	orrs	r3, r2
 80112aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	4a2d      	ldr	r2, [pc, #180]	; (8011364 <TIM_OC1_SetConfig+0x10c>)
 80112b0:	4293      	cmp	r3, r2
 80112b2:	d00f      	beq.n	80112d4 <TIM_OC1_SetConfig+0x7c>
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	4a2c      	ldr	r2, [pc, #176]	; (8011368 <TIM_OC1_SetConfig+0x110>)
 80112b8:	4293      	cmp	r3, r2
 80112ba:	d00b      	beq.n	80112d4 <TIM_OC1_SetConfig+0x7c>
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	4a2b      	ldr	r2, [pc, #172]	; (801136c <TIM_OC1_SetConfig+0x114>)
 80112c0:	4293      	cmp	r3, r2
 80112c2:	d007      	beq.n	80112d4 <TIM_OC1_SetConfig+0x7c>
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	4a2a      	ldr	r2, [pc, #168]	; (8011370 <TIM_OC1_SetConfig+0x118>)
 80112c8:	4293      	cmp	r3, r2
 80112ca:	d003      	beq.n	80112d4 <TIM_OC1_SetConfig+0x7c>
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	4a29      	ldr	r2, [pc, #164]	; (8011374 <TIM_OC1_SetConfig+0x11c>)
 80112d0:	4293      	cmp	r3, r2
 80112d2:	d10c      	bne.n	80112ee <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80112d4:	697b      	ldr	r3, [r7, #20]
 80112d6:	f023 0308 	bic.w	r3, r3, #8
 80112da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80112dc:	683b      	ldr	r3, [r7, #0]
 80112de:	68db      	ldr	r3, [r3, #12]
 80112e0:	697a      	ldr	r2, [r7, #20]
 80112e2:	4313      	orrs	r3, r2
 80112e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80112e6:	697b      	ldr	r3, [r7, #20]
 80112e8:	f023 0304 	bic.w	r3, r3, #4
 80112ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	4a1c      	ldr	r2, [pc, #112]	; (8011364 <TIM_OC1_SetConfig+0x10c>)
 80112f2:	4293      	cmp	r3, r2
 80112f4:	d00f      	beq.n	8011316 <TIM_OC1_SetConfig+0xbe>
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	4a1b      	ldr	r2, [pc, #108]	; (8011368 <TIM_OC1_SetConfig+0x110>)
 80112fa:	4293      	cmp	r3, r2
 80112fc:	d00b      	beq.n	8011316 <TIM_OC1_SetConfig+0xbe>
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	4a1a      	ldr	r2, [pc, #104]	; (801136c <TIM_OC1_SetConfig+0x114>)
 8011302:	4293      	cmp	r3, r2
 8011304:	d007      	beq.n	8011316 <TIM_OC1_SetConfig+0xbe>
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	4a19      	ldr	r2, [pc, #100]	; (8011370 <TIM_OC1_SetConfig+0x118>)
 801130a:	4293      	cmp	r3, r2
 801130c:	d003      	beq.n	8011316 <TIM_OC1_SetConfig+0xbe>
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	4a18      	ldr	r2, [pc, #96]	; (8011374 <TIM_OC1_SetConfig+0x11c>)
 8011312:	4293      	cmp	r3, r2
 8011314:	d111      	bne.n	801133a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8011316:	693b      	ldr	r3, [r7, #16]
 8011318:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801131c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801131e:	693b      	ldr	r3, [r7, #16]
 8011320:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011324:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8011326:	683b      	ldr	r3, [r7, #0]
 8011328:	695b      	ldr	r3, [r3, #20]
 801132a:	693a      	ldr	r2, [r7, #16]
 801132c:	4313      	orrs	r3, r2
 801132e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011330:	683b      	ldr	r3, [r7, #0]
 8011332:	699b      	ldr	r3, [r3, #24]
 8011334:	693a      	ldr	r2, [r7, #16]
 8011336:	4313      	orrs	r3, r2
 8011338:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	693a      	ldr	r2, [r7, #16]
 801133e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	68fa      	ldr	r2, [r7, #12]
 8011344:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8011346:	683b      	ldr	r3, [r7, #0]
 8011348:	685a      	ldr	r2, [r3, #4]
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	697a      	ldr	r2, [r7, #20]
 8011352:	621a      	str	r2, [r3, #32]
}
 8011354:	bf00      	nop
 8011356:	371c      	adds	r7, #28
 8011358:	46bd      	mov	sp, r7
 801135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801135e:	4770      	bx	lr
 8011360:	fffeff8f 	.word	0xfffeff8f
 8011364:	40010000 	.word	0x40010000
 8011368:	40010400 	.word	0x40010400
 801136c:	40014000 	.word	0x40014000
 8011370:	40014400 	.word	0x40014400
 8011374:	40014800 	.word	0x40014800

08011378 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011378:	b480      	push	{r7}
 801137a:	b087      	sub	sp, #28
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
 8011380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	6a1b      	ldr	r3, [r3, #32]
 8011386:	f023 0210 	bic.w	r2, r3, #16
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	6a1b      	ldr	r3, [r3, #32]
 8011392:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	685b      	ldr	r3, [r3, #4]
 8011398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	699b      	ldr	r3, [r3, #24]
 801139e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80113a0:	68fa      	ldr	r2, [r7, #12]
 80113a2:	4b34      	ldr	r3, [pc, #208]	; (8011474 <TIM_OC2_SetConfig+0xfc>)
 80113a4:	4013      	ands	r3, r2
 80113a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80113ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80113b0:	683b      	ldr	r3, [r7, #0]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	021b      	lsls	r3, r3, #8
 80113b6:	68fa      	ldr	r2, [r7, #12]
 80113b8:	4313      	orrs	r3, r2
 80113ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80113bc:	697b      	ldr	r3, [r7, #20]
 80113be:	f023 0320 	bic.w	r3, r3, #32
 80113c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80113c4:	683b      	ldr	r3, [r7, #0]
 80113c6:	689b      	ldr	r3, [r3, #8]
 80113c8:	011b      	lsls	r3, r3, #4
 80113ca:	697a      	ldr	r2, [r7, #20]
 80113cc:	4313      	orrs	r3, r2
 80113ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	4a29      	ldr	r2, [pc, #164]	; (8011478 <TIM_OC2_SetConfig+0x100>)
 80113d4:	4293      	cmp	r3, r2
 80113d6:	d003      	beq.n	80113e0 <TIM_OC2_SetConfig+0x68>
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	4a28      	ldr	r2, [pc, #160]	; (801147c <TIM_OC2_SetConfig+0x104>)
 80113dc:	4293      	cmp	r3, r2
 80113de:	d10d      	bne.n	80113fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80113e0:	697b      	ldr	r3, [r7, #20]
 80113e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80113e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80113e8:	683b      	ldr	r3, [r7, #0]
 80113ea:	68db      	ldr	r3, [r3, #12]
 80113ec:	011b      	lsls	r3, r3, #4
 80113ee:	697a      	ldr	r2, [r7, #20]
 80113f0:	4313      	orrs	r3, r2
 80113f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80113f4:	697b      	ldr	r3, [r7, #20]
 80113f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80113fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	4a1e      	ldr	r2, [pc, #120]	; (8011478 <TIM_OC2_SetConfig+0x100>)
 8011400:	4293      	cmp	r3, r2
 8011402:	d00f      	beq.n	8011424 <TIM_OC2_SetConfig+0xac>
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	4a1d      	ldr	r2, [pc, #116]	; (801147c <TIM_OC2_SetConfig+0x104>)
 8011408:	4293      	cmp	r3, r2
 801140a:	d00b      	beq.n	8011424 <TIM_OC2_SetConfig+0xac>
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	4a1c      	ldr	r2, [pc, #112]	; (8011480 <TIM_OC2_SetConfig+0x108>)
 8011410:	4293      	cmp	r3, r2
 8011412:	d007      	beq.n	8011424 <TIM_OC2_SetConfig+0xac>
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	4a1b      	ldr	r2, [pc, #108]	; (8011484 <TIM_OC2_SetConfig+0x10c>)
 8011418:	4293      	cmp	r3, r2
 801141a:	d003      	beq.n	8011424 <TIM_OC2_SetConfig+0xac>
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	4a1a      	ldr	r2, [pc, #104]	; (8011488 <TIM_OC2_SetConfig+0x110>)
 8011420:	4293      	cmp	r3, r2
 8011422:	d113      	bne.n	801144c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011424:	693b      	ldr	r3, [r7, #16]
 8011426:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801142a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801142c:	693b      	ldr	r3, [r7, #16]
 801142e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011432:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011434:	683b      	ldr	r3, [r7, #0]
 8011436:	695b      	ldr	r3, [r3, #20]
 8011438:	009b      	lsls	r3, r3, #2
 801143a:	693a      	ldr	r2, [r7, #16]
 801143c:	4313      	orrs	r3, r2
 801143e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011440:	683b      	ldr	r3, [r7, #0]
 8011442:	699b      	ldr	r3, [r3, #24]
 8011444:	009b      	lsls	r3, r3, #2
 8011446:	693a      	ldr	r2, [r7, #16]
 8011448:	4313      	orrs	r3, r2
 801144a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	693a      	ldr	r2, [r7, #16]
 8011450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	68fa      	ldr	r2, [r7, #12]
 8011456:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011458:	683b      	ldr	r3, [r7, #0]
 801145a:	685a      	ldr	r2, [r3, #4]
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	697a      	ldr	r2, [r7, #20]
 8011464:	621a      	str	r2, [r3, #32]
}
 8011466:	bf00      	nop
 8011468:	371c      	adds	r7, #28
 801146a:	46bd      	mov	sp, r7
 801146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011470:	4770      	bx	lr
 8011472:	bf00      	nop
 8011474:	feff8fff 	.word	0xfeff8fff
 8011478:	40010000 	.word	0x40010000
 801147c:	40010400 	.word	0x40010400
 8011480:	40014000 	.word	0x40014000
 8011484:	40014400 	.word	0x40014400
 8011488:	40014800 	.word	0x40014800

0801148c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801148c:	b480      	push	{r7}
 801148e:	b087      	sub	sp, #28
 8011490:	af00      	add	r7, sp, #0
 8011492:	6078      	str	r0, [r7, #4]
 8011494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	6a1b      	ldr	r3, [r3, #32]
 801149a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	6a1b      	ldr	r3, [r3, #32]
 80114a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	685b      	ldr	r3, [r3, #4]
 80114ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	69db      	ldr	r3, [r3, #28]
 80114b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80114b4:	68fa      	ldr	r2, [r7, #12]
 80114b6:	4b33      	ldr	r3, [pc, #204]	; (8011584 <TIM_OC3_SetConfig+0xf8>)
 80114b8:	4013      	ands	r3, r2
 80114ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	f023 0303 	bic.w	r3, r3, #3
 80114c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80114c4:	683b      	ldr	r3, [r7, #0]
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	68fa      	ldr	r2, [r7, #12]
 80114ca:	4313      	orrs	r3, r2
 80114cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80114ce:	697b      	ldr	r3, [r7, #20]
 80114d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80114d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80114d6:	683b      	ldr	r3, [r7, #0]
 80114d8:	689b      	ldr	r3, [r3, #8]
 80114da:	021b      	lsls	r3, r3, #8
 80114dc:	697a      	ldr	r2, [r7, #20]
 80114de:	4313      	orrs	r3, r2
 80114e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	4a28      	ldr	r2, [pc, #160]	; (8011588 <TIM_OC3_SetConfig+0xfc>)
 80114e6:	4293      	cmp	r3, r2
 80114e8:	d003      	beq.n	80114f2 <TIM_OC3_SetConfig+0x66>
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	4a27      	ldr	r2, [pc, #156]	; (801158c <TIM_OC3_SetConfig+0x100>)
 80114ee:	4293      	cmp	r3, r2
 80114f0:	d10d      	bne.n	801150e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80114f2:	697b      	ldr	r3, [r7, #20]
 80114f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80114f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80114fa:	683b      	ldr	r3, [r7, #0]
 80114fc:	68db      	ldr	r3, [r3, #12]
 80114fe:	021b      	lsls	r3, r3, #8
 8011500:	697a      	ldr	r2, [r7, #20]
 8011502:	4313      	orrs	r3, r2
 8011504:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011506:	697b      	ldr	r3, [r7, #20]
 8011508:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801150c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	4a1d      	ldr	r2, [pc, #116]	; (8011588 <TIM_OC3_SetConfig+0xfc>)
 8011512:	4293      	cmp	r3, r2
 8011514:	d00f      	beq.n	8011536 <TIM_OC3_SetConfig+0xaa>
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	4a1c      	ldr	r2, [pc, #112]	; (801158c <TIM_OC3_SetConfig+0x100>)
 801151a:	4293      	cmp	r3, r2
 801151c:	d00b      	beq.n	8011536 <TIM_OC3_SetConfig+0xaa>
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	4a1b      	ldr	r2, [pc, #108]	; (8011590 <TIM_OC3_SetConfig+0x104>)
 8011522:	4293      	cmp	r3, r2
 8011524:	d007      	beq.n	8011536 <TIM_OC3_SetConfig+0xaa>
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	4a1a      	ldr	r2, [pc, #104]	; (8011594 <TIM_OC3_SetConfig+0x108>)
 801152a:	4293      	cmp	r3, r2
 801152c:	d003      	beq.n	8011536 <TIM_OC3_SetConfig+0xaa>
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	4a19      	ldr	r2, [pc, #100]	; (8011598 <TIM_OC3_SetConfig+0x10c>)
 8011532:	4293      	cmp	r3, r2
 8011534:	d113      	bne.n	801155e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011536:	693b      	ldr	r3, [r7, #16]
 8011538:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801153c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801153e:	693b      	ldr	r3, [r7, #16]
 8011540:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011544:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011546:	683b      	ldr	r3, [r7, #0]
 8011548:	695b      	ldr	r3, [r3, #20]
 801154a:	011b      	lsls	r3, r3, #4
 801154c:	693a      	ldr	r2, [r7, #16]
 801154e:	4313      	orrs	r3, r2
 8011550:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011552:	683b      	ldr	r3, [r7, #0]
 8011554:	699b      	ldr	r3, [r3, #24]
 8011556:	011b      	lsls	r3, r3, #4
 8011558:	693a      	ldr	r2, [r7, #16]
 801155a:	4313      	orrs	r3, r2
 801155c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	693a      	ldr	r2, [r7, #16]
 8011562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	68fa      	ldr	r2, [r7, #12]
 8011568:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801156a:	683b      	ldr	r3, [r7, #0]
 801156c:	685a      	ldr	r2, [r3, #4]
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	697a      	ldr	r2, [r7, #20]
 8011576:	621a      	str	r2, [r3, #32]
}
 8011578:	bf00      	nop
 801157a:	371c      	adds	r7, #28
 801157c:	46bd      	mov	sp, r7
 801157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011582:	4770      	bx	lr
 8011584:	fffeff8f 	.word	0xfffeff8f
 8011588:	40010000 	.word	0x40010000
 801158c:	40010400 	.word	0x40010400
 8011590:	40014000 	.word	0x40014000
 8011594:	40014400 	.word	0x40014400
 8011598:	40014800 	.word	0x40014800

0801159c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801159c:	b480      	push	{r7}
 801159e:	b087      	sub	sp, #28
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	6078      	str	r0, [r7, #4]
 80115a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	6a1b      	ldr	r3, [r3, #32]
 80115aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	6a1b      	ldr	r3, [r3, #32]
 80115b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	685b      	ldr	r3, [r3, #4]
 80115bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	69db      	ldr	r3, [r3, #28]
 80115c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80115c4:	68fa      	ldr	r2, [r7, #12]
 80115c6:	4b24      	ldr	r3, [pc, #144]	; (8011658 <TIM_OC4_SetConfig+0xbc>)
 80115c8:	4013      	ands	r3, r2
 80115ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80115d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80115d4:	683b      	ldr	r3, [r7, #0]
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	021b      	lsls	r3, r3, #8
 80115da:	68fa      	ldr	r2, [r7, #12]
 80115dc:	4313      	orrs	r3, r2
 80115de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80115e0:	693b      	ldr	r3, [r7, #16]
 80115e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80115e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80115e8:	683b      	ldr	r3, [r7, #0]
 80115ea:	689b      	ldr	r3, [r3, #8]
 80115ec:	031b      	lsls	r3, r3, #12
 80115ee:	693a      	ldr	r2, [r7, #16]
 80115f0:	4313      	orrs	r3, r2
 80115f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	4a19      	ldr	r2, [pc, #100]	; (801165c <TIM_OC4_SetConfig+0xc0>)
 80115f8:	4293      	cmp	r3, r2
 80115fa:	d00f      	beq.n	801161c <TIM_OC4_SetConfig+0x80>
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	4a18      	ldr	r2, [pc, #96]	; (8011660 <TIM_OC4_SetConfig+0xc4>)
 8011600:	4293      	cmp	r3, r2
 8011602:	d00b      	beq.n	801161c <TIM_OC4_SetConfig+0x80>
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	4a17      	ldr	r2, [pc, #92]	; (8011664 <TIM_OC4_SetConfig+0xc8>)
 8011608:	4293      	cmp	r3, r2
 801160a:	d007      	beq.n	801161c <TIM_OC4_SetConfig+0x80>
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	4a16      	ldr	r2, [pc, #88]	; (8011668 <TIM_OC4_SetConfig+0xcc>)
 8011610:	4293      	cmp	r3, r2
 8011612:	d003      	beq.n	801161c <TIM_OC4_SetConfig+0x80>
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	4a15      	ldr	r2, [pc, #84]	; (801166c <TIM_OC4_SetConfig+0xd0>)
 8011618:	4293      	cmp	r3, r2
 801161a:	d109      	bne.n	8011630 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801161c:	697b      	ldr	r3, [r7, #20]
 801161e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011622:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011624:	683b      	ldr	r3, [r7, #0]
 8011626:	695b      	ldr	r3, [r3, #20]
 8011628:	019b      	lsls	r3, r3, #6
 801162a:	697a      	ldr	r2, [r7, #20]
 801162c:	4313      	orrs	r3, r2
 801162e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	697a      	ldr	r2, [r7, #20]
 8011634:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	68fa      	ldr	r2, [r7, #12]
 801163a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801163c:	683b      	ldr	r3, [r7, #0]
 801163e:	685a      	ldr	r2, [r3, #4]
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	693a      	ldr	r2, [r7, #16]
 8011648:	621a      	str	r2, [r3, #32]
}
 801164a:	bf00      	nop
 801164c:	371c      	adds	r7, #28
 801164e:	46bd      	mov	sp, r7
 8011650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011654:	4770      	bx	lr
 8011656:	bf00      	nop
 8011658:	feff8fff 	.word	0xfeff8fff
 801165c:	40010000 	.word	0x40010000
 8011660:	40010400 	.word	0x40010400
 8011664:	40014000 	.word	0x40014000
 8011668:	40014400 	.word	0x40014400
 801166c:	40014800 	.word	0x40014800

08011670 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011670:	b480      	push	{r7}
 8011672:	b087      	sub	sp, #28
 8011674:	af00      	add	r7, sp, #0
 8011676:	6078      	str	r0, [r7, #4]
 8011678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	6a1b      	ldr	r3, [r3, #32]
 801167e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	6a1b      	ldr	r3, [r3, #32]
 801168a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	685b      	ldr	r3, [r3, #4]
 8011690:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011698:	68fa      	ldr	r2, [r7, #12]
 801169a:	4b21      	ldr	r3, [pc, #132]	; (8011720 <TIM_OC5_SetConfig+0xb0>)
 801169c:	4013      	ands	r3, r2
 801169e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80116a0:	683b      	ldr	r3, [r7, #0]
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	68fa      	ldr	r2, [r7, #12]
 80116a6:	4313      	orrs	r3, r2
 80116a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80116aa:	693b      	ldr	r3, [r7, #16]
 80116ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80116b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80116b2:	683b      	ldr	r3, [r7, #0]
 80116b4:	689b      	ldr	r3, [r3, #8]
 80116b6:	041b      	lsls	r3, r3, #16
 80116b8:	693a      	ldr	r2, [r7, #16]
 80116ba:	4313      	orrs	r3, r2
 80116bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	4a18      	ldr	r2, [pc, #96]	; (8011724 <TIM_OC5_SetConfig+0xb4>)
 80116c2:	4293      	cmp	r3, r2
 80116c4:	d00f      	beq.n	80116e6 <TIM_OC5_SetConfig+0x76>
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	4a17      	ldr	r2, [pc, #92]	; (8011728 <TIM_OC5_SetConfig+0xb8>)
 80116ca:	4293      	cmp	r3, r2
 80116cc:	d00b      	beq.n	80116e6 <TIM_OC5_SetConfig+0x76>
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	4a16      	ldr	r2, [pc, #88]	; (801172c <TIM_OC5_SetConfig+0xbc>)
 80116d2:	4293      	cmp	r3, r2
 80116d4:	d007      	beq.n	80116e6 <TIM_OC5_SetConfig+0x76>
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	4a15      	ldr	r2, [pc, #84]	; (8011730 <TIM_OC5_SetConfig+0xc0>)
 80116da:	4293      	cmp	r3, r2
 80116dc:	d003      	beq.n	80116e6 <TIM_OC5_SetConfig+0x76>
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	4a14      	ldr	r2, [pc, #80]	; (8011734 <TIM_OC5_SetConfig+0xc4>)
 80116e2:	4293      	cmp	r3, r2
 80116e4:	d109      	bne.n	80116fa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80116e6:	697b      	ldr	r3, [r7, #20]
 80116e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80116ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80116ee:	683b      	ldr	r3, [r7, #0]
 80116f0:	695b      	ldr	r3, [r3, #20]
 80116f2:	021b      	lsls	r3, r3, #8
 80116f4:	697a      	ldr	r2, [r7, #20]
 80116f6:	4313      	orrs	r3, r2
 80116f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	697a      	ldr	r2, [r7, #20]
 80116fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	68fa      	ldr	r2, [r7, #12]
 8011704:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011706:	683b      	ldr	r3, [r7, #0]
 8011708:	685a      	ldr	r2, [r3, #4]
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	693a      	ldr	r2, [r7, #16]
 8011712:	621a      	str	r2, [r3, #32]
}
 8011714:	bf00      	nop
 8011716:	371c      	adds	r7, #28
 8011718:	46bd      	mov	sp, r7
 801171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171e:	4770      	bx	lr
 8011720:	fffeff8f 	.word	0xfffeff8f
 8011724:	40010000 	.word	0x40010000
 8011728:	40010400 	.word	0x40010400
 801172c:	40014000 	.word	0x40014000
 8011730:	40014400 	.word	0x40014400
 8011734:	40014800 	.word	0x40014800

08011738 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011738:	b480      	push	{r7}
 801173a:	b087      	sub	sp, #28
 801173c:	af00      	add	r7, sp, #0
 801173e:	6078      	str	r0, [r7, #4]
 8011740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	6a1b      	ldr	r3, [r3, #32]
 8011746:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	6a1b      	ldr	r3, [r3, #32]
 8011752:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	685b      	ldr	r3, [r3, #4]
 8011758:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801175e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011760:	68fa      	ldr	r2, [r7, #12]
 8011762:	4b22      	ldr	r3, [pc, #136]	; (80117ec <TIM_OC6_SetConfig+0xb4>)
 8011764:	4013      	ands	r3, r2
 8011766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011768:	683b      	ldr	r3, [r7, #0]
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	021b      	lsls	r3, r3, #8
 801176e:	68fa      	ldr	r2, [r7, #12]
 8011770:	4313      	orrs	r3, r2
 8011772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011774:	693b      	ldr	r3, [r7, #16]
 8011776:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801177a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801177c:	683b      	ldr	r3, [r7, #0]
 801177e:	689b      	ldr	r3, [r3, #8]
 8011780:	051b      	lsls	r3, r3, #20
 8011782:	693a      	ldr	r2, [r7, #16]
 8011784:	4313      	orrs	r3, r2
 8011786:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	4a19      	ldr	r2, [pc, #100]	; (80117f0 <TIM_OC6_SetConfig+0xb8>)
 801178c:	4293      	cmp	r3, r2
 801178e:	d00f      	beq.n	80117b0 <TIM_OC6_SetConfig+0x78>
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	4a18      	ldr	r2, [pc, #96]	; (80117f4 <TIM_OC6_SetConfig+0xbc>)
 8011794:	4293      	cmp	r3, r2
 8011796:	d00b      	beq.n	80117b0 <TIM_OC6_SetConfig+0x78>
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	4a17      	ldr	r2, [pc, #92]	; (80117f8 <TIM_OC6_SetConfig+0xc0>)
 801179c:	4293      	cmp	r3, r2
 801179e:	d007      	beq.n	80117b0 <TIM_OC6_SetConfig+0x78>
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	4a16      	ldr	r2, [pc, #88]	; (80117fc <TIM_OC6_SetConfig+0xc4>)
 80117a4:	4293      	cmp	r3, r2
 80117a6:	d003      	beq.n	80117b0 <TIM_OC6_SetConfig+0x78>
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	4a15      	ldr	r2, [pc, #84]	; (8011800 <TIM_OC6_SetConfig+0xc8>)
 80117ac:	4293      	cmp	r3, r2
 80117ae:	d109      	bne.n	80117c4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80117b0:	697b      	ldr	r3, [r7, #20]
 80117b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80117b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80117b8:	683b      	ldr	r3, [r7, #0]
 80117ba:	695b      	ldr	r3, [r3, #20]
 80117bc:	029b      	lsls	r3, r3, #10
 80117be:	697a      	ldr	r2, [r7, #20]
 80117c0:	4313      	orrs	r3, r2
 80117c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	697a      	ldr	r2, [r7, #20]
 80117c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	68fa      	ldr	r2, [r7, #12]
 80117ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80117d0:	683b      	ldr	r3, [r7, #0]
 80117d2:	685a      	ldr	r2, [r3, #4]
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	693a      	ldr	r2, [r7, #16]
 80117dc:	621a      	str	r2, [r3, #32]
}
 80117de:	bf00      	nop
 80117e0:	371c      	adds	r7, #28
 80117e2:	46bd      	mov	sp, r7
 80117e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e8:	4770      	bx	lr
 80117ea:	bf00      	nop
 80117ec:	feff8fff 	.word	0xfeff8fff
 80117f0:	40010000 	.word	0x40010000
 80117f4:	40010400 	.word	0x40010400
 80117f8:	40014000 	.word	0x40014000
 80117fc:	40014400 	.word	0x40014400
 8011800:	40014800 	.word	0x40014800

08011804 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011804:	b480      	push	{r7}
 8011806:	b087      	sub	sp, #28
 8011808:	af00      	add	r7, sp, #0
 801180a:	60f8      	str	r0, [r7, #12]
 801180c:	60b9      	str	r1, [r7, #8]
 801180e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011810:	68bb      	ldr	r3, [r7, #8]
 8011812:	f003 031f 	and.w	r3, r3, #31
 8011816:	2201      	movs	r2, #1
 8011818:	fa02 f303 	lsl.w	r3, r2, r3
 801181c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	6a1a      	ldr	r2, [r3, #32]
 8011822:	697b      	ldr	r3, [r7, #20]
 8011824:	43db      	mvns	r3, r3
 8011826:	401a      	ands	r2, r3
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	6a1a      	ldr	r2, [r3, #32]
 8011830:	68bb      	ldr	r3, [r7, #8]
 8011832:	f003 031f 	and.w	r3, r3, #31
 8011836:	6879      	ldr	r1, [r7, #4]
 8011838:	fa01 f303 	lsl.w	r3, r1, r3
 801183c:	431a      	orrs	r2, r3
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	621a      	str	r2, [r3, #32]
}
 8011842:	bf00      	nop
 8011844:	371c      	adds	r7, #28
 8011846:	46bd      	mov	sp, r7
 8011848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184c:	4770      	bx	lr
	...

08011850 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011850:	b480      	push	{r7}
 8011852:	b085      	sub	sp, #20
 8011854:	af00      	add	r7, sp, #0
 8011856:	6078      	str	r0, [r7, #4]
 8011858:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011860:	2b01      	cmp	r3, #1
 8011862:	d101      	bne.n	8011868 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011864:	2302      	movs	r3, #2
 8011866:	e077      	b.n	8011958 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	2201      	movs	r2, #1
 801186c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	2202      	movs	r2, #2
 8011874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	685b      	ldr	r3, [r3, #4]
 801187e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	689b      	ldr	r3, [r3, #8]
 8011886:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	4a35      	ldr	r2, [pc, #212]	; (8011964 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801188e:	4293      	cmp	r3, r2
 8011890:	d004      	beq.n	801189c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	4a34      	ldr	r2, [pc, #208]	; (8011968 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011898:	4293      	cmp	r3, r2
 801189a:	d108      	bne.n	80118ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80118a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80118a4:	683b      	ldr	r3, [r7, #0]
 80118a6:	685b      	ldr	r3, [r3, #4]
 80118a8:	68fa      	ldr	r2, [r7, #12]
 80118aa:	4313      	orrs	r3, r2
 80118ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80118b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80118b6:	683b      	ldr	r3, [r7, #0]
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	68fa      	ldr	r2, [r7, #12]
 80118bc:	4313      	orrs	r3, r2
 80118be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	68fa      	ldr	r2, [r7, #12]
 80118c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	4a25      	ldr	r2, [pc, #148]	; (8011964 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80118ce:	4293      	cmp	r3, r2
 80118d0:	d02c      	beq.n	801192c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80118da:	d027      	beq.n	801192c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	4a22      	ldr	r2, [pc, #136]	; (801196c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80118e2:	4293      	cmp	r3, r2
 80118e4:	d022      	beq.n	801192c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	4a21      	ldr	r2, [pc, #132]	; (8011970 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80118ec:	4293      	cmp	r3, r2
 80118ee:	d01d      	beq.n	801192c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	4a1f      	ldr	r2, [pc, #124]	; (8011974 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80118f6:	4293      	cmp	r3, r2
 80118f8:	d018      	beq.n	801192c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	4a1a      	ldr	r2, [pc, #104]	; (8011968 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011900:	4293      	cmp	r3, r2
 8011902:	d013      	beq.n	801192c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	4a1b      	ldr	r2, [pc, #108]	; (8011978 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 801190a:	4293      	cmp	r3, r2
 801190c:	d00e      	beq.n	801192c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	4a1a      	ldr	r2, [pc, #104]	; (801197c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8011914:	4293      	cmp	r3, r2
 8011916:	d009      	beq.n	801192c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	4a18      	ldr	r2, [pc, #96]	; (8011980 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 801191e:	4293      	cmp	r3, r2
 8011920:	d004      	beq.n	801192c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	4a17      	ldr	r2, [pc, #92]	; (8011984 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8011928:	4293      	cmp	r3, r2
 801192a:	d10c      	bne.n	8011946 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801192c:	68bb      	ldr	r3, [r7, #8]
 801192e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011932:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011934:	683b      	ldr	r3, [r7, #0]
 8011936:	689b      	ldr	r3, [r3, #8]
 8011938:	68ba      	ldr	r2, [r7, #8]
 801193a:	4313      	orrs	r3, r2
 801193c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	68ba      	ldr	r2, [r7, #8]
 8011944:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	2201      	movs	r2, #1
 801194a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	2200      	movs	r2, #0
 8011952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011956:	2300      	movs	r3, #0
}
 8011958:	4618      	mov	r0, r3
 801195a:	3714      	adds	r7, #20
 801195c:	46bd      	mov	sp, r7
 801195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011962:	4770      	bx	lr
 8011964:	40010000 	.word	0x40010000
 8011968:	40010400 	.word	0x40010400
 801196c:	40000400 	.word	0x40000400
 8011970:	40000800 	.word	0x40000800
 8011974:	40000c00 	.word	0x40000c00
 8011978:	40001800 	.word	0x40001800
 801197c:	40014000 	.word	0x40014000
 8011980:	4000e000 	.word	0x4000e000
 8011984:	4000e400 	.word	0x4000e400

08011988 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011988:	b480      	push	{r7}
 801198a:	b083      	sub	sp, #12
 801198c:	af00      	add	r7, sp, #0
 801198e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011990:	bf00      	nop
 8011992:	370c      	adds	r7, #12
 8011994:	46bd      	mov	sp, r7
 8011996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801199a:	4770      	bx	lr

0801199c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801199c:	b480      	push	{r7}
 801199e:	b083      	sub	sp, #12
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80119a4:	bf00      	nop
 80119a6:	370c      	adds	r7, #12
 80119a8:	46bd      	mov	sp, r7
 80119aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ae:	4770      	bx	lr

080119b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80119b0:	b480      	push	{r7}
 80119b2:	b083      	sub	sp, #12
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80119b8:	bf00      	nop
 80119ba:	370c      	adds	r7, #12
 80119bc:	46bd      	mov	sp, r7
 80119be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c2:	4770      	bx	lr

080119c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b082      	sub	sp, #8
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d101      	bne.n	80119d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80119d2:	2301      	movs	r3, #1
 80119d4:	e042      	b.n	8011a5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d106      	bne.n	80119ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	2200      	movs	r2, #0
 80119e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80119e8:	6878      	ldr	r0, [r7, #4]
 80119ea:	f7f1 fecb 	bl	8003784 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	2224      	movs	r2, #36	; 0x24
 80119f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	681a      	ldr	r2, [r3, #0]
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	f022 0201 	bic.w	r2, r2, #1
 8011a04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011a06:	6878      	ldr	r0, [r7, #4]
 8011a08:	f000 f82c 	bl	8011a64 <UART_SetConfig>
 8011a0c:	4603      	mov	r3, r0
 8011a0e:	2b01      	cmp	r3, #1
 8011a10:	d101      	bne.n	8011a16 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8011a12:	2301      	movs	r3, #1
 8011a14:	e022      	b.n	8011a5c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d002      	beq.n	8011a24 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8011a1e:	6878      	ldr	r0, [r7, #4]
 8011a20:	f000 fe8c 	bl	801273c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	685a      	ldr	r2, [r3, #4]
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011a32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	689a      	ldr	r2, [r3, #8]
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011a42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	681a      	ldr	r2, [r3, #0]
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	f042 0201 	orr.w	r2, r2, #1
 8011a52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011a54:	6878      	ldr	r0, [r7, #4]
 8011a56:	f000 ff13 	bl	8012880 <UART_CheckIdleState>
 8011a5a:	4603      	mov	r3, r0
}
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	3708      	adds	r7, #8
 8011a60:	46bd      	mov	sp, r7
 8011a62:	bd80      	pop	{r7, pc}

08011a64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011a68:	b092      	sub	sp, #72	; 0x48
 8011a6a:	af00      	add	r7, sp, #0
 8011a6c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011a6e:	2300      	movs	r3, #0
 8011a70:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011a74:	697b      	ldr	r3, [r7, #20]
 8011a76:	689a      	ldr	r2, [r3, #8]
 8011a78:	697b      	ldr	r3, [r7, #20]
 8011a7a:	691b      	ldr	r3, [r3, #16]
 8011a7c:	431a      	orrs	r2, r3
 8011a7e:	697b      	ldr	r3, [r7, #20]
 8011a80:	695b      	ldr	r3, [r3, #20]
 8011a82:	431a      	orrs	r2, r3
 8011a84:	697b      	ldr	r3, [r7, #20]
 8011a86:	69db      	ldr	r3, [r3, #28]
 8011a88:	4313      	orrs	r3, r2
 8011a8a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011a8c:	697b      	ldr	r3, [r7, #20]
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	681a      	ldr	r2, [r3, #0]
 8011a92:	4bbe      	ldr	r3, [pc, #760]	; (8011d8c <UART_SetConfig+0x328>)
 8011a94:	4013      	ands	r3, r2
 8011a96:	697a      	ldr	r2, [r7, #20]
 8011a98:	6812      	ldr	r2, [r2, #0]
 8011a9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011a9c:	430b      	orrs	r3, r1
 8011a9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011aa0:	697b      	ldr	r3, [r7, #20]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	685b      	ldr	r3, [r3, #4]
 8011aa6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011aaa:	697b      	ldr	r3, [r7, #20]
 8011aac:	68da      	ldr	r2, [r3, #12]
 8011aae:	697b      	ldr	r3, [r7, #20]
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	430a      	orrs	r2, r1
 8011ab4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011ab6:	697b      	ldr	r3, [r7, #20]
 8011ab8:	699b      	ldr	r3, [r3, #24]
 8011aba:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011abc:	697b      	ldr	r3, [r7, #20]
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	4ab3      	ldr	r2, [pc, #716]	; (8011d90 <UART_SetConfig+0x32c>)
 8011ac2:	4293      	cmp	r3, r2
 8011ac4:	d004      	beq.n	8011ad0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011ac6:	697b      	ldr	r3, [r7, #20]
 8011ac8:	6a1b      	ldr	r3, [r3, #32]
 8011aca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011acc:	4313      	orrs	r3, r2
 8011ace:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011ad0:	697b      	ldr	r3, [r7, #20]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	689a      	ldr	r2, [r3, #8]
 8011ad6:	4baf      	ldr	r3, [pc, #700]	; (8011d94 <UART_SetConfig+0x330>)
 8011ad8:	4013      	ands	r3, r2
 8011ada:	697a      	ldr	r2, [r7, #20]
 8011adc:	6812      	ldr	r2, [r2, #0]
 8011ade:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011ae0:	430b      	orrs	r3, r1
 8011ae2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011ae4:	697b      	ldr	r3, [r7, #20]
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011aea:	f023 010f 	bic.w	r1, r3, #15
 8011aee:	697b      	ldr	r3, [r7, #20]
 8011af0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011af2:	697b      	ldr	r3, [r7, #20]
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	430a      	orrs	r2, r1
 8011af8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011afa:	697b      	ldr	r3, [r7, #20]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	4aa6      	ldr	r2, [pc, #664]	; (8011d98 <UART_SetConfig+0x334>)
 8011b00:	4293      	cmp	r3, r2
 8011b02:	d177      	bne.n	8011bf4 <UART_SetConfig+0x190>
 8011b04:	4ba5      	ldr	r3, [pc, #660]	; (8011d9c <UART_SetConfig+0x338>)
 8011b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011b08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011b0c:	2b28      	cmp	r3, #40	; 0x28
 8011b0e:	d86d      	bhi.n	8011bec <UART_SetConfig+0x188>
 8011b10:	a201      	add	r2, pc, #4	; (adr r2, 8011b18 <UART_SetConfig+0xb4>)
 8011b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b16:	bf00      	nop
 8011b18:	08011bbd 	.word	0x08011bbd
 8011b1c:	08011bed 	.word	0x08011bed
 8011b20:	08011bed 	.word	0x08011bed
 8011b24:	08011bed 	.word	0x08011bed
 8011b28:	08011bed 	.word	0x08011bed
 8011b2c:	08011bed 	.word	0x08011bed
 8011b30:	08011bed 	.word	0x08011bed
 8011b34:	08011bed 	.word	0x08011bed
 8011b38:	08011bc5 	.word	0x08011bc5
 8011b3c:	08011bed 	.word	0x08011bed
 8011b40:	08011bed 	.word	0x08011bed
 8011b44:	08011bed 	.word	0x08011bed
 8011b48:	08011bed 	.word	0x08011bed
 8011b4c:	08011bed 	.word	0x08011bed
 8011b50:	08011bed 	.word	0x08011bed
 8011b54:	08011bed 	.word	0x08011bed
 8011b58:	08011bcd 	.word	0x08011bcd
 8011b5c:	08011bed 	.word	0x08011bed
 8011b60:	08011bed 	.word	0x08011bed
 8011b64:	08011bed 	.word	0x08011bed
 8011b68:	08011bed 	.word	0x08011bed
 8011b6c:	08011bed 	.word	0x08011bed
 8011b70:	08011bed 	.word	0x08011bed
 8011b74:	08011bed 	.word	0x08011bed
 8011b78:	08011bd5 	.word	0x08011bd5
 8011b7c:	08011bed 	.word	0x08011bed
 8011b80:	08011bed 	.word	0x08011bed
 8011b84:	08011bed 	.word	0x08011bed
 8011b88:	08011bed 	.word	0x08011bed
 8011b8c:	08011bed 	.word	0x08011bed
 8011b90:	08011bed 	.word	0x08011bed
 8011b94:	08011bed 	.word	0x08011bed
 8011b98:	08011bdd 	.word	0x08011bdd
 8011b9c:	08011bed 	.word	0x08011bed
 8011ba0:	08011bed 	.word	0x08011bed
 8011ba4:	08011bed 	.word	0x08011bed
 8011ba8:	08011bed 	.word	0x08011bed
 8011bac:	08011bed 	.word	0x08011bed
 8011bb0:	08011bed 	.word	0x08011bed
 8011bb4:	08011bed 	.word	0x08011bed
 8011bb8:	08011be5 	.word	0x08011be5
 8011bbc:	2301      	movs	r3, #1
 8011bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bc2:	e326      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011bc4:	2304      	movs	r3, #4
 8011bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bca:	e322      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011bcc:	2308      	movs	r3, #8
 8011bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bd2:	e31e      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011bd4:	2310      	movs	r3, #16
 8011bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bda:	e31a      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011bdc:	2320      	movs	r3, #32
 8011bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011be2:	e316      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011be4:	2340      	movs	r3, #64	; 0x40
 8011be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bea:	e312      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011bec:	2380      	movs	r3, #128	; 0x80
 8011bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bf2:	e30e      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011bf4:	697b      	ldr	r3, [r7, #20]
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	4a69      	ldr	r2, [pc, #420]	; (8011da0 <UART_SetConfig+0x33c>)
 8011bfa:	4293      	cmp	r3, r2
 8011bfc:	d130      	bne.n	8011c60 <UART_SetConfig+0x1fc>
 8011bfe:	4b67      	ldr	r3, [pc, #412]	; (8011d9c <UART_SetConfig+0x338>)
 8011c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011c02:	f003 0307 	and.w	r3, r3, #7
 8011c06:	2b05      	cmp	r3, #5
 8011c08:	d826      	bhi.n	8011c58 <UART_SetConfig+0x1f4>
 8011c0a:	a201      	add	r2, pc, #4	; (adr r2, 8011c10 <UART_SetConfig+0x1ac>)
 8011c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c10:	08011c29 	.word	0x08011c29
 8011c14:	08011c31 	.word	0x08011c31
 8011c18:	08011c39 	.word	0x08011c39
 8011c1c:	08011c41 	.word	0x08011c41
 8011c20:	08011c49 	.word	0x08011c49
 8011c24:	08011c51 	.word	0x08011c51
 8011c28:	2300      	movs	r3, #0
 8011c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c2e:	e2f0      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011c30:	2304      	movs	r3, #4
 8011c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c36:	e2ec      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011c38:	2308      	movs	r3, #8
 8011c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c3e:	e2e8      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011c40:	2310      	movs	r3, #16
 8011c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c46:	e2e4      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011c48:	2320      	movs	r3, #32
 8011c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c4e:	e2e0      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011c50:	2340      	movs	r3, #64	; 0x40
 8011c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c56:	e2dc      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011c58:	2380      	movs	r3, #128	; 0x80
 8011c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c5e:	e2d8      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011c60:	697b      	ldr	r3, [r7, #20]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	4a4f      	ldr	r2, [pc, #316]	; (8011da4 <UART_SetConfig+0x340>)
 8011c66:	4293      	cmp	r3, r2
 8011c68:	d130      	bne.n	8011ccc <UART_SetConfig+0x268>
 8011c6a:	4b4c      	ldr	r3, [pc, #304]	; (8011d9c <UART_SetConfig+0x338>)
 8011c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011c6e:	f003 0307 	and.w	r3, r3, #7
 8011c72:	2b05      	cmp	r3, #5
 8011c74:	d826      	bhi.n	8011cc4 <UART_SetConfig+0x260>
 8011c76:	a201      	add	r2, pc, #4	; (adr r2, 8011c7c <UART_SetConfig+0x218>)
 8011c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c7c:	08011c95 	.word	0x08011c95
 8011c80:	08011c9d 	.word	0x08011c9d
 8011c84:	08011ca5 	.word	0x08011ca5
 8011c88:	08011cad 	.word	0x08011cad
 8011c8c:	08011cb5 	.word	0x08011cb5
 8011c90:	08011cbd 	.word	0x08011cbd
 8011c94:	2300      	movs	r3, #0
 8011c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c9a:	e2ba      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011c9c:	2304      	movs	r3, #4
 8011c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ca2:	e2b6      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011ca4:	2308      	movs	r3, #8
 8011ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011caa:	e2b2      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011cac:	2310      	movs	r3, #16
 8011cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cb2:	e2ae      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011cb4:	2320      	movs	r3, #32
 8011cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cba:	e2aa      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011cbc:	2340      	movs	r3, #64	; 0x40
 8011cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cc2:	e2a6      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011cc4:	2380      	movs	r3, #128	; 0x80
 8011cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cca:	e2a2      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011ccc:	697b      	ldr	r3, [r7, #20]
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	4a35      	ldr	r2, [pc, #212]	; (8011da8 <UART_SetConfig+0x344>)
 8011cd2:	4293      	cmp	r3, r2
 8011cd4:	d130      	bne.n	8011d38 <UART_SetConfig+0x2d4>
 8011cd6:	4b31      	ldr	r3, [pc, #196]	; (8011d9c <UART_SetConfig+0x338>)
 8011cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011cda:	f003 0307 	and.w	r3, r3, #7
 8011cde:	2b05      	cmp	r3, #5
 8011ce0:	d826      	bhi.n	8011d30 <UART_SetConfig+0x2cc>
 8011ce2:	a201      	add	r2, pc, #4	; (adr r2, 8011ce8 <UART_SetConfig+0x284>)
 8011ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ce8:	08011d01 	.word	0x08011d01
 8011cec:	08011d09 	.word	0x08011d09
 8011cf0:	08011d11 	.word	0x08011d11
 8011cf4:	08011d19 	.word	0x08011d19
 8011cf8:	08011d21 	.word	0x08011d21
 8011cfc:	08011d29 	.word	0x08011d29
 8011d00:	2300      	movs	r3, #0
 8011d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d06:	e284      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011d08:	2304      	movs	r3, #4
 8011d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d0e:	e280      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011d10:	2308      	movs	r3, #8
 8011d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d16:	e27c      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011d18:	2310      	movs	r3, #16
 8011d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d1e:	e278      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011d20:	2320      	movs	r3, #32
 8011d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d26:	e274      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011d28:	2340      	movs	r3, #64	; 0x40
 8011d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d2e:	e270      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011d30:	2380      	movs	r3, #128	; 0x80
 8011d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d36:	e26c      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011d38:	697b      	ldr	r3, [r7, #20]
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	4a1b      	ldr	r2, [pc, #108]	; (8011dac <UART_SetConfig+0x348>)
 8011d3e:	4293      	cmp	r3, r2
 8011d40:	d142      	bne.n	8011dc8 <UART_SetConfig+0x364>
 8011d42:	4b16      	ldr	r3, [pc, #88]	; (8011d9c <UART_SetConfig+0x338>)
 8011d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d46:	f003 0307 	and.w	r3, r3, #7
 8011d4a:	2b05      	cmp	r3, #5
 8011d4c:	d838      	bhi.n	8011dc0 <UART_SetConfig+0x35c>
 8011d4e:	a201      	add	r2, pc, #4	; (adr r2, 8011d54 <UART_SetConfig+0x2f0>)
 8011d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d54:	08011d6d 	.word	0x08011d6d
 8011d58:	08011d75 	.word	0x08011d75
 8011d5c:	08011d7d 	.word	0x08011d7d
 8011d60:	08011d85 	.word	0x08011d85
 8011d64:	08011db1 	.word	0x08011db1
 8011d68:	08011db9 	.word	0x08011db9
 8011d6c:	2300      	movs	r3, #0
 8011d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d72:	e24e      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011d74:	2304      	movs	r3, #4
 8011d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d7a:	e24a      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011d7c:	2308      	movs	r3, #8
 8011d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d82:	e246      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011d84:	2310      	movs	r3, #16
 8011d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d8a:	e242      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011d8c:	cfff69f3 	.word	0xcfff69f3
 8011d90:	58000c00 	.word	0x58000c00
 8011d94:	11fff4ff 	.word	0x11fff4ff
 8011d98:	40011000 	.word	0x40011000
 8011d9c:	58024400 	.word	0x58024400
 8011da0:	40004400 	.word	0x40004400
 8011da4:	40004800 	.word	0x40004800
 8011da8:	40004c00 	.word	0x40004c00
 8011dac:	40005000 	.word	0x40005000
 8011db0:	2320      	movs	r3, #32
 8011db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011db6:	e22c      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011db8:	2340      	movs	r3, #64	; 0x40
 8011dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011dbe:	e228      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011dc0:	2380      	movs	r3, #128	; 0x80
 8011dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011dc6:	e224      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011dc8:	697b      	ldr	r3, [r7, #20]
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	4ab1      	ldr	r2, [pc, #708]	; (8012094 <UART_SetConfig+0x630>)
 8011dce:	4293      	cmp	r3, r2
 8011dd0:	d176      	bne.n	8011ec0 <UART_SetConfig+0x45c>
 8011dd2:	4bb1      	ldr	r3, [pc, #708]	; (8012098 <UART_SetConfig+0x634>)
 8011dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011dd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011dda:	2b28      	cmp	r3, #40	; 0x28
 8011ddc:	d86c      	bhi.n	8011eb8 <UART_SetConfig+0x454>
 8011dde:	a201      	add	r2, pc, #4	; (adr r2, 8011de4 <UART_SetConfig+0x380>)
 8011de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011de4:	08011e89 	.word	0x08011e89
 8011de8:	08011eb9 	.word	0x08011eb9
 8011dec:	08011eb9 	.word	0x08011eb9
 8011df0:	08011eb9 	.word	0x08011eb9
 8011df4:	08011eb9 	.word	0x08011eb9
 8011df8:	08011eb9 	.word	0x08011eb9
 8011dfc:	08011eb9 	.word	0x08011eb9
 8011e00:	08011eb9 	.word	0x08011eb9
 8011e04:	08011e91 	.word	0x08011e91
 8011e08:	08011eb9 	.word	0x08011eb9
 8011e0c:	08011eb9 	.word	0x08011eb9
 8011e10:	08011eb9 	.word	0x08011eb9
 8011e14:	08011eb9 	.word	0x08011eb9
 8011e18:	08011eb9 	.word	0x08011eb9
 8011e1c:	08011eb9 	.word	0x08011eb9
 8011e20:	08011eb9 	.word	0x08011eb9
 8011e24:	08011e99 	.word	0x08011e99
 8011e28:	08011eb9 	.word	0x08011eb9
 8011e2c:	08011eb9 	.word	0x08011eb9
 8011e30:	08011eb9 	.word	0x08011eb9
 8011e34:	08011eb9 	.word	0x08011eb9
 8011e38:	08011eb9 	.word	0x08011eb9
 8011e3c:	08011eb9 	.word	0x08011eb9
 8011e40:	08011eb9 	.word	0x08011eb9
 8011e44:	08011ea1 	.word	0x08011ea1
 8011e48:	08011eb9 	.word	0x08011eb9
 8011e4c:	08011eb9 	.word	0x08011eb9
 8011e50:	08011eb9 	.word	0x08011eb9
 8011e54:	08011eb9 	.word	0x08011eb9
 8011e58:	08011eb9 	.word	0x08011eb9
 8011e5c:	08011eb9 	.word	0x08011eb9
 8011e60:	08011eb9 	.word	0x08011eb9
 8011e64:	08011ea9 	.word	0x08011ea9
 8011e68:	08011eb9 	.word	0x08011eb9
 8011e6c:	08011eb9 	.word	0x08011eb9
 8011e70:	08011eb9 	.word	0x08011eb9
 8011e74:	08011eb9 	.word	0x08011eb9
 8011e78:	08011eb9 	.word	0x08011eb9
 8011e7c:	08011eb9 	.word	0x08011eb9
 8011e80:	08011eb9 	.word	0x08011eb9
 8011e84:	08011eb1 	.word	0x08011eb1
 8011e88:	2301      	movs	r3, #1
 8011e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e8e:	e1c0      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011e90:	2304      	movs	r3, #4
 8011e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e96:	e1bc      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011e98:	2308      	movs	r3, #8
 8011e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e9e:	e1b8      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011ea0:	2310      	movs	r3, #16
 8011ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ea6:	e1b4      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011ea8:	2320      	movs	r3, #32
 8011eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011eae:	e1b0      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011eb0:	2340      	movs	r3, #64	; 0x40
 8011eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011eb6:	e1ac      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011eb8:	2380      	movs	r3, #128	; 0x80
 8011eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ebe:	e1a8      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011ec0:	697b      	ldr	r3, [r7, #20]
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	4a75      	ldr	r2, [pc, #468]	; (801209c <UART_SetConfig+0x638>)
 8011ec6:	4293      	cmp	r3, r2
 8011ec8:	d130      	bne.n	8011f2c <UART_SetConfig+0x4c8>
 8011eca:	4b73      	ldr	r3, [pc, #460]	; (8012098 <UART_SetConfig+0x634>)
 8011ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ece:	f003 0307 	and.w	r3, r3, #7
 8011ed2:	2b05      	cmp	r3, #5
 8011ed4:	d826      	bhi.n	8011f24 <UART_SetConfig+0x4c0>
 8011ed6:	a201      	add	r2, pc, #4	; (adr r2, 8011edc <UART_SetConfig+0x478>)
 8011ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011edc:	08011ef5 	.word	0x08011ef5
 8011ee0:	08011efd 	.word	0x08011efd
 8011ee4:	08011f05 	.word	0x08011f05
 8011ee8:	08011f0d 	.word	0x08011f0d
 8011eec:	08011f15 	.word	0x08011f15
 8011ef0:	08011f1d 	.word	0x08011f1d
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011efa:	e18a      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011efc:	2304      	movs	r3, #4
 8011efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f02:	e186      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011f04:	2308      	movs	r3, #8
 8011f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f0a:	e182      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011f0c:	2310      	movs	r3, #16
 8011f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f12:	e17e      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011f14:	2320      	movs	r3, #32
 8011f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f1a:	e17a      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011f1c:	2340      	movs	r3, #64	; 0x40
 8011f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f22:	e176      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011f24:	2380      	movs	r3, #128	; 0x80
 8011f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f2a:	e172      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011f2c:	697b      	ldr	r3, [r7, #20]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	4a5b      	ldr	r2, [pc, #364]	; (80120a0 <UART_SetConfig+0x63c>)
 8011f32:	4293      	cmp	r3, r2
 8011f34:	d130      	bne.n	8011f98 <UART_SetConfig+0x534>
 8011f36:	4b58      	ldr	r3, [pc, #352]	; (8012098 <UART_SetConfig+0x634>)
 8011f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011f3a:	f003 0307 	and.w	r3, r3, #7
 8011f3e:	2b05      	cmp	r3, #5
 8011f40:	d826      	bhi.n	8011f90 <UART_SetConfig+0x52c>
 8011f42:	a201      	add	r2, pc, #4	; (adr r2, 8011f48 <UART_SetConfig+0x4e4>)
 8011f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f48:	08011f61 	.word	0x08011f61
 8011f4c:	08011f69 	.word	0x08011f69
 8011f50:	08011f71 	.word	0x08011f71
 8011f54:	08011f79 	.word	0x08011f79
 8011f58:	08011f81 	.word	0x08011f81
 8011f5c:	08011f89 	.word	0x08011f89
 8011f60:	2300      	movs	r3, #0
 8011f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f66:	e154      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011f68:	2304      	movs	r3, #4
 8011f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f6e:	e150      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011f70:	2308      	movs	r3, #8
 8011f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f76:	e14c      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011f78:	2310      	movs	r3, #16
 8011f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f7e:	e148      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011f80:	2320      	movs	r3, #32
 8011f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f86:	e144      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011f88:	2340      	movs	r3, #64	; 0x40
 8011f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f8e:	e140      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011f90:	2380      	movs	r3, #128	; 0x80
 8011f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f96:	e13c      	b.n	8012212 <UART_SetConfig+0x7ae>
 8011f98:	697b      	ldr	r3, [r7, #20]
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	4a41      	ldr	r2, [pc, #260]	; (80120a4 <UART_SetConfig+0x640>)
 8011f9e:	4293      	cmp	r3, r2
 8011fa0:	f040 8082 	bne.w	80120a8 <UART_SetConfig+0x644>
 8011fa4:	4b3c      	ldr	r3, [pc, #240]	; (8012098 <UART_SetConfig+0x634>)
 8011fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011fa8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011fac:	2b28      	cmp	r3, #40	; 0x28
 8011fae:	d86d      	bhi.n	801208c <UART_SetConfig+0x628>
 8011fb0:	a201      	add	r2, pc, #4	; (adr r2, 8011fb8 <UART_SetConfig+0x554>)
 8011fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fb6:	bf00      	nop
 8011fb8:	0801205d 	.word	0x0801205d
 8011fbc:	0801208d 	.word	0x0801208d
 8011fc0:	0801208d 	.word	0x0801208d
 8011fc4:	0801208d 	.word	0x0801208d
 8011fc8:	0801208d 	.word	0x0801208d
 8011fcc:	0801208d 	.word	0x0801208d
 8011fd0:	0801208d 	.word	0x0801208d
 8011fd4:	0801208d 	.word	0x0801208d
 8011fd8:	08012065 	.word	0x08012065
 8011fdc:	0801208d 	.word	0x0801208d
 8011fe0:	0801208d 	.word	0x0801208d
 8011fe4:	0801208d 	.word	0x0801208d
 8011fe8:	0801208d 	.word	0x0801208d
 8011fec:	0801208d 	.word	0x0801208d
 8011ff0:	0801208d 	.word	0x0801208d
 8011ff4:	0801208d 	.word	0x0801208d
 8011ff8:	0801206d 	.word	0x0801206d
 8011ffc:	0801208d 	.word	0x0801208d
 8012000:	0801208d 	.word	0x0801208d
 8012004:	0801208d 	.word	0x0801208d
 8012008:	0801208d 	.word	0x0801208d
 801200c:	0801208d 	.word	0x0801208d
 8012010:	0801208d 	.word	0x0801208d
 8012014:	0801208d 	.word	0x0801208d
 8012018:	08012075 	.word	0x08012075
 801201c:	0801208d 	.word	0x0801208d
 8012020:	0801208d 	.word	0x0801208d
 8012024:	0801208d 	.word	0x0801208d
 8012028:	0801208d 	.word	0x0801208d
 801202c:	0801208d 	.word	0x0801208d
 8012030:	0801208d 	.word	0x0801208d
 8012034:	0801208d 	.word	0x0801208d
 8012038:	0801207d 	.word	0x0801207d
 801203c:	0801208d 	.word	0x0801208d
 8012040:	0801208d 	.word	0x0801208d
 8012044:	0801208d 	.word	0x0801208d
 8012048:	0801208d 	.word	0x0801208d
 801204c:	0801208d 	.word	0x0801208d
 8012050:	0801208d 	.word	0x0801208d
 8012054:	0801208d 	.word	0x0801208d
 8012058:	08012085 	.word	0x08012085
 801205c:	2301      	movs	r3, #1
 801205e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012062:	e0d6      	b.n	8012212 <UART_SetConfig+0x7ae>
 8012064:	2304      	movs	r3, #4
 8012066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801206a:	e0d2      	b.n	8012212 <UART_SetConfig+0x7ae>
 801206c:	2308      	movs	r3, #8
 801206e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012072:	e0ce      	b.n	8012212 <UART_SetConfig+0x7ae>
 8012074:	2310      	movs	r3, #16
 8012076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801207a:	e0ca      	b.n	8012212 <UART_SetConfig+0x7ae>
 801207c:	2320      	movs	r3, #32
 801207e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012082:	e0c6      	b.n	8012212 <UART_SetConfig+0x7ae>
 8012084:	2340      	movs	r3, #64	; 0x40
 8012086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801208a:	e0c2      	b.n	8012212 <UART_SetConfig+0x7ae>
 801208c:	2380      	movs	r3, #128	; 0x80
 801208e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012092:	e0be      	b.n	8012212 <UART_SetConfig+0x7ae>
 8012094:	40011400 	.word	0x40011400
 8012098:	58024400 	.word	0x58024400
 801209c:	40007800 	.word	0x40007800
 80120a0:	40007c00 	.word	0x40007c00
 80120a4:	40011800 	.word	0x40011800
 80120a8:	697b      	ldr	r3, [r7, #20]
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	4aad      	ldr	r2, [pc, #692]	; (8012364 <UART_SetConfig+0x900>)
 80120ae:	4293      	cmp	r3, r2
 80120b0:	d176      	bne.n	80121a0 <UART_SetConfig+0x73c>
 80120b2:	4bad      	ldr	r3, [pc, #692]	; (8012368 <UART_SetConfig+0x904>)
 80120b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80120b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80120ba:	2b28      	cmp	r3, #40	; 0x28
 80120bc:	d86c      	bhi.n	8012198 <UART_SetConfig+0x734>
 80120be:	a201      	add	r2, pc, #4	; (adr r2, 80120c4 <UART_SetConfig+0x660>)
 80120c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120c4:	08012169 	.word	0x08012169
 80120c8:	08012199 	.word	0x08012199
 80120cc:	08012199 	.word	0x08012199
 80120d0:	08012199 	.word	0x08012199
 80120d4:	08012199 	.word	0x08012199
 80120d8:	08012199 	.word	0x08012199
 80120dc:	08012199 	.word	0x08012199
 80120e0:	08012199 	.word	0x08012199
 80120e4:	08012171 	.word	0x08012171
 80120e8:	08012199 	.word	0x08012199
 80120ec:	08012199 	.word	0x08012199
 80120f0:	08012199 	.word	0x08012199
 80120f4:	08012199 	.word	0x08012199
 80120f8:	08012199 	.word	0x08012199
 80120fc:	08012199 	.word	0x08012199
 8012100:	08012199 	.word	0x08012199
 8012104:	08012179 	.word	0x08012179
 8012108:	08012199 	.word	0x08012199
 801210c:	08012199 	.word	0x08012199
 8012110:	08012199 	.word	0x08012199
 8012114:	08012199 	.word	0x08012199
 8012118:	08012199 	.word	0x08012199
 801211c:	08012199 	.word	0x08012199
 8012120:	08012199 	.word	0x08012199
 8012124:	08012181 	.word	0x08012181
 8012128:	08012199 	.word	0x08012199
 801212c:	08012199 	.word	0x08012199
 8012130:	08012199 	.word	0x08012199
 8012134:	08012199 	.word	0x08012199
 8012138:	08012199 	.word	0x08012199
 801213c:	08012199 	.word	0x08012199
 8012140:	08012199 	.word	0x08012199
 8012144:	08012189 	.word	0x08012189
 8012148:	08012199 	.word	0x08012199
 801214c:	08012199 	.word	0x08012199
 8012150:	08012199 	.word	0x08012199
 8012154:	08012199 	.word	0x08012199
 8012158:	08012199 	.word	0x08012199
 801215c:	08012199 	.word	0x08012199
 8012160:	08012199 	.word	0x08012199
 8012164:	08012191 	.word	0x08012191
 8012168:	2301      	movs	r3, #1
 801216a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801216e:	e050      	b.n	8012212 <UART_SetConfig+0x7ae>
 8012170:	2304      	movs	r3, #4
 8012172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012176:	e04c      	b.n	8012212 <UART_SetConfig+0x7ae>
 8012178:	2308      	movs	r3, #8
 801217a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801217e:	e048      	b.n	8012212 <UART_SetConfig+0x7ae>
 8012180:	2310      	movs	r3, #16
 8012182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012186:	e044      	b.n	8012212 <UART_SetConfig+0x7ae>
 8012188:	2320      	movs	r3, #32
 801218a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801218e:	e040      	b.n	8012212 <UART_SetConfig+0x7ae>
 8012190:	2340      	movs	r3, #64	; 0x40
 8012192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012196:	e03c      	b.n	8012212 <UART_SetConfig+0x7ae>
 8012198:	2380      	movs	r3, #128	; 0x80
 801219a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801219e:	e038      	b.n	8012212 <UART_SetConfig+0x7ae>
 80121a0:	697b      	ldr	r3, [r7, #20]
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	4a71      	ldr	r2, [pc, #452]	; (801236c <UART_SetConfig+0x908>)
 80121a6:	4293      	cmp	r3, r2
 80121a8:	d130      	bne.n	801220c <UART_SetConfig+0x7a8>
 80121aa:	4b6f      	ldr	r3, [pc, #444]	; (8012368 <UART_SetConfig+0x904>)
 80121ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80121ae:	f003 0307 	and.w	r3, r3, #7
 80121b2:	2b05      	cmp	r3, #5
 80121b4:	d826      	bhi.n	8012204 <UART_SetConfig+0x7a0>
 80121b6:	a201      	add	r2, pc, #4	; (adr r2, 80121bc <UART_SetConfig+0x758>)
 80121b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121bc:	080121d5 	.word	0x080121d5
 80121c0:	080121dd 	.word	0x080121dd
 80121c4:	080121e5 	.word	0x080121e5
 80121c8:	080121ed 	.word	0x080121ed
 80121cc:	080121f5 	.word	0x080121f5
 80121d0:	080121fd 	.word	0x080121fd
 80121d4:	2302      	movs	r3, #2
 80121d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121da:	e01a      	b.n	8012212 <UART_SetConfig+0x7ae>
 80121dc:	2304      	movs	r3, #4
 80121de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121e2:	e016      	b.n	8012212 <UART_SetConfig+0x7ae>
 80121e4:	2308      	movs	r3, #8
 80121e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121ea:	e012      	b.n	8012212 <UART_SetConfig+0x7ae>
 80121ec:	2310      	movs	r3, #16
 80121ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121f2:	e00e      	b.n	8012212 <UART_SetConfig+0x7ae>
 80121f4:	2320      	movs	r3, #32
 80121f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121fa:	e00a      	b.n	8012212 <UART_SetConfig+0x7ae>
 80121fc:	2340      	movs	r3, #64	; 0x40
 80121fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012202:	e006      	b.n	8012212 <UART_SetConfig+0x7ae>
 8012204:	2380      	movs	r3, #128	; 0x80
 8012206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801220a:	e002      	b.n	8012212 <UART_SetConfig+0x7ae>
 801220c:	2380      	movs	r3, #128	; 0x80
 801220e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8012212:	697b      	ldr	r3, [r7, #20]
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	4a55      	ldr	r2, [pc, #340]	; (801236c <UART_SetConfig+0x908>)
 8012218:	4293      	cmp	r3, r2
 801221a:	f040 80f8 	bne.w	801240e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801221e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012222:	2b20      	cmp	r3, #32
 8012224:	dc46      	bgt.n	80122b4 <UART_SetConfig+0x850>
 8012226:	2b02      	cmp	r3, #2
 8012228:	db75      	blt.n	8012316 <UART_SetConfig+0x8b2>
 801222a:	3b02      	subs	r3, #2
 801222c:	2b1e      	cmp	r3, #30
 801222e:	d872      	bhi.n	8012316 <UART_SetConfig+0x8b2>
 8012230:	a201      	add	r2, pc, #4	; (adr r2, 8012238 <UART_SetConfig+0x7d4>)
 8012232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012236:	bf00      	nop
 8012238:	080122bb 	.word	0x080122bb
 801223c:	08012317 	.word	0x08012317
 8012240:	080122c3 	.word	0x080122c3
 8012244:	08012317 	.word	0x08012317
 8012248:	08012317 	.word	0x08012317
 801224c:	08012317 	.word	0x08012317
 8012250:	080122d3 	.word	0x080122d3
 8012254:	08012317 	.word	0x08012317
 8012258:	08012317 	.word	0x08012317
 801225c:	08012317 	.word	0x08012317
 8012260:	08012317 	.word	0x08012317
 8012264:	08012317 	.word	0x08012317
 8012268:	08012317 	.word	0x08012317
 801226c:	08012317 	.word	0x08012317
 8012270:	080122e3 	.word	0x080122e3
 8012274:	08012317 	.word	0x08012317
 8012278:	08012317 	.word	0x08012317
 801227c:	08012317 	.word	0x08012317
 8012280:	08012317 	.word	0x08012317
 8012284:	08012317 	.word	0x08012317
 8012288:	08012317 	.word	0x08012317
 801228c:	08012317 	.word	0x08012317
 8012290:	08012317 	.word	0x08012317
 8012294:	08012317 	.word	0x08012317
 8012298:	08012317 	.word	0x08012317
 801229c:	08012317 	.word	0x08012317
 80122a0:	08012317 	.word	0x08012317
 80122a4:	08012317 	.word	0x08012317
 80122a8:	08012317 	.word	0x08012317
 80122ac:	08012317 	.word	0x08012317
 80122b0:	08012309 	.word	0x08012309
 80122b4:	2b40      	cmp	r3, #64	; 0x40
 80122b6:	d02a      	beq.n	801230e <UART_SetConfig+0x8aa>
 80122b8:	e02d      	b.n	8012316 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80122ba:	f7fa febd 	bl	800d038 <HAL_RCCEx_GetD3PCLK1Freq>
 80122be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80122c0:	e02f      	b.n	8012322 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80122c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80122c6:	4618      	mov	r0, r3
 80122c8:	f7fa fecc 	bl	800d064 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80122cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80122d0:	e027      	b.n	8012322 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80122d2:	f107 0318 	add.w	r3, r7, #24
 80122d6:	4618      	mov	r0, r3
 80122d8:	f7fb f818 	bl	800d30c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80122dc:	69fb      	ldr	r3, [r7, #28]
 80122de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80122e0:	e01f      	b.n	8012322 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80122e2:	4b21      	ldr	r3, [pc, #132]	; (8012368 <UART_SetConfig+0x904>)
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	f003 0320 	and.w	r3, r3, #32
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d009      	beq.n	8012302 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80122ee:	4b1e      	ldr	r3, [pc, #120]	; (8012368 <UART_SetConfig+0x904>)
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	08db      	lsrs	r3, r3, #3
 80122f4:	f003 0303 	and.w	r3, r3, #3
 80122f8:	4a1d      	ldr	r2, [pc, #116]	; (8012370 <UART_SetConfig+0x90c>)
 80122fa:	fa22 f303 	lsr.w	r3, r2, r3
 80122fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012300:	e00f      	b.n	8012322 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8012302:	4b1b      	ldr	r3, [pc, #108]	; (8012370 <UART_SetConfig+0x90c>)
 8012304:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012306:	e00c      	b.n	8012322 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012308:	4b1a      	ldr	r3, [pc, #104]	; (8012374 <UART_SetConfig+0x910>)
 801230a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801230c:	e009      	b.n	8012322 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801230e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012312:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012314:	e005      	b.n	8012322 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8012316:	2300      	movs	r3, #0
 8012318:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801231a:	2301      	movs	r3, #1
 801231c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8012320:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8012322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012324:	2b00      	cmp	r3, #0
 8012326:	f000 81ee 	beq.w	8012706 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801232a:	697b      	ldr	r3, [r7, #20]
 801232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801232e:	4a12      	ldr	r2, [pc, #72]	; (8012378 <UART_SetConfig+0x914>)
 8012330:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012334:	461a      	mov	r2, r3
 8012336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012338:	fbb3 f3f2 	udiv	r3, r3, r2
 801233c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801233e:	697b      	ldr	r3, [r7, #20]
 8012340:	685a      	ldr	r2, [r3, #4]
 8012342:	4613      	mov	r3, r2
 8012344:	005b      	lsls	r3, r3, #1
 8012346:	4413      	add	r3, r2
 8012348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801234a:	429a      	cmp	r2, r3
 801234c:	d305      	bcc.n	801235a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801234e:	697b      	ldr	r3, [r7, #20]
 8012350:	685b      	ldr	r3, [r3, #4]
 8012352:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012356:	429a      	cmp	r2, r3
 8012358:	d910      	bls.n	801237c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 801235a:	2301      	movs	r3, #1
 801235c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8012360:	e1d1      	b.n	8012706 <UART_SetConfig+0xca2>
 8012362:	bf00      	nop
 8012364:	40011c00 	.word	0x40011c00
 8012368:	58024400 	.word	0x58024400
 801236c:	58000c00 	.word	0x58000c00
 8012370:	03d09000 	.word	0x03d09000
 8012374:	003d0900 	.word	0x003d0900
 8012378:	0801c3a4 	.word	0x0801c3a4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801237c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801237e:	2200      	movs	r2, #0
 8012380:	60bb      	str	r3, [r7, #8]
 8012382:	60fa      	str	r2, [r7, #12]
 8012384:	697b      	ldr	r3, [r7, #20]
 8012386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012388:	4ac0      	ldr	r2, [pc, #768]	; (801268c <UART_SetConfig+0xc28>)
 801238a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801238e:	b29b      	uxth	r3, r3
 8012390:	2200      	movs	r2, #0
 8012392:	603b      	str	r3, [r7, #0]
 8012394:	607a      	str	r2, [r7, #4]
 8012396:	e9d7 2300 	ldrd	r2, r3, [r7]
 801239a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801239e:	f7ee f81f 	bl	80003e0 <__aeabi_uldivmod>
 80123a2:	4602      	mov	r2, r0
 80123a4:	460b      	mov	r3, r1
 80123a6:	4610      	mov	r0, r2
 80123a8:	4619      	mov	r1, r3
 80123aa:	f04f 0200 	mov.w	r2, #0
 80123ae:	f04f 0300 	mov.w	r3, #0
 80123b2:	020b      	lsls	r3, r1, #8
 80123b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80123b8:	0202      	lsls	r2, r0, #8
 80123ba:	6979      	ldr	r1, [r7, #20]
 80123bc:	6849      	ldr	r1, [r1, #4]
 80123be:	0849      	lsrs	r1, r1, #1
 80123c0:	2000      	movs	r0, #0
 80123c2:	460c      	mov	r4, r1
 80123c4:	4605      	mov	r5, r0
 80123c6:	eb12 0804 	adds.w	r8, r2, r4
 80123ca:	eb43 0905 	adc.w	r9, r3, r5
 80123ce:	697b      	ldr	r3, [r7, #20]
 80123d0:	685b      	ldr	r3, [r3, #4]
 80123d2:	2200      	movs	r2, #0
 80123d4:	469a      	mov	sl, r3
 80123d6:	4693      	mov	fp, r2
 80123d8:	4652      	mov	r2, sl
 80123da:	465b      	mov	r3, fp
 80123dc:	4640      	mov	r0, r8
 80123de:	4649      	mov	r1, r9
 80123e0:	f7ed fffe 	bl	80003e0 <__aeabi_uldivmod>
 80123e4:	4602      	mov	r2, r0
 80123e6:	460b      	mov	r3, r1
 80123e8:	4613      	mov	r3, r2
 80123ea:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80123ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80123f2:	d308      	bcc.n	8012406 <UART_SetConfig+0x9a2>
 80123f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80123fa:	d204      	bcs.n	8012406 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80123fc:	697b      	ldr	r3, [r7, #20]
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012402:	60da      	str	r2, [r3, #12]
 8012404:	e17f      	b.n	8012706 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8012406:	2301      	movs	r3, #1
 8012408:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801240c:	e17b      	b.n	8012706 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801240e:	697b      	ldr	r3, [r7, #20]
 8012410:	69db      	ldr	r3, [r3, #28]
 8012412:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012416:	f040 80bd 	bne.w	8012594 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 801241a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801241e:	2b20      	cmp	r3, #32
 8012420:	dc48      	bgt.n	80124b4 <UART_SetConfig+0xa50>
 8012422:	2b00      	cmp	r3, #0
 8012424:	db7b      	blt.n	801251e <UART_SetConfig+0xaba>
 8012426:	2b20      	cmp	r3, #32
 8012428:	d879      	bhi.n	801251e <UART_SetConfig+0xaba>
 801242a:	a201      	add	r2, pc, #4	; (adr r2, 8012430 <UART_SetConfig+0x9cc>)
 801242c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012430:	080124bb 	.word	0x080124bb
 8012434:	080124c3 	.word	0x080124c3
 8012438:	0801251f 	.word	0x0801251f
 801243c:	0801251f 	.word	0x0801251f
 8012440:	080124cb 	.word	0x080124cb
 8012444:	0801251f 	.word	0x0801251f
 8012448:	0801251f 	.word	0x0801251f
 801244c:	0801251f 	.word	0x0801251f
 8012450:	080124db 	.word	0x080124db
 8012454:	0801251f 	.word	0x0801251f
 8012458:	0801251f 	.word	0x0801251f
 801245c:	0801251f 	.word	0x0801251f
 8012460:	0801251f 	.word	0x0801251f
 8012464:	0801251f 	.word	0x0801251f
 8012468:	0801251f 	.word	0x0801251f
 801246c:	0801251f 	.word	0x0801251f
 8012470:	080124eb 	.word	0x080124eb
 8012474:	0801251f 	.word	0x0801251f
 8012478:	0801251f 	.word	0x0801251f
 801247c:	0801251f 	.word	0x0801251f
 8012480:	0801251f 	.word	0x0801251f
 8012484:	0801251f 	.word	0x0801251f
 8012488:	0801251f 	.word	0x0801251f
 801248c:	0801251f 	.word	0x0801251f
 8012490:	0801251f 	.word	0x0801251f
 8012494:	0801251f 	.word	0x0801251f
 8012498:	0801251f 	.word	0x0801251f
 801249c:	0801251f 	.word	0x0801251f
 80124a0:	0801251f 	.word	0x0801251f
 80124a4:	0801251f 	.word	0x0801251f
 80124a8:	0801251f 	.word	0x0801251f
 80124ac:	0801251f 	.word	0x0801251f
 80124b0:	08012511 	.word	0x08012511
 80124b4:	2b40      	cmp	r3, #64	; 0x40
 80124b6:	d02e      	beq.n	8012516 <UART_SetConfig+0xab2>
 80124b8:	e031      	b.n	801251e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80124ba:	f7f8 ff1f 	bl	800b2fc <HAL_RCC_GetPCLK1Freq>
 80124be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80124c0:	e033      	b.n	801252a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80124c2:	f7f8 ff31 	bl	800b328 <HAL_RCC_GetPCLK2Freq>
 80124c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80124c8:	e02f      	b.n	801252a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80124ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80124ce:	4618      	mov	r0, r3
 80124d0:	f7fa fdc8 	bl	800d064 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80124d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80124d8:	e027      	b.n	801252a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80124da:	f107 0318 	add.w	r3, r7, #24
 80124de:	4618      	mov	r0, r3
 80124e0:	f7fa ff14 	bl	800d30c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80124e4:	69fb      	ldr	r3, [r7, #28]
 80124e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80124e8:	e01f      	b.n	801252a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80124ea:	4b69      	ldr	r3, [pc, #420]	; (8012690 <UART_SetConfig+0xc2c>)
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	f003 0320 	and.w	r3, r3, #32
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d009      	beq.n	801250a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80124f6:	4b66      	ldr	r3, [pc, #408]	; (8012690 <UART_SetConfig+0xc2c>)
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	08db      	lsrs	r3, r3, #3
 80124fc:	f003 0303 	and.w	r3, r3, #3
 8012500:	4a64      	ldr	r2, [pc, #400]	; (8012694 <UART_SetConfig+0xc30>)
 8012502:	fa22 f303 	lsr.w	r3, r2, r3
 8012506:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012508:	e00f      	b.n	801252a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 801250a:	4b62      	ldr	r3, [pc, #392]	; (8012694 <UART_SetConfig+0xc30>)
 801250c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801250e:	e00c      	b.n	801252a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012510:	4b61      	ldr	r3, [pc, #388]	; (8012698 <UART_SetConfig+0xc34>)
 8012512:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012514:	e009      	b.n	801252a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801251a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801251c:	e005      	b.n	801252a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 801251e:	2300      	movs	r3, #0
 8012520:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8012522:	2301      	movs	r3, #1
 8012524:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8012528:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801252a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801252c:	2b00      	cmp	r3, #0
 801252e:	f000 80ea 	beq.w	8012706 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012532:	697b      	ldr	r3, [r7, #20]
 8012534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012536:	4a55      	ldr	r2, [pc, #340]	; (801268c <UART_SetConfig+0xc28>)
 8012538:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801253c:	461a      	mov	r2, r3
 801253e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012540:	fbb3 f3f2 	udiv	r3, r3, r2
 8012544:	005a      	lsls	r2, r3, #1
 8012546:	697b      	ldr	r3, [r7, #20]
 8012548:	685b      	ldr	r3, [r3, #4]
 801254a:	085b      	lsrs	r3, r3, #1
 801254c:	441a      	add	r2, r3
 801254e:	697b      	ldr	r3, [r7, #20]
 8012550:	685b      	ldr	r3, [r3, #4]
 8012552:	fbb2 f3f3 	udiv	r3, r2, r3
 8012556:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801255a:	2b0f      	cmp	r3, #15
 801255c:	d916      	bls.n	801258c <UART_SetConfig+0xb28>
 801255e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012564:	d212      	bcs.n	801258c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012568:	b29b      	uxth	r3, r3
 801256a:	f023 030f 	bic.w	r3, r3, #15
 801256e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012572:	085b      	lsrs	r3, r3, #1
 8012574:	b29b      	uxth	r3, r3
 8012576:	f003 0307 	and.w	r3, r3, #7
 801257a:	b29a      	uxth	r2, r3
 801257c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801257e:	4313      	orrs	r3, r2
 8012580:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8012582:	697b      	ldr	r3, [r7, #20]
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012588:	60da      	str	r2, [r3, #12]
 801258a:	e0bc      	b.n	8012706 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 801258c:	2301      	movs	r3, #1
 801258e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8012592:	e0b8      	b.n	8012706 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8012594:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012598:	2b20      	cmp	r3, #32
 801259a:	dc4b      	bgt.n	8012634 <UART_SetConfig+0xbd0>
 801259c:	2b00      	cmp	r3, #0
 801259e:	f2c0 8087 	blt.w	80126b0 <UART_SetConfig+0xc4c>
 80125a2:	2b20      	cmp	r3, #32
 80125a4:	f200 8084 	bhi.w	80126b0 <UART_SetConfig+0xc4c>
 80125a8:	a201      	add	r2, pc, #4	; (adr r2, 80125b0 <UART_SetConfig+0xb4c>)
 80125aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125ae:	bf00      	nop
 80125b0:	0801263b 	.word	0x0801263b
 80125b4:	08012643 	.word	0x08012643
 80125b8:	080126b1 	.word	0x080126b1
 80125bc:	080126b1 	.word	0x080126b1
 80125c0:	0801264b 	.word	0x0801264b
 80125c4:	080126b1 	.word	0x080126b1
 80125c8:	080126b1 	.word	0x080126b1
 80125cc:	080126b1 	.word	0x080126b1
 80125d0:	0801265b 	.word	0x0801265b
 80125d4:	080126b1 	.word	0x080126b1
 80125d8:	080126b1 	.word	0x080126b1
 80125dc:	080126b1 	.word	0x080126b1
 80125e0:	080126b1 	.word	0x080126b1
 80125e4:	080126b1 	.word	0x080126b1
 80125e8:	080126b1 	.word	0x080126b1
 80125ec:	080126b1 	.word	0x080126b1
 80125f0:	0801266b 	.word	0x0801266b
 80125f4:	080126b1 	.word	0x080126b1
 80125f8:	080126b1 	.word	0x080126b1
 80125fc:	080126b1 	.word	0x080126b1
 8012600:	080126b1 	.word	0x080126b1
 8012604:	080126b1 	.word	0x080126b1
 8012608:	080126b1 	.word	0x080126b1
 801260c:	080126b1 	.word	0x080126b1
 8012610:	080126b1 	.word	0x080126b1
 8012614:	080126b1 	.word	0x080126b1
 8012618:	080126b1 	.word	0x080126b1
 801261c:	080126b1 	.word	0x080126b1
 8012620:	080126b1 	.word	0x080126b1
 8012624:	080126b1 	.word	0x080126b1
 8012628:	080126b1 	.word	0x080126b1
 801262c:	080126b1 	.word	0x080126b1
 8012630:	080126a3 	.word	0x080126a3
 8012634:	2b40      	cmp	r3, #64	; 0x40
 8012636:	d037      	beq.n	80126a8 <UART_SetConfig+0xc44>
 8012638:	e03a      	b.n	80126b0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801263a:	f7f8 fe5f 	bl	800b2fc <HAL_RCC_GetPCLK1Freq>
 801263e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012640:	e03c      	b.n	80126bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012642:	f7f8 fe71 	bl	800b328 <HAL_RCC_GetPCLK2Freq>
 8012646:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012648:	e038      	b.n	80126bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801264a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801264e:	4618      	mov	r0, r3
 8012650:	f7fa fd08 	bl	800d064 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012656:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012658:	e030      	b.n	80126bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801265a:	f107 0318 	add.w	r3, r7, #24
 801265e:	4618      	mov	r0, r3
 8012660:	f7fa fe54 	bl	800d30c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012664:	69fb      	ldr	r3, [r7, #28]
 8012666:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012668:	e028      	b.n	80126bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801266a:	4b09      	ldr	r3, [pc, #36]	; (8012690 <UART_SetConfig+0xc2c>)
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	f003 0320 	and.w	r3, r3, #32
 8012672:	2b00      	cmp	r3, #0
 8012674:	d012      	beq.n	801269c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012676:	4b06      	ldr	r3, [pc, #24]	; (8012690 <UART_SetConfig+0xc2c>)
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	08db      	lsrs	r3, r3, #3
 801267c:	f003 0303 	and.w	r3, r3, #3
 8012680:	4a04      	ldr	r2, [pc, #16]	; (8012694 <UART_SetConfig+0xc30>)
 8012682:	fa22 f303 	lsr.w	r3, r2, r3
 8012686:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012688:	e018      	b.n	80126bc <UART_SetConfig+0xc58>
 801268a:	bf00      	nop
 801268c:	0801c3a4 	.word	0x0801c3a4
 8012690:	58024400 	.word	0x58024400
 8012694:	03d09000 	.word	0x03d09000
 8012698:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 801269c:	4b24      	ldr	r3, [pc, #144]	; (8012730 <UART_SetConfig+0xccc>)
 801269e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80126a0:	e00c      	b.n	80126bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80126a2:	4b24      	ldr	r3, [pc, #144]	; (8012734 <UART_SetConfig+0xcd0>)
 80126a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80126a6:	e009      	b.n	80126bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80126a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80126ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80126ae:	e005      	b.n	80126bc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80126b0:	2300      	movs	r3, #0
 80126b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80126b4:	2301      	movs	r3, #1
 80126b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80126ba:	bf00      	nop
    }

    if (pclk != 0U)
 80126bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d021      	beq.n	8012706 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80126c2:	697b      	ldr	r3, [r7, #20]
 80126c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126c6:	4a1c      	ldr	r2, [pc, #112]	; (8012738 <UART_SetConfig+0xcd4>)
 80126c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80126cc:	461a      	mov	r2, r3
 80126ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80126d4:	697b      	ldr	r3, [r7, #20]
 80126d6:	685b      	ldr	r3, [r3, #4]
 80126d8:	085b      	lsrs	r3, r3, #1
 80126da:	441a      	add	r2, r3
 80126dc:	697b      	ldr	r3, [r7, #20]
 80126de:	685b      	ldr	r3, [r3, #4]
 80126e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80126e4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80126e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126e8:	2b0f      	cmp	r3, #15
 80126ea:	d909      	bls.n	8012700 <UART_SetConfig+0xc9c>
 80126ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80126f2:	d205      	bcs.n	8012700 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80126f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126f6:	b29a      	uxth	r2, r3
 80126f8:	697b      	ldr	r3, [r7, #20]
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	60da      	str	r2, [r3, #12]
 80126fe:	e002      	b.n	8012706 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8012700:	2301      	movs	r3, #1
 8012702:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8012706:	697b      	ldr	r3, [r7, #20]
 8012708:	2201      	movs	r2, #1
 801270a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801270e:	697b      	ldr	r3, [r7, #20]
 8012710:	2201      	movs	r2, #1
 8012712:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012716:	697b      	ldr	r3, [r7, #20]
 8012718:	2200      	movs	r2, #0
 801271a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801271c:	697b      	ldr	r3, [r7, #20]
 801271e:	2200      	movs	r2, #0
 8012720:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8012722:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8012726:	4618      	mov	r0, r3
 8012728:	3748      	adds	r7, #72	; 0x48
 801272a:	46bd      	mov	sp, r7
 801272c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012730:	03d09000 	.word	0x03d09000
 8012734:	003d0900 	.word	0x003d0900
 8012738:	0801c3a4 	.word	0x0801c3a4

0801273c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801273c:	b480      	push	{r7}
 801273e:	b083      	sub	sp, #12
 8012740:	af00      	add	r7, sp, #0
 8012742:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012748:	f003 0301 	and.w	r3, r3, #1
 801274c:	2b00      	cmp	r3, #0
 801274e:	d00a      	beq.n	8012766 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	685b      	ldr	r3, [r3, #4]
 8012756:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	430a      	orrs	r2, r1
 8012764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801276a:	f003 0302 	and.w	r3, r3, #2
 801276e:	2b00      	cmp	r3, #0
 8012770:	d00a      	beq.n	8012788 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	685b      	ldr	r3, [r3, #4]
 8012778:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	430a      	orrs	r2, r1
 8012786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801278c:	f003 0304 	and.w	r3, r3, #4
 8012790:	2b00      	cmp	r3, #0
 8012792:	d00a      	beq.n	80127aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	685b      	ldr	r3, [r3, #4]
 801279a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	430a      	orrs	r2, r1
 80127a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127ae:	f003 0308 	and.w	r3, r3, #8
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d00a      	beq.n	80127cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	685b      	ldr	r3, [r3, #4]
 80127bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	430a      	orrs	r2, r1
 80127ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127d0:	f003 0310 	and.w	r3, r3, #16
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d00a      	beq.n	80127ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	689b      	ldr	r3, [r3, #8]
 80127de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	430a      	orrs	r2, r1
 80127ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127f2:	f003 0320 	and.w	r3, r3, #32
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d00a      	beq.n	8012810 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	689b      	ldr	r3, [r3, #8]
 8012800:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	430a      	orrs	r2, r1
 801280e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012818:	2b00      	cmp	r3, #0
 801281a:	d01a      	beq.n	8012852 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	685b      	ldr	r3, [r3, #4]
 8012822:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	430a      	orrs	r2, r1
 8012830:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801283a:	d10a      	bne.n	8012852 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	685b      	ldr	r3, [r3, #4]
 8012842:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	430a      	orrs	r2, r1
 8012850:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801285a:	2b00      	cmp	r3, #0
 801285c:	d00a      	beq.n	8012874 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	685b      	ldr	r3, [r3, #4]
 8012864:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	430a      	orrs	r2, r1
 8012872:	605a      	str	r2, [r3, #4]
  }
}
 8012874:	bf00      	nop
 8012876:	370c      	adds	r7, #12
 8012878:	46bd      	mov	sp, r7
 801287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801287e:	4770      	bx	lr

08012880 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012880:	b580      	push	{r7, lr}
 8012882:	b098      	sub	sp, #96	; 0x60
 8012884:	af02      	add	r7, sp, #8
 8012886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	2200      	movs	r2, #0
 801288c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012890:	f7f1 fa28 	bl	8003ce4 <HAL_GetTick>
 8012894:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	f003 0308 	and.w	r3, r3, #8
 80128a0:	2b08      	cmp	r3, #8
 80128a2:	d12f      	bne.n	8012904 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80128a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80128a8:	9300      	str	r3, [sp, #0]
 80128aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80128ac:	2200      	movs	r2, #0
 80128ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80128b2:	6878      	ldr	r0, [r7, #4]
 80128b4:	f000 f88e 	bl	80129d4 <UART_WaitOnFlagUntilTimeout>
 80128b8:	4603      	mov	r3, r0
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d022      	beq.n	8012904 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128c6:	e853 3f00 	ldrex	r3, [r3]
 80128ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80128cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80128d2:	653b      	str	r3, [r7, #80]	; 0x50
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	461a      	mov	r2, r3
 80128da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80128dc:	647b      	str	r3, [r7, #68]	; 0x44
 80128de:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80128e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80128e4:	e841 2300 	strex	r3, r2, [r1]
 80128e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80128ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d1e6      	bne.n	80128be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	2220      	movs	r2, #32
 80128f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	2200      	movs	r2, #0
 80128fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012900:	2303      	movs	r3, #3
 8012902:	e063      	b.n	80129cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	f003 0304 	and.w	r3, r3, #4
 801290e:	2b04      	cmp	r3, #4
 8012910:	d149      	bne.n	80129a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012912:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012916:	9300      	str	r3, [sp, #0]
 8012918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801291a:	2200      	movs	r2, #0
 801291c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8012920:	6878      	ldr	r0, [r7, #4]
 8012922:	f000 f857 	bl	80129d4 <UART_WaitOnFlagUntilTimeout>
 8012926:	4603      	mov	r3, r0
 8012928:	2b00      	cmp	r3, #0
 801292a:	d03c      	beq.n	80129a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012934:	e853 3f00 	ldrex	r3, [r3]
 8012938:	623b      	str	r3, [r7, #32]
   return(result);
 801293a:	6a3b      	ldr	r3, [r7, #32]
 801293c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012940:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	461a      	mov	r2, r3
 8012948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801294a:	633b      	str	r3, [r7, #48]	; 0x30
 801294c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801294e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012952:	e841 2300 	strex	r3, r2, [r1]
 8012956:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801295a:	2b00      	cmp	r3, #0
 801295c:	d1e6      	bne.n	801292c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	3308      	adds	r3, #8
 8012964:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012966:	693b      	ldr	r3, [r7, #16]
 8012968:	e853 3f00 	ldrex	r3, [r3]
 801296c:	60fb      	str	r3, [r7, #12]
   return(result);
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	f023 0301 	bic.w	r3, r3, #1
 8012974:	64bb      	str	r3, [r7, #72]	; 0x48
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	3308      	adds	r3, #8
 801297c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801297e:	61fa      	str	r2, [r7, #28]
 8012980:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012982:	69b9      	ldr	r1, [r7, #24]
 8012984:	69fa      	ldr	r2, [r7, #28]
 8012986:	e841 2300 	strex	r3, r2, [r1]
 801298a:	617b      	str	r3, [r7, #20]
   return(result);
 801298c:	697b      	ldr	r3, [r7, #20]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d1e5      	bne.n	801295e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	2220      	movs	r2, #32
 8012996:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	2200      	movs	r2, #0
 801299e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80129a2:	2303      	movs	r3, #3
 80129a4:	e012      	b.n	80129cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	2220      	movs	r2, #32
 80129aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	2220      	movs	r2, #32
 80129b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	2200      	movs	r2, #0
 80129ba:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	2200      	movs	r2, #0
 80129c0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	2200      	movs	r2, #0
 80129c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80129ca:	2300      	movs	r3, #0
}
 80129cc:	4618      	mov	r0, r3
 80129ce:	3758      	adds	r7, #88	; 0x58
 80129d0:	46bd      	mov	sp, r7
 80129d2:	bd80      	pop	{r7, pc}

080129d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80129d4:	b580      	push	{r7, lr}
 80129d6:	b084      	sub	sp, #16
 80129d8:	af00      	add	r7, sp, #0
 80129da:	60f8      	str	r0, [r7, #12]
 80129dc:	60b9      	str	r1, [r7, #8]
 80129de:	603b      	str	r3, [r7, #0]
 80129e0:	4613      	mov	r3, r2
 80129e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80129e4:	e049      	b.n	8012a7a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80129e6:	69bb      	ldr	r3, [r7, #24]
 80129e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129ec:	d045      	beq.n	8012a7a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80129ee:	f7f1 f979 	bl	8003ce4 <HAL_GetTick>
 80129f2:	4602      	mov	r2, r0
 80129f4:	683b      	ldr	r3, [r7, #0]
 80129f6:	1ad3      	subs	r3, r2, r3
 80129f8:	69ba      	ldr	r2, [r7, #24]
 80129fa:	429a      	cmp	r2, r3
 80129fc:	d302      	bcc.n	8012a04 <UART_WaitOnFlagUntilTimeout+0x30>
 80129fe:	69bb      	ldr	r3, [r7, #24]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d101      	bne.n	8012a08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8012a04:	2303      	movs	r3, #3
 8012a06:	e048      	b.n	8012a9a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	f003 0304 	and.w	r3, r3, #4
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d031      	beq.n	8012a7a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	69db      	ldr	r3, [r3, #28]
 8012a1c:	f003 0308 	and.w	r3, r3, #8
 8012a20:	2b08      	cmp	r3, #8
 8012a22:	d110      	bne.n	8012a46 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	2208      	movs	r2, #8
 8012a2a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8012a2c:	68f8      	ldr	r0, [r7, #12]
 8012a2e:	f000 f839 	bl	8012aa4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8012a32:	68fb      	ldr	r3, [r7, #12]
 8012a34:	2208      	movs	r2, #8
 8012a36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	2200      	movs	r2, #0
 8012a3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8012a42:	2301      	movs	r3, #1
 8012a44:	e029      	b.n	8012a9a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	69db      	ldr	r3, [r3, #28]
 8012a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012a50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012a54:	d111      	bne.n	8012a7a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012a5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012a60:	68f8      	ldr	r0, [r7, #12]
 8012a62:	f000 f81f 	bl	8012aa4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	2220      	movs	r2, #32
 8012a6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	2200      	movs	r2, #0
 8012a72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8012a76:	2303      	movs	r3, #3
 8012a78:	e00f      	b.n	8012a9a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	69da      	ldr	r2, [r3, #28]
 8012a80:	68bb      	ldr	r3, [r7, #8]
 8012a82:	4013      	ands	r3, r2
 8012a84:	68ba      	ldr	r2, [r7, #8]
 8012a86:	429a      	cmp	r2, r3
 8012a88:	bf0c      	ite	eq
 8012a8a:	2301      	moveq	r3, #1
 8012a8c:	2300      	movne	r3, #0
 8012a8e:	b2db      	uxtb	r3, r3
 8012a90:	461a      	mov	r2, r3
 8012a92:	79fb      	ldrb	r3, [r7, #7]
 8012a94:	429a      	cmp	r2, r3
 8012a96:	d0a6      	beq.n	80129e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012a98:	2300      	movs	r3, #0
}
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	3710      	adds	r7, #16
 8012a9e:	46bd      	mov	sp, r7
 8012aa0:	bd80      	pop	{r7, pc}
	...

08012aa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012aa4:	b480      	push	{r7}
 8012aa6:	b095      	sub	sp, #84	; 0x54
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ab4:	e853 3f00 	ldrex	r3, [r3]
 8012ab8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012abc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	461a      	mov	r2, r3
 8012ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012aca:	643b      	str	r3, [r7, #64]	; 0x40
 8012acc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ace:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012ad0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012ad2:	e841 2300 	strex	r3, r2, [r1]
 8012ad6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d1e6      	bne.n	8012aac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	3308      	adds	r3, #8
 8012ae4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ae6:	6a3b      	ldr	r3, [r7, #32]
 8012ae8:	e853 3f00 	ldrex	r3, [r3]
 8012aec:	61fb      	str	r3, [r7, #28]
   return(result);
 8012aee:	69fa      	ldr	r2, [r7, #28]
 8012af0:	4b1e      	ldr	r3, [pc, #120]	; (8012b6c <UART_EndRxTransfer+0xc8>)
 8012af2:	4013      	ands	r3, r2
 8012af4:	64bb      	str	r3, [r7, #72]	; 0x48
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	3308      	adds	r3, #8
 8012afc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012afe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012b00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012b04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012b06:	e841 2300 	strex	r3, r2, [r1]
 8012b0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d1e5      	bne.n	8012ade <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b16:	2b01      	cmp	r3, #1
 8012b18:	d118      	bne.n	8012b4c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	e853 3f00 	ldrex	r3, [r3]
 8012b26:	60bb      	str	r3, [r7, #8]
   return(result);
 8012b28:	68bb      	ldr	r3, [r7, #8]
 8012b2a:	f023 0310 	bic.w	r3, r3, #16
 8012b2e:	647b      	str	r3, [r7, #68]	; 0x44
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	461a      	mov	r2, r3
 8012b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012b38:	61bb      	str	r3, [r7, #24]
 8012b3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b3c:	6979      	ldr	r1, [r7, #20]
 8012b3e:	69ba      	ldr	r2, [r7, #24]
 8012b40:	e841 2300 	strex	r3, r2, [r1]
 8012b44:	613b      	str	r3, [r7, #16]
   return(result);
 8012b46:	693b      	ldr	r3, [r7, #16]
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d1e6      	bne.n	8012b1a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	2220      	movs	r2, #32
 8012b50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	2200      	movs	r2, #0
 8012b58:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	2200      	movs	r2, #0
 8012b5e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8012b60:	bf00      	nop
 8012b62:	3754      	adds	r7, #84	; 0x54
 8012b64:	46bd      	mov	sp, r7
 8012b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b6a:	4770      	bx	lr
 8012b6c:	effffffe 	.word	0xeffffffe

08012b70 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012b70:	b480      	push	{r7}
 8012b72:	b085      	sub	sp, #20
 8012b74:	af00      	add	r7, sp, #0
 8012b76:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012b7e:	2b01      	cmp	r3, #1
 8012b80:	d101      	bne.n	8012b86 <HAL_UARTEx_DisableFifoMode+0x16>
 8012b82:	2302      	movs	r3, #2
 8012b84:	e027      	b.n	8012bd6 <HAL_UARTEx_DisableFifoMode+0x66>
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	2201      	movs	r2, #1
 8012b8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	2224      	movs	r2, #36	; 0x24
 8012b92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	681a      	ldr	r2, [r3, #0]
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	f022 0201 	bic.w	r2, r2, #1
 8012bac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012bb4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	2200      	movs	r2, #0
 8012bba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	68fa      	ldr	r2, [r7, #12]
 8012bc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	2220      	movs	r2, #32
 8012bc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	2200      	movs	r2, #0
 8012bd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012bd4:	2300      	movs	r3, #0
}
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	3714      	adds	r7, #20
 8012bda:	46bd      	mov	sp, r7
 8012bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be0:	4770      	bx	lr

08012be2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012be2:	b580      	push	{r7, lr}
 8012be4:	b084      	sub	sp, #16
 8012be6:	af00      	add	r7, sp, #0
 8012be8:	6078      	str	r0, [r7, #4]
 8012bea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012bf2:	2b01      	cmp	r3, #1
 8012bf4:	d101      	bne.n	8012bfa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012bf6:	2302      	movs	r3, #2
 8012bf8:	e02d      	b.n	8012c56 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	2201      	movs	r2, #1
 8012bfe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	2224      	movs	r2, #36	; 0x24
 8012c06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	681a      	ldr	r2, [r3, #0]
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	f022 0201 	bic.w	r2, r2, #1
 8012c20:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	689b      	ldr	r3, [r3, #8]
 8012c28:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	683a      	ldr	r2, [r7, #0]
 8012c32:	430a      	orrs	r2, r1
 8012c34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012c36:	6878      	ldr	r0, [r7, #4]
 8012c38:	f000 f850 	bl	8012cdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	68fa      	ldr	r2, [r7, #12]
 8012c42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	2220      	movs	r2, #32
 8012c48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	2200      	movs	r2, #0
 8012c50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012c54:	2300      	movs	r3, #0
}
 8012c56:	4618      	mov	r0, r3
 8012c58:	3710      	adds	r7, #16
 8012c5a:	46bd      	mov	sp, r7
 8012c5c:	bd80      	pop	{r7, pc}

08012c5e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012c5e:	b580      	push	{r7, lr}
 8012c60:	b084      	sub	sp, #16
 8012c62:	af00      	add	r7, sp, #0
 8012c64:	6078      	str	r0, [r7, #4]
 8012c66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012c6e:	2b01      	cmp	r3, #1
 8012c70:	d101      	bne.n	8012c76 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012c72:	2302      	movs	r3, #2
 8012c74:	e02d      	b.n	8012cd2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	2201      	movs	r2, #1
 8012c7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	2224      	movs	r2, #36	; 0x24
 8012c82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	681a      	ldr	r2, [r3, #0]
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	f022 0201 	bic.w	r2, r2, #1
 8012c9c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	689b      	ldr	r3, [r3, #8]
 8012ca4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	683a      	ldr	r2, [r7, #0]
 8012cae:	430a      	orrs	r2, r1
 8012cb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012cb2:	6878      	ldr	r0, [r7, #4]
 8012cb4:	f000 f812 	bl	8012cdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	68fa      	ldr	r2, [r7, #12]
 8012cbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	2220      	movs	r2, #32
 8012cc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	2200      	movs	r2, #0
 8012ccc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012cd0:	2300      	movs	r3, #0
}
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	3710      	adds	r7, #16
 8012cd6:	46bd      	mov	sp, r7
 8012cd8:	bd80      	pop	{r7, pc}
	...

08012cdc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012cdc:	b480      	push	{r7}
 8012cde:	b085      	sub	sp, #20
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d108      	bne.n	8012cfe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	2201      	movs	r2, #1
 8012cf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	2201      	movs	r2, #1
 8012cf8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012cfc:	e031      	b.n	8012d62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012cfe:	2310      	movs	r3, #16
 8012d00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012d02:	2310      	movs	r3, #16
 8012d04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	689b      	ldr	r3, [r3, #8]
 8012d0c:	0e5b      	lsrs	r3, r3, #25
 8012d0e:	b2db      	uxtb	r3, r3
 8012d10:	f003 0307 	and.w	r3, r3, #7
 8012d14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	689b      	ldr	r3, [r3, #8]
 8012d1c:	0f5b      	lsrs	r3, r3, #29
 8012d1e:	b2db      	uxtb	r3, r3
 8012d20:	f003 0307 	and.w	r3, r3, #7
 8012d24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012d26:	7bbb      	ldrb	r3, [r7, #14]
 8012d28:	7b3a      	ldrb	r2, [r7, #12]
 8012d2a:	4911      	ldr	r1, [pc, #68]	; (8012d70 <UARTEx_SetNbDataToProcess+0x94>)
 8012d2c:	5c8a      	ldrb	r2, [r1, r2]
 8012d2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012d32:	7b3a      	ldrb	r2, [r7, #12]
 8012d34:	490f      	ldr	r1, [pc, #60]	; (8012d74 <UARTEx_SetNbDataToProcess+0x98>)
 8012d36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012d38:	fb93 f3f2 	sdiv	r3, r3, r2
 8012d3c:	b29a      	uxth	r2, r3
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012d44:	7bfb      	ldrb	r3, [r7, #15]
 8012d46:	7b7a      	ldrb	r2, [r7, #13]
 8012d48:	4909      	ldr	r1, [pc, #36]	; (8012d70 <UARTEx_SetNbDataToProcess+0x94>)
 8012d4a:	5c8a      	ldrb	r2, [r1, r2]
 8012d4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012d50:	7b7a      	ldrb	r2, [r7, #13]
 8012d52:	4908      	ldr	r1, [pc, #32]	; (8012d74 <UARTEx_SetNbDataToProcess+0x98>)
 8012d54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012d56:	fb93 f3f2 	sdiv	r3, r3, r2
 8012d5a:	b29a      	uxth	r2, r3
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012d62:	bf00      	nop
 8012d64:	3714      	adds	r7, #20
 8012d66:	46bd      	mov	sp, r7
 8012d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d6c:	4770      	bx	lr
 8012d6e:	bf00      	nop
 8012d70:	0801c3bc 	.word	0x0801c3bc
 8012d74:	0801c3c4 	.word	0x0801c3c4

08012d78 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8012d78:	b084      	sub	sp, #16
 8012d7a:	b480      	push	{r7}
 8012d7c:	b085      	sub	sp, #20
 8012d7e:	af00      	add	r7, sp, #0
 8012d80:	6078      	str	r0, [r7, #4]
 8012d82:	f107 001c 	add.w	r0, r7, #28
 8012d86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8012d8e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8012d90:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8012d92:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8012d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8012d96:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8012d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8012d9a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8012d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8012d9e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8012da0:	68fa      	ldr	r2, [r7, #12]
 8012da2:	4313      	orrs	r3, r2
 8012da4:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	685a      	ldr	r2, [r3, #4]
 8012daa:	4b07      	ldr	r3, [pc, #28]	; (8012dc8 <SDMMC_Init+0x50>)
 8012dac:	4013      	ands	r3, r2
 8012dae:	68fa      	ldr	r2, [r7, #12]
 8012db0:	431a      	orrs	r2, r3
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8012db6:	2300      	movs	r3, #0
}
 8012db8:	4618      	mov	r0, r3
 8012dba:	3714      	adds	r7, #20
 8012dbc:	46bd      	mov	sp, r7
 8012dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dc2:	b004      	add	sp, #16
 8012dc4:	4770      	bx	lr
 8012dc6:	bf00      	nop
 8012dc8:	ffc02c00 	.word	0xffc02c00

08012dcc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8012dcc:	b480      	push	{r7}
 8012dce:	b083      	sub	sp, #12
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8012dda:	4618      	mov	r0, r3
 8012ddc:	370c      	adds	r7, #12
 8012dde:	46bd      	mov	sp, r7
 8012de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de4:	4770      	bx	lr

08012de6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8012de6:	b480      	push	{r7}
 8012de8:	b083      	sub	sp, #12
 8012dea:	af00      	add	r7, sp, #0
 8012dec:	6078      	str	r0, [r7, #4]
 8012dee:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8012df0:	683b      	ldr	r3, [r7, #0]
 8012df2:	681a      	ldr	r2, [r3, #0]
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8012dfa:	2300      	movs	r3, #0
}
 8012dfc:	4618      	mov	r0, r3
 8012dfe:	370c      	adds	r7, #12
 8012e00:	46bd      	mov	sp, r7
 8012e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e06:	4770      	bx	lr

08012e08 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8012e08:	b480      	push	{r7}
 8012e0a:	b083      	sub	sp, #12
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	f043 0203 	orr.w	r2, r3, #3
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8012e1c:	2300      	movs	r3, #0
}
 8012e1e:	4618      	mov	r0, r3
 8012e20:	370c      	adds	r7, #12
 8012e22:	46bd      	mov	sp, r7
 8012e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e28:	4770      	bx	lr

08012e2a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8012e2a:	b480      	push	{r7}
 8012e2c:	b083      	sub	sp, #12
 8012e2e:	af00      	add	r7, sp, #0
 8012e30:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	f003 0303 	and.w	r3, r3, #3
}
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	370c      	adds	r7, #12
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e44:	4770      	bx	lr
	...

08012e48 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8012e48:	b480      	push	{r7}
 8012e4a:	b085      	sub	sp, #20
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	6078      	str	r0, [r7, #4]
 8012e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012e52:	2300      	movs	r3, #0
 8012e54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8012e56:	683b      	ldr	r3, [r7, #0]
 8012e58:	681a      	ldr	r2, [r3, #0]
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012e5e:	683b      	ldr	r3, [r7, #0]
 8012e60:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8012e62:	683b      	ldr	r3, [r7, #0]
 8012e64:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012e66:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8012e68:	683b      	ldr	r3, [r7, #0]
 8012e6a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8012e6c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8012e6e:	683b      	ldr	r3, [r7, #0]
 8012e70:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8012e72:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012e74:	68fa      	ldr	r2, [r7, #12]
 8012e76:	4313      	orrs	r3, r2
 8012e78:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	68da      	ldr	r2, [r3, #12]
 8012e7e:	4b06      	ldr	r3, [pc, #24]	; (8012e98 <SDMMC_SendCommand+0x50>)
 8012e80:	4013      	ands	r3, r2
 8012e82:	68fa      	ldr	r2, [r7, #12]
 8012e84:	431a      	orrs	r2, r3
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012e8a:	2300      	movs	r3, #0
}
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	3714      	adds	r7, #20
 8012e90:	46bd      	mov	sp, r7
 8012e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e96:	4770      	bx	lr
 8012e98:	fffee0c0 	.word	0xfffee0c0

08012e9c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8012e9c:	b480      	push	{r7}
 8012e9e:	b083      	sub	sp, #12
 8012ea0:	af00      	add	r7, sp, #0
 8012ea2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	691b      	ldr	r3, [r3, #16]
 8012ea8:	b2db      	uxtb	r3, r3
}
 8012eaa:	4618      	mov	r0, r3
 8012eac:	370c      	adds	r7, #12
 8012eae:	46bd      	mov	sp, r7
 8012eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb4:	4770      	bx	lr

08012eb6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8012eb6:	b480      	push	{r7}
 8012eb8:	b085      	sub	sp, #20
 8012eba:	af00      	add	r7, sp, #0
 8012ebc:	6078      	str	r0, [r7, #4]
 8012ebe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	3314      	adds	r3, #20
 8012ec4:	461a      	mov	r2, r3
 8012ec6:	683b      	ldr	r3, [r7, #0]
 8012ec8:	4413      	add	r3, r2
 8012eca:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	681b      	ldr	r3, [r3, #0]
}
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	3714      	adds	r7, #20
 8012ed4:	46bd      	mov	sp, r7
 8012ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eda:	4770      	bx	lr

08012edc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8012edc:	b480      	push	{r7}
 8012ede:	b085      	sub	sp, #20
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	6078      	str	r0, [r7, #4]
 8012ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012ee6:	2300      	movs	r3, #0
 8012ee8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8012eea:	683b      	ldr	r3, [r7, #0]
 8012eec:	681a      	ldr	r2, [r3, #0]
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8012ef2:	683b      	ldr	r3, [r7, #0]
 8012ef4:	685a      	ldr	r2, [r3, #4]
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012efa:	683b      	ldr	r3, [r7, #0]
 8012efc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8012efe:	683b      	ldr	r3, [r7, #0]
 8012f00:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012f02:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8012f04:	683b      	ldr	r3, [r7, #0]
 8012f06:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8012f08:	431a      	orrs	r2, r3
                       Data->DPSM);
 8012f0a:	683b      	ldr	r3, [r7, #0]
 8012f0c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8012f0e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012f10:	68fa      	ldr	r2, [r7, #12]
 8012f12:	4313      	orrs	r3, r2
 8012f14:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	431a      	orrs	r2, r3
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8012f26:	2300      	movs	r3, #0

}
 8012f28:	4618      	mov	r0, r3
 8012f2a:	3714      	adds	r7, #20
 8012f2c:	46bd      	mov	sp, r7
 8012f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f32:	4770      	bx	lr

08012f34 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b088      	sub	sp, #32
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	6078      	str	r0, [r7, #4]
 8012f3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8012f3e:	683b      	ldr	r3, [r7, #0]
 8012f40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8012f42:	2310      	movs	r3, #16
 8012f44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012f46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012f4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012f4c:	2300      	movs	r3, #0
 8012f4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012f50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012f54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012f56:	f107 0308 	add.w	r3, r7, #8
 8012f5a:	4619      	mov	r1, r3
 8012f5c:	6878      	ldr	r0, [r7, #4]
 8012f5e:	f7ff ff73 	bl	8012e48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8012f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8012f66:	2110      	movs	r1, #16
 8012f68:	6878      	ldr	r0, [r7, #4]
 8012f6a:	f000 fa5f 	bl	801342c <SDMMC_GetCmdResp1>
 8012f6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012f70:	69fb      	ldr	r3, [r7, #28]
}
 8012f72:	4618      	mov	r0, r3
 8012f74:	3720      	adds	r7, #32
 8012f76:	46bd      	mov	sp, r7
 8012f78:	bd80      	pop	{r7, pc}

08012f7a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012f7a:	b580      	push	{r7, lr}
 8012f7c:	b088      	sub	sp, #32
 8012f7e:	af00      	add	r7, sp, #0
 8012f80:	6078      	str	r0, [r7, #4]
 8012f82:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012f84:	683b      	ldr	r3, [r7, #0]
 8012f86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8012f88:	2311      	movs	r3, #17
 8012f8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012f8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012f90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012f92:	2300      	movs	r3, #0
 8012f94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012f96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012f9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012f9c:	f107 0308 	add.w	r3, r7, #8
 8012fa0:	4619      	mov	r1, r3
 8012fa2:	6878      	ldr	r0, [r7, #4]
 8012fa4:	f7ff ff50 	bl	8012e48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8012fac:	2111      	movs	r1, #17
 8012fae:	6878      	ldr	r0, [r7, #4]
 8012fb0:	f000 fa3c 	bl	801342c <SDMMC_GetCmdResp1>
 8012fb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012fb6:	69fb      	ldr	r3, [r7, #28]
}
 8012fb8:	4618      	mov	r0, r3
 8012fba:	3720      	adds	r7, #32
 8012fbc:	46bd      	mov	sp, r7
 8012fbe:	bd80      	pop	{r7, pc}

08012fc0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012fc0:	b580      	push	{r7, lr}
 8012fc2:	b088      	sub	sp, #32
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	6078      	str	r0, [r7, #4]
 8012fc8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012fca:	683b      	ldr	r3, [r7, #0]
 8012fcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8012fce:	2312      	movs	r3, #18
 8012fd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012fd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012fd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012fd8:	2300      	movs	r3, #0
 8012fda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012fdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012fe0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012fe2:	f107 0308 	add.w	r3, r7, #8
 8012fe6:	4619      	mov	r1, r3
 8012fe8:	6878      	ldr	r0, [r7, #4]
 8012fea:	f7ff ff2d 	bl	8012e48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8012ff2:	2112      	movs	r1, #18
 8012ff4:	6878      	ldr	r0, [r7, #4]
 8012ff6:	f000 fa19 	bl	801342c <SDMMC_GetCmdResp1>
 8012ffa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012ffc:	69fb      	ldr	r3, [r7, #28]
}
 8012ffe:	4618      	mov	r0, r3
 8013000:	3720      	adds	r7, #32
 8013002:	46bd      	mov	sp, r7
 8013004:	bd80      	pop	{r7, pc}

08013006 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8013006:	b580      	push	{r7, lr}
 8013008:	b088      	sub	sp, #32
 801300a:	af00      	add	r7, sp, #0
 801300c:	6078      	str	r0, [r7, #4]
 801300e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8013010:	683b      	ldr	r3, [r7, #0]
 8013012:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8013014:	2318      	movs	r3, #24
 8013016:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013018:	f44f 7380 	mov.w	r3, #256	; 0x100
 801301c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801301e:	2300      	movs	r3, #0
 8013020:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013022:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013026:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013028:	f107 0308 	add.w	r3, r7, #8
 801302c:	4619      	mov	r1, r3
 801302e:	6878      	ldr	r0, [r7, #4]
 8013030:	f7ff ff0a 	bl	8012e48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8013034:	f241 3288 	movw	r2, #5000	; 0x1388
 8013038:	2118      	movs	r1, #24
 801303a:	6878      	ldr	r0, [r7, #4]
 801303c:	f000 f9f6 	bl	801342c <SDMMC_GetCmdResp1>
 8013040:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013042:	69fb      	ldr	r3, [r7, #28]
}
 8013044:	4618      	mov	r0, r3
 8013046:	3720      	adds	r7, #32
 8013048:	46bd      	mov	sp, r7
 801304a:	bd80      	pop	{r7, pc}

0801304c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801304c:	b580      	push	{r7, lr}
 801304e:	b088      	sub	sp, #32
 8013050:	af00      	add	r7, sp, #0
 8013052:	6078      	str	r0, [r7, #4]
 8013054:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8013056:	683b      	ldr	r3, [r7, #0]
 8013058:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801305a:	2319      	movs	r3, #25
 801305c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801305e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013062:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013064:	2300      	movs	r3, #0
 8013066:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801306c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801306e:	f107 0308 	add.w	r3, r7, #8
 8013072:	4619      	mov	r1, r3
 8013074:	6878      	ldr	r0, [r7, #4]
 8013076:	f7ff fee7 	bl	8012e48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801307a:	f241 3288 	movw	r2, #5000	; 0x1388
 801307e:	2119      	movs	r1, #25
 8013080:	6878      	ldr	r0, [r7, #4]
 8013082:	f000 f9d3 	bl	801342c <SDMMC_GetCmdResp1>
 8013086:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013088:	69fb      	ldr	r3, [r7, #28]
}
 801308a:	4618      	mov	r0, r3
 801308c:	3720      	adds	r7, #32
 801308e:	46bd      	mov	sp, r7
 8013090:	bd80      	pop	{r7, pc}
	...

08013094 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8013094:	b580      	push	{r7, lr}
 8013096:	b088      	sub	sp, #32
 8013098:	af00      	add	r7, sp, #0
 801309a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801309c:	2300      	movs	r3, #0
 801309e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80130a0:	230c      	movs	r3, #12
 80130a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80130a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80130a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80130aa:	2300      	movs	r3, #0
 80130ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80130ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80130b2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	68db      	ldr	r3, [r3, #12]
 80130b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	68db      	ldr	r3, [r3, #12]
 80130c4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80130cc:	f107 0308 	add.w	r3, r7, #8
 80130d0:	4619      	mov	r1, r3
 80130d2:	6878      	ldr	r0, [r7, #4]
 80130d4:	f7ff feb8 	bl	8012e48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80130d8:	4a0b      	ldr	r2, [pc, #44]	; (8013108 <SDMMC_CmdStopTransfer+0x74>)
 80130da:	210c      	movs	r1, #12
 80130dc:	6878      	ldr	r0, [r7, #4]
 80130de:	f000 f9a5 	bl	801342c <SDMMC_GetCmdResp1>
 80130e2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	68db      	ldr	r3, [r3, #12]
 80130e8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80130f0:	69fb      	ldr	r3, [r7, #28]
 80130f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80130f6:	d101      	bne.n	80130fc <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80130f8:	2300      	movs	r3, #0
 80130fa:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80130fc:	69fb      	ldr	r3, [r7, #28]
}
 80130fe:	4618      	mov	r0, r3
 8013100:	3720      	adds	r7, #32
 8013102:	46bd      	mov	sp, r7
 8013104:	bd80      	pop	{r7, pc}
 8013106:	bf00      	nop
 8013108:	05f5e100 	.word	0x05f5e100

0801310c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 801310c:	b580      	push	{r7, lr}
 801310e:	b088      	sub	sp, #32
 8013110:	af00      	add	r7, sp, #0
 8013112:	6078      	str	r0, [r7, #4]
 8013114:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8013116:	683b      	ldr	r3, [r7, #0]
 8013118:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 801311a:	2307      	movs	r3, #7
 801311c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801311e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013122:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013124:	2300      	movs	r3, #0
 8013126:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801312c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801312e:	f107 0308 	add.w	r3, r7, #8
 8013132:	4619      	mov	r1, r3
 8013134:	6878      	ldr	r0, [r7, #4]
 8013136:	f7ff fe87 	bl	8012e48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 801313a:	f241 3288 	movw	r2, #5000	; 0x1388
 801313e:	2107      	movs	r1, #7
 8013140:	6878      	ldr	r0, [r7, #4]
 8013142:	f000 f973 	bl	801342c <SDMMC_GetCmdResp1>
 8013146:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013148:	69fb      	ldr	r3, [r7, #28]
}
 801314a:	4618      	mov	r0, r3
 801314c:	3720      	adds	r7, #32
 801314e:	46bd      	mov	sp, r7
 8013150:	bd80      	pop	{r7, pc}

08013152 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8013152:	b580      	push	{r7, lr}
 8013154:	b088      	sub	sp, #32
 8013156:	af00      	add	r7, sp, #0
 8013158:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801315a:	2300      	movs	r3, #0
 801315c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801315e:	2300      	movs	r3, #0
 8013160:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8013162:	2300      	movs	r3, #0
 8013164:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013166:	2300      	movs	r3, #0
 8013168:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801316a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801316e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013170:	f107 0308 	add.w	r3, r7, #8
 8013174:	4619      	mov	r1, r3
 8013176:	6878      	ldr	r0, [r7, #4]
 8013178:	f7ff fe66 	bl	8012e48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 801317c:	6878      	ldr	r0, [r7, #4]
 801317e:	f000 fb97 	bl	80138b0 <SDMMC_GetCmdError>
 8013182:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013184:	69fb      	ldr	r3, [r7, #28]
}
 8013186:	4618      	mov	r0, r3
 8013188:	3720      	adds	r7, #32
 801318a:	46bd      	mov	sp, r7
 801318c:	bd80      	pop	{r7, pc}

0801318e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801318e:	b580      	push	{r7, lr}
 8013190:	b088      	sub	sp, #32
 8013192:	af00      	add	r7, sp, #0
 8013194:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8013196:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801319a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 801319c:	2308      	movs	r3, #8
 801319e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80131a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80131a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80131a6:	2300      	movs	r3, #0
 80131a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80131aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80131ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80131b0:	f107 0308 	add.w	r3, r7, #8
 80131b4:	4619      	mov	r1, r3
 80131b6:	6878      	ldr	r0, [r7, #4]
 80131b8:	f7ff fe46 	bl	8012e48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80131bc:	6878      	ldr	r0, [r7, #4]
 80131be:	f000 fb29 	bl	8013814 <SDMMC_GetCmdResp7>
 80131c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80131c4:	69fb      	ldr	r3, [r7, #28]
}
 80131c6:	4618      	mov	r0, r3
 80131c8:	3720      	adds	r7, #32
 80131ca:	46bd      	mov	sp, r7
 80131cc:	bd80      	pop	{r7, pc}

080131ce <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80131ce:	b580      	push	{r7, lr}
 80131d0:	b088      	sub	sp, #32
 80131d2:	af00      	add	r7, sp, #0
 80131d4:	6078      	str	r0, [r7, #4]
 80131d6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80131d8:	683b      	ldr	r3, [r7, #0]
 80131da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80131dc:	2337      	movs	r3, #55	; 0x37
 80131de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80131e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80131e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80131e6:	2300      	movs	r3, #0
 80131e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80131ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80131ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80131f0:	f107 0308 	add.w	r3, r7, #8
 80131f4:	4619      	mov	r1, r3
 80131f6:	6878      	ldr	r0, [r7, #4]
 80131f8:	f7ff fe26 	bl	8012e48 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80131fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8013200:	2137      	movs	r1, #55	; 0x37
 8013202:	6878      	ldr	r0, [r7, #4]
 8013204:	f000 f912 	bl	801342c <SDMMC_GetCmdResp1>
 8013208:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801320a:	69fb      	ldr	r3, [r7, #28]
}
 801320c:	4618      	mov	r0, r3
 801320e:	3720      	adds	r7, #32
 8013210:	46bd      	mov	sp, r7
 8013212:	bd80      	pop	{r7, pc}

08013214 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013214:	b580      	push	{r7, lr}
 8013216:	b088      	sub	sp, #32
 8013218:	af00      	add	r7, sp, #0
 801321a:	6078      	str	r0, [r7, #4]
 801321c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801321e:	683b      	ldr	r3, [r7, #0]
 8013220:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8013222:	2329      	movs	r3, #41	; 0x29
 8013224:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013226:	f44f 7380 	mov.w	r3, #256	; 0x100
 801322a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801322c:	2300      	movs	r3, #0
 801322e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013234:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013236:	f107 0308 	add.w	r3, r7, #8
 801323a:	4619      	mov	r1, r3
 801323c:	6878      	ldr	r0, [r7, #4]
 801323e:	f7ff fe03 	bl	8012e48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8013242:	6878      	ldr	r0, [r7, #4]
 8013244:	f000 fa2e 	bl	80136a4 <SDMMC_GetCmdResp3>
 8013248:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801324a:	69fb      	ldr	r3, [r7, #28]
}
 801324c:	4618      	mov	r0, r3
 801324e:	3720      	adds	r7, #32
 8013250:	46bd      	mov	sp, r7
 8013252:	bd80      	pop	{r7, pc}

08013254 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8013254:	b580      	push	{r7, lr}
 8013256:	b088      	sub	sp, #32
 8013258:	af00      	add	r7, sp, #0
 801325a:	6078      	str	r0, [r7, #4]
 801325c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801325e:	683b      	ldr	r3, [r7, #0]
 8013260:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8013262:	2306      	movs	r3, #6
 8013264:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013266:	f44f 7380 	mov.w	r3, #256	; 0x100
 801326a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801326c:	2300      	movs	r3, #0
 801326e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013270:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013274:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013276:	f107 0308 	add.w	r3, r7, #8
 801327a:	4619      	mov	r1, r3
 801327c:	6878      	ldr	r0, [r7, #4]
 801327e:	f7ff fde3 	bl	8012e48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8013282:	f241 3288 	movw	r2, #5000	; 0x1388
 8013286:	2106      	movs	r1, #6
 8013288:	6878      	ldr	r0, [r7, #4]
 801328a:	f000 f8cf 	bl	801342c <SDMMC_GetCmdResp1>
 801328e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013290:	69fb      	ldr	r3, [r7, #28]
}
 8013292:	4618      	mov	r0, r3
 8013294:	3720      	adds	r7, #32
 8013296:	46bd      	mov	sp, r7
 8013298:	bd80      	pop	{r7, pc}

0801329a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801329a:	b580      	push	{r7, lr}
 801329c:	b088      	sub	sp, #32
 801329e:	af00      	add	r7, sp, #0
 80132a0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80132a2:	2300      	movs	r3, #0
 80132a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80132a6:	2333      	movs	r3, #51	; 0x33
 80132a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80132aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80132ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80132b0:	2300      	movs	r3, #0
 80132b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80132b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80132b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80132ba:	f107 0308 	add.w	r3, r7, #8
 80132be:	4619      	mov	r1, r3
 80132c0:	6878      	ldr	r0, [r7, #4]
 80132c2:	f7ff fdc1 	bl	8012e48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80132c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80132ca:	2133      	movs	r1, #51	; 0x33
 80132cc:	6878      	ldr	r0, [r7, #4]
 80132ce:	f000 f8ad 	bl	801342c <SDMMC_GetCmdResp1>
 80132d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80132d4:	69fb      	ldr	r3, [r7, #28]
}
 80132d6:	4618      	mov	r0, r3
 80132d8:	3720      	adds	r7, #32
 80132da:	46bd      	mov	sp, r7
 80132dc:	bd80      	pop	{r7, pc}

080132de <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80132de:	b580      	push	{r7, lr}
 80132e0:	b088      	sub	sp, #32
 80132e2:	af00      	add	r7, sp, #0
 80132e4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80132e6:	2300      	movs	r3, #0
 80132e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80132ea:	2302      	movs	r3, #2
 80132ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80132ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80132f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80132f4:	2300      	movs	r3, #0
 80132f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80132f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80132fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80132fe:	f107 0308 	add.w	r3, r7, #8
 8013302:	4619      	mov	r1, r3
 8013304:	6878      	ldr	r0, [r7, #4]
 8013306:	f7ff fd9f 	bl	8012e48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801330a:	6878      	ldr	r0, [r7, #4]
 801330c:	f000 f980 	bl	8013610 <SDMMC_GetCmdResp2>
 8013310:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013312:	69fb      	ldr	r3, [r7, #28]
}
 8013314:	4618      	mov	r0, r3
 8013316:	3720      	adds	r7, #32
 8013318:	46bd      	mov	sp, r7
 801331a:	bd80      	pop	{r7, pc}

0801331c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801331c:	b580      	push	{r7, lr}
 801331e:	b088      	sub	sp, #32
 8013320:	af00      	add	r7, sp, #0
 8013322:	6078      	str	r0, [r7, #4]
 8013324:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8013326:	683b      	ldr	r3, [r7, #0]
 8013328:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801332a:	2309      	movs	r3, #9
 801332c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801332e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8013332:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013334:	2300      	movs	r3, #0
 8013336:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801333c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801333e:	f107 0308 	add.w	r3, r7, #8
 8013342:	4619      	mov	r1, r3
 8013344:	6878      	ldr	r0, [r7, #4]
 8013346:	f7ff fd7f 	bl	8012e48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801334a:	6878      	ldr	r0, [r7, #4]
 801334c:	f000 f960 	bl	8013610 <SDMMC_GetCmdResp2>
 8013350:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013352:	69fb      	ldr	r3, [r7, #28]
}
 8013354:	4618      	mov	r0, r3
 8013356:	3720      	adds	r7, #32
 8013358:	46bd      	mov	sp, r7
 801335a:	bd80      	pop	{r7, pc}

0801335c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 801335c:	b580      	push	{r7, lr}
 801335e:	b088      	sub	sp, #32
 8013360:	af00      	add	r7, sp, #0
 8013362:	6078      	str	r0, [r7, #4]
 8013364:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8013366:	2300      	movs	r3, #0
 8013368:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801336a:	2303      	movs	r3, #3
 801336c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801336e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013372:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013374:	2300      	movs	r3, #0
 8013376:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801337c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801337e:	f107 0308 	add.w	r3, r7, #8
 8013382:	4619      	mov	r1, r3
 8013384:	6878      	ldr	r0, [r7, #4]
 8013386:	f7ff fd5f 	bl	8012e48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801338a:	683a      	ldr	r2, [r7, #0]
 801338c:	2103      	movs	r1, #3
 801338e:	6878      	ldr	r0, [r7, #4]
 8013390:	f000 f9c8 	bl	8013724 <SDMMC_GetCmdResp6>
 8013394:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013396:	69fb      	ldr	r3, [r7, #28]
}
 8013398:	4618      	mov	r0, r3
 801339a:	3720      	adds	r7, #32
 801339c:	46bd      	mov	sp, r7
 801339e:	bd80      	pop	{r7, pc}

080133a0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80133a0:	b580      	push	{r7, lr}
 80133a2:	b088      	sub	sp, #32
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	6078      	str	r0, [r7, #4]
 80133a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80133aa:	683b      	ldr	r3, [r7, #0]
 80133ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80133ae:	230d      	movs	r3, #13
 80133b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80133b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80133b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80133b8:	2300      	movs	r3, #0
 80133ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80133bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80133c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80133c2:	f107 0308 	add.w	r3, r7, #8
 80133c6:	4619      	mov	r1, r3
 80133c8:	6878      	ldr	r0, [r7, #4]
 80133ca:	f7ff fd3d 	bl	8012e48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80133ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80133d2:	210d      	movs	r1, #13
 80133d4:	6878      	ldr	r0, [r7, #4]
 80133d6:	f000 f829 	bl	801342c <SDMMC_GetCmdResp1>
 80133da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80133dc:	69fb      	ldr	r3, [r7, #28]
}
 80133de:	4618      	mov	r0, r3
 80133e0:	3720      	adds	r7, #32
 80133e2:	46bd      	mov	sp, r7
 80133e4:	bd80      	pop	{r7, pc}

080133e6 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80133e6:	b580      	push	{r7, lr}
 80133e8:	b088      	sub	sp, #32
 80133ea:	af00      	add	r7, sp, #0
 80133ec:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80133ee:	2300      	movs	r3, #0
 80133f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80133f2:	230d      	movs	r3, #13
 80133f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80133f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80133fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80133fc:	2300      	movs	r3, #0
 80133fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013404:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013406:	f107 0308 	add.w	r3, r7, #8
 801340a:	4619      	mov	r1, r3
 801340c:	6878      	ldr	r0, [r7, #4]
 801340e:	f7ff fd1b 	bl	8012e48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8013412:	f241 3288 	movw	r2, #5000	; 0x1388
 8013416:	210d      	movs	r1, #13
 8013418:	6878      	ldr	r0, [r7, #4]
 801341a:	f000 f807 	bl	801342c <SDMMC_GetCmdResp1>
 801341e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013420:	69fb      	ldr	r3, [r7, #28]
}
 8013422:	4618      	mov	r0, r3
 8013424:	3720      	adds	r7, #32
 8013426:	46bd      	mov	sp, r7
 8013428:	bd80      	pop	{r7, pc}
	...

0801342c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 801342c:	b580      	push	{r7, lr}
 801342e:	b088      	sub	sp, #32
 8013430:	af00      	add	r7, sp, #0
 8013432:	60f8      	str	r0, [r7, #12]
 8013434:	460b      	mov	r3, r1
 8013436:	607a      	str	r2, [r7, #4]
 8013438:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801343a:	4b70      	ldr	r3, [pc, #448]	; (80135fc <SDMMC_GetCmdResp1+0x1d0>)
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	4a70      	ldr	r2, [pc, #448]	; (8013600 <SDMMC_GetCmdResp1+0x1d4>)
 8013440:	fba2 2303 	umull	r2, r3, r2, r3
 8013444:	0a5a      	lsrs	r2, r3, #9
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	fb02 f303 	mul.w	r3, r2, r3
 801344c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801344e:	69fb      	ldr	r3, [r7, #28]
 8013450:	1e5a      	subs	r2, r3, #1
 8013452:	61fa      	str	r2, [r7, #28]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d102      	bne.n	801345e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013458:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801345c:	e0c9      	b.n	80135f2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013462:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8013464:	69ba      	ldr	r2, [r7, #24]
 8013466:	4b67      	ldr	r3, [pc, #412]	; (8013604 <SDMMC_GetCmdResp1+0x1d8>)
 8013468:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801346a:	2b00      	cmp	r3, #0
 801346c:	d0ef      	beq.n	801344e <SDMMC_GetCmdResp1+0x22>
 801346e:	69bb      	ldr	r3, [r7, #24]
 8013470:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013474:	2b00      	cmp	r3, #0
 8013476:	d1ea      	bne.n	801344e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801347c:	f003 0304 	and.w	r3, r3, #4
 8013480:	2b00      	cmp	r3, #0
 8013482:	d004      	beq.n	801348e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	2204      	movs	r2, #4
 8013488:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801348a:	2304      	movs	r3, #4
 801348c:	e0b1      	b.n	80135f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013492:	f003 0301 	and.w	r3, r3, #1
 8013496:	2b00      	cmp	r3, #0
 8013498:	d004      	beq.n	80134a4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	2201      	movs	r2, #1
 801349e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80134a0:	2301      	movs	r3, #1
 80134a2:	e0a6      	b.n	80135f2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	4a58      	ldr	r2, [pc, #352]	; (8013608 <SDMMC_GetCmdResp1+0x1dc>)
 80134a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80134aa:	68f8      	ldr	r0, [r7, #12]
 80134ac:	f7ff fcf6 	bl	8012e9c <SDMMC_GetCommandResponse>
 80134b0:	4603      	mov	r3, r0
 80134b2:	461a      	mov	r2, r3
 80134b4:	7afb      	ldrb	r3, [r7, #11]
 80134b6:	4293      	cmp	r3, r2
 80134b8:	d001      	beq.n	80134be <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80134ba:	2301      	movs	r3, #1
 80134bc:	e099      	b.n	80135f2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80134be:	2100      	movs	r1, #0
 80134c0:	68f8      	ldr	r0, [r7, #12]
 80134c2:	f7ff fcf8 	bl	8012eb6 <SDMMC_GetResponse>
 80134c6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80134c8:	697a      	ldr	r2, [r7, #20]
 80134ca:	4b50      	ldr	r3, [pc, #320]	; (801360c <SDMMC_GetCmdResp1+0x1e0>)
 80134cc:	4013      	ands	r3, r2
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d101      	bne.n	80134d6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80134d2:	2300      	movs	r3, #0
 80134d4:	e08d      	b.n	80135f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80134d6:	697b      	ldr	r3, [r7, #20]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	da02      	bge.n	80134e2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80134dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80134e0:	e087      	b.n	80135f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80134e2:	697b      	ldr	r3, [r7, #20]
 80134e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d001      	beq.n	80134f0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80134ec:	2340      	movs	r3, #64	; 0x40
 80134ee:	e080      	b.n	80135f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80134f0:	697b      	ldr	r3, [r7, #20]
 80134f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d001      	beq.n	80134fe <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80134fa:	2380      	movs	r3, #128	; 0x80
 80134fc:	e079      	b.n	80135f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80134fe:	697b      	ldr	r3, [r7, #20]
 8013500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013504:	2b00      	cmp	r3, #0
 8013506:	d002      	beq.n	801350e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8013508:	f44f 7380 	mov.w	r3, #256	; 0x100
 801350c:	e071      	b.n	80135f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801350e:	697b      	ldr	r3, [r7, #20]
 8013510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013514:	2b00      	cmp	r3, #0
 8013516:	d002      	beq.n	801351e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8013518:	f44f 7300 	mov.w	r3, #512	; 0x200
 801351c:	e069      	b.n	80135f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801351e:	697b      	ldr	r3, [r7, #20]
 8013520:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013524:	2b00      	cmp	r3, #0
 8013526:	d002      	beq.n	801352e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8013528:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801352c:	e061      	b.n	80135f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801352e:	697b      	ldr	r3, [r7, #20]
 8013530:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013534:	2b00      	cmp	r3, #0
 8013536:	d002      	beq.n	801353e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8013538:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801353c:	e059      	b.n	80135f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801353e:	697b      	ldr	r3, [r7, #20]
 8013540:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013544:	2b00      	cmp	r3, #0
 8013546:	d002      	beq.n	801354e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801354c:	e051      	b.n	80135f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801354e:	697b      	ldr	r3, [r7, #20]
 8013550:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013554:	2b00      	cmp	r3, #0
 8013556:	d002      	beq.n	801355e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013558:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801355c:	e049      	b.n	80135f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801355e:	697b      	ldr	r3, [r7, #20]
 8013560:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013564:	2b00      	cmp	r3, #0
 8013566:	d002      	beq.n	801356e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8013568:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801356c:	e041      	b.n	80135f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801356e:	697b      	ldr	r3, [r7, #20]
 8013570:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013574:	2b00      	cmp	r3, #0
 8013576:	d002      	beq.n	801357e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8013578:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801357c:	e039      	b.n	80135f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801357e:	697b      	ldr	r3, [r7, #20]
 8013580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8013584:	2b00      	cmp	r3, #0
 8013586:	d002      	beq.n	801358e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8013588:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801358c:	e031      	b.n	80135f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801358e:	697b      	ldr	r3, [r7, #20]
 8013590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013594:	2b00      	cmp	r3, #0
 8013596:	d002      	beq.n	801359e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8013598:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801359c:	e029      	b.n	80135f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801359e:	697b      	ldr	r3, [r7, #20]
 80135a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d002      	beq.n	80135ae <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80135a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80135ac:	e021      	b.n	80135f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80135ae:	697b      	ldr	r3, [r7, #20]
 80135b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d002      	beq.n	80135be <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80135b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80135bc:	e019      	b.n	80135f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80135be:	697b      	ldr	r3, [r7, #20]
 80135c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d002      	beq.n	80135ce <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80135c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80135cc:	e011      	b.n	80135f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80135ce:	697b      	ldr	r3, [r7, #20]
 80135d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d002      	beq.n	80135de <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80135d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80135dc:	e009      	b.n	80135f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80135de:	697b      	ldr	r3, [r7, #20]
 80135e0:	f003 0308 	and.w	r3, r3, #8
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d002      	beq.n	80135ee <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80135e8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80135ec:	e001      	b.n	80135f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80135ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80135f2:	4618      	mov	r0, r3
 80135f4:	3720      	adds	r7, #32
 80135f6:	46bd      	mov	sp, r7
 80135f8:	bd80      	pop	{r7, pc}
 80135fa:	bf00      	nop
 80135fc:	24000100 	.word	0x24000100
 8013600:	10624dd3 	.word	0x10624dd3
 8013604:	00200045 	.word	0x00200045
 8013608:	002000c5 	.word	0x002000c5
 801360c:	fdffe008 	.word	0xfdffe008

08013610 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8013610:	b480      	push	{r7}
 8013612:	b085      	sub	sp, #20
 8013614:	af00      	add	r7, sp, #0
 8013616:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013618:	4b1f      	ldr	r3, [pc, #124]	; (8013698 <SDMMC_GetCmdResp2+0x88>)
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	4a1f      	ldr	r2, [pc, #124]	; (801369c <SDMMC_GetCmdResp2+0x8c>)
 801361e:	fba2 2303 	umull	r2, r3, r2, r3
 8013622:	0a5b      	lsrs	r3, r3, #9
 8013624:	f241 3288 	movw	r2, #5000	; 0x1388
 8013628:	fb02 f303 	mul.w	r3, r2, r3
 801362c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	1e5a      	subs	r2, r3, #1
 8013632:	60fa      	str	r2, [r7, #12]
 8013634:	2b00      	cmp	r3, #0
 8013636:	d102      	bne.n	801363e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013638:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801363c:	e026      	b.n	801368c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013642:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013644:	68bb      	ldr	r3, [r7, #8]
 8013646:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801364a:	2b00      	cmp	r3, #0
 801364c:	d0ef      	beq.n	801362e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801364e:	68bb      	ldr	r3, [r7, #8]
 8013650:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013654:	2b00      	cmp	r3, #0
 8013656:	d1ea      	bne.n	801362e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801365c:	f003 0304 	and.w	r3, r3, #4
 8013660:	2b00      	cmp	r3, #0
 8013662:	d004      	beq.n	801366e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	2204      	movs	r2, #4
 8013668:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801366a:	2304      	movs	r3, #4
 801366c:	e00e      	b.n	801368c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013672:	f003 0301 	and.w	r3, r3, #1
 8013676:	2b00      	cmp	r3, #0
 8013678:	d004      	beq.n	8013684 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	2201      	movs	r2, #1
 801367e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013680:	2301      	movs	r3, #1
 8013682:	e003      	b.n	801368c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	4a06      	ldr	r2, [pc, #24]	; (80136a0 <SDMMC_GetCmdResp2+0x90>)
 8013688:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801368a:	2300      	movs	r3, #0
}
 801368c:	4618      	mov	r0, r3
 801368e:	3714      	adds	r7, #20
 8013690:	46bd      	mov	sp, r7
 8013692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013696:	4770      	bx	lr
 8013698:	24000100 	.word	0x24000100
 801369c:	10624dd3 	.word	0x10624dd3
 80136a0:	002000c5 	.word	0x002000c5

080136a4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80136a4:	b480      	push	{r7}
 80136a6:	b085      	sub	sp, #20
 80136a8:	af00      	add	r7, sp, #0
 80136aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80136ac:	4b1a      	ldr	r3, [pc, #104]	; (8013718 <SDMMC_GetCmdResp3+0x74>)
 80136ae:	681b      	ldr	r3, [r3, #0]
 80136b0:	4a1a      	ldr	r2, [pc, #104]	; (801371c <SDMMC_GetCmdResp3+0x78>)
 80136b2:	fba2 2303 	umull	r2, r3, r2, r3
 80136b6:	0a5b      	lsrs	r3, r3, #9
 80136b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80136bc:	fb02 f303 	mul.w	r3, r2, r3
 80136c0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	1e5a      	subs	r2, r3, #1
 80136c6:	60fa      	str	r2, [r7, #12]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d102      	bne.n	80136d2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80136cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80136d0:	e01b      	b.n	801370a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80136d6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80136d8:	68bb      	ldr	r3, [r7, #8]
 80136da:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d0ef      	beq.n	80136c2 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80136e2:	68bb      	ldr	r3, [r7, #8]
 80136e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d1ea      	bne.n	80136c2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80136f0:	f003 0304 	and.w	r3, r3, #4
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d004      	beq.n	8013702 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	2204      	movs	r2, #4
 80136fc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80136fe:	2304      	movs	r3, #4
 8013700:	e003      	b.n	801370a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	4a06      	ldr	r2, [pc, #24]	; (8013720 <SDMMC_GetCmdResp3+0x7c>)
 8013706:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8013708:	2300      	movs	r3, #0
}
 801370a:	4618      	mov	r0, r3
 801370c:	3714      	adds	r7, #20
 801370e:	46bd      	mov	sp, r7
 8013710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013714:	4770      	bx	lr
 8013716:	bf00      	nop
 8013718:	24000100 	.word	0x24000100
 801371c:	10624dd3 	.word	0x10624dd3
 8013720:	002000c5 	.word	0x002000c5

08013724 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8013724:	b580      	push	{r7, lr}
 8013726:	b088      	sub	sp, #32
 8013728:	af00      	add	r7, sp, #0
 801372a:	60f8      	str	r0, [r7, #12]
 801372c:	460b      	mov	r3, r1
 801372e:	607a      	str	r2, [r7, #4]
 8013730:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013732:	4b35      	ldr	r3, [pc, #212]	; (8013808 <SDMMC_GetCmdResp6+0xe4>)
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	4a35      	ldr	r2, [pc, #212]	; (801380c <SDMMC_GetCmdResp6+0xe8>)
 8013738:	fba2 2303 	umull	r2, r3, r2, r3
 801373c:	0a5b      	lsrs	r3, r3, #9
 801373e:	f241 3288 	movw	r2, #5000	; 0x1388
 8013742:	fb02 f303 	mul.w	r3, r2, r3
 8013746:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8013748:	69fb      	ldr	r3, [r7, #28]
 801374a:	1e5a      	subs	r2, r3, #1
 801374c:	61fa      	str	r2, [r7, #28]
 801374e:	2b00      	cmp	r3, #0
 8013750:	d102      	bne.n	8013758 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013752:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013756:	e052      	b.n	80137fe <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801375c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801375e:	69bb      	ldr	r3, [r7, #24]
 8013760:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8013764:	2b00      	cmp	r3, #0
 8013766:	d0ef      	beq.n	8013748 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013768:	69bb      	ldr	r3, [r7, #24]
 801376a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801376e:	2b00      	cmp	r3, #0
 8013770:	d1ea      	bne.n	8013748 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013776:	f003 0304 	and.w	r3, r3, #4
 801377a:	2b00      	cmp	r3, #0
 801377c:	d004      	beq.n	8013788 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	2204      	movs	r2, #4
 8013782:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013784:	2304      	movs	r3, #4
 8013786:	e03a      	b.n	80137fe <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013788:	68fb      	ldr	r3, [r7, #12]
 801378a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801378c:	f003 0301 	and.w	r3, r3, #1
 8013790:	2b00      	cmp	r3, #0
 8013792:	d004      	beq.n	801379e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013794:	68fb      	ldr	r3, [r7, #12]
 8013796:	2201      	movs	r2, #1
 8013798:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801379a:	2301      	movs	r3, #1
 801379c:	e02f      	b.n	80137fe <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801379e:	68f8      	ldr	r0, [r7, #12]
 80137a0:	f7ff fb7c 	bl	8012e9c <SDMMC_GetCommandResponse>
 80137a4:	4603      	mov	r3, r0
 80137a6:	461a      	mov	r2, r3
 80137a8:	7afb      	ldrb	r3, [r7, #11]
 80137aa:	4293      	cmp	r3, r2
 80137ac:	d001      	beq.n	80137b2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80137ae:	2301      	movs	r3, #1
 80137b0:	e025      	b.n	80137fe <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	4a16      	ldr	r2, [pc, #88]	; (8013810 <SDMMC_GetCmdResp6+0xec>)
 80137b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80137b8:	2100      	movs	r1, #0
 80137ba:	68f8      	ldr	r0, [r7, #12]
 80137bc:	f7ff fb7b 	bl	8012eb6 <SDMMC_GetResponse>
 80137c0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80137c2:	697b      	ldr	r3, [r7, #20]
 80137c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d106      	bne.n	80137da <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80137cc:	697b      	ldr	r3, [r7, #20]
 80137ce:	0c1b      	lsrs	r3, r3, #16
 80137d0:	b29a      	uxth	r2, r3
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80137d6:	2300      	movs	r3, #0
 80137d8:	e011      	b.n	80137fe <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80137da:	697b      	ldr	r3, [r7, #20]
 80137dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d002      	beq.n	80137ea <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80137e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80137e8:	e009      	b.n	80137fe <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80137ea:	697b      	ldr	r3, [r7, #20]
 80137ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d002      	beq.n	80137fa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80137f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80137f8:	e001      	b.n	80137fe <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80137fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80137fe:	4618      	mov	r0, r3
 8013800:	3720      	adds	r7, #32
 8013802:	46bd      	mov	sp, r7
 8013804:	bd80      	pop	{r7, pc}
 8013806:	bf00      	nop
 8013808:	24000100 	.word	0x24000100
 801380c:	10624dd3 	.word	0x10624dd3
 8013810:	002000c5 	.word	0x002000c5

08013814 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8013814:	b480      	push	{r7}
 8013816:	b085      	sub	sp, #20
 8013818:	af00      	add	r7, sp, #0
 801381a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801381c:	4b22      	ldr	r3, [pc, #136]	; (80138a8 <SDMMC_GetCmdResp7+0x94>)
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	4a22      	ldr	r2, [pc, #136]	; (80138ac <SDMMC_GetCmdResp7+0x98>)
 8013822:	fba2 2303 	umull	r2, r3, r2, r3
 8013826:	0a5b      	lsrs	r3, r3, #9
 8013828:	f241 3288 	movw	r2, #5000	; 0x1388
 801382c:	fb02 f303 	mul.w	r3, r2, r3
 8013830:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	1e5a      	subs	r2, r3, #1
 8013836:	60fa      	str	r2, [r7, #12]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d102      	bne.n	8013842 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801383c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013840:	e02c      	b.n	801389c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013846:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013848:	68bb      	ldr	r3, [r7, #8]
 801384a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801384e:	2b00      	cmp	r3, #0
 8013850:	d0ef      	beq.n	8013832 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013852:	68bb      	ldr	r3, [r7, #8]
 8013854:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013858:	2b00      	cmp	r3, #0
 801385a:	d1ea      	bne.n	8013832 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013860:	f003 0304 	and.w	r3, r3, #4
 8013864:	2b00      	cmp	r3, #0
 8013866:	d004      	beq.n	8013872 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	2204      	movs	r2, #4
 801386c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801386e:	2304      	movs	r3, #4
 8013870:	e014      	b.n	801389c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013876:	f003 0301 	and.w	r3, r3, #1
 801387a:	2b00      	cmp	r3, #0
 801387c:	d004      	beq.n	8013888 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	2201      	movs	r2, #1
 8013882:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013884:	2301      	movs	r3, #1
 8013886:	e009      	b.n	801389c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801388c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013890:	2b00      	cmp	r3, #0
 8013892:	d002      	beq.n	801389a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	2240      	movs	r2, #64	; 0x40
 8013898:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801389a:	2300      	movs	r3, #0

}
 801389c:	4618      	mov	r0, r3
 801389e:	3714      	adds	r7, #20
 80138a0:	46bd      	mov	sp, r7
 80138a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a6:	4770      	bx	lr
 80138a8:	24000100 	.word	0x24000100
 80138ac:	10624dd3 	.word	0x10624dd3

080138b0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80138b0:	b480      	push	{r7}
 80138b2:	b085      	sub	sp, #20
 80138b4:	af00      	add	r7, sp, #0
 80138b6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80138b8:	4b11      	ldr	r3, [pc, #68]	; (8013900 <SDMMC_GetCmdError+0x50>)
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	4a11      	ldr	r2, [pc, #68]	; (8013904 <SDMMC_GetCmdError+0x54>)
 80138be:	fba2 2303 	umull	r2, r3, r2, r3
 80138c2:	0a5b      	lsrs	r3, r3, #9
 80138c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80138c8:	fb02 f303 	mul.w	r3, r2, r3
 80138cc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	1e5a      	subs	r2, r3, #1
 80138d2:	60fa      	str	r2, [r7, #12]
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d102      	bne.n	80138de <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80138d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80138dc:	e009      	b.n	80138f2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80138e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d0f1      	beq.n	80138ce <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	4a06      	ldr	r2, [pc, #24]	; (8013908 <SDMMC_GetCmdError+0x58>)
 80138ee:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80138f0:	2300      	movs	r3, #0
}
 80138f2:	4618      	mov	r0, r3
 80138f4:	3714      	adds	r7, #20
 80138f6:	46bd      	mov	sp, r7
 80138f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138fc:	4770      	bx	lr
 80138fe:	bf00      	nop
 8013900:	24000100 	.word	0x24000100
 8013904:	10624dd3 	.word	0x10624dd3
 8013908:	002000c5 	.word	0x002000c5

0801390c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801390c:	b084      	sub	sp, #16
 801390e:	b580      	push	{r7, lr}
 8013910:	b084      	sub	sp, #16
 8013912:	af00      	add	r7, sp, #0
 8013914:	6078      	str	r0, [r7, #4]
 8013916:	f107 001c 	add.w	r0, r7, #28
 801391a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801391e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013920:	2b01      	cmp	r3, #1
 8013922:	d120      	bne.n	8013966 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013928:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	68da      	ldr	r2, [r3, #12]
 8013934:	4b2a      	ldr	r3, [pc, #168]	; (80139e0 <USB_CoreInit+0xd4>)
 8013936:	4013      	ands	r3, r2
 8013938:	687a      	ldr	r2, [r7, #4]
 801393a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	68db      	ldr	r3, [r3, #12]
 8013940:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8013948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801394a:	2b01      	cmp	r3, #1
 801394c:	d105      	bne.n	801395a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	68db      	ldr	r3, [r3, #12]
 8013952:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801395a:	6878      	ldr	r0, [r7, #4]
 801395c:	f001 faf8 	bl	8014f50 <USB_CoreReset>
 8013960:	4603      	mov	r3, r0
 8013962:	73fb      	strb	r3, [r7, #15]
 8013964:	e01a      	b.n	801399c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	68db      	ldr	r3, [r3, #12]
 801396a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013972:	6878      	ldr	r0, [r7, #4]
 8013974:	f001 faec 	bl	8014f50 <USB_CoreReset>
 8013978:	4603      	mov	r3, r0
 801397a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801397c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801397e:	2b00      	cmp	r3, #0
 8013980:	d106      	bne.n	8013990 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013986:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	639a      	str	r2, [r3, #56]	; 0x38
 801398e:	e005      	b.n	801399c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013994:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801399e:	2b01      	cmp	r3, #1
 80139a0:	d116      	bne.n	80139d0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80139a6:	b29a      	uxth	r2, r3
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80139b0:	4b0c      	ldr	r3, [pc, #48]	; (80139e4 <USB_CoreInit+0xd8>)
 80139b2:	4313      	orrs	r3, r2
 80139b4:	687a      	ldr	r2, [r7, #4]
 80139b6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	689b      	ldr	r3, [r3, #8]
 80139bc:	f043 0206 	orr.w	r2, r3, #6
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	689b      	ldr	r3, [r3, #8]
 80139c8:	f043 0220 	orr.w	r2, r3, #32
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80139d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80139d2:	4618      	mov	r0, r3
 80139d4:	3710      	adds	r7, #16
 80139d6:	46bd      	mov	sp, r7
 80139d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80139dc:	b004      	add	sp, #16
 80139de:	4770      	bx	lr
 80139e0:	ffbdffbf 	.word	0xffbdffbf
 80139e4:	03ee0000 	.word	0x03ee0000

080139e8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80139e8:	b480      	push	{r7}
 80139ea:	b087      	sub	sp, #28
 80139ec:	af00      	add	r7, sp, #0
 80139ee:	60f8      	str	r0, [r7, #12]
 80139f0:	60b9      	str	r1, [r7, #8]
 80139f2:	4613      	mov	r3, r2
 80139f4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80139f6:	79fb      	ldrb	r3, [r7, #7]
 80139f8:	2b02      	cmp	r3, #2
 80139fa:	d165      	bne.n	8013ac8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80139fc:	68bb      	ldr	r3, [r7, #8]
 80139fe:	4a41      	ldr	r2, [pc, #260]	; (8013b04 <USB_SetTurnaroundTime+0x11c>)
 8013a00:	4293      	cmp	r3, r2
 8013a02:	d906      	bls.n	8013a12 <USB_SetTurnaroundTime+0x2a>
 8013a04:	68bb      	ldr	r3, [r7, #8]
 8013a06:	4a40      	ldr	r2, [pc, #256]	; (8013b08 <USB_SetTurnaroundTime+0x120>)
 8013a08:	4293      	cmp	r3, r2
 8013a0a:	d202      	bcs.n	8013a12 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8013a0c:	230f      	movs	r3, #15
 8013a0e:	617b      	str	r3, [r7, #20]
 8013a10:	e062      	b.n	8013ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8013a12:	68bb      	ldr	r3, [r7, #8]
 8013a14:	4a3c      	ldr	r2, [pc, #240]	; (8013b08 <USB_SetTurnaroundTime+0x120>)
 8013a16:	4293      	cmp	r3, r2
 8013a18:	d306      	bcc.n	8013a28 <USB_SetTurnaroundTime+0x40>
 8013a1a:	68bb      	ldr	r3, [r7, #8]
 8013a1c:	4a3b      	ldr	r2, [pc, #236]	; (8013b0c <USB_SetTurnaroundTime+0x124>)
 8013a1e:	4293      	cmp	r3, r2
 8013a20:	d202      	bcs.n	8013a28 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8013a22:	230e      	movs	r3, #14
 8013a24:	617b      	str	r3, [r7, #20]
 8013a26:	e057      	b.n	8013ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8013a28:	68bb      	ldr	r3, [r7, #8]
 8013a2a:	4a38      	ldr	r2, [pc, #224]	; (8013b0c <USB_SetTurnaroundTime+0x124>)
 8013a2c:	4293      	cmp	r3, r2
 8013a2e:	d306      	bcc.n	8013a3e <USB_SetTurnaroundTime+0x56>
 8013a30:	68bb      	ldr	r3, [r7, #8]
 8013a32:	4a37      	ldr	r2, [pc, #220]	; (8013b10 <USB_SetTurnaroundTime+0x128>)
 8013a34:	4293      	cmp	r3, r2
 8013a36:	d202      	bcs.n	8013a3e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8013a38:	230d      	movs	r3, #13
 8013a3a:	617b      	str	r3, [r7, #20]
 8013a3c:	e04c      	b.n	8013ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8013a3e:	68bb      	ldr	r3, [r7, #8]
 8013a40:	4a33      	ldr	r2, [pc, #204]	; (8013b10 <USB_SetTurnaroundTime+0x128>)
 8013a42:	4293      	cmp	r3, r2
 8013a44:	d306      	bcc.n	8013a54 <USB_SetTurnaroundTime+0x6c>
 8013a46:	68bb      	ldr	r3, [r7, #8]
 8013a48:	4a32      	ldr	r2, [pc, #200]	; (8013b14 <USB_SetTurnaroundTime+0x12c>)
 8013a4a:	4293      	cmp	r3, r2
 8013a4c:	d802      	bhi.n	8013a54 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8013a4e:	230c      	movs	r3, #12
 8013a50:	617b      	str	r3, [r7, #20]
 8013a52:	e041      	b.n	8013ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8013a54:	68bb      	ldr	r3, [r7, #8]
 8013a56:	4a2f      	ldr	r2, [pc, #188]	; (8013b14 <USB_SetTurnaroundTime+0x12c>)
 8013a58:	4293      	cmp	r3, r2
 8013a5a:	d906      	bls.n	8013a6a <USB_SetTurnaroundTime+0x82>
 8013a5c:	68bb      	ldr	r3, [r7, #8]
 8013a5e:	4a2e      	ldr	r2, [pc, #184]	; (8013b18 <USB_SetTurnaroundTime+0x130>)
 8013a60:	4293      	cmp	r3, r2
 8013a62:	d802      	bhi.n	8013a6a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8013a64:	230b      	movs	r3, #11
 8013a66:	617b      	str	r3, [r7, #20]
 8013a68:	e036      	b.n	8013ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8013a6a:	68bb      	ldr	r3, [r7, #8]
 8013a6c:	4a2a      	ldr	r2, [pc, #168]	; (8013b18 <USB_SetTurnaroundTime+0x130>)
 8013a6e:	4293      	cmp	r3, r2
 8013a70:	d906      	bls.n	8013a80 <USB_SetTurnaroundTime+0x98>
 8013a72:	68bb      	ldr	r3, [r7, #8]
 8013a74:	4a29      	ldr	r2, [pc, #164]	; (8013b1c <USB_SetTurnaroundTime+0x134>)
 8013a76:	4293      	cmp	r3, r2
 8013a78:	d802      	bhi.n	8013a80 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8013a7a:	230a      	movs	r3, #10
 8013a7c:	617b      	str	r3, [r7, #20]
 8013a7e:	e02b      	b.n	8013ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8013a80:	68bb      	ldr	r3, [r7, #8]
 8013a82:	4a26      	ldr	r2, [pc, #152]	; (8013b1c <USB_SetTurnaroundTime+0x134>)
 8013a84:	4293      	cmp	r3, r2
 8013a86:	d906      	bls.n	8013a96 <USB_SetTurnaroundTime+0xae>
 8013a88:	68bb      	ldr	r3, [r7, #8]
 8013a8a:	4a25      	ldr	r2, [pc, #148]	; (8013b20 <USB_SetTurnaroundTime+0x138>)
 8013a8c:	4293      	cmp	r3, r2
 8013a8e:	d202      	bcs.n	8013a96 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8013a90:	2309      	movs	r3, #9
 8013a92:	617b      	str	r3, [r7, #20]
 8013a94:	e020      	b.n	8013ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8013a96:	68bb      	ldr	r3, [r7, #8]
 8013a98:	4a21      	ldr	r2, [pc, #132]	; (8013b20 <USB_SetTurnaroundTime+0x138>)
 8013a9a:	4293      	cmp	r3, r2
 8013a9c:	d306      	bcc.n	8013aac <USB_SetTurnaroundTime+0xc4>
 8013a9e:	68bb      	ldr	r3, [r7, #8]
 8013aa0:	4a20      	ldr	r2, [pc, #128]	; (8013b24 <USB_SetTurnaroundTime+0x13c>)
 8013aa2:	4293      	cmp	r3, r2
 8013aa4:	d802      	bhi.n	8013aac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8013aa6:	2308      	movs	r3, #8
 8013aa8:	617b      	str	r3, [r7, #20]
 8013aaa:	e015      	b.n	8013ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8013aac:	68bb      	ldr	r3, [r7, #8]
 8013aae:	4a1d      	ldr	r2, [pc, #116]	; (8013b24 <USB_SetTurnaroundTime+0x13c>)
 8013ab0:	4293      	cmp	r3, r2
 8013ab2:	d906      	bls.n	8013ac2 <USB_SetTurnaroundTime+0xda>
 8013ab4:	68bb      	ldr	r3, [r7, #8]
 8013ab6:	4a1c      	ldr	r2, [pc, #112]	; (8013b28 <USB_SetTurnaroundTime+0x140>)
 8013ab8:	4293      	cmp	r3, r2
 8013aba:	d202      	bcs.n	8013ac2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8013abc:	2307      	movs	r3, #7
 8013abe:	617b      	str	r3, [r7, #20]
 8013ac0:	e00a      	b.n	8013ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8013ac2:	2306      	movs	r3, #6
 8013ac4:	617b      	str	r3, [r7, #20]
 8013ac6:	e007      	b.n	8013ad8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8013ac8:	79fb      	ldrb	r3, [r7, #7]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d102      	bne.n	8013ad4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8013ace:	2309      	movs	r3, #9
 8013ad0:	617b      	str	r3, [r7, #20]
 8013ad2:	e001      	b.n	8013ad8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8013ad4:	2309      	movs	r3, #9
 8013ad6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	68db      	ldr	r3, [r3, #12]
 8013adc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	68da      	ldr	r2, [r3, #12]
 8013ae8:	697b      	ldr	r3, [r7, #20]
 8013aea:	029b      	lsls	r3, r3, #10
 8013aec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8013af0:	431a      	orrs	r2, r3
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8013af6:	2300      	movs	r3, #0
}
 8013af8:	4618      	mov	r0, r3
 8013afa:	371c      	adds	r7, #28
 8013afc:	46bd      	mov	sp, r7
 8013afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b02:	4770      	bx	lr
 8013b04:	00d8acbf 	.word	0x00d8acbf
 8013b08:	00e4e1c0 	.word	0x00e4e1c0
 8013b0c:	00f42400 	.word	0x00f42400
 8013b10:	01067380 	.word	0x01067380
 8013b14:	011a499f 	.word	0x011a499f
 8013b18:	01312cff 	.word	0x01312cff
 8013b1c:	014ca43f 	.word	0x014ca43f
 8013b20:	016e3600 	.word	0x016e3600
 8013b24:	01a6ab1f 	.word	0x01a6ab1f
 8013b28:	01e84800 	.word	0x01e84800

08013b2c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013b2c:	b480      	push	{r7}
 8013b2e:	b083      	sub	sp, #12
 8013b30:	af00      	add	r7, sp, #0
 8013b32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	689b      	ldr	r3, [r3, #8]
 8013b38:	f043 0201 	orr.w	r2, r3, #1
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013b40:	2300      	movs	r3, #0
}
 8013b42:	4618      	mov	r0, r3
 8013b44:	370c      	adds	r7, #12
 8013b46:	46bd      	mov	sp, r7
 8013b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b4c:	4770      	bx	lr

08013b4e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013b4e:	b480      	push	{r7}
 8013b50:	b083      	sub	sp, #12
 8013b52:	af00      	add	r7, sp, #0
 8013b54:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	689b      	ldr	r3, [r3, #8]
 8013b5a:	f023 0201 	bic.w	r2, r3, #1
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013b62:	2300      	movs	r3, #0
}
 8013b64:	4618      	mov	r0, r3
 8013b66:	370c      	adds	r7, #12
 8013b68:	46bd      	mov	sp, r7
 8013b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b6e:	4770      	bx	lr

08013b70 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8013b70:	b580      	push	{r7, lr}
 8013b72:	b084      	sub	sp, #16
 8013b74:	af00      	add	r7, sp, #0
 8013b76:	6078      	str	r0, [r7, #4]
 8013b78:	460b      	mov	r3, r1
 8013b7a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8013b7c:	2300      	movs	r3, #0
 8013b7e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	68db      	ldr	r3, [r3, #12]
 8013b84:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8013b8c:	78fb      	ldrb	r3, [r7, #3]
 8013b8e:	2b01      	cmp	r3, #1
 8013b90:	d115      	bne.n	8013bbe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	68db      	ldr	r3, [r3, #12]
 8013b96:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8013b9e:	2001      	movs	r0, #1
 8013ba0:	f7f0 f8ac 	bl	8003cfc <HAL_Delay>
      ms++;
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	3301      	adds	r3, #1
 8013ba8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8013baa:	6878      	ldr	r0, [r7, #4]
 8013bac:	f001 f93f 	bl	8014e2e <USB_GetMode>
 8013bb0:	4603      	mov	r3, r0
 8013bb2:	2b01      	cmp	r3, #1
 8013bb4:	d01e      	beq.n	8013bf4 <USB_SetCurrentMode+0x84>
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	2b31      	cmp	r3, #49	; 0x31
 8013bba:	d9f0      	bls.n	8013b9e <USB_SetCurrentMode+0x2e>
 8013bbc:	e01a      	b.n	8013bf4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8013bbe:	78fb      	ldrb	r3, [r7, #3]
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d115      	bne.n	8013bf0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	68db      	ldr	r3, [r3, #12]
 8013bc8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8013bd0:	2001      	movs	r0, #1
 8013bd2:	f7f0 f893 	bl	8003cfc <HAL_Delay>
      ms++;
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	3301      	adds	r3, #1
 8013bda:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8013bdc:	6878      	ldr	r0, [r7, #4]
 8013bde:	f001 f926 	bl	8014e2e <USB_GetMode>
 8013be2:	4603      	mov	r3, r0
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d005      	beq.n	8013bf4 <USB_SetCurrentMode+0x84>
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	2b31      	cmp	r3, #49	; 0x31
 8013bec:	d9f0      	bls.n	8013bd0 <USB_SetCurrentMode+0x60>
 8013bee:	e001      	b.n	8013bf4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8013bf0:	2301      	movs	r3, #1
 8013bf2:	e005      	b.n	8013c00 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	2b32      	cmp	r3, #50	; 0x32
 8013bf8:	d101      	bne.n	8013bfe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8013bfa:	2301      	movs	r3, #1
 8013bfc:	e000      	b.n	8013c00 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8013bfe:	2300      	movs	r3, #0
}
 8013c00:	4618      	mov	r0, r3
 8013c02:	3710      	adds	r7, #16
 8013c04:	46bd      	mov	sp, r7
 8013c06:	bd80      	pop	{r7, pc}

08013c08 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013c08:	b084      	sub	sp, #16
 8013c0a:	b580      	push	{r7, lr}
 8013c0c:	b086      	sub	sp, #24
 8013c0e:	af00      	add	r7, sp, #0
 8013c10:	6078      	str	r0, [r7, #4]
 8013c12:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8013c16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8013c1a:	2300      	movs	r3, #0
 8013c1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8013c22:	2300      	movs	r3, #0
 8013c24:	613b      	str	r3, [r7, #16]
 8013c26:	e009      	b.n	8013c3c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8013c28:	687a      	ldr	r2, [r7, #4]
 8013c2a:	693b      	ldr	r3, [r7, #16]
 8013c2c:	3340      	adds	r3, #64	; 0x40
 8013c2e:	009b      	lsls	r3, r3, #2
 8013c30:	4413      	add	r3, r2
 8013c32:	2200      	movs	r2, #0
 8013c34:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8013c36:	693b      	ldr	r3, [r7, #16]
 8013c38:	3301      	adds	r3, #1
 8013c3a:	613b      	str	r3, [r7, #16]
 8013c3c:	693b      	ldr	r3, [r7, #16]
 8013c3e:	2b0e      	cmp	r3, #14
 8013c40:	d9f2      	bls.n	8013c28 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8013c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d11c      	bne.n	8013c82 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c4e:	685b      	ldr	r3, [r3, #4]
 8013c50:	68fa      	ldr	r2, [r7, #12]
 8013c52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013c56:	f043 0302 	orr.w	r3, r3, #2
 8013c5a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c60:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	601a      	str	r2, [r3, #0]
 8013c80:	e005      	b.n	8013c8e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c86:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013c94:	461a      	mov	r2, r3
 8013c96:	2300      	movs	r3, #0
 8013c98:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ca0:	4619      	mov	r1, r3
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ca8:	461a      	mov	r2, r3
 8013caa:	680b      	ldr	r3, [r1, #0]
 8013cac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cb0:	2b01      	cmp	r3, #1
 8013cb2:	d10c      	bne.n	8013cce <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8013cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d104      	bne.n	8013cc4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8013cba:	2100      	movs	r1, #0
 8013cbc:	6878      	ldr	r0, [r7, #4]
 8013cbe:	f000 f965 	bl	8013f8c <USB_SetDevSpeed>
 8013cc2:	e008      	b.n	8013cd6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8013cc4:	2101      	movs	r1, #1
 8013cc6:	6878      	ldr	r0, [r7, #4]
 8013cc8:	f000 f960 	bl	8013f8c <USB_SetDevSpeed>
 8013ccc:	e003      	b.n	8013cd6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8013cce:	2103      	movs	r1, #3
 8013cd0:	6878      	ldr	r0, [r7, #4]
 8013cd2:	f000 f95b 	bl	8013f8c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8013cd6:	2110      	movs	r1, #16
 8013cd8:	6878      	ldr	r0, [r7, #4]
 8013cda:	f000 f8f3 	bl	8013ec4 <USB_FlushTxFifo>
 8013cde:	4603      	mov	r3, r0
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d001      	beq.n	8013ce8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8013ce4:	2301      	movs	r3, #1
 8013ce6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8013ce8:	6878      	ldr	r0, [r7, #4]
 8013cea:	f000 f91f 	bl	8013f2c <USB_FlushRxFifo>
 8013cee:	4603      	mov	r3, r0
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d001      	beq.n	8013cf8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8013cf4:	2301      	movs	r3, #1
 8013cf6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013cfe:	461a      	mov	r2, r3
 8013d00:	2300      	movs	r3, #0
 8013d02:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d0a:	461a      	mov	r2, r3
 8013d0c:	2300      	movs	r3, #0
 8013d0e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d16:	461a      	mov	r2, r3
 8013d18:	2300      	movs	r3, #0
 8013d1a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013d1c:	2300      	movs	r3, #0
 8013d1e:	613b      	str	r3, [r7, #16]
 8013d20:	e043      	b.n	8013daa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013d22:	693b      	ldr	r3, [r7, #16]
 8013d24:	015a      	lsls	r2, r3, #5
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	4413      	add	r3, r2
 8013d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013d34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013d38:	d118      	bne.n	8013d6c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8013d3a:	693b      	ldr	r3, [r7, #16]
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d10a      	bne.n	8013d56 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8013d40:	693b      	ldr	r3, [r7, #16]
 8013d42:	015a      	lsls	r2, r3, #5
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	4413      	add	r3, r2
 8013d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d4c:	461a      	mov	r2, r3
 8013d4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013d52:	6013      	str	r3, [r2, #0]
 8013d54:	e013      	b.n	8013d7e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8013d56:	693b      	ldr	r3, [r7, #16]
 8013d58:	015a      	lsls	r2, r3, #5
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	4413      	add	r3, r2
 8013d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d62:	461a      	mov	r2, r3
 8013d64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013d68:	6013      	str	r3, [r2, #0]
 8013d6a:	e008      	b.n	8013d7e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8013d6c:	693b      	ldr	r3, [r7, #16]
 8013d6e:	015a      	lsls	r2, r3, #5
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	4413      	add	r3, r2
 8013d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d78:	461a      	mov	r2, r3
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8013d7e:	693b      	ldr	r3, [r7, #16]
 8013d80:	015a      	lsls	r2, r3, #5
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	4413      	add	r3, r2
 8013d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d8a:	461a      	mov	r2, r3
 8013d8c:	2300      	movs	r3, #0
 8013d8e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8013d90:	693b      	ldr	r3, [r7, #16]
 8013d92:	015a      	lsls	r2, r3, #5
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	4413      	add	r3, r2
 8013d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d9c:	461a      	mov	r2, r3
 8013d9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013da2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013da4:	693b      	ldr	r3, [r7, #16]
 8013da6:	3301      	adds	r3, #1
 8013da8:	613b      	str	r3, [r7, #16]
 8013daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dac:	693a      	ldr	r2, [r7, #16]
 8013dae:	429a      	cmp	r2, r3
 8013db0:	d3b7      	bcc.n	8013d22 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013db2:	2300      	movs	r3, #0
 8013db4:	613b      	str	r3, [r7, #16]
 8013db6:	e043      	b.n	8013e40 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013db8:	693b      	ldr	r3, [r7, #16]
 8013dba:	015a      	lsls	r2, r3, #5
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	4413      	add	r3, r2
 8013dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013dce:	d118      	bne.n	8013e02 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8013dd0:	693b      	ldr	r3, [r7, #16]
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d10a      	bne.n	8013dec <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8013dd6:	693b      	ldr	r3, [r7, #16]
 8013dd8:	015a      	lsls	r2, r3, #5
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	4413      	add	r3, r2
 8013dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013de2:	461a      	mov	r2, r3
 8013de4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013de8:	6013      	str	r3, [r2, #0]
 8013dea:	e013      	b.n	8013e14 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8013dec:	693b      	ldr	r3, [r7, #16]
 8013dee:	015a      	lsls	r2, r3, #5
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	4413      	add	r3, r2
 8013df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013df8:	461a      	mov	r2, r3
 8013dfa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013dfe:	6013      	str	r3, [r2, #0]
 8013e00:	e008      	b.n	8013e14 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8013e02:	693b      	ldr	r3, [r7, #16]
 8013e04:	015a      	lsls	r2, r3, #5
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	4413      	add	r3, r2
 8013e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e0e:	461a      	mov	r2, r3
 8013e10:	2300      	movs	r3, #0
 8013e12:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8013e14:	693b      	ldr	r3, [r7, #16]
 8013e16:	015a      	lsls	r2, r3, #5
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	4413      	add	r3, r2
 8013e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e20:	461a      	mov	r2, r3
 8013e22:	2300      	movs	r3, #0
 8013e24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013e26:	693b      	ldr	r3, [r7, #16]
 8013e28:	015a      	lsls	r2, r3, #5
 8013e2a:	68fb      	ldr	r3, [r7, #12]
 8013e2c:	4413      	add	r3, r2
 8013e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e32:	461a      	mov	r2, r3
 8013e34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013e38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013e3a:	693b      	ldr	r3, [r7, #16]
 8013e3c:	3301      	adds	r3, #1
 8013e3e:	613b      	str	r3, [r7, #16]
 8013e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e42:	693a      	ldr	r2, [r7, #16]
 8013e44:	429a      	cmp	r2, r3
 8013e46:	d3b7      	bcc.n	8013db8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e4e:	691b      	ldr	r3, [r3, #16]
 8013e50:	68fa      	ldr	r2, [r7, #12]
 8013e52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013e56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013e5a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	2200      	movs	r2, #0
 8013e60:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8013e68:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8013e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d105      	bne.n	8013e7c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	699b      	ldr	r3, [r3, #24]
 8013e74:	f043 0210 	orr.w	r2, r3, #16
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	699a      	ldr	r2, [r3, #24]
 8013e80:	4b0e      	ldr	r3, [pc, #56]	; (8013ebc <USB_DevInit+0x2b4>)
 8013e82:	4313      	orrs	r3, r2
 8013e84:	687a      	ldr	r2, [r7, #4]
 8013e86:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d005      	beq.n	8013e9a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	699b      	ldr	r3, [r3, #24]
 8013e92:	f043 0208 	orr.w	r2, r3, #8
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8013e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e9c:	2b01      	cmp	r3, #1
 8013e9e:	d105      	bne.n	8013eac <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	699a      	ldr	r2, [r3, #24]
 8013ea4:	4b06      	ldr	r3, [pc, #24]	; (8013ec0 <USB_DevInit+0x2b8>)
 8013ea6:	4313      	orrs	r3, r2
 8013ea8:	687a      	ldr	r2, [r7, #4]
 8013eaa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8013eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8013eae:	4618      	mov	r0, r3
 8013eb0:	3718      	adds	r7, #24
 8013eb2:	46bd      	mov	sp, r7
 8013eb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013eb8:	b004      	add	sp, #16
 8013eba:	4770      	bx	lr
 8013ebc:	803c3800 	.word	0x803c3800
 8013ec0:	40000004 	.word	0x40000004

08013ec4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8013ec4:	b480      	push	{r7}
 8013ec6:	b085      	sub	sp, #20
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	6078      	str	r0, [r7, #4]
 8013ecc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013ece:	2300      	movs	r3, #0
 8013ed0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	3301      	adds	r3, #1
 8013ed6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	4a13      	ldr	r2, [pc, #76]	; (8013f28 <USB_FlushTxFifo+0x64>)
 8013edc:	4293      	cmp	r3, r2
 8013ede:	d901      	bls.n	8013ee4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8013ee0:	2303      	movs	r3, #3
 8013ee2:	e01b      	b.n	8013f1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	691b      	ldr	r3, [r3, #16]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	daf2      	bge.n	8013ed2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8013eec:	2300      	movs	r3, #0
 8013eee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013ef0:	683b      	ldr	r3, [r7, #0]
 8013ef2:	019b      	lsls	r3, r3, #6
 8013ef4:	f043 0220 	orr.w	r2, r3, #32
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	3301      	adds	r3, #1
 8013f00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	4a08      	ldr	r2, [pc, #32]	; (8013f28 <USB_FlushTxFifo+0x64>)
 8013f06:	4293      	cmp	r3, r2
 8013f08:	d901      	bls.n	8013f0e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8013f0a:	2303      	movs	r3, #3
 8013f0c:	e006      	b.n	8013f1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	691b      	ldr	r3, [r3, #16]
 8013f12:	f003 0320 	and.w	r3, r3, #32
 8013f16:	2b20      	cmp	r3, #32
 8013f18:	d0f0      	beq.n	8013efc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8013f1a:	2300      	movs	r3, #0
}
 8013f1c:	4618      	mov	r0, r3
 8013f1e:	3714      	adds	r7, #20
 8013f20:	46bd      	mov	sp, r7
 8013f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f26:	4770      	bx	lr
 8013f28:	00030d40 	.word	0x00030d40

08013f2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8013f2c:	b480      	push	{r7}
 8013f2e:	b085      	sub	sp, #20
 8013f30:	af00      	add	r7, sp, #0
 8013f32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013f34:	2300      	movs	r3, #0
 8013f36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	3301      	adds	r3, #1
 8013f3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	4a11      	ldr	r2, [pc, #68]	; (8013f88 <USB_FlushRxFifo+0x5c>)
 8013f42:	4293      	cmp	r3, r2
 8013f44:	d901      	bls.n	8013f4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8013f46:	2303      	movs	r3, #3
 8013f48:	e018      	b.n	8013f7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	691b      	ldr	r3, [r3, #16]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	daf2      	bge.n	8013f38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8013f52:	2300      	movs	r3, #0
 8013f54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	2210      	movs	r2, #16
 8013f5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	3301      	adds	r3, #1
 8013f60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	4a08      	ldr	r2, [pc, #32]	; (8013f88 <USB_FlushRxFifo+0x5c>)
 8013f66:	4293      	cmp	r3, r2
 8013f68:	d901      	bls.n	8013f6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8013f6a:	2303      	movs	r3, #3
 8013f6c:	e006      	b.n	8013f7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	691b      	ldr	r3, [r3, #16]
 8013f72:	f003 0310 	and.w	r3, r3, #16
 8013f76:	2b10      	cmp	r3, #16
 8013f78:	d0f0      	beq.n	8013f5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8013f7a:	2300      	movs	r3, #0
}
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	3714      	adds	r7, #20
 8013f80:	46bd      	mov	sp, r7
 8013f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f86:	4770      	bx	lr
 8013f88:	00030d40 	.word	0x00030d40

08013f8c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013f8c:	b480      	push	{r7}
 8013f8e:	b085      	sub	sp, #20
 8013f90:	af00      	add	r7, sp, #0
 8013f92:	6078      	str	r0, [r7, #4]
 8013f94:	460b      	mov	r3, r1
 8013f96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013fa2:	681a      	ldr	r2, [r3, #0]
 8013fa4:	78fb      	ldrb	r3, [r7, #3]
 8013fa6:	68f9      	ldr	r1, [r7, #12]
 8013fa8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013fac:	4313      	orrs	r3, r2
 8013fae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8013fb0:	2300      	movs	r3, #0
}
 8013fb2:	4618      	mov	r0, r3
 8013fb4:	3714      	adds	r7, #20
 8013fb6:	46bd      	mov	sp, r7
 8013fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fbc:	4770      	bx	lr

08013fbe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8013fbe:	b480      	push	{r7}
 8013fc0:	b087      	sub	sp, #28
 8013fc2:	af00      	add	r7, sp, #0
 8013fc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8013fca:	693b      	ldr	r3, [r7, #16]
 8013fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013fd0:	689b      	ldr	r3, [r3, #8]
 8013fd2:	f003 0306 	and.w	r3, r3, #6
 8013fd6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d102      	bne.n	8013fe4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8013fde:	2300      	movs	r3, #0
 8013fe0:	75fb      	strb	r3, [r7, #23]
 8013fe2:	e00a      	b.n	8013ffa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	2b02      	cmp	r3, #2
 8013fe8:	d002      	beq.n	8013ff0 <USB_GetDevSpeed+0x32>
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	2b06      	cmp	r3, #6
 8013fee:	d102      	bne.n	8013ff6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8013ff0:	2302      	movs	r3, #2
 8013ff2:	75fb      	strb	r3, [r7, #23]
 8013ff4:	e001      	b.n	8013ffa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8013ff6:	230f      	movs	r3, #15
 8013ff8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8013ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ffc:	4618      	mov	r0, r3
 8013ffe:	371c      	adds	r7, #28
 8014000:	46bd      	mov	sp, r7
 8014002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014006:	4770      	bx	lr

08014008 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014008:	b480      	push	{r7}
 801400a:	b085      	sub	sp, #20
 801400c:	af00      	add	r7, sp, #0
 801400e:	6078      	str	r0, [r7, #4]
 8014010:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014016:	683b      	ldr	r3, [r7, #0]
 8014018:	781b      	ldrb	r3, [r3, #0]
 801401a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801401c:	683b      	ldr	r3, [r7, #0]
 801401e:	785b      	ldrb	r3, [r3, #1]
 8014020:	2b01      	cmp	r3, #1
 8014022:	d139      	bne.n	8014098 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801402a:	69da      	ldr	r2, [r3, #28]
 801402c:	683b      	ldr	r3, [r7, #0]
 801402e:	781b      	ldrb	r3, [r3, #0]
 8014030:	f003 030f 	and.w	r3, r3, #15
 8014034:	2101      	movs	r1, #1
 8014036:	fa01 f303 	lsl.w	r3, r1, r3
 801403a:	b29b      	uxth	r3, r3
 801403c:	68f9      	ldr	r1, [r7, #12]
 801403e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014042:	4313      	orrs	r3, r2
 8014044:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8014046:	68bb      	ldr	r3, [r7, #8]
 8014048:	015a      	lsls	r2, r3, #5
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	4413      	add	r3, r2
 801404e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014058:	2b00      	cmp	r3, #0
 801405a:	d153      	bne.n	8014104 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801405c:	68bb      	ldr	r3, [r7, #8]
 801405e:	015a      	lsls	r2, r3, #5
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	4413      	add	r3, r2
 8014064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014068:	681a      	ldr	r2, [r3, #0]
 801406a:	683b      	ldr	r3, [r7, #0]
 801406c:	689b      	ldr	r3, [r3, #8]
 801406e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8014072:	683b      	ldr	r3, [r7, #0]
 8014074:	791b      	ldrb	r3, [r3, #4]
 8014076:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014078:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801407a:	68bb      	ldr	r3, [r7, #8]
 801407c:	059b      	lsls	r3, r3, #22
 801407e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014080:	431a      	orrs	r2, r3
 8014082:	68bb      	ldr	r3, [r7, #8]
 8014084:	0159      	lsls	r1, r3, #5
 8014086:	68fb      	ldr	r3, [r7, #12]
 8014088:	440b      	add	r3, r1
 801408a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801408e:	4619      	mov	r1, r3
 8014090:	4b20      	ldr	r3, [pc, #128]	; (8014114 <USB_ActivateEndpoint+0x10c>)
 8014092:	4313      	orrs	r3, r2
 8014094:	600b      	str	r3, [r1, #0]
 8014096:	e035      	b.n	8014104 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801409e:	69da      	ldr	r2, [r3, #28]
 80140a0:	683b      	ldr	r3, [r7, #0]
 80140a2:	781b      	ldrb	r3, [r3, #0]
 80140a4:	f003 030f 	and.w	r3, r3, #15
 80140a8:	2101      	movs	r1, #1
 80140aa:	fa01 f303 	lsl.w	r3, r1, r3
 80140ae:	041b      	lsls	r3, r3, #16
 80140b0:	68f9      	ldr	r1, [r7, #12]
 80140b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80140b6:	4313      	orrs	r3, r2
 80140b8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80140ba:	68bb      	ldr	r3, [r7, #8]
 80140bc:	015a      	lsls	r2, r3, #5
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	4413      	add	r3, r2
 80140c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d119      	bne.n	8014104 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80140d0:	68bb      	ldr	r3, [r7, #8]
 80140d2:	015a      	lsls	r2, r3, #5
 80140d4:	68fb      	ldr	r3, [r7, #12]
 80140d6:	4413      	add	r3, r2
 80140d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140dc:	681a      	ldr	r2, [r3, #0]
 80140de:	683b      	ldr	r3, [r7, #0]
 80140e0:	689b      	ldr	r3, [r3, #8]
 80140e2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80140e6:	683b      	ldr	r3, [r7, #0]
 80140e8:	791b      	ldrb	r3, [r3, #4]
 80140ea:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80140ec:	430b      	orrs	r3, r1
 80140ee:	431a      	orrs	r2, r3
 80140f0:	68bb      	ldr	r3, [r7, #8]
 80140f2:	0159      	lsls	r1, r3, #5
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	440b      	add	r3, r1
 80140f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140fc:	4619      	mov	r1, r3
 80140fe:	4b05      	ldr	r3, [pc, #20]	; (8014114 <USB_ActivateEndpoint+0x10c>)
 8014100:	4313      	orrs	r3, r2
 8014102:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8014104:	2300      	movs	r3, #0
}
 8014106:	4618      	mov	r0, r3
 8014108:	3714      	adds	r7, #20
 801410a:	46bd      	mov	sp, r7
 801410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014110:	4770      	bx	lr
 8014112:	bf00      	nop
 8014114:	10008000 	.word	0x10008000

08014118 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014118:	b480      	push	{r7}
 801411a:	b085      	sub	sp, #20
 801411c:	af00      	add	r7, sp, #0
 801411e:	6078      	str	r0, [r7, #4]
 8014120:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014126:	683b      	ldr	r3, [r7, #0]
 8014128:	781b      	ldrb	r3, [r3, #0]
 801412a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801412c:	683b      	ldr	r3, [r7, #0]
 801412e:	785b      	ldrb	r3, [r3, #1]
 8014130:	2b01      	cmp	r3, #1
 8014132:	d161      	bne.n	80141f8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014134:	68bb      	ldr	r3, [r7, #8]
 8014136:	015a      	lsls	r2, r3, #5
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	4413      	add	r3, r2
 801413c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014146:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801414a:	d11f      	bne.n	801418c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801414c:	68bb      	ldr	r3, [r7, #8]
 801414e:	015a      	lsls	r2, r3, #5
 8014150:	68fb      	ldr	r3, [r7, #12]
 8014152:	4413      	add	r3, r2
 8014154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	68ba      	ldr	r2, [r7, #8]
 801415c:	0151      	lsls	r1, r2, #5
 801415e:	68fa      	ldr	r2, [r7, #12]
 8014160:	440a      	add	r2, r1
 8014162:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014166:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801416a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801416c:	68bb      	ldr	r3, [r7, #8]
 801416e:	015a      	lsls	r2, r3, #5
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	4413      	add	r3, r2
 8014174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	68ba      	ldr	r2, [r7, #8]
 801417c:	0151      	lsls	r1, r2, #5
 801417e:	68fa      	ldr	r2, [r7, #12]
 8014180:	440a      	add	r2, r1
 8014182:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014186:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801418a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014192:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014194:	683b      	ldr	r3, [r7, #0]
 8014196:	781b      	ldrb	r3, [r3, #0]
 8014198:	f003 030f 	and.w	r3, r3, #15
 801419c:	2101      	movs	r1, #1
 801419e:	fa01 f303 	lsl.w	r3, r1, r3
 80141a2:	b29b      	uxth	r3, r3
 80141a4:	43db      	mvns	r3, r3
 80141a6:	68f9      	ldr	r1, [r7, #12]
 80141a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80141ac:	4013      	ands	r3, r2
 80141ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80141b6:	69da      	ldr	r2, [r3, #28]
 80141b8:	683b      	ldr	r3, [r7, #0]
 80141ba:	781b      	ldrb	r3, [r3, #0]
 80141bc:	f003 030f 	and.w	r3, r3, #15
 80141c0:	2101      	movs	r1, #1
 80141c2:	fa01 f303 	lsl.w	r3, r1, r3
 80141c6:	b29b      	uxth	r3, r3
 80141c8:	43db      	mvns	r3, r3
 80141ca:	68f9      	ldr	r1, [r7, #12]
 80141cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80141d0:	4013      	ands	r3, r2
 80141d2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80141d4:	68bb      	ldr	r3, [r7, #8]
 80141d6:	015a      	lsls	r2, r3, #5
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	4413      	add	r3, r2
 80141dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80141e0:	681a      	ldr	r2, [r3, #0]
 80141e2:	68bb      	ldr	r3, [r7, #8]
 80141e4:	0159      	lsls	r1, r3, #5
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	440b      	add	r3, r1
 80141ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80141ee:	4619      	mov	r1, r3
 80141f0:	4b35      	ldr	r3, [pc, #212]	; (80142c8 <USB_DeactivateEndpoint+0x1b0>)
 80141f2:	4013      	ands	r3, r2
 80141f4:	600b      	str	r3, [r1, #0]
 80141f6:	e060      	b.n	80142ba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80141f8:	68bb      	ldr	r3, [r7, #8]
 80141fa:	015a      	lsls	r2, r3, #5
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	4413      	add	r3, r2
 8014200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801420a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801420e:	d11f      	bne.n	8014250 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8014210:	68bb      	ldr	r3, [r7, #8]
 8014212:	015a      	lsls	r2, r3, #5
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	4413      	add	r3, r2
 8014218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801421c:	681b      	ldr	r3, [r3, #0]
 801421e:	68ba      	ldr	r2, [r7, #8]
 8014220:	0151      	lsls	r1, r2, #5
 8014222:	68fa      	ldr	r2, [r7, #12]
 8014224:	440a      	add	r2, r1
 8014226:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801422a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801422e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8014230:	68bb      	ldr	r3, [r7, #8]
 8014232:	015a      	lsls	r2, r3, #5
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	4413      	add	r3, r2
 8014238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	68ba      	ldr	r2, [r7, #8]
 8014240:	0151      	lsls	r1, r2, #5
 8014242:	68fa      	ldr	r2, [r7, #12]
 8014244:	440a      	add	r2, r1
 8014246:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801424a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801424e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014256:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014258:	683b      	ldr	r3, [r7, #0]
 801425a:	781b      	ldrb	r3, [r3, #0]
 801425c:	f003 030f 	and.w	r3, r3, #15
 8014260:	2101      	movs	r1, #1
 8014262:	fa01 f303 	lsl.w	r3, r1, r3
 8014266:	041b      	lsls	r3, r3, #16
 8014268:	43db      	mvns	r3, r3
 801426a:	68f9      	ldr	r1, [r7, #12]
 801426c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014270:	4013      	ands	r3, r2
 8014272:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801427a:	69da      	ldr	r2, [r3, #28]
 801427c:	683b      	ldr	r3, [r7, #0]
 801427e:	781b      	ldrb	r3, [r3, #0]
 8014280:	f003 030f 	and.w	r3, r3, #15
 8014284:	2101      	movs	r1, #1
 8014286:	fa01 f303 	lsl.w	r3, r1, r3
 801428a:	041b      	lsls	r3, r3, #16
 801428c:	43db      	mvns	r3, r3
 801428e:	68f9      	ldr	r1, [r7, #12]
 8014290:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014294:	4013      	ands	r3, r2
 8014296:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8014298:	68bb      	ldr	r3, [r7, #8]
 801429a:	015a      	lsls	r2, r3, #5
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	4413      	add	r3, r2
 80142a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80142a4:	681a      	ldr	r2, [r3, #0]
 80142a6:	68bb      	ldr	r3, [r7, #8]
 80142a8:	0159      	lsls	r1, r3, #5
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	440b      	add	r3, r1
 80142ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80142b2:	4619      	mov	r1, r3
 80142b4:	4b05      	ldr	r3, [pc, #20]	; (80142cc <USB_DeactivateEndpoint+0x1b4>)
 80142b6:	4013      	ands	r3, r2
 80142b8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80142ba:	2300      	movs	r3, #0
}
 80142bc:	4618      	mov	r0, r3
 80142be:	3714      	adds	r7, #20
 80142c0:	46bd      	mov	sp, r7
 80142c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c6:	4770      	bx	lr
 80142c8:	ec337800 	.word	0xec337800
 80142cc:	eff37800 	.word	0xeff37800

080142d0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80142d0:	b580      	push	{r7, lr}
 80142d2:	b08a      	sub	sp, #40	; 0x28
 80142d4:	af02      	add	r7, sp, #8
 80142d6:	60f8      	str	r0, [r7, #12]
 80142d8:	60b9      	str	r1, [r7, #8]
 80142da:	4613      	mov	r3, r2
 80142dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80142de:	68fb      	ldr	r3, [r7, #12]
 80142e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80142e2:	68bb      	ldr	r3, [r7, #8]
 80142e4:	781b      	ldrb	r3, [r3, #0]
 80142e6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80142e8:	68bb      	ldr	r3, [r7, #8]
 80142ea:	785b      	ldrb	r3, [r3, #1]
 80142ec:	2b01      	cmp	r3, #1
 80142ee:	f040 8181 	bne.w	80145f4 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80142f2:	68bb      	ldr	r3, [r7, #8]
 80142f4:	691b      	ldr	r3, [r3, #16]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d132      	bne.n	8014360 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80142fa:	69bb      	ldr	r3, [r7, #24]
 80142fc:	015a      	lsls	r2, r3, #5
 80142fe:	69fb      	ldr	r3, [r7, #28]
 8014300:	4413      	add	r3, r2
 8014302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014306:	691a      	ldr	r2, [r3, #16]
 8014308:	69bb      	ldr	r3, [r7, #24]
 801430a:	0159      	lsls	r1, r3, #5
 801430c:	69fb      	ldr	r3, [r7, #28]
 801430e:	440b      	add	r3, r1
 8014310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014314:	4619      	mov	r1, r3
 8014316:	4ba5      	ldr	r3, [pc, #660]	; (80145ac <USB_EPStartXfer+0x2dc>)
 8014318:	4013      	ands	r3, r2
 801431a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801431c:	69bb      	ldr	r3, [r7, #24]
 801431e:	015a      	lsls	r2, r3, #5
 8014320:	69fb      	ldr	r3, [r7, #28]
 8014322:	4413      	add	r3, r2
 8014324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014328:	691b      	ldr	r3, [r3, #16]
 801432a:	69ba      	ldr	r2, [r7, #24]
 801432c:	0151      	lsls	r1, r2, #5
 801432e:	69fa      	ldr	r2, [r7, #28]
 8014330:	440a      	add	r2, r1
 8014332:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014336:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801433a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801433c:	69bb      	ldr	r3, [r7, #24]
 801433e:	015a      	lsls	r2, r3, #5
 8014340:	69fb      	ldr	r3, [r7, #28]
 8014342:	4413      	add	r3, r2
 8014344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014348:	691a      	ldr	r2, [r3, #16]
 801434a:	69bb      	ldr	r3, [r7, #24]
 801434c:	0159      	lsls	r1, r3, #5
 801434e:	69fb      	ldr	r3, [r7, #28]
 8014350:	440b      	add	r3, r1
 8014352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014356:	4619      	mov	r1, r3
 8014358:	4b95      	ldr	r3, [pc, #596]	; (80145b0 <USB_EPStartXfer+0x2e0>)
 801435a:	4013      	ands	r3, r2
 801435c:	610b      	str	r3, [r1, #16]
 801435e:	e092      	b.n	8014486 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014360:	69bb      	ldr	r3, [r7, #24]
 8014362:	015a      	lsls	r2, r3, #5
 8014364:	69fb      	ldr	r3, [r7, #28]
 8014366:	4413      	add	r3, r2
 8014368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801436c:	691a      	ldr	r2, [r3, #16]
 801436e:	69bb      	ldr	r3, [r7, #24]
 8014370:	0159      	lsls	r1, r3, #5
 8014372:	69fb      	ldr	r3, [r7, #28]
 8014374:	440b      	add	r3, r1
 8014376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801437a:	4619      	mov	r1, r3
 801437c:	4b8c      	ldr	r3, [pc, #560]	; (80145b0 <USB_EPStartXfer+0x2e0>)
 801437e:	4013      	ands	r3, r2
 8014380:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014382:	69bb      	ldr	r3, [r7, #24]
 8014384:	015a      	lsls	r2, r3, #5
 8014386:	69fb      	ldr	r3, [r7, #28]
 8014388:	4413      	add	r3, r2
 801438a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801438e:	691a      	ldr	r2, [r3, #16]
 8014390:	69bb      	ldr	r3, [r7, #24]
 8014392:	0159      	lsls	r1, r3, #5
 8014394:	69fb      	ldr	r3, [r7, #28]
 8014396:	440b      	add	r3, r1
 8014398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801439c:	4619      	mov	r1, r3
 801439e:	4b83      	ldr	r3, [pc, #524]	; (80145ac <USB_EPStartXfer+0x2dc>)
 80143a0:	4013      	ands	r3, r2
 80143a2:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80143a4:	69bb      	ldr	r3, [r7, #24]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d11a      	bne.n	80143e0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80143aa:	68bb      	ldr	r3, [r7, #8]
 80143ac:	691a      	ldr	r2, [r3, #16]
 80143ae:	68bb      	ldr	r3, [r7, #8]
 80143b0:	689b      	ldr	r3, [r3, #8]
 80143b2:	429a      	cmp	r2, r3
 80143b4:	d903      	bls.n	80143be <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80143b6:	68bb      	ldr	r3, [r7, #8]
 80143b8:	689a      	ldr	r2, [r3, #8]
 80143ba:	68bb      	ldr	r3, [r7, #8]
 80143bc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80143be:	69bb      	ldr	r3, [r7, #24]
 80143c0:	015a      	lsls	r2, r3, #5
 80143c2:	69fb      	ldr	r3, [r7, #28]
 80143c4:	4413      	add	r3, r2
 80143c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143ca:	691b      	ldr	r3, [r3, #16]
 80143cc:	69ba      	ldr	r2, [r7, #24]
 80143ce:	0151      	lsls	r1, r2, #5
 80143d0:	69fa      	ldr	r2, [r7, #28]
 80143d2:	440a      	add	r2, r1
 80143d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80143d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80143dc:	6113      	str	r3, [r2, #16]
 80143de:	e01b      	b.n	8014418 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80143e0:	69bb      	ldr	r3, [r7, #24]
 80143e2:	015a      	lsls	r2, r3, #5
 80143e4:	69fb      	ldr	r3, [r7, #28]
 80143e6:	4413      	add	r3, r2
 80143e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143ec:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80143ee:	68bb      	ldr	r3, [r7, #8]
 80143f0:	6919      	ldr	r1, [r3, #16]
 80143f2:	68bb      	ldr	r3, [r7, #8]
 80143f4:	689b      	ldr	r3, [r3, #8]
 80143f6:	440b      	add	r3, r1
 80143f8:	1e59      	subs	r1, r3, #1
 80143fa:	68bb      	ldr	r3, [r7, #8]
 80143fc:	689b      	ldr	r3, [r3, #8]
 80143fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8014402:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8014404:	4b6b      	ldr	r3, [pc, #428]	; (80145b4 <USB_EPStartXfer+0x2e4>)
 8014406:	400b      	ands	r3, r1
 8014408:	69b9      	ldr	r1, [r7, #24]
 801440a:	0148      	lsls	r0, r1, #5
 801440c:	69f9      	ldr	r1, [r7, #28]
 801440e:	4401      	add	r1, r0
 8014410:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8014414:	4313      	orrs	r3, r2
 8014416:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014418:	69bb      	ldr	r3, [r7, #24]
 801441a:	015a      	lsls	r2, r3, #5
 801441c:	69fb      	ldr	r3, [r7, #28]
 801441e:	4413      	add	r3, r2
 8014420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014424:	691a      	ldr	r2, [r3, #16]
 8014426:	68bb      	ldr	r3, [r7, #8]
 8014428:	691b      	ldr	r3, [r3, #16]
 801442a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801442e:	69b9      	ldr	r1, [r7, #24]
 8014430:	0148      	lsls	r0, r1, #5
 8014432:	69f9      	ldr	r1, [r7, #28]
 8014434:	4401      	add	r1, r0
 8014436:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801443a:	4313      	orrs	r3, r2
 801443c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801443e:	68bb      	ldr	r3, [r7, #8]
 8014440:	791b      	ldrb	r3, [r3, #4]
 8014442:	2b01      	cmp	r3, #1
 8014444:	d11f      	bne.n	8014486 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8014446:	69bb      	ldr	r3, [r7, #24]
 8014448:	015a      	lsls	r2, r3, #5
 801444a:	69fb      	ldr	r3, [r7, #28]
 801444c:	4413      	add	r3, r2
 801444e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014452:	691b      	ldr	r3, [r3, #16]
 8014454:	69ba      	ldr	r2, [r7, #24]
 8014456:	0151      	lsls	r1, r2, #5
 8014458:	69fa      	ldr	r2, [r7, #28]
 801445a:	440a      	add	r2, r1
 801445c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014460:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8014464:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8014466:	69bb      	ldr	r3, [r7, #24]
 8014468:	015a      	lsls	r2, r3, #5
 801446a:	69fb      	ldr	r3, [r7, #28]
 801446c:	4413      	add	r3, r2
 801446e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014472:	691b      	ldr	r3, [r3, #16]
 8014474:	69ba      	ldr	r2, [r7, #24]
 8014476:	0151      	lsls	r1, r2, #5
 8014478:	69fa      	ldr	r2, [r7, #28]
 801447a:	440a      	add	r2, r1
 801447c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014480:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014484:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8014486:	79fb      	ldrb	r3, [r7, #7]
 8014488:	2b01      	cmp	r3, #1
 801448a:	d14b      	bne.n	8014524 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801448c:	68bb      	ldr	r3, [r7, #8]
 801448e:	69db      	ldr	r3, [r3, #28]
 8014490:	2b00      	cmp	r3, #0
 8014492:	d009      	beq.n	80144a8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014494:	69bb      	ldr	r3, [r7, #24]
 8014496:	015a      	lsls	r2, r3, #5
 8014498:	69fb      	ldr	r3, [r7, #28]
 801449a:	4413      	add	r3, r2
 801449c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80144a0:	461a      	mov	r2, r3
 80144a2:	68bb      	ldr	r3, [r7, #8]
 80144a4:	69db      	ldr	r3, [r3, #28]
 80144a6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80144a8:	68bb      	ldr	r3, [r7, #8]
 80144aa:	791b      	ldrb	r3, [r3, #4]
 80144ac:	2b01      	cmp	r3, #1
 80144ae:	d128      	bne.n	8014502 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80144b0:	69fb      	ldr	r3, [r7, #28]
 80144b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80144b6:	689b      	ldr	r3, [r3, #8]
 80144b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d110      	bne.n	80144e2 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80144c0:	69bb      	ldr	r3, [r7, #24]
 80144c2:	015a      	lsls	r2, r3, #5
 80144c4:	69fb      	ldr	r3, [r7, #28]
 80144c6:	4413      	add	r3, r2
 80144c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	69ba      	ldr	r2, [r7, #24]
 80144d0:	0151      	lsls	r1, r2, #5
 80144d2:	69fa      	ldr	r2, [r7, #28]
 80144d4:	440a      	add	r2, r1
 80144d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80144da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80144de:	6013      	str	r3, [r2, #0]
 80144e0:	e00f      	b.n	8014502 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80144e2:	69bb      	ldr	r3, [r7, #24]
 80144e4:	015a      	lsls	r2, r3, #5
 80144e6:	69fb      	ldr	r3, [r7, #28]
 80144e8:	4413      	add	r3, r2
 80144ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	69ba      	ldr	r2, [r7, #24]
 80144f2:	0151      	lsls	r1, r2, #5
 80144f4:	69fa      	ldr	r2, [r7, #28]
 80144f6:	440a      	add	r2, r1
 80144f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80144fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014500:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014502:	69bb      	ldr	r3, [r7, #24]
 8014504:	015a      	lsls	r2, r3, #5
 8014506:	69fb      	ldr	r3, [r7, #28]
 8014508:	4413      	add	r3, r2
 801450a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	69ba      	ldr	r2, [r7, #24]
 8014512:	0151      	lsls	r1, r2, #5
 8014514:	69fa      	ldr	r2, [r7, #28]
 8014516:	440a      	add	r2, r1
 8014518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801451c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014520:	6013      	str	r3, [r2, #0]
 8014522:	e16a      	b.n	80147fa <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014524:	69bb      	ldr	r3, [r7, #24]
 8014526:	015a      	lsls	r2, r3, #5
 8014528:	69fb      	ldr	r3, [r7, #28]
 801452a:	4413      	add	r3, r2
 801452c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	69ba      	ldr	r2, [r7, #24]
 8014534:	0151      	lsls	r1, r2, #5
 8014536:	69fa      	ldr	r2, [r7, #28]
 8014538:	440a      	add	r2, r1
 801453a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801453e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014542:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014544:	68bb      	ldr	r3, [r7, #8]
 8014546:	791b      	ldrb	r3, [r3, #4]
 8014548:	2b01      	cmp	r3, #1
 801454a:	d015      	beq.n	8014578 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801454c:	68bb      	ldr	r3, [r7, #8]
 801454e:	691b      	ldr	r3, [r3, #16]
 8014550:	2b00      	cmp	r3, #0
 8014552:	f000 8152 	beq.w	80147fa <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014556:	69fb      	ldr	r3, [r7, #28]
 8014558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801455c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801455e:	68bb      	ldr	r3, [r7, #8]
 8014560:	781b      	ldrb	r3, [r3, #0]
 8014562:	f003 030f 	and.w	r3, r3, #15
 8014566:	2101      	movs	r1, #1
 8014568:	fa01 f303 	lsl.w	r3, r1, r3
 801456c:	69f9      	ldr	r1, [r7, #28]
 801456e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014572:	4313      	orrs	r3, r2
 8014574:	634b      	str	r3, [r1, #52]	; 0x34
 8014576:	e140      	b.n	80147fa <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014578:	69fb      	ldr	r3, [r7, #28]
 801457a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801457e:	689b      	ldr	r3, [r3, #8]
 8014580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014584:	2b00      	cmp	r3, #0
 8014586:	d117      	bne.n	80145b8 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014588:	69bb      	ldr	r3, [r7, #24]
 801458a:	015a      	lsls	r2, r3, #5
 801458c:	69fb      	ldr	r3, [r7, #28]
 801458e:	4413      	add	r3, r2
 8014590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	69ba      	ldr	r2, [r7, #24]
 8014598:	0151      	lsls	r1, r2, #5
 801459a:	69fa      	ldr	r2, [r7, #28]
 801459c:	440a      	add	r2, r1
 801459e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80145a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80145a6:	6013      	str	r3, [r2, #0]
 80145a8:	e016      	b.n	80145d8 <USB_EPStartXfer+0x308>
 80145aa:	bf00      	nop
 80145ac:	e007ffff 	.word	0xe007ffff
 80145b0:	fff80000 	.word	0xfff80000
 80145b4:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80145b8:	69bb      	ldr	r3, [r7, #24]
 80145ba:	015a      	lsls	r2, r3, #5
 80145bc:	69fb      	ldr	r3, [r7, #28]
 80145be:	4413      	add	r3, r2
 80145c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80145c4:	681b      	ldr	r3, [r3, #0]
 80145c6:	69ba      	ldr	r2, [r7, #24]
 80145c8:	0151      	lsls	r1, r2, #5
 80145ca:	69fa      	ldr	r2, [r7, #28]
 80145cc:	440a      	add	r2, r1
 80145ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80145d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80145d6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80145d8:	68bb      	ldr	r3, [r7, #8]
 80145da:	68d9      	ldr	r1, [r3, #12]
 80145dc:	68bb      	ldr	r3, [r7, #8]
 80145de:	781a      	ldrb	r2, [r3, #0]
 80145e0:	68bb      	ldr	r3, [r7, #8]
 80145e2:	691b      	ldr	r3, [r3, #16]
 80145e4:	b298      	uxth	r0, r3
 80145e6:	79fb      	ldrb	r3, [r7, #7]
 80145e8:	9300      	str	r3, [sp, #0]
 80145ea:	4603      	mov	r3, r0
 80145ec:	68f8      	ldr	r0, [r7, #12]
 80145ee:	f000 f9b9 	bl	8014964 <USB_WritePacket>
 80145f2:	e102      	b.n	80147fa <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80145f4:	69bb      	ldr	r3, [r7, #24]
 80145f6:	015a      	lsls	r2, r3, #5
 80145f8:	69fb      	ldr	r3, [r7, #28]
 80145fa:	4413      	add	r3, r2
 80145fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014600:	691a      	ldr	r2, [r3, #16]
 8014602:	69bb      	ldr	r3, [r7, #24]
 8014604:	0159      	lsls	r1, r3, #5
 8014606:	69fb      	ldr	r3, [r7, #28]
 8014608:	440b      	add	r3, r1
 801460a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801460e:	4619      	mov	r1, r3
 8014610:	4b7c      	ldr	r3, [pc, #496]	; (8014804 <USB_EPStartXfer+0x534>)
 8014612:	4013      	ands	r3, r2
 8014614:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8014616:	69bb      	ldr	r3, [r7, #24]
 8014618:	015a      	lsls	r2, r3, #5
 801461a:	69fb      	ldr	r3, [r7, #28]
 801461c:	4413      	add	r3, r2
 801461e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014622:	691a      	ldr	r2, [r3, #16]
 8014624:	69bb      	ldr	r3, [r7, #24]
 8014626:	0159      	lsls	r1, r3, #5
 8014628:	69fb      	ldr	r3, [r7, #28]
 801462a:	440b      	add	r3, r1
 801462c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014630:	4619      	mov	r1, r3
 8014632:	4b75      	ldr	r3, [pc, #468]	; (8014808 <USB_EPStartXfer+0x538>)
 8014634:	4013      	ands	r3, r2
 8014636:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8014638:	69bb      	ldr	r3, [r7, #24]
 801463a:	2b00      	cmp	r3, #0
 801463c:	d12f      	bne.n	801469e <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 801463e:	68bb      	ldr	r3, [r7, #8]
 8014640:	691b      	ldr	r3, [r3, #16]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d003      	beq.n	801464e <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8014646:	68bb      	ldr	r3, [r7, #8]
 8014648:	689a      	ldr	r2, [r3, #8]
 801464a:	68bb      	ldr	r3, [r7, #8]
 801464c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 801464e:	68bb      	ldr	r3, [r7, #8]
 8014650:	689a      	ldr	r2, [r3, #8]
 8014652:	68bb      	ldr	r3, [r7, #8]
 8014654:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8014656:	69bb      	ldr	r3, [r7, #24]
 8014658:	015a      	lsls	r2, r3, #5
 801465a:	69fb      	ldr	r3, [r7, #28]
 801465c:	4413      	add	r3, r2
 801465e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014662:	691a      	ldr	r2, [r3, #16]
 8014664:	68bb      	ldr	r3, [r7, #8]
 8014666:	6a1b      	ldr	r3, [r3, #32]
 8014668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801466c:	69b9      	ldr	r1, [r7, #24]
 801466e:	0148      	lsls	r0, r1, #5
 8014670:	69f9      	ldr	r1, [r7, #28]
 8014672:	4401      	add	r1, r0
 8014674:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014678:	4313      	orrs	r3, r2
 801467a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801467c:	69bb      	ldr	r3, [r7, #24]
 801467e:	015a      	lsls	r2, r3, #5
 8014680:	69fb      	ldr	r3, [r7, #28]
 8014682:	4413      	add	r3, r2
 8014684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014688:	691b      	ldr	r3, [r3, #16]
 801468a:	69ba      	ldr	r2, [r7, #24]
 801468c:	0151      	lsls	r1, r2, #5
 801468e:	69fa      	ldr	r2, [r7, #28]
 8014690:	440a      	add	r2, r1
 8014692:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014696:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801469a:	6113      	str	r3, [r2, #16]
 801469c:	e05f      	b.n	801475e <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 801469e:	68bb      	ldr	r3, [r7, #8]
 80146a0:	691b      	ldr	r3, [r3, #16]
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d123      	bne.n	80146ee <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80146a6:	69bb      	ldr	r3, [r7, #24]
 80146a8:	015a      	lsls	r2, r3, #5
 80146aa:	69fb      	ldr	r3, [r7, #28]
 80146ac:	4413      	add	r3, r2
 80146ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80146b2:	691a      	ldr	r2, [r3, #16]
 80146b4:	68bb      	ldr	r3, [r7, #8]
 80146b6:	689b      	ldr	r3, [r3, #8]
 80146b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80146bc:	69b9      	ldr	r1, [r7, #24]
 80146be:	0148      	lsls	r0, r1, #5
 80146c0:	69f9      	ldr	r1, [r7, #28]
 80146c2:	4401      	add	r1, r0
 80146c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80146c8:	4313      	orrs	r3, r2
 80146ca:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80146cc:	69bb      	ldr	r3, [r7, #24]
 80146ce:	015a      	lsls	r2, r3, #5
 80146d0:	69fb      	ldr	r3, [r7, #28]
 80146d2:	4413      	add	r3, r2
 80146d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80146d8:	691b      	ldr	r3, [r3, #16]
 80146da:	69ba      	ldr	r2, [r7, #24]
 80146dc:	0151      	lsls	r1, r2, #5
 80146de:	69fa      	ldr	r2, [r7, #28]
 80146e0:	440a      	add	r2, r1
 80146e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80146e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80146ea:	6113      	str	r3, [r2, #16]
 80146ec:	e037      	b.n	801475e <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80146ee:	68bb      	ldr	r3, [r7, #8]
 80146f0:	691a      	ldr	r2, [r3, #16]
 80146f2:	68bb      	ldr	r3, [r7, #8]
 80146f4:	689b      	ldr	r3, [r3, #8]
 80146f6:	4413      	add	r3, r2
 80146f8:	1e5a      	subs	r2, r3, #1
 80146fa:	68bb      	ldr	r3, [r7, #8]
 80146fc:	689b      	ldr	r3, [r3, #8]
 80146fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8014702:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8014704:	68bb      	ldr	r3, [r7, #8]
 8014706:	689b      	ldr	r3, [r3, #8]
 8014708:	8afa      	ldrh	r2, [r7, #22]
 801470a:	fb03 f202 	mul.w	r2, r3, r2
 801470e:	68bb      	ldr	r3, [r7, #8]
 8014710:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014712:	69bb      	ldr	r3, [r7, #24]
 8014714:	015a      	lsls	r2, r3, #5
 8014716:	69fb      	ldr	r3, [r7, #28]
 8014718:	4413      	add	r3, r2
 801471a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801471e:	691a      	ldr	r2, [r3, #16]
 8014720:	8afb      	ldrh	r3, [r7, #22]
 8014722:	04d9      	lsls	r1, r3, #19
 8014724:	4b39      	ldr	r3, [pc, #228]	; (801480c <USB_EPStartXfer+0x53c>)
 8014726:	400b      	ands	r3, r1
 8014728:	69b9      	ldr	r1, [r7, #24]
 801472a:	0148      	lsls	r0, r1, #5
 801472c:	69f9      	ldr	r1, [r7, #28]
 801472e:	4401      	add	r1, r0
 8014730:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014734:	4313      	orrs	r3, r2
 8014736:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8014738:	69bb      	ldr	r3, [r7, #24]
 801473a:	015a      	lsls	r2, r3, #5
 801473c:	69fb      	ldr	r3, [r7, #28]
 801473e:	4413      	add	r3, r2
 8014740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014744:	691a      	ldr	r2, [r3, #16]
 8014746:	68bb      	ldr	r3, [r7, #8]
 8014748:	6a1b      	ldr	r3, [r3, #32]
 801474a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801474e:	69b9      	ldr	r1, [r7, #24]
 8014750:	0148      	lsls	r0, r1, #5
 8014752:	69f9      	ldr	r1, [r7, #28]
 8014754:	4401      	add	r1, r0
 8014756:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801475a:	4313      	orrs	r3, r2
 801475c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 801475e:	79fb      	ldrb	r3, [r7, #7]
 8014760:	2b01      	cmp	r3, #1
 8014762:	d10d      	bne.n	8014780 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8014764:	68bb      	ldr	r3, [r7, #8]
 8014766:	68db      	ldr	r3, [r3, #12]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d009      	beq.n	8014780 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801476c:	68bb      	ldr	r3, [r7, #8]
 801476e:	68d9      	ldr	r1, [r3, #12]
 8014770:	69bb      	ldr	r3, [r7, #24]
 8014772:	015a      	lsls	r2, r3, #5
 8014774:	69fb      	ldr	r3, [r7, #28]
 8014776:	4413      	add	r3, r2
 8014778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801477c:	460a      	mov	r2, r1
 801477e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8014780:	68bb      	ldr	r3, [r7, #8]
 8014782:	791b      	ldrb	r3, [r3, #4]
 8014784:	2b01      	cmp	r3, #1
 8014786:	d128      	bne.n	80147da <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014788:	69fb      	ldr	r3, [r7, #28]
 801478a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801478e:	689b      	ldr	r3, [r3, #8]
 8014790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014794:	2b00      	cmp	r3, #0
 8014796:	d110      	bne.n	80147ba <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8014798:	69bb      	ldr	r3, [r7, #24]
 801479a:	015a      	lsls	r2, r3, #5
 801479c:	69fb      	ldr	r3, [r7, #28]
 801479e:	4413      	add	r3, r2
 80147a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	69ba      	ldr	r2, [r7, #24]
 80147a8:	0151      	lsls	r1, r2, #5
 80147aa:	69fa      	ldr	r2, [r7, #28]
 80147ac:	440a      	add	r2, r1
 80147ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80147b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80147b6:	6013      	str	r3, [r2, #0]
 80147b8:	e00f      	b.n	80147da <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80147ba:	69bb      	ldr	r3, [r7, #24]
 80147bc:	015a      	lsls	r2, r3, #5
 80147be:	69fb      	ldr	r3, [r7, #28]
 80147c0:	4413      	add	r3, r2
 80147c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	69ba      	ldr	r2, [r7, #24]
 80147ca:	0151      	lsls	r1, r2, #5
 80147cc:	69fa      	ldr	r2, [r7, #28]
 80147ce:	440a      	add	r2, r1
 80147d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80147d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80147d8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80147da:	69bb      	ldr	r3, [r7, #24]
 80147dc:	015a      	lsls	r2, r3, #5
 80147de:	69fb      	ldr	r3, [r7, #28]
 80147e0:	4413      	add	r3, r2
 80147e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	69ba      	ldr	r2, [r7, #24]
 80147ea:	0151      	lsls	r1, r2, #5
 80147ec:	69fa      	ldr	r2, [r7, #28]
 80147ee:	440a      	add	r2, r1
 80147f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80147f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80147f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80147fa:	2300      	movs	r3, #0
}
 80147fc:	4618      	mov	r0, r3
 80147fe:	3720      	adds	r7, #32
 8014800:	46bd      	mov	sp, r7
 8014802:	bd80      	pop	{r7, pc}
 8014804:	fff80000 	.word	0xfff80000
 8014808:	e007ffff 	.word	0xe007ffff
 801480c:	1ff80000 	.word	0x1ff80000

08014810 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014810:	b480      	push	{r7}
 8014812:	b087      	sub	sp, #28
 8014814:	af00      	add	r7, sp, #0
 8014816:	6078      	str	r0, [r7, #4]
 8014818:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801481a:	2300      	movs	r3, #0
 801481c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801481e:	2300      	movs	r3, #0
 8014820:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014826:	683b      	ldr	r3, [r7, #0]
 8014828:	785b      	ldrb	r3, [r3, #1]
 801482a:	2b01      	cmp	r3, #1
 801482c:	d14a      	bne.n	80148c4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801482e:	683b      	ldr	r3, [r7, #0]
 8014830:	781b      	ldrb	r3, [r3, #0]
 8014832:	015a      	lsls	r2, r3, #5
 8014834:	693b      	ldr	r3, [r7, #16]
 8014836:	4413      	add	r3, r2
 8014838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014842:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014846:	f040 8086 	bne.w	8014956 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801484a:	683b      	ldr	r3, [r7, #0]
 801484c:	781b      	ldrb	r3, [r3, #0]
 801484e:	015a      	lsls	r2, r3, #5
 8014850:	693b      	ldr	r3, [r7, #16]
 8014852:	4413      	add	r3, r2
 8014854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	683a      	ldr	r2, [r7, #0]
 801485c:	7812      	ldrb	r2, [r2, #0]
 801485e:	0151      	lsls	r1, r2, #5
 8014860:	693a      	ldr	r2, [r7, #16]
 8014862:	440a      	add	r2, r1
 8014864:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014868:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801486c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801486e:	683b      	ldr	r3, [r7, #0]
 8014870:	781b      	ldrb	r3, [r3, #0]
 8014872:	015a      	lsls	r2, r3, #5
 8014874:	693b      	ldr	r3, [r7, #16]
 8014876:	4413      	add	r3, r2
 8014878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	683a      	ldr	r2, [r7, #0]
 8014880:	7812      	ldrb	r2, [r2, #0]
 8014882:	0151      	lsls	r1, r2, #5
 8014884:	693a      	ldr	r2, [r7, #16]
 8014886:	440a      	add	r2, r1
 8014888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801488c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014890:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	3301      	adds	r3, #1
 8014896:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	f242 7210 	movw	r2, #10000	; 0x2710
 801489e:	4293      	cmp	r3, r2
 80148a0:	d902      	bls.n	80148a8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80148a2:	2301      	movs	r3, #1
 80148a4:	75fb      	strb	r3, [r7, #23]
          break;
 80148a6:	e056      	b.n	8014956 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80148a8:	683b      	ldr	r3, [r7, #0]
 80148aa:	781b      	ldrb	r3, [r3, #0]
 80148ac:	015a      	lsls	r2, r3, #5
 80148ae:	693b      	ldr	r3, [r7, #16]
 80148b0:	4413      	add	r3, r2
 80148b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80148bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80148c0:	d0e7      	beq.n	8014892 <USB_EPStopXfer+0x82>
 80148c2:	e048      	b.n	8014956 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80148c4:	683b      	ldr	r3, [r7, #0]
 80148c6:	781b      	ldrb	r3, [r3, #0]
 80148c8:	015a      	lsls	r2, r3, #5
 80148ca:	693b      	ldr	r3, [r7, #16]
 80148cc:	4413      	add	r3, r2
 80148ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80148d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80148dc:	d13b      	bne.n	8014956 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80148de:	683b      	ldr	r3, [r7, #0]
 80148e0:	781b      	ldrb	r3, [r3, #0]
 80148e2:	015a      	lsls	r2, r3, #5
 80148e4:	693b      	ldr	r3, [r7, #16]
 80148e6:	4413      	add	r3, r2
 80148e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	683a      	ldr	r2, [r7, #0]
 80148f0:	7812      	ldrb	r2, [r2, #0]
 80148f2:	0151      	lsls	r1, r2, #5
 80148f4:	693a      	ldr	r2, [r7, #16]
 80148f6:	440a      	add	r2, r1
 80148f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80148fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014900:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8014902:	683b      	ldr	r3, [r7, #0]
 8014904:	781b      	ldrb	r3, [r3, #0]
 8014906:	015a      	lsls	r2, r3, #5
 8014908:	693b      	ldr	r3, [r7, #16]
 801490a:	4413      	add	r3, r2
 801490c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	683a      	ldr	r2, [r7, #0]
 8014914:	7812      	ldrb	r2, [r2, #0]
 8014916:	0151      	lsls	r1, r2, #5
 8014918:	693a      	ldr	r2, [r7, #16]
 801491a:	440a      	add	r2, r1
 801491c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014920:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014924:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	3301      	adds	r3, #1
 801492a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	f242 7210 	movw	r2, #10000	; 0x2710
 8014932:	4293      	cmp	r3, r2
 8014934:	d902      	bls.n	801493c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8014936:	2301      	movs	r3, #1
 8014938:	75fb      	strb	r3, [r7, #23]
          break;
 801493a:	e00c      	b.n	8014956 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 801493c:	683b      	ldr	r3, [r7, #0]
 801493e:	781b      	ldrb	r3, [r3, #0]
 8014940:	015a      	lsls	r2, r3, #5
 8014942:	693b      	ldr	r3, [r7, #16]
 8014944:	4413      	add	r3, r2
 8014946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014950:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014954:	d0e7      	beq.n	8014926 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8014956:	7dfb      	ldrb	r3, [r7, #23]
}
 8014958:	4618      	mov	r0, r3
 801495a:	371c      	adds	r7, #28
 801495c:	46bd      	mov	sp, r7
 801495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014962:	4770      	bx	lr

08014964 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8014964:	b480      	push	{r7}
 8014966:	b089      	sub	sp, #36	; 0x24
 8014968:	af00      	add	r7, sp, #0
 801496a:	60f8      	str	r0, [r7, #12]
 801496c:	60b9      	str	r1, [r7, #8]
 801496e:	4611      	mov	r1, r2
 8014970:	461a      	mov	r2, r3
 8014972:	460b      	mov	r3, r1
 8014974:	71fb      	strb	r3, [r7, #7]
 8014976:	4613      	mov	r3, r2
 8014978:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801497e:	68bb      	ldr	r3, [r7, #8]
 8014980:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8014982:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014986:	2b00      	cmp	r3, #0
 8014988:	d123      	bne.n	80149d2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801498a:	88bb      	ldrh	r3, [r7, #4]
 801498c:	3303      	adds	r3, #3
 801498e:	089b      	lsrs	r3, r3, #2
 8014990:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8014992:	2300      	movs	r3, #0
 8014994:	61bb      	str	r3, [r7, #24]
 8014996:	e018      	b.n	80149ca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014998:	79fb      	ldrb	r3, [r7, #7]
 801499a:	031a      	lsls	r2, r3, #12
 801499c:	697b      	ldr	r3, [r7, #20]
 801499e:	4413      	add	r3, r2
 80149a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80149a4:	461a      	mov	r2, r3
 80149a6:	69fb      	ldr	r3, [r7, #28]
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80149ac:	69fb      	ldr	r3, [r7, #28]
 80149ae:	3301      	adds	r3, #1
 80149b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80149b2:	69fb      	ldr	r3, [r7, #28]
 80149b4:	3301      	adds	r3, #1
 80149b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80149b8:	69fb      	ldr	r3, [r7, #28]
 80149ba:	3301      	adds	r3, #1
 80149bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80149be:	69fb      	ldr	r3, [r7, #28]
 80149c0:	3301      	adds	r3, #1
 80149c2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80149c4:	69bb      	ldr	r3, [r7, #24]
 80149c6:	3301      	adds	r3, #1
 80149c8:	61bb      	str	r3, [r7, #24]
 80149ca:	69ba      	ldr	r2, [r7, #24]
 80149cc:	693b      	ldr	r3, [r7, #16]
 80149ce:	429a      	cmp	r2, r3
 80149d0:	d3e2      	bcc.n	8014998 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80149d2:	2300      	movs	r3, #0
}
 80149d4:	4618      	mov	r0, r3
 80149d6:	3724      	adds	r7, #36	; 0x24
 80149d8:	46bd      	mov	sp, r7
 80149da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149de:	4770      	bx	lr

080149e0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80149e0:	b480      	push	{r7}
 80149e2:	b08b      	sub	sp, #44	; 0x2c
 80149e4:	af00      	add	r7, sp, #0
 80149e6:	60f8      	str	r0, [r7, #12]
 80149e8:	60b9      	str	r1, [r7, #8]
 80149ea:	4613      	mov	r3, r2
 80149ec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80149ee:	68fb      	ldr	r3, [r7, #12]
 80149f0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80149f2:	68bb      	ldr	r3, [r7, #8]
 80149f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80149f6:	88fb      	ldrh	r3, [r7, #6]
 80149f8:	089b      	lsrs	r3, r3, #2
 80149fa:	b29b      	uxth	r3, r3
 80149fc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80149fe:	88fb      	ldrh	r3, [r7, #6]
 8014a00:	f003 0303 	and.w	r3, r3, #3
 8014a04:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8014a06:	2300      	movs	r3, #0
 8014a08:	623b      	str	r3, [r7, #32]
 8014a0a:	e014      	b.n	8014a36 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8014a0c:	69bb      	ldr	r3, [r7, #24]
 8014a0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014a12:	681a      	ldr	r2, [r3, #0]
 8014a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a16:	601a      	str	r2, [r3, #0]
    pDest++;
 8014a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a1a:	3301      	adds	r3, #1
 8014a1c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a20:	3301      	adds	r3, #1
 8014a22:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a26:	3301      	adds	r3, #1
 8014a28:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a2c:	3301      	adds	r3, #1
 8014a2e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8014a30:	6a3b      	ldr	r3, [r7, #32]
 8014a32:	3301      	adds	r3, #1
 8014a34:	623b      	str	r3, [r7, #32]
 8014a36:	6a3a      	ldr	r2, [r7, #32]
 8014a38:	697b      	ldr	r3, [r7, #20]
 8014a3a:	429a      	cmp	r2, r3
 8014a3c:	d3e6      	bcc.n	8014a0c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8014a3e:	8bfb      	ldrh	r3, [r7, #30]
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d01e      	beq.n	8014a82 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8014a44:	2300      	movs	r3, #0
 8014a46:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8014a48:	69bb      	ldr	r3, [r7, #24]
 8014a4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014a4e:	461a      	mov	r2, r3
 8014a50:	f107 0310 	add.w	r3, r7, #16
 8014a54:	6812      	ldr	r2, [r2, #0]
 8014a56:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8014a58:	693a      	ldr	r2, [r7, #16]
 8014a5a:	6a3b      	ldr	r3, [r7, #32]
 8014a5c:	b2db      	uxtb	r3, r3
 8014a5e:	00db      	lsls	r3, r3, #3
 8014a60:	fa22 f303 	lsr.w	r3, r2, r3
 8014a64:	b2da      	uxtb	r2, r3
 8014a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a68:	701a      	strb	r2, [r3, #0]
      i++;
 8014a6a:	6a3b      	ldr	r3, [r7, #32]
 8014a6c:	3301      	adds	r3, #1
 8014a6e:	623b      	str	r3, [r7, #32]
      pDest++;
 8014a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a72:	3301      	adds	r3, #1
 8014a74:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8014a76:	8bfb      	ldrh	r3, [r7, #30]
 8014a78:	3b01      	subs	r3, #1
 8014a7a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8014a7c:	8bfb      	ldrh	r3, [r7, #30]
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d1ea      	bne.n	8014a58 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8014a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014a84:	4618      	mov	r0, r3
 8014a86:	372c      	adds	r7, #44	; 0x2c
 8014a88:	46bd      	mov	sp, r7
 8014a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a8e:	4770      	bx	lr

08014a90 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014a90:	b480      	push	{r7}
 8014a92:	b085      	sub	sp, #20
 8014a94:	af00      	add	r7, sp, #0
 8014a96:	6078      	str	r0, [r7, #4]
 8014a98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014a9e:	683b      	ldr	r3, [r7, #0]
 8014aa0:	781b      	ldrb	r3, [r3, #0]
 8014aa2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014aa4:	683b      	ldr	r3, [r7, #0]
 8014aa6:	785b      	ldrb	r3, [r3, #1]
 8014aa8:	2b01      	cmp	r3, #1
 8014aaa:	d12c      	bne.n	8014b06 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014aac:	68bb      	ldr	r3, [r7, #8]
 8014aae:	015a      	lsls	r2, r3, #5
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	4413      	add	r3, r2
 8014ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014ab8:	681b      	ldr	r3, [r3, #0]
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	db12      	blt.n	8014ae4 <USB_EPSetStall+0x54>
 8014abe:	68bb      	ldr	r3, [r7, #8]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d00f      	beq.n	8014ae4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8014ac4:	68bb      	ldr	r3, [r7, #8]
 8014ac6:	015a      	lsls	r2, r3, #5
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	4413      	add	r3, r2
 8014acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	68ba      	ldr	r2, [r7, #8]
 8014ad4:	0151      	lsls	r1, r2, #5
 8014ad6:	68fa      	ldr	r2, [r7, #12]
 8014ad8:	440a      	add	r2, r1
 8014ada:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014ade:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014ae2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8014ae4:	68bb      	ldr	r3, [r7, #8]
 8014ae6:	015a      	lsls	r2, r3, #5
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	4413      	add	r3, r2
 8014aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	68ba      	ldr	r2, [r7, #8]
 8014af4:	0151      	lsls	r1, r2, #5
 8014af6:	68fa      	ldr	r2, [r7, #12]
 8014af8:	440a      	add	r2, r1
 8014afa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014afe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014b02:	6013      	str	r3, [r2, #0]
 8014b04:	e02b      	b.n	8014b5e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014b06:	68bb      	ldr	r3, [r7, #8]
 8014b08:	015a      	lsls	r2, r3, #5
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	4413      	add	r3, r2
 8014b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	db12      	blt.n	8014b3e <USB_EPSetStall+0xae>
 8014b18:	68bb      	ldr	r3, [r7, #8]
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d00f      	beq.n	8014b3e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8014b1e:	68bb      	ldr	r3, [r7, #8]
 8014b20:	015a      	lsls	r2, r3, #5
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	4413      	add	r3, r2
 8014b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	68ba      	ldr	r2, [r7, #8]
 8014b2e:	0151      	lsls	r1, r2, #5
 8014b30:	68fa      	ldr	r2, [r7, #12]
 8014b32:	440a      	add	r2, r1
 8014b34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014b38:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014b3c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8014b3e:	68bb      	ldr	r3, [r7, #8]
 8014b40:	015a      	lsls	r2, r3, #5
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	4413      	add	r3, r2
 8014b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	68ba      	ldr	r2, [r7, #8]
 8014b4e:	0151      	lsls	r1, r2, #5
 8014b50:	68fa      	ldr	r2, [r7, #12]
 8014b52:	440a      	add	r2, r1
 8014b54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014b58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014b5c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014b5e:	2300      	movs	r3, #0
}
 8014b60:	4618      	mov	r0, r3
 8014b62:	3714      	adds	r7, #20
 8014b64:	46bd      	mov	sp, r7
 8014b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b6a:	4770      	bx	lr

08014b6c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014b6c:	b480      	push	{r7}
 8014b6e:	b085      	sub	sp, #20
 8014b70:	af00      	add	r7, sp, #0
 8014b72:	6078      	str	r0, [r7, #4]
 8014b74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014b7a:	683b      	ldr	r3, [r7, #0]
 8014b7c:	781b      	ldrb	r3, [r3, #0]
 8014b7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014b80:	683b      	ldr	r3, [r7, #0]
 8014b82:	785b      	ldrb	r3, [r3, #1]
 8014b84:	2b01      	cmp	r3, #1
 8014b86:	d128      	bne.n	8014bda <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8014b88:	68bb      	ldr	r3, [r7, #8]
 8014b8a:	015a      	lsls	r2, r3, #5
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	4413      	add	r3, r2
 8014b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	68ba      	ldr	r2, [r7, #8]
 8014b98:	0151      	lsls	r1, r2, #5
 8014b9a:	68fa      	ldr	r2, [r7, #12]
 8014b9c:	440a      	add	r2, r1
 8014b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014ba2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014ba6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014ba8:	683b      	ldr	r3, [r7, #0]
 8014baa:	791b      	ldrb	r3, [r3, #4]
 8014bac:	2b03      	cmp	r3, #3
 8014bae:	d003      	beq.n	8014bb8 <USB_EPClearStall+0x4c>
 8014bb0:	683b      	ldr	r3, [r7, #0]
 8014bb2:	791b      	ldrb	r3, [r3, #4]
 8014bb4:	2b02      	cmp	r3, #2
 8014bb6:	d138      	bne.n	8014c2a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014bb8:	68bb      	ldr	r3, [r7, #8]
 8014bba:	015a      	lsls	r2, r3, #5
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	4413      	add	r3, r2
 8014bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	68ba      	ldr	r2, [r7, #8]
 8014bc8:	0151      	lsls	r1, r2, #5
 8014bca:	68fa      	ldr	r2, [r7, #12]
 8014bcc:	440a      	add	r2, r1
 8014bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014bd6:	6013      	str	r3, [r2, #0]
 8014bd8:	e027      	b.n	8014c2a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8014bda:	68bb      	ldr	r3, [r7, #8]
 8014bdc:	015a      	lsls	r2, r3, #5
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	4413      	add	r3, r2
 8014be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014be6:	681b      	ldr	r3, [r3, #0]
 8014be8:	68ba      	ldr	r2, [r7, #8]
 8014bea:	0151      	lsls	r1, r2, #5
 8014bec:	68fa      	ldr	r2, [r7, #12]
 8014bee:	440a      	add	r2, r1
 8014bf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014bf4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014bf8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014bfa:	683b      	ldr	r3, [r7, #0]
 8014bfc:	791b      	ldrb	r3, [r3, #4]
 8014bfe:	2b03      	cmp	r3, #3
 8014c00:	d003      	beq.n	8014c0a <USB_EPClearStall+0x9e>
 8014c02:	683b      	ldr	r3, [r7, #0]
 8014c04:	791b      	ldrb	r3, [r3, #4]
 8014c06:	2b02      	cmp	r3, #2
 8014c08:	d10f      	bne.n	8014c2a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014c0a:	68bb      	ldr	r3, [r7, #8]
 8014c0c:	015a      	lsls	r2, r3, #5
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	4413      	add	r3, r2
 8014c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	68ba      	ldr	r2, [r7, #8]
 8014c1a:	0151      	lsls	r1, r2, #5
 8014c1c:	68fa      	ldr	r2, [r7, #12]
 8014c1e:	440a      	add	r2, r1
 8014c20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014c28:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8014c2a:	2300      	movs	r3, #0
}
 8014c2c:	4618      	mov	r0, r3
 8014c2e:	3714      	adds	r7, #20
 8014c30:	46bd      	mov	sp, r7
 8014c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c36:	4770      	bx	lr

08014c38 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8014c38:	b480      	push	{r7}
 8014c3a:	b085      	sub	sp, #20
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	6078      	str	r0, [r7, #4]
 8014c40:	460b      	mov	r3, r1
 8014c42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	68fa      	ldr	r2, [r7, #12]
 8014c52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014c56:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8014c5a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014c62:	681a      	ldr	r2, [r3, #0]
 8014c64:	78fb      	ldrb	r3, [r7, #3]
 8014c66:	011b      	lsls	r3, r3, #4
 8014c68:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8014c6c:	68f9      	ldr	r1, [r7, #12]
 8014c6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014c72:	4313      	orrs	r3, r2
 8014c74:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8014c76:	2300      	movs	r3, #0
}
 8014c78:	4618      	mov	r0, r3
 8014c7a:	3714      	adds	r7, #20
 8014c7c:	46bd      	mov	sp, r7
 8014c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c82:	4770      	bx	lr

08014c84 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014c84:	b480      	push	{r7}
 8014c86:	b085      	sub	sp, #20
 8014c88:	af00      	add	r7, sp, #0
 8014c8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	68fa      	ldr	r2, [r7, #12]
 8014c9a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014c9e:	f023 0303 	bic.w	r3, r3, #3
 8014ca2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014caa:	685b      	ldr	r3, [r3, #4]
 8014cac:	68fa      	ldr	r2, [r7, #12]
 8014cae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014cb2:	f023 0302 	bic.w	r3, r3, #2
 8014cb6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014cb8:	2300      	movs	r3, #0
}
 8014cba:	4618      	mov	r0, r3
 8014cbc:	3714      	adds	r7, #20
 8014cbe:	46bd      	mov	sp, r7
 8014cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cc4:	4770      	bx	lr

08014cc6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014cc6:	b480      	push	{r7}
 8014cc8:	b085      	sub	sp, #20
 8014cca:	af00      	add	r7, sp, #0
 8014ccc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	68fa      	ldr	r2, [r7, #12]
 8014cdc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014ce0:	f023 0303 	bic.w	r3, r3, #3
 8014ce4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014cec:	685b      	ldr	r3, [r3, #4]
 8014cee:	68fa      	ldr	r2, [r7, #12]
 8014cf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014cf4:	f043 0302 	orr.w	r3, r3, #2
 8014cf8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014cfa:	2300      	movs	r3, #0
}
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	3714      	adds	r7, #20
 8014d00:	46bd      	mov	sp, r7
 8014d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d06:	4770      	bx	lr

08014d08 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8014d08:	b480      	push	{r7}
 8014d0a:	b085      	sub	sp, #20
 8014d0c:	af00      	add	r7, sp, #0
 8014d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	695b      	ldr	r3, [r3, #20]
 8014d14:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	699b      	ldr	r3, [r3, #24]
 8014d1a:	68fa      	ldr	r2, [r7, #12]
 8014d1c:	4013      	ands	r3, r2
 8014d1e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8014d20:	68fb      	ldr	r3, [r7, #12]
}
 8014d22:	4618      	mov	r0, r3
 8014d24:	3714      	adds	r7, #20
 8014d26:	46bd      	mov	sp, r7
 8014d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d2c:	4770      	bx	lr

08014d2e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014d2e:	b480      	push	{r7}
 8014d30:	b085      	sub	sp, #20
 8014d32:	af00      	add	r7, sp, #0
 8014d34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d40:	699b      	ldr	r3, [r3, #24]
 8014d42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d4a:	69db      	ldr	r3, [r3, #28]
 8014d4c:	68ba      	ldr	r2, [r7, #8]
 8014d4e:	4013      	ands	r3, r2
 8014d50:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8014d52:	68bb      	ldr	r3, [r7, #8]
 8014d54:	0c1b      	lsrs	r3, r3, #16
}
 8014d56:	4618      	mov	r0, r3
 8014d58:	3714      	adds	r7, #20
 8014d5a:	46bd      	mov	sp, r7
 8014d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d60:	4770      	bx	lr

08014d62 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014d62:	b480      	push	{r7}
 8014d64:	b085      	sub	sp, #20
 8014d66:	af00      	add	r7, sp, #0
 8014d68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d74:	699b      	ldr	r3, [r3, #24]
 8014d76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d7e:	69db      	ldr	r3, [r3, #28]
 8014d80:	68ba      	ldr	r2, [r7, #8]
 8014d82:	4013      	ands	r3, r2
 8014d84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8014d86:	68bb      	ldr	r3, [r7, #8]
 8014d88:	b29b      	uxth	r3, r3
}
 8014d8a:	4618      	mov	r0, r3
 8014d8c:	3714      	adds	r7, #20
 8014d8e:	46bd      	mov	sp, r7
 8014d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d94:	4770      	bx	lr

08014d96 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014d96:	b480      	push	{r7}
 8014d98:	b085      	sub	sp, #20
 8014d9a:	af00      	add	r7, sp, #0
 8014d9c:	6078      	str	r0, [r7, #4]
 8014d9e:	460b      	mov	r3, r1
 8014da0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8014da6:	78fb      	ldrb	r3, [r7, #3]
 8014da8:	015a      	lsls	r2, r3, #5
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	4413      	add	r3, r2
 8014dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014db2:	689b      	ldr	r3, [r3, #8]
 8014db4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014dbc:	695b      	ldr	r3, [r3, #20]
 8014dbe:	68ba      	ldr	r2, [r7, #8]
 8014dc0:	4013      	ands	r3, r2
 8014dc2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014dc4:	68bb      	ldr	r3, [r7, #8]
}
 8014dc6:	4618      	mov	r0, r3
 8014dc8:	3714      	adds	r7, #20
 8014dca:	46bd      	mov	sp, r7
 8014dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dd0:	4770      	bx	lr

08014dd2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014dd2:	b480      	push	{r7}
 8014dd4:	b087      	sub	sp, #28
 8014dd6:	af00      	add	r7, sp, #0
 8014dd8:	6078      	str	r0, [r7, #4]
 8014dda:	460b      	mov	r3, r1
 8014ddc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8014de2:	697b      	ldr	r3, [r7, #20]
 8014de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014de8:	691b      	ldr	r3, [r3, #16]
 8014dea:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8014dec:	697b      	ldr	r3, [r7, #20]
 8014dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014df4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8014df6:	78fb      	ldrb	r3, [r7, #3]
 8014df8:	f003 030f 	and.w	r3, r3, #15
 8014dfc:	68fa      	ldr	r2, [r7, #12]
 8014dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8014e02:	01db      	lsls	r3, r3, #7
 8014e04:	b2db      	uxtb	r3, r3
 8014e06:	693a      	ldr	r2, [r7, #16]
 8014e08:	4313      	orrs	r3, r2
 8014e0a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8014e0c:	78fb      	ldrb	r3, [r7, #3]
 8014e0e:	015a      	lsls	r2, r3, #5
 8014e10:	697b      	ldr	r3, [r7, #20]
 8014e12:	4413      	add	r3, r2
 8014e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014e18:	689b      	ldr	r3, [r3, #8]
 8014e1a:	693a      	ldr	r2, [r7, #16]
 8014e1c:	4013      	ands	r3, r2
 8014e1e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014e20:	68bb      	ldr	r3, [r7, #8]
}
 8014e22:	4618      	mov	r0, r3
 8014e24:	371c      	adds	r7, #28
 8014e26:	46bd      	mov	sp, r7
 8014e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e2c:	4770      	bx	lr

08014e2e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8014e2e:	b480      	push	{r7}
 8014e30:	b083      	sub	sp, #12
 8014e32:	af00      	add	r7, sp, #0
 8014e34:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	695b      	ldr	r3, [r3, #20]
 8014e3a:	f003 0301 	and.w	r3, r3, #1
}
 8014e3e:	4618      	mov	r0, r3
 8014e40:	370c      	adds	r7, #12
 8014e42:	46bd      	mov	sp, r7
 8014e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e48:	4770      	bx	lr
	...

08014e4c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8014e4c:	b480      	push	{r7}
 8014e4e:	b085      	sub	sp, #20
 8014e50:	af00      	add	r7, sp, #0
 8014e52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014e5e:	681a      	ldr	r2, [r3, #0]
 8014e60:	68fb      	ldr	r3, [r7, #12]
 8014e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014e66:	4619      	mov	r1, r3
 8014e68:	4b09      	ldr	r3, [pc, #36]	; (8014e90 <USB_ActivateSetup+0x44>)
 8014e6a:	4013      	ands	r3, r2
 8014e6c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014e74:	685b      	ldr	r3, [r3, #4]
 8014e76:	68fa      	ldr	r2, [r7, #12]
 8014e78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014e80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014e82:	2300      	movs	r3, #0
}
 8014e84:	4618      	mov	r0, r3
 8014e86:	3714      	adds	r7, #20
 8014e88:	46bd      	mov	sp, r7
 8014e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e8e:	4770      	bx	lr
 8014e90:	fffff800 	.word	0xfffff800

08014e94 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8014e94:	b480      	push	{r7}
 8014e96:	b087      	sub	sp, #28
 8014e98:	af00      	add	r7, sp, #0
 8014e9a:	60f8      	str	r0, [r7, #12]
 8014e9c:	460b      	mov	r3, r1
 8014e9e:	607a      	str	r2, [r7, #4]
 8014ea0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014ea2:	68fb      	ldr	r3, [r7, #12]
 8014ea4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8014ea6:	68fb      	ldr	r3, [r7, #12]
 8014ea8:	333c      	adds	r3, #60	; 0x3c
 8014eaa:	3304      	adds	r3, #4
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8014eb0:	693b      	ldr	r3, [r7, #16]
 8014eb2:	4a26      	ldr	r2, [pc, #152]	; (8014f4c <USB_EP0_OutStart+0xb8>)
 8014eb4:	4293      	cmp	r3, r2
 8014eb6:	d90a      	bls.n	8014ece <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014eb8:	697b      	ldr	r3, [r7, #20]
 8014eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014ec4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014ec8:	d101      	bne.n	8014ece <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8014eca:	2300      	movs	r3, #0
 8014ecc:	e037      	b.n	8014f3e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8014ece:	697b      	ldr	r3, [r7, #20]
 8014ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014ed4:	461a      	mov	r2, r3
 8014ed6:	2300      	movs	r3, #0
 8014ed8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014eda:	697b      	ldr	r3, [r7, #20]
 8014edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014ee0:	691b      	ldr	r3, [r3, #16]
 8014ee2:	697a      	ldr	r2, [r7, #20]
 8014ee4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014ee8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014eec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8014eee:	697b      	ldr	r3, [r7, #20]
 8014ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014ef4:	691b      	ldr	r3, [r3, #16]
 8014ef6:	697a      	ldr	r2, [r7, #20]
 8014ef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014efc:	f043 0318 	orr.w	r3, r3, #24
 8014f00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8014f02:	697b      	ldr	r3, [r7, #20]
 8014f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014f08:	691b      	ldr	r3, [r3, #16]
 8014f0a:	697a      	ldr	r2, [r7, #20]
 8014f0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014f10:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8014f14:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8014f16:	7afb      	ldrb	r3, [r7, #11]
 8014f18:	2b01      	cmp	r3, #1
 8014f1a:	d10f      	bne.n	8014f3c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8014f1c:	697b      	ldr	r3, [r7, #20]
 8014f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014f22:	461a      	mov	r2, r3
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8014f28:	697b      	ldr	r3, [r7, #20]
 8014f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014f2e:	681b      	ldr	r3, [r3, #0]
 8014f30:	697a      	ldr	r2, [r7, #20]
 8014f32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014f36:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8014f3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014f3c:	2300      	movs	r3, #0
}
 8014f3e:	4618      	mov	r0, r3
 8014f40:	371c      	adds	r7, #28
 8014f42:	46bd      	mov	sp, r7
 8014f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f48:	4770      	bx	lr
 8014f4a:	bf00      	nop
 8014f4c:	4f54300a 	.word	0x4f54300a

08014f50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8014f50:	b480      	push	{r7}
 8014f52:	b085      	sub	sp, #20
 8014f54:	af00      	add	r7, sp, #0
 8014f56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014f58:	2300      	movs	r3, #0
 8014f5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014f5c:	68fb      	ldr	r3, [r7, #12]
 8014f5e:	3301      	adds	r3, #1
 8014f60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014f62:	68fb      	ldr	r3, [r7, #12]
 8014f64:	4a13      	ldr	r2, [pc, #76]	; (8014fb4 <USB_CoreReset+0x64>)
 8014f66:	4293      	cmp	r3, r2
 8014f68:	d901      	bls.n	8014f6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8014f6a:	2303      	movs	r3, #3
 8014f6c:	e01b      	b.n	8014fa6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	691b      	ldr	r3, [r3, #16]
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	daf2      	bge.n	8014f5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8014f76:	2300      	movs	r3, #0
 8014f78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	691b      	ldr	r3, [r3, #16]
 8014f7e:	f043 0201 	orr.w	r2, r3, #1
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	3301      	adds	r3, #1
 8014f8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	4a09      	ldr	r2, [pc, #36]	; (8014fb4 <USB_CoreReset+0x64>)
 8014f90:	4293      	cmp	r3, r2
 8014f92:	d901      	bls.n	8014f98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014f94:	2303      	movs	r3, #3
 8014f96:	e006      	b.n	8014fa6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	691b      	ldr	r3, [r3, #16]
 8014f9c:	f003 0301 	and.w	r3, r3, #1
 8014fa0:	2b01      	cmp	r3, #1
 8014fa2:	d0f0      	beq.n	8014f86 <USB_CoreReset+0x36>

  return HAL_OK;
 8014fa4:	2300      	movs	r3, #0
}
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	3714      	adds	r7, #20
 8014faa:	46bd      	mov	sp, r7
 8014fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fb0:	4770      	bx	lr
 8014fb2:	bf00      	nop
 8014fb4:	00030d40 	.word	0x00030d40

08014fb8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8014fb8:	b580      	push	{r7, lr}
 8014fba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8014fbc:	4904      	ldr	r1, [pc, #16]	; (8014fd0 <MX_FATFS_Init+0x18>)
 8014fbe:	4805      	ldr	r0, [pc, #20]	; (8014fd4 <MX_FATFS_Init+0x1c>)
 8014fc0:	f005 f904 	bl	801a1cc <FATFS_LinkDriver>
 8014fc4:	4603      	mov	r3, r0
 8014fc6:	461a      	mov	r2, r3
 8014fc8:	4b03      	ldr	r3, [pc, #12]	; (8014fd8 <MX_FATFS_Init+0x20>)
 8014fca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8014fcc:	bf00      	nop
 8014fce:	bd80      	pop	{r7, pc}
 8014fd0:	24003cec 	.word	0x24003cec
 8014fd4:	0801c3cc 	.word	0x0801c3cc
 8014fd8:	24003ce8 	.word	0x24003ce8

08014fdc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8014fdc:	b480      	push	{r7}
 8014fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8014fe0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	46bd      	mov	sp, r7
 8014fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fea:	4770      	bx	lr

08014fec <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8014fec:	b580      	push	{r7, lr}
 8014fee:	b082      	sub	sp, #8
 8014ff0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8014ff2:	2300      	movs	r3, #0
 8014ff4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8014ff6:	f000 f885 	bl	8015104 <BSP_SD_IsDetected>
 8014ffa:	4603      	mov	r3, r0
 8014ffc:	2b01      	cmp	r3, #1
 8014ffe:	d001      	beq.n	8015004 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8015000:	2302      	movs	r3, #2
 8015002:	e012      	b.n	801502a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 8015004:	480b      	ldr	r0, [pc, #44]	; (8015034 <BSP_SD_Init+0x48>)
 8015006:	f7f8 ff39 	bl	800de7c <HAL_SD_Init>
 801500a:	4603      	mov	r3, r0
 801500c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801500e:	79fb      	ldrb	r3, [r7, #7]
 8015010:	2b00      	cmp	r3, #0
 8015012:	d109      	bne.n	8015028 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8015014:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8015018:	4806      	ldr	r0, [pc, #24]	; (8015034 <BSP_SD_Init+0x48>)
 801501a:	f7f9 fdef 	bl	800ebfc <HAL_SD_ConfigWideBusOperation>
 801501e:	4603      	mov	r3, r0
 8015020:	2b00      	cmp	r3, #0
 8015022:	d001      	beq.n	8015028 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8015024:	2301      	movs	r3, #1
 8015026:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8015028:	79fb      	ldrb	r3, [r7, #7]
}
 801502a:	4618      	mov	r0, r3
 801502c:	3708      	adds	r7, #8
 801502e:	46bd      	mov	sp, r7
 8015030:	bd80      	pop	{r7, pc}
 8015032:	bf00      	nop
 8015034:	24000eb8 	.word	0x24000eb8

08015038 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8015038:	b580      	push	{r7, lr}
 801503a:	b086      	sub	sp, #24
 801503c:	af00      	add	r7, sp, #0
 801503e:	60f8      	str	r0, [r7, #12]
 8015040:	60b9      	str	r1, [r7, #8]
 8015042:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8015044:	2300      	movs	r3, #0
 8015046:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	68ba      	ldr	r2, [r7, #8]
 801504c:	68f9      	ldr	r1, [r7, #12]
 801504e:	4806      	ldr	r0, [pc, #24]	; (8015068 <BSP_SD_ReadBlocks_DMA+0x30>)
 8015050:	f7f9 f834 	bl	800e0bc <HAL_SD_ReadBlocks_DMA>
 8015054:	4603      	mov	r3, r0
 8015056:	2b00      	cmp	r3, #0
 8015058:	d001      	beq.n	801505e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801505a:	2301      	movs	r3, #1
 801505c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801505e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015060:	4618      	mov	r0, r3
 8015062:	3718      	adds	r7, #24
 8015064:	46bd      	mov	sp, r7
 8015066:	bd80      	pop	{r7, pc}
 8015068:	24000eb8 	.word	0x24000eb8

0801506c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801506c:	b580      	push	{r7, lr}
 801506e:	b086      	sub	sp, #24
 8015070:	af00      	add	r7, sp, #0
 8015072:	60f8      	str	r0, [r7, #12]
 8015074:	60b9      	str	r1, [r7, #8]
 8015076:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8015078:	2300      	movs	r3, #0
 801507a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	68ba      	ldr	r2, [r7, #8]
 8015080:	68f9      	ldr	r1, [r7, #12]
 8015082:	4806      	ldr	r0, [pc, #24]	; (801509c <BSP_SD_WriteBlocks_DMA+0x30>)
 8015084:	f7f9 f8c2 	bl	800e20c <HAL_SD_WriteBlocks_DMA>
 8015088:	4603      	mov	r3, r0
 801508a:	2b00      	cmp	r3, #0
 801508c:	d001      	beq.n	8015092 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801508e:	2301      	movs	r3, #1
 8015090:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8015092:	7dfb      	ldrb	r3, [r7, #23]
}
 8015094:	4618      	mov	r0, r3
 8015096:	3718      	adds	r7, #24
 8015098:	46bd      	mov	sp, r7
 801509a:	bd80      	pop	{r7, pc}
 801509c:	24000eb8 	.word	0x24000eb8

080150a0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80150a0:	b580      	push	{r7, lr}
 80150a2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80150a4:	4805      	ldr	r0, [pc, #20]	; (80150bc <BSP_SD_GetCardState+0x1c>)
 80150a6:	f7f9 febb 	bl	800ee20 <HAL_SD_GetCardState>
 80150aa:	4603      	mov	r3, r0
 80150ac:	2b04      	cmp	r3, #4
 80150ae:	bf14      	ite	ne
 80150b0:	2301      	movne	r3, #1
 80150b2:	2300      	moveq	r3, #0
 80150b4:	b2db      	uxtb	r3, r3
}
 80150b6:	4618      	mov	r0, r3
 80150b8:	bd80      	pop	{r7, pc}
 80150ba:	bf00      	nop
 80150bc:	24000eb8 	.word	0x24000eb8

080150c0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80150c0:	b580      	push	{r7, lr}
 80150c2:	b082      	sub	sp, #8
 80150c4:	af00      	add	r7, sp, #0
 80150c6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 80150c8:	6879      	ldr	r1, [r7, #4]
 80150ca:	4803      	ldr	r0, [pc, #12]	; (80150d8 <BSP_SD_GetCardInfo+0x18>)
 80150cc:	f7f9 fd6a 	bl	800eba4 <HAL_SD_GetCardInfo>
}
 80150d0:	bf00      	nop
 80150d2:	3708      	adds	r7, #8
 80150d4:	46bd      	mov	sp, r7
 80150d6:	bd80      	pop	{r7, pc}
 80150d8:	24000eb8 	.word	0x24000eb8

080150dc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80150dc:	b580      	push	{r7, lr}
 80150de:	b082      	sub	sp, #8
 80150e0:	af00      	add	r7, sp, #0
 80150e2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80150e4:	f000 f984 	bl	80153f0 <BSP_SD_WriteCpltCallback>
}
 80150e8:	bf00      	nop
 80150ea:	3708      	adds	r7, #8
 80150ec:	46bd      	mov	sp, r7
 80150ee:	bd80      	pop	{r7, pc}

080150f0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80150f0:	b580      	push	{r7, lr}
 80150f2:	b082      	sub	sp, #8
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80150f8:	f000 f986 	bl	8015408 <BSP_SD_ReadCpltCallback>
}
 80150fc:	bf00      	nop
 80150fe:	3708      	adds	r7, #8
 8015100:	46bd      	mov	sp, r7
 8015102:	bd80      	pop	{r7, pc}

08015104 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8015104:	b480      	push	{r7}
 8015106:	b083      	sub	sp, #12
 8015108:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801510a:	2301      	movs	r3, #1
 801510c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 801510e:	79fb      	ldrb	r3, [r7, #7]
 8015110:	b2db      	uxtb	r3, r3
}
 8015112:	4618      	mov	r0, r3
 8015114:	370c      	adds	r7, #12
 8015116:	46bd      	mov	sp, r7
 8015118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801511c:	4770      	bx	lr

0801511e <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 801511e:	b580      	push	{r7, lr}
 8015120:	b084      	sub	sp, #16
 8015122:	af00      	add	r7, sp, #0
 8015124:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8015126:	f7ee fddd 	bl	8003ce4 <HAL_GetTick>
 801512a:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801512c:	e006      	b.n	801513c <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801512e:	f7ff ffb7 	bl	80150a0 <BSP_SD_GetCardState>
 8015132:	4603      	mov	r3, r0
 8015134:	2b00      	cmp	r3, #0
 8015136:	d101      	bne.n	801513c <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8015138:	2300      	movs	r3, #0
 801513a:	e009      	b.n	8015150 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801513c:	f7ee fdd2 	bl	8003ce4 <HAL_GetTick>
 8015140:	4602      	mov	r2, r0
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	1ad3      	subs	r3, r2, r3
 8015146:	687a      	ldr	r2, [r7, #4]
 8015148:	429a      	cmp	r2, r3
 801514a:	d8f0      	bhi.n	801512e <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801514c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015150:	4618      	mov	r0, r3
 8015152:	3710      	adds	r7, #16
 8015154:	46bd      	mov	sp, r7
 8015156:	bd80      	pop	{r7, pc}

08015158 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8015158:	b580      	push	{r7, lr}
 801515a:	b082      	sub	sp, #8
 801515c:	af00      	add	r7, sp, #0
 801515e:	4603      	mov	r3, r0
 8015160:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8015162:	4b0b      	ldr	r3, [pc, #44]	; (8015190 <SD_CheckStatus+0x38>)
 8015164:	2201      	movs	r2, #1
 8015166:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8015168:	f7ff ff9a 	bl	80150a0 <BSP_SD_GetCardState>
 801516c:	4603      	mov	r3, r0
 801516e:	2b00      	cmp	r3, #0
 8015170:	d107      	bne.n	8015182 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8015172:	4b07      	ldr	r3, [pc, #28]	; (8015190 <SD_CheckStatus+0x38>)
 8015174:	781b      	ldrb	r3, [r3, #0]
 8015176:	b2db      	uxtb	r3, r3
 8015178:	f023 0301 	bic.w	r3, r3, #1
 801517c:	b2da      	uxtb	r2, r3
 801517e:	4b04      	ldr	r3, [pc, #16]	; (8015190 <SD_CheckStatus+0x38>)
 8015180:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8015182:	4b03      	ldr	r3, [pc, #12]	; (8015190 <SD_CheckStatus+0x38>)
 8015184:	781b      	ldrb	r3, [r3, #0]
 8015186:	b2db      	uxtb	r3, r3
}
 8015188:	4618      	mov	r0, r3
 801518a:	3708      	adds	r7, #8
 801518c:	46bd      	mov	sp, r7
 801518e:	bd80      	pop	{r7, pc}
 8015190:	2400010d 	.word	0x2400010d

08015194 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8015194:	b580      	push	{r7, lr}
 8015196:	b082      	sub	sp, #8
 8015198:	af00      	add	r7, sp, #0
 801519a:	4603      	mov	r3, r0
 801519c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801519e:	f7ff ff25 	bl	8014fec <BSP_SD_Init>
 80151a2:	4603      	mov	r3, r0
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d107      	bne.n	80151b8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80151a8:	79fb      	ldrb	r3, [r7, #7]
 80151aa:	4618      	mov	r0, r3
 80151ac:	f7ff ffd4 	bl	8015158 <SD_CheckStatus>
 80151b0:	4603      	mov	r3, r0
 80151b2:	461a      	mov	r2, r3
 80151b4:	4b04      	ldr	r3, [pc, #16]	; (80151c8 <SD_initialize+0x34>)
 80151b6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80151b8:	4b03      	ldr	r3, [pc, #12]	; (80151c8 <SD_initialize+0x34>)
 80151ba:	781b      	ldrb	r3, [r3, #0]
 80151bc:	b2db      	uxtb	r3, r3
}
 80151be:	4618      	mov	r0, r3
 80151c0:	3708      	adds	r7, #8
 80151c2:	46bd      	mov	sp, r7
 80151c4:	bd80      	pop	{r7, pc}
 80151c6:	bf00      	nop
 80151c8:	2400010d 	.word	0x2400010d

080151cc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80151cc:	b580      	push	{r7, lr}
 80151ce:	b082      	sub	sp, #8
 80151d0:	af00      	add	r7, sp, #0
 80151d2:	4603      	mov	r3, r0
 80151d4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80151d6:	79fb      	ldrb	r3, [r7, #7]
 80151d8:	4618      	mov	r0, r3
 80151da:	f7ff ffbd 	bl	8015158 <SD_CheckStatus>
 80151de:	4603      	mov	r3, r0
}
 80151e0:	4618      	mov	r0, r3
 80151e2:	3708      	adds	r7, #8
 80151e4:	46bd      	mov	sp, r7
 80151e6:	bd80      	pop	{r7, pc}

080151e8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80151e8:	b580      	push	{r7, lr}
 80151ea:	b086      	sub	sp, #24
 80151ec:	af00      	add	r7, sp, #0
 80151ee:	60b9      	str	r1, [r7, #8]
 80151f0:	607a      	str	r2, [r7, #4]
 80151f2:	603b      	str	r3, [r7, #0]
 80151f4:	4603      	mov	r3, r0
 80151f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80151f8:	2301      	movs	r3, #1
 80151fa:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80151fc:	f247 5030 	movw	r0, #30000	; 0x7530
 8015200:	f7ff ff8d 	bl	801511e <SD_CheckStatusWithTimeout>
 8015204:	4603      	mov	r3, r0
 8015206:	2b00      	cmp	r3, #0
 8015208:	da01      	bge.n	801520e <SD_read+0x26>
  {
    return res;
 801520a:	7dfb      	ldrb	r3, [r7, #23]
 801520c:	e03b      	b.n	8015286 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801520e:	683a      	ldr	r2, [r7, #0]
 8015210:	6879      	ldr	r1, [r7, #4]
 8015212:	68b8      	ldr	r0, [r7, #8]
 8015214:	f7ff ff10 	bl	8015038 <BSP_SD_ReadBlocks_DMA>
 8015218:	4603      	mov	r3, r0
 801521a:	2b00      	cmp	r3, #0
 801521c:	d132      	bne.n	8015284 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801521e:	4b1c      	ldr	r3, [pc, #112]	; (8015290 <SD_read+0xa8>)
 8015220:	2200      	movs	r2, #0
 8015222:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8015224:	f7ee fd5e 	bl	8003ce4 <HAL_GetTick>
 8015228:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801522a:	bf00      	nop
 801522c:	4b18      	ldr	r3, [pc, #96]	; (8015290 <SD_read+0xa8>)
 801522e:	681b      	ldr	r3, [r3, #0]
 8015230:	2b00      	cmp	r3, #0
 8015232:	d108      	bne.n	8015246 <SD_read+0x5e>
 8015234:	f7ee fd56 	bl	8003ce4 <HAL_GetTick>
 8015238:	4602      	mov	r2, r0
 801523a:	693b      	ldr	r3, [r7, #16]
 801523c:	1ad3      	subs	r3, r2, r3
 801523e:	f247 522f 	movw	r2, #29999	; 0x752f
 8015242:	4293      	cmp	r3, r2
 8015244:	d9f2      	bls.n	801522c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8015246:	4b12      	ldr	r3, [pc, #72]	; (8015290 <SD_read+0xa8>)
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	2b00      	cmp	r3, #0
 801524c:	d102      	bne.n	8015254 <SD_read+0x6c>
      {
        res = RES_ERROR;
 801524e:	2301      	movs	r3, #1
 8015250:	75fb      	strb	r3, [r7, #23]
 8015252:	e017      	b.n	8015284 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8015254:	4b0e      	ldr	r3, [pc, #56]	; (8015290 <SD_read+0xa8>)
 8015256:	2200      	movs	r2, #0
 8015258:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801525a:	f7ee fd43 	bl	8003ce4 <HAL_GetTick>
 801525e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015260:	e007      	b.n	8015272 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015262:	f7ff ff1d 	bl	80150a0 <BSP_SD_GetCardState>
 8015266:	4603      	mov	r3, r0
 8015268:	2b00      	cmp	r3, #0
 801526a:	d102      	bne.n	8015272 <SD_read+0x8a>
          {
            res = RES_OK;
 801526c:	2300      	movs	r3, #0
 801526e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8015270:	e008      	b.n	8015284 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015272:	f7ee fd37 	bl	8003ce4 <HAL_GetTick>
 8015276:	4602      	mov	r2, r0
 8015278:	693b      	ldr	r3, [r7, #16]
 801527a:	1ad3      	subs	r3, r2, r3
 801527c:	f247 522f 	movw	r2, #29999	; 0x752f
 8015280:	4293      	cmp	r3, r2
 8015282:	d9ee      	bls.n	8015262 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8015284:	7dfb      	ldrb	r3, [r7, #23]
}
 8015286:	4618      	mov	r0, r3
 8015288:	3718      	adds	r7, #24
 801528a:	46bd      	mov	sp, r7
 801528c:	bd80      	pop	{r7, pc}
 801528e:	bf00      	nop
 8015290:	24003cf4 	.word	0x24003cf4

08015294 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8015294:	b580      	push	{r7, lr}
 8015296:	b086      	sub	sp, #24
 8015298:	af00      	add	r7, sp, #0
 801529a:	60b9      	str	r1, [r7, #8]
 801529c:	607a      	str	r2, [r7, #4]
 801529e:	603b      	str	r3, [r7, #0]
 80152a0:	4603      	mov	r3, r0
 80152a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80152a4:	2301      	movs	r3, #1
 80152a6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80152a8:	4b24      	ldr	r3, [pc, #144]	; (801533c <SD_write+0xa8>)
 80152aa:	2200      	movs	r2, #0
 80152ac:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80152ae:	f247 5030 	movw	r0, #30000	; 0x7530
 80152b2:	f7ff ff34 	bl	801511e <SD_CheckStatusWithTimeout>
 80152b6:	4603      	mov	r3, r0
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	da01      	bge.n	80152c0 <SD_write+0x2c>
  {
    return res;
 80152bc:	7dfb      	ldrb	r3, [r7, #23]
 80152be:	e038      	b.n	8015332 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80152c0:	683a      	ldr	r2, [r7, #0]
 80152c2:	6879      	ldr	r1, [r7, #4]
 80152c4:	68b8      	ldr	r0, [r7, #8]
 80152c6:	f7ff fed1 	bl	801506c <BSP_SD_WriteBlocks_DMA>
 80152ca:	4603      	mov	r3, r0
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d12f      	bne.n	8015330 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80152d0:	f7ee fd08 	bl	8003ce4 <HAL_GetTick>
 80152d4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80152d6:	bf00      	nop
 80152d8:	4b18      	ldr	r3, [pc, #96]	; (801533c <SD_write+0xa8>)
 80152da:	681b      	ldr	r3, [r3, #0]
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d108      	bne.n	80152f2 <SD_write+0x5e>
 80152e0:	f7ee fd00 	bl	8003ce4 <HAL_GetTick>
 80152e4:	4602      	mov	r2, r0
 80152e6:	693b      	ldr	r3, [r7, #16]
 80152e8:	1ad3      	subs	r3, r2, r3
 80152ea:	f247 522f 	movw	r2, #29999	; 0x752f
 80152ee:	4293      	cmp	r3, r2
 80152f0:	d9f2      	bls.n	80152d8 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80152f2:	4b12      	ldr	r3, [pc, #72]	; (801533c <SD_write+0xa8>)
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d102      	bne.n	8015300 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80152fa:	2301      	movs	r3, #1
 80152fc:	75fb      	strb	r3, [r7, #23]
 80152fe:	e017      	b.n	8015330 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8015300:	4b0e      	ldr	r3, [pc, #56]	; (801533c <SD_write+0xa8>)
 8015302:	2200      	movs	r2, #0
 8015304:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8015306:	f7ee fced 	bl	8003ce4 <HAL_GetTick>
 801530a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801530c:	e007      	b.n	801531e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801530e:	f7ff fec7 	bl	80150a0 <BSP_SD_GetCardState>
 8015312:	4603      	mov	r3, r0
 8015314:	2b00      	cmp	r3, #0
 8015316:	d102      	bne.n	801531e <SD_write+0x8a>
          {
            res = RES_OK;
 8015318:	2300      	movs	r3, #0
 801531a:	75fb      	strb	r3, [r7, #23]
            break;
 801531c:	e008      	b.n	8015330 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801531e:	f7ee fce1 	bl	8003ce4 <HAL_GetTick>
 8015322:	4602      	mov	r2, r0
 8015324:	693b      	ldr	r3, [r7, #16]
 8015326:	1ad3      	subs	r3, r2, r3
 8015328:	f247 522f 	movw	r2, #29999	; 0x752f
 801532c:	4293      	cmp	r3, r2
 801532e:	d9ee      	bls.n	801530e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8015330:	7dfb      	ldrb	r3, [r7, #23]
}
 8015332:	4618      	mov	r0, r3
 8015334:	3718      	adds	r7, #24
 8015336:	46bd      	mov	sp, r7
 8015338:	bd80      	pop	{r7, pc}
 801533a:	bf00      	nop
 801533c:	24003cf0 	.word	0x24003cf0

08015340 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8015340:	b580      	push	{r7, lr}
 8015342:	b08c      	sub	sp, #48	; 0x30
 8015344:	af00      	add	r7, sp, #0
 8015346:	4603      	mov	r3, r0
 8015348:	603a      	str	r2, [r7, #0]
 801534a:	71fb      	strb	r3, [r7, #7]
 801534c:	460b      	mov	r3, r1
 801534e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8015350:	2301      	movs	r3, #1
 8015352:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8015356:	4b25      	ldr	r3, [pc, #148]	; (80153ec <SD_ioctl+0xac>)
 8015358:	781b      	ldrb	r3, [r3, #0]
 801535a:	b2db      	uxtb	r3, r3
 801535c:	f003 0301 	and.w	r3, r3, #1
 8015360:	2b00      	cmp	r3, #0
 8015362:	d001      	beq.n	8015368 <SD_ioctl+0x28>
 8015364:	2303      	movs	r3, #3
 8015366:	e03c      	b.n	80153e2 <SD_ioctl+0xa2>

  switch (cmd)
 8015368:	79bb      	ldrb	r3, [r7, #6]
 801536a:	2b03      	cmp	r3, #3
 801536c:	d834      	bhi.n	80153d8 <SD_ioctl+0x98>
 801536e:	a201      	add	r2, pc, #4	; (adr r2, 8015374 <SD_ioctl+0x34>)
 8015370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015374:	08015385 	.word	0x08015385
 8015378:	0801538d 	.word	0x0801538d
 801537c:	080153a5 	.word	0x080153a5
 8015380:	080153bf 	.word	0x080153bf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8015384:	2300      	movs	r3, #0
 8015386:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801538a:	e028      	b.n	80153de <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801538c:	f107 0308 	add.w	r3, r7, #8
 8015390:	4618      	mov	r0, r3
 8015392:	f7ff fe95 	bl	80150c0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8015396:	6a3a      	ldr	r2, [r7, #32]
 8015398:	683b      	ldr	r3, [r7, #0]
 801539a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801539c:	2300      	movs	r3, #0
 801539e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80153a2:	e01c      	b.n	80153de <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80153a4:	f107 0308 	add.w	r3, r7, #8
 80153a8:	4618      	mov	r0, r3
 80153aa:	f7ff fe89 	bl	80150c0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80153ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153b0:	b29a      	uxth	r2, r3
 80153b2:	683b      	ldr	r3, [r7, #0]
 80153b4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80153b6:	2300      	movs	r3, #0
 80153b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80153bc:	e00f      	b.n	80153de <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80153be:	f107 0308 	add.w	r3, r7, #8
 80153c2:	4618      	mov	r0, r3
 80153c4:	f7ff fe7c 	bl	80150c0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80153c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153ca:	0a5a      	lsrs	r2, r3, #9
 80153cc:	683b      	ldr	r3, [r7, #0]
 80153ce:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80153d0:	2300      	movs	r3, #0
 80153d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80153d6:	e002      	b.n	80153de <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80153d8:	2304      	movs	r3, #4
 80153da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80153de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80153e2:	4618      	mov	r0, r3
 80153e4:	3730      	adds	r7, #48	; 0x30
 80153e6:	46bd      	mov	sp, r7
 80153e8:	bd80      	pop	{r7, pc}
 80153ea:	bf00      	nop
 80153ec:	2400010d 	.word	0x2400010d

080153f0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80153f0:	b480      	push	{r7}
 80153f2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80153f4:	4b03      	ldr	r3, [pc, #12]	; (8015404 <BSP_SD_WriteCpltCallback+0x14>)
 80153f6:	2201      	movs	r2, #1
 80153f8:	601a      	str	r2, [r3, #0]
}
 80153fa:	bf00      	nop
 80153fc:	46bd      	mov	sp, r7
 80153fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015402:	4770      	bx	lr
 8015404:	24003cf0 	.word	0x24003cf0

08015408 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8015408:	b480      	push	{r7}
 801540a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 801540c:	4b03      	ldr	r3, [pc, #12]	; (801541c <BSP_SD_ReadCpltCallback+0x14>)
 801540e:	2201      	movs	r2, #1
 8015410:	601a      	str	r2, [r3, #0]
}
 8015412:	bf00      	nop
 8015414:	46bd      	mov	sp, r7
 8015416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801541a:	4770      	bx	lr
 801541c:	24003cf4 	.word	0x24003cf4

08015420 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015420:	b580      	push	{r7, lr}
 8015422:	b084      	sub	sp, #16
 8015424:	af00      	add	r7, sp, #0
 8015426:	6078      	str	r0, [r7, #4]
 8015428:	460b      	mov	r3, r1
 801542a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801542c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8015430:	f005 fc72 	bl	801ad18 <USBD_static_malloc>
 8015434:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	2b00      	cmp	r3, #0
 801543a:	d109      	bne.n	8015450 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	32b0      	adds	r2, #176	; 0xb0
 8015446:	2100      	movs	r1, #0
 8015448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801544c:	2302      	movs	r3, #2
 801544e:	e0d4      	b.n	80155fa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8015450:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8015454:	2100      	movs	r1, #0
 8015456:	68f8      	ldr	r0, [r7, #12]
 8015458:	f005 fcf0 	bl	801ae3c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	32b0      	adds	r2, #176	; 0xb0
 8015466:	68f9      	ldr	r1, [r7, #12]
 8015468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	32b0      	adds	r2, #176	; 0xb0
 8015476:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	7c1b      	ldrb	r3, [r3, #16]
 8015484:	2b00      	cmp	r3, #0
 8015486:	d138      	bne.n	80154fa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015488:	4b5e      	ldr	r3, [pc, #376]	; (8015604 <USBD_CDC_Init+0x1e4>)
 801548a:	7819      	ldrb	r1, [r3, #0]
 801548c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015490:	2202      	movs	r2, #2
 8015492:	6878      	ldr	r0, [r7, #4]
 8015494:	f005 fb1d 	bl	801aad2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015498:	4b5a      	ldr	r3, [pc, #360]	; (8015604 <USBD_CDC_Init+0x1e4>)
 801549a:	781b      	ldrb	r3, [r3, #0]
 801549c:	f003 020f 	and.w	r2, r3, #15
 80154a0:	6879      	ldr	r1, [r7, #4]
 80154a2:	4613      	mov	r3, r2
 80154a4:	009b      	lsls	r3, r3, #2
 80154a6:	4413      	add	r3, r2
 80154a8:	009b      	lsls	r3, r3, #2
 80154aa:	440b      	add	r3, r1
 80154ac:	3324      	adds	r3, #36	; 0x24
 80154ae:	2201      	movs	r2, #1
 80154b0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80154b2:	4b55      	ldr	r3, [pc, #340]	; (8015608 <USBD_CDC_Init+0x1e8>)
 80154b4:	7819      	ldrb	r1, [r3, #0]
 80154b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80154ba:	2202      	movs	r2, #2
 80154bc:	6878      	ldr	r0, [r7, #4]
 80154be:	f005 fb08 	bl	801aad2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80154c2:	4b51      	ldr	r3, [pc, #324]	; (8015608 <USBD_CDC_Init+0x1e8>)
 80154c4:	781b      	ldrb	r3, [r3, #0]
 80154c6:	f003 020f 	and.w	r2, r3, #15
 80154ca:	6879      	ldr	r1, [r7, #4]
 80154cc:	4613      	mov	r3, r2
 80154ce:	009b      	lsls	r3, r3, #2
 80154d0:	4413      	add	r3, r2
 80154d2:	009b      	lsls	r3, r3, #2
 80154d4:	440b      	add	r3, r1
 80154d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80154da:	2201      	movs	r2, #1
 80154dc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80154de:	4b4b      	ldr	r3, [pc, #300]	; (801560c <USBD_CDC_Init+0x1ec>)
 80154e0:	781b      	ldrb	r3, [r3, #0]
 80154e2:	f003 020f 	and.w	r2, r3, #15
 80154e6:	6879      	ldr	r1, [r7, #4]
 80154e8:	4613      	mov	r3, r2
 80154ea:	009b      	lsls	r3, r3, #2
 80154ec:	4413      	add	r3, r2
 80154ee:	009b      	lsls	r3, r3, #2
 80154f0:	440b      	add	r3, r1
 80154f2:	3326      	adds	r3, #38	; 0x26
 80154f4:	2210      	movs	r2, #16
 80154f6:	801a      	strh	r2, [r3, #0]
 80154f8:	e035      	b.n	8015566 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80154fa:	4b42      	ldr	r3, [pc, #264]	; (8015604 <USBD_CDC_Init+0x1e4>)
 80154fc:	7819      	ldrb	r1, [r3, #0]
 80154fe:	2340      	movs	r3, #64	; 0x40
 8015500:	2202      	movs	r2, #2
 8015502:	6878      	ldr	r0, [r7, #4]
 8015504:	f005 fae5 	bl	801aad2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015508:	4b3e      	ldr	r3, [pc, #248]	; (8015604 <USBD_CDC_Init+0x1e4>)
 801550a:	781b      	ldrb	r3, [r3, #0]
 801550c:	f003 020f 	and.w	r2, r3, #15
 8015510:	6879      	ldr	r1, [r7, #4]
 8015512:	4613      	mov	r3, r2
 8015514:	009b      	lsls	r3, r3, #2
 8015516:	4413      	add	r3, r2
 8015518:	009b      	lsls	r3, r3, #2
 801551a:	440b      	add	r3, r1
 801551c:	3324      	adds	r3, #36	; 0x24
 801551e:	2201      	movs	r2, #1
 8015520:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8015522:	4b39      	ldr	r3, [pc, #228]	; (8015608 <USBD_CDC_Init+0x1e8>)
 8015524:	7819      	ldrb	r1, [r3, #0]
 8015526:	2340      	movs	r3, #64	; 0x40
 8015528:	2202      	movs	r2, #2
 801552a:	6878      	ldr	r0, [r7, #4]
 801552c:	f005 fad1 	bl	801aad2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015530:	4b35      	ldr	r3, [pc, #212]	; (8015608 <USBD_CDC_Init+0x1e8>)
 8015532:	781b      	ldrb	r3, [r3, #0]
 8015534:	f003 020f 	and.w	r2, r3, #15
 8015538:	6879      	ldr	r1, [r7, #4]
 801553a:	4613      	mov	r3, r2
 801553c:	009b      	lsls	r3, r3, #2
 801553e:	4413      	add	r3, r2
 8015540:	009b      	lsls	r3, r3, #2
 8015542:	440b      	add	r3, r1
 8015544:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015548:	2201      	movs	r2, #1
 801554a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801554c:	4b2f      	ldr	r3, [pc, #188]	; (801560c <USBD_CDC_Init+0x1ec>)
 801554e:	781b      	ldrb	r3, [r3, #0]
 8015550:	f003 020f 	and.w	r2, r3, #15
 8015554:	6879      	ldr	r1, [r7, #4]
 8015556:	4613      	mov	r3, r2
 8015558:	009b      	lsls	r3, r3, #2
 801555a:	4413      	add	r3, r2
 801555c:	009b      	lsls	r3, r3, #2
 801555e:	440b      	add	r3, r1
 8015560:	3326      	adds	r3, #38	; 0x26
 8015562:	2210      	movs	r2, #16
 8015564:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8015566:	4b29      	ldr	r3, [pc, #164]	; (801560c <USBD_CDC_Init+0x1ec>)
 8015568:	7819      	ldrb	r1, [r3, #0]
 801556a:	2308      	movs	r3, #8
 801556c:	2203      	movs	r2, #3
 801556e:	6878      	ldr	r0, [r7, #4]
 8015570:	f005 faaf 	bl	801aad2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8015574:	4b25      	ldr	r3, [pc, #148]	; (801560c <USBD_CDC_Init+0x1ec>)
 8015576:	781b      	ldrb	r3, [r3, #0]
 8015578:	f003 020f 	and.w	r2, r3, #15
 801557c:	6879      	ldr	r1, [r7, #4]
 801557e:	4613      	mov	r3, r2
 8015580:	009b      	lsls	r3, r3, #2
 8015582:	4413      	add	r3, r2
 8015584:	009b      	lsls	r3, r3, #2
 8015586:	440b      	add	r3, r1
 8015588:	3324      	adds	r3, #36	; 0x24
 801558a:	2201      	movs	r2, #1
 801558c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801558e:	68fb      	ldr	r3, [r7, #12]
 8015590:	2200      	movs	r2, #0
 8015592:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801559c:	687a      	ldr	r2, [r7, #4]
 801559e:	33b0      	adds	r3, #176	; 0xb0
 80155a0:	009b      	lsls	r3, r3, #2
 80155a2:	4413      	add	r3, r2
 80155a4:	685b      	ldr	r3, [r3, #4]
 80155a6:	681b      	ldr	r3, [r3, #0]
 80155a8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	2200      	movs	r2, #0
 80155ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80155b2:	68fb      	ldr	r3, [r7, #12]
 80155b4:	2200      	movs	r2, #0
 80155b6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80155ba:	68fb      	ldr	r3, [r7, #12]
 80155bc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d101      	bne.n	80155c8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80155c4:	2302      	movs	r3, #2
 80155c6:	e018      	b.n	80155fa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	7c1b      	ldrb	r3, [r3, #16]
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d10a      	bne.n	80155e6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80155d0:	4b0d      	ldr	r3, [pc, #52]	; (8015608 <USBD_CDC_Init+0x1e8>)
 80155d2:	7819      	ldrb	r1, [r3, #0]
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80155da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80155de:	6878      	ldr	r0, [r7, #4]
 80155e0:	f005 fb66 	bl	801acb0 <USBD_LL_PrepareReceive>
 80155e4:	e008      	b.n	80155f8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80155e6:	4b08      	ldr	r3, [pc, #32]	; (8015608 <USBD_CDC_Init+0x1e8>)
 80155e8:	7819      	ldrb	r1, [r3, #0]
 80155ea:	68fb      	ldr	r3, [r7, #12]
 80155ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80155f0:	2340      	movs	r3, #64	; 0x40
 80155f2:	6878      	ldr	r0, [r7, #4]
 80155f4:	f005 fb5c 	bl	801acb0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80155f8:	2300      	movs	r3, #0
}
 80155fa:	4618      	mov	r0, r3
 80155fc:	3710      	adds	r7, #16
 80155fe:	46bd      	mov	sp, r7
 8015600:	bd80      	pop	{r7, pc}
 8015602:	bf00      	nop
 8015604:	24000197 	.word	0x24000197
 8015608:	24000198 	.word	0x24000198
 801560c:	24000199 	.word	0x24000199

08015610 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015610:	b580      	push	{r7, lr}
 8015612:	b082      	sub	sp, #8
 8015614:	af00      	add	r7, sp, #0
 8015616:	6078      	str	r0, [r7, #4]
 8015618:	460b      	mov	r3, r1
 801561a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 801561c:	4b3a      	ldr	r3, [pc, #232]	; (8015708 <USBD_CDC_DeInit+0xf8>)
 801561e:	781b      	ldrb	r3, [r3, #0]
 8015620:	4619      	mov	r1, r3
 8015622:	6878      	ldr	r0, [r7, #4]
 8015624:	f005 fa7b 	bl	801ab1e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8015628:	4b37      	ldr	r3, [pc, #220]	; (8015708 <USBD_CDC_DeInit+0xf8>)
 801562a:	781b      	ldrb	r3, [r3, #0]
 801562c:	f003 020f 	and.w	r2, r3, #15
 8015630:	6879      	ldr	r1, [r7, #4]
 8015632:	4613      	mov	r3, r2
 8015634:	009b      	lsls	r3, r3, #2
 8015636:	4413      	add	r3, r2
 8015638:	009b      	lsls	r3, r3, #2
 801563a:	440b      	add	r3, r1
 801563c:	3324      	adds	r3, #36	; 0x24
 801563e:	2200      	movs	r2, #0
 8015640:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8015642:	4b32      	ldr	r3, [pc, #200]	; (801570c <USBD_CDC_DeInit+0xfc>)
 8015644:	781b      	ldrb	r3, [r3, #0]
 8015646:	4619      	mov	r1, r3
 8015648:	6878      	ldr	r0, [r7, #4]
 801564a:	f005 fa68 	bl	801ab1e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801564e:	4b2f      	ldr	r3, [pc, #188]	; (801570c <USBD_CDC_DeInit+0xfc>)
 8015650:	781b      	ldrb	r3, [r3, #0]
 8015652:	f003 020f 	and.w	r2, r3, #15
 8015656:	6879      	ldr	r1, [r7, #4]
 8015658:	4613      	mov	r3, r2
 801565a:	009b      	lsls	r3, r3, #2
 801565c:	4413      	add	r3, r2
 801565e:	009b      	lsls	r3, r3, #2
 8015660:	440b      	add	r3, r1
 8015662:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015666:	2200      	movs	r2, #0
 8015668:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801566a:	4b29      	ldr	r3, [pc, #164]	; (8015710 <USBD_CDC_DeInit+0x100>)
 801566c:	781b      	ldrb	r3, [r3, #0]
 801566e:	4619      	mov	r1, r3
 8015670:	6878      	ldr	r0, [r7, #4]
 8015672:	f005 fa54 	bl	801ab1e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8015676:	4b26      	ldr	r3, [pc, #152]	; (8015710 <USBD_CDC_DeInit+0x100>)
 8015678:	781b      	ldrb	r3, [r3, #0]
 801567a:	f003 020f 	and.w	r2, r3, #15
 801567e:	6879      	ldr	r1, [r7, #4]
 8015680:	4613      	mov	r3, r2
 8015682:	009b      	lsls	r3, r3, #2
 8015684:	4413      	add	r3, r2
 8015686:	009b      	lsls	r3, r3, #2
 8015688:	440b      	add	r3, r1
 801568a:	3324      	adds	r3, #36	; 0x24
 801568c:	2200      	movs	r2, #0
 801568e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8015690:	4b1f      	ldr	r3, [pc, #124]	; (8015710 <USBD_CDC_DeInit+0x100>)
 8015692:	781b      	ldrb	r3, [r3, #0]
 8015694:	f003 020f 	and.w	r2, r3, #15
 8015698:	6879      	ldr	r1, [r7, #4]
 801569a:	4613      	mov	r3, r2
 801569c:	009b      	lsls	r3, r3, #2
 801569e:	4413      	add	r3, r2
 80156a0:	009b      	lsls	r3, r3, #2
 80156a2:	440b      	add	r3, r1
 80156a4:	3326      	adds	r3, #38	; 0x26
 80156a6:	2200      	movs	r2, #0
 80156a8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	32b0      	adds	r2, #176	; 0xb0
 80156b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d01f      	beq.n	80156fc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80156c2:	687a      	ldr	r2, [r7, #4]
 80156c4:	33b0      	adds	r3, #176	; 0xb0
 80156c6:	009b      	lsls	r3, r3, #2
 80156c8:	4413      	add	r3, r2
 80156ca:	685b      	ldr	r3, [r3, #4]
 80156cc:	685b      	ldr	r3, [r3, #4]
 80156ce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	32b0      	adds	r2, #176	; 0xb0
 80156da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156de:	4618      	mov	r0, r3
 80156e0:	f005 fb28 	bl	801ad34 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	32b0      	adds	r2, #176	; 0xb0
 80156ee:	2100      	movs	r1, #0
 80156f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	2200      	movs	r2, #0
 80156f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80156fc:	2300      	movs	r3, #0
}
 80156fe:	4618      	mov	r0, r3
 8015700:	3708      	adds	r7, #8
 8015702:	46bd      	mov	sp, r7
 8015704:	bd80      	pop	{r7, pc}
 8015706:	bf00      	nop
 8015708:	24000197 	.word	0x24000197
 801570c:	24000198 	.word	0x24000198
 8015710:	24000199 	.word	0x24000199

08015714 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8015714:	b580      	push	{r7, lr}
 8015716:	b086      	sub	sp, #24
 8015718:	af00      	add	r7, sp, #0
 801571a:	6078      	str	r0, [r7, #4]
 801571c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	32b0      	adds	r2, #176	; 0xb0
 8015728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801572c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801572e:	2300      	movs	r3, #0
 8015730:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8015732:	2300      	movs	r3, #0
 8015734:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8015736:	2300      	movs	r3, #0
 8015738:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801573a:	693b      	ldr	r3, [r7, #16]
 801573c:	2b00      	cmp	r3, #0
 801573e:	d101      	bne.n	8015744 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8015740:	2303      	movs	r3, #3
 8015742:	e0bf      	b.n	80158c4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015744:	683b      	ldr	r3, [r7, #0]
 8015746:	781b      	ldrb	r3, [r3, #0]
 8015748:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801574c:	2b00      	cmp	r3, #0
 801574e:	d050      	beq.n	80157f2 <USBD_CDC_Setup+0xde>
 8015750:	2b20      	cmp	r3, #32
 8015752:	f040 80af 	bne.w	80158b4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8015756:	683b      	ldr	r3, [r7, #0]
 8015758:	88db      	ldrh	r3, [r3, #6]
 801575a:	2b00      	cmp	r3, #0
 801575c:	d03a      	beq.n	80157d4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801575e:	683b      	ldr	r3, [r7, #0]
 8015760:	781b      	ldrb	r3, [r3, #0]
 8015762:	b25b      	sxtb	r3, r3
 8015764:	2b00      	cmp	r3, #0
 8015766:	da1b      	bge.n	80157a0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801576e:	687a      	ldr	r2, [r7, #4]
 8015770:	33b0      	adds	r3, #176	; 0xb0
 8015772:	009b      	lsls	r3, r3, #2
 8015774:	4413      	add	r3, r2
 8015776:	685b      	ldr	r3, [r3, #4]
 8015778:	689b      	ldr	r3, [r3, #8]
 801577a:	683a      	ldr	r2, [r7, #0]
 801577c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801577e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015780:	683a      	ldr	r2, [r7, #0]
 8015782:	88d2      	ldrh	r2, [r2, #6]
 8015784:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8015786:	683b      	ldr	r3, [r7, #0]
 8015788:	88db      	ldrh	r3, [r3, #6]
 801578a:	2b07      	cmp	r3, #7
 801578c:	bf28      	it	cs
 801578e:	2307      	movcs	r3, #7
 8015790:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8015792:	693b      	ldr	r3, [r7, #16]
 8015794:	89fa      	ldrh	r2, [r7, #14]
 8015796:	4619      	mov	r1, r3
 8015798:	6878      	ldr	r0, [r7, #4]
 801579a:	f001 fd89 	bl	80172b0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801579e:	e090      	b.n	80158c2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80157a0:	683b      	ldr	r3, [r7, #0]
 80157a2:	785a      	ldrb	r2, [r3, #1]
 80157a4:	693b      	ldr	r3, [r7, #16]
 80157a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80157aa:	683b      	ldr	r3, [r7, #0]
 80157ac:	88db      	ldrh	r3, [r3, #6]
 80157ae:	2b3f      	cmp	r3, #63	; 0x3f
 80157b0:	d803      	bhi.n	80157ba <USBD_CDC_Setup+0xa6>
 80157b2:	683b      	ldr	r3, [r7, #0]
 80157b4:	88db      	ldrh	r3, [r3, #6]
 80157b6:	b2da      	uxtb	r2, r3
 80157b8:	e000      	b.n	80157bc <USBD_CDC_Setup+0xa8>
 80157ba:	2240      	movs	r2, #64	; 0x40
 80157bc:	693b      	ldr	r3, [r7, #16]
 80157be:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80157c2:	6939      	ldr	r1, [r7, #16]
 80157c4:	693b      	ldr	r3, [r7, #16]
 80157c6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80157ca:	461a      	mov	r2, r3
 80157cc:	6878      	ldr	r0, [r7, #4]
 80157ce:	f001 fd9b 	bl	8017308 <USBD_CtlPrepareRx>
      break;
 80157d2:	e076      	b.n	80158c2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80157da:	687a      	ldr	r2, [r7, #4]
 80157dc:	33b0      	adds	r3, #176	; 0xb0
 80157de:	009b      	lsls	r3, r3, #2
 80157e0:	4413      	add	r3, r2
 80157e2:	685b      	ldr	r3, [r3, #4]
 80157e4:	689b      	ldr	r3, [r3, #8]
 80157e6:	683a      	ldr	r2, [r7, #0]
 80157e8:	7850      	ldrb	r0, [r2, #1]
 80157ea:	2200      	movs	r2, #0
 80157ec:	6839      	ldr	r1, [r7, #0]
 80157ee:	4798      	blx	r3
      break;
 80157f0:	e067      	b.n	80158c2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80157f2:	683b      	ldr	r3, [r7, #0]
 80157f4:	785b      	ldrb	r3, [r3, #1]
 80157f6:	2b0b      	cmp	r3, #11
 80157f8:	d851      	bhi.n	801589e <USBD_CDC_Setup+0x18a>
 80157fa:	a201      	add	r2, pc, #4	; (adr r2, 8015800 <USBD_CDC_Setup+0xec>)
 80157fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015800:	08015831 	.word	0x08015831
 8015804:	080158ad 	.word	0x080158ad
 8015808:	0801589f 	.word	0x0801589f
 801580c:	0801589f 	.word	0x0801589f
 8015810:	0801589f 	.word	0x0801589f
 8015814:	0801589f 	.word	0x0801589f
 8015818:	0801589f 	.word	0x0801589f
 801581c:	0801589f 	.word	0x0801589f
 8015820:	0801589f 	.word	0x0801589f
 8015824:	0801589f 	.word	0x0801589f
 8015828:	0801585b 	.word	0x0801585b
 801582c:	08015885 	.word	0x08015885
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015836:	b2db      	uxtb	r3, r3
 8015838:	2b03      	cmp	r3, #3
 801583a:	d107      	bne.n	801584c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801583c:	f107 030a 	add.w	r3, r7, #10
 8015840:	2202      	movs	r2, #2
 8015842:	4619      	mov	r1, r3
 8015844:	6878      	ldr	r0, [r7, #4]
 8015846:	f001 fd33 	bl	80172b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801584a:	e032      	b.n	80158b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801584c:	6839      	ldr	r1, [r7, #0]
 801584e:	6878      	ldr	r0, [r7, #4]
 8015850:	f001 fcbd 	bl	80171ce <USBD_CtlError>
            ret = USBD_FAIL;
 8015854:	2303      	movs	r3, #3
 8015856:	75fb      	strb	r3, [r7, #23]
          break;
 8015858:	e02b      	b.n	80158b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015860:	b2db      	uxtb	r3, r3
 8015862:	2b03      	cmp	r3, #3
 8015864:	d107      	bne.n	8015876 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8015866:	f107 030d 	add.w	r3, r7, #13
 801586a:	2201      	movs	r2, #1
 801586c:	4619      	mov	r1, r3
 801586e:	6878      	ldr	r0, [r7, #4]
 8015870:	f001 fd1e 	bl	80172b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015874:	e01d      	b.n	80158b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015876:	6839      	ldr	r1, [r7, #0]
 8015878:	6878      	ldr	r0, [r7, #4]
 801587a:	f001 fca8 	bl	80171ce <USBD_CtlError>
            ret = USBD_FAIL;
 801587e:	2303      	movs	r3, #3
 8015880:	75fb      	strb	r3, [r7, #23]
          break;
 8015882:	e016      	b.n	80158b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801588a:	b2db      	uxtb	r3, r3
 801588c:	2b03      	cmp	r3, #3
 801588e:	d00f      	beq.n	80158b0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8015890:	6839      	ldr	r1, [r7, #0]
 8015892:	6878      	ldr	r0, [r7, #4]
 8015894:	f001 fc9b 	bl	80171ce <USBD_CtlError>
            ret = USBD_FAIL;
 8015898:	2303      	movs	r3, #3
 801589a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 801589c:	e008      	b.n	80158b0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801589e:	6839      	ldr	r1, [r7, #0]
 80158a0:	6878      	ldr	r0, [r7, #4]
 80158a2:	f001 fc94 	bl	80171ce <USBD_CtlError>
          ret = USBD_FAIL;
 80158a6:	2303      	movs	r3, #3
 80158a8:	75fb      	strb	r3, [r7, #23]
          break;
 80158aa:	e002      	b.n	80158b2 <USBD_CDC_Setup+0x19e>
          break;
 80158ac:	bf00      	nop
 80158ae:	e008      	b.n	80158c2 <USBD_CDC_Setup+0x1ae>
          break;
 80158b0:	bf00      	nop
      }
      break;
 80158b2:	e006      	b.n	80158c2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80158b4:	6839      	ldr	r1, [r7, #0]
 80158b6:	6878      	ldr	r0, [r7, #4]
 80158b8:	f001 fc89 	bl	80171ce <USBD_CtlError>
      ret = USBD_FAIL;
 80158bc:	2303      	movs	r3, #3
 80158be:	75fb      	strb	r3, [r7, #23]
      break;
 80158c0:	bf00      	nop
  }

  return (uint8_t)ret;
 80158c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80158c4:	4618      	mov	r0, r3
 80158c6:	3718      	adds	r7, #24
 80158c8:	46bd      	mov	sp, r7
 80158ca:	bd80      	pop	{r7, pc}

080158cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80158cc:	b580      	push	{r7, lr}
 80158ce:	b084      	sub	sp, #16
 80158d0:	af00      	add	r7, sp, #0
 80158d2:	6078      	str	r0, [r7, #4]
 80158d4:	460b      	mov	r3, r1
 80158d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80158de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	32b0      	adds	r2, #176	; 0xb0
 80158ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d101      	bne.n	80158f6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80158f2:	2303      	movs	r3, #3
 80158f4:	e065      	b.n	80159c2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	32b0      	adds	r2, #176	; 0xb0
 8015900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015904:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015906:	78fb      	ldrb	r3, [r7, #3]
 8015908:	f003 020f 	and.w	r2, r3, #15
 801590c:	6879      	ldr	r1, [r7, #4]
 801590e:	4613      	mov	r3, r2
 8015910:	009b      	lsls	r3, r3, #2
 8015912:	4413      	add	r3, r2
 8015914:	009b      	lsls	r3, r3, #2
 8015916:	440b      	add	r3, r1
 8015918:	3318      	adds	r3, #24
 801591a:	681b      	ldr	r3, [r3, #0]
 801591c:	2b00      	cmp	r3, #0
 801591e:	d02f      	beq.n	8015980 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8015920:	78fb      	ldrb	r3, [r7, #3]
 8015922:	f003 020f 	and.w	r2, r3, #15
 8015926:	6879      	ldr	r1, [r7, #4]
 8015928:	4613      	mov	r3, r2
 801592a:	009b      	lsls	r3, r3, #2
 801592c:	4413      	add	r3, r2
 801592e:	009b      	lsls	r3, r3, #2
 8015930:	440b      	add	r3, r1
 8015932:	3318      	adds	r3, #24
 8015934:	681a      	ldr	r2, [r3, #0]
 8015936:	78fb      	ldrb	r3, [r7, #3]
 8015938:	f003 010f 	and.w	r1, r3, #15
 801593c:	68f8      	ldr	r0, [r7, #12]
 801593e:	460b      	mov	r3, r1
 8015940:	00db      	lsls	r3, r3, #3
 8015942:	440b      	add	r3, r1
 8015944:	009b      	lsls	r3, r3, #2
 8015946:	4403      	add	r3, r0
 8015948:	3344      	adds	r3, #68	; 0x44
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	fbb2 f1f3 	udiv	r1, r2, r3
 8015950:	fb01 f303 	mul.w	r3, r1, r3
 8015954:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015956:	2b00      	cmp	r3, #0
 8015958:	d112      	bne.n	8015980 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801595a:	78fb      	ldrb	r3, [r7, #3]
 801595c:	f003 020f 	and.w	r2, r3, #15
 8015960:	6879      	ldr	r1, [r7, #4]
 8015962:	4613      	mov	r3, r2
 8015964:	009b      	lsls	r3, r3, #2
 8015966:	4413      	add	r3, r2
 8015968:	009b      	lsls	r3, r3, #2
 801596a:	440b      	add	r3, r1
 801596c:	3318      	adds	r3, #24
 801596e:	2200      	movs	r2, #0
 8015970:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8015972:	78f9      	ldrb	r1, [r7, #3]
 8015974:	2300      	movs	r3, #0
 8015976:	2200      	movs	r2, #0
 8015978:	6878      	ldr	r0, [r7, #4]
 801597a:	f005 f978 	bl	801ac6e <USBD_LL_Transmit>
 801597e:	e01f      	b.n	80159c0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8015980:	68bb      	ldr	r3, [r7, #8]
 8015982:	2200      	movs	r2, #0
 8015984:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801598e:	687a      	ldr	r2, [r7, #4]
 8015990:	33b0      	adds	r3, #176	; 0xb0
 8015992:	009b      	lsls	r3, r3, #2
 8015994:	4413      	add	r3, r2
 8015996:	685b      	ldr	r3, [r3, #4]
 8015998:	691b      	ldr	r3, [r3, #16]
 801599a:	2b00      	cmp	r3, #0
 801599c:	d010      	beq.n	80159c0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80159a4:	687a      	ldr	r2, [r7, #4]
 80159a6:	33b0      	adds	r3, #176	; 0xb0
 80159a8:	009b      	lsls	r3, r3, #2
 80159aa:	4413      	add	r3, r2
 80159ac:	685b      	ldr	r3, [r3, #4]
 80159ae:	691b      	ldr	r3, [r3, #16]
 80159b0:	68ba      	ldr	r2, [r7, #8]
 80159b2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80159b6:	68ba      	ldr	r2, [r7, #8]
 80159b8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80159bc:	78fa      	ldrb	r2, [r7, #3]
 80159be:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80159c0:	2300      	movs	r3, #0
}
 80159c2:	4618      	mov	r0, r3
 80159c4:	3710      	adds	r7, #16
 80159c6:	46bd      	mov	sp, r7
 80159c8:	bd80      	pop	{r7, pc}

080159ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80159ca:	b580      	push	{r7, lr}
 80159cc:	b084      	sub	sp, #16
 80159ce:	af00      	add	r7, sp, #0
 80159d0:	6078      	str	r0, [r7, #4]
 80159d2:	460b      	mov	r3, r1
 80159d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	32b0      	adds	r2, #176	; 0xb0
 80159e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159e4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	32b0      	adds	r2, #176	; 0xb0
 80159f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d101      	bne.n	80159fc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80159f8:	2303      	movs	r3, #3
 80159fa:	e01a      	b.n	8015a32 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80159fc:	78fb      	ldrb	r3, [r7, #3]
 80159fe:	4619      	mov	r1, r3
 8015a00:	6878      	ldr	r0, [r7, #4]
 8015a02:	f005 f976 	bl	801acf2 <USBD_LL_GetRxDataSize>
 8015a06:	4602      	mov	r2, r0
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015a14:	687a      	ldr	r2, [r7, #4]
 8015a16:	33b0      	adds	r3, #176	; 0xb0
 8015a18:	009b      	lsls	r3, r3, #2
 8015a1a:	4413      	add	r3, r2
 8015a1c:	685b      	ldr	r3, [r3, #4]
 8015a1e:	68db      	ldr	r3, [r3, #12]
 8015a20:	68fa      	ldr	r2, [r7, #12]
 8015a22:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8015a26:	68fa      	ldr	r2, [r7, #12]
 8015a28:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8015a2c:	4611      	mov	r1, r2
 8015a2e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8015a30:	2300      	movs	r3, #0
}
 8015a32:	4618      	mov	r0, r3
 8015a34:	3710      	adds	r7, #16
 8015a36:	46bd      	mov	sp, r7
 8015a38:	bd80      	pop	{r7, pc}

08015a3a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8015a3a:	b580      	push	{r7, lr}
 8015a3c:	b084      	sub	sp, #16
 8015a3e:	af00      	add	r7, sp, #0
 8015a40:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	32b0      	adds	r2, #176	; 0xb0
 8015a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a50:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015a52:	68fb      	ldr	r3, [r7, #12]
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d101      	bne.n	8015a5c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8015a58:	2303      	movs	r3, #3
 8015a5a:	e025      	b.n	8015aa8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015a62:	687a      	ldr	r2, [r7, #4]
 8015a64:	33b0      	adds	r3, #176	; 0xb0
 8015a66:	009b      	lsls	r3, r3, #2
 8015a68:	4413      	add	r3, r2
 8015a6a:	685b      	ldr	r3, [r3, #4]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d01a      	beq.n	8015aa6 <USBD_CDC_EP0_RxReady+0x6c>
 8015a70:	68fb      	ldr	r3, [r7, #12]
 8015a72:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8015a76:	2bff      	cmp	r3, #255	; 0xff
 8015a78:	d015      	beq.n	8015aa6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015a80:	687a      	ldr	r2, [r7, #4]
 8015a82:	33b0      	adds	r3, #176	; 0xb0
 8015a84:	009b      	lsls	r3, r3, #2
 8015a86:	4413      	add	r3, r2
 8015a88:	685b      	ldr	r3, [r3, #4]
 8015a8a:	689b      	ldr	r3, [r3, #8]
 8015a8c:	68fa      	ldr	r2, [r7, #12]
 8015a8e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8015a92:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8015a94:	68fa      	ldr	r2, [r7, #12]
 8015a96:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015a9a:	b292      	uxth	r2, r2
 8015a9c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8015a9e:	68fb      	ldr	r3, [r7, #12]
 8015aa0:	22ff      	movs	r2, #255	; 0xff
 8015aa2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8015aa6:	2300      	movs	r3, #0
}
 8015aa8:	4618      	mov	r0, r3
 8015aaa:	3710      	adds	r7, #16
 8015aac:	46bd      	mov	sp, r7
 8015aae:	bd80      	pop	{r7, pc}

08015ab0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8015ab0:	b580      	push	{r7, lr}
 8015ab2:	b086      	sub	sp, #24
 8015ab4:	af00      	add	r7, sp, #0
 8015ab6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015ab8:	2182      	movs	r1, #130	; 0x82
 8015aba:	4818      	ldr	r0, [pc, #96]	; (8015b1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015abc:	f000 fd4f 	bl	801655e <USBD_GetEpDesc>
 8015ac0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015ac2:	2101      	movs	r1, #1
 8015ac4:	4815      	ldr	r0, [pc, #84]	; (8015b1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015ac6:	f000 fd4a 	bl	801655e <USBD_GetEpDesc>
 8015aca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015acc:	2181      	movs	r1, #129	; 0x81
 8015ace:	4813      	ldr	r0, [pc, #76]	; (8015b1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015ad0:	f000 fd45 	bl	801655e <USBD_GetEpDesc>
 8015ad4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015ad6:	697b      	ldr	r3, [r7, #20]
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d002      	beq.n	8015ae2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015adc:	697b      	ldr	r3, [r7, #20]
 8015ade:	2210      	movs	r2, #16
 8015ae0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015ae2:	693b      	ldr	r3, [r7, #16]
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d006      	beq.n	8015af6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015ae8:	693b      	ldr	r3, [r7, #16]
 8015aea:	2200      	movs	r2, #0
 8015aec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015af0:	711a      	strb	r2, [r3, #4]
 8015af2:	2200      	movs	r2, #0
 8015af4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d006      	beq.n	8015b0a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	2200      	movs	r2, #0
 8015b00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015b04:	711a      	strb	r2, [r3, #4]
 8015b06:	2200      	movs	r2, #0
 8015b08:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	2243      	movs	r2, #67	; 0x43
 8015b0e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015b10:	4b02      	ldr	r3, [pc, #8]	; (8015b1c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8015b12:	4618      	mov	r0, r3
 8015b14:	3718      	adds	r7, #24
 8015b16:	46bd      	mov	sp, r7
 8015b18:	bd80      	pop	{r7, pc}
 8015b1a:	bf00      	nop
 8015b1c:	24000154 	.word	0x24000154

08015b20 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8015b20:	b580      	push	{r7, lr}
 8015b22:	b086      	sub	sp, #24
 8015b24:	af00      	add	r7, sp, #0
 8015b26:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015b28:	2182      	movs	r1, #130	; 0x82
 8015b2a:	4818      	ldr	r0, [pc, #96]	; (8015b8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015b2c:	f000 fd17 	bl	801655e <USBD_GetEpDesc>
 8015b30:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015b32:	2101      	movs	r1, #1
 8015b34:	4815      	ldr	r0, [pc, #84]	; (8015b8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015b36:	f000 fd12 	bl	801655e <USBD_GetEpDesc>
 8015b3a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015b3c:	2181      	movs	r1, #129	; 0x81
 8015b3e:	4813      	ldr	r0, [pc, #76]	; (8015b8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015b40:	f000 fd0d 	bl	801655e <USBD_GetEpDesc>
 8015b44:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015b46:	697b      	ldr	r3, [r7, #20]
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d002      	beq.n	8015b52 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8015b4c:	697b      	ldr	r3, [r7, #20]
 8015b4e:	2210      	movs	r2, #16
 8015b50:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015b52:	693b      	ldr	r3, [r7, #16]
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d006      	beq.n	8015b66 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015b58:	693b      	ldr	r3, [r7, #16]
 8015b5a:	2200      	movs	r2, #0
 8015b5c:	711a      	strb	r2, [r3, #4]
 8015b5e:	2200      	movs	r2, #0
 8015b60:	f042 0202 	orr.w	r2, r2, #2
 8015b64:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	d006      	beq.n	8015b7a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	2200      	movs	r2, #0
 8015b70:	711a      	strb	r2, [r3, #4]
 8015b72:	2200      	movs	r2, #0
 8015b74:	f042 0202 	orr.w	r2, r2, #2
 8015b78:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	2243      	movs	r2, #67	; 0x43
 8015b7e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015b80:	4b02      	ldr	r3, [pc, #8]	; (8015b8c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8015b82:	4618      	mov	r0, r3
 8015b84:	3718      	adds	r7, #24
 8015b86:	46bd      	mov	sp, r7
 8015b88:	bd80      	pop	{r7, pc}
 8015b8a:	bf00      	nop
 8015b8c:	24000154 	.word	0x24000154

08015b90 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8015b90:	b580      	push	{r7, lr}
 8015b92:	b086      	sub	sp, #24
 8015b94:	af00      	add	r7, sp, #0
 8015b96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015b98:	2182      	movs	r1, #130	; 0x82
 8015b9a:	4818      	ldr	r0, [pc, #96]	; (8015bfc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015b9c:	f000 fcdf 	bl	801655e <USBD_GetEpDesc>
 8015ba0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015ba2:	2101      	movs	r1, #1
 8015ba4:	4815      	ldr	r0, [pc, #84]	; (8015bfc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015ba6:	f000 fcda 	bl	801655e <USBD_GetEpDesc>
 8015baa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015bac:	2181      	movs	r1, #129	; 0x81
 8015bae:	4813      	ldr	r0, [pc, #76]	; (8015bfc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015bb0:	f000 fcd5 	bl	801655e <USBD_GetEpDesc>
 8015bb4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015bb6:	697b      	ldr	r3, [r7, #20]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d002      	beq.n	8015bc2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015bbc:	697b      	ldr	r3, [r7, #20]
 8015bbe:	2210      	movs	r2, #16
 8015bc0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015bc2:	693b      	ldr	r3, [r7, #16]
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d006      	beq.n	8015bd6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015bc8:	693b      	ldr	r3, [r7, #16]
 8015bca:	2200      	movs	r2, #0
 8015bcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015bd0:	711a      	strb	r2, [r3, #4]
 8015bd2:	2200      	movs	r2, #0
 8015bd4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015bd6:	68fb      	ldr	r3, [r7, #12]
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d006      	beq.n	8015bea <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	2200      	movs	r2, #0
 8015be0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015be4:	711a      	strb	r2, [r3, #4]
 8015be6:	2200      	movs	r2, #0
 8015be8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	2243      	movs	r2, #67	; 0x43
 8015bee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015bf0:	4b02      	ldr	r3, [pc, #8]	; (8015bfc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8015bf2:	4618      	mov	r0, r3
 8015bf4:	3718      	adds	r7, #24
 8015bf6:	46bd      	mov	sp, r7
 8015bf8:	bd80      	pop	{r7, pc}
 8015bfa:	bf00      	nop
 8015bfc:	24000154 	.word	0x24000154

08015c00 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015c00:	b480      	push	{r7}
 8015c02:	b083      	sub	sp, #12
 8015c04:	af00      	add	r7, sp, #0
 8015c06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	220a      	movs	r2, #10
 8015c0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8015c0e:	4b03      	ldr	r3, [pc, #12]	; (8015c1c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8015c10:	4618      	mov	r0, r3
 8015c12:	370c      	adds	r7, #12
 8015c14:	46bd      	mov	sp, r7
 8015c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c1a:	4770      	bx	lr
 8015c1c:	24000110 	.word	0x24000110

08015c20 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015c20:	b480      	push	{r7}
 8015c22:	b083      	sub	sp, #12
 8015c24:	af00      	add	r7, sp, #0
 8015c26:	6078      	str	r0, [r7, #4]
 8015c28:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8015c2a:	683b      	ldr	r3, [r7, #0]
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d101      	bne.n	8015c34 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015c30:	2303      	movs	r3, #3
 8015c32:	e009      	b.n	8015c48 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015c3a:	687a      	ldr	r2, [r7, #4]
 8015c3c:	33b0      	adds	r3, #176	; 0xb0
 8015c3e:	009b      	lsls	r3, r3, #2
 8015c40:	4413      	add	r3, r2
 8015c42:	683a      	ldr	r2, [r7, #0]
 8015c44:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8015c46:	2300      	movs	r3, #0
}
 8015c48:	4618      	mov	r0, r3
 8015c4a:	370c      	adds	r7, #12
 8015c4c:	46bd      	mov	sp, r7
 8015c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c52:	4770      	bx	lr

08015c54 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8015c54:	b480      	push	{r7}
 8015c56:	b087      	sub	sp, #28
 8015c58:	af00      	add	r7, sp, #0
 8015c5a:	60f8      	str	r0, [r7, #12]
 8015c5c:	60b9      	str	r1, [r7, #8]
 8015c5e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015c60:	68fb      	ldr	r3, [r7, #12]
 8015c62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015c66:	68fb      	ldr	r3, [r7, #12]
 8015c68:	32b0      	adds	r2, #176	; 0xb0
 8015c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c6e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015c70:	697b      	ldr	r3, [r7, #20]
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d101      	bne.n	8015c7a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015c76:	2303      	movs	r3, #3
 8015c78:	e008      	b.n	8015c8c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8015c7a:	697b      	ldr	r3, [r7, #20]
 8015c7c:	68ba      	ldr	r2, [r7, #8]
 8015c7e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8015c82:	697b      	ldr	r3, [r7, #20]
 8015c84:	687a      	ldr	r2, [r7, #4]
 8015c86:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8015c8a:	2300      	movs	r3, #0
}
 8015c8c:	4618      	mov	r0, r3
 8015c8e:	371c      	adds	r7, #28
 8015c90:	46bd      	mov	sp, r7
 8015c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c96:	4770      	bx	lr

08015c98 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8015c98:	b480      	push	{r7}
 8015c9a:	b085      	sub	sp, #20
 8015c9c:	af00      	add	r7, sp, #0
 8015c9e:	6078      	str	r0, [r7, #4]
 8015ca0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	32b0      	adds	r2, #176	; 0xb0
 8015cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cb0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d101      	bne.n	8015cbc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8015cb8:	2303      	movs	r3, #3
 8015cba:	e004      	b.n	8015cc6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	683a      	ldr	r2, [r7, #0]
 8015cc0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8015cc4:	2300      	movs	r3, #0
}
 8015cc6:	4618      	mov	r0, r3
 8015cc8:	3714      	adds	r7, #20
 8015cca:	46bd      	mov	sp, r7
 8015ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cd0:	4770      	bx	lr
	...

08015cd4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8015cd4:	b580      	push	{r7, lr}
 8015cd6:	b084      	sub	sp, #16
 8015cd8:	af00      	add	r7, sp, #0
 8015cda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	32b0      	adds	r2, #176	; 0xb0
 8015ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cea:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8015cec:	2301      	movs	r3, #1
 8015cee:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015cf0:	68bb      	ldr	r3, [r7, #8]
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d101      	bne.n	8015cfa <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015cf6:	2303      	movs	r3, #3
 8015cf8:	e025      	b.n	8015d46 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8015cfa:	68bb      	ldr	r3, [r7, #8]
 8015cfc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	d11f      	bne.n	8015d44 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8015d04:	68bb      	ldr	r3, [r7, #8]
 8015d06:	2201      	movs	r2, #1
 8015d08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8015d0c:	4b10      	ldr	r3, [pc, #64]	; (8015d50 <USBD_CDC_TransmitPacket+0x7c>)
 8015d0e:	781b      	ldrb	r3, [r3, #0]
 8015d10:	f003 020f 	and.w	r2, r3, #15
 8015d14:	68bb      	ldr	r3, [r7, #8]
 8015d16:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8015d1a:	6878      	ldr	r0, [r7, #4]
 8015d1c:	4613      	mov	r3, r2
 8015d1e:	009b      	lsls	r3, r3, #2
 8015d20:	4413      	add	r3, r2
 8015d22:	009b      	lsls	r3, r3, #2
 8015d24:	4403      	add	r3, r0
 8015d26:	3318      	adds	r3, #24
 8015d28:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8015d2a:	4b09      	ldr	r3, [pc, #36]	; (8015d50 <USBD_CDC_TransmitPacket+0x7c>)
 8015d2c:	7819      	ldrb	r1, [r3, #0]
 8015d2e:	68bb      	ldr	r3, [r7, #8]
 8015d30:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8015d34:	68bb      	ldr	r3, [r7, #8]
 8015d36:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8015d3a:	6878      	ldr	r0, [r7, #4]
 8015d3c:	f004 ff97 	bl	801ac6e <USBD_LL_Transmit>

    ret = USBD_OK;
 8015d40:	2300      	movs	r3, #0
 8015d42:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8015d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d46:	4618      	mov	r0, r3
 8015d48:	3710      	adds	r7, #16
 8015d4a:	46bd      	mov	sp, r7
 8015d4c:	bd80      	pop	{r7, pc}
 8015d4e:	bf00      	nop
 8015d50:	24000197 	.word	0x24000197

08015d54 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8015d54:	b580      	push	{r7, lr}
 8015d56:	b084      	sub	sp, #16
 8015d58:	af00      	add	r7, sp, #0
 8015d5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	32b0      	adds	r2, #176	; 0xb0
 8015d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d6a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	32b0      	adds	r2, #176	; 0xb0
 8015d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d101      	bne.n	8015d82 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8015d7e:	2303      	movs	r3, #3
 8015d80:	e018      	b.n	8015db4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	7c1b      	ldrb	r3, [r3, #16]
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d10a      	bne.n	8015da0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015d8a:	4b0c      	ldr	r3, [pc, #48]	; (8015dbc <USBD_CDC_ReceivePacket+0x68>)
 8015d8c:	7819      	ldrb	r1, [r3, #0]
 8015d8e:	68fb      	ldr	r3, [r7, #12]
 8015d90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015d94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015d98:	6878      	ldr	r0, [r7, #4]
 8015d9a:	f004 ff89 	bl	801acb0 <USBD_LL_PrepareReceive>
 8015d9e:	e008      	b.n	8015db2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015da0:	4b06      	ldr	r3, [pc, #24]	; (8015dbc <USBD_CDC_ReceivePacket+0x68>)
 8015da2:	7819      	ldrb	r1, [r3, #0]
 8015da4:	68fb      	ldr	r3, [r7, #12]
 8015da6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015daa:	2340      	movs	r3, #64	; 0x40
 8015dac:	6878      	ldr	r0, [r7, #4]
 8015dae:	f004 ff7f 	bl	801acb0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015db2:	2300      	movs	r3, #0
}
 8015db4:	4618      	mov	r0, r3
 8015db6:	3710      	adds	r7, #16
 8015db8:	46bd      	mov	sp, r7
 8015dba:	bd80      	pop	{r7, pc}
 8015dbc:	24000198 	.word	0x24000198

08015dc0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8015dc0:	b580      	push	{r7, lr}
 8015dc2:	b086      	sub	sp, #24
 8015dc4:	af00      	add	r7, sp, #0
 8015dc6:	60f8      	str	r0, [r7, #12]
 8015dc8:	60b9      	str	r1, [r7, #8]
 8015dca:	4613      	mov	r3, r2
 8015dcc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8015dce:	68fb      	ldr	r3, [r7, #12]
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d101      	bne.n	8015dd8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015dd4:	2303      	movs	r3, #3
 8015dd6:	e01f      	b.n	8015e18 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	2200      	movs	r2, #0
 8015ddc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8015de0:	68fb      	ldr	r3, [r7, #12]
 8015de2:	2200      	movs	r2, #0
 8015de4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	2200      	movs	r2, #0
 8015dec:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015df0:	68bb      	ldr	r3, [r7, #8]
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d003      	beq.n	8015dfe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8015df6:	68fb      	ldr	r3, [r7, #12]
 8015df8:	68ba      	ldr	r2, [r7, #8]
 8015dfa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015dfe:	68fb      	ldr	r3, [r7, #12]
 8015e00:	2201      	movs	r2, #1
 8015e02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	79fa      	ldrb	r2, [r7, #7]
 8015e0a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015e0c:	68f8      	ldr	r0, [r7, #12]
 8015e0e:	f004 fdf3 	bl	801a9f8 <USBD_LL_Init>
 8015e12:	4603      	mov	r3, r0
 8015e14:	75fb      	strb	r3, [r7, #23]

  return ret;
 8015e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8015e18:	4618      	mov	r0, r3
 8015e1a:	3718      	adds	r7, #24
 8015e1c:	46bd      	mov	sp, r7
 8015e1e:	bd80      	pop	{r7, pc}

08015e20 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015e20:	b580      	push	{r7, lr}
 8015e22:	b084      	sub	sp, #16
 8015e24:	af00      	add	r7, sp, #0
 8015e26:	6078      	str	r0, [r7, #4]
 8015e28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015e2a:	2300      	movs	r3, #0
 8015e2c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8015e2e:	683b      	ldr	r3, [r7, #0]
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d101      	bne.n	8015e38 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015e34:	2303      	movs	r3, #3
 8015e36:	e025      	b.n	8015e84 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	683a      	ldr	r2, [r7, #0]
 8015e3c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	32ae      	adds	r2, #174	; 0xae
 8015e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d00f      	beq.n	8015e74 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	32ae      	adds	r2, #174	; 0xae
 8015e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e64:	f107 020e 	add.w	r2, r7, #14
 8015e68:	4610      	mov	r0, r2
 8015e6a:	4798      	blx	r3
 8015e6c:	4602      	mov	r2, r0
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015e7a:	1c5a      	adds	r2, r3, #1
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8015e82:	2300      	movs	r3, #0
}
 8015e84:	4618      	mov	r0, r3
 8015e86:	3710      	adds	r7, #16
 8015e88:	46bd      	mov	sp, r7
 8015e8a:	bd80      	pop	{r7, pc}

08015e8c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8015e8c:	b580      	push	{r7, lr}
 8015e8e:	b082      	sub	sp, #8
 8015e90:	af00      	add	r7, sp, #0
 8015e92:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015e94:	6878      	ldr	r0, [r7, #4]
 8015e96:	f004 fe01 	bl	801aa9c <USBD_LL_Start>
 8015e9a:	4603      	mov	r3, r0
}
 8015e9c:	4618      	mov	r0, r3
 8015e9e:	3708      	adds	r7, #8
 8015ea0:	46bd      	mov	sp, r7
 8015ea2:	bd80      	pop	{r7, pc}

08015ea4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8015ea4:	b480      	push	{r7}
 8015ea6:	b083      	sub	sp, #12
 8015ea8:	af00      	add	r7, sp, #0
 8015eaa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015eac:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8015eae:	4618      	mov	r0, r3
 8015eb0:	370c      	adds	r7, #12
 8015eb2:	46bd      	mov	sp, r7
 8015eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eb8:	4770      	bx	lr

08015eba <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015eba:	b580      	push	{r7, lr}
 8015ebc:	b084      	sub	sp, #16
 8015ebe:	af00      	add	r7, sp, #0
 8015ec0:	6078      	str	r0, [r7, #4]
 8015ec2:	460b      	mov	r3, r1
 8015ec4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015ec6:	2300      	movs	r3, #0
 8015ec8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d009      	beq.n	8015ee8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	78fa      	ldrb	r2, [r7, #3]
 8015ede:	4611      	mov	r1, r2
 8015ee0:	6878      	ldr	r0, [r7, #4]
 8015ee2:	4798      	blx	r3
 8015ee4:	4603      	mov	r3, r0
 8015ee6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8015eea:	4618      	mov	r0, r3
 8015eec:	3710      	adds	r7, #16
 8015eee:	46bd      	mov	sp, r7
 8015ef0:	bd80      	pop	{r7, pc}

08015ef2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015ef2:	b580      	push	{r7, lr}
 8015ef4:	b084      	sub	sp, #16
 8015ef6:	af00      	add	r7, sp, #0
 8015ef8:	6078      	str	r0, [r7, #4]
 8015efa:	460b      	mov	r3, r1
 8015efc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015efe:	2300      	movs	r3, #0
 8015f00:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f08:	685b      	ldr	r3, [r3, #4]
 8015f0a:	78fa      	ldrb	r2, [r7, #3]
 8015f0c:	4611      	mov	r1, r2
 8015f0e:	6878      	ldr	r0, [r7, #4]
 8015f10:	4798      	blx	r3
 8015f12:	4603      	mov	r3, r0
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	d001      	beq.n	8015f1c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8015f18:	2303      	movs	r3, #3
 8015f1a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f1e:	4618      	mov	r0, r3
 8015f20:	3710      	adds	r7, #16
 8015f22:	46bd      	mov	sp, r7
 8015f24:	bd80      	pop	{r7, pc}

08015f26 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015f26:	b580      	push	{r7, lr}
 8015f28:	b084      	sub	sp, #16
 8015f2a:	af00      	add	r7, sp, #0
 8015f2c:	6078      	str	r0, [r7, #4]
 8015f2e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015f36:	6839      	ldr	r1, [r7, #0]
 8015f38:	4618      	mov	r0, r3
 8015f3a:	f001 f90e 	bl	801715a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	2201      	movs	r2, #1
 8015f42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015f4c:	461a      	mov	r2, r3
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015f5a:	f003 031f 	and.w	r3, r3, #31
 8015f5e:	2b02      	cmp	r3, #2
 8015f60:	d01a      	beq.n	8015f98 <USBD_LL_SetupStage+0x72>
 8015f62:	2b02      	cmp	r3, #2
 8015f64:	d822      	bhi.n	8015fac <USBD_LL_SetupStage+0x86>
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d002      	beq.n	8015f70 <USBD_LL_SetupStage+0x4a>
 8015f6a:	2b01      	cmp	r3, #1
 8015f6c:	d00a      	beq.n	8015f84 <USBD_LL_SetupStage+0x5e>
 8015f6e:	e01d      	b.n	8015fac <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015f76:	4619      	mov	r1, r3
 8015f78:	6878      	ldr	r0, [r7, #4]
 8015f7a:	f000 fb65 	bl	8016648 <USBD_StdDevReq>
 8015f7e:	4603      	mov	r3, r0
 8015f80:	73fb      	strb	r3, [r7, #15]
      break;
 8015f82:	e020      	b.n	8015fc6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015f8a:	4619      	mov	r1, r3
 8015f8c:	6878      	ldr	r0, [r7, #4]
 8015f8e:	f000 fbcd 	bl	801672c <USBD_StdItfReq>
 8015f92:	4603      	mov	r3, r0
 8015f94:	73fb      	strb	r3, [r7, #15]
      break;
 8015f96:	e016      	b.n	8015fc6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015f9e:	4619      	mov	r1, r3
 8015fa0:	6878      	ldr	r0, [r7, #4]
 8015fa2:	f000 fc2f 	bl	8016804 <USBD_StdEPReq>
 8015fa6:	4603      	mov	r3, r0
 8015fa8:	73fb      	strb	r3, [r7, #15]
      break;
 8015faa:	e00c      	b.n	8015fc6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015fb2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015fb6:	b2db      	uxtb	r3, r3
 8015fb8:	4619      	mov	r1, r3
 8015fba:	6878      	ldr	r0, [r7, #4]
 8015fbc:	f004 fdce 	bl	801ab5c <USBD_LL_StallEP>
 8015fc0:	4603      	mov	r3, r0
 8015fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8015fc4:	bf00      	nop
  }

  return ret;
 8015fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8015fc8:	4618      	mov	r0, r3
 8015fca:	3710      	adds	r7, #16
 8015fcc:	46bd      	mov	sp, r7
 8015fce:	bd80      	pop	{r7, pc}

08015fd0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015fd0:	b580      	push	{r7, lr}
 8015fd2:	b086      	sub	sp, #24
 8015fd4:	af00      	add	r7, sp, #0
 8015fd6:	60f8      	str	r0, [r7, #12]
 8015fd8:	460b      	mov	r3, r1
 8015fda:	607a      	str	r2, [r7, #4]
 8015fdc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8015fde:	2300      	movs	r3, #0
 8015fe0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8015fe2:	7afb      	ldrb	r3, [r7, #11]
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d16e      	bne.n	80160c6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8015fe8:	68fb      	ldr	r3, [r7, #12]
 8015fea:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015fee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015ff0:	68fb      	ldr	r3, [r7, #12]
 8015ff2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015ff6:	2b03      	cmp	r3, #3
 8015ff8:	f040 8098 	bne.w	801612c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8015ffc:	693b      	ldr	r3, [r7, #16]
 8015ffe:	689a      	ldr	r2, [r3, #8]
 8016000:	693b      	ldr	r3, [r7, #16]
 8016002:	68db      	ldr	r3, [r3, #12]
 8016004:	429a      	cmp	r2, r3
 8016006:	d913      	bls.n	8016030 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8016008:	693b      	ldr	r3, [r7, #16]
 801600a:	689a      	ldr	r2, [r3, #8]
 801600c:	693b      	ldr	r3, [r7, #16]
 801600e:	68db      	ldr	r3, [r3, #12]
 8016010:	1ad2      	subs	r2, r2, r3
 8016012:	693b      	ldr	r3, [r7, #16]
 8016014:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8016016:	693b      	ldr	r3, [r7, #16]
 8016018:	68da      	ldr	r2, [r3, #12]
 801601a:	693b      	ldr	r3, [r7, #16]
 801601c:	689b      	ldr	r3, [r3, #8]
 801601e:	4293      	cmp	r3, r2
 8016020:	bf28      	it	cs
 8016022:	4613      	movcs	r3, r2
 8016024:	461a      	mov	r2, r3
 8016026:	6879      	ldr	r1, [r7, #4]
 8016028:	68f8      	ldr	r0, [r7, #12]
 801602a:	f001 f98a 	bl	8017342 <USBD_CtlContinueRx>
 801602e:	e07d      	b.n	801612c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8016030:	68fb      	ldr	r3, [r7, #12]
 8016032:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8016036:	f003 031f 	and.w	r3, r3, #31
 801603a:	2b02      	cmp	r3, #2
 801603c:	d014      	beq.n	8016068 <USBD_LL_DataOutStage+0x98>
 801603e:	2b02      	cmp	r3, #2
 8016040:	d81d      	bhi.n	801607e <USBD_LL_DataOutStage+0xae>
 8016042:	2b00      	cmp	r3, #0
 8016044:	d002      	beq.n	801604c <USBD_LL_DataOutStage+0x7c>
 8016046:	2b01      	cmp	r3, #1
 8016048:	d003      	beq.n	8016052 <USBD_LL_DataOutStage+0x82>
 801604a:	e018      	b.n	801607e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 801604c:	2300      	movs	r3, #0
 801604e:	75bb      	strb	r3, [r7, #22]
            break;
 8016050:	e018      	b.n	8016084 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8016052:	68fb      	ldr	r3, [r7, #12]
 8016054:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8016058:	b2db      	uxtb	r3, r3
 801605a:	4619      	mov	r1, r3
 801605c:	68f8      	ldr	r0, [r7, #12]
 801605e:	f000 fa64 	bl	801652a <USBD_CoreFindIF>
 8016062:	4603      	mov	r3, r0
 8016064:	75bb      	strb	r3, [r7, #22]
            break;
 8016066:	e00d      	b.n	8016084 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8016068:	68fb      	ldr	r3, [r7, #12]
 801606a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801606e:	b2db      	uxtb	r3, r3
 8016070:	4619      	mov	r1, r3
 8016072:	68f8      	ldr	r0, [r7, #12]
 8016074:	f000 fa66 	bl	8016544 <USBD_CoreFindEP>
 8016078:	4603      	mov	r3, r0
 801607a:	75bb      	strb	r3, [r7, #22]
            break;
 801607c:	e002      	b.n	8016084 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801607e:	2300      	movs	r3, #0
 8016080:	75bb      	strb	r3, [r7, #22]
            break;
 8016082:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8016084:	7dbb      	ldrb	r3, [r7, #22]
 8016086:	2b00      	cmp	r3, #0
 8016088:	d119      	bne.n	80160be <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016090:	b2db      	uxtb	r3, r3
 8016092:	2b03      	cmp	r3, #3
 8016094:	d113      	bne.n	80160be <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8016096:	7dba      	ldrb	r2, [r7, #22]
 8016098:	68fb      	ldr	r3, [r7, #12]
 801609a:	32ae      	adds	r2, #174	; 0xae
 801609c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160a0:	691b      	ldr	r3, [r3, #16]
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d00b      	beq.n	80160be <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80160a6:	7dba      	ldrb	r2, [r7, #22]
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80160ae:	7dba      	ldrb	r2, [r7, #22]
 80160b0:	68fb      	ldr	r3, [r7, #12]
 80160b2:	32ae      	adds	r2, #174	; 0xae
 80160b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160b8:	691b      	ldr	r3, [r3, #16]
 80160ba:	68f8      	ldr	r0, [r7, #12]
 80160bc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80160be:	68f8      	ldr	r0, [r7, #12]
 80160c0:	f001 f950 	bl	8017364 <USBD_CtlSendStatus>
 80160c4:	e032      	b.n	801612c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80160c6:	7afb      	ldrb	r3, [r7, #11]
 80160c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80160cc:	b2db      	uxtb	r3, r3
 80160ce:	4619      	mov	r1, r3
 80160d0:	68f8      	ldr	r0, [r7, #12]
 80160d2:	f000 fa37 	bl	8016544 <USBD_CoreFindEP>
 80160d6:	4603      	mov	r3, r0
 80160d8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80160da:	7dbb      	ldrb	r3, [r7, #22]
 80160dc:	2bff      	cmp	r3, #255	; 0xff
 80160de:	d025      	beq.n	801612c <USBD_LL_DataOutStage+0x15c>
 80160e0:	7dbb      	ldrb	r3, [r7, #22]
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d122      	bne.n	801612c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80160e6:	68fb      	ldr	r3, [r7, #12]
 80160e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80160ec:	b2db      	uxtb	r3, r3
 80160ee:	2b03      	cmp	r3, #3
 80160f0:	d117      	bne.n	8016122 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80160f2:	7dba      	ldrb	r2, [r7, #22]
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	32ae      	adds	r2, #174	; 0xae
 80160f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160fc:	699b      	ldr	r3, [r3, #24]
 80160fe:	2b00      	cmp	r3, #0
 8016100:	d00f      	beq.n	8016122 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8016102:	7dba      	ldrb	r2, [r7, #22]
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801610a:	7dba      	ldrb	r2, [r7, #22]
 801610c:	68fb      	ldr	r3, [r7, #12]
 801610e:	32ae      	adds	r2, #174	; 0xae
 8016110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016114:	699b      	ldr	r3, [r3, #24]
 8016116:	7afa      	ldrb	r2, [r7, #11]
 8016118:	4611      	mov	r1, r2
 801611a:	68f8      	ldr	r0, [r7, #12]
 801611c:	4798      	blx	r3
 801611e:	4603      	mov	r3, r0
 8016120:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8016122:	7dfb      	ldrb	r3, [r7, #23]
 8016124:	2b00      	cmp	r3, #0
 8016126:	d001      	beq.n	801612c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8016128:	7dfb      	ldrb	r3, [r7, #23]
 801612a:	e000      	b.n	801612e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 801612c:	2300      	movs	r3, #0
}
 801612e:	4618      	mov	r0, r3
 8016130:	3718      	adds	r7, #24
 8016132:	46bd      	mov	sp, r7
 8016134:	bd80      	pop	{r7, pc}

08016136 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8016136:	b580      	push	{r7, lr}
 8016138:	b086      	sub	sp, #24
 801613a:	af00      	add	r7, sp, #0
 801613c:	60f8      	str	r0, [r7, #12]
 801613e:	460b      	mov	r3, r1
 8016140:	607a      	str	r2, [r7, #4]
 8016142:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8016144:	7afb      	ldrb	r3, [r7, #11]
 8016146:	2b00      	cmp	r3, #0
 8016148:	d16f      	bne.n	801622a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	3314      	adds	r3, #20
 801614e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8016156:	2b02      	cmp	r3, #2
 8016158:	d15a      	bne.n	8016210 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801615a:	693b      	ldr	r3, [r7, #16]
 801615c:	689a      	ldr	r2, [r3, #8]
 801615e:	693b      	ldr	r3, [r7, #16]
 8016160:	68db      	ldr	r3, [r3, #12]
 8016162:	429a      	cmp	r2, r3
 8016164:	d914      	bls.n	8016190 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8016166:	693b      	ldr	r3, [r7, #16]
 8016168:	689a      	ldr	r2, [r3, #8]
 801616a:	693b      	ldr	r3, [r7, #16]
 801616c:	68db      	ldr	r3, [r3, #12]
 801616e:	1ad2      	subs	r2, r2, r3
 8016170:	693b      	ldr	r3, [r7, #16]
 8016172:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8016174:	693b      	ldr	r3, [r7, #16]
 8016176:	689b      	ldr	r3, [r3, #8]
 8016178:	461a      	mov	r2, r3
 801617a:	6879      	ldr	r1, [r7, #4]
 801617c:	68f8      	ldr	r0, [r7, #12]
 801617e:	f001 f8b2 	bl	80172e6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016182:	2300      	movs	r3, #0
 8016184:	2200      	movs	r2, #0
 8016186:	2100      	movs	r1, #0
 8016188:	68f8      	ldr	r0, [r7, #12]
 801618a:	f004 fd91 	bl	801acb0 <USBD_LL_PrepareReceive>
 801618e:	e03f      	b.n	8016210 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8016190:	693b      	ldr	r3, [r7, #16]
 8016192:	68da      	ldr	r2, [r3, #12]
 8016194:	693b      	ldr	r3, [r7, #16]
 8016196:	689b      	ldr	r3, [r3, #8]
 8016198:	429a      	cmp	r2, r3
 801619a:	d11c      	bne.n	80161d6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801619c:	693b      	ldr	r3, [r7, #16]
 801619e:	685a      	ldr	r2, [r3, #4]
 80161a0:	693b      	ldr	r3, [r7, #16]
 80161a2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80161a4:	429a      	cmp	r2, r3
 80161a6:	d316      	bcc.n	80161d6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80161a8:	693b      	ldr	r3, [r7, #16]
 80161aa:	685a      	ldr	r2, [r3, #4]
 80161ac:	68fb      	ldr	r3, [r7, #12]
 80161ae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80161b2:	429a      	cmp	r2, r3
 80161b4:	d20f      	bcs.n	80161d6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80161b6:	2200      	movs	r2, #0
 80161b8:	2100      	movs	r1, #0
 80161ba:	68f8      	ldr	r0, [r7, #12]
 80161bc:	f001 f893 	bl	80172e6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80161c0:	68fb      	ldr	r3, [r7, #12]
 80161c2:	2200      	movs	r2, #0
 80161c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80161c8:	2300      	movs	r3, #0
 80161ca:	2200      	movs	r2, #0
 80161cc:	2100      	movs	r1, #0
 80161ce:	68f8      	ldr	r0, [r7, #12]
 80161d0:	f004 fd6e 	bl	801acb0 <USBD_LL_PrepareReceive>
 80161d4:	e01c      	b.n	8016210 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80161dc:	b2db      	uxtb	r3, r3
 80161de:	2b03      	cmp	r3, #3
 80161e0:	d10f      	bne.n	8016202 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80161e8:	68db      	ldr	r3, [r3, #12]
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	d009      	beq.n	8016202 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80161ee:	68fb      	ldr	r3, [r7, #12]
 80161f0:	2200      	movs	r2, #0
 80161f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80161f6:	68fb      	ldr	r3, [r7, #12]
 80161f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80161fc:	68db      	ldr	r3, [r3, #12]
 80161fe:	68f8      	ldr	r0, [r7, #12]
 8016200:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8016202:	2180      	movs	r1, #128	; 0x80
 8016204:	68f8      	ldr	r0, [r7, #12]
 8016206:	f004 fca9 	bl	801ab5c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801620a:	68f8      	ldr	r0, [r7, #12]
 801620c:	f001 f8bd 	bl	801738a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8016216:	2b00      	cmp	r3, #0
 8016218:	d03a      	beq.n	8016290 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801621a:	68f8      	ldr	r0, [r7, #12]
 801621c:	f7ff fe42 	bl	8015ea4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	2200      	movs	r2, #0
 8016224:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8016228:	e032      	b.n	8016290 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801622a:	7afb      	ldrb	r3, [r7, #11]
 801622c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016230:	b2db      	uxtb	r3, r3
 8016232:	4619      	mov	r1, r3
 8016234:	68f8      	ldr	r0, [r7, #12]
 8016236:	f000 f985 	bl	8016544 <USBD_CoreFindEP>
 801623a:	4603      	mov	r3, r0
 801623c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801623e:	7dfb      	ldrb	r3, [r7, #23]
 8016240:	2bff      	cmp	r3, #255	; 0xff
 8016242:	d025      	beq.n	8016290 <USBD_LL_DataInStage+0x15a>
 8016244:	7dfb      	ldrb	r3, [r7, #23]
 8016246:	2b00      	cmp	r3, #0
 8016248:	d122      	bne.n	8016290 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801624a:	68fb      	ldr	r3, [r7, #12]
 801624c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016250:	b2db      	uxtb	r3, r3
 8016252:	2b03      	cmp	r3, #3
 8016254:	d11c      	bne.n	8016290 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8016256:	7dfa      	ldrb	r2, [r7, #23]
 8016258:	68fb      	ldr	r3, [r7, #12]
 801625a:	32ae      	adds	r2, #174	; 0xae
 801625c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016260:	695b      	ldr	r3, [r3, #20]
 8016262:	2b00      	cmp	r3, #0
 8016264:	d014      	beq.n	8016290 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8016266:	7dfa      	ldrb	r2, [r7, #23]
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801626e:	7dfa      	ldrb	r2, [r7, #23]
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	32ae      	adds	r2, #174	; 0xae
 8016274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016278:	695b      	ldr	r3, [r3, #20]
 801627a:	7afa      	ldrb	r2, [r7, #11]
 801627c:	4611      	mov	r1, r2
 801627e:	68f8      	ldr	r0, [r7, #12]
 8016280:	4798      	blx	r3
 8016282:	4603      	mov	r3, r0
 8016284:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8016286:	7dbb      	ldrb	r3, [r7, #22]
 8016288:	2b00      	cmp	r3, #0
 801628a:	d001      	beq.n	8016290 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 801628c:	7dbb      	ldrb	r3, [r7, #22]
 801628e:	e000      	b.n	8016292 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8016290:	2300      	movs	r3, #0
}
 8016292:	4618      	mov	r0, r3
 8016294:	3718      	adds	r7, #24
 8016296:	46bd      	mov	sp, r7
 8016298:	bd80      	pop	{r7, pc}

0801629a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801629a:	b580      	push	{r7, lr}
 801629c:	b084      	sub	sp, #16
 801629e:	af00      	add	r7, sp, #0
 80162a0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80162a2:	2300      	movs	r3, #0
 80162a4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	2201      	movs	r2, #1
 80162aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	2200      	movs	r2, #0
 80162b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	2200      	movs	r2, #0
 80162ba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	2200      	movs	r2, #0
 80162c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	2200      	movs	r2, #0
 80162c8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	d014      	beq.n	8016300 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80162dc:	685b      	ldr	r3, [r3, #4]
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d00e      	beq.n	8016300 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80162e8:	685b      	ldr	r3, [r3, #4]
 80162ea:	687a      	ldr	r2, [r7, #4]
 80162ec:	6852      	ldr	r2, [r2, #4]
 80162ee:	b2d2      	uxtb	r2, r2
 80162f0:	4611      	mov	r1, r2
 80162f2:	6878      	ldr	r0, [r7, #4]
 80162f4:	4798      	blx	r3
 80162f6:	4603      	mov	r3, r0
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d001      	beq.n	8016300 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80162fc:	2303      	movs	r3, #3
 80162fe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016300:	2340      	movs	r3, #64	; 0x40
 8016302:	2200      	movs	r2, #0
 8016304:	2100      	movs	r1, #0
 8016306:	6878      	ldr	r0, [r7, #4]
 8016308:	f004 fbe3 	bl	801aad2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	2201      	movs	r2, #1
 8016310:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	2240      	movs	r2, #64	; 0x40
 8016318:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801631c:	2340      	movs	r3, #64	; 0x40
 801631e:	2200      	movs	r2, #0
 8016320:	2180      	movs	r1, #128	; 0x80
 8016322:	6878      	ldr	r0, [r7, #4]
 8016324:	f004 fbd5 	bl	801aad2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	2201      	movs	r2, #1
 801632c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	2240      	movs	r2, #64	; 0x40
 8016332:	621a      	str	r2, [r3, #32]

  return ret;
 8016334:	7bfb      	ldrb	r3, [r7, #15]
}
 8016336:	4618      	mov	r0, r3
 8016338:	3710      	adds	r7, #16
 801633a:	46bd      	mov	sp, r7
 801633c:	bd80      	pop	{r7, pc}

0801633e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801633e:	b480      	push	{r7}
 8016340:	b083      	sub	sp, #12
 8016342:	af00      	add	r7, sp, #0
 8016344:	6078      	str	r0, [r7, #4]
 8016346:	460b      	mov	r3, r1
 8016348:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	78fa      	ldrb	r2, [r7, #3]
 801634e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8016350:	2300      	movs	r3, #0
}
 8016352:	4618      	mov	r0, r3
 8016354:	370c      	adds	r7, #12
 8016356:	46bd      	mov	sp, r7
 8016358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801635c:	4770      	bx	lr

0801635e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801635e:	b480      	push	{r7}
 8016360:	b083      	sub	sp, #12
 8016362:	af00      	add	r7, sp, #0
 8016364:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801636c:	b2db      	uxtb	r3, r3
 801636e:	2b04      	cmp	r3, #4
 8016370:	d006      	beq.n	8016380 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016378:	b2da      	uxtb	r2, r3
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	2204      	movs	r2, #4
 8016384:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8016388:	2300      	movs	r3, #0
}
 801638a:	4618      	mov	r0, r3
 801638c:	370c      	adds	r7, #12
 801638e:	46bd      	mov	sp, r7
 8016390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016394:	4770      	bx	lr

08016396 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8016396:	b480      	push	{r7}
 8016398:	b083      	sub	sp, #12
 801639a:	af00      	add	r7, sp, #0
 801639c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80163a4:	b2db      	uxtb	r3, r3
 80163a6:	2b04      	cmp	r3, #4
 80163a8:	d106      	bne.n	80163b8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80163b0:	b2da      	uxtb	r2, r3
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80163b8:	2300      	movs	r3, #0
}
 80163ba:	4618      	mov	r0, r3
 80163bc:	370c      	adds	r7, #12
 80163be:	46bd      	mov	sp, r7
 80163c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163c4:	4770      	bx	lr

080163c6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80163c6:	b580      	push	{r7, lr}
 80163c8:	b082      	sub	sp, #8
 80163ca:	af00      	add	r7, sp, #0
 80163cc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80163d4:	b2db      	uxtb	r3, r3
 80163d6:	2b03      	cmp	r3, #3
 80163d8:	d110      	bne.n	80163fc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d00b      	beq.n	80163fc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80163ea:	69db      	ldr	r3, [r3, #28]
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d005      	beq.n	80163fc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80163f6:	69db      	ldr	r3, [r3, #28]
 80163f8:	6878      	ldr	r0, [r7, #4]
 80163fa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80163fc:	2300      	movs	r3, #0
}
 80163fe:	4618      	mov	r0, r3
 8016400:	3708      	adds	r7, #8
 8016402:	46bd      	mov	sp, r7
 8016404:	bd80      	pop	{r7, pc}

08016406 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8016406:	b580      	push	{r7, lr}
 8016408:	b082      	sub	sp, #8
 801640a:	af00      	add	r7, sp, #0
 801640c:	6078      	str	r0, [r7, #4]
 801640e:	460b      	mov	r3, r1
 8016410:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	32ae      	adds	r2, #174	; 0xae
 801641c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016420:	2b00      	cmp	r3, #0
 8016422:	d101      	bne.n	8016428 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8016424:	2303      	movs	r3, #3
 8016426:	e01c      	b.n	8016462 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801642e:	b2db      	uxtb	r3, r3
 8016430:	2b03      	cmp	r3, #3
 8016432:	d115      	bne.n	8016460 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	32ae      	adds	r2, #174	; 0xae
 801643e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016442:	6a1b      	ldr	r3, [r3, #32]
 8016444:	2b00      	cmp	r3, #0
 8016446:	d00b      	beq.n	8016460 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	32ae      	adds	r2, #174	; 0xae
 8016452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016456:	6a1b      	ldr	r3, [r3, #32]
 8016458:	78fa      	ldrb	r2, [r7, #3]
 801645a:	4611      	mov	r1, r2
 801645c:	6878      	ldr	r0, [r7, #4]
 801645e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016460:	2300      	movs	r3, #0
}
 8016462:	4618      	mov	r0, r3
 8016464:	3708      	adds	r7, #8
 8016466:	46bd      	mov	sp, r7
 8016468:	bd80      	pop	{r7, pc}

0801646a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801646a:	b580      	push	{r7, lr}
 801646c:	b082      	sub	sp, #8
 801646e:	af00      	add	r7, sp, #0
 8016470:	6078      	str	r0, [r7, #4]
 8016472:	460b      	mov	r3, r1
 8016474:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	32ae      	adds	r2, #174	; 0xae
 8016480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016484:	2b00      	cmp	r3, #0
 8016486:	d101      	bne.n	801648c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8016488:	2303      	movs	r3, #3
 801648a:	e01c      	b.n	80164c6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016492:	b2db      	uxtb	r3, r3
 8016494:	2b03      	cmp	r3, #3
 8016496:	d115      	bne.n	80164c4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	32ae      	adds	r2, #174	; 0xae
 80164a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80164a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d00b      	beq.n	80164c4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	32ae      	adds	r2, #174	; 0xae
 80164b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80164ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164bc:	78fa      	ldrb	r2, [r7, #3]
 80164be:	4611      	mov	r1, r2
 80164c0:	6878      	ldr	r0, [r7, #4]
 80164c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80164c4:	2300      	movs	r3, #0
}
 80164c6:	4618      	mov	r0, r3
 80164c8:	3708      	adds	r7, #8
 80164ca:	46bd      	mov	sp, r7
 80164cc:	bd80      	pop	{r7, pc}

080164ce <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80164ce:	b480      	push	{r7}
 80164d0:	b083      	sub	sp, #12
 80164d2:	af00      	add	r7, sp, #0
 80164d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80164d6:	2300      	movs	r3, #0
}
 80164d8:	4618      	mov	r0, r3
 80164da:	370c      	adds	r7, #12
 80164dc:	46bd      	mov	sp, r7
 80164de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164e2:	4770      	bx	lr

080164e4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80164e4:	b580      	push	{r7, lr}
 80164e6:	b084      	sub	sp, #16
 80164e8:	af00      	add	r7, sp, #0
 80164ea:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80164ec:	2300      	movs	r3, #0
 80164ee:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	2201      	movs	r2, #1
 80164f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d00e      	beq.n	8016520 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016508:	685b      	ldr	r3, [r3, #4]
 801650a:	687a      	ldr	r2, [r7, #4]
 801650c:	6852      	ldr	r2, [r2, #4]
 801650e:	b2d2      	uxtb	r2, r2
 8016510:	4611      	mov	r1, r2
 8016512:	6878      	ldr	r0, [r7, #4]
 8016514:	4798      	blx	r3
 8016516:	4603      	mov	r3, r0
 8016518:	2b00      	cmp	r3, #0
 801651a:	d001      	beq.n	8016520 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801651c:	2303      	movs	r3, #3
 801651e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016520:	7bfb      	ldrb	r3, [r7, #15]
}
 8016522:	4618      	mov	r0, r3
 8016524:	3710      	adds	r7, #16
 8016526:	46bd      	mov	sp, r7
 8016528:	bd80      	pop	{r7, pc}

0801652a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801652a:	b480      	push	{r7}
 801652c:	b083      	sub	sp, #12
 801652e:	af00      	add	r7, sp, #0
 8016530:	6078      	str	r0, [r7, #4]
 8016532:	460b      	mov	r3, r1
 8016534:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016536:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016538:	4618      	mov	r0, r3
 801653a:	370c      	adds	r7, #12
 801653c:	46bd      	mov	sp, r7
 801653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016542:	4770      	bx	lr

08016544 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016544:	b480      	push	{r7}
 8016546:	b083      	sub	sp, #12
 8016548:	af00      	add	r7, sp, #0
 801654a:	6078      	str	r0, [r7, #4]
 801654c:	460b      	mov	r3, r1
 801654e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016550:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016552:	4618      	mov	r0, r3
 8016554:	370c      	adds	r7, #12
 8016556:	46bd      	mov	sp, r7
 8016558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801655c:	4770      	bx	lr

0801655e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801655e:	b580      	push	{r7, lr}
 8016560:	b086      	sub	sp, #24
 8016562:	af00      	add	r7, sp, #0
 8016564:	6078      	str	r0, [r7, #4]
 8016566:	460b      	mov	r3, r1
 8016568:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8016572:	2300      	movs	r3, #0
 8016574:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8016576:	68fb      	ldr	r3, [r7, #12]
 8016578:	885b      	ldrh	r3, [r3, #2]
 801657a:	b29a      	uxth	r2, r3
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	781b      	ldrb	r3, [r3, #0]
 8016580:	b29b      	uxth	r3, r3
 8016582:	429a      	cmp	r2, r3
 8016584:	d920      	bls.n	80165c8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8016586:	68fb      	ldr	r3, [r7, #12]
 8016588:	781b      	ldrb	r3, [r3, #0]
 801658a:	b29b      	uxth	r3, r3
 801658c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801658e:	e013      	b.n	80165b8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8016590:	f107 030a 	add.w	r3, r7, #10
 8016594:	4619      	mov	r1, r3
 8016596:	6978      	ldr	r0, [r7, #20]
 8016598:	f000 f81b 	bl	80165d2 <USBD_GetNextDesc>
 801659c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801659e:	697b      	ldr	r3, [r7, #20]
 80165a0:	785b      	ldrb	r3, [r3, #1]
 80165a2:	2b05      	cmp	r3, #5
 80165a4:	d108      	bne.n	80165b8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80165a6:	697b      	ldr	r3, [r7, #20]
 80165a8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80165aa:	693b      	ldr	r3, [r7, #16]
 80165ac:	789b      	ldrb	r3, [r3, #2]
 80165ae:	78fa      	ldrb	r2, [r7, #3]
 80165b0:	429a      	cmp	r2, r3
 80165b2:	d008      	beq.n	80165c6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80165b4:	2300      	movs	r3, #0
 80165b6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	885b      	ldrh	r3, [r3, #2]
 80165bc:	b29a      	uxth	r2, r3
 80165be:	897b      	ldrh	r3, [r7, #10]
 80165c0:	429a      	cmp	r2, r3
 80165c2:	d8e5      	bhi.n	8016590 <USBD_GetEpDesc+0x32>
 80165c4:	e000      	b.n	80165c8 <USBD_GetEpDesc+0x6a>
          break;
 80165c6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80165c8:	693b      	ldr	r3, [r7, #16]
}
 80165ca:	4618      	mov	r0, r3
 80165cc:	3718      	adds	r7, #24
 80165ce:	46bd      	mov	sp, r7
 80165d0:	bd80      	pop	{r7, pc}

080165d2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80165d2:	b480      	push	{r7}
 80165d4:	b085      	sub	sp, #20
 80165d6:	af00      	add	r7, sp, #0
 80165d8:	6078      	str	r0, [r7, #4]
 80165da:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80165e0:	683b      	ldr	r3, [r7, #0]
 80165e2:	881a      	ldrh	r2, [r3, #0]
 80165e4:	68fb      	ldr	r3, [r7, #12]
 80165e6:	781b      	ldrb	r3, [r3, #0]
 80165e8:	b29b      	uxth	r3, r3
 80165ea:	4413      	add	r3, r2
 80165ec:	b29a      	uxth	r2, r3
 80165ee:	683b      	ldr	r3, [r7, #0]
 80165f0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80165f2:	68fb      	ldr	r3, [r7, #12]
 80165f4:	781b      	ldrb	r3, [r3, #0]
 80165f6:	461a      	mov	r2, r3
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	4413      	add	r3, r2
 80165fc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80165fe:	68fb      	ldr	r3, [r7, #12]
}
 8016600:	4618      	mov	r0, r3
 8016602:	3714      	adds	r7, #20
 8016604:	46bd      	mov	sp, r7
 8016606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801660a:	4770      	bx	lr

0801660c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801660c:	b480      	push	{r7}
 801660e:	b087      	sub	sp, #28
 8016610:	af00      	add	r7, sp, #0
 8016612:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8016618:	697b      	ldr	r3, [r7, #20]
 801661a:	781b      	ldrb	r3, [r3, #0]
 801661c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801661e:	697b      	ldr	r3, [r7, #20]
 8016620:	3301      	adds	r3, #1
 8016622:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8016624:	697b      	ldr	r3, [r7, #20]
 8016626:	781b      	ldrb	r3, [r3, #0]
 8016628:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801662a:	8a3b      	ldrh	r3, [r7, #16]
 801662c:	021b      	lsls	r3, r3, #8
 801662e:	b21a      	sxth	r2, r3
 8016630:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016634:	4313      	orrs	r3, r2
 8016636:	b21b      	sxth	r3, r3
 8016638:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801663a:	89fb      	ldrh	r3, [r7, #14]
}
 801663c:	4618      	mov	r0, r3
 801663e:	371c      	adds	r7, #28
 8016640:	46bd      	mov	sp, r7
 8016642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016646:	4770      	bx	lr

08016648 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016648:	b580      	push	{r7, lr}
 801664a:	b084      	sub	sp, #16
 801664c:	af00      	add	r7, sp, #0
 801664e:	6078      	str	r0, [r7, #4]
 8016650:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016652:	2300      	movs	r3, #0
 8016654:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016656:	683b      	ldr	r3, [r7, #0]
 8016658:	781b      	ldrb	r3, [r3, #0]
 801665a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801665e:	2b40      	cmp	r3, #64	; 0x40
 8016660:	d005      	beq.n	801666e <USBD_StdDevReq+0x26>
 8016662:	2b40      	cmp	r3, #64	; 0x40
 8016664:	d857      	bhi.n	8016716 <USBD_StdDevReq+0xce>
 8016666:	2b00      	cmp	r3, #0
 8016668:	d00f      	beq.n	801668a <USBD_StdDevReq+0x42>
 801666a:	2b20      	cmp	r3, #32
 801666c:	d153      	bne.n	8016716 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	32ae      	adds	r2, #174	; 0xae
 8016678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801667c:	689b      	ldr	r3, [r3, #8]
 801667e:	6839      	ldr	r1, [r7, #0]
 8016680:	6878      	ldr	r0, [r7, #4]
 8016682:	4798      	blx	r3
 8016684:	4603      	mov	r3, r0
 8016686:	73fb      	strb	r3, [r7, #15]
      break;
 8016688:	e04a      	b.n	8016720 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801668a:	683b      	ldr	r3, [r7, #0]
 801668c:	785b      	ldrb	r3, [r3, #1]
 801668e:	2b09      	cmp	r3, #9
 8016690:	d83b      	bhi.n	801670a <USBD_StdDevReq+0xc2>
 8016692:	a201      	add	r2, pc, #4	; (adr r2, 8016698 <USBD_StdDevReq+0x50>)
 8016694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016698:	080166ed 	.word	0x080166ed
 801669c:	08016701 	.word	0x08016701
 80166a0:	0801670b 	.word	0x0801670b
 80166a4:	080166f7 	.word	0x080166f7
 80166a8:	0801670b 	.word	0x0801670b
 80166ac:	080166cb 	.word	0x080166cb
 80166b0:	080166c1 	.word	0x080166c1
 80166b4:	0801670b 	.word	0x0801670b
 80166b8:	080166e3 	.word	0x080166e3
 80166bc:	080166d5 	.word	0x080166d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80166c0:	6839      	ldr	r1, [r7, #0]
 80166c2:	6878      	ldr	r0, [r7, #4]
 80166c4:	f000 fa3c 	bl	8016b40 <USBD_GetDescriptor>
          break;
 80166c8:	e024      	b.n	8016714 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80166ca:	6839      	ldr	r1, [r7, #0]
 80166cc:	6878      	ldr	r0, [r7, #4]
 80166ce:	f000 fba1 	bl	8016e14 <USBD_SetAddress>
          break;
 80166d2:	e01f      	b.n	8016714 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80166d4:	6839      	ldr	r1, [r7, #0]
 80166d6:	6878      	ldr	r0, [r7, #4]
 80166d8:	f000 fbe0 	bl	8016e9c <USBD_SetConfig>
 80166dc:	4603      	mov	r3, r0
 80166de:	73fb      	strb	r3, [r7, #15]
          break;
 80166e0:	e018      	b.n	8016714 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80166e2:	6839      	ldr	r1, [r7, #0]
 80166e4:	6878      	ldr	r0, [r7, #4]
 80166e6:	f000 fc83 	bl	8016ff0 <USBD_GetConfig>
          break;
 80166ea:	e013      	b.n	8016714 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80166ec:	6839      	ldr	r1, [r7, #0]
 80166ee:	6878      	ldr	r0, [r7, #4]
 80166f0:	f000 fcb4 	bl	801705c <USBD_GetStatus>
          break;
 80166f4:	e00e      	b.n	8016714 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80166f6:	6839      	ldr	r1, [r7, #0]
 80166f8:	6878      	ldr	r0, [r7, #4]
 80166fa:	f000 fce3 	bl	80170c4 <USBD_SetFeature>
          break;
 80166fe:	e009      	b.n	8016714 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8016700:	6839      	ldr	r1, [r7, #0]
 8016702:	6878      	ldr	r0, [r7, #4]
 8016704:	f000 fd07 	bl	8017116 <USBD_ClrFeature>
          break;
 8016708:	e004      	b.n	8016714 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801670a:	6839      	ldr	r1, [r7, #0]
 801670c:	6878      	ldr	r0, [r7, #4]
 801670e:	f000 fd5e 	bl	80171ce <USBD_CtlError>
          break;
 8016712:	bf00      	nop
      }
      break;
 8016714:	e004      	b.n	8016720 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8016716:	6839      	ldr	r1, [r7, #0]
 8016718:	6878      	ldr	r0, [r7, #4]
 801671a:	f000 fd58 	bl	80171ce <USBD_CtlError>
      break;
 801671e:	bf00      	nop
  }

  return ret;
 8016720:	7bfb      	ldrb	r3, [r7, #15]
}
 8016722:	4618      	mov	r0, r3
 8016724:	3710      	adds	r7, #16
 8016726:	46bd      	mov	sp, r7
 8016728:	bd80      	pop	{r7, pc}
 801672a:	bf00      	nop

0801672c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801672c:	b580      	push	{r7, lr}
 801672e:	b084      	sub	sp, #16
 8016730:	af00      	add	r7, sp, #0
 8016732:	6078      	str	r0, [r7, #4]
 8016734:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016736:	2300      	movs	r3, #0
 8016738:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801673a:	683b      	ldr	r3, [r7, #0]
 801673c:	781b      	ldrb	r3, [r3, #0]
 801673e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016742:	2b40      	cmp	r3, #64	; 0x40
 8016744:	d005      	beq.n	8016752 <USBD_StdItfReq+0x26>
 8016746:	2b40      	cmp	r3, #64	; 0x40
 8016748:	d852      	bhi.n	80167f0 <USBD_StdItfReq+0xc4>
 801674a:	2b00      	cmp	r3, #0
 801674c:	d001      	beq.n	8016752 <USBD_StdItfReq+0x26>
 801674e:	2b20      	cmp	r3, #32
 8016750:	d14e      	bne.n	80167f0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016758:	b2db      	uxtb	r3, r3
 801675a:	3b01      	subs	r3, #1
 801675c:	2b02      	cmp	r3, #2
 801675e:	d840      	bhi.n	80167e2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8016760:	683b      	ldr	r3, [r7, #0]
 8016762:	889b      	ldrh	r3, [r3, #4]
 8016764:	b2db      	uxtb	r3, r3
 8016766:	2b01      	cmp	r3, #1
 8016768:	d836      	bhi.n	80167d8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801676a:	683b      	ldr	r3, [r7, #0]
 801676c:	889b      	ldrh	r3, [r3, #4]
 801676e:	b2db      	uxtb	r3, r3
 8016770:	4619      	mov	r1, r3
 8016772:	6878      	ldr	r0, [r7, #4]
 8016774:	f7ff fed9 	bl	801652a <USBD_CoreFindIF>
 8016778:	4603      	mov	r3, r0
 801677a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801677c:	7bbb      	ldrb	r3, [r7, #14]
 801677e:	2bff      	cmp	r3, #255	; 0xff
 8016780:	d01d      	beq.n	80167be <USBD_StdItfReq+0x92>
 8016782:	7bbb      	ldrb	r3, [r7, #14]
 8016784:	2b00      	cmp	r3, #0
 8016786:	d11a      	bne.n	80167be <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8016788:	7bba      	ldrb	r2, [r7, #14]
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	32ae      	adds	r2, #174	; 0xae
 801678e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016792:	689b      	ldr	r3, [r3, #8]
 8016794:	2b00      	cmp	r3, #0
 8016796:	d00f      	beq.n	80167b8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8016798:	7bba      	ldrb	r2, [r7, #14]
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80167a0:	7bba      	ldrb	r2, [r7, #14]
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	32ae      	adds	r2, #174	; 0xae
 80167a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80167aa:	689b      	ldr	r3, [r3, #8]
 80167ac:	6839      	ldr	r1, [r7, #0]
 80167ae:	6878      	ldr	r0, [r7, #4]
 80167b0:	4798      	blx	r3
 80167b2:	4603      	mov	r3, r0
 80167b4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80167b6:	e004      	b.n	80167c2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80167b8:	2303      	movs	r3, #3
 80167ba:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80167bc:	e001      	b.n	80167c2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80167be:	2303      	movs	r3, #3
 80167c0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80167c2:	683b      	ldr	r3, [r7, #0]
 80167c4:	88db      	ldrh	r3, [r3, #6]
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d110      	bne.n	80167ec <USBD_StdItfReq+0xc0>
 80167ca:	7bfb      	ldrb	r3, [r7, #15]
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	d10d      	bne.n	80167ec <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80167d0:	6878      	ldr	r0, [r7, #4]
 80167d2:	f000 fdc7 	bl	8017364 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80167d6:	e009      	b.n	80167ec <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80167d8:	6839      	ldr	r1, [r7, #0]
 80167da:	6878      	ldr	r0, [r7, #4]
 80167dc:	f000 fcf7 	bl	80171ce <USBD_CtlError>
          break;
 80167e0:	e004      	b.n	80167ec <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80167e2:	6839      	ldr	r1, [r7, #0]
 80167e4:	6878      	ldr	r0, [r7, #4]
 80167e6:	f000 fcf2 	bl	80171ce <USBD_CtlError>
          break;
 80167ea:	e000      	b.n	80167ee <USBD_StdItfReq+0xc2>
          break;
 80167ec:	bf00      	nop
      }
      break;
 80167ee:	e004      	b.n	80167fa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80167f0:	6839      	ldr	r1, [r7, #0]
 80167f2:	6878      	ldr	r0, [r7, #4]
 80167f4:	f000 fceb 	bl	80171ce <USBD_CtlError>
      break;
 80167f8:	bf00      	nop
  }

  return ret;
 80167fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80167fc:	4618      	mov	r0, r3
 80167fe:	3710      	adds	r7, #16
 8016800:	46bd      	mov	sp, r7
 8016802:	bd80      	pop	{r7, pc}

08016804 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016804:	b580      	push	{r7, lr}
 8016806:	b084      	sub	sp, #16
 8016808:	af00      	add	r7, sp, #0
 801680a:	6078      	str	r0, [r7, #4]
 801680c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801680e:	2300      	movs	r3, #0
 8016810:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8016812:	683b      	ldr	r3, [r7, #0]
 8016814:	889b      	ldrh	r3, [r3, #4]
 8016816:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016818:	683b      	ldr	r3, [r7, #0]
 801681a:	781b      	ldrb	r3, [r3, #0]
 801681c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016820:	2b40      	cmp	r3, #64	; 0x40
 8016822:	d007      	beq.n	8016834 <USBD_StdEPReq+0x30>
 8016824:	2b40      	cmp	r3, #64	; 0x40
 8016826:	f200 817f 	bhi.w	8016b28 <USBD_StdEPReq+0x324>
 801682a:	2b00      	cmp	r3, #0
 801682c:	d02a      	beq.n	8016884 <USBD_StdEPReq+0x80>
 801682e:	2b20      	cmp	r3, #32
 8016830:	f040 817a 	bne.w	8016b28 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8016834:	7bbb      	ldrb	r3, [r7, #14]
 8016836:	4619      	mov	r1, r3
 8016838:	6878      	ldr	r0, [r7, #4]
 801683a:	f7ff fe83 	bl	8016544 <USBD_CoreFindEP>
 801683e:	4603      	mov	r3, r0
 8016840:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016842:	7b7b      	ldrb	r3, [r7, #13]
 8016844:	2bff      	cmp	r3, #255	; 0xff
 8016846:	f000 8174 	beq.w	8016b32 <USBD_StdEPReq+0x32e>
 801684a:	7b7b      	ldrb	r3, [r7, #13]
 801684c:	2b00      	cmp	r3, #0
 801684e:	f040 8170 	bne.w	8016b32 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8016852:	7b7a      	ldrb	r2, [r7, #13]
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801685a:	7b7a      	ldrb	r2, [r7, #13]
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	32ae      	adds	r2, #174	; 0xae
 8016860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016864:	689b      	ldr	r3, [r3, #8]
 8016866:	2b00      	cmp	r3, #0
 8016868:	f000 8163 	beq.w	8016b32 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801686c:	7b7a      	ldrb	r2, [r7, #13]
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	32ae      	adds	r2, #174	; 0xae
 8016872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016876:	689b      	ldr	r3, [r3, #8]
 8016878:	6839      	ldr	r1, [r7, #0]
 801687a:	6878      	ldr	r0, [r7, #4]
 801687c:	4798      	blx	r3
 801687e:	4603      	mov	r3, r0
 8016880:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8016882:	e156      	b.n	8016b32 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016884:	683b      	ldr	r3, [r7, #0]
 8016886:	785b      	ldrb	r3, [r3, #1]
 8016888:	2b03      	cmp	r3, #3
 801688a:	d008      	beq.n	801689e <USBD_StdEPReq+0x9a>
 801688c:	2b03      	cmp	r3, #3
 801688e:	f300 8145 	bgt.w	8016b1c <USBD_StdEPReq+0x318>
 8016892:	2b00      	cmp	r3, #0
 8016894:	f000 809b 	beq.w	80169ce <USBD_StdEPReq+0x1ca>
 8016898:	2b01      	cmp	r3, #1
 801689a:	d03c      	beq.n	8016916 <USBD_StdEPReq+0x112>
 801689c:	e13e      	b.n	8016b1c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80168a4:	b2db      	uxtb	r3, r3
 80168a6:	2b02      	cmp	r3, #2
 80168a8:	d002      	beq.n	80168b0 <USBD_StdEPReq+0xac>
 80168aa:	2b03      	cmp	r3, #3
 80168ac:	d016      	beq.n	80168dc <USBD_StdEPReq+0xd8>
 80168ae:	e02c      	b.n	801690a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80168b0:	7bbb      	ldrb	r3, [r7, #14]
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d00d      	beq.n	80168d2 <USBD_StdEPReq+0xce>
 80168b6:	7bbb      	ldrb	r3, [r7, #14]
 80168b8:	2b80      	cmp	r3, #128	; 0x80
 80168ba:	d00a      	beq.n	80168d2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80168bc:	7bbb      	ldrb	r3, [r7, #14]
 80168be:	4619      	mov	r1, r3
 80168c0:	6878      	ldr	r0, [r7, #4]
 80168c2:	f004 f94b 	bl	801ab5c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80168c6:	2180      	movs	r1, #128	; 0x80
 80168c8:	6878      	ldr	r0, [r7, #4]
 80168ca:	f004 f947 	bl	801ab5c <USBD_LL_StallEP>
 80168ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80168d0:	e020      	b.n	8016914 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80168d2:	6839      	ldr	r1, [r7, #0]
 80168d4:	6878      	ldr	r0, [r7, #4]
 80168d6:	f000 fc7a 	bl	80171ce <USBD_CtlError>
              break;
 80168da:	e01b      	b.n	8016914 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80168dc:	683b      	ldr	r3, [r7, #0]
 80168de:	885b      	ldrh	r3, [r3, #2]
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d10e      	bne.n	8016902 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80168e4:	7bbb      	ldrb	r3, [r7, #14]
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	d00b      	beq.n	8016902 <USBD_StdEPReq+0xfe>
 80168ea:	7bbb      	ldrb	r3, [r7, #14]
 80168ec:	2b80      	cmp	r3, #128	; 0x80
 80168ee:	d008      	beq.n	8016902 <USBD_StdEPReq+0xfe>
 80168f0:	683b      	ldr	r3, [r7, #0]
 80168f2:	88db      	ldrh	r3, [r3, #6]
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	d104      	bne.n	8016902 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80168f8:	7bbb      	ldrb	r3, [r7, #14]
 80168fa:	4619      	mov	r1, r3
 80168fc:	6878      	ldr	r0, [r7, #4]
 80168fe:	f004 f92d 	bl	801ab5c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8016902:	6878      	ldr	r0, [r7, #4]
 8016904:	f000 fd2e 	bl	8017364 <USBD_CtlSendStatus>

              break;
 8016908:	e004      	b.n	8016914 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801690a:	6839      	ldr	r1, [r7, #0]
 801690c:	6878      	ldr	r0, [r7, #4]
 801690e:	f000 fc5e 	bl	80171ce <USBD_CtlError>
              break;
 8016912:	bf00      	nop
          }
          break;
 8016914:	e107      	b.n	8016b26 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801691c:	b2db      	uxtb	r3, r3
 801691e:	2b02      	cmp	r3, #2
 8016920:	d002      	beq.n	8016928 <USBD_StdEPReq+0x124>
 8016922:	2b03      	cmp	r3, #3
 8016924:	d016      	beq.n	8016954 <USBD_StdEPReq+0x150>
 8016926:	e04b      	b.n	80169c0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016928:	7bbb      	ldrb	r3, [r7, #14]
 801692a:	2b00      	cmp	r3, #0
 801692c:	d00d      	beq.n	801694a <USBD_StdEPReq+0x146>
 801692e:	7bbb      	ldrb	r3, [r7, #14]
 8016930:	2b80      	cmp	r3, #128	; 0x80
 8016932:	d00a      	beq.n	801694a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016934:	7bbb      	ldrb	r3, [r7, #14]
 8016936:	4619      	mov	r1, r3
 8016938:	6878      	ldr	r0, [r7, #4]
 801693a:	f004 f90f 	bl	801ab5c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801693e:	2180      	movs	r1, #128	; 0x80
 8016940:	6878      	ldr	r0, [r7, #4]
 8016942:	f004 f90b 	bl	801ab5c <USBD_LL_StallEP>
 8016946:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016948:	e040      	b.n	80169cc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801694a:	6839      	ldr	r1, [r7, #0]
 801694c:	6878      	ldr	r0, [r7, #4]
 801694e:	f000 fc3e 	bl	80171ce <USBD_CtlError>
              break;
 8016952:	e03b      	b.n	80169cc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016954:	683b      	ldr	r3, [r7, #0]
 8016956:	885b      	ldrh	r3, [r3, #2]
 8016958:	2b00      	cmp	r3, #0
 801695a:	d136      	bne.n	80169ca <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801695c:	7bbb      	ldrb	r3, [r7, #14]
 801695e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016962:	2b00      	cmp	r3, #0
 8016964:	d004      	beq.n	8016970 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016966:	7bbb      	ldrb	r3, [r7, #14]
 8016968:	4619      	mov	r1, r3
 801696a:	6878      	ldr	r0, [r7, #4]
 801696c:	f004 f915 	bl	801ab9a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8016970:	6878      	ldr	r0, [r7, #4]
 8016972:	f000 fcf7 	bl	8017364 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8016976:	7bbb      	ldrb	r3, [r7, #14]
 8016978:	4619      	mov	r1, r3
 801697a:	6878      	ldr	r0, [r7, #4]
 801697c:	f7ff fde2 	bl	8016544 <USBD_CoreFindEP>
 8016980:	4603      	mov	r3, r0
 8016982:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016984:	7b7b      	ldrb	r3, [r7, #13]
 8016986:	2bff      	cmp	r3, #255	; 0xff
 8016988:	d01f      	beq.n	80169ca <USBD_StdEPReq+0x1c6>
 801698a:	7b7b      	ldrb	r3, [r7, #13]
 801698c:	2b00      	cmp	r3, #0
 801698e:	d11c      	bne.n	80169ca <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8016990:	7b7a      	ldrb	r2, [r7, #13]
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8016998:	7b7a      	ldrb	r2, [r7, #13]
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	32ae      	adds	r2, #174	; 0xae
 801699e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80169a2:	689b      	ldr	r3, [r3, #8]
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d010      	beq.n	80169ca <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80169a8:	7b7a      	ldrb	r2, [r7, #13]
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	32ae      	adds	r2, #174	; 0xae
 80169ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80169b2:	689b      	ldr	r3, [r3, #8]
 80169b4:	6839      	ldr	r1, [r7, #0]
 80169b6:	6878      	ldr	r0, [r7, #4]
 80169b8:	4798      	blx	r3
 80169ba:	4603      	mov	r3, r0
 80169bc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80169be:	e004      	b.n	80169ca <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80169c0:	6839      	ldr	r1, [r7, #0]
 80169c2:	6878      	ldr	r0, [r7, #4]
 80169c4:	f000 fc03 	bl	80171ce <USBD_CtlError>
              break;
 80169c8:	e000      	b.n	80169cc <USBD_StdEPReq+0x1c8>
              break;
 80169ca:	bf00      	nop
          }
          break;
 80169cc:	e0ab      	b.n	8016b26 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80169d4:	b2db      	uxtb	r3, r3
 80169d6:	2b02      	cmp	r3, #2
 80169d8:	d002      	beq.n	80169e0 <USBD_StdEPReq+0x1dc>
 80169da:	2b03      	cmp	r3, #3
 80169dc:	d032      	beq.n	8016a44 <USBD_StdEPReq+0x240>
 80169de:	e097      	b.n	8016b10 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80169e0:	7bbb      	ldrb	r3, [r7, #14]
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d007      	beq.n	80169f6 <USBD_StdEPReq+0x1f2>
 80169e6:	7bbb      	ldrb	r3, [r7, #14]
 80169e8:	2b80      	cmp	r3, #128	; 0x80
 80169ea:	d004      	beq.n	80169f6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80169ec:	6839      	ldr	r1, [r7, #0]
 80169ee:	6878      	ldr	r0, [r7, #4]
 80169f0:	f000 fbed 	bl	80171ce <USBD_CtlError>
                break;
 80169f4:	e091      	b.n	8016b1a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80169f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	da0b      	bge.n	8016a16 <USBD_StdEPReq+0x212>
 80169fe:	7bbb      	ldrb	r3, [r7, #14]
 8016a00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016a04:	4613      	mov	r3, r2
 8016a06:	009b      	lsls	r3, r3, #2
 8016a08:	4413      	add	r3, r2
 8016a0a:	009b      	lsls	r3, r3, #2
 8016a0c:	3310      	adds	r3, #16
 8016a0e:	687a      	ldr	r2, [r7, #4]
 8016a10:	4413      	add	r3, r2
 8016a12:	3304      	adds	r3, #4
 8016a14:	e00b      	b.n	8016a2e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016a16:	7bbb      	ldrb	r3, [r7, #14]
 8016a18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016a1c:	4613      	mov	r3, r2
 8016a1e:	009b      	lsls	r3, r3, #2
 8016a20:	4413      	add	r3, r2
 8016a22:	009b      	lsls	r3, r3, #2
 8016a24:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016a28:	687a      	ldr	r2, [r7, #4]
 8016a2a:	4413      	add	r3, r2
 8016a2c:	3304      	adds	r3, #4
 8016a2e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8016a30:	68bb      	ldr	r3, [r7, #8]
 8016a32:	2200      	movs	r2, #0
 8016a34:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016a36:	68bb      	ldr	r3, [r7, #8]
 8016a38:	2202      	movs	r2, #2
 8016a3a:	4619      	mov	r1, r3
 8016a3c:	6878      	ldr	r0, [r7, #4]
 8016a3e:	f000 fc37 	bl	80172b0 <USBD_CtlSendData>
              break;
 8016a42:	e06a      	b.n	8016b1a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016a44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	da11      	bge.n	8016a70 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016a4c:	7bbb      	ldrb	r3, [r7, #14]
 8016a4e:	f003 020f 	and.w	r2, r3, #15
 8016a52:	6879      	ldr	r1, [r7, #4]
 8016a54:	4613      	mov	r3, r2
 8016a56:	009b      	lsls	r3, r3, #2
 8016a58:	4413      	add	r3, r2
 8016a5a:	009b      	lsls	r3, r3, #2
 8016a5c:	440b      	add	r3, r1
 8016a5e:	3324      	adds	r3, #36	; 0x24
 8016a60:	881b      	ldrh	r3, [r3, #0]
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	d117      	bne.n	8016a96 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016a66:	6839      	ldr	r1, [r7, #0]
 8016a68:	6878      	ldr	r0, [r7, #4]
 8016a6a:	f000 fbb0 	bl	80171ce <USBD_CtlError>
                  break;
 8016a6e:	e054      	b.n	8016b1a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016a70:	7bbb      	ldrb	r3, [r7, #14]
 8016a72:	f003 020f 	and.w	r2, r3, #15
 8016a76:	6879      	ldr	r1, [r7, #4]
 8016a78:	4613      	mov	r3, r2
 8016a7a:	009b      	lsls	r3, r3, #2
 8016a7c:	4413      	add	r3, r2
 8016a7e:	009b      	lsls	r3, r3, #2
 8016a80:	440b      	add	r3, r1
 8016a82:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8016a86:	881b      	ldrh	r3, [r3, #0]
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d104      	bne.n	8016a96 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016a8c:	6839      	ldr	r1, [r7, #0]
 8016a8e:	6878      	ldr	r0, [r7, #4]
 8016a90:	f000 fb9d 	bl	80171ce <USBD_CtlError>
                  break;
 8016a94:	e041      	b.n	8016b1a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016a96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	da0b      	bge.n	8016ab6 <USBD_StdEPReq+0x2b2>
 8016a9e:	7bbb      	ldrb	r3, [r7, #14]
 8016aa0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016aa4:	4613      	mov	r3, r2
 8016aa6:	009b      	lsls	r3, r3, #2
 8016aa8:	4413      	add	r3, r2
 8016aaa:	009b      	lsls	r3, r3, #2
 8016aac:	3310      	adds	r3, #16
 8016aae:	687a      	ldr	r2, [r7, #4]
 8016ab0:	4413      	add	r3, r2
 8016ab2:	3304      	adds	r3, #4
 8016ab4:	e00b      	b.n	8016ace <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016ab6:	7bbb      	ldrb	r3, [r7, #14]
 8016ab8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016abc:	4613      	mov	r3, r2
 8016abe:	009b      	lsls	r3, r3, #2
 8016ac0:	4413      	add	r3, r2
 8016ac2:	009b      	lsls	r3, r3, #2
 8016ac4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016ac8:	687a      	ldr	r2, [r7, #4]
 8016aca:	4413      	add	r3, r2
 8016acc:	3304      	adds	r3, #4
 8016ace:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016ad0:	7bbb      	ldrb	r3, [r7, #14]
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d002      	beq.n	8016adc <USBD_StdEPReq+0x2d8>
 8016ad6:	7bbb      	ldrb	r3, [r7, #14]
 8016ad8:	2b80      	cmp	r3, #128	; 0x80
 8016ada:	d103      	bne.n	8016ae4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8016adc:	68bb      	ldr	r3, [r7, #8]
 8016ade:	2200      	movs	r2, #0
 8016ae0:	601a      	str	r2, [r3, #0]
 8016ae2:	e00e      	b.n	8016b02 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016ae4:	7bbb      	ldrb	r3, [r7, #14]
 8016ae6:	4619      	mov	r1, r3
 8016ae8:	6878      	ldr	r0, [r7, #4]
 8016aea:	f004 f875 	bl	801abd8 <USBD_LL_IsStallEP>
 8016aee:	4603      	mov	r3, r0
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d003      	beq.n	8016afc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8016af4:	68bb      	ldr	r3, [r7, #8]
 8016af6:	2201      	movs	r2, #1
 8016af8:	601a      	str	r2, [r3, #0]
 8016afa:	e002      	b.n	8016b02 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8016afc:	68bb      	ldr	r3, [r7, #8]
 8016afe:	2200      	movs	r2, #0
 8016b00:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016b02:	68bb      	ldr	r3, [r7, #8]
 8016b04:	2202      	movs	r2, #2
 8016b06:	4619      	mov	r1, r3
 8016b08:	6878      	ldr	r0, [r7, #4]
 8016b0a:	f000 fbd1 	bl	80172b0 <USBD_CtlSendData>
              break;
 8016b0e:	e004      	b.n	8016b1a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8016b10:	6839      	ldr	r1, [r7, #0]
 8016b12:	6878      	ldr	r0, [r7, #4]
 8016b14:	f000 fb5b 	bl	80171ce <USBD_CtlError>
              break;
 8016b18:	bf00      	nop
          }
          break;
 8016b1a:	e004      	b.n	8016b26 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8016b1c:	6839      	ldr	r1, [r7, #0]
 8016b1e:	6878      	ldr	r0, [r7, #4]
 8016b20:	f000 fb55 	bl	80171ce <USBD_CtlError>
          break;
 8016b24:	bf00      	nop
      }
      break;
 8016b26:	e005      	b.n	8016b34 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8016b28:	6839      	ldr	r1, [r7, #0]
 8016b2a:	6878      	ldr	r0, [r7, #4]
 8016b2c:	f000 fb4f 	bl	80171ce <USBD_CtlError>
      break;
 8016b30:	e000      	b.n	8016b34 <USBD_StdEPReq+0x330>
      break;
 8016b32:	bf00      	nop
  }

  return ret;
 8016b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b36:	4618      	mov	r0, r3
 8016b38:	3710      	adds	r7, #16
 8016b3a:	46bd      	mov	sp, r7
 8016b3c:	bd80      	pop	{r7, pc}
	...

08016b40 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016b40:	b580      	push	{r7, lr}
 8016b42:	b084      	sub	sp, #16
 8016b44:	af00      	add	r7, sp, #0
 8016b46:	6078      	str	r0, [r7, #4]
 8016b48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016b4a:	2300      	movs	r3, #0
 8016b4c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8016b4e:	2300      	movs	r3, #0
 8016b50:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8016b52:	2300      	movs	r3, #0
 8016b54:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8016b56:	683b      	ldr	r3, [r7, #0]
 8016b58:	885b      	ldrh	r3, [r3, #2]
 8016b5a:	0a1b      	lsrs	r3, r3, #8
 8016b5c:	b29b      	uxth	r3, r3
 8016b5e:	3b01      	subs	r3, #1
 8016b60:	2b06      	cmp	r3, #6
 8016b62:	f200 8128 	bhi.w	8016db6 <USBD_GetDescriptor+0x276>
 8016b66:	a201      	add	r2, pc, #4	; (adr r2, 8016b6c <USBD_GetDescriptor+0x2c>)
 8016b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b6c:	08016b89 	.word	0x08016b89
 8016b70:	08016ba1 	.word	0x08016ba1
 8016b74:	08016be1 	.word	0x08016be1
 8016b78:	08016db7 	.word	0x08016db7
 8016b7c:	08016db7 	.word	0x08016db7
 8016b80:	08016d57 	.word	0x08016d57
 8016b84:	08016d83 	.word	0x08016d83
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016b8e:	681b      	ldr	r3, [r3, #0]
 8016b90:	687a      	ldr	r2, [r7, #4]
 8016b92:	7c12      	ldrb	r2, [r2, #16]
 8016b94:	f107 0108 	add.w	r1, r7, #8
 8016b98:	4610      	mov	r0, r2
 8016b9a:	4798      	blx	r3
 8016b9c:	60f8      	str	r0, [r7, #12]
      break;
 8016b9e:	e112      	b.n	8016dc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	7c1b      	ldrb	r3, [r3, #16]
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d10d      	bne.n	8016bc4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016bb0:	f107 0208 	add.w	r2, r7, #8
 8016bb4:	4610      	mov	r0, r2
 8016bb6:	4798      	blx	r3
 8016bb8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016bba:	68fb      	ldr	r3, [r7, #12]
 8016bbc:	3301      	adds	r3, #1
 8016bbe:	2202      	movs	r2, #2
 8016bc0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8016bc2:	e100      	b.n	8016dc6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016bcc:	f107 0208 	add.w	r2, r7, #8
 8016bd0:	4610      	mov	r0, r2
 8016bd2:	4798      	blx	r3
 8016bd4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016bd6:	68fb      	ldr	r3, [r7, #12]
 8016bd8:	3301      	adds	r3, #1
 8016bda:	2202      	movs	r2, #2
 8016bdc:	701a      	strb	r2, [r3, #0]
      break;
 8016bde:	e0f2      	b.n	8016dc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016be0:	683b      	ldr	r3, [r7, #0]
 8016be2:	885b      	ldrh	r3, [r3, #2]
 8016be4:	b2db      	uxtb	r3, r3
 8016be6:	2b05      	cmp	r3, #5
 8016be8:	f200 80ac 	bhi.w	8016d44 <USBD_GetDescriptor+0x204>
 8016bec:	a201      	add	r2, pc, #4	; (adr r2, 8016bf4 <USBD_GetDescriptor+0xb4>)
 8016bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016bf2:	bf00      	nop
 8016bf4:	08016c0d 	.word	0x08016c0d
 8016bf8:	08016c41 	.word	0x08016c41
 8016bfc:	08016c75 	.word	0x08016c75
 8016c00:	08016ca9 	.word	0x08016ca9
 8016c04:	08016cdd 	.word	0x08016cdd
 8016c08:	08016d11 	.word	0x08016d11
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c12:	685b      	ldr	r3, [r3, #4]
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d00b      	beq.n	8016c30 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c1e:	685b      	ldr	r3, [r3, #4]
 8016c20:	687a      	ldr	r2, [r7, #4]
 8016c22:	7c12      	ldrb	r2, [r2, #16]
 8016c24:	f107 0108 	add.w	r1, r7, #8
 8016c28:	4610      	mov	r0, r2
 8016c2a:	4798      	blx	r3
 8016c2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016c2e:	e091      	b.n	8016d54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016c30:	6839      	ldr	r1, [r7, #0]
 8016c32:	6878      	ldr	r0, [r7, #4]
 8016c34:	f000 facb 	bl	80171ce <USBD_CtlError>
            err++;
 8016c38:	7afb      	ldrb	r3, [r7, #11]
 8016c3a:	3301      	adds	r3, #1
 8016c3c:	72fb      	strb	r3, [r7, #11]
          break;
 8016c3e:	e089      	b.n	8016d54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c46:	689b      	ldr	r3, [r3, #8]
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d00b      	beq.n	8016c64 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c52:	689b      	ldr	r3, [r3, #8]
 8016c54:	687a      	ldr	r2, [r7, #4]
 8016c56:	7c12      	ldrb	r2, [r2, #16]
 8016c58:	f107 0108 	add.w	r1, r7, #8
 8016c5c:	4610      	mov	r0, r2
 8016c5e:	4798      	blx	r3
 8016c60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016c62:	e077      	b.n	8016d54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016c64:	6839      	ldr	r1, [r7, #0]
 8016c66:	6878      	ldr	r0, [r7, #4]
 8016c68:	f000 fab1 	bl	80171ce <USBD_CtlError>
            err++;
 8016c6c:	7afb      	ldrb	r3, [r7, #11]
 8016c6e:	3301      	adds	r3, #1
 8016c70:	72fb      	strb	r3, [r7, #11]
          break;
 8016c72:	e06f      	b.n	8016d54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c7a:	68db      	ldr	r3, [r3, #12]
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	d00b      	beq.n	8016c98 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c86:	68db      	ldr	r3, [r3, #12]
 8016c88:	687a      	ldr	r2, [r7, #4]
 8016c8a:	7c12      	ldrb	r2, [r2, #16]
 8016c8c:	f107 0108 	add.w	r1, r7, #8
 8016c90:	4610      	mov	r0, r2
 8016c92:	4798      	blx	r3
 8016c94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016c96:	e05d      	b.n	8016d54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016c98:	6839      	ldr	r1, [r7, #0]
 8016c9a:	6878      	ldr	r0, [r7, #4]
 8016c9c:	f000 fa97 	bl	80171ce <USBD_CtlError>
            err++;
 8016ca0:	7afb      	ldrb	r3, [r7, #11]
 8016ca2:	3301      	adds	r3, #1
 8016ca4:	72fb      	strb	r3, [r7, #11]
          break;
 8016ca6:	e055      	b.n	8016d54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016cae:	691b      	ldr	r3, [r3, #16]
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d00b      	beq.n	8016ccc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016cba:	691b      	ldr	r3, [r3, #16]
 8016cbc:	687a      	ldr	r2, [r7, #4]
 8016cbe:	7c12      	ldrb	r2, [r2, #16]
 8016cc0:	f107 0108 	add.w	r1, r7, #8
 8016cc4:	4610      	mov	r0, r2
 8016cc6:	4798      	blx	r3
 8016cc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016cca:	e043      	b.n	8016d54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016ccc:	6839      	ldr	r1, [r7, #0]
 8016cce:	6878      	ldr	r0, [r7, #4]
 8016cd0:	f000 fa7d 	bl	80171ce <USBD_CtlError>
            err++;
 8016cd4:	7afb      	ldrb	r3, [r7, #11]
 8016cd6:	3301      	adds	r3, #1
 8016cd8:	72fb      	strb	r3, [r7, #11]
          break;
 8016cda:	e03b      	b.n	8016d54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016ce2:	695b      	ldr	r3, [r3, #20]
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	d00b      	beq.n	8016d00 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016cee:	695b      	ldr	r3, [r3, #20]
 8016cf0:	687a      	ldr	r2, [r7, #4]
 8016cf2:	7c12      	ldrb	r2, [r2, #16]
 8016cf4:	f107 0108 	add.w	r1, r7, #8
 8016cf8:	4610      	mov	r0, r2
 8016cfa:	4798      	blx	r3
 8016cfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016cfe:	e029      	b.n	8016d54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016d00:	6839      	ldr	r1, [r7, #0]
 8016d02:	6878      	ldr	r0, [r7, #4]
 8016d04:	f000 fa63 	bl	80171ce <USBD_CtlError>
            err++;
 8016d08:	7afb      	ldrb	r3, [r7, #11]
 8016d0a:	3301      	adds	r3, #1
 8016d0c:	72fb      	strb	r3, [r7, #11]
          break;
 8016d0e:	e021      	b.n	8016d54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016d16:	699b      	ldr	r3, [r3, #24]
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	d00b      	beq.n	8016d34 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016d22:	699b      	ldr	r3, [r3, #24]
 8016d24:	687a      	ldr	r2, [r7, #4]
 8016d26:	7c12      	ldrb	r2, [r2, #16]
 8016d28:	f107 0108 	add.w	r1, r7, #8
 8016d2c:	4610      	mov	r0, r2
 8016d2e:	4798      	blx	r3
 8016d30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016d32:	e00f      	b.n	8016d54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016d34:	6839      	ldr	r1, [r7, #0]
 8016d36:	6878      	ldr	r0, [r7, #4]
 8016d38:	f000 fa49 	bl	80171ce <USBD_CtlError>
            err++;
 8016d3c:	7afb      	ldrb	r3, [r7, #11]
 8016d3e:	3301      	adds	r3, #1
 8016d40:	72fb      	strb	r3, [r7, #11]
          break;
 8016d42:	e007      	b.n	8016d54 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8016d44:	6839      	ldr	r1, [r7, #0]
 8016d46:	6878      	ldr	r0, [r7, #4]
 8016d48:	f000 fa41 	bl	80171ce <USBD_CtlError>
          err++;
 8016d4c:	7afb      	ldrb	r3, [r7, #11]
 8016d4e:	3301      	adds	r3, #1
 8016d50:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8016d52:	bf00      	nop
      }
      break;
 8016d54:	e037      	b.n	8016dc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016d56:	687b      	ldr	r3, [r7, #4]
 8016d58:	7c1b      	ldrb	r3, [r3, #16]
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	d109      	bne.n	8016d72 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016d66:	f107 0208 	add.w	r2, r7, #8
 8016d6a:	4610      	mov	r0, r2
 8016d6c:	4798      	blx	r3
 8016d6e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016d70:	e029      	b.n	8016dc6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8016d72:	6839      	ldr	r1, [r7, #0]
 8016d74:	6878      	ldr	r0, [r7, #4]
 8016d76:	f000 fa2a 	bl	80171ce <USBD_CtlError>
        err++;
 8016d7a:	7afb      	ldrb	r3, [r7, #11]
 8016d7c:	3301      	adds	r3, #1
 8016d7e:	72fb      	strb	r3, [r7, #11]
      break;
 8016d80:	e021      	b.n	8016dc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	7c1b      	ldrb	r3, [r3, #16]
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d10d      	bne.n	8016da6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016d92:	f107 0208 	add.w	r2, r7, #8
 8016d96:	4610      	mov	r0, r2
 8016d98:	4798      	blx	r3
 8016d9a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016d9c:	68fb      	ldr	r3, [r7, #12]
 8016d9e:	3301      	adds	r3, #1
 8016da0:	2207      	movs	r2, #7
 8016da2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016da4:	e00f      	b.n	8016dc6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8016da6:	6839      	ldr	r1, [r7, #0]
 8016da8:	6878      	ldr	r0, [r7, #4]
 8016daa:	f000 fa10 	bl	80171ce <USBD_CtlError>
        err++;
 8016dae:	7afb      	ldrb	r3, [r7, #11]
 8016db0:	3301      	adds	r3, #1
 8016db2:	72fb      	strb	r3, [r7, #11]
      break;
 8016db4:	e007      	b.n	8016dc6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8016db6:	6839      	ldr	r1, [r7, #0]
 8016db8:	6878      	ldr	r0, [r7, #4]
 8016dba:	f000 fa08 	bl	80171ce <USBD_CtlError>
      err++;
 8016dbe:	7afb      	ldrb	r3, [r7, #11]
 8016dc0:	3301      	adds	r3, #1
 8016dc2:	72fb      	strb	r3, [r7, #11]
      break;
 8016dc4:	bf00      	nop
  }

  if (err != 0U)
 8016dc6:	7afb      	ldrb	r3, [r7, #11]
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d11e      	bne.n	8016e0a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8016dcc:	683b      	ldr	r3, [r7, #0]
 8016dce:	88db      	ldrh	r3, [r3, #6]
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d016      	beq.n	8016e02 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8016dd4:	893b      	ldrh	r3, [r7, #8]
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	d00e      	beq.n	8016df8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8016dda:	683b      	ldr	r3, [r7, #0]
 8016ddc:	88da      	ldrh	r2, [r3, #6]
 8016dde:	893b      	ldrh	r3, [r7, #8]
 8016de0:	4293      	cmp	r3, r2
 8016de2:	bf28      	it	cs
 8016de4:	4613      	movcs	r3, r2
 8016de6:	b29b      	uxth	r3, r3
 8016de8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8016dea:	893b      	ldrh	r3, [r7, #8]
 8016dec:	461a      	mov	r2, r3
 8016dee:	68f9      	ldr	r1, [r7, #12]
 8016df0:	6878      	ldr	r0, [r7, #4]
 8016df2:	f000 fa5d 	bl	80172b0 <USBD_CtlSendData>
 8016df6:	e009      	b.n	8016e0c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8016df8:	6839      	ldr	r1, [r7, #0]
 8016dfa:	6878      	ldr	r0, [r7, #4]
 8016dfc:	f000 f9e7 	bl	80171ce <USBD_CtlError>
 8016e00:	e004      	b.n	8016e0c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8016e02:	6878      	ldr	r0, [r7, #4]
 8016e04:	f000 faae 	bl	8017364 <USBD_CtlSendStatus>
 8016e08:	e000      	b.n	8016e0c <USBD_GetDescriptor+0x2cc>
    return;
 8016e0a:	bf00      	nop
  }
}
 8016e0c:	3710      	adds	r7, #16
 8016e0e:	46bd      	mov	sp, r7
 8016e10:	bd80      	pop	{r7, pc}
 8016e12:	bf00      	nop

08016e14 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016e14:	b580      	push	{r7, lr}
 8016e16:	b084      	sub	sp, #16
 8016e18:	af00      	add	r7, sp, #0
 8016e1a:	6078      	str	r0, [r7, #4]
 8016e1c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8016e1e:	683b      	ldr	r3, [r7, #0]
 8016e20:	889b      	ldrh	r3, [r3, #4]
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	d131      	bne.n	8016e8a <USBD_SetAddress+0x76>
 8016e26:	683b      	ldr	r3, [r7, #0]
 8016e28:	88db      	ldrh	r3, [r3, #6]
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d12d      	bne.n	8016e8a <USBD_SetAddress+0x76>
 8016e2e:	683b      	ldr	r3, [r7, #0]
 8016e30:	885b      	ldrh	r3, [r3, #2]
 8016e32:	2b7f      	cmp	r3, #127	; 0x7f
 8016e34:	d829      	bhi.n	8016e8a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8016e36:	683b      	ldr	r3, [r7, #0]
 8016e38:	885b      	ldrh	r3, [r3, #2]
 8016e3a:	b2db      	uxtb	r3, r3
 8016e3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016e40:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016e48:	b2db      	uxtb	r3, r3
 8016e4a:	2b03      	cmp	r3, #3
 8016e4c:	d104      	bne.n	8016e58 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8016e4e:	6839      	ldr	r1, [r7, #0]
 8016e50:	6878      	ldr	r0, [r7, #4]
 8016e52:	f000 f9bc 	bl	80171ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016e56:	e01d      	b.n	8016e94 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	7bfa      	ldrb	r2, [r7, #15]
 8016e5c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016e60:	7bfb      	ldrb	r3, [r7, #15]
 8016e62:	4619      	mov	r1, r3
 8016e64:	6878      	ldr	r0, [r7, #4]
 8016e66:	f003 fee3 	bl	801ac30 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8016e6a:	6878      	ldr	r0, [r7, #4]
 8016e6c:	f000 fa7a 	bl	8017364 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016e70:	7bfb      	ldrb	r3, [r7, #15]
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	d004      	beq.n	8016e80 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	2202      	movs	r2, #2
 8016e7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016e7e:	e009      	b.n	8016e94 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	2201      	movs	r2, #1
 8016e84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016e88:	e004      	b.n	8016e94 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8016e8a:	6839      	ldr	r1, [r7, #0]
 8016e8c:	6878      	ldr	r0, [r7, #4]
 8016e8e:	f000 f99e 	bl	80171ce <USBD_CtlError>
  }
}
 8016e92:	bf00      	nop
 8016e94:	bf00      	nop
 8016e96:	3710      	adds	r7, #16
 8016e98:	46bd      	mov	sp, r7
 8016e9a:	bd80      	pop	{r7, pc}

08016e9c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016e9c:	b580      	push	{r7, lr}
 8016e9e:	b084      	sub	sp, #16
 8016ea0:	af00      	add	r7, sp, #0
 8016ea2:	6078      	str	r0, [r7, #4]
 8016ea4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016ea6:	2300      	movs	r3, #0
 8016ea8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8016eaa:	683b      	ldr	r3, [r7, #0]
 8016eac:	885b      	ldrh	r3, [r3, #2]
 8016eae:	b2da      	uxtb	r2, r3
 8016eb0:	4b4e      	ldr	r3, [pc, #312]	; (8016fec <USBD_SetConfig+0x150>)
 8016eb2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016eb4:	4b4d      	ldr	r3, [pc, #308]	; (8016fec <USBD_SetConfig+0x150>)
 8016eb6:	781b      	ldrb	r3, [r3, #0]
 8016eb8:	2b01      	cmp	r3, #1
 8016eba:	d905      	bls.n	8016ec8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8016ebc:	6839      	ldr	r1, [r7, #0]
 8016ebe:	6878      	ldr	r0, [r7, #4]
 8016ec0:	f000 f985 	bl	80171ce <USBD_CtlError>
    return USBD_FAIL;
 8016ec4:	2303      	movs	r3, #3
 8016ec6:	e08c      	b.n	8016fe2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016ece:	b2db      	uxtb	r3, r3
 8016ed0:	2b02      	cmp	r3, #2
 8016ed2:	d002      	beq.n	8016eda <USBD_SetConfig+0x3e>
 8016ed4:	2b03      	cmp	r3, #3
 8016ed6:	d029      	beq.n	8016f2c <USBD_SetConfig+0x90>
 8016ed8:	e075      	b.n	8016fc6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8016eda:	4b44      	ldr	r3, [pc, #272]	; (8016fec <USBD_SetConfig+0x150>)
 8016edc:	781b      	ldrb	r3, [r3, #0]
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d020      	beq.n	8016f24 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8016ee2:	4b42      	ldr	r3, [pc, #264]	; (8016fec <USBD_SetConfig+0x150>)
 8016ee4:	781b      	ldrb	r3, [r3, #0]
 8016ee6:	461a      	mov	r2, r3
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016eec:	4b3f      	ldr	r3, [pc, #252]	; (8016fec <USBD_SetConfig+0x150>)
 8016eee:	781b      	ldrb	r3, [r3, #0]
 8016ef0:	4619      	mov	r1, r3
 8016ef2:	6878      	ldr	r0, [r7, #4]
 8016ef4:	f7fe ffe1 	bl	8015eba <USBD_SetClassConfig>
 8016ef8:	4603      	mov	r3, r0
 8016efa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8016efc:	7bfb      	ldrb	r3, [r7, #15]
 8016efe:	2b00      	cmp	r3, #0
 8016f00:	d008      	beq.n	8016f14 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8016f02:	6839      	ldr	r1, [r7, #0]
 8016f04:	6878      	ldr	r0, [r7, #4]
 8016f06:	f000 f962 	bl	80171ce <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	2202      	movs	r2, #2
 8016f0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016f12:	e065      	b.n	8016fe0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016f14:	6878      	ldr	r0, [r7, #4]
 8016f16:	f000 fa25 	bl	8017364 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	2203      	movs	r2, #3
 8016f1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016f22:	e05d      	b.n	8016fe0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016f24:	6878      	ldr	r0, [r7, #4]
 8016f26:	f000 fa1d 	bl	8017364 <USBD_CtlSendStatus>
      break;
 8016f2a:	e059      	b.n	8016fe0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8016f2c:	4b2f      	ldr	r3, [pc, #188]	; (8016fec <USBD_SetConfig+0x150>)
 8016f2e:	781b      	ldrb	r3, [r3, #0]
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d112      	bne.n	8016f5a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	2202      	movs	r2, #2
 8016f38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8016f3c:	4b2b      	ldr	r3, [pc, #172]	; (8016fec <USBD_SetConfig+0x150>)
 8016f3e:	781b      	ldrb	r3, [r3, #0]
 8016f40:	461a      	mov	r2, r3
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016f46:	4b29      	ldr	r3, [pc, #164]	; (8016fec <USBD_SetConfig+0x150>)
 8016f48:	781b      	ldrb	r3, [r3, #0]
 8016f4a:	4619      	mov	r1, r3
 8016f4c:	6878      	ldr	r0, [r7, #4]
 8016f4e:	f7fe ffd0 	bl	8015ef2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8016f52:	6878      	ldr	r0, [r7, #4]
 8016f54:	f000 fa06 	bl	8017364 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016f58:	e042      	b.n	8016fe0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8016f5a:	4b24      	ldr	r3, [pc, #144]	; (8016fec <USBD_SetConfig+0x150>)
 8016f5c:	781b      	ldrb	r3, [r3, #0]
 8016f5e:	461a      	mov	r2, r3
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	685b      	ldr	r3, [r3, #4]
 8016f64:	429a      	cmp	r2, r3
 8016f66:	d02a      	beq.n	8016fbe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	685b      	ldr	r3, [r3, #4]
 8016f6c:	b2db      	uxtb	r3, r3
 8016f6e:	4619      	mov	r1, r3
 8016f70:	6878      	ldr	r0, [r7, #4]
 8016f72:	f7fe ffbe 	bl	8015ef2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8016f76:	4b1d      	ldr	r3, [pc, #116]	; (8016fec <USBD_SetConfig+0x150>)
 8016f78:	781b      	ldrb	r3, [r3, #0]
 8016f7a:	461a      	mov	r2, r3
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016f80:	4b1a      	ldr	r3, [pc, #104]	; (8016fec <USBD_SetConfig+0x150>)
 8016f82:	781b      	ldrb	r3, [r3, #0]
 8016f84:	4619      	mov	r1, r3
 8016f86:	6878      	ldr	r0, [r7, #4]
 8016f88:	f7fe ff97 	bl	8015eba <USBD_SetClassConfig>
 8016f8c:	4603      	mov	r3, r0
 8016f8e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8016f90:	7bfb      	ldrb	r3, [r7, #15]
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d00f      	beq.n	8016fb6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8016f96:	6839      	ldr	r1, [r7, #0]
 8016f98:	6878      	ldr	r0, [r7, #4]
 8016f9a:	f000 f918 	bl	80171ce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	685b      	ldr	r3, [r3, #4]
 8016fa2:	b2db      	uxtb	r3, r3
 8016fa4:	4619      	mov	r1, r3
 8016fa6:	6878      	ldr	r0, [r7, #4]
 8016fa8:	f7fe ffa3 	bl	8015ef2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	2202      	movs	r2, #2
 8016fb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016fb4:	e014      	b.n	8016fe0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016fb6:	6878      	ldr	r0, [r7, #4]
 8016fb8:	f000 f9d4 	bl	8017364 <USBD_CtlSendStatus>
      break;
 8016fbc:	e010      	b.n	8016fe0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016fbe:	6878      	ldr	r0, [r7, #4]
 8016fc0:	f000 f9d0 	bl	8017364 <USBD_CtlSendStatus>
      break;
 8016fc4:	e00c      	b.n	8016fe0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8016fc6:	6839      	ldr	r1, [r7, #0]
 8016fc8:	6878      	ldr	r0, [r7, #4]
 8016fca:	f000 f900 	bl	80171ce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016fce:	4b07      	ldr	r3, [pc, #28]	; (8016fec <USBD_SetConfig+0x150>)
 8016fd0:	781b      	ldrb	r3, [r3, #0]
 8016fd2:	4619      	mov	r1, r3
 8016fd4:	6878      	ldr	r0, [r7, #4]
 8016fd6:	f7fe ff8c 	bl	8015ef2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8016fda:	2303      	movs	r3, #3
 8016fdc:	73fb      	strb	r3, [r7, #15]
      break;
 8016fde:	bf00      	nop
  }

  return ret;
 8016fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8016fe2:	4618      	mov	r0, r3
 8016fe4:	3710      	adds	r7, #16
 8016fe6:	46bd      	mov	sp, r7
 8016fe8:	bd80      	pop	{r7, pc}
 8016fea:	bf00      	nop
 8016fec:	24003cf8 	.word	0x24003cf8

08016ff0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016ff0:	b580      	push	{r7, lr}
 8016ff2:	b082      	sub	sp, #8
 8016ff4:	af00      	add	r7, sp, #0
 8016ff6:	6078      	str	r0, [r7, #4]
 8016ff8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8016ffa:	683b      	ldr	r3, [r7, #0]
 8016ffc:	88db      	ldrh	r3, [r3, #6]
 8016ffe:	2b01      	cmp	r3, #1
 8017000:	d004      	beq.n	801700c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8017002:	6839      	ldr	r1, [r7, #0]
 8017004:	6878      	ldr	r0, [r7, #4]
 8017006:	f000 f8e2 	bl	80171ce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801700a:	e023      	b.n	8017054 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017012:	b2db      	uxtb	r3, r3
 8017014:	2b02      	cmp	r3, #2
 8017016:	dc02      	bgt.n	801701e <USBD_GetConfig+0x2e>
 8017018:	2b00      	cmp	r3, #0
 801701a:	dc03      	bgt.n	8017024 <USBD_GetConfig+0x34>
 801701c:	e015      	b.n	801704a <USBD_GetConfig+0x5a>
 801701e:	2b03      	cmp	r3, #3
 8017020:	d00b      	beq.n	801703a <USBD_GetConfig+0x4a>
 8017022:	e012      	b.n	801704a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	2200      	movs	r2, #0
 8017028:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	3308      	adds	r3, #8
 801702e:	2201      	movs	r2, #1
 8017030:	4619      	mov	r1, r3
 8017032:	6878      	ldr	r0, [r7, #4]
 8017034:	f000 f93c 	bl	80172b0 <USBD_CtlSendData>
        break;
 8017038:	e00c      	b.n	8017054 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	3304      	adds	r3, #4
 801703e:	2201      	movs	r2, #1
 8017040:	4619      	mov	r1, r3
 8017042:	6878      	ldr	r0, [r7, #4]
 8017044:	f000 f934 	bl	80172b0 <USBD_CtlSendData>
        break;
 8017048:	e004      	b.n	8017054 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801704a:	6839      	ldr	r1, [r7, #0]
 801704c:	6878      	ldr	r0, [r7, #4]
 801704e:	f000 f8be 	bl	80171ce <USBD_CtlError>
        break;
 8017052:	bf00      	nop
}
 8017054:	bf00      	nop
 8017056:	3708      	adds	r7, #8
 8017058:	46bd      	mov	sp, r7
 801705a:	bd80      	pop	{r7, pc}

0801705c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801705c:	b580      	push	{r7, lr}
 801705e:	b082      	sub	sp, #8
 8017060:	af00      	add	r7, sp, #0
 8017062:	6078      	str	r0, [r7, #4]
 8017064:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801706c:	b2db      	uxtb	r3, r3
 801706e:	3b01      	subs	r3, #1
 8017070:	2b02      	cmp	r3, #2
 8017072:	d81e      	bhi.n	80170b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8017074:	683b      	ldr	r3, [r7, #0]
 8017076:	88db      	ldrh	r3, [r3, #6]
 8017078:	2b02      	cmp	r3, #2
 801707a:	d004      	beq.n	8017086 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801707c:	6839      	ldr	r1, [r7, #0]
 801707e:	6878      	ldr	r0, [r7, #4]
 8017080:	f000 f8a5 	bl	80171ce <USBD_CtlError>
        break;
 8017084:	e01a      	b.n	80170bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	2201      	movs	r2, #1
 801708a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8017092:	2b00      	cmp	r3, #0
 8017094:	d005      	beq.n	80170a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	68db      	ldr	r3, [r3, #12]
 801709a:	f043 0202 	orr.w	r2, r3, #2
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	330c      	adds	r3, #12
 80170a6:	2202      	movs	r2, #2
 80170a8:	4619      	mov	r1, r3
 80170aa:	6878      	ldr	r0, [r7, #4]
 80170ac:	f000 f900 	bl	80172b0 <USBD_CtlSendData>
      break;
 80170b0:	e004      	b.n	80170bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80170b2:	6839      	ldr	r1, [r7, #0]
 80170b4:	6878      	ldr	r0, [r7, #4]
 80170b6:	f000 f88a 	bl	80171ce <USBD_CtlError>
      break;
 80170ba:	bf00      	nop
  }
}
 80170bc:	bf00      	nop
 80170be:	3708      	adds	r7, #8
 80170c0:	46bd      	mov	sp, r7
 80170c2:	bd80      	pop	{r7, pc}

080170c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80170c4:	b580      	push	{r7, lr}
 80170c6:	b082      	sub	sp, #8
 80170c8:	af00      	add	r7, sp, #0
 80170ca:	6078      	str	r0, [r7, #4]
 80170cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80170ce:	683b      	ldr	r3, [r7, #0]
 80170d0:	885b      	ldrh	r3, [r3, #2]
 80170d2:	2b01      	cmp	r3, #1
 80170d4:	d107      	bne.n	80170e6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	2201      	movs	r2, #1
 80170da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80170de:	6878      	ldr	r0, [r7, #4]
 80170e0:	f000 f940 	bl	8017364 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80170e4:	e013      	b.n	801710e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80170e6:	683b      	ldr	r3, [r7, #0]
 80170e8:	885b      	ldrh	r3, [r3, #2]
 80170ea:	2b02      	cmp	r3, #2
 80170ec:	d10b      	bne.n	8017106 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80170ee:	683b      	ldr	r3, [r7, #0]
 80170f0:	889b      	ldrh	r3, [r3, #4]
 80170f2:	0a1b      	lsrs	r3, r3, #8
 80170f4:	b29b      	uxth	r3, r3
 80170f6:	b2da      	uxtb	r2, r3
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80170fe:	6878      	ldr	r0, [r7, #4]
 8017100:	f000 f930 	bl	8017364 <USBD_CtlSendStatus>
}
 8017104:	e003      	b.n	801710e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8017106:	6839      	ldr	r1, [r7, #0]
 8017108:	6878      	ldr	r0, [r7, #4]
 801710a:	f000 f860 	bl	80171ce <USBD_CtlError>
}
 801710e:	bf00      	nop
 8017110:	3708      	adds	r7, #8
 8017112:	46bd      	mov	sp, r7
 8017114:	bd80      	pop	{r7, pc}

08017116 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017116:	b580      	push	{r7, lr}
 8017118:	b082      	sub	sp, #8
 801711a:	af00      	add	r7, sp, #0
 801711c:	6078      	str	r0, [r7, #4]
 801711e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017126:	b2db      	uxtb	r3, r3
 8017128:	3b01      	subs	r3, #1
 801712a:	2b02      	cmp	r3, #2
 801712c:	d80b      	bhi.n	8017146 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801712e:	683b      	ldr	r3, [r7, #0]
 8017130:	885b      	ldrh	r3, [r3, #2]
 8017132:	2b01      	cmp	r3, #1
 8017134:	d10c      	bne.n	8017150 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	2200      	movs	r2, #0
 801713a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801713e:	6878      	ldr	r0, [r7, #4]
 8017140:	f000 f910 	bl	8017364 <USBD_CtlSendStatus>
      }
      break;
 8017144:	e004      	b.n	8017150 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8017146:	6839      	ldr	r1, [r7, #0]
 8017148:	6878      	ldr	r0, [r7, #4]
 801714a:	f000 f840 	bl	80171ce <USBD_CtlError>
      break;
 801714e:	e000      	b.n	8017152 <USBD_ClrFeature+0x3c>
      break;
 8017150:	bf00      	nop
  }
}
 8017152:	bf00      	nop
 8017154:	3708      	adds	r7, #8
 8017156:	46bd      	mov	sp, r7
 8017158:	bd80      	pop	{r7, pc}

0801715a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801715a:	b580      	push	{r7, lr}
 801715c:	b084      	sub	sp, #16
 801715e:	af00      	add	r7, sp, #0
 8017160:	6078      	str	r0, [r7, #4]
 8017162:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8017164:	683b      	ldr	r3, [r7, #0]
 8017166:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8017168:	68fb      	ldr	r3, [r7, #12]
 801716a:	781a      	ldrb	r2, [r3, #0]
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	3301      	adds	r3, #1
 8017174:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8017176:	68fb      	ldr	r3, [r7, #12]
 8017178:	781a      	ldrb	r2, [r3, #0]
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801717e:	68fb      	ldr	r3, [r7, #12]
 8017180:	3301      	adds	r3, #1
 8017182:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8017184:	68f8      	ldr	r0, [r7, #12]
 8017186:	f7ff fa41 	bl	801660c <SWAPBYTE>
 801718a:	4603      	mov	r3, r0
 801718c:	461a      	mov	r2, r3
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	3301      	adds	r3, #1
 8017196:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017198:	68fb      	ldr	r3, [r7, #12]
 801719a:	3301      	adds	r3, #1
 801719c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801719e:	68f8      	ldr	r0, [r7, #12]
 80171a0:	f7ff fa34 	bl	801660c <SWAPBYTE>
 80171a4:	4603      	mov	r3, r0
 80171a6:	461a      	mov	r2, r3
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80171ac:	68fb      	ldr	r3, [r7, #12]
 80171ae:	3301      	adds	r3, #1
 80171b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80171b2:	68fb      	ldr	r3, [r7, #12]
 80171b4:	3301      	adds	r3, #1
 80171b6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80171b8:	68f8      	ldr	r0, [r7, #12]
 80171ba:	f7ff fa27 	bl	801660c <SWAPBYTE>
 80171be:	4603      	mov	r3, r0
 80171c0:	461a      	mov	r2, r3
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	80da      	strh	r2, [r3, #6]
}
 80171c6:	bf00      	nop
 80171c8:	3710      	adds	r7, #16
 80171ca:	46bd      	mov	sp, r7
 80171cc:	bd80      	pop	{r7, pc}

080171ce <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80171ce:	b580      	push	{r7, lr}
 80171d0:	b082      	sub	sp, #8
 80171d2:	af00      	add	r7, sp, #0
 80171d4:	6078      	str	r0, [r7, #4]
 80171d6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80171d8:	2180      	movs	r1, #128	; 0x80
 80171da:	6878      	ldr	r0, [r7, #4]
 80171dc:	f003 fcbe 	bl	801ab5c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80171e0:	2100      	movs	r1, #0
 80171e2:	6878      	ldr	r0, [r7, #4]
 80171e4:	f003 fcba 	bl	801ab5c <USBD_LL_StallEP>
}
 80171e8:	bf00      	nop
 80171ea:	3708      	adds	r7, #8
 80171ec:	46bd      	mov	sp, r7
 80171ee:	bd80      	pop	{r7, pc}

080171f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80171f0:	b580      	push	{r7, lr}
 80171f2:	b086      	sub	sp, #24
 80171f4:	af00      	add	r7, sp, #0
 80171f6:	60f8      	str	r0, [r7, #12]
 80171f8:	60b9      	str	r1, [r7, #8]
 80171fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80171fc:	2300      	movs	r3, #0
 80171fe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8017200:	68fb      	ldr	r3, [r7, #12]
 8017202:	2b00      	cmp	r3, #0
 8017204:	d036      	beq.n	8017274 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8017206:	68fb      	ldr	r3, [r7, #12]
 8017208:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801720a:	6938      	ldr	r0, [r7, #16]
 801720c:	f000 f836 	bl	801727c <USBD_GetLen>
 8017210:	4603      	mov	r3, r0
 8017212:	3301      	adds	r3, #1
 8017214:	b29b      	uxth	r3, r3
 8017216:	005b      	lsls	r3, r3, #1
 8017218:	b29a      	uxth	r2, r3
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801721e:	7dfb      	ldrb	r3, [r7, #23]
 8017220:	68ba      	ldr	r2, [r7, #8]
 8017222:	4413      	add	r3, r2
 8017224:	687a      	ldr	r2, [r7, #4]
 8017226:	7812      	ldrb	r2, [r2, #0]
 8017228:	701a      	strb	r2, [r3, #0]
  idx++;
 801722a:	7dfb      	ldrb	r3, [r7, #23]
 801722c:	3301      	adds	r3, #1
 801722e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8017230:	7dfb      	ldrb	r3, [r7, #23]
 8017232:	68ba      	ldr	r2, [r7, #8]
 8017234:	4413      	add	r3, r2
 8017236:	2203      	movs	r2, #3
 8017238:	701a      	strb	r2, [r3, #0]
  idx++;
 801723a:	7dfb      	ldrb	r3, [r7, #23]
 801723c:	3301      	adds	r3, #1
 801723e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8017240:	e013      	b.n	801726a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8017242:	7dfb      	ldrb	r3, [r7, #23]
 8017244:	68ba      	ldr	r2, [r7, #8]
 8017246:	4413      	add	r3, r2
 8017248:	693a      	ldr	r2, [r7, #16]
 801724a:	7812      	ldrb	r2, [r2, #0]
 801724c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801724e:	693b      	ldr	r3, [r7, #16]
 8017250:	3301      	adds	r3, #1
 8017252:	613b      	str	r3, [r7, #16]
    idx++;
 8017254:	7dfb      	ldrb	r3, [r7, #23]
 8017256:	3301      	adds	r3, #1
 8017258:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801725a:	7dfb      	ldrb	r3, [r7, #23]
 801725c:	68ba      	ldr	r2, [r7, #8]
 801725e:	4413      	add	r3, r2
 8017260:	2200      	movs	r2, #0
 8017262:	701a      	strb	r2, [r3, #0]
    idx++;
 8017264:	7dfb      	ldrb	r3, [r7, #23]
 8017266:	3301      	adds	r3, #1
 8017268:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801726a:	693b      	ldr	r3, [r7, #16]
 801726c:	781b      	ldrb	r3, [r3, #0]
 801726e:	2b00      	cmp	r3, #0
 8017270:	d1e7      	bne.n	8017242 <USBD_GetString+0x52>
 8017272:	e000      	b.n	8017276 <USBD_GetString+0x86>
    return;
 8017274:	bf00      	nop
  }
}
 8017276:	3718      	adds	r7, #24
 8017278:	46bd      	mov	sp, r7
 801727a:	bd80      	pop	{r7, pc}

0801727c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801727c:	b480      	push	{r7}
 801727e:	b085      	sub	sp, #20
 8017280:	af00      	add	r7, sp, #0
 8017282:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8017284:	2300      	movs	r3, #0
 8017286:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801728c:	e005      	b.n	801729a <USBD_GetLen+0x1e>
  {
    len++;
 801728e:	7bfb      	ldrb	r3, [r7, #15]
 8017290:	3301      	adds	r3, #1
 8017292:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8017294:	68bb      	ldr	r3, [r7, #8]
 8017296:	3301      	adds	r3, #1
 8017298:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801729a:	68bb      	ldr	r3, [r7, #8]
 801729c:	781b      	ldrb	r3, [r3, #0]
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d1f5      	bne.n	801728e <USBD_GetLen+0x12>
  }

  return len;
 80172a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80172a4:	4618      	mov	r0, r3
 80172a6:	3714      	adds	r7, #20
 80172a8:	46bd      	mov	sp, r7
 80172aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172ae:	4770      	bx	lr

080172b0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80172b0:	b580      	push	{r7, lr}
 80172b2:	b084      	sub	sp, #16
 80172b4:	af00      	add	r7, sp, #0
 80172b6:	60f8      	str	r0, [r7, #12]
 80172b8:	60b9      	str	r1, [r7, #8]
 80172ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80172bc:	68fb      	ldr	r3, [r7, #12]
 80172be:	2202      	movs	r2, #2
 80172c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80172c4:	68fb      	ldr	r3, [r7, #12]
 80172c6:	687a      	ldr	r2, [r7, #4]
 80172c8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80172ca:	68fb      	ldr	r3, [r7, #12]
 80172cc:	687a      	ldr	r2, [r7, #4]
 80172ce:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	68ba      	ldr	r2, [r7, #8]
 80172d4:	2100      	movs	r1, #0
 80172d6:	68f8      	ldr	r0, [r7, #12]
 80172d8:	f003 fcc9 	bl	801ac6e <USBD_LL_Transmit>

  return USBD_OK;
 80172dc:	2300      	movs	r3, #0
}
 80172de:	4618      	mov	r0, r3
 80172e0:	3710      	adds	r7, #16
 80172e2:	46bd      	mov	sp, r7
 80172e4:	bd80      	pop	{r7, pc}

080172e6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80172e6:	b580      	push	{r7, lr}
 80172e8:	b084      	sub	sp, #16
 80172ea:	af00      	add	r7, sp, #0
 80172ec:	60f8      	str	r0, [r7, #12]
 80172ee:	60b9      	str	r1, [r7, #8]
 80172f0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	68ba      	ldr	r2, [r7, #8]
 80172f6:	2100      	movs	r1, #0
 80172f8:	68f8      	ldr	r0, [r7, #12]
 80172fa:	f003 fcb8 	bl	801ac6e <USBD_LL_Transmit>

  return USBD_OK;
 80172fe:	2300      	movs	r3, #0
}
 8017300:	4618      	mov	r0, r3
 8017302:	3710      	adds	r7, #16
 8017304:	46bd      	mov	sp, r7
 8017306:	bd80      	pop	{r7, pc}

08017308 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8017308:	b580      	push	{r7, lr}
 801730a:	b084      	sub	sp, #16
 801730c:	af00      	add	r7, sp, #0
 801730e:	60f8      	str	r0, [r7, #12]
 8017310:	60b9      	str	r1, [r7, #8]
 8017312:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8017314:	68fb      	ldr	r3, [r7, #12]
 8017316:	2203      	movs	r2, #3
 8017318:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801731c:	68fb      	ldr	r3, [r7, #12]
 801731e:	687a      	ldr	r2, [r7, #4]
 8017320:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8017324:	68fb      	ldr	r3, [r7, #12]
 8017326:	687a      	ldr	r2, [r7, #4]
 8017328:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	68ba      	ldr	r2, [r7, #8]
 8017330:	2100      	movs	r1, #0
 8017332:	68f8      	ldr	r0, [r7, #12]
 8017334:	f003 fcbc 	bl	801acb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017338:	2300      	movs	r3, #0
}
 801733a:	4618      	mov	r0, r3
 801733c:	3710      	adds	r7, #16
 801733e:	46bd      	mov	sp, r7
 8017340:	bd80      	pop	{r7, pc}

08017342 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8017342:	b580      	push	{r7, lr}
 8017344:	b084      	sub	sp, #16
 8017346:	af00      	add	r7, sp, #0
 8017348:	60f8      	str	r0, [r7, #12]
 801734a:	60b9      	str	r1, [r7, #8]
 801734c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	68ba      	ldr	r2, [r7, #8]
 8017352:	2100      	movs	r1, #0
 8017354:	68f8      	ldr	r0, [r7, #12]
 8017356:	f003 fcab 	bl	801acb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801735a:	2300      	movs	r3, #0
}
 801735c:	4618      	mov	r0, r3
 801735e:	3710      	adds	r7, #16
 8017360:	46bd      	mov	sp, r7
 8017362:	bd80      	pop	{r7, pc}

08017364 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8017364:	b580      	push	{r7, lr}
 8017366:	b082      	sub	sp, #8
 8017368:	af00      	add	r7, sp, #0
 801736a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	2204      	movs	r2, #4
 8017370:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8017374:	2300      	movs	r3, #0
 8017376:	2200      	movs	r2, #0
 8017378:	2100      	movs	r1, #0
 801737a:	6878      	ldr	r0, [r7, #4]
 801737c:	f003 fc77 	bl	801ac6e <USBD_LL_Transmit>

  return USBD_OK;
 8017380:	2300      	movs	r3, #0
}
 8017382:	4618      	mov	r0, r3
 8017384:	3708      	adds	r7, #8
 8017386:	46bd      	mov	sp, r7
 8017388:	bd80      	pop	{r7, pc}

0801738a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801738a:	b580      	push	{r7, lr}
 801738c:	b082      	sub	sp, #8
 801738e:	af00      	add	r7, sp, #0
 8017390:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	2205      	movs	r2, #5
 8017396:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801739a:	2300      	movs	r3, #0
 801739c:	2200      	movs	r2, #0
 801739e:	2100      	movs	r1, #0
 80173a0:	6878      	ldr	r0, [r7, #4]
 80173a2:	f003 fc85 	bl	801acb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80173a6:	2300      	movs	r3, #0
}
 80173a8:	4618      	mov	r0, r3
 80173aa:	3708      	adds	r7, #8
 80173ac:	46bd      	mov	sp, r7
 80173ae:	bd80      	pop	{r7, pc}

080173b0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80173b0:	b580      	push	{r7, lr}
 80173b2:	b084      	sub	sp, #16
 80173b4:	af00      	add	r7, sp, #0
 80173b6:	4603      	mov	r3, r0
 80173b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80173ba:	79fb      	ldrb	r3, [r7, #7]
 80173bc:	4a08      	ldr	r2, [pc, #32]	; (80173e0 <disk_status+0x30>)
 80173be:	009b      	lsls	r3, r3, #2
 80173c0:	4413      	add	r3, r2
 80173c2:	685b      	ldr	r3, [r3, #4]
 80173c4:	685b      	ldr	r3, [r3, #4]
 80173c6:	79fa      	ldrb	r2, [r7, #7]
 80173c8:	4905      	ldr	r1, [pc, #20]	; (80173e0 <disk_status+0x30>)
 80173ca:	440a      	add	r2, r1
 80173cc:	7a12      	ldrb	r2, [r2, #8]
 80173ce:	4610      	mov	r0, r2
 80173d0:	4798      	blx	r3
 80173d2:	4603      	mov	r3, r0
 80173d4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80173d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80173d8:	4618      	mov	r0, r3
 80173da:	3710      	adds	r7, #16
 80173dc:	46bd      	mov	sp, r7
 80173de:	bd80      	pop	{r7, pc}
 80173e0:	24003f24 	.word	0x24003f24

080173e4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80173e4:	b580      	push	{r7, lr}
 80173e6:	b084      	sub	sp, #16
 80173e8:	af00      	add	r7, sp, #0
 80173ea:	4603      	mov	r3, r0
 80173ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80173ee:	2300      	movs	r3, #0
 80173f0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80173f2:	79fb      	ldrb	r3, [r7, #7]
 80173f4:	4a0d      	ldr	r2, [pc, #52]	; (801742c <disk_initialize+0x48>)
 80173f6:	5cd3      	ldrb	r3, [r2, r3]
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	d111      	bne.n	8017420 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80173fc:	79fb      	ldrb	r3, [r7, #7]
 80173fe:	4a0b      	ldr	r2, [pc, #44]	; (801742c <disk_initialize+0x48>)
 8017400:	2101      	movs	r1, #1
 8017402:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8017404:	79fb      	ldrb	r3, [r7, #7]
 8017406:	4a09      	ldr	r2, [pc, #36]	; (801742c <disk_initialize+0x48>)
 8017408:	009b      	lsls	r3, r3, #2
 801740a:	4413      	add	r3, r2
 801740c:	685b      	ldr	r3, [r3, #4]
 801740e:	681b      	ldr	r3, [r3, #0]
 8017410:	79fa      	ldrb	r2, [r7, #7]
 8017412:	4906      	ldr	r1, [pc, #24]	; (801742c <disk_initialize+0x48>)
 8017414:	440a      	add	r2, r1
 8017416:	7a12      	ldrb	r2, [r2, #8]
 8017418:	4610      	mov	r0, r2
 801741a:	4798      	blx	r3
 801741c:	4603      	mov	r3, r0
 801741e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8017420:	7bfb      	ldrb	r3, [r7, #15]
}
 8017422:	4618      	mov	r0, r3
 8017424:	3710      	adds	r7, #16
 8017426:	46bd      	mov	sp, r7
 8017428:	bd80      	pop	{r7, pc}
 801742a:	bf00      	nop
 801742c:	24003f24 	.word	0x24003f24

08017430 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8017430:	b590      	push	{r4, r7, lr}
 8017432:	b087      	sub	sp, #28
 8017434:	af00      	add	r7, sp, #0
 8017436:	60b9      	str	r1, [r7, #8]
 8017438:	607a      	str	r2, [r7, #4]
 801743a:	603b      	str	r3, [r7, #0]
 801743c:	4603      	mov	r3, r0
 801743e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8017440:	7bfb      	ldrb	r3, [r7, #15]
 8017442:	4a0a      	ldr	r2, [pc, #40]	; (801746c <disk_read+0x3c>)
 8017444:	009b      	lsls	r3, r3, #2
 8017446:	4413      	add	r3, r2
 8017448:	685b      	ldr	r3, [r3, #4]
 801744a:	689c      	ldr	r4, [r3, #8]
 801744c:	7bfb      	ldrb	r3, [r7, #15]
 801744e:	4a07      	ldr	r2, [pc, #28]	; (801746c <disk_read+0x3c>)
 8017450:	4413      	add	r3, r2
 8017452:	7a18      	ldrb	r0, [r3, #8]
 8017454:	683b      	ldr	r3, [r7, #0]
 8017456:	687a      	ldr	r2, [r7, #4]
 8017458:	68b9      	ldr	r1, [r7, #8]
 801745a:	47a0      	blx	r4
 801745c:	4603      	mov	r3, r0
 801745e:	75fb      	strb	r3, [r7, #23]
  return res;
 8017460:	7dfb      	ldrb	r3, [r7, #23]
}
 8017462:	4618      	mov	r0, r3
 8017464:	371c      	adds	r7, #28
 8017466:	46bd      	mov	sp, r7
 8017468:	bd90      	pop	{r4, r7, pc}
 801746a:	bf00      	nop
 801746c:	24003f24 	.word	0x24003f24

08017470 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8017470:	b590      	push	{r4, r7, lr}
 8017472:	b087      	sub	sp, #28
 8017474:	af00      	add	r7, sp, #0
 8017476:	60b9      	str	r1, [r7, #8]
 8017478:	607a      	str	r2, [r7, #4]
 801747a:	603b      	str	r3, [r7, #0]
 801747c:	4603      	mov	r3, r0
 801747e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8017480:	7bfb      	ldrb	r3, [r7, #15]
 8017482:	4a0a      	ldr	r2, [pc, #40]	; (80174ac <disk_write+0x3c>)
 8017484:	009b      	lsls	r3, r3, #2
 8017486:	4413      	add	r3, r2
 8017488:	685b      	ldr	r3, [r3, #4]
 801748a:	68dc      	ldr	r4, [r3, #12]
 801748c:	7bfb      	ldrb	r3, [r7, #15]
 801748e:	4a07      	ldr	r2, [pc, #28]	; (80174ac <disk_write+0x3c>)
 8017490:	4413      	add	r3, r2
 8017492:	7a18      	ldrb	r0, [r3, #8]
 8017494:	683b      	ldr	r3, [r7, #0]
 8017496:	687a      	ldr	r2, [r7, #4]
 8017498:	68b9      	ldr	r1, [r7, #8]
 801749a:	47a0      	blx	r4
 801749c:	4603      	mov	r3, r0
 801749e:	75fb      	strb	r3, [r7, #23]
  return res;
 80174a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80174a2:	4618      	mov	r0, r3
 80174a4:	371c      	adds	r7, #28
 80174a6:	46bd      	mov	sp, r7
 80174a8:	bd90      	pop	{r4, r7, pc}
 80174aa:	bf00      	nop
 80174ac:	24003f24 	.word	0x24003f24

080174b0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80174b0:	b580      	push	{r7, lr}
 80174b2:	b084      	sub	sp, #16
 80174b4:	af00      	add	r7, sp, #0
 80174b6:	4603      	mov	r3, r0
 80174b8:	603a      	str	r2, [r7, #0]
 80174ba:	71fb      	strb	r3, [r7, #7]
 80174bc:	460b      	mov	r3, r1
 80174be:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80174c0:	79fb      	ldrb	r3, [r7, #7]
 80174c2:	4a09      	ldr	r2, [pc, #36]	; (80174e8 <disk_ioctl+0x38>)
 80174c4:	009b      	lsls	r3, r3, #2
 80174c6:	4413      	add	r3, r2
 80174c8:	685b      	ldr	r3, [r3, #4]
 80174ca:	691b      	ldr	r3, [r3, #16]
 80174cc:	79fa      	ldrb	r2, [r7, #7]
 80174ce:	4906      	ldr	r1, [pc, #24]	; (80174e8 <disk_ioctl+0x38>)
 80174d0:	440a      	add	r2, r1
 80174d2:	7a10      	ldrb	r0, [r2, #8]
 80174d4:	79b9      	ldrb	r1, [r7, #6]
 80174d6:	683a      	ldr	r2, [r7, #0]
 80174d8:	4798      	blx	r3
 80174da:	4603      	mov	r3, r0
 80174dc:	73fb      	strb	r3, [r7, #15]
  return res;
 80174de:	7bfb      	ldrb	r3, [r7, #15]
}
 80174e0:	4618      	mov	r0, r3
 80174e2:	3710      	adds	r7, #16
 80174e4:	46bd      	mov	sp, r7
 80174e6:	bd80      	pop	{r7, pc}
 80174e8:	24003f24 	.word	0x24003f24

080174ec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80174ec:	b480      	push	{r7}
 80174ee:	b085      	sub	sp, #20
 80174f0:	af00      	add	r7, sp, #0
 80174f2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	3301      	adds	r3, #1
 80174f8:	781b      	ldrb	r3, [r3, #0]
 80174fa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80174fc:	89fb      	ldrh	r3, [r7, #14]
 80174fe:	021b      	lsls	r3, r3, #8
 8017500:	b21a      	sxth	r2, r3
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	781b      	ldrb	r3, [r3, #0]
 8017506:	b21b      	sxth	r3, r3
 8017508:	4313      	orrs	r3, r2
 801750a:	b21b      	sxth	r3, r3
 801750c:	81fb      	strh	r3, [r7, #14]
	return rv;
 801750e:	89fb      	ldrh	r3, [r7, #14]
}
 8017510:	4618      	mov	r0, r3
 8017512:	3714      	adds	r7, #20
 8017514:	46bd      	mov	sp, r7
 8017516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801751a:	4770      	bx	lr

0801751c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801751c:	b480      	push	{r7}
 801751e:	b085      	sub	sp, #20
 8017520:	af00      	add	r7, sp, #0
 8017522:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	3303      	adds	r3, #3
 8017528:	781b      	ldrb	r3, [r3, #0]
 801752a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801752c:	68fb      	ldr	r3, [r7, #12]
 801752e:	021b      	lsls	r3, r3, #8
 8017530:	687a      	ldr	r2, [r7, #4]
 8017532:	3202      	adds	r2, #2
 8017534:	7812      	ldrb	r2, [r2, #0]
 8017536:	4313      	orrs	r3, r2
 8017538:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801753a:	68fb      	ldr	r3, [r7, #12]
 801753c:	021b      	lsls	r3, r3, #8
 801753e:	687a      	ldr	r2, [r7, #4]
 8017540:	3201      	adds	r2, #1
 8017542:	7812      	ldrb	r2, [r2, #0]
 8017544:	4313      	orrs	r3, r2
 8017546:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8017548:	68fb      	ldr	r3, [r7, #12]
 801754a:	021b      	lsls	r3, r3, #8
 801754c:	687a      	ldr	r2, [r7, #4]
 801754e:	7812      	ldrb	r2, [r2, #0]
 8017550:	4313      	orrs	r3, r2
 8017552:	60fb      	str	r3, [r7, #12]
	return rv;
 8017554:	68fb      	ldr	r3, [r7, #12]
}
 8017556:	4618      	mov	r0, r3
 8017558:	3714      	adds	r7, #20
 801755a:	46bd      	mov	sp, r7
 801755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017560:	4770      	bx	lr

08017562 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8017562:	b480      	push	{r7}
 8017564:	b083      	sub	sp, #12
 8017566:	af00      	add	r7, sp, #0
 8017568:	6078      	str	r0, [r7, #4]
 801756a:	460b      	mov	r3, r1
 801756c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	1c5a      	adds	r2, r3, #1
 8017572:	607a      	str	r2, [r7, #4]
 8017574:	887a      	ldrh	r2, [r7, #2]
 8017576:	b2d2      	uxtb	r2, r2
 8017578:	701a      	strb	r2, [r3, #0]
 801757a:	887b      	ldrh	r3, [r7, #2]
 801757c:	0a1b      	lsrs	r3, r3, #8
 801757e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	1c5a      	adds	r2, r3, #1
 8017584:	607a      	str	r2, [r7, #4]
 8017586:	887a      	ldrh	r2, [r7, #2]
 8017588:	b2d2      	uxtb	r2, r2
 801758a:	701a      	strb	r2, [r3, #0]
}
 801758c:	bf00      	nop
 801758e:	370c      	adds	r7, #12
 8017590:	46bd      	mov	sp, r7
 8017592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017596:	4770      	bx	lr

08017598 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8017598:	b480      	push	{r7}
 801759a:	b083      	sub	sp, #12
 801759c:	af00      	add	r7, sp, #0
 801759e:	6078      	str	r0, [r7, #4]
 80175a0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	1c5a      	adds	r2, r3, #1
 80175a6:	607a      	str	r2, [r7, #4]
 80175a8:	683a      	ldr	r2, [r7, #0]
 80175aa:	b2d2      	uxtb	r2, r2
 80175ac:	701a      	strb	r2, [r3, #0]
 80175ae:	683b      	ldr	r3, [r7, #0]
 80175b0:	0a1b      	lsrs	r3, r3, #8
 80175b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	1c5a      	adds	r2, r3, #1
 80175b8:	607a      	str	r2, [r7, #4]
 80175ba:	683a      	ldr	r2, [r7, #0]
 80175bc:	b2d2      	uxtb	r2, r2
 80175be:	701a      	strb	r2, [r3, #0]
 80175c0:	683b      	ldr	r3, [r7, #0]
 80175c2:	0a1b      	lsrs	r3, r3, #8
 80175c4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	1c5a      	adds	r2, r3, #1
 80175ca:	607a      	str	r2, [r7, #4]
 80175cc:	683a      	ldr	r2, [r7, #0]
 80175ce:	b2d2      	uxtb	r2, r2
 80175d0:	701a      	strb	r2, [r3, #0]
 80175d2:	683b      	ldr	r3, [r7, #0]
 80175d4:	0a1b      	lsrs	r3, r3, #8
 80175d6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	1c5a      	adds	r2, r3, #1
 80175dc:	607a      	str	r2, [r7, #4]
 80175de:	683a      	ldr	r2, [r7, #0]
 80175e0:	b2d2      	uxtb	r2, r2
 80175e2:	701a      	strb	r2, [r3, #0]
}
 80175e4:	bf00      	nop
 80175e6:	370c      	adds	r7, #12
 80175e8:	46bd      	mov	sp, r7
 80175ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175ee:	4770      	bx	lr

080175f0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80175f0:	b480      	push	{r7}
 80175f2:	b087      	sub	sp, #28
 80175f4:	af00      	add	r7, sp, #0
 80175f6:	60f8      	str	r0, [r7, #12]
 80175f8:	60b9      	str	r1, [r7, #8]
 80175fa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80175fc:	68fb      	ldr	r3, [r7, #12]
 80175fe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8017600:	68bb      	ldr	r3, [r7, #8]
 8017602:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	2b00      	cmp	r3, #0
 8017608:	d00d      	beq.n	8017626 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801760a:	693a      	ldr	r2, [r7, #16]
 801760c:	1c53      	adds	r3, r2, #1
 801760e:	613b      	str	r3, [r7, #16]
 8017610:	697b      	ldr	r3, [r7, #20]
 8017612:	1c59      	adds	r1, r3, #1
 8017614:	6179      	str	r1, [r7, #20]
 8017616:	7812      	ldrb	r2, [r2, #0]
 8017618:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	3b01      	subs	r3, #1
 801761e:	607b      	str	r3, [r7, #4]
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	2b00      	cmp	r3, #0
 8017624:	d1f1      	bne.n	801760a <mem_cpy+0x1a>
	}
}
 8017626:	bf00      	nop
 8017628:	371c      	adds	r7, #28
 801762a:	46bd      	mov	sp, r7
 801762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017630:	4770      	bx	lr

08017632 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8017632:	b480      	push	{r7}
 8017634:	b087      	sub	sp, #28
 8017636:	af00      	add	r7, sp, #0
 8017638:	60f8      	str	r0, [r7, #12]
 801763a:	60b9      	str	r1, [r7, #8]
 801763c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801763e:	68fb      	ldr	r3, [r7, #12]
 8017640:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8017642:	697b      	ldr	r3, [r7, #20]
 8017644:	1c5a      	adds	r2, r3, #1
 8017646:	617a      	str	r2, [r7, #20]
 8017648:	68ba      	ldr	r2, [r7, #8]
 801764a:	b2d2      	uxtb	r2, r2
 801764c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	3b01      	subs	r3, #1
 8017652:	607b      	str	r3, [r7, #4]
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	2b00      	cmp	r3, #0
 8017658:	d1f3      	bne.n	8017642 <mem_set+0x10>
}
 801765a:	bf00      	nop
 801765c:	bf00      	nop
 801765e:	371c      	adds	r7, #28
 8017660:	46bd      	mov	sp, r7
 8017662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017666:	4770      	bx	lr

08017668 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8017668:	b480      	push	{r7}
 801766a:	b089      	sub	sp, #36	; 0x24
 801766c:	af00      	add	r7, sp, #0
 801766e:	60f8      	str	r0, [r7, #12]
 8017670:	60b9      	str	r1, [r7, #8]
 8017672:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8017674:	68fb      	ldr	r3, [r7, #12]
 8017676:	61fb      	str	r3, [r7, #28]
 8017678:	68bb      	ldr	r3, [r7, #8]
 801767a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801767c:	2300      	movs	r3, #0
 801767e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8017680:	69fb      	ldr	r3, [r7, #28]
 8017682:	1c5a      	adds	r2, r3, #1
 8017684:	61fa      	str	r2, [r7, #28]
 8017686:	781b      	ldrb	r3, [r3, #0]
 8017688:	4619      	mov	r1, r3
 801768a:	69bb      	ldr	r3, [r7, #24]
 801768c:	1c5a      	adds	r2, r3, #1
 801768e:	61ba      	str	r2, [r7, #24]
 8017690:	781b      	ldrb	r3, [r3, #0]
 8017692:	1acb      	subs	r3, r1, r3
 8017694:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	3b01      	subs	r3, #1
 801769a:	607b      	str	r3, [r7, #4]
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	2b00      	cmp	r3, #0
 80176a0:	d002      	beq.n	80176a8 <mem_cmp+0x40>
 80176a2:	697b      	ldr	r3, [r7, #20]
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	d0eb      	beq.n	8017680 <mem_cmp+0x18>

	return r;
 80176a8:	697b      	ldr	r3, [r7, #20]
}
 80176aa:	4618      	mov	r0, r3
 80176ac:	3724      	adds	r7, #36	; 0x24
 80176ae:	46bd      	mov	sp, r7
 80176b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176b4:	4770      	bx	lr

080176b6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80176b6:	b480      	push	{r7}
 80176b8:	b083      	sub	sp, #12
 80176ba:	af00      	add	r7, sp, #0
 80176bc:	6078      	str	r0, [r7, #4]
 80176be:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80176c0:	e002      	b.n	80176c8 <chk_chr+0x12>
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	3301      	adds	r3, #1
 80176c6:	607b      	str	r3, [r7, #4]
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	781b      	ldrb	r3, [r3, #0]
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d005      	beq.n	80176dc <chk_chr+0x26>
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	781b      	ldrb	r3, [r3, #0]
 80176d4:	461a      	mov	r2, r3
 80176d6:	683b      	ldr	r3, [r7, #0]
 80176d8:	4293      	cmp	r3, r2
 80176da:	d1f2      	bne.n	80176c2 <chk_chr+0xc>
	return *str;
 80176dc:	687b      	ldr	r3, [r7, #4]
 80176de:	781b      	ldrb	r3, [r3, #0]
}
 80176e0:	4618      	mov	r0, r3
 80176e2:	370c      	adds	r7, #12
 80176e4:	46bd      	mov	sp, r7
 80176e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ea:	4770      	bx	lr

080176ec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80176ec:	b480      	push	{r7}
 80176ee:	b085      	sub	sp, #20
 80176f0:	af00      	add	r7, sp, #0
 80176f2:	6078      	str	r0, [r7, #4]
 80176f4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80176f6:	2300      	movs	r3, #0
 80176f8:	60bb      	str	r3, [r7, #8]
 80176fa:	68bb      	ldr	r3, [r7, #8]
 80176fc:	60fb      	str	r3, [r7, #12]
 80176fe:	e029      	b.n	8017754 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8017700:	4a27      	ldr	r2, [pc, #156]	; (80177a0 <chk_lock+0xb4>)
 8017702:	68fb      	ldr	r3, [r7, #12]
 8017704:	011b      	lsls	r3, r3, #4
 8017706:	4413      	add	r3, r2
 8017708:	681b      	ldr	r3, [r3, #0]
 801770a:	2b00      	cmp	r3, #0
 801770c:	d01d      	beq.n	801774a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801770e:	4a24      	ldr	r2, [pc, #144]	; (80177a0 <chk_lock+0xb4>)
 8017710:	68fb      	ldr	r3, [r7, #12]
 8017712:	011b      	lsls	r3, r3, #4
 8017714:	4413      	add	r3, r2
 8017716:	681a      	ldr	r2, [r3, #0]
 8017718:	687b      	ldr	r3, [r7, #4]
 801771a:	681b      	ldr	r3, [r3, #0]
 801771c:	429a      	cmp	r2, r3
 801771e:	d116      	bne.n	801774e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8017720:	4a1f      	ldr	r2, [pc, #124]	; (80177a0 <chk_lock+0xb4>)
 8017722:	68fb      	ldr	r3, [r7, #12]
 8017724:	011b      	lsls	r3, r3, #4
 8017726:	4413      	add	r3, r2
 8017728:	3304      	adds	r3, #4
 801772a:	681a      	ldr	r2, [r3, #0]
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8017730:	429a      	cmp	r2, r3
 8017732:	d10c      	bne.n	801774e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8017734:	4a1a      	ldr	r2, [pc, #104]	; (80177a0 <chk_lock+0xb4>)
 8017736:	68fb      	ldr	r3, [r7, #12]
 8017738:	011b      	lsls	r3, r3, #4
 801773a:	4413      	add	r3, r2
 801773c:	3308      	adds	r3, #8
 801773e:	681a      	ldr	r2, [r3, #0]
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8017744:	429a      	cmp	r2, r3
 8017746:	d102      	bne.n	801774e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8017748:	e007      	b.n	801775a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801774a:	2301      	movs	r3, #1
 801774c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801774e:	68fb      	ldr	r3, [r7, #12]
 8017750:	3301      	adds	r3, #1
 8017752:	60fb      	str	r3, [r7, #12]
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	2b01      	cmp	r3, #1
 8017758:	d9d2      	bls.n	8017700 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801775a:	68fb      	ldr	r3, [r7, #12]
 801775c:	2b02      	cmp	r3, #2
 801775e:	d109      	bne.n	8017774 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8017760:	68bb      	ldr	r3, [r7, #8]
 8017762:	2b00      	cmp	r3, #0
 8017764:	d102      	bne.n	801776c <chk_lock+0x80>
 8017766:	683b      	ldr	r3, [r7, #0]
 8017768:	2b02      	cmp	r3, #2
 801776a:	d101      	bne.n	8017770 <chk_lock+0x84>
 801776c:	2300      	movs	r3, #0
 801776e:	e010      	b.n	8017792 <chk_lock+0xa6>
 8017770:	2312      	movs	r3, #18
 8017772:	e00e      	b.n	8017792 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8017774:	683b      	ldr	r3, [r7, #0]
 8017776:	2b00      	cmp	r3, #0
 8017778:	d108      	bne.n	801778c <chk_lock+0xa0>
 801777a:	4a09      	ldr	r2, [pc, #36]	; (80177a0 <chk_lock+0xb4>)
 801777c:	68fb      	ldr	r3, [r7, #12]
 801777e:	011b      	lsls	r3, r3, #4
 8017780:	4413      	add	r3, r2
 8017782:	330c      	adds	r3, #12
 8017784:	881b      	ldrh	r3, [r3, #0]
 8017786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801778a:	d101      	bne.n	8017790 <chk_lock+0xa4>
 801778c:	2310      	movs	r3, #16
 801778e:	e000      	b.n	8017792 <chk_lock+0xa6>
 8017790:	2300      	movs	r3, #0
}
 8017792:	4618      	mov	r0, r3
 8017794:	3714      	adds	r7, #20
 8017796:	46bd      	mov	sp, r7
 8017798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801779c:	4770      	bx	lr
 801779e:	bf00      	nop
 80177a0:	24003d04 	.word	0x24003d04

080177a4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80177a4:	b480      	push	{r7}
 80177a6:	b083      	sub	sp, #12
 80177a8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80177aa:	2300      	movs	r3, #0
 80177ac:	607b      	str	r3, [r7, #4]
 80177ae:	e002      	b.n	80177b6 <enq_lock+0x12>
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	3301      	adds	r3, #1
 80177b4:	607b      	str	r3, [r7, #4]
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	2b01      	cmp	r3, #1
 80177ba:	d806      	bhi.n	80177ca <enq_lock+0x26>
 80177bc:	4a09      	ldr	r2, [pc, #36]	; (80177e4 <enq_lock+0x40>)
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	011b      	lsls	r3, r3, #4
 80177c2:	4413      	add	r3, r2
 80177c4:	681b      	ldr	r3, [r3, #0]
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	d1f2      	bne.n	80177b0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	2b02      	cmp	r3, #2
 80177ce:	bf14      	ite	ne
 80177d0:	2301      	movne	r3, #1
 80177d2:	2300      	moveq	r3, #0
 80177d4:	b2db      	uxtb	r3, r3
}
 80177d6:	4618      	mov	r0, r3
 80177d8:	370c      	adds	r7, #12
 80177da:	46bd      	mov	sp, r7
 80177dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177e0:	4770      	bx	lr
 80177e2:	bf00      	nop
 80177e4:	24003d04 	.word	0x24003d04

080177e8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80177e8:	b480      	push	{r7}
 80177ea:	b085      	sub	sp, #20
 80177ec:	af00      	add	r7, sp, #0
 80177ee:	6078      	str	r0, [r7, #4]
 80177f0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80177f2:	2300      	movs	r3, #0
 80177f4:	60fb      	str	r3, [r7, #12]
 80177f6:	e01f      	b.n	8017838 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80177f8:	4a41      	ldr	r2, [pc, #260]	; (8017900 <inc_lock+0x118>)
 80177fa:	68fb      	ldr	r3, [r7, #12]
 80177fc:	011b      	lsls	r3, r3, #4
 80177fe:	4413      	add	r3, r2
 8017800:	681a      	ldr	r2, [r3, #0]
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	681b      	ldr	r3, [r3, #0]
 8017806:	429a      	cmp	r2, r3
 8017808:	d113      	bne.n	8017832 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801780a:	4a3d      	ldr	r2, [pc, #244]	; (8017900 <inc_lock+0x118>)
 801780c:	68fb      	ldr	r3, [r7, #12]
 801780e:	011b      	lsls	r3, r3, #4
 8017810:	4413      	add	r3, r2
 8017812:	3304      	adds	r3, #4
 8017814:	681a      	ldr	r2, [r3, #0]
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801781a:	429a      	cmp	r2, r3
 801781c:	d109      	bne.n	8017832 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801781e:	4a38      	ldr	r2, [pc, #224]	; (8017900 <inc_lock+0x118>)
 8017820:	68fb      	ldr	r3, [r7, #12]
 8017822:	011b      	lsls	r3, r3, #4
 8017824:	4413      	add	r3, r2
 8017826:	3308      	adds	r3, #8
 8017828:	681a      	ldr	r2, [r3, #0]
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801782e:	429a      	cmp	r2, r3
 8017830:	d006      	beq.n	8017840 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017832:	68fb      	ldr	r3, [r7, #12]
 8017834:	3301      	adds	r3, #1
 8017836:	60fb      	str	r3, [r7, #12]
 8017838:	68fb      	ldr	r3, [r7, #12]
 801783a:	2b01      	cmp	r3, #1
 801783c:	d9dc      	bls.n	80177f8 <inc_lock+0x10>
 801783e:	e000      	b.n	8017842 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8017840:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8017842:	68fb      	ldr	r3, [r7, #12]
 8017844:	2b02      	cmp	r3, #2
 8017846:	d132      	bne.n	80178ae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8017848:	2300      	movs	r3, #0
 801784a:	60fb      	str	r3, [r7, #12]
 801784c:	e002      	b.n	8017854 <inc_lock+0x6c>
 801784e:	68fb      	ldr	r3, [r7, #12]
 8017850:	3301      	adds	r3, #1
 8017852:	60fb      	str	r3, [r7, #12]
 8017854:	68fb      	ldr	r3, [r7, #12]
 8017856:	2b01      	cmp	r3, #1
 8017858:	d806      	bhi.n	8017868 <inc_lock+0x80>
 801785a:	4a29      	ldr	r2, [pc, #164]	; (8017900 <inc_lock+0x118>)
 801785c:	68fb      	ldr	r3, [r7, #12]
 801785e:	011b      	lsls	r3, r3, #4
 8017860:	4413      	add	r3, r2
 8017862:	681b      	ldr	r3, [r3, #0]
 8017864:	2b00      	cmp	r3, #0
 8017866:	d1f2      	bne.n	801784e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	2b02      	cmp	r3, #2
 801786c:	d101      	bne.n	8017872 <inc_lock+0x8a>
 801786e:	2300      	movs	r3, #0
 8017870:	e040      	b.n	80178f4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8017872:	687b      	ldr	r3, [r7, #4]
 8017874:	681a      	ldr	r2, [r3, #0]
 8017876:	4922      	ldr	r1, [pc, #136]	; (8017900 <inc_lock+0x118>)
 8017878:	68fb      	ldr	r3, [r7, #12]
 801787a:	011b      	lsls	r3, r3, #4
 801787c:	440b      	add	r3, r1
 801787e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	689a      	ldr	r2, [r3, #8]
 8017884:	491e      	ldr	r1, [pc, #120]	; (8017900 <inc_lock+0x118>)
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	011b      	lsls	r3, r3, #4
 801788a:	440b      	add	r3, r1
 801788c:	3304      	adds	r3, #4
 801788e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	695a      	ldr	r2, [r3, #20]
 8017894:	491a      	ldr	r1, [pc, #104]	; (8017900 <inc_lock+0x118>)
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	011b      	lsls	r3, r3, #4
 801789a:	440b      	add	r3, r1
 801789c:	3308      	adds	r3, #8
 801789e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80178a0:	4a17      	ldr	r2, [pc, #92]	; (8017900 <inc_lock+0x118>)
 80178a2:	68fb      	ldr	r3, [r7, #12]
 80178a4:	011b      	lsls	r3, r3, #4
 80178a6:	4413      	add	r3, r2
 80178a8:	330c      	adds	r3, #12
 80178aa:	2200      	movs	r2, #0
 80178ac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80178ae:	683b      	ldr	r3, [r7, #0]
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	d009      	beq.n	80178c8 <inc_lock+0xe0>
 80178b4:	4a12      	ldr	r2, [pc, #72]	; (8017900 <inc_lock+0x118>)
 80178b6:	68fb      	ldr	r3, [r7, #12]
 80178b8:	011b      	lsls	r3, r3, #4
 80178ba:	4413      	add	r3, r2
 80178bc:	330c      	adds	r3, #12
 80178be:	881b      	ldrh	r3, [r3, #0]
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	d001      	beq.n	80178c8 <inc_lock+0xe0>
 80178c4:	2300      	movs	r3, #0
 80178c6:	e015      	b.n	80178f4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80178c8:	683b      	ldr	r3, [r7, #0]
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d108      	bne.n	80178e0 <inc_lock+0xf8>
 80178ce:	4a0c      	ldr	r2, [pc, #48]	; (8017900 <inc_lock+0x118>)
 80178d0:	68fb      	ldr	r3, [r7, #12]
 80178d2:	011b      	lsls	r3, r3, #4
 80178d4:	4413      	add	r3, r2
 80178d6:	330c      	adds	r3, #12
 80178d8:	881b      	ldrh	r3, [r3, #0]
 80178da:	3301      	adds	r3, #1
 80178dc:	b29a      	uxth	r2, r3
 80178de:	e001      	b.n	80178e4 <inc_lock+0xfc>
 80178e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80178e4:	4906      	ldr	r1, [pc, #24]	; (8017900 <inc_lock+0x118>)
 80178e6:	68fb      	ldr	r3, [r7, #12]
 80178e8:	011b      	lsls	r3, r3, #4
 80178ea:	440b      	add	r3, r1
 80178ec:	330c      	adds	r3, #12
 80178ee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80178f0:	68fb      	ldr	r3, [r7, #12]
 80178f2:	3301      	adds	r3, #1
}
 80178f4:	4618      	mov	r0, r3
 80178f6:	3714      	adds	r7, #20
 80178f8:	46bd      	mov	sp, r7
 80178fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178fe:	4770      	bx	lr
 8017900:	24003d04 	.word	0x24003d04

08017904 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8017904:	b480      	push	{r7}
 8017906:	b085      	sub	sp, #20
 8017908:	af00      	add	r7, sp, #0
 801790a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	3b01      	subs	r3, #1
 8017910:	607b      	str	r3, [r7, #4]
 8017912:	687b      	ldr	r3, [r7, #4]
 8017914:	2b01      	cmp	r3, #1
 8017916:	d825      	bhi.n	8017964 <dec_lock+0x60>
		n = Files[i].ctr;
 8017918:	4a17      	ldr	r2, [pc, #92]	; (8017978 <dec_lock+0x74>)
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	011b      	lsls	r3, r3, #4
 801791e:	4413      	add	r3, r2
 8017920:	330c      	adds	r3, #12
 8017922:	881b      	ldrh	r3, [r3, #0]
 8017924:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8017926:	89fb      	ldrh	r3, [r7, #14]
 8017928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801792c:	d101      	bne.n	8017932 <dec_lock+0x2e>
 801792e:	2300      	movs	r3, #0
 8017930:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8017932:	89fb      	ldrh	r3, [r7, #14]
 8017934:	2b00      	cmp	r3, #0
 8017936:	d002      	beq.n	801793e <dec_lock+0x3a>
 8017938:	89fb      	ldrh	r3, [r7, #14]
 801793a:	3b01      	subs	r3, #1
 801793c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801793e:	4a0e      	ldr	r2, [pc, #56]	; (8017978 <dec_lock+0x74>)
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	011b      	lsls	r3, r3, #4
 8017944:	4413      	add	r3, r2
 8017946:	330c      	adds	r3, #12
 8017948:	89fa      	ldrh	r2, [r7, #14]
 801794a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801794c:	89fb      	ldrh	r3, [r7, #14]
 801794e:	2b00      	cmp	r3, #0
 8017950:	d105      	bne.n	801795e <dec_lock+0x5a>
 8017952:	4a09      	ldr	r2, [pc, #36]	; (8017978 <dec_lock+0x74>)
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	011b      	lsls	r3, r3, #4
 8017958:	4413      	add	r3, r2
 801795a:	2200      	movs	r2, #0
 801795c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801795e:	2300      	movs	r3, #0
 8017960:	737b      	strb	r3, [r7, #13]
 8017962:	e001      	b.n	8017968 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8017964:	2302      	movs	r3, #2
 8017966:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8017968:	7b7b      	ldrb	r3, [r7, #13]
}
 801796a:	4618      	mov	r0, r3
 801796c:	3714      	adds	r7, #20
 801796e:	46bd      	mov	sp, r7
 8017970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017974:	4770      	bx	lr
 8017976:	bf00      	nop
 8017978:	24003d04 	.word	0x24003d04

0801797c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801797c:	b480      	push	{r7}
 801797e:	b085      	sub	sp, #20
 8017980:	af00      	add	r7, sp, #0
 8017982:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8017984:	2300      	movs	r3, #0
 8017986:	60fb      	str	r3, [r7, #12]
 8017988:	e010      	b.n	80179ac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801798a:	4a0d      	ldr	r2, [pc, #52]	; (80179c0 <clear_lock+0x44>)
 801798c:	68fb      	ldr	r3, [r7, #12]
 801798e:	011b      	lsls	r3, r3, #4
 8017990:	4413      	add	r3, r2
 8017992:	681b      	ldr	r3, [r3, #0]
 8017994:	687a      	ldr	r2, [r7, #4]
 8017996:	429a      	cmp	r2, r3
 8017998:	d105      	bne.n	80179a6 <clear_lock+0x2a>
 801799a:	4a09      	ldr	r2, [pc, #36]	; (80179c0 <clear_lock+0x44>)
 801799c:	68fb      	ldr	r3, [r7, #12]
 801799e:	011b      	lsls	r3, r3, #4
 80179a0:	4413      	add	r3, r2
 80179a2:	2200      	movs	r2, #0
 80179a4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80179a6:	68fb      	ldr	r3, [r7, #12]
 80179a8:	3301      	adds	r3, #1
 80179aa:	60fb      	str	r3, [r7, #12]
 80179ac:	68fb      	ldr	r3, [r7, #12]
 80179ae:	2b01      	cmp	r3, #1
 80179b0:	d9eb      	bls.n	801798a <clear_lock+0xe>
	}
}
 80179b2:	bf00      	nop
 80179b4:	bf00      	nop
 80179b6:	3714      	adds	r7, #20
 80179b8:	46bd      	mov	sp, r7
 80179ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179be:	4770      	bx	lr
 80179c0:	24003d04 	.word	0x24003d04

080179c4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80179c4:	b580      	push	{r7, lr}
 80179c6:	b086      	sub	sp, #24
 80179c8:	af00      	add	r7, sp, #0
 80179ca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80179cc:	2300      	movs	r3, #0
 80179ce:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	78db      	ldrb	r3, [r3, #3]
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	d034      	beq.n	8017a42 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80179dc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	7858      	ldrb	r0, [r3, #1]
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80179e8:	2301      	movs	r3, #1
 80179ea:	697a      	ldr	r2, [r7, #20]
 80179ec:	f7ff fd40 	bl	8017470 <disk_write>
 80179f0:	4603      	mov	r3, r0
 80179f2:	2b00      	cmp	r3, #0
 80179f4:	d002      	beq.n	80179fc <sync_window+0x38>
			res = FR_DISK_ERR;
 80179f6:	2301      	movs	r3, #1
 80179f8:	73fb      	strb	r3, [r7, #15]
 80179fa:	e022      	b.n	8017a42 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	2200      	movs	r2, #0
 8017a00:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017a06:	697a      	ldr	r2, [r7, #20]
 8017a08:	1ad2      	subs	r2, r2, r3
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	6a1b      	ldr	r3, [r3, #32]
 8017a0e:	429a      	cmp	r2, r3
 8017a10:	d217      	bcs.n	8017a42 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	789b      	ldrb	r3, [r3, #2]
 8017a16:	613b      	str	r3, [r7, #16]
 8017a18:	e010      	b.n	8017a3c <sync_window+0x78>
					wsect += fs->fsize;
 8017a1a:	687b      	ldr	r3, [r7, #4]
 8017a1c:	6a1b      	ldr	r3, [r3, #32]
 8017a1e:	697a      	ldr	r2, [r7, #20]
 8017a20:	4413      	add	r3, r2
 8017a22:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	7858      	ldrb	r0, [r3, #1]
 8017a28:	687b      	ldr	r3, [r7, #4]
 8017a2a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017a2e:	2301      	movs	r3, #1
 8017a30:	697a      	ldr	r2, [r7, #20]
 8017a32:	f7ff fd1d 	bl	8017470 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017a36:	693b      	ldr	r3, [r7, #16]
 8017a38:	3b01      	subs	r3, #1
 8017a3a:	613b      	str	r3, [r7, #16]
 8017a3c:	693b      	ldr	r3, [r7, #16]
 8017a3e:	2b01      	cmp	r3, #1
 8017a40:	d8eb      	bhi.n	8017a1a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8017a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8017a44:	4618      	mov	r0, r3
 8017a46:	3718      	adds	r7, #24
 8017a48:	46bd      	mov	sp, r7
 8017a4a:	bd80      	pop	{r7, pc}

08017a4c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8017a4c:	b580      	push	{r7, lr}
 8017a4e:	b084      	sub	sp, #16
 8017a50:	af00      	add	r7, sp, #0
 8017a52:	6078      	str	r0, [r7, #4]
 8017a54:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8017a56:	2300      	movs	r3, #0
 8017a58:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017a5e:	683a      	ldr	r2, [r7, #0]
 8017a60:	429a      	cmp	r2, r3
 8017a62:	d01b      	beq.n	8017a9c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8017a64:	6878      	ldr	r0, [r7, #4]
 8017a66:	f7ff ffad 	bl	80179c4 <sync_window>
 8017a6a:	4603      	mov	r3, r0
 8017a6c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8017a6e:	7bfb      	ldrb	r3, [r7, #15]
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	d113      	bne.n	8017a9c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	7858      	ldrb	r0, [r3, #1]
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017a7e:	2301      	movs	r3, #1
 8017a80:	683a      	ldr	r2, [r7, #0]
 8017a82:	f7ff fcd5 	bl	8017430 <disk_read>
 8017a86:	4603      	mov	r3, r0
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	d004      	beq.n	8017a96 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8017a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8017a90:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8017a92:	2301      	movs	r3, #1
 8017a94:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	683a      	ldr	r2, [r7, #0]
 8017a9a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8017a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8017a9e:	4618      	mov	r0, r3
 8017aa0:	3710      	adds	r7, #16
 8017aa2:	46bd      	mov	sp, r7
 8017aa4:	bd80      	pop	{r7, pc}
	...

08017aa8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8017aa8:	b580      	push	{r7, lr}
 8017aaa:	b084      	sub	sp, #16
 8017aac:	af00      	add	r7, sp, #0
 8017aae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8017ab0:	6878      	ldr	r0, [r7, #4]
 8017ab2:	f7ff ff87 	bl	80179c4 <sync_window>
 8017ab6:	4603      	mov	r3, r0
 8017ab8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8017aba:	7bfb      	ldrb	r3, [r7, #15]
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d159      	bne.n	8017b74 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	781b      	ldrb	r3, [r3, #0]
 8017ac4:	2b03      	cmp	r3, #3
 8017ac6:	d149      	bne.n	8017b5c <sync_fs+0xb4>
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	791b      	ldrb	r3, [r3, #4]
 8017acc:	2b01      	cmp	r3, #1
 8017ace:	d145      	bne.n	8017b5c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	899b      	ldrh	r3, [r3, #12]
 8017ada:	461a      	mov	r2, r3
 8017adc:	2100      	movs	r1, #0
 8017ade:	f7ff fda8 	bl	8017632 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	3338      	adds	r3, #56	; 0x38
 8017ae6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017aea:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8017aee:	4618      	mov	r0, r3
 8017af0:	f7ff fd37 	bl	8017562 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8017af4:	687b      	ldr	r3, [r7, #4]
 8017af6:	3338      	adds	r3, #56	; 0x38
 8017af8:	4921      	ldr	r1, [pc, #132]	; (8017b80 <sync_fs+0xd8>)
 8017afa:	4618      	mov	r0, r3
 8017afc:	f7ff fd4c 	bl	8017598 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	3338      	adds	r3, #56	; 0x38
 8017b04:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8017b08:	491e      	ldr	r1, [pc, #120]	; (8017b84 <sync_fs+0xdc>)
 8017b0a:	4618      	mov	r0, r3
 8017b0c:	f7ff fd44 	bl	8017598 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	3338      	adds	r3, #56	; 0x38
 8017b14:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	699b      	ldr	r3, [r3, #24]
 8017b1c:	4619      	mov	r1, r3
 8017b1e:	4610      	mov	r0, r2
 8017b20:	f7ff fd3a 	bl	8017598 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	3338      	adds	r3, #56	; 0x38
 8017b28:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	695b      	ldr	r3, [r3, #20]
 8017b30:	4619      	mov	r1, r3
 8017b32:	4610      	mov	r0, r2
 8017b34:	f7ff fd30 	bl	8017598 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b3c:	1c5a      	adds	r2, r3, #1
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	7858      	ldrb	r0, [r3, #1]
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017b50:	2301      	movs	r3, #1
 8017b52:	f7ff fc8d 	bl	8017470 <disk_write>
			fs->fsi_flag = 0;
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	2200      	movs	r2, #0
 8017b5a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	785b      	ldrb	r3, [r3, #1]
 8017b60:	2200      	movs	r2, #0
 8017b62:	2100      	movs	r1, #0
 8017b64:	4618      	mov	r0, r3
 8017b66:	f7ff fca3 	bl	80174b0 <disk_ioctl>
 8017b6a:	4603      	mov	r3, r0
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	d001      	beq.n	8017b74 <sync_fs+0xcc>
 8017b70:	2301      	movs	r3, #1
 8017b72:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8017b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8017b76:	4618      	mov	r0, r3
 8017b78:	3710      	adds	r7, #16
 8017b7a:	46bd      	mov	sp, r7
 8017b7c:	bd80      	pop	{r7, pc}
 8017b7e:	bf00      	nop
 8017b80:	41615252 	.word	0x41615252
 8017b84:	61417272 	.word	0x61417272

08017b88 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8017b88:	b480      	push	{r7}
 8017b8a:	b083      	sub	sp, #12
 8017b8c:	af00      	add	r7, sp, #0
 8017b8e:	6078      	str	r0, [r7, #4]
 8017b90:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8017b92:	683b      	ldr	r3, [r7, #0]
 8017b94:	3b02      	subs	r3, #2
 8017b96:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017b98:	687b      	ldr	r3, [r7, #4]
 8017b9a:	69db      	ldr	r3, [r3, #28]
 8017b9c:	3b02      	subs	r3, #2
 8017b9e:	683a      	ldr	r2, [r7, #0]
 8017ba0:	429a      	cmp	r2, r3
 8017ba2:	d301      	bcc.n	8017ba8 <clust2sect+0x20>
 8017ba4:	2300      	movs	r3, #0
 8017ba6:	e008      	b.n	8017bba <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	895b      	ldrh	r3, [r3, #10]
 8017bac:	461a      	mov	r2, r3
 8017bae:	683b      	ldr	r3, [r7, #0]
 8017bb0:	fb03 f202 	mul.w	r2, r3, r2
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017bb8:	4413      	add	r3, r2
}
 8017bba:	4618      	mov	r0, r3
 8017bbc:	370c      	adds	r7, #12
 8017bbe:	46bd      	mov	sp, r7
 8017bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bc4:	4770      	bx	lr

08017bc6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8017bc6:	b580      	push	{r7, lr}
 8017bc8:	b086      	sub	sp, #24
 8017bca:	af00      	add	r7, sp, #0
 8017bcc:	6078      	str	r0, [r7, #4]
 8017bce:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	681b      	ldr	r3, [r3, #0]
 8017bd4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8017bd6:	683b      	ldr	r3, [r7, #0]
 8017bd8:	2b01      	cmp	r3, #1
 8017bda:	d904      	bls.n	8017be6 <get_fat+0x20>
 8017bdc:	693b      	ldr	r3, [r7, #16]
 8017bde:	69db      	ldr	r3, [r3, #28]
 8017be0:	683a      	ldr	r2, [r7, #0]
 8017be2:	429a      	cmp	r2, r3
 8017be4:	d302      	bcc.n	8017bec <get_fat+0x26>
		val = 1;	/* Internal error */
 8017be6:	2301      	movs	r3, #1
 8017be8:	617b      	str	r3, [r7, #20]
 8017bea:	e0bb      	b.n	8017d64 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8017bec:	f04f 33ff 	mov.w	r3, #4294967295
 8017bf0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8017bf2:	693b      	ldr	r3, [r7, #16]
 8017bf4:	781b      	ldrb	r3, [r3, #0]
 8017bf6:	2b03      	cmp	r3, #3
 8017bf8:	f000 8083 	beq.w	8017d02 <get_fat+0x13c>
 8017bfc:	2b03      	cmp	r3, #3
 8017bfe:	f300 80a7 	bgt.w	8017d50 <get_fat+0x18a>
 8017c02:	2b01      	cmp	r3, #1
 8017c04:	d002      	beq.n	8017c0c <get_fat+0x46>
 8017c06:	2b02      	cmp	r3, #2
 8017c08:	d056      	beq.n	8017cb8 <get_fat+0xf2>
 8017c0a:	e0a1      	b.n	8017d50 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8017c0c:	683b      	ldr	r3, [r7, #0]
 8017c0e:	60fb      	str	r3, [r7, #12]
 8017c10:	68fb      	ldr	r3, [r7, #12]
 8017c12:	085b      	lsrs	r3, r3, #1
 8017c14:	68fa      	ldr	r2, [r7, #12]
 8017c16:	4413      	add	r3, r2
 8017c18:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017c1a:	693b      	ldr	r3, [r7, #16]
 8017c1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017c1e:	693b      	ldr	r3, [r7, #16]
 8017c20:	899b      	ldrh	r3, [r3, #12]
 8017c22:	4619      	mov	r1, r3
 8017c24:	68fb      	ldr	r3, [r7, #12]
 8017c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8017c2a:	4413      	add	r3, r2
 8017c2c:	4619      	mov	r1, r3
 8017c2e:	6938      	ldr	r0, [r7, #16]
 8017c30:	f7ff ff0c 	bl	8017a4c <move_window>
 8017c34:	4603      	mov	r3, r0
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	f040 808d 	bne.w	8017d56 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8017c3c:	68fb      	ldr	r3, [r7, #12]
 8017c3e:	1c5a      	adds	r2, r3, #1
 8017c40:	60fa      	str	r2, [r7, #12]
 8017c42:	693a      	ldr	r2, [r7, #16]
 8017c44:	8992      	ldrh	r2, [r2, #12]
 8017c46:	fbb3 f1f2 	udiv	r1, r3, r2
 8017c4a:	fb01 f202 	mul.w	r2, r1, r2
 8017c4e:	1a9b      	subs	r3, r3, r2
 8017c50:	693a      	ldr	r2, [r7, #16]
 8017c52:	4413      	add	r3, r2
 8017c54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017c58:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017c5a:	693b      	ldr	r3, [r7, #16]
 8017c5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017c5e:	693b      	ldr	r3, [r7, #16]
 8017c60:	899b      	ldrh	r3, [r3, #12]
 8017c62:	4619      	mov	r1, r3
 8017c64:	68fb      	ldr	r3, [r7, #12]
 8017c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8017c6a:	4413      	add	r3, r2
 8017c6c:	4619      	mov	r1, r3
 8017c6e:	6938      	ldr	r0, [r7, #16]
 8017c70:	f7ff feec 	bl	8017a4c <move_window>
 8017c74:	4603      	mov	r3, r0
 8017c76:	2b00      	cmp	r3, #0
 8017c78:	d16f      	bne.n	8017d5a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8017c7a:	693b      	ldr	r3, [r7, #16]
 8017c7c:	899b      	ldrh	r3, [r3, #12]
 8017c7e:	461a      	mov	r2, r3
 8017c80:	68fb      	ldr	r3, [r7, #12]
 8017c82:	fbb3 f1f2 	udiv	r1, r3, r2
 8017c86:	fb01 f202 	mul.w	r2, r1, r2
 8017c8a:	1a9b      	subs	r3, r3, r2
 8017c8c:	693a      	ldr	r2, [r7, #16]
 8017c8e:	4413      	add	r3, r2
 8017c90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017c94:	021b      	lsls	r3, r3, #8
 8017c96:	461a      	mov	r2, r3
 8017c98:	68bb      	ldr	r3, [r7, #8]
 8017c9a:	4313      	orrs	r3, r2
 8017c9c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8017c9e:	683b      	ldr	r3, [r7, #0]
 8017ca0:	f003 0301 	and.w	r3, r3, #1
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	d002      	beq.n	8017cae <get_fat+0xe8>
 8017ca8:	68bb      	ldr	r3, [r7, #8]
 8017caa:	091b      	lsrs	r3, r3, #4
 8017cac:	e002      	b.n	8017cb4 <get_fat+0xee>
 8017cae:	68bb      	ldr	r3, [r7, #8]
 8017cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017cb4:	617b      	str	r3, [r7, #20]
			break;
 8017cb6:	e055      	b.n	8017d64 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8017cb8:	693b      	ldr	r3, [r7, #16]
 8017cba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017cbc:	693b      	ldr	r3, [r7, #16]
 8017cbe:	899b      	ldrh	r3, [r3, #12]
 8017cc0:	085b      	lsrs	r3, r3, #1
 8017cc2:	b29b      	uxth	r3, r3
 8017cc4:	4619      	mov	r1, r3
 8017cc6:	683b      	ldr	r3, [r7, #0]
 8017cc8:	fbb3 f3f1 	udiv	r3, r3, r1
 8017ccc:	4413      	add	r3, r2
 8017cce:	4619      	mov	r1, r3
 8017cd0:	6938      	ldr	r0, [r7, #16]
 8017cd2:	f7ff febb 	bl	8017a4c <move_window>
 8017cd6:	4603      	mov	r3, r0
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d140      	bne.n	8017d5e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8017cdc:	693b      	ldr	r3, [r7, #16]
 8017cde:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017ce2:	683b      	ldr	r3, [r7, #0]
 8017ce4:	005b      	lsls	r3, r3, #1
 8017ce6:	693a      	ldr	r2, [r7, #16]
 8017ce8:	8992      	ldrh	r2, [r2, #12]
 8017cea:	fbb3 f0f2 	udiv	r0, r3, r2
 8017cee:	fb00 f202 	mul.w	r2, r0, r2
 8017cf2:	1a9b      	subs	r3, r3, r2
 8017cf4:	440b      	add	r3, r1
 8017cf6:	4618      	mov	r0, r3
 8017cf8:	f7ff fbf8 	bl	80174ec <ld_word>
 8017cfc:	4603      	mov	r3, r0
 8017cfe:	617b      	str	r3, [r7, #20]
			break;
 8017d00:	e030      	b.n	8017d64 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017d02:	693b      	ldr	r3, [r7, #16]
 8017d04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017d06:	693b      	ldr	r3, [r7, #16]
 8017d08:	899b      	ldrh	r3, [r3, #12]
 8017d0a:	089b      	lsrs	r3, r3, #2
 8017d0c:	b29b      	uxth	r3, r3
 8017d0e:	4619      	mov	r1, r3
 8017d10:	683b      	ldr	r3, [r7, #0]
 8017d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8017d16:	4413      	add	r3, r2
 8017d18:	4619      	mov	r1, r3
 8017d1a:	6938      	ldr	r0, [r7, #16]
 8017d1c:	f7ff fe96 	bl	8017a4c <move_window>
 8017d20:	4603      	mov	r3, r0
 8017d22:	2b00      	cmp	r3, #0
 8017d24:	d11d      	bne.n	8017d62 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8017d26:	693b      	ldr	r3, [r7, #16]
 8017d28:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017d2c:	683b      	ldr	r3, [r7, #0]
 8017d2e:	009b      	lsls	r3, r3, #2
 8017d30:	693a      	ldr	r2, [r7, #16]
 8017d32:	8992      	ldrh	r2, [r2, #12]
 8017d34:	fbb3 f0f2 	udiv	r0, r3, r2
 8017d38:	fb00 f202 	mul.w	r2, r0, r2
 8017d3c:	1a9b      	subs	r3, r3, r2
 8017d3e:	440b      	add	r3, r1
 8017d40:	4618      	mov	r0, r3
 8017d42:	f7ff fbeb 	bl	801751c <ld_dword>
 8017d46:	4603      	mov	r3, r0
 8017d48:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8017d4c:	617b      	str	r3, [r7, #20]
			break;
 8017d4e:	e009      	b.n	8017d64 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8017d50:	2301      	movs	r3, #1
 8017d52:	617b      	str	r3, [r7, #20]
 8017d54:	e006      	b.n	8017d64 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017d56:	bf00      	nop
 8017d58:	e004      	b.n	8017d64 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017d5a:	bf00      	nop
 8017d5c:	e002      	b.n	8017d64 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8017d5e:	bf00      	nop
 8017d60:	e000      	b.n	8017d64 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017d62:	bf00      	nop
		}
	}

	return val;
 8017d64:	697b      	ldr	r3, [r7, #20]
}
 8017d66:	4618      	mov	r0, r3
 8017d68:	3718      	adds	r7, #24
 8017d6a:	46bd      	mov	sp, r7
 8017d6c:	bd80      	pop	{r7, pc}

08017d6e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8017d6e:	b590      	push	{r4, r7, lr}
 8017d70:	b089      	sub	sp, #36	; 0x24
 8017d72:	af00      	add	r7, sp, #0
 8017d74:	60f8      	str	r0, [r7, #12]
 8017d76:	60b9      	str	r1, [r7, #8]
 8017d78:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8017d7a:	2302      	movs	r3, #2
 8017d7c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8017d7e:	68bb      	ldr	r3, [r7, #8]
 8017d80:	2b01      	cmp	r3, #1
 8017d82:	f240 8109 	bls.w	8017f98 <put_fat+0x22a>
 8017d86:	68fb      	ldr	r3, [r7, #12]
 8017d88:	69db      	ldr	r3, [r3, #28]
 8017d8a:	68ba      	ldr	r2, [r7, #8]
 8017d8c:	429a      	cmp	r2, r3
 8017d8e:	f080 8103 	bcs.w	8017f98 <put_fat+0x22a>
		switch (fs->fs_type) {
 8017d92:	68fb      	ldr	r3, [r7, #12]
 8017d94:	781b      	ldrb	r3, [r3, #0]
 8017d96:	2b03      	cmp	r3, #3
 8017d98:	f000 80b6 	beq.w	8017f08 <put_fat+0x19a>
 8017d9c:	2b03      	cmp	r3, #3
 8017d9e:	f300 80fb 	bgt.w	8017f98 <put_fat+0x22a>
 8017da2:	2b01      	cmp	r3, #1
 8017da4:	d003      	beq.n	8017dae <put_fat+0x40>
 8017da6:	2b02      	cmp	r3, #2
 8017da8:	f000 8083 	beq.w	8017eb2 <put_fat+0x144>
 8017dac:	e0f4      	b.n	8017f98 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8017dae:	68bb      	ldr	r3, [r7, #8]
 8017db0:	61bb      	str	r3, [r7, #24]
 8017db2:	69bb      	ldr	r3, [r7, #24]
 8017db4:	085b      	lsrs	r3, r3, #1
 8017db6:	69ba      	ldr	r2, [r7, #24]
 8017db8:	4413      	add	r3, r2
 8017dba:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017dbc:	68fb      	ldr	r3, [r7, #12]
 8017dbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017dc0:	68fb      	ldr	r3, [r7, #12]
 8017dc2:	899b      	ldrh	r3, [r3, #12]
 8017dc4:	4619      	mov	r1, r3
 8017dc6:	69bb      	ldr	r3, [r7, #24]
 8017dc8:	fbb3 f3f1 	udiv	r3, r3, r1
 8017dcc:	4413      	add	r3, r2
 8017dce:	4619      	mov	r1, r3
 8017dd0:	68f8      	ldr	r0, [r7, #12]
 8017dd2:	f7ff fe3b 	bl	8017a4c <move_window>
 8017dd6:	4603      	mov	r3, r0
 8017dd8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017dda:	7ffb      	ldrb	r3, [r7, #31]
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	f040 80d4 	bne.w	8017f8a <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8017de2:	68fb      	ldr	r3, [r7, #12]
 8017de4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017de8:	69bb      	ldr	r3, [r7, #24]
 8017dea:	1c5a      	adds	r2, r3, #1
 8017dec:	61ba      	str	r2, [r7, #24]
 8017dee:	68fa      	ldr	r2, [r7, #12]
 8017df0:	8992      	ldrh	r2, [r2, #12]
 8017df2:	fbb3 f0f2 	udiv	r0, r3, r2
 8017df6:	fb00 f202 	mul.w	r2, r0, r2
 8017dfa:	1a9b      	subs	r3, r3, r2
 8017dfc:	440b      	add	r3, r1
 8017dfe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8017e00:	68bb      	ldr	r3, [r7, #8]
 8017e02:	f003 0301 	and.w	r3, r3, #1
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	d00d      	beq.n	8017e26 <put_fat+0xb8>
 8017e0a:	697b      	ldr	r3, [r7, #20]
 8017e0c:	781b      	ldrb	r3, [r3, #0]
 8017e0e:	b25b      	sxtb	r3, r3
 8017e10:	f003 030f 	and.w	r3, r3, #15
 8017e14:	b25a      	sxtb	r2, r3
 8017e16:	687b      	ldr	r3, [r7, #4]
 8017e18:	b2db      	uxtb	r3, r3
 8017e1a:	011b      	lsls	r3, r3, #4
 8017e1c:	b25b      	sxtb	r3, r3
 8017e1e:	4313      	orrs	r3, r2
 8017e20:	b25b      	sxtb	r3, r3
 8017e22:	b2db      	uxtb	r3, r3
 8017e24:	e001      	b.n	8017e2a <put_fat+0xbc>
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	b2db      	uxtb	r3, r3
 8017e2a:	697a      	ldr	r2, [r7, #20]
 8017e2c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8017e2e:	68fb      	ldr	r3, [r7, #12]
 8017e30:	2201      	movs	r2, #1
 8017e32:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017e38:	68fb      	ldr	r3, [r7, #12]
 8017e3a:	899b      	ldrh	r3, [r3, #12]
 8017e3c:	4619      	mov	r1, r3
 8017e3e:	69bb      	ldr	r3, [r7, #24]
 8017e40:	fbb3 f3f1 	udiv	r3, r3, r1
 8017e44:	4413      	add	r3, r2
 8017e46:	4619      	mov	r1, r3
 8017e48:	68f8      	ldr	r0, [r7, #12]
 8017e4a:	f7ff fdff 	bl	8017a4c <move_window>
 8017e4e:	4603      	mov	r3, r0
 8017e50:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017e52:	7ffb      	ldrb	r3, [r7, #31]
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	f040 809a 	bne.w	8017f8e <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8017e5a:	68fb      	ldr	r3, [r7, #12]
 8017e5c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017e60:	68fb      	ldr	r3, [r7, #12]
 8017e62:	899b      	ldrh	r3, [r3, #12]
 8017e64:	461a      	mov	r2, r3
 8017e66:	69bb      	ldr	r3, [r7, #24]
 8017e68:	fbb3 f0f2 	udiv	r0, r3, r2
 8017e6c:	fb00 f202 	mul.w	r2, r0, r2
 8017e70:	1a9b      	subs	r3, r3, r2
 8017e72:	440b      	add	r3, r1
 8017e74:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8017e76:	68bb      	ldr	r3, [r7, #8]
 8017e78:	f003 0301 	and.w	r3, r3, #1
 8017e7c:	2b00      	cmp	r3, #0
 8017e7e:	d003      	beq.n	8017e88 <put_fat+0x11a>
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	091b      	lsrs	r3, r3, #4
 8017e84:	b2db      	uxtb	r3, r3
 8017e86:	e00e      	b.n	8017ea6 <put_fat+0x138>
 8017e88:	697b      	ldr	r3, [r7, #20]
 8017e8a:	781b      	ldrb	r3, [r3, #0]
 8017e8c:	b25b      	sxtb	r3, r3
 8017e8e:	f023 030f 	bic.w	r3, r3, #15
 8017e92:	b25a      	sxtb	r2, r3
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	0a1b      	lsrs	r3, r3, #8
 8017e98:	b25b      	sxtb	r3, r3
 8017e9a:	f003 030f 	and.w	r3, r3, #15
 8017e9e:	b25b      	sxtb	r3, r3
 8017ea0:	4313      	orrs	r3, r2
 8017ea2:	b25b      	sxtb	r3, r3
 8017ea4:	b2db      	uxtb	r3, r3
 8017ea6:	697a      	ldr	r2, [r7, #20]
 8017ea8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8017eaa:	68fb      	ldr	r3, [r7, #12]
 8017eac:	2201      	movs	r2, #1
 8017eae:	70da      	strb	r2, [r3, #3]
			break;
 8017eb0:	e072      	b.n	8017f98 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8017eb2:	68fb      	ldr	r3, [r7, #12]
 8017eb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017eb6:	68fb      	ldr	r3, [r7, #12]
 8017eb8:	899b      	ldrh	r3, [r3, #12]
 8017eba:	085b      	lsrs	r3, r3, #1
 8017ebc:	b29b      	uxth	r3, r3
 8017ebe:	4619      	mov	r1, r3
 8017ec0:	68bb      	ldr	r3, [r7, #8]
 8017ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8017ec6:	4413      	add	r3, r2
 8017ec8:	4619      	mov	r1, r3
 8017eca:	68f8      	ldr	r0, [r7, #12]
 8017ecc:	f7ff fdbe 	bl	8017a4c <move_window>
 8017ed0:	4603      	mov	r3, r0
 8017ed2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017ed4:	7ffb      	ldrb	r3, [r7, #31]
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	d15b      	bne.n	8017f92 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8017eda:	68fb      	ldr	r3, [r7, #12]
 8017edc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017ee0:	68bb      	ldr	r3, [r7, #8]
 8017ee2:	005b      	lsls	r3, r3, #1
 8017ee4:	68fa      	ldr	r2, [r7, #12]
 8017ee6:	8992      	ldrh	r2, [r2, #12]
 8017ee8:	fbb3 f0f2 	udiv	r0, r3, r2
 8017eec:	fb00 f202 	mul.w	r2, r0, r2
 8017ef0:	1a9b      	subs	r3, r3, r2
 8017ef2:	440b      	add	r3, r1
 8017ef4:	687a      	ldr	r2, [r7, #4]
 8017ef6:	b292      	uxth	r2, r2
 8017ef8:	4611      	mov	r1, r2
 8017efa:	4618      	mov	r0, r3
 8017efc:	f7ff fb31 	bl	8017562 <st_word>
			fs->wflag = 1;
 8017f00:	68fb      	ldr	r3, [r7, #12]
 8017f02:	2201      	movs	r2, #1
 8017f04:	70da      	strb	r2, [r3, #3]
			break;
 8017f06:	e047      	b.n	8017f98 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8017f08:	68fb      	ldr	r3, [r7, #12]
 8017f0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017f0c:	68fb      	ldr	r3, [r7, #12]
 8017f0e:	899b      	ldrh	r3, [r3, #12]
 8017f10:	089b      	lsrs	r3, r3, #2
 8017f12:	b29b      	uxth	r3, r3
 8017f14:	4619      	mov	r1, r3
 8017f16:	68bb      	ldr	r3, [r7, #8]
 8017f18:	fbb3 f3f1 	udiv	r3, r3, r1
 8017f1c:	4413      	add	r3, r2
 8017f1e:	4619      	mov	r1, r3
 8017f20:	68f8      	ldr	r0, [r7, #12]
 8017f22:	f7ff fd93 	bl	8017a4c <move_window>
 8017f26:	4603      	mov	r3, r0
 8017f28:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017f2a:	7ffb      	ldrb	r3, [r7, #31]
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	d132      	bne.n	8017f96 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8017f36:	68fb      	ldr	r3, [r7, #12]
 8017f38:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017f3c:	68bb      	ldr	r3, [r7, #8]
 8017f3e:	009b      	lsls	r3, r3, #2
 8017f40:	68fa      	ldr	r2, [r7, #12]
 8017f42:	8992      	ldrh	r2, [r2, #12]
 8017f44:	fbb3 f0f2 	udiv	r0, r3, r2
 8017f48:	fb00 f202 	mul.w	r2, r0, r2
 8017f4c:	1a9b      	subs	r3, r3, r2
 8017f4e:	440b      	add	r3, r1
 8017f50:	4618      	mov	r0, r3
 8017f52:	f7ff fae3 	bl	801751c <ld_dword>
 8017f56:	4603      	mov	r3, r0
 8017f58:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8017f5c:	4323      	orrs	r3, r4
 8017f5e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8017f60:	68fb      	ldr	r3, [r7, #12]
 8017f62:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017f66:	68bb      	ldr	r3, [r7, #8]
 8017f68:	009b      	lsls	r3, r3, #2
 8017f6a:	68fa      	ldr	r2, [r7, #12]
 8017f6c:	8992      	ldrh	r2, [r2, #12]
 8017f6e:	fbb3 f0f2 	udiv	r0, r3, r2
 8017f72:	fb00 f202 	mul.w	r2, r0, r2
 8017f76:	1a9b      	subs	r3, r3, r2
 8017f78:	440b      	add	r3, r1
 8017f7a:	6879      	ldr	r1, [r7, #4]
 8017f7c:	4618      	mov	r0, r3
 8017f7e:	f7ff fb0b 	bl	8017598 <st_dword>
			fs->wflag = 1;
 8017f82:	68fb      	ldr	r3, [r7, #12]
 8017f84:	2201      	movs	r2, #1
 8017f86:	70da      	strb	r2, [r3, #3]
			break;
 8017f88:	e006      	b.n	8017f98 <put_fat+0x22a>
			if (res != FR_OK) break;
 8017f8a:	bf00      	nop
 8017f8c:	e004      	b.n	8017f98 <put_fat+0x22a>
			if (res != FR_OK) break;
 8017f8e:	bf00      	nop
 8017f90:	e002      	b.n	8017f98 <put_fat+0x22a>
			if (res != FR_OK) break;
 8017f92:	bf00      	nop
 8017f94:	e000      	b.n	8017f98 <put_fat+0x22a>
			if (res != FR_OK) break;
 8017f96:	bf00      	nop
		}
	}
	return res;
 8017f98:	7ffb      	ldrb	r3, [r7, #31]
}
 8017f9a:	4618      	mov	r0, r3
 8017f9c:	3724      	adds	r7, #36	; 0x24
 8017f9e:	46bd      	mov	sp, r7
 8017fa0:	bd90      	pop	{r4, r7, pc}

08017fa2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8017fa2:	b580      	push	{r7, lr}
 8017fa4:	b088      	sub	sp, #32
 8017fa6:	af00      	add	r7, sp, #0
 8017fa8:	60f8      	str	r0, [r7, #12]
 8017faa:	60b9      	str	r1, [r7, #8]
 8017fac:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8017fae:	2300      	movs	r3, #0
 8017fb0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8017fb2:	68fb      	ldr	r3, [r7, #12]
 8017fb4:	681b      	ldr	r3, [r3, #0]
 8017fb6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8017fb8:	68bb      	ldr	r3, [r7, #8]
 8017fba:	2b01      	cmp	r3, #1
 8017fbc:	d904      	bls.n	8017fc8 <remove_chain+0x26>
 8017fbe:	69bb      	ldr	r3, [r7, #24]
 8017fc0:	69db      	ldr	r3, [r3, #28]
 8017fc2:	68ba      	ldr	r2, [r7, #8]
 8017fc4:	429a      	cmp	r2, r3
 8017fc6:	d301      	bcc.n	8017fcc <remove_chain+0x2a>
 8017fc8:	2302      	movs	r3, #2
 8017fca:	e04b      	b.n	8018064 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	d00c      	beq.n	8017fec <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8017fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8017fd6:	6879      	ldr	r1, [r7, #4]
 8017fd8:	69b8      	ldr	r0, [r7, #24]
 8017fda:	f7ff fec8 	bl	8017d6e <put_fat>
 8017fde:	4603      	mov	r3, r0
 8017fe0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8017fe2:	7ffb      	ldrb	r3, [r7, #31]
 8017fe4:	2b00      	cmp	r3, #0
 8017fe6:	d001      	beq.n	8017fec <remove_chain+0x4a>
 8017fe8:	7ffb      	ldrb	r3, [r7, #31]
 8017fea:	e03b      	b.n	8018064 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8017fec:	68b9      	ldr	r1, [r7, #8]
 8017fee:	68f8      	ldr	r0, [r7, #12]
 8017ff0:	f7ff fde9 	bl	8017bc6 <get_fat>
 8017ff4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8017ff6:	697b      	ldr	r3, [r7, #20]
 8017ff8:	2b00      	cmp	r3, #0
 8017ffa:	d031      	beq.n	8018060 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8017ffc:	697b      	ldr	r3, [r7, #20]
 8017ffe:	2b01      	cmp	r3, #1
 8018000:	d101      	bne.n	8018006 <remove_chain+0x64>
 8018002:	2302      	movs	r3, #2
 8018004:	e02e      	b.n	8018064 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8018006:	697b      	ldr	r3, [r7, #20]
 8018008:	f1b3 3fff 	cmp.w	r3, #4294967295
 801800c:	d101      	bne.n	8018012 <remove_chain+0x70>
 801800e:	2301      	movs	r3, #1
 8018010:	e028      	b.n	8018064 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8018012:	2200      	movs	r2, #0
 8018014:	68b9      	ldr	r1, [r7, #8]
 8018016:	69b8      	ldr	r0, [r7, #24]
 8018018:	f7ff fea9 	bl	8017d6e <put_fat>
 801801c:	4603      	mov	r3, r0
 801801e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8018020:	7ffb      	ldrb	r3, [r7, #31]
 8018022:	2b00      	cmp	r3, #0
 8018024:	d001      	beq.n	801802a <remove_chain+0x88>
 8018026:	7ffb      	ldrb	r3, [r7, #31]
 8018028:	e01c      	b.n	8018064 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801802a:	69bb      	ldr	r3, [r7, #24]
 801802c:	699a      	ldr	r2, [r3, #24]
 801802e:	69bb      	ldr	r3, [r7, #24]
 8018030:	69db      	ldr	r3, [r3, #28]
 8018032:	3b02      	subs	r3, #2
 8018034:	429a      	cmp	r2, r3
 8018036:	d20b      	bcs.n	8018050 <remove_chain+0xae>
			fs->free_clst++;
 8018038:	69bb      	ldr	r3, [r7, #24]
 801803a:	699b      	ldr	r3, [r3, #24]
 801803c:	1c5a      	adds	r2, r3, #1
 801803e:	69bb      	ldr	r3, [r7, #24]
 8018040:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8018042:	69bb      	ldr	r3, [r7, #24]
 8018044:	791b      	ldrb	r3, [r3, #4]
 8018046:	f043 0301 	orr.w	r3, r3, #1
 801804a:	b2da      	uxtb	r2, r3
 801804c:	69bb      	ldr	r3, [r7, #24]
 801804e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8018050:	697b      	ldr	r3, [r7, #20]
 8018052:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8018054:	69bb      	ldr	r3, [r7, #24]
 8018056:	69db      	ldr	r3, [r3, #28]
 8018058:	68ba      	ldr	r2, [r7, #8]
 801805a:	429a      	cmp	r2, r3
 801805c:	d3c6      	bcc.n	8017fec <remove_chain+0x4a>
 801805e:	e000      	b.n	8018062 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8018060:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8018062:	2300      	movs	r3, #0
}
 8018064:	4618      	mov	r0, r3
 8018066:	3720      	adds	r7, #32
 8018068:	46bd      	mov	sp, r7
 801806a:	bd80      	pop	{r7, pc}

0801806c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801806c:	b580      	push	{r7, lr}
 801806e:	b088      	sub	sp, #32
 8018070:	af00      	add	r7, sp, #0
 8018072:	6078      	str	r0, [r7, #4]
 8018074:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	681b      	ldr	r3, [r3, #0]
 801807a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801807c:	683b      	ldr	r3, [r7, #0]
 801807e:	2b00      	cmp	r3, #0
 8018080:	d10d      	bne.n	801809e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8018082:	693b      	ldr	r3, [r7, #16]
 8018084:	695b      	ldr	r3, [r3, #20]
 8018086:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8018088:	69bb      	ldr	r3, [r7, #24]
 801808a:	2b00      	cmp	r3, #0
 801808c:	d004      	beq.n	8018098 <create_chain+0x2c>
 801808e:	693b      	ldr	r3, [r7, #16]
 8018090:	69db      	ldr	r3, [r3, #28]
 8018092:	69ba      	ldr	r2, [r7, #24]
 8018094:	429a      	cmp	r2, r3
 8018096:	d31b      	bcc.n	80180d0 <create_chain+0x64>
 8018098:	2301      	movs	r3, #1
 801809a:	61bb      	str	r3, [r7, #24]
 801809c:	e018      	b.n	80180d0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801809e:	6839      	ldr	r1, [r7, #0]
 80180a0:	6878      	ldr	r0, [r7, #4]
 80180a2:	f7ff fd90 	bl	8017bc6 <get_fat>
 80180a6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80180a8:	68fb      	ldr	r3, [r7, #12]
 80180aa:	2b01      	cmp	r3, #1
 80180ac:	d801      	bhi.n	80180b2 <create_chain+0x46>
 80180ae:	2301      	movs	r3, #1
 80180b0:	e070      	b.n	8018194 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80180b2:	68fb      	ldr	r3, [r7, #12]
 80180b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80180b8:	d101      	bne.n	80180be <create_chain+0x52>
 80180ba:	68fb      	ldr	r3, [r7, #12]
 80180bc:	e06a      	b.n	8018194 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80180be:	693b      	ldr	r3, [r7, #16]
 80180c0:	69db      	ldr	r3, [r3, #28]
 80180c2:	68fa      	ldr	r2, [r7, #12]
 80180c4:	429a      	cmp	r2, r3
 80180c6:	d201      	bcs.n	80180cc <create_chain+0x60>
 80180c8:	68fb      	ldr	r3, [r7, #12]
 80180ca:	e063      	b.n	8018194 <create_chain+0x128>
		scl = clst;
 80180cc:	683b      	ldr	r3, [r7, #0]
 80180ce:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80180d0:	69bb      	ldr	r3, [r7, #24]
 80180d2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80180d4:	69fb      	ldr	r3, [r7, #28]
 80180d6:	3301      	adds	r3, #1
 80180d8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80180da:	693b      	ldr	r3, [r7, #16]
 80180dc:	69db      	ldr	r3, [r3, #28]
 80180de:	69fa      	ldr	r2, [r7, #28]
 80180e0:	429a      	cmp	r2, r3
 80180e2:	d307      	bcc.n	80180f4 <create_chain+0x88>
				ncl = 2;
 80180e4:	2302      	movs	r3, #2
 80180e6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80180e8:	69fa      	ldr	r2, [r7, #28]
 80180ea:	69bb      	ldr	r3, [r7, #24]
 80180ec:	429a      	cmp	r2, r3
 80180ee:	d901      	bls.n	80180f4 <create_chain+0x88>
 80180f0:	2300      	movs	r3, #0
 80180f2:	e04f      	b.n	8018194 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80180f4:	69f9      	ldr	r1, [r7, #28]
 80180f6:	6878      	ldr	r0, [r7, #4]
 80180f8:	f7ff fd65 	bl	8017bc6 <get_fat>
 80180fc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80180fe:	68fb      	ldr	r3, [r7, #12]
 8018100:	2b00      	cmp	r3, #0
 8018102:	d00e      	beq.n	8018122 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8018104:	68fb      	ldr	r3, [r7, #12]
 8018106:	2b01      	cmp	r3, #1
 8018108:	d003      	beq.n	8018112 <create_chain+0xa6>
 801810a:	68fb      	ldr	r3, [r7, #12]
 801810c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018110:	d101      	bne.n	8018116 <create_chain+0xaa>
 8018112:	68fb      	ldr	r3, [r7, #12]
 8018114:	e03e      	b.n	8018194 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8018116:	69fa      	ldr	r2, [r7, #28]
 8018118:	69bb      	ldr	r3, [r7, #24]
 801811a:	429a      	cmp	r2, r3
 801811c:	d1da      	bne.n	80180d4 <create_chain+0x68>
 801811e:	2300      	movs	r3, #0
 8018120:	e038      	b.n	8018194 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8018122:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8018124:	f04f 32ff 	mov.w	r2, #4294967295
 8018128:	69f9      	ldr	r1, [r7, #28]
 801812a:	6938      	ldr	r0, [r7, #16]
 801812c:	f7ff fe1f 	bl	8017d6e <put_fat>
 8018130:	4603      	mov	r3, r0
 8018132:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8018134:	7dfb      	ldrb	r3, [r7, #23]
 8018136:	2b00      	cmp	r3, #0
 8018138:	d109      	bne.n	801814e <create_chain+0xe2>
 801813a:	683b      	ldr	r3, [r7, #0]
 801813c:	2b00      	cmp	r3, #0
 801813e:	d006      	beq.n	801814e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8018140:	69fa      	ldr	r2, [r7, #28]
 8018142:	6839      	ldr	r1, [r7, #0]
 8018144:	6938      	ldr	r0, [r7, #16]
 8018146:	f7ff fe12 	bl	8017d6e <put_fat>
 801814a:	4603      	mov	r3, r0
 801814c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801814e:	7dfb      	ldrb	r3, [r7, #23]
 8018150:	2b00      	cmp	r3, #0
 8018152:	d116      	bne.n	8018182 <create_chain+0x116>
		fs->last_clst = ncl;
 8018154:	693b      	ldr	r3, [r7, #16]
 8018156:	69fa      	ldr	r2, [r7, #28]
 8018158:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801815a:	693b      	ldr	r3, [r7, #16]
 801815c:	699a      	ldr	r2, [r3, #24]
 801815e:	693b      	ldr	r3, [r7, #16]
 8018160:	69db      	ldr	r3, [r3, #28]
 8018162:	3b02      	subs	r3, #2
 8018164:	429a      	cmp	r2, r3
 8018166:	d804      	bhi.n	8018172 <create_chain+0x106>
 8018168:	693b      	ldr	r3, [r7, #16]
 801816a:	699b      	ldr	r3, [r3, #24]
 801816c:	1e5a      	subs	r2, r3, #1
 801816e:	693b      	ldr	r3, [r7, #16]
 8018170:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8018172:	693b      	ldr	r3, [r7, #16]
 8018174:	791b      	ldrb	r3, [r3, #4]
 8018176:	f043 0301 	orr.w	r3, r3, #1
 801817a:	b2da      	uxtb	r2, r3
 801817c:	693b      	ldr	r3, [r7, #16]
 801817e:	711a      	strb	r2, [r3, #4]
 8018180:	e007      	b.n	8018192 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8018182:	7dfb      	ldrb	r3, [r7, #23]
 8018184:	2b01      	cmp	r3, #1
 8018186:	d102      	bne.n	801818e <create_chain+0x122>
 8018188:	f04f 33ff 	mov.w	r3, #4294967295
 801818c:	e000      	b.n	8018190 <create_chain+0x124>
 801818e:	2301      	movs	r3, #1
 8018190:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8018192:	69fb      	ldr	r3, [r7, #28]
}
 8018194:	4618      	mov	r0, r3
 8018196:	3720      	adds	r7, #32
 8018198:	46bd      	mov	sp, r7
 801819a:	bd80      	pop	{r7, pc}

0801819c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801819c:	b480      	push	{r7}
 801819e:	b087      	sub	sp, #28
 80181a0:	af00      	add	r7, sp, #0
 80181a2:	6078      	str	r0, [r7, #4]
 80181a4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	681b      	ldr	r3, [r3, #0]
 80181aa:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181b0:	3304      	adds	r3, #4
 80181b2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80181b4:	68fb      	ldr	r3, [r7, #12]
 80181b6:	899b      	ldrh	r3, [r3, #12]
 80181b8:	461a      	mov	r2, r3
 80181ba:	683b      	ldr	r3, [r7, #0]
 80181bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80181c0:	68fa      	ldr	r2, [r7, #12]
 80181c2:	8952      	ldrh	r2, [r2, #10]
 80181c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80181c8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80181ca:	693b      	ldr	r3, [r7, #16]
 80181cc:	1d1a      	adds	r2, r3, #4
 80181ce:	613a      	str	r2, [r7, #16]
 80181d0:	681b      	ldr	r3, [r3, #0]
 80181d2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80181d4:	68bb      	ldr	r3, [r7, #8]
 80181d6:	2b00      	cmp	r3, #0
 80181d8:	d101      	bne.n	80181de <clmt_clust+0x42>
 80181da:	2300      	movs	r3, #0
 80181dc:	e010      	b.n	8018200 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80181de:	697a      	ldr	r2, [r7, #20]
 80181e0:	68bb      	ldr	r3, [r7, #8]
 80181e2:	429a      	cmp	r2, r3
 80181e4:	d307      	bcc.n	80181f6 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80181e6:	697a      	ldr	r2, [r7, #20]
 80181e8:	68bb      	ldr	r3, [r7, #8]
 80181ea:	1ad3      	subs	r3, r2, r3
 80181ec:	617b      	str	r3, [r7, #20]
 80181ee:	693b      	ldr	r3, [r7, #16]
 80181f0:	3304      	adds	r3, #4
 80181f2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80181f4:	e7e9      	b.n	80181ca <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80181f6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80181f8:	693b      	ldr	r3, [r7, #16]
 80181fa:	681a      	ldr	r2, [r3, #0]
 80181fc:	697b      	ldr	r3, [r7, #20]
 80181fe:	4413      	add	r3, r2
}
 8018200:	4618      	mov	r0, r3
 8018202:	371c      	adds	r7, #28
 8018204:	46bd      	mov	sp, r7
 8018206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801820a:	4770      	bx	lr

0801820c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801820c:	b580      	push	{r7, lr}
 801820e:	b086      	sub	sp, #24
 8018210:	af00      	add	r7, sp, #0
 8018212:	6078      	str	r0, [r7, #4]
 8018214:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8018216:	687b      	ldr	r3, [r7, #4]
 8018218:	681b      	ldr	r3, [r3, #0]
 801821a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801821c:	683b      	ldr	r3, [r7, #0]
 801821e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8018222:	d204      	bcs.n	801822e <dir_sdi+0x22>
 8018224:	683b      	ldr	r3, [r7, #0]
 8018226:	f003 031f 	and.w	r3, r3, #31
 801822a:	2b00      	cmp	r3, #0
 801822c:	d001      	beq.n	8018232 <dir_sdi+0x26>
		return FR_INT_ERR;
 801822e:	2302      	movs	r3, #2
 8018230:	e071      	b.n	8018316 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	683a      	ldr	r2, [r7, #0]
 8018236:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	689b      	ldr	r3, [r3, #8]
 801823c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801823e:	697b      	ldr	r3, [r7, #20]
 8018240:	2b00      	cmp	r3, #0
 8018242:	d106      	bne.n	8018252 <dir_sdi+0x46>
 8018244:	693b      	ldr	r3, [r7, #16]
 8018246:	781b      	ldrb	r3, [r3, #0]
 8018248:	2b02      	cmp	r3, #2
 801824a:	d902      	bls.n	8018252 <dir_sdi+0x46>
		clst = fs->dirbase;
 801824c:	693b      	ldr	r3, [r7, #16]
 801824e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018250:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8018252:	697b      	ldr	r3, [r7, #20]
 8018254:	2b00      	cmp	r3, #0
 8018256:	d10c      	bne.n	8018272 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8018258:	683b      	ldr	r3, [r7, #0]
 801825a:	095b      	lsrs	r3, r3, #5
 801825c:	693a      	ldr	r2, [r7, #16]
 801825e:	8912      	ldrh	r2, [r2, #8]
 8018260:	4293      	cmp	r3, r2
 8018262:	d301      	bcc.n	8018268 <dir_sdi+0x5c>
 8018264:	2302      	movs	r3, #2
 8018266:	e056      	b.n	8018316 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8018268:	693b      	ldr	r3, [r7, #16]
 801826a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	61da      	str	r2, [r3, #28]
 8018270:	e02d      	b.n	80182ce <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8018272:	693b      	ldr	r3, [r7, #16]
 8018274:	895b      	ldrh	r3, [r3, #10]
 8018276:	461a      	mov	r2, r3
 8018278:	693b      	ldr	r3, [r7, #16]
 801827a:	899b      	ldrh	r3, [r3, #12]
 801827c:	fb02 f303 	mul.w	r3, r2, r3
 8018280:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8018282:	e019      	b.n	80182b8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	6979      	ldr	r1, [r7, #20]
 8018288:	4618      	mov	r0, r3
 801828a:	f7ff fc9c 	bl	8017bc6 <get_fat>
 801828e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8018290:	697b      	ldr	r3, [r7, #20]
 8018292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018296:	d101      	bne.n	801829c <dir_sdi+0x90>
 8018298:	2301      	movs	r3, #1
 801829a:	e03c      	b.n	8018316 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801829c:	697b      	ldr	r3, [r7, #20]
 801829e:	2b01      	cmp	r3, #1
 80182a0:	d904      	bls.n	80182ac <dir_sdi+0xa0>
 80182a2:	693b      	ldr	r3, [r7, #16]
 80182a4:	69db      	ldr	r3, [r3, #28]
 80182a6:	697a      	ldr	r2, [r7, #20]
 80182a8:	429a      	cmp	r2, r3
 80182aa:	d301      	bcc.n	80182b0 <dir_sdi+0xa4>
 80182ac:	2302      	movs	r3, #2
 80182ae:	e032      	b.n	8018316 <dir_sdi+0x10a>
			ofs -= csz;
 80182b0:	683a      	ldr	r2, [r7, #0]
 80182b2:	68fb      	ldr	r3, [r7, #12]
 80182b4:	1ad3      	subs	r3, r2, r3
 80182b6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80182b8:	683a      	ldr	r2, [r7, #0]
 80182ba:	68fb      	ldr	r3, [r7, #12]
 80182bc:	429a      	cmp	r2, r3
 80182be:	d2e1      	bcs.n	8018284 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80182c0:	6979      	ldr	r1, [r7, #20]
 80182c2:	6938      	ldr	r0, [r7, #16]
 80182c4:	f7ff fc60 	bl	8017b88 <clust2sect>
 80182c8:	4602      	mov	r2, r0
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	697a      	ldr	r2, [r7, #20]
 80182d2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	69db      	ldr	r3, [r3, #28]
 80182d8:	2b00      	cmp	r3, #0
 80182da:	d101      	bne.n	80182e0 <dir_sdi+0xd4>
 80182dc:	2302      	movs	r3, #2
 80182de:	e01a      	b.n	8018316 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	69da      	ldr	r2, [r3, #28]
 80182e4:	693b      	ldr	r3, [r7, #16]
 80182e6:	899b      	ldrh	r3, [r3, #12]
 80182e8:	4619      	mov	r1, r3
 80182ea:	683b      	ldr	r3, [r7, #0]
 80182ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80182f0:	441a      	add	r2, r3
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80182f6:	693b      	ldr	r3, [r7, #16]
 80182f8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80182fc:	693b      	ldr	r3, [r7, #16]
 80182fe:	899b      	ldrh	r3, [r3, #12]
 8018300:	461a      	mov	r2, r3
 8018302:	683b      	ldr	r3, [r7, #0]
 8018304:	fbb3 f0f2 	udiv	r0, r3, r2
 8018308:	fb00 f202 	mul.w	r2, r0, r2
 801830c:	1a9b      	subs	r3, r3, r2
 801830e:	18ca      	adds	r2, r1, r3
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8018314:	2300      	movs	r3, #0
}
 8018316:	4618      	mov	r0, r3
 8018318:	3718      	adds	r7, #24
 801831a:	46bd      	mov	sp, r7
 801831c:	bd80      	pop	{r7, pc}

0801831e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801831e:	b580      	push	{r7, lr}
 8018320:	b086      	sub	sp, #24
 8018322:	af00      	add	r7, sp, #0
 8018324:	6078      	str	r0, [r7, #4]
 8018326:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	681b      	ldr	r3, [r3, #0]
 801832c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	695b      	ldr	r3, [r3, #20]
 8018332:	3320      	adds	r3, #32
 8018334:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	69db      	ldr	r3, [r3, #28]
 801833a:	2b00      	cmp	r3, #0
 801833c:	d003      	beq.n	8018346 <dir_next+0x28>
 801833e:	68bb      	ldr	r3, [r7, #8]
 8018340:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8018344:	d301      	bcc.n	801834a <dir_next+0x2c>
 8018346:	2304      	movs	r3, #4
 8018348:	e0bb      	b.n	80184c2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801834a:	68fb      	ldr	r3, [r7, #12]
 801834c:	899b      	ldrh	r3, [r3, #12]
 801834e:	461a      	mov	r2, r3
 8018350:	68bb      	ldr	r3, [r7, #8]
 8018352:	fbb3 f1f2 	udiv	r1, r3, r2
 8018356:	fb01 f202 	mul.w	r2, r1, r2
 801835a:	1a9b      	subs	r3, r3, r2
 801835c:	2b00      	cmp	r3, #0
 801835e:	f040 809d 	bne.w	801849c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	69db      	ldr	r3, [r3, #28]
 8018366:	1c5a      	adds	r2, r3, #1
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	699b      	ldr	r3, [r3, #24]
 8018370:	2b00      	cmp	r3, #0
 8018372:	d10b      	bne.n	801838c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8018374:	68bb      	ldr	r3, [r7, #8]
 8018376:	095b      	lsrs	r3, r3, #5
 8018378:	68fa      	ldr	r2, [r7, #12]
 801837a:	8912      	ldrh	r2, [r2, #8]
 801837c:	4293      	cmp	r3, r2
 801837e:	f0c0 808d 	bcc.w	801849c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	2200      	movs	r2, #0
 8018386:	61da      	str	r2, [r3, #28]
 8018388:	2304      	movs	r3, #4
 801838a:	e09a      	b.n	80184c2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801838c:	68fb      	ldr	r3, [r7, #12]
 801838e:	899b      	ldrh	r3, [r3, #12]
 8018390:	461a      	mov	r2, r3
 8018392:	68bb      	ldr	r3, [r7, #8]
 8018394:	fbb3 f3f2 	udiv	r3, r3, r2
 8018398:	68fa      	ldr	r2, [r7, #12]
 801839a:	8952      	ldrh	r2, [r2, #10]
 801839c:	3a01      	subs	r2, #1
 801839e:	4013      	ands	r3, r2
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	d17b      	bne.n	801849c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80183a4:	687a      	ldr	r2, [r7, #4]
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	699b      	ldr	r3, [r3, #24]
 80183aa:	4619      	mov	r1, r3
 80183ac:	4610      	mov	r0, r2
 80183ae:	f7ff fc0a 	bl	8017bc6 <get_fat>
 80183b2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80183b4:	697b      	ldr	r3, [r7, #20]
 80183b6:	2b01      	cmp	r3, #1
 80183b8:	d801      	bhi.n	80183be <dir_next+0xa0>
 80183ba:	2302      	movs	r3, #2
 80183bc:	e081      	b.n	80184c2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80183be:	697b      	ldr	r3, [r7, #20]
 80183c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80183c4:	d101      	bne.n	80183ca <dir_next+0xac>
 80183c6:	2301      	movs	r3, #1
 80183c8:	e07b      	b.n	80184c2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80183ca:	68fb      	ldr	r3, [r7, #12]
 80183cc:	69db      	ldr	r3, [r3, #28]
 80183ce:	697a      	ldr	r2, [r7, #20]
 80183d0:	429a      	cmp	r2, r3
 80183d2:	d359      	bcc.n	8018488 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80183d4:	683b      	ldr	r3, [r7, #0]
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	d104      	bne.n	80183e4 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80183da:	687b      	ldr	r3, [r7, #4]
 80183dc:	2200      	movs	r2, #0
 80183de:	61da      	str	r2, [r3, #28]
 80183e0:	2304      	movs	r3, #4
 80183e2:	e06e      	b.n	80184c2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80183e4:	687a      	ldr	r2, [r7, #4]
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	699b      	ldr	r3, [r3, #24]
 80183ea:	4619      	mov	r1, r3
 80183ec:	4610      	mov	r0, r2
 80183ee:	f7ff fe3d 	bl	801806c <create_chain>
 80183f2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80183f4:	697b      	ldr	r3, [r7, #20]
 80183f6:	2b00      	cmp	r3, #0
 80183f8:	d101      	bne.n	80183fe <dir_next+0xe0>
 80183fa:	2307      	movs	r3, #7
 80183fc:	e061      	b.n	80184c2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80183fe:	697b      	ldr	r3, [r7, #20]
 8018400:	2b01      	cmp	r3, #1
 8018402:	d101      	bne.n	8018408 <dir_next+0xea>
 8018404:	2302      	movs	r3, #2
 8018406:	e05c      	b.n	80184c2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8018408:	697b      	ldr	r3, [r7, #20]
 801840a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801840e:	d101      	bne.n	8018414 <dir_next+0xf6>
 8018410:	2301      	movs	r3, #1
 8018412:	e056      	b.n	80184c2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8018414:	68f8      	ldr	r0, [r7, #12]
 8018416:	f7ff fad5 	bl	80179c4 <sync_window>
 801841a:	4603      	mov	r3, r0
 801841c:	2b00      	cmp	r3, #0
 801841e:	d001      	beq.n	8018424 <dir_next+0x106>
 8018420:	2301      	movs	r3, #1
 8018422:	e04e      	b.n	80184c2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8018424:	68fb      	ldr	r3, [r7, #12]
 8018426:	f103 0038 	add.w	r0, r3, #56	; 0x38
 801842a:	68fb      	ldr	r3, [r7, #12]
 801842c:	899b      	ldrh	r3, [r3, #12]
 801842e:	461a      	mov	r2, r3
 8018430:	2100      	movs	r1, #0
 8018432:	f7ff f8fe 	bl	8017632 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8018436:	2300      	movs	r3, #0
 8018438:	613b      	str	r3, [r7, #16]
 801843a:	6979      	ldr	r1, [r7, #20]
 801843c:	68f8      	ldr	r0, [r7, #12]
 801843e:	f7ff fba3 	bl	8017b88 <clust2sect>
 8018442:	4602      	mov	r2, r0
 8018444:	68fb      	ldr	r3, [r7, #12]
 8018446:	635a      	str	r2, [r3, #52]	; 0x34
 8018448:	e012      	b.n	8018470 <dir_next+0x152>
						fs->wflag = 1;
 801844a:	68fb      	ldr	r3, [r7, #12]
 801844c:	2201      	movs	r2, #1
 801844e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8018450:	68f8      	ldr	r0, [r7, #12]
 8018452:	f7ff fab7 	bl	80179c4 <sync_window>
 8018456:	4603      	mov	r3, r0
 8018458:	2b00      	cmp	r3, #0
 801845a:	d001      	beq.n	8018460 <dir_next+0x142>
 801845c:	2301      	movs	r3, #1
 801845e:	e030      	b.n	80184c2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8018460:	693b      	ldr	r3, [r7, #16]
 8018462:	3301      	adds	r3, #1
 8018464:	613b      	str	r3, [r7, #16]
 8018466:	68fb      	ldr	r3, [r7, #12]
 8018468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801846a:	1c5a      	adds	r2, r3, #1
 801846c:	68fb      	ldr	r3, [r7, #12]
 801846e:	635a      	str	r2, [r3, #52]	; 0x34
 8018470:	68fb      	ldr	r3, [r7, #12]
 8018472:	895b      	ldrh	r3, [r3, #10]
 8018474:	461a      	mov	r2, r3
 8018476:	693b      	ldr	r3, [r7, #16]
 8018478:	4293      	cmp	r3, r2
 801847a:	d3e6      	bcc.n	801844a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801847c:	68fb      	ldr	r3, [r7, #12]
 801847e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8018480:	693b      	ldr	r3, [r7, #16]
 8018482:	1ad2      	subs	r2, r2, r3
 8018484:	68fb      	ldr	r3, [r7, #12]
 8018486:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	697a      	ldr	r2, [r7, #20]
 801848c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801848e:	6979      	ldr	r1, [r7, #20]
 8018490:	68f8      	ldr	r0, [r7, #12]
 8018492:	f7ff fb79 	bl	8017b88 <clust2sect>
 8018496:	4602      	mov	r2, r0
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	68ba      	ldr	r2, [r7, #8]
 80184a0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80184a2:	68fb      	ldr	r3, [r7, #12]
 80184a4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80184a8:	68fb      	ldr	r3, [r7, #12]
 80184aa:	899b      	ldrh	r3, [r3, #12]
 80184ac:	461a      	mov	r2, r3
 80184ae:	68bb      	ldr	r3, [r7, #8]
 80184b0:	fbb3 f0f2 	udiv	r0, r3, r2
 80184b4:	fb00 f202 	mul.w	r2, r0, r2
 80184b8:	1a9b      	subs	r3, r3, r2
 80184ba:	18ca      	adds	r2, r1, r3
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80184c0:	2300      	movs	r3, #0
}
 80184c2:	4618      	mov	r0, r3
 80184c4:	3718      	adds	r7, #24
 80184c6:	46bd      	mov	sp, r7
 80184c8:	bd80      	pop	{r7, pc}

080184ca <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80184ca:	b580      	push	{r7, lr}
 80184cc:	b086      	sub	sp, #24
 80184ce:	af00      	add	r7, sp, #0
 80184d0:	6078      	str	r0, [r7, #4]
 80184d2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	681b      	ldr	r3, [r3, #0]
 80184d8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80184da:	2100      	movs	r1, #0
 80184dc:	6878      	ldr	r0, [r7, #4]
 80184de:	f7ff fe95 	bl	801820c <dir_sdi>
 80184e2:	4603      	mov	r3, r0
 80184e4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80184e6:	7dfb      	ldrb	r3, [r7, #23]
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	d12b      	bne.n	8018544 <dir_alloc+0x7a>
		n = 0;
 80184ec:	2300      	movs	r3, #0
 80184ee:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	69db      	ldr	r3, [r3, #28]
 80184f4:	4619      	mov	r1, r3
 80184f6:	68f8      	ldr	r0, [r7, #12]
 80184f8:	f7ff faa8 	bl	8017a4c <move_window>
 80184fc:	4603      	mov	r3, r0
 80184fe:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8018500:	7dfb      	ldrb	r3, [r7, #23]
 8018502:	2b00      	cmp	r3, #0
 8018504:	d11d      	bne.n	8018542 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	6a1b      	ldr	r3, [r3, #32]
 801850a:	781b      	ldrb	r3, [r3, #0]
 801850c:	2be5      	cmp	r3, #229	; 0xe5
 801850e:	d004      	beq.n	801851a <dir_alloc+0x50>
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	6a1b      	ldr	r3, [r3, #32]
 8018514:	781b      	ldrb	r3, [r3, #0]
 8018516:	2b00      	cmp	r3, #0
 8018518:	d107      	bne.n	801852a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801851a:	693b      	ldr	r3, [r7, #16]
 801851c:	3301      	adds	r3, #1
 801851e:	613b      	str	r3, [r7, #16]
 8018520:	693a      	ldr	r2, [r7, #16]
 8018522:	683b      	ldr	r3, [r7, #0]
 8018524:	429a      	cmp	r2, r3
 8018526:	d102      	bne.n	801852e <dir_alloc+0x64>
 8018528:	e00c      	b.n	8018544 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801852a:	2300      	movs	r3, #0
 801852c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801852e:	2101      	movs	r1, #1
 8018530:	6878      	ldr	r0, [r7, #4]
 8018532:	f7ff fef4 	bl	801831e <dir_next>
 8018536:	4603      	mov	r3, r0
 8018538:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801853a:	7dfb      	ldrb	r3, [r7, #23]
 801853c:	2b00      	cmp	r3, #0
 801853e:	d0d7      	beq.n	80184f0 <dir_alloc+0x26>
 8018540:	e000      	b.n	8018544 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8018542:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8018544:	7dfb      	ldrb	r3, [r7, #23]
 8018546:	2b04      	cmp	r3, #4
 8018548:	d101      	bne.n	801854e <dir_alloc+0x84>
 801854a:	2307      	movs	r3, #7
 801854c:	75fb      	strb	r3, [r7, #23]
	return res;
 801854e:	7dfb      	ldrb	r3, [r7, #23]
}
 8018550:	4618      	mov	r0, r3
 8018552:	3718      	adds	r7, #24
 8018554:	46bd      	mov	sp, r7
 8018556:	bd80      	pop	{r7, pc}

08018558 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8018558:	b580      	push	{r7, lr}
 801855a:	b084      	sub	sp, #16
 801855c:	af00      	add	r7, sp, #0
 801855e:	6078      	str	r0, [r7, #4]
 8018560:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8018562:	683b      	ldr	r3, [r7, #0]
 8018564:	331a      	adds	r3, #26
 8018566:	4618      	mov	r0, r3
 8018568:	f7fe ffc0 	bl	80174ec <ld_word>
 801856c:	4603      	mov	r3, r0
 801856e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	781b      	ldrb	r3, [r3, #0]
 8018574:	2b03      	cmp	r3, #3
 8018576:	d109      	bne.n	801858c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8018578:	683b      	ldr	r3, [r7, #0]
 801857a:	3314      	adds	r3, #20
 801857c:	4618      	mov	r0, r3
 801857e:	f7fe ffb5 	bl	80174ec <ld_word>
 8018582:	4603      	mov	r3, r0
 8018584:	041b      	lsls	r3, r3, #16
 8018586:	68fa      	ldr	r2, [r7, #12]
 8018588:	4313      	orrs	r3, r2
 801858a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801858c:	68fb      	ldr	r3, [r7, #12]
}
 801858e:	4618      	mov	r0, r3
 8018590:	3710      	adds	r7, #16
 8018592:	46bd      	mov	sp, r7
 8018594:	bd80      	pop	{r7, pc}

08018596 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8018596:	b580      	push	{r7, lr}
 8018598:	b084      	sub	sp, #16
 801859a:	af00      	add	r7, sp, #0
 801859c:	60f8      	str	r0, [r7, #12]
 801859e:	60b9      	str	r1, [r7, #8]
 80185a0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80185a2:	68bb      	ldr	r3, [r7, #8]
 80185a4:	331a      	adds	r3, #26
 80185a6:	687a      	ldr	r2, [r7, #4]
 80185a8:	b292      	uxth	r2, r2
 80185aa:	4611      	mov	r1, r2
 80185ac:	4618      	mov	r0, r3
 80185ae:	f7fe ffd8 	bl	8017562 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80185b2:	68fb      	ldr	r3, [r7, #12]
 80185b4:	781b      	ldrb	r3, [r3, #0]
 80185b6:	2b03      	cmp	r3, #3
 80185b8:	d109      	bne.n	80185ce <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80185ba:	68bb      	ldr	r3, [r7, #8]
 80185bc:	f103 0214 	add.w	r2, r3, #20
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	0c1b      	lsrs	r3, r3, #16
 80185c4:	b29b      	uxth	r3, r3
 80185c6:	4619      	mov	r1, r3
 80185c8:	4610      	mov	r0, r2
 80185ca:	f7fe ffca 	bl	8017562 <st_word>
	}
}
 80185ce:	bf00      	nop
 80185d0:	3710      	adds	r7, #16
 80185d2:	46bd      	mov	sp, r7
 80185d4:	bd80      	pop	{r7, pc}
	...

080185d8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80185d8:	b590      	push	{r4, r7, lr}
 80185da:	b087      	sub	sp, #28
 80185dc:	af00      	add	r7, sp, #0
 80185de:	6078      	str	r0, [r7, #4]
 80185e0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80185e2:	683b      	ldr	r3, [r7, #0]
 80185e4:	331a      	adds	r3, #26
 80185e6:	4618      	mov	r0, r3
 80185e8:	f7fe ff80 	bl	80174ec <ld_word>
 80185ec:	4603      	mov	r3, r0
 80185ee:	2b00      	cmp	r3, #0
 80185f0:	d001      	beq.n	80185f6 <cmp_lfn+0x1e>
 80185f2:	2300      	movs	r3, #0
 80185f4:	e059      	b.n	80186aa <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80185f6:	683b      	ldr	r3, [r7, #0]
 80185f8:	781b      	ldrb	r3, [r3, #0]
 80185fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80185fe:	1e5a      	subs	r2, r3, #1
 8018600:	4613      	mov	r3, r2
 8018602:	005b      	lsls	r3, r3, #1
 8018604:	4413      	add	r3, r2
 8018606:	009b      	lsls	r3, r3, #2
 8018608:	4413      	add	r3, r2
 801860a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801860c:	2301      	movs	r3, #1
 801860e:	81fb      	strh	r3, [r7, #14]
 8018610:	2300      	movs	r3, #0
 8018612:	613b      	str	r3, [r7, #16]
 8018614:	e033      	b.n	801867e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8018616:	4a27      	ldr	r2, [pc, #156]	; (80186b4 <cmp_lfn+0xdc>)
 8018618:	693b      	ldr	r3, [r7, #16]
 801861a:	4413      	add	r3, r2
 801861c:	781b      	ldrb	r3, [r3, #0]
 801861e:	461a      	mov	r2, r3
 8018620:	683b      	ldr	r3, [r7, #0]
 8018622:	4413      	add	r3, r2
 8018624:	4618      	mov	r0, r3
 8018626:	f7fe ff61 	bl	80174ec <ld_word>
 801862a:	4603      	mov	r3, r0
 801862c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801862e:	89fb      	ldrh	r3, [r7, #14]
 8018630:	2b00      	cmp	r3, #0
 8018632:	d01a      	beq.n	801866a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8018634:	697b      	ldr	r3, [r7, #20]
 8018636:	2bfe      	cmp	r3, #254	; 0xfe
 8018638:	d812      	bhi.n	8018660 <cmp_lfn+0x88>
 801863a:	89bb      	ldrh	r3, [r7, #12]
 801863c:	4618      	mov	r0, r3
 801863e:	f001 fe11 	bl	801a264 <ff_wtoupper>
 8018642:	4603      	mov	r3, r0
 8018644:	461c      	mov	r4, r3
 8018646:	697b      	ldr	r3, [r7, #20]
 8018648:	1c5a      	adds	r2, r3, #1
 801864a:	617a      	str	r2, [r7, #20]
 801864c:	005b      	lsls	r3, r3, #1
 801864e:	687a      	ldr	r2, [r7, #4]
 8018650:	4413      	add	r3, r2
 8018652:	881b      	ldrh	r3, [r3, #0]
 8018654:	4618      	mov	r0, r3
 8018656:	f001 fe05 	bl	801a264 <ff_wtoupper>
 801865a:	4603      	mov	r3, r0
 801865c:	429c      	cmp	r4, r3
 801865e:	d001      	beq.n	8018664 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8018660:	2300      	movs	r3, #0
 8018662:	e022      	b.n	80186aa <cmp_lfn+0xd2>
			}
			wc = uc;
 8018664:	89bb      	ldrh	r3, [r7, #12]
 8018666:	81fb      	strh	r3, [r7, #14]
 8018668:	e006      	b.n	8018678 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801866a:	89bb      	ldrh	r3, [r7, #12]
 801866c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018670:	4293      	cmp	r3, r2
 8018672:	d001      	beq.n	8018678 <cmp_lfn+0xa0>
 8018674:	2300      	movs	r3, #0
 8018676:	e018      	b.n	80186aa <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8018678:	693b      	ldr	r3, [r7, #16]
 801867a:	3301      	adds	r3, #1
 801867c:	613b      	str	r3, [r7, #16]
 801867e:	693b      	ldr	r3, [r7, #16]
 8018680:	2b0c      	cmp	r3, #12
 8018682:	d9c8      	bls.n	8018616 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8018684:	683b      	ldr	r3, [r7, #0]
 8018686:	781b      	ldrb	r3, [r3, #0]
 8018688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801868c:	2b00      	cmp	r3, #0
 801868e:	d00b      	beq.n	80186a8 <cmp_lfn+0xd0>
 8018690:	89fb      	ldrh	r3, [r7, #14]
 8018692:	2b00      	cmp	r3, #0
 8018694:	d008      	beq.n	80186a8 <cmp_lfn+0xd0>
 8018696:	697b      	ldr	r3, [r7, #20]
 8018698:	005b      	lsls	r3, r3, #1
 801869a:	687a      	ldr	r2, [r7, #4]
 801869c:	4413      	add	r3, r2
 801869e:	881b      	ldrh	r3, [r3, #0]
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	d001      	beq.n	80186a8 <cmp_lfn+0xd0>
 80186a4:	2300      	movs	r3, #0
 80186a6:	e000      	b.n	80186aa <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80186a8:	2301      	movs	r3, #1
}
 80186aa:	4618      	mov	r0, r3
 80186ac:	371c      	adds	r7, #28
 80186ae:	46bd      	mov	sp, r7
 80186b0:	bd90      	pop	{r4, r7, pc}
 80186b2:	bf00      	nop
 80186b4:	0801c460 	.word	0x0801c460

080186b8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80186b8:	b580      	push	{r7, lr}
 80186ba:	b088      	sub	sp, #32
 80186bc:	af00      	add	r7, sp, #0
 80186be:	60f8      	str	r0, [r7, #12]
 80186c0:	60b9      	str	r1, [r7, #8]
 80186c2:	4611      	mov	r1, r2
 80186c4:	461a      	mov	r2, r3
 80186c6:	460b      	mov	r3, r1
 80186c8:	71fb      	strb	r3, [r7, #7]
 80186ca:	4613      	mov	r3, r2
 80186cc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80186ce:	68bb      	ldr	r3, [r7, #8]
 80186d0:	330d      	adds	r3, #13
 80186d2:	79ba      	ldrb	r2, [r7, #6]
 80186d4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80186d6:	68bb      	ldr	r3, [r7, #8]
 80186d8:	330b      	adds	r3, #11
 80186da:	220f      	movs	r2, #15
 80186dc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80186de:	68bb      	ldr	r3, [r7, #8]
 80186e0:	330c      	adds	r3, #12
 80186e2:	2200      	movs	r2, #0
 80186e4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80186e6:	68bb      	ldr	r3, [r7, #8]
 80186e8:	331a      	adds	r3, #26
 80186ea:	2100      	movs	r1, #0
 80186ec:	4618      	mov	r0, r3
 80186ee:	f7fe ff38 	bl	8017562 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80186f2:	79fb      	ldrb	r3, [r7, #7]
 80186f4:	1e5a      	subs	r2, r3, #1
 80186f6:	4613      	mov	r3, r2
 80186f8:	005b      	lsls	r3, r3, #1
 80186fa:	4413      	add	r3, r2
 80186fc:	009b      	lsls	r3, r3, #2
 80186fe:	4413      	add	r3, r2
 8018700:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8018702:	2300      	movs	r3, #0
 8018704:	82fb      	strh	r3, [r7, #22]
 8018706:	2300      	movs	r3, #0
 8018708:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801870a:	8afb      	ldrh	r3, [r7, #22]
 801870c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018710:	4293      	cmp	r3, r2
 8018712:	d007      	beq.n	8018724 <put_lfn+0x6c>
 8018714:	69fb      	ldr	r3, [r7, #28]
 8018716:	1c5a      	adds	r2, r3, #1
 8018718:	61fa      	str	r2, [r7, #28]
 801871a:	005b      	lsls	r3, r3, #1
 801871c:	68fa      	ldr	r2, [r7, #12]
 801871e:	4413      	add	r3, r2
 8018720:	881b      	ldrh	r3, [r3, #0]
 8018722:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8018724:	4a17      	ldr	r2, [pc, #92]	; (8018784 <put_lfn+0xcc>)
 8018726:	69bb      	ldr	r3, [r7, #24]
 8018728:	4413      	add	r3, r2
 801872a:	781b      	ldrb	r3, [r3, #0]
 801872c:	461a      	mov	r2, r3
 801872e:	68bb      	ldr	r3, [r7, #8]
 8018730:	4413      	add	r3, r2
 8018732:	8afa      	ldrh	r2, [r7, #22]
 8018734:	4611      	mov	r1, r2
 8018736:	4618      	mov	r0, r3
 8018738:	f7fe ff13 	bl	8017562 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801873c:	8afb      	ldrh	r3, [r7, #22]
 801873e:	2b00      	cmp	r3, #0
 8018740:	d102      	bne.n	8018748 <put_lfn+0x90>
 8018742:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018746:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8018748:	69bb      	ldr	r3, [r7, #24]
 801874a:	3301      	adds	r3, #1
 801874c:	61bb      	str	r3, [r7, #24]
 801874e:	69bb      	ldr	r3, [r7, #24]
 8018750:	2b0c      	cmp	r3, #12
 8018752:	d9da      	bls.n	801870a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8018754:	8afb      	ldrh	r3, [r7, #22]
 8018756:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801875a:	4293      	cmp	r3, r2
 801875c:	d006      	beq.n	801876c <put_lfn+0xb4>
 801875e:	69fb      	ldr	r3, [r7, #28]
 8018760:	005b      	lsls	r3, r3, #1
 8018762:	68fa      	ldr	r2, [r7, #12]
 8018764:	4413      	add	r3, r2
 8018766:	881b      	ldrh	r3, [r3, #0]
 8018768:	2b00      	cmp	r3, #0
 801876a:	d103      	bne.n	8018774 <put_lfn+0xbc>
 801876c:	79fb      	ldrb	r3, [r7, #7]
 801876e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018772:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8018774:	68bb      	ldr	r3, [r7, #8]
 8018776:	79fa      	ldrb	r2, [r7, #7]
 8018778:	701a      	strb	r2, [r3, #0]
}
 801877a:	bf00      	nop
 801877c:	3720      	adds	r7, #32
 801877e:	46bd      	mov	sp, r7
 8018780:	bd80      	pop	{r7, pc}
 8018782:	bf00      	nop
 8018784:	0801c460 	.word	0x0801c460

08018788 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8018788:	b580      	push	{r7, lr}
 801878a:	b08c      	sub	sp, #48	; 0x30
 801878c:	af00      	add	r7, sp, #0
 801878e:	60f8      	str	r0, [r7, #12]
 8018790:	60b9      	str	r1, [r7, #8]
 8018792:	607a      	str	r2, [r7, #4]
 8018794:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8018796:	220b      	movs	r2, #11
 8018798:	68b9      	ldr	r1, [r7, #8]
 801879a:	68f8      	ldr	r0, [r7, #12]
 801879c:	f7fe ff28 	bl	80175f0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80187a0:	683b      	ldr	r3, [r7, #0]
 80187a2:	2b05      	cmp	r3, #5
 80187a4:	d929      	bls.n	80187fa <gen_numname+0x72>
		sr = seq;
 80187a6:	683b      	ldr	r3, [r7, #0]
 80187a8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80187aa:	e020      	b.n	80187ee <gen_numname+0x66>
			wc = *lfn++;
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	1c9a      	adds	r2, r3, #2
 80187b0:	607a      	str	r2, [r7, #4]
 80187b2:	881b      	ldrh	r3, [r3, #0]
 80187b4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80187b6:	2300      	movs	r3, #0
 80187b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80187ba:	e015      	b.n	80187e8 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 80187bc:	69fb      	ldr	r3, [r7, #28]
 80187be:	005a      	lsls	r2, r3, #1
 80187c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80187c2:	f003 0301 	and.w	r3, r3, #1
 80187c6:	4413      	add	r3, r2
 80187c8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80187ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80187cc:	085b      	lsrs	r3, r3, #1
 80187ce:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80187d0:	69fb      	ldr	r3, [r7, #28]
 80187d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80187d6:	2b00      	cmp	r3, #0
 80187d8:	d003      	beq.n	80187e2 <gen_numname+0x5a>
 80187da:	69fa      	ldr	r2, [r7, #28]
 80187dc:	4b30      	ldr	r3, [pc, #192]	; (80188a0 <gen_numname+0x118>)
 80187de:	4053      	eors	r3, r2
 80187e0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80187e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187e4:	3301      	adds	r3, #1
 80187e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80187e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187ea:	2b0f      	cmp	r3, #15
 80187ec:	d9e6      	bls.n	80187bc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	881b      	ldrh	r3, [r3, #0]
 80187f2:	2b00      	cmp	r3, #0
 80187f4:	d1da      	bne.n	80187ac <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80187f6:	69fb      	ldr	r3, [r7, #28]
 80187f8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80187fa:	2307      	movs	r3, #7
 80187fc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80187fe:	683b      	ldr	r3, [r7, #0]
 8018800:	b2db      	uxtb	r3, r3
 8018802:	f003 030f 	and.w	r3, r3, #15
 8018806:	b2db      	uxtb	r3, r3
 8018808:	3330      	adds	r3, #48	; 0x30
 801880a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 801880e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018812:	2b39      	cmp	r3, #57	; 0x39
 8018814:	d904      	bls.n	8018820 <gen_numname+0x98>
 8018816:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801881a:	3307      	adds	r3, #7
 801881c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8018820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018822:	1e5a      	subs	r2, r3, #1
 8018824:	62ba      	str	r2, [r7, #40]	; 0x28
 8018826:	3330      	adds	r3, #48	; 0x30
 8018828:	443b      	add	r3, r7
 801882a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801882e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8018832:	683b      	ldr	r3, [r7, #0]
 8018834:	091b      	lsrs	r3, r3, #4
 8018836:	603b      	str	r3, [r7, #0]
	} while (seq);
 8018838:	683b      	ldr	r3, [r7, #0]
 801883a:	2b00      	cmp	r3, #0
 801883c:	d1df      	bne.n	80187fe <gen_numname+0x76>
	ns[i] = '~';
 801883e:	f107 0214 	add.w	r2, r7, #20
 8018842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018844:	4413      	add	r3, r2
 8018846:	227e      	movs	r2, #126	; 0x7e
 8018848:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801884a:	2300      	movs	r3, #0
 801884c:	627b      	str	r3, [r7, #36]	; 0x24
 801884e:	e002      	b.n	8018856 <gen_numname+0xce>
 8018850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018852:	3301      	adds	r3, #1
 8018854:	627b      	str	r3, [r7, #36]	; 0x24
 8018856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801885a:	429a      	cmp	r2, r3
 801885c:	d205      	bcs.n	801886a <gen_numname+0xe2>
 801885e:	68fa      	ldr	r2, [r7, #12]
 8018860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018862:	4413      	add	r3, r2
 8018864:	781b      	ldrb	r3, [r3, #0]
 8018866:	2b20      	cmp	r3, #32
 8018868:	d1f2      	bne.n	8018850 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801886a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801886c:	2b07      	cmp	r3, #7
 801886e:	d807      	bhi.n	8018880 <gen_numname+0xf8>
 8018870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018872:	1c5a      	adds	r2, r3, #1
 8018874:	62ba      	str	r2, [r7, #40]	; 0x28
 8018876:	3330      	adds	r3, #48	; 0x30
 8018878:	443b      	add	r3, r7
 801887a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801887e:	e000      	b.n	8018882 <gen_numname+0xfa>
 8018880:	2120      	movs	r1, #32
 8018882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018884:	1c5a      	adds	r2, r3, #1
 8018886:	627a      	str	r2, [r7, #36]	; 0x24
 8018888:	68fa      	ldr	r2, [r7, #12]
 801888a:	4413      	add	r3, r2
 801888c:	460a      	mov	r2, r1
 801888e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8018890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018892:	2b07      	cmp	r3, #7
 8018894:	d9e9      	bls.n	801886a <gen_numname+0xe2>
}
 8018896:	bf00      	nop
 8018898:	bf00      	nop
 801889a:	3730      	adds	r7, #48	; 0x30
 801889c:	46bd      	mov	sp, r7
 801889e:	bd80      	pop	{r7, pc}
 80188a0:	00011021 	.word	0x00011021

080188a4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80188a4:	b480      	push	{r7}
 80188a6:	b085      	sub	sp, #20
 80188a8:	af00      	add	r7, sp, #0
 80188aa:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80188ac:	2300      	movs	r3, #0
 80188ae:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80188b0:	230b      	movs	r3, #11
 80188b2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80188b4:	7bfb      	ldrb	r3, [r7, #15]
 80188b6:	b2da      	uxtb	r2, r3
 80188b8:	0852      	lsrs	r2, r2, #1
 80188ba:	01db      	lsls	r3, r3, #7
 80188bc:	4313      	orrs	r3, r2
 80188be:	b2da      	uxtb	r2, r3
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	1c59      	adds	r1, r3, #1
 80188c4:	6079      	str	r1, [r7, #4]
 80188c6:	781b      	ldrb	r3, [r3, #0]
 80188c8:	4413      	add	r3, r2
 80188ca:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80188cc:	68bb      	ldr	r3, [r7, #8]
 80188ce:	3b01      	subs	r3, #1
 80188d0:	60bb      	str	r3, [r7, #8]
 80188d2:	68bb      	ldr	r3, [r7, #8]
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	d1ed      	bne.n	80188b4 <sum_sfn+0x10>
	return sum;
 80188d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80188da:	4618      	mov	r0, r3
 80188dc:	3714      	adds	r7, #20
 80188de:	46bd      	mov	sp, r7
 80188e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188e4:	4770      	bx	lr

080188e6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80188e6:	b580      	push	{r7, lr}
 80188e8:	b086      	sub	sp, #24
 80188ea:	af00      	add	r7, sp, #0
 80188ec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	681b      	ldr	r3, [r3, #0]
 80188f2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80188f4:	2100      	movs	r1, #0
 80188f6:	6878      	ldr	r0, [r7, #4]
 80188f8:	f7ff fc88 	bl	801820c <dir_sdi>
 80188fc:	4603      	mov	r3, r0
 80188fe:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8018900:	7dfb      	ldrb	r3, [r7, #23]
 8018902:	2b00      	cmp	r3, #0
 8018904:	d001      	beq.n	801890a <dir_find+0x24>
 8018906:	7dfb      	ldrb	r3, [r7, #23]
 8018908:	e0a9      	b.n	8018a5e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801890a:	23ff      	movs	r3, #255	; 0xff
 801890c:	753b      	strb	r3, [r7, #20]
 801890e:	7d3b      	ldrb	r3, [r7, #20]
 8018910:	757b      	strb	r3, [r7, #21]
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	f04f 32ff 	mov.w	r2, #4294967295
 8018918:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801891a:	687b      	ldr	r3, [r7, #4]
 801891c:	69db      	ldr	r3, [r3, #28]
 801891e:	4619      	mov	r1, r3
 8018920:	6938      	ldr	r0, [r7, #16]
 8018922:	f7ff f893 	bl	8017a4c <move_window>
 8018926:	4603      	mov	r3, r0
 8018928:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801892a:	7dfb      	ldrb	r3, [r7, #23]
 801892c:	2b00      	cmp	r3, #0
 801892e:	f040 8090 	bne.w	8018a52 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8018932:	687b      	ldr	r3, [r7, #4]
 8018934:	6a1b      	ldr	r3, [r3, #32]
 8018936:	781b      	ldrb	r3, [r3, #0]
 8018938:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801893a:	7dbb      	ldrb	r3, [r7, #22]
 801893c:	2b00      	cmp	r3, #0
 801893e:	d102      	bne.n	8018946 <dir_find+0x60>
 8018940:	2304      	movs	r3, #4
 8018942:	75fb      	strb	r3, [r7, #23]
 8018944:	e08a      	b.n	8018a5c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	6a1b      	ldr	r3, [r3, #32]
 801894a:	330b      	adds	r3, #11
 801894c:	781b      	ldrb	r3, [r3, #0]
 801894e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018952:	73fb      	strb	r3, [r7, #15]
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	7bfa      	ldrb	r2, [r7, #15]
 8018958:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801895a:	7dbb      	ldrb	r3, [r7, #22]
 801895c:	2be5      	cmp	r3, #229	; 0xe5
 801895e:	d007      	beq.n	8018970 <dir_find+0x8a>
 8018960:	7bfb      	ldrb	r3, [r7, #15]
 8018962:	f003 0308 	and.w	r3, r3, #8
 8018966:	2b00      	cmp	r3, #0
 8018968:	d009      	beq.n	801897e <dir_find+0x98>
 801896a:	7bfb      	ldrb	r3, [r7, #15]
 801896c:	2b0f      	cmp	r3, #15
 801896e:	d006      	beq.n	801897e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018970:	23ff      	movs	r3, #255	; 0xff
 8018972:	757b      	strb	r3, [r7, #21]
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	f04f 32ff 	mov.w	r2, #4294967295
 801897a:	631a      	str	r2, [r3, #48]	; 0x30
 801897c:	e05e      	b.n	8018a3c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801897e:	7bfb      	ldrb	r3, [r7, #15]
 8018980:	2b0f      	cmp	r3, #15
 8018982:	d136      	bne.n	80189f2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801898a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801898e:	2b00      	cmp	r3, #0
 8018990:	d154      	bne.n	8018a3c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8018992:	7dbb      	ldrb	r3, [r7, #22]
 8018994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018998:	2b00      	cmp	r3, #0
 801899a:	d00d      	beq.n	80189b8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801899c:	687b      	ldr	r3, [r7, #4]
 801899e:	6a1b      	ldr	r3, [r3, #32]
 80189a0:	7b5b      	ldrb	r3, [r3, #13]
 80189a2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80189a4:	7dbb      	ldrb	r3, [r7, #22]
 80189a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80189aa:	75bb      	strb	r3, [r7, #22]
 80189ac:	7dbb      	ldrb	r3, [r7, #22]
 80189ae:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	695a      	ldr	r2, [r3, #20]
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80189b8:	7dba      	ldrb	r2, [r7, #22]
 80189ba:	7d7b      	ldrb	r3, [r7, #21]
 80189bc:	429a      	cmp	r2, r3
 80189be:	d115      	bne.n	80189ec <dir_find+0x106>
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	6a1b      	ldr	r3, [r3, #32]
 80189c4:	330d      	adds	r3, #13
 80189c6:	781b      	ldrb	r3, [r3, #0]
 80189c8:	7d3a      	ldrb	r2, [r7, #20]
 80189ca:	429a      	cmp	r2, r3
 80189cc:	d10e      	bne.n	80189ec <dir_find+0x106>
 80189ce:	693b      	ldr	r3, [r7, #16]
 80189d0:	691a      	ldr	r2, [r3, #16]
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	6a1b      	ldr	r3, [r3, #32]
 80189d6:	4619      	mov	r1, r3
 80189d8:	4610      	mov	r0, r2
 80189da:	f7ff fdfd 	bl	80185d8 <cmp_lfn>
 80189de:	4603      	mov	r3, r0
 80189e0:	2b00      	cmp	r3, #0
 80189e2:	d003      	beq.n	80189ec <dir_find+0x106>
 80189e4:	7d7b      	ldrb	r3, [r7, #21]
 80189e6:	3b01      	subs	r3, #1
 80189e8:	b2db      	uxtb	r3, r3
 80189ea:	e000      	b.n	80189ee <dir_find+0x108>
 80189ec:	23ff      	movs	r3, #255	; 0xff
 80189ee:	757b      	strb	r3, [r7, #21]
 80189f0:	e024      	b.n	8018a3c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80189f2:	7d7b      	ldrb	r3, [r7, #21]
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	d109      	bne.n	8018a0c <dir_find+0x126>
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	6a1b      	ldr	r3, [r3, #32]
 80189fc:	4618      	mov	r0, r3
 80189fe:	f7ff ff51 	bl	80188a4 <sum_sfn>
 8018a02:	4603      	mov	r3, r0
 8018a04:	461a      	mov	r2, r3
 8018a06:	7d3b      	ldrb	r3, [r7, #20]
 8018a08:	4293      	cmp	r3, r2
 8018a0a:	d024      	beq.n	8018a56 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018a12:	f003 0301 	and.w	r3, r3, #1
 8018a16:	2b00      	cmp	r3, #0
 8018a18:	d10a      	bne.n	8018a30 <dir_find+0x14a>
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	6a18      	ldr	r0, [r3, #32]
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	3324      	adds	r3, #36	; 0x24
 8018a22:	220b      	movs	r2, #11
 8018a24:	4619      	mov	r1, r3
 8018a26:	f7fe fe1f 	bl	8017668 <mem_cmp>
 8018a2a:	4603      	mov	r3, r0
 8018a2c:	2b00      	cmp	r3, #0
 8018a2e:	d014      	beq.n	8018a5a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018a30:	23ff      	movs	r3, #255	; 0xff
 8018a32:	757b      	strb	r3, [r7, #21]
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	f04f 32ff 	mov.w	r2, #4294967295
 8018a3a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8018a3c:	2100      	movs	r1, #0
 8018a3e:	6878      	ldr	r0, [r7, #4]
 8018a40:	f7ff fc6d 	bl	801831e <dir_next>
 8018a44:	4603      	mov	r3, r0
 8018a46:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8018a48:	7dfb      	ldrb	r3, [r7, #23]
 8018a4a:	2b00      	cmp	r3, #0
 8018a4c:	f43f af65 	beq.w	801891a <dir_find+0x34>
 8018a50:	e004      	b.n	8018a5c <dir_find+0x176>
		if (res != FR_OK) break;
 8018a52:	bf00      	nop
 8018a54:	e002      	b.n	8018a5c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8018a56:	bf00      	nop
 8018a58:	e000      	b.n	8018a5c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8018a5a:	bf00      	nop

	return res;
 8018a5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8018a5e:	4618      	mov	r0, r3
 8018a60:	3718      	adds	r7, #24
 8018a62:	46bd      	mov	sp, r7
 8018a64:	bd80      	pop	{r7, pc}
	...

08018a68 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8018a68:	b580      	push	{r7, lr}
 8018a6a:	b08c      	sub	sp, #48	; 0x30
 8018a6c:	af00      	add	r7, sp, #0
 8018a6e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	681b      	ldr	r3, [r3, #0]
 8018a74:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8018a76:	687b      	ldr	r3, [r7, #4]
 8018a78:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018a7c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	d001      	beq.n	8018a88 <dir_register+0x20>
 8018a84:	2306      	movs	r3, #6
 8018a86:	e0e0      	b.n	8018c4a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8018a88:	2300      	movs	r3, #0
 8018a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8018a8c:	e002      	b.n	8018a94 <dir_register+0x2c>
 8018a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a90:	3301      	adds	r3, #1
 8018a92:	627b      	str	r3, [r7, #36]	; 0x24
 8018a94:	69fb      	ldr	r3, [r7, #28]
 8018a96:	691a      	ldr	r2, [r3, #16]
 8018a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a9a:	005b      	lsls	r3, r3, #1
 8018a9c:	4413      	add	r3, r2
 8018a9e:	881b      	ldrh	r3, [r3, #0]
 8018aa0:	2b00      	cmp	r3, #0
 8018aa2:	d1f4      	bne.n	8018a8e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8018aa4:	687b      	ldr	r3, [r7, #4]
 8018aa6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8018aaa:	f107 030c 	add.w	r3, r7, #12
 8018aae:	220c      	movs	r2, #12
 8018ab0:	4618      	mov	r0, r3
 8018ab2:	f7fe fd9d 	bl	80175f0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8018ab6:	7dfb      	ldrb	r3, [r7, #23]
 8018ab8:	f003 0301 	and.w	r3, r3, #1
 8018abc:	2b00      	cmp	r3, #0
 8018abe:	d032      	beq.n	8018b26 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	2240      	movs	r2, #64	; 0x40
 8018ac4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8018ac8:	2301      	movs	r3, #1
 8018aca:	62bb      	str	r3, [r7, #40]	; 0x28
 8018acc:	e016      	b.n	8018afc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8018ace:	687b      	ldr	r3, [r7, #4]
 8018ad0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8018ad4:	69fb      	ldr	r3, [r7, #28]
 8018ad6:	691a      	ldr	r2, [r3, #16]
 8018ad8:	f107 010c 	add.w	r1, r7, #12
 8018adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ade:	f7ff fe53 	bl	8018788 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8018ae2:	6878      	ldr	r0, [r7, #4]
 8018ae4:	f7ff feff 	bl	80188e6 <dir_find>
 8018ae8:	4603      	mov	r3, r0
 8018aea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8018aee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018af2:	2b00      	cmp	r3, #0
 8018af4:	d106      	bne.n	8018b04 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8018af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018af8:	3301      	adds	r3, #1
 8018afa:	62bb      	str	r3, [r7, #40]	; 0x28
 8018afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018afe:	2b63      	cmp	r3, #99	; 0x63
 8018b00:	d9e5      	bls.n	8018ace <dir_register+0x66>
 8018b02:	e000      	b.n	8018b06 <dir_register+0x9e>
			if (res != FR_OK) break;
 8018b04:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8018b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b08:	2b64      	cmp	r3, #100	; 0x64
 8018b0a:	d101      	bne.n	8018b10 <dir_register+0xa8>
 8018b0c:	2307      	movs	r3, #7
 8018b0e:	e09c      	b.n	8018c4a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8018b10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018b14:	2b04      	cmp	r3, #4
 8018b16:	d002      	beq.n	8018b1e <dir_register+0xb6>
 8018b18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018b1c:	e095      	b.n	8018c4a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8018b1e:	7dfa      	ldrb	r2, [r7, #23]
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8018b26:	7dfb      	ldrb	r3, [r7, #23]
 8018b28:	f003 0302 	and.w	r3, r3, #2
 8018b2c:	2b00      	cmp	r3, #0
 8018b2e:	d007      	beq.n	8018b40 <dir_register+0xd8>
 8018b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b32:	330c      	adds	r3, #12
 8018b34:	4a47      	ldr	r2, [pc, #284]	; (8018c54 <dir_register+0x1ec>)
 8018b36:	fba2 2303 	umull	r2, r3, r2, r3
 8018b3a:	089b      	lsrs	r3, r3, #2
 8018b3c:	3301      	adds	r3, #1
 8018b3e:	e000      	b.n	8018b42 <dir_register+0xda>
 8018b40:	2301      	movs	r3, #1
 8018b42:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8018b44:	6a39      	ldr	r1, [r7, #32]
 8018b46:	6878      	ldr	r0, [r7, #4]
 8018b48:	f7ff fcbf 	bl	80184ca <dir_alloc>
 8018b4c:	4603      	mov	r3, r0
 8018b4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8018b52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	d148      	bne.n	8018bec <dir_register+0x184>
 8018b5a:	6a3b      	ldr	r3, [r7, #32]
 8018b5c:	3b01      	subs	r3, #1
 8018b5e:	623b      	str	r3, [r7, #32]
 8018b60:	6a3b      	ldr	r3, [r7, #32]
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	d042      	beq.n	8018bec <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8018b66:	687b      	ldr	r3, [r7, #4]
 8018b68:	695a      	ldr	r2, [r3, #20]
 8018b6a:	6a3b      	ldr	r3, [r7, #32]
 8018b6c:	015b      	lsls	r3, r3, #5
 8018b6e:	1ad3      	subs	r3, r2, r3
 8018b70:	4619      	mov	r1, r3
 8018b72:	6878      	ldr	r0, [r7, #4]
 8018b74:	f7ff fb4a 	bl	801820c <dir_sdi>
 8018b78:	4603      	mov	r3, r0
 8018b7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8018b7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d132      	bne.n	8018bec <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	3324      	adds	r3, #36	; 0x24
 8018b8a:	4618      	mov	r0, r3
 8018b8c:	f7ff fe8a 	bl	80188a4 <sum_sfn>
 8018b90:	4603      	mov	r3, r0
 8018b92:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	69db      	ldr	r3, [r3, #28]
 8018b98:	4619      	mov	r1, r3
 8018b9a:	69f8      	ldr	r0, [r7, #28]
 8018b9c:	f7fe ff56 	bl	8017a4c <move_window>
 8018ba0:	4603      	mov	r3, r0
 8018ba2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8018ba6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018baa:	2b00      	cmp	r3, #0
 8018bac:	d11d      	bne.n	8018bea <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8018bae:	69fb      	ldr	r3, [r7, #28]
 8018bb0:	6918      	ldr	r0, [r3, #16]
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	6a19      	ldr	r1, [r3, #32]
 8018bb6:	6a3b      	ldr	r3, [r7, #32]
 8018bb8:	b2da      	uxtb	r2, r3
 8018bba:	7efb      	ldrb	r3, [r7, #27]
 8018bbc:	f7ff fd7c 	bl	80186b8 <put_lfn>
				fs->wflag = 1;
 8018bc0:	69fb      	ldr	r3, [r7, #28]
 8018bc2:	2201      	movs	r2, #1
 8018bc4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8018bc6:	2100      	movs	r1, #0
 8018bc8:	6878      	ldr	r0, [r7, #4]
 8018bca:	f7ff fba8 	bl	801831e <dir_next>
 8018bce:	4603      	mov	r3, r0
 8018bd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8018bd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	d107      	bne.n	8018bec <dir_register+0x184>
 8018bdc:	6a3b      	ldr	r3, [r7, #32]
 8018bde:	3b01      	subs	r3, #1
 8018be0:	623b      	str	r3, [r7, #32]
 8018be2:	6a3b      	ldr	r3, [r7, #32]
 8018be4:	2b00      	cmp	r3, #0
 8018be6:	d1d5      	bne.n	8018b94 <dir_register+0x12c>
 8018be8:	e000      	b.n	8018bec <dir_register+0x184>
				if (res != FR_OK) break;
 8018bea:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8018bec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018bf0:	2b00      	cmp	r3, #0
 8018bf2:	d128      	bne.n	8018c46 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	69db      	ldr	r3, [r3, #28]
 8018bf8:	4619      	mov	r1, r3
 8018bfa:	69f8      	ldr	r0, [r7, #28]
 8018bfc:	f7fe ff26 	bl	8017a4c <move_window>
 8018c00:	4603      	mov	r3, r0
 8018c02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8018c06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018c0a:	2b00      	cmp	r3, #0
 8018c0c:	d11b      	bne.n	8018c46 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	6a1b      	ldr	r3, [r3, #32]
 8018c12:	2220      	movs	r2, #32
 8018c14:	2100      	movs	r1, #0
 8018c16:	4618      	mov	r0, r3
 8018c18:	f7fe fd0b 	bl	8017632 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	6a18      	ldr	r0, [r3, #32]
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	3324      	adds	r3, #36	; 0x24
 8018c24:	220b      	movs	r2, #11
 8018c26:	4619      	mov	r1, r3
 8018c28:	f7fe fce2 	bl	80175f0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8018c32:	687b      	ldr	r3, [r7, #4]
 8018c34:	6a1b      	ldr	r3, [r3, #32]
 8018c36:	330c      	adds	r3, #12
 8018c38:	f002 0218 	and.w	r2, r2, #24
 8018c3c:	b2d2      	uxtb	r2, r2
 8018c3e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8018c40:	69fb      	ldr	r3, [r7, #28]
 8018c42:	2201      	movs	r2, #1
 8018c44:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8018c46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8018c4a:	4618      	mov	r0, r3
 8018c4c:	3730      	adds	r7, #48	; 0x30
 8018c4e:	46bd      	mov	sp, r7
 8018c50:	bd80      	pop	{r7, pc}
 8018c52:	bf00      	nop
 8018c54:	4ec4ec4f 	.word	0x4ec4ec4f

08018c58 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8018c58:	b580      	push	{r7, lr}
 8018c5a:	b08a      	sub	sp, #40	; 0x28
 8018c5c:	af00      	add	r7, sp, #0
 8018c5e:	6078      	str	r0, [r7, #4]
 8018c60:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8018c62:	683b      	ldr	r3, [r7, #0]
 8018c64:	681b      	ldr	r3, [r3, #0]
 8018c66:	613b      	str	r3, [r7, #16]
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	681b      	ldr	r3, [r3, #0]
 8018c6c:	691b      	ldr	r3, [r3, #16]
 8018c6e:	60fb      	str	r3, [r7, #12]
 8018c70:	2300      	movs	r3, #0
 8018c72:	617b      	str	r3, [r7, #20]
 8018c74:	697b      	ldr	r3, [r7, #20]
 8018c76:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8018c78:	69bb      	ldr	r3, [r7, #24]
 8018c7a:	1c5a      	adds	r2, r3, #1
 8018c7c:	61ba      	str	r2, [r7, #24]
 8018c7e:	693a      	ldr	r2, [r7, #16]
 8018c80:	4413      	add	r3, r2
 8018c82:	781b      	ldrb	r3, [r3, #0]
 8018c84:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8018c86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018c88:	2b1f      	cmp	r3, #31
 8018c8a:	d940      	bls.n	8018d0e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8018c8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018c8e:	2b2f      	cmp	r3, #47	; 0x2f
 8018c90:	d006      	beq.n	8018ca0 <create_name+0x48>
 8018c92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018c94:	2b5c      	cmp	r3, #92	; 0x5c
 8018c96:	d110      	bne.n	8018cba <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8018c98:	e002      	b.n	8018ca0 <create_name+0x48>
 8018c9a:	69bb      	ldr	r3, [r7, #24]
 8018c9c:	3301      	adds	r3, #1
 8018c9e:	61bb      	str	r3, [r7, #24]
 8018ca0:	693a      	ldr	r2, [r7, #16]
 8018ca2:	69bb      	ldr	r3, [r7, #24]
 8018ca4:	4413      	add	r3, r2
 8018ca6:	781b      	ldrb	r3, [r3, #0]
 8018ca8:	2b2f      	cmp	r3, #47	; 0x2f
 8018caa:	d0f6      	beq.n	8018c9a <create_name+0x42>
 8018cac:	693a      	ldr	r2, [r7, #16]
 8018cae:	69bb      	ldr	r3, [r7, #24]
 8018cb0:	4413      	add	r3, r2
 8018cb2:	781b      	ldrb	r3, [r3, #0]
 8018cb4:	2b5c      	cmp	r3, #92	; 0x5c
 8018cb6:	d0f0      	beq.n	8018c9a <create_name+0x42>
			break;
 8018cb8:	e02a      	b.n	8018d10 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8018cba:	697b      	ldr	r3, [r7, #20]
 8018cbc:	2bfe      	cmp	r3, #254	; 0xfe
 8018cbe:	d901      	bls.n	8018cc4 <create_name+0x6c>
 8018cc0:	2306      	movs	r3, #6
 8018cc2:	e17d      	b.n	8018fc0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8018cc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018cc6:	b2db      	uxtb	r3, r3
 8018cc8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8018cca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018ccc:	2101      	movs	r1, #1
 8018cce:	4618      	mov	r0, r3
 8018cd0:	f001 fa8c 	bl	801a1ec <ff_convert>
 8018cd4:	4603      	mov	r3, r0
 8018cd6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8018cd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018cda:	2b00      	cmp	r3, #0
 8018cdc:	d101      	bne.n	8018ce2 <create_name+0x8a>
 8018cde:	2306      	movs	r3, #6
 8018ce0:	e16e      	b.n	8018fc0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8018ce2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018ce4:	2b7f      	cmp	r3, #127	; 0x7f
 8018ce6:	d809      	bhi.n	8018cfc <create_name+0xa4>
 8018ce8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018cea:	4619      	mov	r1, r3
 8018cec:	488d      	ldr	r0, [pc, #564]	; (8018f24 <create_name+0x2cc>)
 8018cee:	f7fe fce2 	bl	80176b6 <chk_chr>
 8018cf2:	4603      	mov	r3, r0
 8018cf4:	2b00      	cmp	r3, #0
 8018cf6:	d001      	beq.n	8018cfc <create_name+0xa4>
 8018cf8:	2306      	movs	r3, #6
 8018cfa:	e161      	b.n	8018fc0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8018cfc:	697b      	ldr	r3, [r7, #20]
 8018cfe:	1c5a      	adds	r2, r3, #1
 8018d00:	617a      	str	r2, [r7, #20]
 8018d02:	005b      	lsls	r3, r3, #1
 8018d04:	68fa      	ldr	r2, [r7, #12]
 8018d06:	4413      	add	r3, r2
 8018d08:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018d0a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8018d0c:	e7b4      	b.n	8018c78 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8018d0e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8018d10:	693a      	ldr	r2, [r7, #16]
 8018d12:	69bb      	ldr	r3, [r7, #24]
 8018d14:	441a      	add	r2, r3
 8018d16:	683b      	ldr	r3, [r7, #0]
 8018d18:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8018d1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018d1c:	2b1f      	cmp	r3, #31
 8018d1e:	d801      	bhi.n	8018d24 <create_name+0xcc>
 8018d20:	2304      	movs	r3, #4
 8018d22:	e000      	b.n	8018d26 <create_name+0xce>
 8018d24:	2300      	movs	r3, #0
 8018d26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8018d2a:	e011      	b.n	8018d50 <create_name+0xf8>
		w = lfn[di - 1];
 8018d2c:	697a      	ldr	r2, [r7, #20]
 8018d2e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018d32:	4413      	add	r3, r2
 8018d34:	005b      	lsls	r3, r3, #1
 8018d36:	68fa      	ldr	r2, [r7, #12]
 8018d38:	4413      	add	r3, r2
 8018d3a:	881b      	ldrh	r3, [r3, #0]
 8018d3c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8018d3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018d40:	2b20      	cmp	r3, #32
 8018d42:	d002      	beq.n	8018d4a <create_name+0xf2>
 8018d44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018d46:	2b2e      	cmp	r3, #46	; 0x2e
 8018d48:	d106      	bne.n	8018d58 <create_name+0x100>
		di--;
 8018d4a:	697b      	ldr	r3, [r7, #20]
 8018d4c:	3b01      	subs	r3, #1
 8018d4e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8018d50:	697b      	ldr	r3, [r7, #20]
 8018d52:	2b00      	cmp	r3, #0
 8018d54:	d1ea      	bne.n	8018d2c <create_name+0xd4>
 8018d56:	e000      	b.n	8018d5a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8018d58:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8018d5a:	697b      	ldr	r3, [r7, #20]
 8018d5c:	005b      	lsls	r3, r3, #1
 8018d5e:	68fa      	ldr	r2, [r7, #12]
 8018d60:	4413      	add	r3, r2
 8018d62:	2200      	movs	r2, #0
 8018d64:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8018d66:	697b      	ldr	r3, [r7, #20]
 8018d68:	2b00      	cmp	r3, #0
 8018d6a:	d101      	bne.n	8018d70 <create_name+0x118>
 8018d6c:	2306      	movs	r3, #6
 8018d6e:	e127      	b.n	8018fc0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	3324      	adds	r3, #36	; 0x24
 8018d74:	220b      	movs	r2, #11
 8018d76:	2120      	movs	r1, #32
 8018d78:	4618      	mov	r0, r3
 8018d7a:	f7fe fc5a 	bl	8017632 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8018d7e:	2300      	movs	r3, #0
 8018d80:	61bb      	str	r3, [r7, #24]
 8018d82:	e002      	b.n	8018d8a <create_name+0x132>
 8018d84:	69bb      	ldr	r3, [r7, #24]
 8018d86:	3301      	adds	r3, #1
 8018d88:	61bb      	str	r3, [r7, #24]
 8018d8a:	69bb      	ldr	r3, [r7, #24]
 8018d8c:	005b      	lsls	r3, r3, #1
 8018d8e:	68fa      	ldr	r2, [r7, #12]
 8018d90:	4413      	add	r3, r2
 8018d92:	881b      	ldrh	r3, [r3, #0]
 8018d94:	2b20      	cmp	r3, #32
 8018d96:	d0f5      	beq.n	8018d84 <create_name+0x12c>
 8018d98:	69bb      	ldr	r3, [r7, #24]
 8018d9a:	005b      	lsls	r3, r3, #1
 8018d9c:	68fa      	ldr	r2, [r7, #12]
 8018d9e:	4413      	add	r3, r2
 8018da0:	881b      	ldrh	r3, [r3, #0]
 8018da2:	2b2e      	cmp	r3, #46	; 0x2e
 8018da4:	d0ee      	beq.n	8018d84 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8018da6:	69bb      	ldr	r3, [r7, #24]
 8018da8:	2b00      	cmp	r3, #0
 8018daa:	d009      	beq.n	8018dc0 <create_name+0x168>
 8018dac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018db0:	f043 0303 	orr.w	r3, r3, #3
 8018db4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8018db8:	e002      	b.n	8018dc0 <create_name+0x168>
 8018dba:	697b      	ldr	r3, [r7, #20]
 8018dbc:	3b01      	subs	r3, #1
 8018dbe:	617b      	str	r3, [r7, #20]
 8018dc0:	697b      	ldr	r3, [r7, #20]
 8018dc2:	2b00      	cmp	r3, #0
 8018dc4:	d009      	beq.n	8018dda <create_name+0x182>
 8018dc6:	697a      	ldr	r2, [r7, #20]
 8018dc8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018dcc:	4413      	add	r3, r2
 8018dce:	005b      	lsls	r3, r3, #1
 8018dd0:	68fa      	ldr	r2, [r7, #12]
 8018dd2:	4413      	add	r3, r2
 8018dd4:	881b      	ldrh	r3, [r3, #0]
 8018dd6:	2b2e      	cmp	r3, #46	; 0x2e
 8018dd8:	d1ef      	bne.n	8018dba <create_name+0x162>

	i = b = 0; ni = 8;
 8018dda:	2300      	movs	r3, #0
 8018ddc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018de0:	2300      	movs	r3, #0
 8018de2:	623b      	str	r3, [r7, #32]
 8018de4:	2308      	movs	r3, #8
 8018de6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8018de8:	69bb      	ldr	r3, [r7, #24]
 8018dea:	1c5a      	adds	r2, r3, #1
 8018dec:	61ba      	str	r2, [r7, #24]
 8018dee:	005b      	lsls	r3, r3, #1
 8018df0:	68fa      	ldr	r2, [r7, #12]
 8018df2:	4413      	add	r3, r2
 8018df4:	881b      	ldrh	r3, [r3, #0]
 8018df6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8018df8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	f000 8090 	beq.w	8018f20 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8018e00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e02:	2b20      	cmp	r3, #32
 8018e04:	d006      	beq.n	8018e14 <create_name+0x1bc>
 8018e06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e08:	2b2e      	cmp	r3, #46	; 0x2e
 8018e0a:	d10a      	bne.n	8018e22 <create_name+0x1ca>
 8018e0c:	69ba      	ldr	r2, [r7, #24]
 8018e0e:	697b      	ldr	r3, [r7, #20]
 8018e10:	429a      	cmp	r2, r3
 8018e12:	d006      	beq.n	8018e22 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8018e14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018e18:	f043 0303 	orr.w	r3, r3, #3
 8018e1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018e20:	e07d      	b.n	8018f1e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8018e22:	6a3a      	ldr	r2, [r7, #32]
 8018e24:	69fb      	ldr	r3, [r7, #28]
 8018e26:	429a      	cmp	r2, r3
 8018e28:	d203      	bcs.n	8018e32 <create_name+0x1da>
 8018e2a:	69ba      	ldr	r2, [r7, #24]
 8018e2c:	697b      	ldr	r3, [r7, #20]
 8018e2e:	429a      	cmp	r2, r3
 8018e30:	d123      	bne.n	8018e7a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8018e32:	69fb      	ldr	r3, [r7, #28]
 8018e34:	2b0b      	cmp	r3, #11
 8018e36:	d106      	bne.n	8018e46 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8018e38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018e3c:	f043 0303 	orr.w	r3, r3, #3
 8018e40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018e44:	e075      	b.n	8018f32 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8018e46:	69ba      	ldr	r2, [r7, #24]
 8018e48:	697b      	ldr	r3, [r7, #20]
 8018e4a:	429a      	cmp	r2, r3
 8018e4c:	d005      	beq.n	8018e5a <create_name+0x202>
 8018e4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018e52:	f043 0303 	orr.w	r3, r3, #3
 8018e56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8018e5a:	69ba      	ldr	r2, [r7, #24]
 8018e5c:	697b      	ldr	r3, [r7, #20]
 8018e5e:	429a      	cmp	r2, r3
 8018e60:	d866      	bhi.n	8018f30 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8018e62:	697b      	ldr	r3, [r7, #20]
 8018e64:	61bb      	str	r3, [r7, #24]
 8018e66:	2308      	movs	r3, #8
 8018e68:	623b      	str	r3, [r7, #32]
 8018e6a:	230b      	movs	r3, #11
 8018e6c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8018e6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018e72:	009b      	lsls	r3, r3, #2
 8018e74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018e78:	e051      	b.n	8018f1e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8018e7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e7c:	2b7f      	cmp	r3, #127	; 0x7f
 8018e7e:	d914      	bls.n	8018eaa <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8018e80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e82:	2100      	movs	r1, #0
 8018e84:	4618      	mov	r0, r3
 8018e86:	f001 f9b1 	bl	801a1ec <ff_convert>
 8018e8a:	4603      	mov	r3, r0
 8018e8c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8018e8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	d004      	beq.n	8018e9e <create_name+0x246>
 8018e94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e96:	3b80      	subs	r3, #128	; 0x80
 8018e98:	4a23      	ldr	r2, [pc, #140]	; (8018f28 <create_name+0x2d0>)
 8018e9a:	5cd3      	ldrb	r3, [r2, r3]
 8018e9c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8018e9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018ea2:	f043 0302 	orr.w	r3, r3, #2
 8018ea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8018eaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018eac:	2b00      	cmp	r3, #0
 8018eae:	d007      	beq.n	8018ec0 <create_name+0x268>
 8018eb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018eb2:	4619      	mov	r1, r3
 8018eb4:	481d      	ldr	r0, [pc, #116]	; (8018f2c <create_name+0x2d4>)
 8018eb6:	f7fe fbfe 	bl	80176b6 <chk_chr>
 8018eba:	4603      	mov	r3, r0
 8018ebc:	2b00      	cmp	r3, #0
 8018ebe:	d008      	beq.n	8018ed2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8018ec0:	235f      	movs	r3, #95	; 0x5f
 8018ec2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8018ec4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018ec8:	f043 0303 	orr.w	r3, r3, #3
 8018ecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018ed0:	e01b      	b.n	8018f0a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8018ed2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018ed4:	2b40      	cmp	r3, #64	; 0x40
 8018ed6:	d909      	bls.n	8018eec <create_name+0x294>
 8018ed8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018eda:	2b5a      	cmp	r3, #90	; 0x5a
 8018edc:	d806      	bhi.n	8018eec <create_name+0x294>
					b |= 2;
 8018ede:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018ee2:	f043 0302 	orr.w	r3, r3, #2
 8018ee6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018eea:	e00e      	b.n	8018f0a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8018eec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018eee:	2b60      	cmp	r3, #96	; 0x60
 8018ef0:	d90b      	bls.n	8018f0a <create_name+0x2b2>
 8018ef2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018ef4:	2b7a      	cmp	r3, #122	; 0x7a
 8018ef6:	d808      	bhi.n	8018f0a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8018ef8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018efc:	f043 0301 	orr.w	r3, r3, #1
 8018f00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018f04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018f06:	3b20      	subs	r3, #32
 8018f08:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8018f0a:	6a3b      	ldr	r3, [r7, #32]
 8018f0c:	1c5a      	adds	r2, r3, #1
 8018f0e:	623a      	str	r2, [r7, #32]
 8018f10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018f12:	b2d1      	uxtb	r1, r2
 8018f14:	687a      	ldr	r2, [r7, #4]
 8018f16:	4413      	add	r3, r2
 8018f18:	460a      	mov	r2, r1
 8018f1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8018f1e:	e763      	b.n	8018de8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8018f20:	bf00      	nop
 8018f22:	e006      	b.n	8018f32 <create_name+0x2da>
 8018f24:	0801c28c 	.word	0x0801c28c
 8018f28:	0801c3e0 	.word	0x0801c3e0
 8018f2c:	0801c298 	.word	0x0801c298
			if (si > di) break;			/* No extension */
 8018f30:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8018f32:	687b      	ldr	r3, [r7, #4]
 8018f34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018f38:	2be5      	cmp	r3, #229	; 0xe5
 8018f3a:	d103      	bne.n	8018f44 <create_name+0x2ec>
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	2205      	movs	r2, #5
 8018f40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8018f44:	69fb      	ldr	r3, [r7, #28]
 8018f46:	2b08      	cmp	r3, #8
 8018f48:	d104      	bne.n	8018f54 <create_name+0x2fc>
 8018f4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018f4e:	009b      	lsls	r3, r3, #2
 8018f50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8018f54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018f58:	f003 030c 	and.w	r3, r3, #12
 8018f5c:	2b0c      	cmp	r3, #12
 8018f5e:	d005      	beq.n	8018f6c <create_name+0x314>
 8018f60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018f64:	f003 0303 	and.w	r3, r3, #3
 8018f68:	2b03      	cmp	r3, #3
 8018f6a:	d105      	bne.n	8018f78 <create_name+0x320>
 8018f6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018f70:	f043 0302 	orr.w	r3, r3, #2
 8018f74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8018f78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018f7c:	f003 0302 	and.w	r3, r3, #2
 8018f80:	2b00      	cmp	r3, #0
 8018f82:	d117      	bne.n	8018fb4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8018f84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018f88:	f003 0303 	and.w	r3, r3, #3
 8018f8c:	2b01      	cmp	r3, #1
 8018f8e:	d105      	bne.n	8018f9c <create_name+0x344>
 8018f90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018f94:	f043 0310 	orr.w	r3, r3, #16
 8018f98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8018f9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018fa0:	f003 030c 	and.w	r3, r3, #12
 8018fa4:	2b04      	cmp	r3, #4
 8018fa6:	d105      	bne.n	8018fb4 <create_name+0x35c>
 8018fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018fac:	f043 0308 	orr.w	r3, r3, #8
 8018fb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018fba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8018fbe:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8018fc0:	4618      	mov	r0, r3
 8018fc2:	3728      	adds	r7, #40	; 0x28
 8018fc4:	46bd      	mov	sp, r7
 8018fc6:	bd80      	pop	{r7, pc}

08018fc8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8018fc8:	b580      	push	{r7, lr}
 8018fca:	b086      	sub	sp, #24
 8018fcc:	af00      	add	r7, sp, #0
 8018fce:	6078      	str	r0, [r7, #4]
 8018fd0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8018fd2:	687b      	ldr	r3, [r7, #4]
 8018fd4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8018fd6:	693b      	ldr	r3, [r7, #16]
 8018fd8:	681b      	ldr	r3, [r3, #0]
 8018fda:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8018fdc:	e002      	b.n	8018fe4 <follow_path+0x1c>
 8018fde:	683b      	ldr	r3, [r7, #0]
 8018fe0:	3301      	adds	r3, #1
 8018fe2:	603b      	str	r3, [r7, #0]
 8018fe4:	683b      	ldr	r3, [r7, #0]
 8018fe6:	781b      	ldrb	r3, [r3, #0]
 8018fe8:	2b2f      	cmp	r3, #47	; 0x2f
 8018fea:	d0f8      	beq.n	8018fde <follow_path+0x16>
 8018fec:	683b      	ldr	r3, [r7, #0]
 8018fee:	781b      	ldrb	r3, [r3, #0]
 8018ff0:	2b5c      	cmp	r3, #92	; 0x5c
 8018ff2:	d0f4      	beq.n	8018fde <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8018ff4:	693b      	ldr	r3, [r7, #16]
 8018ff6:	2200      	movs	r2, #0
 8018ff8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8018ffa:	683b      	ldr	r3, [r7, #0]
 8018ffc:	781b      	ldrb	r3, [r3, #0]
 8018ffe:	2b1f      	cmp	r3, #31
 8019000:	d80a      	bhi.n	8019018 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	2280      	movs	r2, #128	; 0x80
 8019006:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801900a:	2100      	movs	r1, #0
 801900c:	6878      	ldr	r0, [r7, #4]
 801900e:	f7ff f8fd 	bl	801820c <dir_sdi>
 8019012:	4603      	mov	r3, r0
 8019014:	75fb      	strb	r3, [r7, #23]
 8019016:	e048      	b.n	80190aa <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8019018:	463b      	mov	r3, r7
 801901a:	4619      	mov	r1, r3
 801901c:	6878      	ldr	r0, [r7, #4]
 801901e:	f7ff fe1b 	bl	8018c58 <create_name>
 8019022:	4603      	mov	r3, r0
 8019024:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8019026:	7dfb      	ldrb	r3, [r7, #23]
 8019028:	2b00      	cmp	r3, #0
 801902a:	d139      	bne.n	80190a0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 801902c:	6878      	ldr	r0, [r7, #4]
 801902e:	f7ff fc5a 	bl	80188e6 <dir_find>
 8019032:	4603      	mov	r3, r0
 8019034:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801903c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801903e:	7dfb      	ldrb	r3, [r7, #23]
 8019040:	2b00      	cmp	r3, #0
 8019042:	d00a      	beq.n	801905a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8019044:	7dfb      	ldrb	r3, [r7, #23]
 8019046:	2b04      	cmp	r3, #4
 8019048:	d12c      	bne.n	80190a4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801904a:	7afb      	ldrb	r3, [r7, #11]
 801904c:	f003 0304 	and.w	r3, r3, #4
 8019050:	2b00      	cmp	r3, #0
 8019052:	d127      	bne.n	80190a4 <follow_path+0xdc>
 8019054:	2305      	movs	r3, #5
 8019056:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8019058:	e024      	b.n	80190a4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801905a:	7afb      	ldrb	r3, [r7, #11]
 801905c:	f003 0304 	and.w	r3, r3, #4
 8019060:	2b00      	cmp	r3, #0
 8019062:	d121      	bne.n	80190a8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8019064:	693b      	ldr	r3, [r7, #16]
 8019066:	799b      	ldrb	r3, [r3, #6]
 8019068:	f003 0310 	and.w	r3, r3, #16
 801906c:	2b00      	cmp	r3, #0
 801906e:	d102      	bne.n	8019076 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8019070:	2305      	movs	r3, #5
 8019072:	75fb      	strb	r3, [r7, #23]
 8019074:	e019      	b.n	80190aa <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8019076:	68fb      	ldr	r3, [r7, #12]
 8019078:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801907c:	687b      	ldr	r3, [r7, #4]
 801907e:	695b      	ldr	r3, [r3, #20]
 8019080:	68fa      	ldr	r2, [r7, #12]
 8019082:	8992      	ldrh	r2, [r2, #12]
 8019084:	fbb3 f0f2 	udiv	r0, r3, r2
 8019088:	fb00 f202 	mul.w	r2, r0, r2
 801908c:	1a9b      	subs	r3, r3, r2
 801908e:	440b      	add	r3, r1
 8019090:	4619      	mov	r1, r3
 8019092:	68f8      	ldr	r0, [r7, #12]
 8019094:	f7ff fa60 	bl	8018558 <ld_clust>
 8019098:	4602      	mov	r2, r0
 801909a:	693b      	ldr	r3, [r7, #16]
 801909c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801909e:	e7bb      	b.n	8019018 <follow_path+0x50>
			if (res != FR_OK) break;
 80190a0:	bf00      	nop
 80190a2:	e002      	b.n	80190aa <follow_path+0xe2>
				break;
 80190a4:	bf00      	nop
 80190a6:	e000      	b.n	80190aa <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80190a8:	bf00      	nop
			}
		}
	}

	return res;
 80190aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80190ac:	4618      	mov	r0, r3
 80190ae:	3718      	adds	r7, #24
 80190b0:	46bd      	mov	sp, r7
 80190b2:	bd80      	pop	{r7, pc}

080190b4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80190b4:	b480      	push	{r7}
 80190b6:	b087      	sub	sp, #28
 80190b8:	af00      	add	r7, sp, #0
 80190ba:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80190bc:	f04f 33ff 	mov.w	r3, #4294967295
 80190c0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	681b      	ldr	r3, [r3, #0]
 80190c6:	2b00      	cmp	r3, #0
 80190c8:	d031      	beq.n	801912e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80190ca:	687b      	ldr	r3, [r7, #4]
 80190cc:	681b      	ldr	r3, [r3, #0]
 80190ce:	617b      	str	r3, [r7, #20]
 80190d0:	e002      	b.n	80190d8 <get_ldnumber+0x24>
 80190d2:	697b      	ldr	r3, [r7, #20]
 80190d4:	3301      	adds	r3, #1
 80190d6:	617b      	str	r3, [r7, #20]
 80190d8:	697b      	ldr	r3, [r7, #20]
 80190da:	781b      	ldrb	r3, [r3, #0]
 80190dc:	2b1f      	cmp	r3, #31
 80190de:	d903      	bls.n	80190e8 <get_ldnumber+0x34>
 80190e0:	697b      	ldr	r3, [r7, #20]
 80190e2:	781b      	ldrb	r3, [r3, #0]
 80190e4:	2b3a      	cmp	r3, #58	; 0x3a
 80190e6:	d1f4      	bne.n	80190d2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80190e8:	697b      	ldr	r3, [r7, #20]
 80190ea:	781b      	ldrb	r3, [r3, #0]
 80190ec:	2b3a      	cmp	r3, #58	; 0x3a
 80190ee:	d11c      	bne.n	801912a <get_ldnumber+0x76>
			tp = *path;
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	681b      	ldr	r3, [r3, #0]
 80190f4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80190f6:	68fb      	ldr	r3, [r7, #12]
 80190f8:	1c5a      	adds	r2, r3, #1
 80190fa:	60fa      	str	r2, [r7, #12]
 80190fc:	781b      	ldrb	r3, [r3, #0]
 80190fe:	3b30      	subs	r3, #48	; 0x30
 8019100:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8019102:	68bb      	ldr	r3, [r7, #8]
 8019104:	2b09      	cmp	r3, #9
 8019106:	d80e      	bhi.n	8019126 <get_ldnumber+0x72>
 8019108:	68fa      	ldr	r2, [r7, #12]
 801910a:	697b      	ldr	r3, [r7, #20]
 801910c:	429a      	cmp	r2, r3
 801910e:	d10a      	bne.n	8019126 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8019110:	68bb      	ldr	r3, [r7, #8]
 8019112:	2b00      	cmp	r3, #0
 8019114:	d107      	bne.n	8019126 <get_ldnumber+0x72>
					vol = (int)i;
 8019116:	68bb      	ldr	r3, [r7, #8]
 8019118:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801911a:	697b      	ldr	r3, [r7, #20]
 801911c:	3301      	adds	r3, #1
 801911e:	617b      	str	r3, [r7, #20]
 8019120:	687b      	ldr	r3, [r7, #4]
 8019122:	697a      	ldr	r2, [r7, #20]
 8019124:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8019126:	693b      	ldr	r3, [r7, #16]
 8019128:	e002      	b.n	8019130 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801912a:	2300      	movs	r3, #0
 801912c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801912e:	693b      	ldr	r3, [r7, #16]
}
 8019130:	4618      	mov	r0, r3
 8019132:	371c      	adds	r7, #28
 8019134:	46bd      	mov	sp, r7
 8019136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801913a:	4770      	bx	lr

0801913c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801913c:	b580      	push	{r7, lr}
 801913e:	b082      	sub	sp, #8
 8019140:	af00      	add	r7, sp, #0
 8019142:	6078      	str	r0, [r7, #4]
 8019144:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8019146:	687b      	ldr	r3, [r7, #4]
 8019148:	2200      	movs	r2, #0
 801914a:	70da      	strb	r2, [r3, #3]
 801914c:	687b      	ldr	r3, [r7, #4]
 801914e:	f04f 32ff 	mov.w	r2, #4294967295
 8019152:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8019154:	6839      	ldr	r1, [r7, #0]
 8019156:	6878      	ldr	r0, [r7, #4]
 8019158:	f7fe fc78 	bl	8017a4c <move_window>
 801915c:	4603      	mov	r3, r0
 801915e:	2b00      	cmp	r3, #0
 8019160:	d001      	beq.n	8019166 <check_fs+0x2a>
 8019162:	2304      	movs	r3, #4
 8019164:	e038      	b.n	80191d8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	3338      	adds	r3, #56	; 0x38
 801916a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801916e:	4618      	mov	r0, r3
 8019170:	f7fe f9bc 	bl	80174ec <ld_word>
 8019174:	4603      	mov	r3, r0
 8019176:	461a      	mov	r2, r3
 8019178:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801917c:	429a      	cmp	r2, r3
 801917e:	d001      	beq.n	8019184 <check_fs+0x48>
 8019180:	2303      	movs	r3, #3
 8019182:	e029      	b.n	80191d8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8019184:	687b      	ldr	r3, [r7, #4]
 8019186:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801918a:	2be9      	cmp	r3, #233	; 0xe9
 801918c:	d009      	beq.n	80191a2 <check_fs+0x66>
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8019194:	2beb      	cmp	r3, #235	; 0xeb
 8019196:	d11e      	bne.n	80191d6 <check_fs+0x9a>
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801919e:	2b90      	cmp	r3, #144	; 0x90
 80191a0:	d119      	bne.n	80191d6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	3338      	adds	r3, #56	; 0x38
 80191a6:	3336      	adds	r3, #54	; 0x36
 80191a8:	4618      	mov	r0, r3
 80191aa:	f7fe f9b7 	bl	801751c <ld_dword>
 80191ae:	4603      	mov	r3, r0
 80191b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80191b4:	4a0a      	ldr	r2, [pc, #40]	; (80191e0 <check_fs+0xa4>)
 80191b6:	4293      	cmp	r3, r2
 80191b8:	d101      	bne.n	80191be <check_fs+0x82>
 80191ba:	2300      	movs	r3, #0
 80191bc:	e00c      	b.n	80191d8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80191be:	687b      	ldr	r3, [r7, #4]
 80191c0:	3338      	adds	r3, #56	; 0x38
 80191c2:	3352      	adds	r3, #82	; 0x52
 80191c4:	4618      	mov	r0, r3
 80191c6:	f7fe f9a9 	bl	801751c <ld_dword>
 80191ca:	4603      	mov	r3, r0
 80191cc:	4a05      	ldr	r2, [pc, #20]	; (80191e4 <check_fs+0xa8>)
 80191ce:	4293      	cmp	r3, r2
 80191d0:	d101      	bne.n	80191d6 <check_fs+0x9a>
 80191d2:	2300      	movs	r3, #0
 80191d4:	e000      	b.n	80191d8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80191d6:	2302      	movs	r3, #2
}
 80191d8:	4618      	mov	r0, r3
 80191da:	3708      	adds	r7, #8
 80191dc:	46bd      	mov	sp, r7
 80191de:	bd80      	pop	{r7, pc}
 80191e0:	00544146 	.word	0x00544146
 80191e4:	33544146 	.word	0x33544146

080191e8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80191e8:	b580      	push	{r7, lr}
 80191ea:	b096      	sub	sp, #88	; 0x58
 80191ec:	af00      	add	r7, sp, #0
 80191ee:	60f8      	str	r0, [r7, #12]
 80191f0:	60b9      	str	r1, [r7, #8]
 80191f2:	4613      	mov	r3, r2
 80191f4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80191f6:	68bb      	ldr	r3, [r7, #8]
 80191f8:	2200      	movs	r2, #0
 80191fa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80191fc:	68f8      	ldr	r0, [r7, #12]
 80191fe:	f7ff ff59 	bl	80190b4 <get_ldnumber>
 8019202:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8019204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019206:	2b00      	cmp	r3, #0
 8019208:	da01      	bge.n	801920e <find_volume+0x26>
 801920a:	230b      	movs	r3, #11
 801920c:	e265      	b.n	80196da <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801920e:	4a9f      	ldr	r2, [pc, #636]	; (801948c <find_volume+0x2a4>)
 8019210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019216:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8019218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801921a:	2b00      	cmp	r3, #0
 801921c:	d101      	bne.n	8019222 <find_volume+0x3a>
 801921e:	230c      	movs	r3, #12
 8019220:	e25b      	b.n	80196da <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8019222:	68bb      	ldr	r3, [r7, #8]
 8019224:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019226:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8019228:	79fb      	ldrb	r3, [r7, #7]
 801922a:	f023 0301 	bic.w	r3, r3, #1
 801922e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8019230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019232:	781b      	ldrb	r3, [r3, #0]
 8019234:	2b00      	cmp	r3, #0
 8019236:	d01a      	beq.n	801926e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8019238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801923a:	785b      	ldrb	r3, [r3, #1]
 801923c:	4618      	mov	r0, r3
 801923e:	f7fe f8b7 	bl	80173b0 <disk_status>
 8019242:	4603      	mov	r3, r0
 8019244:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8019248:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801924c:	f003 0301 	and.w	r3, r3, #1
 8019250:	2b00      	cmp	r3, #0
 8019252:	d10c      	bne.n	801926e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8019254:	79fb      	ldrb	r3, [r7, #7]
 8019256:	2b00      	cmp	r3, #0
 8019258:	d007      	beq.n	801926a <find_volume+0x82>
 801925a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801925e:	f003 0304 	and.w	r3, r3, #4
 8019262:	2b00      	cmp	r3, #0
 8019264:	d001      	beq.n	801926a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8019266:	230a      	movs	r3, #10
 8019268:	e237      	b.n	80196da <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 801926a:	2300      	movs	r3, #0
 801926c:	e235      	b.n	80196da <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801926e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019270:	2200      	movs	r2, #0
 8019272:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8019274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019276:	b2da      	uxtb	r2, r3
 8019278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801927a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801927c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801927e:	785b      	ldrb	r3, [r3, #1]
 8019280:	4618      	mov	r0, r3
 8019282:	f7fe f8af 	bl	80173e4 <disk_initialize>
 8019286:	4603      	mov	r3, r0
 8019288:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801928c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8019290:	f003 0301 	and.w	r3, r3, #1
 8019294:	2b00      	cmp	r3, #0
 8019296:	d001      	beq.n	801929c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8019298:	2303      	movs	r3, #3
 801929a:	e21e      	b.n	80196da <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801929c:	79fb      	ldrb	r3, [r7, #7]
 801929e:	2b00      	cmp	r3, #0
 80192a0:	d007      	beq.n	80192b2 <find_volume+0xca>
 80192a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80192a6:	f003 0304 	and.w	r3, r3, #4
 80192aa:	2b00      	cmp	r3, #0
 80192ac:	d001      	beq.n	80192b2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80192ae:	230a      	movs	r3, #10
 80192b0:	e213      	b.n	80196da <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80192b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192b4:	7858      	ldrb	r0, [r3, #1]
 80192b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192b8:	330c      	adds	r3, #12
 80192ba:	461a      	mov	r2, r3
 80192bc:	2102      	movs	r1, #2
 80192be:	f7fe f8f7 	bl	80174b0 <disk_ioctl>
 80192c2:	4603      	mov	r3, r0
 80192c4:	2b00      	cmp	r3, #0
 80192c6:	d001      	beq.n	80192cc <find_volume+0xe4>
 80192c8:	2301      	movs	r3, #1
 80192ca:	e206      	b.n	80196da <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80192cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192ce:	899b      	ldrh	r3, [r3, #12]
 80192d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80192d4:	d80d      	bhi.n	80192f2 <find_volume+0x10a>
 80192d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192d8:	899b      	ldrh	r3, [r3, #12]
 80192da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80192de:	d308      	bcc.n	80192f2 <find_volume+0x10a>
 80192e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192e2:	899b      	ldrh	r3, [r3, #12]
 80192e4:	461a      	mov	r2, r3
 80192e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192e8:	899b      	ldrh	r3, [r3, #12]
 80192ea:	3b01      	subs	r3, #1
 80192ec:	4013      	ands	r3, r2
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	d001      	beq.n	80192f6 <find_volume+0x10e>
 80192f2:	2301      	movs	r3, #1
 80192f4:	e1f1      	b.n	80196da <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80192f6:	2300      	movs	r3, #0
 80192f8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80192fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80192fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80192fe:	f7ff ff1d 	bl	801913c <check_fs>
 8019302:	4603      	mov	r3, r0
 8019304:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8019308:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801930c:	2b02      	cmp	r3, #2
 801930e:	d149      	bne.n	80193a4 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8019310:	2300      	movs	r3, #0
 8019312:	643b      	str	r3, [r7, #64]	; 0x40
 8019314:	e01e      	b.n	8019354 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8019316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019318:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801931c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801931e:	011b      	lsls	r3, r3, #4
 8019320:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8019324:	4413      	add	r3, r2
 8019326:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8019328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801932a:	3304      	adds	r3, #4
 801932c:	781b      	ldrb	r3, [r3, #0]
 801932e:	2b00      	cmp	r3, #0
 8019330:	d006      	beq.n	8019340 <find_volume+0x158>
 8019332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019334:	3308      	adds	r3, #8
 8019336:	4618      	mov	r0, r3
 8019338:	f7fe f8f0 	bl	801751c <ld_dword>
 801933c:	4602      	mov	r2, r0
 801933e:	e000      	b.n	8019342 <find_volume+0x15a>
 8019340:	2200      	movs	r2, #0
 8019342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019344:	009b      	lsls	r3, r3, #2
 8019346:	3358      	adds	r3, #88	; 0x58
 8019348:	443b      	add	r3, r7
 801934a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801934e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019350:	3301      	adds	r3, #1
 8019352:	643b      	str	r3, [r7, #64]	; 0x40
 8019354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019356:	2b03      	cmp	r3, #3
 8019358:	d9dd      	bls.n	8019316 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801935a:	2300      	movs	r3, #0
 801935c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801935e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019360:	2b00      	cmp	r3, #0
 8019362:	d002      	beq.n	801936a <find_volume+0x182>
 8019364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019366:	3b01      	subs	r3, #1
 8019368:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801936a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801936c:	009b      	lsls	r3, r3, #2
 801936e:	3358      	adds	r3, #88	; 0x58
 8019370:	443b      	add	r3, r7
 8019372:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8019376:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8019378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801937a:	2b00      	cmp	r3, #0
 801937c:	d005      	beq.n	801938a <find_volume+0x1a2>
 801937e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8019380:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019382:	f7ff fedb 	bl	801913c <check_fs>
 8019386:	4603      	mov	r3, r0
 8019388:	e000      	b.n	801938c <find_volume+0x1a4>
 801938a:	2303      	movs	r3, #3
 801938c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8019390:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019394:	2b01      	cmp	r3, #1
 8019396:	d905      	bls.n	80193a4 <find_volume+0x1bc>
 8019398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801939a:	3301      	adds	r3, #1
 801939c:	643b      	str	r3, [r7, #64]	; 0x40
 801939e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80193a0:	2b03      	cmp	r3, #3
 80193a2:	d9e2      	bls.n	801936a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80193a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80193a8:	2b04      	cmp	r3, #4
 80193aa:	d101      	bne.n	80193b0 <find_volume+0x1c8>
 80193ac:	2301      	movs	r3, #1
 80193ae:	e194      	b.n	80196da <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80193b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80193b4:	2b01      	cmp	r3, #1
 80193b6:	d901      	bls.n	80193bc <find_volume+0x1d4>
 80193b8:	230d      	movs	r3, #13
 80193ba:	e18e      	b.n	80196da <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80193bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193be:	3338      	adds	r3, #56	; 0x38
 80193c0:	330b      	adds	r3, #11
 80193c2:	4618      	mov	r0, r3
 80193c4:	f7fe f892 	bl	80174ec <ld_word>
 80193c8:	4603      	mov	r3, r0
 80193ca:	461a      	mov	r2, r3
 80193cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193ce:	899b      	ldrh	r3, [r3, #12]
 80193d0:	429a      	cmp	r2, r3
 80193d2:	d001      	beq.n	80193d8 <find_volume+0x1f0>
 80193d4:	230d      	movs	r3, #13
 80193d6:	e180      	b.n	80196da <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80193d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193da:	3338      	adds	r3, #56	; 0x38
 80193dc:	3316      	adds	r3, #22
 80193de:	4618      	mov	r0, r3
 80193e0:	f7fe f884 	bl	80174ec <ld_word>
 80193e4:	4603      	mov	r3, r0
 80193e6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80193e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80193ea:	2b00      	cmp	r3, #0
 80193ec:	d106      	bne.n	80193fc <find_volume+0x214>
 80193ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193f0:	3338      	adds	r3, #56	; 0x38
 80193f2:	3324      	adds	r3, #36	; 0x24
 80193f4:	4618      	mov	r0, r3
 80193f6:	f7fe f891 	bl	801751c <ld_dword>
 80193fa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80193fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019400:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8019402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019404:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8019408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801940a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801940c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801940e:	789b      	ldrb	r3, [r3, #2]
 8019410:	2b01      	cmp	r3, #1
 8019412:	d005      	beq.n	8019420 <find_volume+0x238>
 8019414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019416:	789b      	ldrb	r3, [r3, #2]
 8019418:	2b02      	cmp	r3, #2
 801941a:	d001      	beq.n	8019420 <find_volume+0x238>
 801941c:	230d      	movs	r3, #13
 801941e:	e15c      	b.n	80196da <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8019420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019422:	789b      	ldrb	r3, [r3, #2]
 8019424:	461a      	mov	r2, r3
 8019426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019428:	fb02 f303 	mul.w	r3, r2, r3
 801942c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801942e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019430:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019434:	b29a      	uxth	r2, r3
 8019436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019438:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801943a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801943c:	895b      	ldrh	r3, [r3, #10]
 801943e:	2b00      	cmp	r3, #0
 8019440:	d008      	beq.n	8019454 <find_volume+0x26c>
 8019442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019444:	895b      	ldrh	r3, [r3, #10]
 8019446:	461a      	mov	r2, r3
 8019448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801944a:	895b      	ldrh	r3, [r3, #10]
 801944c:	3b01      	subs	r3, #1
 801944e:	4013      	ands	r3, r2
 8019450:	2b00      	cmp	r3, #0
 8019452:	d001      	beq.n	8019458 <find_volume+0x270>
 8019454:	230d      	movs	r3, #13
 8019456:	e140      	b.n	80196da <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8019458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801945a:	3338      	adds	r3, #56	; 0x38
 801945c:	3311      	adds	r3, #17
 801945e:	4618      	mov	r0, r3
 8019460:	f7fe f844 	bl	80174ec <ld_word>
 8019464:	4603      	mov	r3, r0
 8019466:	461a      	mov	r2, r3
 8019468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801946a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801946c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801946e:	891b      	ldrh	r3, [r3, #8]
 8019470:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019472:	8992      	ldrh	r2, [r2, #12]
 8019474:	0952      	lsrs	r2, r2, #5
 8019476:	b292      	uxth	r2, r2
 8019478:	fbb3 f1f2 	udiv	r1, r3, r2
 801947c:	fb01 f202 	mul.w	r2, r1, r2
 8019480:	1a9b      	subs	r3, r3, r2
 8019482:	b29b      	uxth	r3, r3
 8019484:	2b00      	cmp	r3, #0
 8019486:	d003      	beq.n	8019490 <find_volume+0x2a8>
 8019488:	230d      	movs	r3, #13
 801948a:	e126      	b.n	80196da <find_volume+0x4f2>
 801948c:	24003cfc 	.word	0x24003cfc

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8019490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019492:	3338      	adds	r3, #56	; 0x38
 8019494:	3313      	adds	r3, #19
 8019496:	4618      	mov	r0, r3
 8019498:	f7fe f828 	bl	80174ec <ld_word>
 801949c:	4603      	mov	r3, r0
 801949e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80194a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80194a2:	2b00      	cmp	r3, #0
 80194a4:	d106      	bne.n	80194b4 <find_volume+0x2cc>
 80194a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194a8:	3338      	adds	r3, #56	; 0x38
 80194aa:	3320      	adds	r3, #32
 80194ac:	4618      	mov	r0, r3
 80194ae:	f7fe f835 	bl	801751c <ld_dword>
 80194b2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80194b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194b6:	3338      	adds	r3, #56	; 0x38
 80194b8:	330e      	adds	r3, #14
 80194ba:	4618      	mov	r0, r3
 80194bc:	f7fe f816 	bl	80174ec <ld_word>
 80194c0:	4603      	mov	r3, r0
 80194c2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80194c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	d101      	bne.n	80194ce <find_volume+0x2e6>
 80194ca:	230d      	movs	r3, #13
 80194cc:	e105      	b.n	80196da <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80194ce:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80194d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80194d2:	4413      	add	r3, r2
 80194d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80194d6:	8911      	ldrh	r1, [r2, #8]
 80194d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80194da:	8992      	ldrh	r2, [r2, #12]
 80194dc:	0952      	lsrs	r2, r2, #5
 80194de:	b292      	uxth	r2, r2
 80194e0:	fbb1 f2f2 	udiv	r2, r1, r2
 80194e4:	b292      	uxth	r2, r2
 80194e6:	4413      	add	r3, r2
 80194e8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80194ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80194ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194ee:	429a      	cmp	r2, r3
 80194f0:	d201      	bcs.n	80194f6 <find_volume+0x30e>
 80194f2:	230d      	movs	r3, #13
 80194f4:	e0f1      	b.n	80196da <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80194f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80194f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194fa:	1ad3      	subs	r3, r2, r3
 80194fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80194fe:	8952      	ldrh	r2, [r2, #10]
 8019500:	fbb3 f3f2 	udiv	r3, r3, r2
 8019504:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8019506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019508:	2b00      	cmp	r3, #0
 801950a:	d101      	bne.n	8019510 <find_volume+0x328>
 801950c:	230d      	movs	r3, #13
 801950e:	e0e4      	b.n	80196da <find_volume+0x4f2>
		fmt = FS_FAT32;
 8019510:	2303      	movs	r3, #3
 8019512:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8019516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019518:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801951c:	4293      	cmp	r3, r2
 801951e:	d802      	bhi.n	8019526 <find_volume+0x33e>
 8019520:	2302      	movs	r3, #2
 8019522:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8019526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019528:	f640 72f5 	movw	r2, #4085	; 0xff5
 801952c:	4293      	cmp	r3, r2
 801952e:	d802      	bhi.n	8019536 <find_volume+0x34e>
 8019530:	2301      	movs	r3, #1
 8019532:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8019536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019538:	1c9a      	adds	r2, r3, #2
 801953a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801953c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801953e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019540:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019542:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8019544:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8019546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019548:	441a      	add	r2, r3
 801954a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801954c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801954e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019552:	441a      	add	r2, r3
 8019554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019556:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8019558:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801955c:	2b03      	cmp	r3, #3
 801955e:	d11e      	bne.n	801959e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8019560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019562:	3338      	adds	r3, #56	; 0x38
 8019564:	332a      	adds	r3, #42	; 0x2a
 8019566:	4618      	mov	r0, r3
 8019568:	f7fd ffc0 	bl	80174ec <ld_word>
 801956c:	4603      	mov	r3, r0
 801956e:	2b00      	cmp	r3, #0
 8019570:	d001      	beq.n	8019576 <find_volume+0x38e>
 8019572:	230d      	movs	r3, #13
 8019574:	e0b1      	b.n	80196da <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8019576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019578:	891b      	ldrh	r3, [r3, #8]
 801957a:	2b00      	cmp	r3, #0
 801957c:	d001      	beq.n	8019582 <find_volume+0x39a>
 801957e:	230d      	movs	r3, #13
 8019580:	e0ab      	b.n	80196da <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8019582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019584:	3338      	adds	r3, #56	; 0x38
 8019586:	332c      	adds	r3, #44	; 0x2c
 8019588:	4618      	mov	r0, r3
 801958a:	f7fd ffc7 	bl	801751c <ld_dword>
 801958e:	4602      	mov	r2, r0
 8019590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019592:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8019594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019596:	69db      	ldr	r3, [r3, #28]
 8019598:	009b      	lsls	r3, r3, #2
 801959a:	647b      	str	r3, [r7, #68]	; 0x44
 801959c:	e01f      	b.n	80195de <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801959e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195a0:	891b      	ldrh	r3, [r3, #8]
 80195a2:	2b00      	cmp	r3, #0
 80195a4:	d101      	bne.n	80195aa <find_volume+0x3c2>
 80195a6:	230d      	movs	r3, #13
 80195a8:	e097      	b.n	80196da <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80195aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80195ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80195b0:	441a      	add	r2, r3
 80195b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195b4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80195b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80195ba:	2b02      	cmp	r3, #2
 80195bc:	d103      	bne.n	80195c6 <find_volume+0x3de>
 80195be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195c0:	69db      	ldr	r3, [r3, #28]
 80195c2:	005b      	lsls	r3, r3, #1
 80195c4:	e00a      	b.n	80195dc <find_volume+0x3f4>
 80195c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195c8:	69da      	ldr	r2, [r3, #28]
 80195ca:	4613      	mov	r3, r2
 80195cc:	005b      	lsls	r3, r3, #1
 80195ce:	4413      	add	r3, r2
 80195d0:	085a      	lsrs	r2, r3, #1
 80195d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195d4:	69db      	ldr	r3, [r3, #28]
 80195d6:	f003 0301 	and.w	r3, r3, #1
 80195da:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80195dc:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80195de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195e0:	6a1a      	ldr	r2, [r3, #32]
 80195e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195e4:	899b      	ldrh	r3, [r3, #12]
 80195e6:	4619      	mov	r1, r3
 80195e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80195ea:	440b      	add	r3, r1
 80195ec:	3b01      	subs	r3, #1
 80195ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80195f0:	8989      	ldrh	r1, [r1, #12]
 80195f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80195f6:	429a      	cmp	r2, r3
 80195f8:	d201      	bcs.n	80195fe <find_volume+0x416>
 80195fa:	230d      	movs	r3, #13
 80195fc:	e06d      	b.n	80196da <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80195fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019600:	f04f 32ff 	mov.w	r2, #4294967295
 8019604:	619a      	str	r2, [r3, #24]
 8019606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019608:	699a      	ldr	r2, [r3, #24]
 801960a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801960c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801960e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019610:	2280      	movs	r2, #128	; 0x80
 8019612:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8019614:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019618:	2b03      	cmp	r3, #3
 801961a:	d149      	bne.n	80196b0 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801961c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801961e:	3338      	adds	r3, #56	; 0x38
 8019620:	3330      	adds	r3, #48	; 0x30
 8019622:	4618      	mov	r0, r3
 8019624:	f7fd ff62 	bl	80174ec <ld_word>
 8019628:	4603      	mov	r3, r0
 801962a:	2b01      	cmp	r3, #1
 801962c:	d140      	bne.n	80196b0 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801962e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019630:	3301      	adds	r3, #1
 8019632:	4619      	mov	r1, r3
 8019634:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019636:	f7fe fa09 	bl	8017a4c <move_window>
 801963a:	4603      	mov	r3, r0
 801963c:	2b00      	cmp	r3, #0
 801963e:	d137      	bne.n	80196b0 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8019640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019642:	2200      	movs	r2, #0
 8019644:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8019646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019648:	3338      	adds	r3, #56	; 0x38
 801964a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801964e:	4618      	mov	r0, r3
 8019650:	f7fd ff4c 	bl	80174ec <ld_word>
 8019654:	4603      	mov	r3, r0
 8019656:	461a      	mov	r2, r3
 8019658:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801965c:	429a      	cmp	r2, r3
 801965e:	d127      	bne.n	80196b0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8019660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019662:	3338      	adds	r3, #56	; 0x38
 8019664:	4618      	mov	r0, r3
 8019666:	f7fd ff59 	bl	801751c <ld_dword>
 801966a:	4603      	mov	r3, r0
 801966c:	4a1d      	ldr	r2, [pc, #116]	; (80196e4 <find_volume+0x4fc>)
 801966e:	4293      	cmp	r3, r2
 8019670:	d11e      	bne.n	80196b0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8019672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019674:	3338      	adds	r3, #56	; 0x38
 8019676:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801967a:	4618      	mov	r0, r3
 801967c:	f7fd ff4e 	bl	801751c <ld_dword>
 8019680:	4603      	mov	r3, r0
 8019682:	4a19      	ldr	r2, [pc, #100]	; (80196e8 <find_volume+0x500>)
 8019684:	4293      	cmp	r3, r2
 8019686:	d113      	bne.n	80196b0 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8019688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801968a:	3338      	adds	r3, #56	; 0x38
 801968c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8019690:	4618      	mov	r0, r3
 8019692:	f7fd ff43 	bl	801751c <ld_dword>
 8019696:	4602      	mov	r2, r0
 8019698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801969a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801969c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801969e:	3338      	adds	r3, #56	; 0x38
 80196a0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80196a4:	4618      	mov	r0, r3
 80196a6:	f7fd ff39 	bl	801751c <ld_dword>
 80196aa:	4602      	mov	r2, r0
 80196ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196ae:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80196b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196b2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80196b6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80196b8:	4b0c      	ldr	r3, [pc, #48]	; (80196ec <find_volume+0x504>)
 80196ba:	881b      	ldrh	r3, [r3, #0]
 80196bc:	3301      	adds	r3, #1
 80196be:	b29a      	uxth	r2, r3
 80196c0:	4b0a      	ldr	r3, [pc, #40]	; (80196ec <find_volume+0x504>)
 80196c2:	801a      	strh	r2, [r3, #0]
 80196c4:	4b09      	ldr	r3, [pc, #36]	; (80196ec <find_volume+0x504>)
 80196c6:	881a      	ldrh	r2, [r3, #0]
 80196c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196ca:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80196cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196ce:	4a08      	ldr	r2, [pc, #32]	; (80196f0 <find_volume+0x508>)
 80196d0:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80196d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80196d4:	f7fe f952 	bl	801797c <clear_lock>
#endif
	return FR_OK;
 80196d8:	2300      	movs	r3, #0
}
 80196da:	4618      	mov	r0, r3
 80196dc:	3758      	adds	r7, #88	; 0x58
 80196de:	46bd      	mov	sp, r7
 80196e0:	bd80      	pop	{r7, pc}
 80196e2:	bf00      	nop
 80196e4:	41615252 	.word	0x41615252
 80196e8:	61417272 	.word	0x61417272
 80196ec:	24003d00 	.word	0x24003d00
 80196f0:	24003d24 	.word	0x24003d24

080196f4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80196f4:	b580      	push	{r7, lr}
 80196f6:	b084      	sub	sp, #16
 80196f8:	af00      	add	r7, sp, #0
 80196fa:	6078      	str	r0, [r7, #4]
 80196fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80196fe:	2309      	movs	r3, #9
 8019700:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8019702:	687b      	ldr	r3, [r7, #4]
 8019704:	2b00      	cmp	r3, #0
 8019706:	d01c      	beq.n	8019742 <validate+0x4e>
 8019708:	687b      	ldr	r3, [r7, #4]
 801970a:	681b      	ldr	r3, [r3, #0]
 801970c:	2b00      	cmp	r3, #0
 801970e:	d018      	beq.n	8019742 <validate+0x4e>
 8019710:	687b      	ldr	r3, [r7, #4]
 8019712:	681b      	ldr	r3, [r3, #0]
 8019714:	781b      	ldrb	r3, [r3, #0]
 8019716:	2b00      	cmp	r3, #0
 8019718:	d013      	beq.n	8019742 <validate+0x4e>
 801971a:	687b      	ldr	r3, [r7, #4]
 801971c:	889a      	ldrh	r2, [r3, #4]
 801971e:	687b      	ldr	r3, [r7, #4]
 8019720:	681b      	ldr	r3, [r3, #0]
 8019722:	88db      	ldrh	r3, [r3, #6]
 8019724:	429a      	cmp	r2, r3
 8019726:	d10c      	bne.n	8019742 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8019728:	687b      	ldr	r3, [r7, #4]
 801972a:	681b      	ldr	r3, [r3, #0]
 801972c:	785b      	ldrb	r3, [r3, #1]
 801972e:	4618      	mov	r0, r3
 8019730:	f7fd fe3e 	bl	80173b0 <disk_status>
 8019734:	4603      	mov	r3, r0
 8019736:	f003 0301 	and.w	r3, r3, #1
 801973a:	2b00      	cmp	r3, #0
 801973c:	d101      	bne.n	8019742 <validate+0x4e>
			res = FR_OK;
 801973e:	2300      	movs	r3, #0
 8019740:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8019742:	7bfb      	ldrb	r3, [r7, #15]
 8019744:	2b00      	cmp	r3, #0
 8019746:	d102      	bne.n	801974e <validate+0x5a>
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	681b      	ldr	r3, [r3, #0]
 801974c:	e000      	b.n	8019750 <validate+0x5c>
 801974e:	2300      	movs	r3, #0
 8019750:	683a      	ldr	r2, [r7, #0]
 8019752:	6013      	str	r3, [r2, #0]
	return res;
 8019754:	7bfb      	ldrb	r3, [r7, #15]
}
 8019756:	4618      	mov	r0, r3
 8019758:	3710      	adds	r7, #16
 801975a:	46bd      	mov	sp, r7
 801975c:	bd80      	pop	{r7, pc}
	...

08019760 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8019760:	b580      	push	{r7, lr}
 8019762:	b088      	sub	sp, #32
 8019764:	af00      	add	r7, sp, #0
 8019766:	60f8      	str	r0, [r7, #12]
 8019768:	60b9      	str	r1, [r7, #8]
 801976a:	4613      	mov	r3, r2
 801976c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801976e:	68bb      	ldr	r3, [r7, #8]
 8019770:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8019772:	f107 0310 	add.w	r3, r7, #16
 8019776:	4618      	mov	r0, r3
 8019778:	f7ff fc9c 	bl	80190b4 <get_ldnumber>
 801977c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801977e:	69fb      	ldr	r3, [r7, #28]
 8019780:	2b00      	cmp	r3, #0
 8019782:	da01      	bge.n	8019788 <f_mount+0x28>
 8019784:	230b      	movs	r3, #11
 8019786:	e02b      	b.n	80197e0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8019788:	4a17      	ldr	r2, [pc, #92]	; (80197e8 <f_mount+0x88>)
 801978a:	69fb      	ldr	r3, [r7, #28]
 801978c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019790:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8019792:	69bb      	ldr	r3, [r7, #24]
 8019794:	2b00      	cmp	r3, #0
 8019796:	d005      	beq.n	80197a4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8019798:	69b8      	ldr	r0, [r7, #24]
 801979a:	f7fe f8ef 	bl	801797c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801979e:	69bb      	ldr	r3, [r7, #24]
 80197a0:	2200      	movs	r2, #0
 80197a2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80197a4:	68fb      	ldr	r3, [r7, #12]
 80197a6:	2b00      	cmp	r3, #0
 80197a8:	d002      	beq.n	80197b0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80197aa:	68fb      	ldr	r3, [r7, #12]
 80197ac:	2200      	movs	r2, #0
 80197ae:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80197b0:	68fa      	ldr	r2, [r7, #12]
 80197b2:	490d      	ldr	r1, [pc, #52]	; (80197e8 <f_mount+0x88>)
 80197b4:	69fb      	ldr	r3, [r7, #28]
 80197b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80197ba:	68fb      	ldr	r3, [r7, #12]
 80197bc:	2b00      	cmp	r3, #0
 80197be:	d002      	beq.n	80197c6 <f_mount+0x66>
 80197c0:	79fb      	ldrb	r3, [r7, #7]
 80197c2:	2b01      	cmp	r3, #1
 80197c4:	d001      	beq.n	80197ca <f_mount+0x6a>
 80197c6:	2300      	movs	r3, #0
 80197c8:	e00a      	b.n	80197e0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80197ca:	f107 010c 	add.w	r1, r7, #12
 80197ce:	f107 0308 	add.w	r3, r7, #8
 80197d2:	2200      	movs	r2, #0
 80197d4:	4618      	mov	r0, r3
 80197d6:	f7ff fd07 	bl	80191e8 <find_volume>
 80197da:	4603      	mov	r3, r0
 80197dc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80197de:	7dfb      	ldrb	r3, [r7, #23]
}
 80197e0:	4618      	mov	r0, r3
 80197e2:	3720      	adds	r7, #32
 80197e4:	46bd      	mov	sp, r7
 80197e6:	bd80      	pop	{r7, pc}
 80197e8:	24003cfc 	.word	0x24003cfc

080197ec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80197ec:	b580      	push	{r7, lr}
 80197ee:	b09a      	sub	sp, #104	; 0x68
 80197f0:	af00      	add	r7, sp, #0
 80197f2:	60f8      	str	r0, [r7, #12]
 80197f4:	60b9      	str	r1, [r7, #8]
 80197f6:	4613      	mov	r3, r2
 80197f8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80197fa:	68fb      	ldr	r3, [r7, #12]
 80197fc:	2b00      	cmp	r3, #0
 80197fe:	d101      	bne.n	8019804 <f_open+0x18>
 8019800:	2309      	movs	r3, #9
 8019802:	e1bb      	b.n	8019b7c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8019804:	79fb      	ldrb	r3, [r7, #7]
 8019806:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801980a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801980c:	79fa      	ldrb	r2, [r7, #7]
 801980e:	f107 0114 	add.w	r1, r7, #20
 8019812:	f107 0308 	add.w	r3, r7, #8
 8019816:	4618      	mov	r0, r3
 8019818:	f7ff fce6 	bl	80191e8 <find_volume>
 801981c:	4603      	mov	r3, r0
 801981e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8019822:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019826:	2b00      	cmp	r3, #0
 8019828:	f040 819f 	bne.w	8019b6a <f_open+0x37e>
		dj.obj.fs = fs;
 801982c:	697b      	ldr	r3, [r7, #20]
 801982e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8019830:	68ba      	ldr	r2, [r7, #8]
 8019832:	f107 0318 	add.w	r3, r7, #24
 8019836:	4611      	mov	r1, r2
 8019838:	4618      	mov	r0, r3
 801983a:	f7ff fbc5 	bl	8018fc8 <follow_path>
 801983e:	4603      	mov	r3, r0
 8019840:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8019844:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019848:	2b00      	cmp	r3, #0
 801984a:	d11a      	bne.n	8019882 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801984c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019850:	b25b      	sxtb	r3, r3
 8019852:	2b00      	cmp	r3, #0
 8019854:	da03      	bge.n	801985e <f_open+0x72>
				res = FR_INVALID_NAME;
 8019856:	2306      	movs	r3, #6
 8019858:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801985c:	e011      	b.n	8019882 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801985e:	79fb      	ldrb	r3, [r7, #7]
 8019860:	f023 0301 	bic.w	r3, r3, #1
 8019864:	2b00      	cmp	r3, #0
 8019866:	bf14      	ite	ne
 8019868:	2301      	movne	r3, #1
 801986a:	2300      	moveq	r3, #0
 801986c:	b2db      	uxtb	r3, r3
 801986e:	461a      	mov	r2, r3
 8019870:	f107 0318 	add.w	r3, r7, #24
 8019874:	4611      	mov	r1, r2
 8019876:	4618      	mov	r0, r3
 8019878:	f7fd ff38 	bl	80176ec <chk_lock>
 801987c:	4603      	mov	r3, r0
 801987e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8019882:	79fb      	ldrb	r3, [r7, #7]
 8019884:	f003 031c 	and.w	r3, r3, #28
 8019888:	2b00      	cmp	r3, #0
 801988a:	d07f      	beq.n	801998c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 801988c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019890:	2b00      	cmp	r3, #0
 8019892:	d017      	beq.n	80198c4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8019894:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019898:	2b04      	cmp	r3, #4
 801989a:	d10e      	bne.n	80198ba <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801989c:	f7fd ff82 	bl	80177a4 <enq_lock>
 80198a0:	4603      	mov	r3, r0
 80198a2:	2b00      	cmp	r3, #0
 80198a4:	d006      	beq.n	80198b4 <f_open+0xc8>
 80198a6:	f107 0318 	add.w	r3, r7, #24
 80198aa:	4618      	mov	r0, r3
 80198ac:	f7ff f8dc 	bl	8018a68 <dir_register>
 80198b0:	4603      	mov	r3, r0
 80198b2:	e000      	b.n	80198b6 <f_open+0xca>
 80198b4:	2312      	movs	r3, #18
 80198b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80198ba:	79fb      	ldrb	r3, [r7, #7]
 80198bc:	f043 0308 	orr.w	r3, r3, #8
 80198c0:	71fb      	strb	r3, [r7, #7]
 80198c2:	e010      	b.n	80198e6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80198c4:	7fbb      	ldrb	r3, [r7, #30]
 80198c6:	f003 0311 	and.w	r3, r3, #17
 80198ca:	2b00      	cmp	r3, #0
 80198cc:	d003      	beq.n	80198d6 <f_open+0xea>
					res = FR_DENIED;
 80198ce:	2307      	movs	r3, #7
 80198d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80198d4:	e007      	b.n	80198e6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80198d6:	79fb      	ldrb	r3, [r7, #7]
 80198d8:	f003 0304 	and.w	r3, r3, #4
 80198dc:	2b00      	cmp	r3, #0
 80198de:	d002      	beq.n	80198e6 <f_open+0xfa>
 80198e0:	2308      	movs	r3, #8
 80198e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80198e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80198ea:	2b00      	cmp	r3, #0
 80198ec:	d168      	bne.n	80199c0 <f_open+0x1d4>
 80198ee:	79fb      	ldrb	r3, [r7, #7]
 80198f0:	f003 0308 	and.w	r3, r3, #8
 80198f4:	2b00      	cmp	r3, #0
 80198f6:	d063      	beq.n	80199c0 <f_open+0x1d4>
				dw = GET_FATTIME();
 80198f8:	f7fb fb70 	bl	8014fdc <get_fattime>
 80198fc:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80198fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019900:	330e      	adds	r3, #14
 8019902:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8019904:	4618      	mov	r0, r3
 8019906:	f7fd fe47 	bl	8017598 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801990a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801990c:	3316      	adds	r3, #22
 801990e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8019910:	4618      	mov	r0, r3
 8019912:	f7fd fe41 	bl	8017598 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8019916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019918:	330b      	adds	r3, #11
 801991a:	2220      	movs	r2, #32
 801991c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801991e:	697b      	ldr	r3, [r7, #20]
 8019920:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019922:	4611      	mov	r1, r2
 8019924:	4618      	mov	r0, r3
 8019926:	f7fe fe17 	bl	8018558 <ld_clust>
 801992a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801992c:	697b      	ldr	r3, [r7, #20]
 801992e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019930:	2200      	movs	r2, #0
 8019932:	4618      	mov	r0, r3
 8019934:	f7fe fe2f 	bl	8018596 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8019938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801993a:	331c      	adds	r3, #28
 801993c:	2100      	movs	r1, #0
 801993e:	4618      	mov	r0, r3
 8019940:	f7fd fe2a 	bl	8017598 <st_dword>
					fs->wflag = 1;
 8019944:	697b      	ldr	r3, [r7, #20]
 8019946:	2201      	movs	r2, #1
 8019948:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801994a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801994c:	2b00      	cmp	r3, #0
 801994e:	d037      	beq.n	80199c0 <f_open+0x1d4>
						dw = fs->winsect;
 8019950:	697b      	ldr	r3, [r7, #20]
 8019952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019954:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8019956:	f107 0318 	add.w	r3, r7, #24
 801995a:	2200      	movs	r2, #0
 801995c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801995e:	4618      	mov	r0, r3
 8019960:	f7fe fb1f 	bl	8017fa2 <remove_chain>
 8019964:	4603      	mov	r3, r0
 8019966:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 801996a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801996e:	2b00      	cmp	r3, #0
 8019970:	d126      	bne.n	80199c0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8019972:	697b      	ldr	r3, [r7, #20]
 8019974:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8019976:	4618      	mov	r0, r3
 8019978:	f7fe f868 	bl	8017a4c <move_window>
 801997c:	4603      	mov	r3, r0
 801997e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8019982:	697b      	ldr	r3, [r7, #20]
 8019984:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019986:	3a01      	subs	r2, #1
 8019988:	615a      	str	r2, [r3, #20]
 801998a:	e019      	b.n	80199c0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801998c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019990:	2b00      	cmp	r3, #0
 8019992:	d115      	bne.n	80199c0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8019994:	7fbb      	ldrb	r3, [r7, #30]
 8019996:	f003 0310 	and.w	r3, r3, #16
 801999a:	2b00      	cmp	r3, #0
 801999c:	d003      	beq.n	80199a6 <f_open+0x1ba>
					res = FR_NO_FILE;
 801999e:	2304      	movs	r3, #4
 80199a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80199a4:	e00c      	b.n	80199c0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80199a6:	79fb      	ldrb	r3, [r7, #7]
 80199a8:	f003 0302 	and.w	r3, r3, #2
 80199ac:	2b00      	cmp	r3, #0
 80199ae:	d007      	beq.n	80199c0 <f_open+0x1d4>
 80199b0:	7fbb      	ldrb	r3, [r7, #30]
 80199b2:	f003 0301 	and.w	r3, r3, #1
 80199b6:	2b00      	cmp	r3, #0
 80199b8:	d002      	beq.n	80199c0 <f_open+0x1d4>
						res = FR_DENIED;
 80199ba:	2307      	movs	r3, #7
 80199bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80199c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80199c4:	2b00      	cmp	r3, #0
 80199c6:	d128      	bne.n	8019a1a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80199c8:	79fb      	ldrb	r3, [r7, #7]
 80199ca:	f003 0308 	and.w	r3, r3, #8
 80199ce:	2b00      	cmp	r3, #0
 80199d0:	d003      	beq.n	80199da <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80199d2:	79fb      	ldrb	r3, [r7, #7]
 80199d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80199d8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80199da:	697b      	ldr	r3, [r7, #20]
 80199dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80199de:	68fb      	ldr	r3, [r7, #12]
 80199e0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80199e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80199e4:	68fb      	ldr	r3, [r7, #12]
 80199e6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80199e8:	79fb      	ldrb	r3, [r7, #7]
 80199ea:	f023 0301 	bic.w	r3, r3, #1
 80199ee:	2b00      	cmp	r3, #0
 80199f0:	bf14      	ite	ne
 80199f2:	2301      	movne	r3, #1
 80199f4:	2300      	moveq	r3, #0
 80199f6:	b2db      	uxtb	r3, r3
 80199f8:	461a      	mov	r2, r3
 80199fa:	f107 0318 	add.w	r3, r7, #24
 80199fe:	4611      	mov	r1, r2
 8019a00:	4618      	mov	r0, r3
 8019a02:	f7fd fef1 	bl	80177e8 <inc_lock>
 8019a06:	4602      	mov	r2, r0
 8019a08:	68fb      	ldr	r3, [r7, #12]
 8019a0a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8019a0c:	68fb      	ldr	r3, [r7, #12]
 8019a0e:	691b      	ldr	r3, [r3, #16]
 8019a10:	2b00      	cmp	r3, #0
 8019a12:	d102      	bne.n	8019a1a <f_open+0x22e>
 8019a14:	2302      	movs	r3, #2
 8019a16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8019a1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019a1e:	2b00      	cmp	r3, #0
 8019a20:	f040 80a3 	bne.w	8019b6a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8019a24:	697b      	ldr	r3, [r7, #20]
 8019a26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019a28:	4611      	mov	r1, r2
 8019a2a:	4618      	mov	r0, r3
 8019a2c:	f7fe fd94 	bl	8018558 <ld_clust>
 8019a30:	4602      	mov	r2, r0
 8019a32:	68fb      	ldr	r3, [r7, #12]
 8019a34:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8019a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a38:	331c      	adds	r3, #28
 8019a3a:	4618      	mov	r0, r3
 8019a3c:	f7fd fd6e 	bl	801751c <ld_dword>
 8019a40:	4602      	mov	r2, r0
 8019a42:	68fb      	ldr	r3, [r7, #12]
 8019a44:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8019a46:	68fb      	ldr	r3, [r7, #12]
 8019a48:	2200      	movs	r2, #0
 8019a4a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8019a4c:	697a      	ldr	r2, [r7, #20]
 8019a4e:	68fb      	ldr	r3, [r7, #12]
 8019a50:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8019a52:	697b      	ldr	r3, [r7, #20]
 8019a54:	88da      	ldrh	r2, [r3, #6]
 8019a56:	68fb      	ldr	r3, [r7, #12]
 8019a58:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8019a5a:	68fb      	ldr	r3, [r7, #12]
 8019a5c:	79fa      	ldrb	r2, [r7, #7]
 8019a5e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8019a60:	68fb      	ldr	r3, [r7, #12]
 8019a62:	2200      	movs	r2, #0
 8019a64:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8019a66:	68fb      	ldr	r3, [r7, #12]
 8019a68:	2200      	movs	r2, #0
 8019a6a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8019a6c:	68fb      	ldr	r3, [r7, #12]
 8019a6e:	2200      	movs	r2, #0
 8019a70:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8019a72:	68fb      	ldr	r3, [r7, #12]
 8019a74:	3330      	adds	r3, #48	; 0x30
 8019a76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8019a7a:	2100      	movs	r1, #0
 8019a7c:	4618      	mov	r0, r3
 8019a7e:	f7fd fdd8 	bl	8017632 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8019a82:	79fb      	ldrb	r3, [r7, #7]
 8019a84:	f003 0320 	and.w	r3, r3, #32
 8019a88:	2b00      	cmp	r3, #0
 8019a8a:	d06e      	beq.n	8019b6a <f_open+0x37e>
 8019a8c:	68fb      	ldr	r3, [r7, #12]
 8019a8e:	68db      	ldr	r3, [r3, #12]
 8019a90:	2b00      	cmp	r3, #0
 8019a92:	d06a      	beq.n	8019b6a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8019a94:	68fb      	ldr	r3, [r7, #12]
 8019a96:	68da      	ldr	r2, [r3, #12]
 8019a98:	68fb      	ldr	r3, [r7, #12]
 8019a9a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8019a9c:	697b      	ldr	r3, [r7, #20]
 8019a9e:	895b      	ldrh	r3, [r3, #10]
 8019aa0:	461a      	mov	r2, r3
 8019aa2:	697b      	ldr	r3, [r7, #20]
 8019aa4:	899b      	ldrh	r3, [r3, #12]
 8019aa6:	fb02 f303 	mul.w	r3, r2, r3
 8019aaa:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8019aac:	68fb      	ldr	r3, [r7, #12]
 8019aae:	689b      	ldr	r3, [r3, #8]
 8019ab0:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8019ab2:	68fb      	ldr	r3, [r7, #12]
 8019ab4:	68db      	ldr	r3, [r3, #12]
 8019ab6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8019ab8:	e016      	b.n	8019ae8 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8019aba:	68fb      	ldr	r3, [r7, #12]
 8019abc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8019abe:	4618      	mov	r0, r3
 8019ac0:	f7fe f881 	bl	8017bc6 <get_fat>
 8019ac4:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8019ac6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019ac8:	2b01      	cmp	r3, #1
 8019aca:	d802      	bhi.n	8019ad2 <f_open+0x2e6>
 8019acc:	2302      	movs	r3, #2
 8019ace:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8019ad2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019ad8:	d102      	bne.n	8019ae0 <f_open+0x2f4>
 8019ada:	2301      	movs	r3, #1
 8019adc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8019ae0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8019ae2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019ae4:	1ad3      	subs	r3, r2, r3
 8019ae6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8019ae8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019aec:	2b00      	cmp	r3, #0
 8019aee:	d103      	bne.n	8019af8 <f_open+0x30c>
 8019af0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8019af2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019af4:	429a      	cmp	r2, r3
 8019af6:	d8e0      	bhi.n	8019aba <f_open+0x2ce>
				}
				fp->clust = clst;
 8019af8:	68fb      	ldr	r3, [r7, #12]
 8019afa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8019afc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8019afe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019b02:	2b00      	cmp	r3, #0
 8019b04:	d131      	bne.n	8019b6a <f_open+0x37e>
 8019b06:	697b      	ldr	r3, [r7, #20]
 8019b08:	899b      	ldrh	r3, [r3, #12]
 8019b0a:	461a      	mov	r2, r3
 8019b0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019b0e:	fbb3 f1f2 	udiv	r1, r3, r2
 8019b12:	fb01 f202 	mul.w	r2, r1, r2
 8019b16:	1a9b      	subs	r3, r3, r2
 8019b18:	2b00      	cmp	r3, #0
 8019b1a:	d026      	beq.n	8019b6a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8019b1c:	697b      	ldr	r3, [r7, #20]
 8019b1e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8019b20:	4618      	mov	r0, r3
 8019b22:	f7fe f831 	bl	8017b88 <clust2sect>
 8019b26:	64f8      	str	r0, [r7, #76]	; 0x4c
 8019b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019b2a:	2b00      	cmp	r3, #0
 8019b2c:	d103      	bne.n	8019b36 <f_open+0x34a>
						res = FR_INT_ERR;
 8019b2e:	2302      	movs	r3, #2
 8019b30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8019b34:	e019      	b.n	8019b6a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8019b36:	697b      	ldr	r3, [r7, #20]
 8019b38:	899b      	ldrh	r3, [r3, #12]
 8019b3a:	461a      	mov	r2, r3
 8019b3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019b3e:	fbb3 f2f2 	udiv	r2, r3, r2
 8019b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019b44:	441a      	add	r2, r3
 8019b46:	68fb      	ldr	r3, [r7, #12]
 8019b48:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8019b4a:	697b      	ldr	r3, [r7, #20]
 8019b4c:	7858      	ldrb	r0, [r3, #1]
 8019b4e:	68fb      	ldr	r3, [r7, #12]
 8019b50:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019b54:	68fb      	ldr	r3, [r7, #12]
 8019b56:	6a1a      	ldr	r2, [r3, #32]
 8019b58:	2301      	movs	r3, #1
 8019b5a:	f7fd fc69 	bl	8017430 <disk_read>
 8019b5e:	4603      	mov	r3, r0
 8019b60:	2b00      	cmp	r3, #0
 8019b62:	d002      	beq.n	8019b6a <f_open+0x37e>
 8019b64:	2301      	movs	r3, #1
 8019b66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8019b6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019b6e:	2b00      	cmp	r3, #0
 8019b70:	d002      	beq.n	8019b78 <f_open+0x38c>
 8019b72:	68fb      	ldr	r3, [r7, #12]
 8019b74:	2200      	movs	r2, #0
 8019b76:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8019b78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8019b7c:	4618      	mov	r0, r3
 8019b7e:	3768      	adds	r7, #104	; 0x68
 8019b80:	46bd      	mov	sp, r7
 8019b82:	bd80      	pop	{r7, pc}

08019b84 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8019b84:	b580      	push	{r7, lr}
 8019b86:	b08c      	sub	sp, #48	; 0x30
 8019b88:	af00      	add	r7, sp, #0
 8019b8a:	60f8      	str	r0, [r7, #12]
 8019b8c:	60b9      	str	r1, [r7, #8]
 8019b8e:	607a      	str	r2, [r7, #4]
 8019b90:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8019b92:	68bb      	ldr	r3, [r7, #8]
 8019b94:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8019b96:	683b      	ldr	r3, [r7, #0]
 8019b98:	2200      	movs	r2, #0
 8019b9a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8019b9c:	68fb      	ldr	r3, [r7, #12]
 8019b9e:	f107 0210 	add.w	r2, r7, #16
 8019ba2:	4611      	mov	r1, r2
 8019ba4:	4618      	mov	r0, r3
 8019ba6:	f7ff fda5 	bl	80196f4 <validate>
 8019baa:	4603      	mov	r3, r0
 8019bac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8019bb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019bb4:	2b00      	cmp	r3, #0
 8019bb6:	d107      	bne.n	8019bc8 <f_write+0x44>
 8019bb8:	68fb      	ldr	r3, [r7, #12]
 8019bba:	7d5b      	ldrb	r3, [r3, #21]
 8019bbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8019bc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019bc4:	2b00      	cmp	r3, #0
 8019bc6:	d002      	beq.n	8019bce <f_write+0x4a>
 8019bc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019bcc:	e16a      	b.n	8019ea4 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8019bce:	68fb      	ldr	r3, [r7, #12]
 8019bd0:	7d1b      	ldrb	r3, [r3, #20]
 8019bd2:	f003 0302 	and.w	r3, r3, #2
 8019bd6:	2b00      	cmp	r3, #0
 8019bd8:	d101      	bne.n	8019bde <f_write+0x5a>
 8019bda:	2307      	movs	r3, #7
 8019bdc:	e162      	b.n	8019ea4 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8019bde:	68fb      	ldr	r3, [r7, #12]
 8019be0:	699a      	ldr	r2, [r3, #24]
 8019be2:	687b      	ldr	r3, [r7, #4]
 8019be4:	441a      	add	r2, r3
 8019be6:	68fb      	ldr	r3, [r7, #12]
 8019be8:	699b      	ldr	r3, [r3, #24]
 8019bea:	429a      	cmp	r2, r3
 8019bec:	f080 814c 	bcs.w	8019e88 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8019bf0:	68fb      	ldr	r3, [r7, #12]
 8019bf2:	699b      	ldr	r3, [r3, #24]
 8019bf4:	43db      	mvns	r3, r3
 8019bf6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8019bf8:	e146      	b.n	8019e88 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8019bfa:	68fb      	ldr	r3, [r7, #12]
 8019bfc:	699b      	ldr	r3, [r3, #24]
 8019bfe:	693a      	ldr	r2, [r7, #16]
 8019c00:	8992      	ldrh	r2, [r2, #12]
 8019c02:	fbb3 f1f2 	udiv	r1, r3, r2
 8019c06:	fb01 f202 	mul.w	r2, r1, r2
 8019c0a:	1a9b      	subs	r3, r3, r2
 8019c0c:	2b00      	cmp	r3, #0
 8019c0e:	f040 80f1 	bne.w	8019df4 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8019c12:	68fb      	ldr	r3, [r7, #12]
 8019c14:	699b      	ldr	r3, [r3, #24]
 8019c16:	693a      	ldr	r2, [r7, #16]
 8019c18:	8992      	ldrh	r2, [r2, #12]
 8019c1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8019c1e:	693a      	ldr	r2, [r7, #16]
 8019c20:	8952      	ldrh	r2, [r2, #10]
 8019c22:	3a01      	subs	r2, #1
 8019c24:	4013      	ands	r3, r2
 8019c26:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8019c28:	69bb      	ldr	r3, [r7, #24]
 8019c2a:	2b00      	cmp	r3, #0
 8019c2c:	d143      	bne.n	8019cb6 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8019c2e:	68fb      	ldr	r3, [r7, #12]
 8019c30:	699b      	ldr	r3, [r3, #24]
 8019c32:	2b00      	cmp	r3, #0
 8019c34:	d10c      	bne.n	8019c50 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8019c36:	68fb      	ldr	r3, [r7, #12]
 8019c38:	689b      	ldr	r3, [r3, #8]
 8019c3a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8019c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c3e:	2b00      	cmp	r3, #0
 8019c40:	d11a      	bne.n	8019c78 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8019c42:	68fb      	ldr	r3, [r7, #12]
 8019c44:	2100      	movs	r1, #0
 8019c46:	4618      	mov	r0, r3
 8019c48:	f7fe fa10 	bl	801806c <create_chain>
 8019c4c:	62b8      	str	r0, [r7, #40]	; 0x28
 8019c4e:	e013      	b.n	8019c78 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8019c50:	68fb      	ldr	r3, [r7, #12]
 8019c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019c54:	2b00      	cmp	r3, #0
 8019c56:	d007      	beq.n	8019c68 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8019c58:	68fb      	ldr	r3, [r7, #12]
 8019c5a:	699b      	ldr	r3, [r3, #24]
 8019c5c:	4619      	mov	r1, r3
 8019c5e:	68f8      	ldr	r0, [r7, #12]
 8019c60:	f7fe fa9c 	bl	801819c <clmt_clust>
 8019c64:	62b8      	str	r0, [r7, #40]	; 0x28
 8019c66:	e007      	b.n	8019c78 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8019c68:	68fa      	ldr	r2, [r7, #12]
 8019c6a:	68fb      	ldr	r3, [r7, #12]
 8019c6c:	69db      	ldr	r3, [r3, #28]
 8019c6e:	4619      	mov	r1, r3
 8019c70:	4610      	mov	r0, r2
 8019c72:	f7fe f9fb 	bl	801806c <create_chain>
 8019c76:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8019c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c7a:	2b00      	cmp	r3, #0
 8019c7c:	f000 8109 	beq.w	8019e92 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8019c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c82:	2b01      	cmp	r3, #1
 8019c84:	d104      	bne.n	8019c90 <f_write+0x10c>
 8019c86:	68fb      	ldr	r3, [r7, #12]
 8019c88:	2202      	movs	r2, #2
 8019c8a:	755a      	strb	r2, [r3, #21]
 8019c8c:	2302      	movs	r3, #2
 8019c8e:	e109      	b.n	8019ea4 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8019c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019c96:	d104      	bne.n	8019ca2 <f_write+0x11e>
 8019c98:	68fb      	ldr	r3, [r7, #12]
 8019c9a:	2201      	movs	r2, #1
 8019c9c:	755a      	strb	r2, [r3, #21]
 8019c9e:	2301      	movs	r3, #1
 8019ca0:	e100      	b.n	8019ea4 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8019ca2:	68fb      	ldr	r3, [r7, #12]
 8019ca4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019ca6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8019ca8:	68fb      	ldr	r3, [r7, #12]
 8019caa:	689b      	ldr	r3, [r3, #8]
 8019cac:	2b00      	cmp	r3, #0
 8019cae:	d102      	bne.n	8019cb6 <f_write+0x132>
 8019cb0:	68fb      	ldr	r3, [r7, #12]
 8019cb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019cb4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8019cb6:	68fb      	ldr	r3, [r7, #12]
 8019cb8:	7d1b      	ldrb	r3, [r3, #20]
 8019cba:	b25b      	sxtb	r3, r3
 8019cbc:	2b00      	cmp	r3, #0
 8019cbe:	da18      	bge.n	8019cf2 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8019cc0:	693b      	ldr	r3, [r7, #16]
 8019cc2:	7858      	ldrb	r0, [r3, #1]
 8019cc4:	68fb      	ldr	r3, [r7, #12]
 8019cc6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019cca:	68fb      	ldr	r3, [r7, #12]
 8019ccc:	6a1a      	ldr	r2, [r3, #32]
 8019cce:	2301      	movs	r3, #1
 8019cd0:	f7fd fbce 	bl	8017470 <disk_write>
 8019cd4:	4603      	mov	r3, r0
 8019cd6:	2b00      	cmp	r3, #0
 8019cd8:	d004      	beq.n	8019ce4 <f_write+0x160>
 8019cda:	68fb      	ldr	r3, [r7, #12]
 8019cdc:	2201      	movs	r2, #1
 8019cde:	755a      	strb	r2, [r3, #21]
 8019ce0:	2301      	movs	r3, #1
 8019ce2:	e0df      	b.n	8019ea4 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8019ce4:	68fb      	ldr	r3, [r7, #12]
 8019ce6:	7d1b      	ldrb	r3, [r3, #20]
 8019ce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019cec:	b2da      	uxtb	r2, r3
 8019cee:	68fb      	ldr	r3, [r7, #12]
 8019cf0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8019cf2:	693a      	ldr	r2, [r7, #16]
 8019cf4:	68fb      	ldr	r3, [r7, #12]
 8019cf6:	69db      	ldr	r3, [r3, #28]
 8019cf8:	4619      	mov	r1, r3
 8019cfa:	4610      	mov	r0, r2
 8019cfc:	f7fd ff44 	bl	8017b88 <clust2sect>
 8019d00:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8019d02:	697b      	ldr	r3, [r7, #20]
 8019d04:	2b00      	cmp	r3, #0
 8019d06:	d104      	bne.n	8019d12 <f_write+0x18e>
 8019d08:	68fb      	ldr	r3, [r7, #12]
 8019d0a:	2202      	movs	r2, #2
 8019d0c:	755a      	strb	r2, [r3, #21]
 8019d0e:	2302      	movs	r3, #2
 8019d10:	e0c8      	b.n	8019ea4 <f_write+0x320>
			sect += csect;
 8019d12:	697a      	ldr	r2, [r7, #20]
 8019d14:	69bb      	ldr	r3, [r7, #24]
 8019d16:	4413      	add	r3, r2
 8019d18:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8019d1a:	693b      	ldr	r3, [r7, #16]
 8019d1c:	899b      	ldrh	r3, [r3, #12]
 8019d1e:	461a      	mov	r2, r3
 8019d20:	687b      	ldr	r3, [r7, #4]
 8019d22:	fbb3 f3f2 	udiv	r3, r3, r2
 8019d26:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8019d28:	6a3b      	ldr	r3, [r7, #32]
 8019d2a:	2b00      	cmp	r3, #0
 8019d2c:	d043      	beq.n	8019db6 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8019d2e:	69ba      	ldr	r2, [r7, #24]
 8019d30:	6a3b      	ldr	r3, [r7, #32]
 8019d32:	4413      	add	r3, r2
 8019d34:	693a      	ldr	r2, [r7, #16]
 8019d36:	8952      	ldrh	r2, [r2, #10]
 8019d38:	4293      	cmp	r3, r2
 8019d3a:	d905      	bls.n	8019d48 <f_write+0x1c4>
					cc = fs->csize - csect;
 8019d3c:	693b      	ldr	r3, [r7, #16]
 8019d3e:	895b      	ldrh	r3, [r3, #10]
 8019d40:	461a      	mov	r2, r3
 8019d42:	69bb      	ldr	r3, [r7, #24]
 8019d44:	1ad3      	subs	r3, r2, r3
 8019d46:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8019d48:	693b      	ldr	r3, [r7, #16]
 8019d4a:	7858      	ldrb	r0, [r3, #1]
 8019d4c:	6a3b      	ldr	r3, [r7, #32]
 8019d4e:	697a      	ldr	r2, [r7, #20]
 8019d50:	69f9      	ldr	r1, [r7, #28]
 8019d52:	f7fd fb8d 	bl	8017470 <disk_write>
 8019d56:	4603      	mov	r3, r0
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	d004      	beq.n	8019d66 <f_write+0x1e2>
 8019d5c:	68fb      	ldr	r3, [r7, #12]
 8019d5e:	2201      	movs	r2, #1
 8019d60:	755a      	strb	r2, [r3, #21]
 8019d62:	2301      	movs	r3, #1
 8019d64:	e09e      	b.n	8019ea4 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8019d66:	68fb      	ldr	r3, [r7, #12]
 8019d68:	6a1a      	ldr	r2, [r3, #32]
 8019d6a:	697b      	ldr	r3, [r7, #20]
 8019d6c:	1ad3      	subs	r3, r2, r3
 8019d6e:	6a3a      	ldr	r2, [r7, #32]
 8019d70:	429a      	cmp	r2, r3
 8019d72:	d918      	bls.n	8019da6 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8019d74:	68fb      	ldr	r3, [r7, #12]
 8019d76:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8019d7a:	68fb      	ldr	r3, [r7, #12]
 8019d7c:	6a1a      	ldr	r2, [r3, #32]
 8019d7e:	697b      	ldr	r3, [r7, #20]
 8019d80:	1ad3      	subs	r3, r2, r3
 8019d82:	693a      	ldr	r2, [r7, #16]
 8019d84:	8992      	ldrh	r2, [r2, #12]
 8019d86:	fb02 f303 	mul.w	r3, r2, r3
 8019d8a:	69fa      	ldr	r2, [r7, #28]
 8019d8c:	18d1      	adds	r1, r2, r3
 8019d8e:	693b      	ldr	r3, [r7, #16]
 8019d90:	899b      	ldrh	r3, [r3, #12]
 8019d92:	461a      	mov	r2, r3
 8019d94:	f7fd fc2c 	bl	80175f0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8019d98:	68fb      	ldr	r3, [r7, #12]
 8019d9a:	7d1b      	ldrb	r3, [r3, #20]
 8019d9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019da0:	b2da      	uxtb	r2, r3
 8019da2:	68fb      	ldr	r3, [r7, #12]
 8019da4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8019da6:	693b      	ldr	r3, [r7, #16]
 8019da8:	899b      	ldrh	r3, [r3, #12]
 8019daa:	461a      	mov	r2, r3
 8019dac:	6a3b      	ldr	r3, [r7, #32]
 8019dae:	fb02 f303 	mul.w	r3, r2, r3
 8019db2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8019db4:	e04b      	b.n	8019e4e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8019db6:	68fb      	ldr	r3, [r7, #12]
 8019db8:	6a1b      	ldr	r3, [r3, #32]
 8019dba:	697a      	ldr	r2, [r7, #20]
 8019dbc:	429a      	cmp	r2, r3
 8019dbe:	d016      	beq.n	8019dee <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8019dc0:	68fb      	ldr	r3, [r7, #12]
 8019dc2:	699a      	ldr	r2, [r3, #24]
 8019dc4:	68fb      	ldr	r3, [r7, #12]
 8019dc6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8019dc8:	429a      	cmp	r2, r3
 8019dca:	d210      	bcs.n	8019dee <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8019dcc:	693b      	ldr	r3, [r7, #16]
 8019dce:	7858      	ldrb	r0, [r3, #1]
 8019dd0:	68fb      	ldr	r3, [r7, #12]
 8019dd2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019dd6:	2301      	movs	r3, #1
 8019dd8:	697a      	ldr	r2, [r7, #20]
 8019dda:	f7fd fb29 	bl	8017430 <disk_read>
 8019dde:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8019de0:	2b00      	cmp	r3, #0
 8019de2:	d004      	beq.n	8019dee <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8019de4:	68fb      	ldr	r3, [r7, #12]
 8019de6:	2201      	movs	r2, #1
 8019de8:	755a      	strb	r2, [r3, #21]
 8019dea:	2301      	movs	r3, #1
 8019dec:	e05a      	b.n	8019ea4 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8019dee:	68fb      	ldr	r3, [r7, #12]
 8019df0:	697a      	ldr	r2, [r7, #20]
 8019df2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8019df4:	693b      	ldr	r3, [r7, #16]
 8019df6:	899b      	ldrh	r3, [r3, #12]
 8019df8:	4618      	mov	r0, r3
 8019dfa:	68fb      	ldr	r3, [r7, #12]
 8019dfc:	699b      	ldr	r3, [r3, #24]
 8019dfe:	693a      	ldr	r2, [r7, #16]
 8019e00:	8992      	ldrh	r2, [r2, #12]
 8019e02:	fbb3 f1f2 	udiv	r1, r3, r2
 8019e06:	fb01 f202 	mul.w	r2, r1, r2
 8019e0a:	1a9b      	subs	r3, r3, r2
 8019e0c:	1ac3      	subs	r3, r0, r3
 8019e0e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8019e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019e12:	687b      	ldr	r3, [r7, #4]
 8019e14:	429a      	cmp	r2, r3
 8019e16:	d901      	bls.n	8019e1c <f_write+0x298>
 8019e18:	687b      	ldr	r3, [r7, #4]
 8019e1a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8019e1c:	68fb      	ldr	r3, [r7, #12]
 8019e1e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019e22:	68fb      	ldr	r3, [r7, #12]
 8019e24:	699b      	ldr	r3, [r3, #24]
 8019e26:	693a      	ldr	r2, [r7, #16]
 8019e28:	8992      	ldrh	r2, [r2, #12]
 8019e2a:	fbb3 f0f2 	udiv	r0, r3, r2
 8019e2e:	fb00 f202 	mul.w	r2, r0, r2
 8019e32:	1a9b      	subs	r3, r3, r2
 8019e34:	440b      	add	r3, r1
 8019e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019e38:	69f9      	ldr	r1, [r7, #28]
 8019e3a:	4618      	mov	r0, r3
 8019e3c:	f7fd fbd8 	bl	80175f0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8019e40:	68fb      	ldr	r3, [r7, #12]
 8019e42:	7d1b      	ldrb	r3, [r3, #20]
 8019e44:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8019e48:	b2da      	uxtb	r2, r3
 8019e4a:	68fb      	ldr	r3, [r7, #12]
 8019e4c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8019e4e:	69fa      	ldr	r2, [r7, #28]
 8019e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e52:	4413      	add	r3, r2
 8019e54:	61fb      	str	r3, [r7, #28]
 8019e56:	68fb      	ldr	r3, [r7, #12]
 8019e58:	699a      	ldr	r2, [r3, #24]
 8019e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e5c:	441a      	add	r2, r3
 8019e5e:	68fb      	ldr	r3, [r7, #12]
 8019e60:	619a      	str	r2, [r3, #24]
 8019e62:	68fb      	ldr	r3, [r7, #12]
 8019e64:	68da      	ldr	r2, [r3, #12]
 8019e66:	68fb      	ldr	r3, [r7, #12]
 8019e68:	699b      	ldr	r3, [r3, #24]
 8019e6a:	429a      	cmp	r2, r3
 8019e6c:	bf38      	it	cc
 8019e6e:	461a      	movcc	r2, r3
 8019e70:	68fb      	ldr	r3, [r7, #12]
 8019e72:	60da      	str	r2, [r3, #12]
 8019e74:	683b      	ldr	r3, [r7, #0]
 8019e76:	681a      	ldr	r2, [r3, #0]
 8019e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e7a:	441a      	add	r2, r3
 8019e7c:	683b      	ldr	r3, [r7, #0]
 8019e7e:	601a      	str	r2, [r3, #0]
 8019e80:	687a      	ldr	r2, [r7, #4]
 8019e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e84:	1ad3      	subs	r3, r2, r3
 8019e86:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8019e88:	687b      	ldr	r3, [r7, #4]
 8019e8a:	2b00      	cmp	r3, #0
 8019e8c:	f47f aeb5 	bne.w	8019bfa <f_write+0x76>
 8019e90:	e000      	b.n	8019e94 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8019e92:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8019e94:	68fb      	ldr	r3, [r7, #12]
 8019e96:	7d1b      	ldrb	r3, [r3, #20]
 8019e98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019e9c:	b2da      	uxtb	r2, r3
 8019e9e:	68fb      	ldr	r3, [r7, #12]
 8019ea0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8019ea2:	2300      	movs	r3, #0
}
 8019ea4:	4618      	mov	r0, r3
 8019ea6:	3730      	adds	r7, #48	; 0x30
 8019ea8:	46bd      	mov	sp, r7
 8019eaa:	bd80      	pop	{r7, pc}

08019eac <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8019eac:	b580      	push	{r7, lr}
 8019eae:	b086      	sub	sp, #24
 8019eb0:	af00      	add	r7, sp, #0
 8019eb2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	f107 0208 	add.w	r2, r7, #8
 8019eba:	4611      	mov	r1, r2
 8019ebc:	4618      	mov	r0, r3
 8019ebe:	f7ff fc19 	bl	80196f4 <validate>
 8019ec2:	4603      	mov	r3, r0
 8019ec4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8019ec6:	7dfb      	ldrb	r3, [r7, #23]
 8019ec8:	2b00      	cmp	r3, #0
 8019eca:	d168      	bne.n	8019f9e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	7d1b      	ldrb	r3, [r3, #20]
 8019ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019ed4:	2b00      	cmp	r3, #0
 8019ed6:	d062      	beq.n	8019f9e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8019ed8:	687b      	ldr	r3, [r7, #4]
 8019eda:	7d1b      	ldrb	r3, [r3, #20]
 8019edc:	b25b      	sxtb	r3, r3
 8019ede:	2b00      	cmp	r3, #0
 8019ee0:	da15      	bge.n	8019f0e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8019ee2:	68bb      	ldr	r3, [r7, #8]
 8019ee4:	7858      	ldrb	r0, [r3, #1]
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019eec:	687b      	ldr	r3, [r7, #4]
 8019eee:	6a1a      	ldr	r2, [r3, #32]
 8019ef0:	2301      	movs	r3, #1
 8019ef2:	f7fd fabd 	bl	8017470 <disk_write>
 8019ef6:	4603      	mov	r3, r0
 8019ef8:	2b00      	cmp	r3, #0
 8019efa:	d001      	beq.n	8019f00 <f_sync+0x54>
 8019efc:	2301      	movs	r3, #1
 8019efe:	e04f      	b.n	8019fa0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8019f00:	687b      	ldr	r3, [r7, #4]
 8019f02:	7d1b      	ldrb	r3, [r3, #20]
 8019f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019f08:	b2da      	uxtb	r2, r3
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8019f0e:	f7fb f865 	bl	8014fdc <get_fattime>
 8019f12:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8019f14:	68ba      	ldr	r2, [r7, #8]
 8019f16:	687b      	ldr	r3, [r7, #4]
 8019f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f1a:	4619      	mov	r1, r3
 8019f1c:	4610      	mov	r0, r2
 8019f1e:	f7fd fd95 	bl	8017a4c <move_window>
 8019f22:	4603      	mov	r3, r0
 8019f24:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8019f26:	7dfb      	ldrb	r3, [r7, #23]
 8019f28:	2b00      	cmp	r3, #0
 8019f2a:	d138      	bne.n	8019f9e <f_sync+0xf2>
					dir = fp->dir_ptr;
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019f30:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8019f32:	68fb      	ldr	r3, [r7, #12]
 8019f34:	330b      	adds	r3, #11
 8019f36:	781a      	ldrb	r2, [r3, #0]
 8019f38:	68fb      	ldr	r3, [r7, #12]
 8019f3a:	330b      	adds	r3, #11
 8019f3c:	f042 0220 	orr.w	r2, r2, #32
 8019f40:	b2d2      	uxtb	r2, r2
 8019f42:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8019f44:	687b      	ldr	r3, [r7, #4]
 8019f46:	6818      	ldr	r0, [r3, #0]
 8019f48:	687b      	ldr	r3, [r7, #4]
 8019f4a:	689b      	ldr	r3, [r3, #8]
 8019f4c:	461a      	mov	r2, r3
 8019f4e:	68f9      	ldr	r1, [r7, #12]
 8019f50:	f7fe fb21 	bl	8018596 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8019f54:	68fb      	ldr	r3, [r7, #12]
 8019f56:	f103 021c 	add.w	r2, r3, #28
 8019f5a:	687b      	ldr	r3, [r7, #4]
 8019f5c:	68db      	ldr	r3, [r3, #12]
 8019f5e:	4619      	mov	r1, r3
 8019f60:	4610      	mov	r0, r2
 8019f62:	f7fd fb19 	bl	8017598 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8019f66:	68fb      	ldr	r3, [r7, #12]
 8019f68:	3316      	adds	r3, #22
 8019f6a:	6939      	ldr	r1, [r7, #16]
 8019f6c:	4618      	mov	r0, r3
 8019f6e:	f7fd fb13 	bl	8017598 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8019f72:	68fb      	ldr	r3, [r7, #12]
 8019f74:	3312      	adds	r3, #18
 8019f76:	2100      	movs	r1, #0
 8019f78:	4618      	mov	r0, r3
 8019f7a:	f7fd faf2 	bl	8017562 <st_word>
					fs->wflag = 1;
 8019f7e:	68bb      	ldr	r3, [r7, #8]
 8019f80:	2201      	movs	r2, #1
 8019f82:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8019f84:	68bb      	ldr	r3, [r7, #8]
 8019f86:	4618      	mov	r0, r3
 8019f88:	f7fd fd8e 	bl	8017aa8 <sync_fs>
 8019f8c:	4603      	mov	r3, r0
 8019f8e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8019f90:	687b      	ldr	r3, [r7, #4]
 8019f92:	7d1b      	ldrb	r3, [r3, #20]
 8019f94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8019f98:	b2da      	uxtb	r2, r3
 8019f9a:	687b      	ldr	r3, [r7, #4]
 8019f9c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8019f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8019fa0:	4618      	mov	r0, r3
 8019fa2:	3718      	adds	r7, #24
 8019fa4:	46bd      	mov	sp, r7
 8019fa6:	bd80      	pop	{r7, pc}

08019fa8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8019fa8:	b580      	push	{r7, lr}
 8019faa:	b084      	sub	sp, #16
 8019fac:	af00      	add	r7, sp, #0
 8019fae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8019fb0:	6878      	ldr	r0, [r7, #4]
 8019fb2:	f7ff ff7b 	bl	8019eac <f_sync>
 8019fb6:	4603      	mov	r3, r0
 8019fb8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8019fba:	7bfb      	ldrb	r3, [r7, #15]
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	d118      	bne.n	8019ff2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8019fc0:	687b      	ldr	r3, [r7, #4]
 8019fc2:	f107 0208 	add.w	r2, r7, #8
 8019fc6:	4611      	mov	r1, r2
 8019fc8:	4618      	mov	r0, r3
 8019fca:	f7ff fb93 	bl	80196f4 <validate>
 8019fce:	4603      	mov	r3, r0
 8019fd0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8019fd2:	7bfb      	ldrb	r3, [r7, #15]
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d10c      	bne.n	8019ff2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	691b      	ldr	r3, [r3, #16]
 8019fdc:	4618      	mov	r0, r3
 8019fde:	f7fd fc91 	bl	8017904 <dec_lock>
 8019fe2:	4603      	mov	r3, r0
 8019fe4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8019fe6:	7bfb      	ldrb	r3, [r7, #15]
 8019fe8:	2b00      	cmp	r3, #0
 8019fea:	d102      	bne.n	8019ff2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8019fec:	687b      	ldr	r3, [r7, #4]
 8019fee:	2200      	movs	r2, #0
 8019ff0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8019ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8019ff4:	4618      	mov	r0, r3
 8019ff6:	3710      	adds	r7, #16
 8019ff8:	46bd      	mov	sp, r7
 8019ffa:	bd80      	pop	{r7, pc}

08019ffc <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8019ffc:	b580      	push	{r7, lr}
 8019ffe:	b084      	sub	sp, #16
 801a000:	af00      	add	r7, sp, #0
 801a002:	6078      	str	r0, [r7, #4]
 801a004:	460b      	mov	r3, r1
 801a006:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 801a008:	78fb      	ldrb	r3, [r7, #3]
 801a00a:	2b0a      	cmp	r3, #10
 801a00c:	d103      	bne.n	801a016 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 801a00e:	210d      	movs	r1, #13
 801a010:	6878      	ldr	r0, [r7, #4]
 801a012:	f7ff fff3 	bl	8019ffc <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	685b      	ldr	r3, [r3, #4]
 801a01a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 801a01c:	68fb      	ldr	r3, [r7, #12]
 801a01e:	2b00      	cmp	r3, #0
 801a020:	db25      	blt.n	801a06e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 801a022:	68fb      	ldr	r3, [r7, #12]
 801a024:	1c5a      	adds	r2, r3, #1
 801a026:	60fa      	str	r2, [r7, #12]
 801a028:	687a      	ldr	r2, [r7, #4]
 801a02a:	4413      	add	r3, r2
 801a02c:	78fa      	ldrb	r2, [r7, #3]
 801a02e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801a030:	68fb      	ldr	r3, [r7, #12]
 801a032:	2b3c      	cmp	r3, #60	; 0x3c
 801a034:	dd12      	ble.n	801a05c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801a036:	687b      	ldr	r3, [r7, #4]
 801a038:	6818      	ldr	r0, [r3, #0]
 801a03a:	687b      	ldr	r3, [r7, #4]
 801a03c:	f103 010c 	add.w	r1, r3, #12
 801a040:	68fa      	ldr	r2, [r7, #12]
 801a042:	f107 0308 	add.w	r3, r7, #8
 801a046:	f7ff fd9d 	bl	8019b84 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801a04a:	68ba      	ldr	r2, [r7, #8]
 801a04c:	68fb      	ldr	r3, [r7, #12]
 801a04e:	429a      	cmp	r2, r3
 801a050:	d101      	bne.n	801a056 <putc_bfd+0x5a>
 801a052:	2300      	movs	r3, #0
 801a054:	e001      	b.n	801a05a <putc_bfd+0x5e>
 801a056:	f04f 33ff 	mov.w	r3, #4294967295
 801a05a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 801a05c:	687b      	ldr	r3, [r7, #4]
 801a05e:	68fa      	ldr	r2, [r7, #12]
 801a060:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 801a062:	687b      	ldr	r3, [r7, #4]
 801a064:	689b      	ldr	r3, [r3, #8]
 801a066:	1c5a      	adds	r2, r3, #1
 801a068:	687b      	ldr	r3, [r7, #4]
 801a06a:	609a      	str	r2, [r3, #8]
 801a06c:	e000      	b.n	801a070 <putc_bfd+0x74>
	if (i < 0) return;
 801a06e:	bf00      	nop
}
 801a070:	3710      	adds	r7, #16
 801a072:	46bd      	mov	sp, r7
 801a074:	bd80      	pop	{r7, pc}

0801a076 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 801a076:	b580      	push	{r7, lr}
 801a078:	b084      	sub	sp, #16
 801a07a:	af00      	add	r7, sp, #0
 801a07c:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 801a07e:	687b      	ldr	r3, [r7, #4]
 801a080:	685b      	ldr	r3, [r3, #4]
 801a082:	2b00      	cmp	r3, #0
 801a084:	db16      	blt.n	801a0b4 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	6818      	ldr	r0, [r3, #0]
 801a08a:	687b      	ldr	r3, [r7, #4]
 801a08c:	f103 010c 	add.w	r1, r3, #12
 801a090:	687b      	ldr	r3, [r7, #4]
 801a092:	685b      	ldr	r3, [r3, #4]
 801a094:	461a      	mov	r2, r3
 801a096:	f107 030c 	add.w	r3, r7, #12
 801a09a:	f7ff fd73 	bl	8019b84 <f_write>
 801a09e:	4603      	mov	r3, r0
 801a0a0:	2b00      	cmp	r3, #0
 801a0a2:	d107      	bne.n	801a0b4 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	685b      	ldr	r3, [r3, #4]
 801a0a8:	68fa      	ldr	r2, [r7, #12]
 801a0aa:	4293      	cmp	r3, r2
 801a0ac:	d102      	bne.n	801a0b4 <putc_flush+0x3e>
 801a0ae:	687b      	ldr	r3, [r7, #4]
 801a0b0:	689b      	ldr	r3, [r3, #8]
 801a0b2:	e001      	b.n	801a0b8 <putc_flush+0x42>
	return EOF;
 801a0b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a0b8:	4618      	mov	r0, r3
 801a0ba:	3710      	adds	r7, #16
 801a0bc:	46bd      	mov	sp, r7
 801a0be:	bd80      	pop	{r7, pc}

0801a0c0 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 801a0c0:	b480      	push	{r7}
 801a0c2:	b083      	sub	sp, #12
 801a0c4:	af00      	add	r7, sp, #0
 801a0c6:	6078      	str	r0, [r7, #4]
 801a0c8:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	683a      	ldr	r2, [r7, #0]
 801a0ce:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 801a0d0:	687b      	ldr	r3, [r7, #4]
 801a0d2:	2200      	movs	r2, #0
 801a0d4:	605a      	str	r2, [r3, #4]
 801a0d6:	687b      	ldr	r3, [r7, #4]
 801a0d8:	685a      	ldr	r2, [r3, #4]
 801a0da:	687b      	ldr	r3, [r7, #4]
 801a0dc:	609a      	str	r2, [r3, #8]
}
 801a0de:	bf00      	nop
 801a0e0:	370c      	adds	r7, #12
 801a0e2:	46bd      	mov	sp, r7
 801a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0e8:	4770      	bx	lr

0801a0ea <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 801a0ea:	b580      	push	{r7, lr}
 801a0ec:	b096      	sub	sp, #88	; 0x58
 801a0ee:	af00      	add	r7, sp, #0
 801a0f0:	6078      	str	r0, [r7, #4]
 801a0f2:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 801a0f4:	f107 030c 	add.w	r3, r7, #12
 801a0f8:	6839      	ldr	r1, [r7, #0]
 801a0fa:	4618      	mov	r0, r3
 801a0fc:	f7ff ffe0 	bl	801a0c0 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 801a100:	e009      	b.n	801a116 <f_puts+0x2c>
 801a102:	687b      	ldr	r3, [r7, #4]
 801a104:	1c5a      	adds	r2, r3, #1
 801a106:	607a      	str	r2, [r7, #4]
 801a108:	781a      	ldrb	r2, [r3, #0]
 801a10a:	f107 030c 	add.w	r3, r7, #12
 801a10e:	4611      	mov	r1, r2
 801a110:	4618      	mov	r0, r3
 801a112:	f7ff ff73 	bl	8019ffc <putc_bfd>
 801a116:	687b      	ldr	r3, [r7, #4]
 801a118:	781b      	ldrb	r3, [r3, #0]
 801a11a:	2b00      	cmp	r3, #0
 801a11c:	d1f1      	bne.n	801a102 <f_puts+0x18>
	return putc_flush(&pb);
 801a11e:	f107 030c 	add.w	r3, r7, #12
 801a122:	4618      	mov	r0, r3
 801a124:	f7ff ffa7 	bl	801a076 <putc_flush>
 801a128:	4603      	mov	r3, r0
}
 801a12a:	4618      	mov	r0, r3
 801a12c:	3758      	adds	r7, #88	; 0x58
 801a12e:	46bd      	mov	sp, r7
 801a130:	bd80      	pop	{r7, pc}
	...

0801a134 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801a134:	b480      	push	{r7}
 801a136:	b087      	sub	sp, #28
 801a138:	af00      	add	r7, sp, #0
 801a13a:	60f8      	str	r0, [r7, #12]
 801a13c:	60b9      	str	r1, [r7, #8]
 801a13e:	4613      	mov	r3, r2
 801a140:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801a142:	2301      	movs	r3, #1
 801a144:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801a146:	2300      	movs	r3, #0
 801a148:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801a14a:	4b1f      	ldr	r3, [pc, #124]	; (801a1c8 <FATFS_LinkDriverEx+0x94>)
 801a14c:	7a5b      	ldrb	r3, [r3, #9]
 801a14e:	b2db      	uxtb	r3, r3
 801a150:	2b00      	cmp	r3, #0
 801a152:	d131      	bne.n	801a1b8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801a154:	4b1c      	ldr	r3, [pc, #112]	; (801a1c8 <FATFS_LinkDriverEx+0x94>)
 801a156:	7a5b      	ldrb	r3, [r3, #9]
 801a158:	b2db      	uxtb	r3, r3
 801a15a:	461a      	mov	r2, r3
 801a15c:	4b1a      	ldr	r3, [pc, #104]	; (801a1c8 <FATFS_LinkDriverEx+0x94>)
 801a15e:	2100      	movs	r1, #0
 801a160:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801a162:	4b19      	ldr	r3, [pc, #100]	; (801a1c8 <FATFS_LinkDriverEx+0x94>)
 801a164:	7a5b      	ldrb	r3, [r3, #9]
 801a166:	b2db      	uxtb	r3, r3
 801a168:	4a17      	ldr	r2, [pc, #92]	; (801a1c8 <FATFS_LinkDriverEx+0x94>)
 801a16a:	009b      	lsls	r3, r3, #2
 801a16c:	4413      	add	r3, r2
 801a16e:	68fa      	ldr	r2, [r7, #12]
 801a170:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801a172:	4b15      	ldr	r3, [pc, #84]	; (801a1c8 <FATFS_LinkDriverEx+0x94>)
 801a174:	7a5b      	ldrb	r3, [r3, #9]
 801a176:	b2db      	uxtb	r3, r3
 801a178:	461a      	mov	r2, r3
 801a17a:	4b13      	ldr	r3, [pc, #76]	; (801a1c8 <FATFS_LinkDriverEx+0x94>)
 801a17c:	4413      	add	r3, r2
 801a17e:	79fa      	ldrb	r2, [r7, #7]
 801a180:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801a182:	4b11      	ldr	r3, [pc, #68]	; (801a1c8 <FATFS_LinkDriverEx+0x94>)
 801a184:	7a5b      	ldrb	r3, [r3, #9]
 801a186:	b2db      	uxtb	r3, r3
 801a188:	1c5a      	adds	r2, r3, #1
 801a18a:	b2d1      	uxtb	r1, r2
 801a18c:	4a0e      	ldr	r2, [pc, #56]	; (801a1c8 <FATFS_LinkDriverEx+0x94>)
 801a18e:	7251      	strb	r1, [r2, #9]
 801a190:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801a192:	7dbb      	ldrb	r3, [r7, #22]
 801a194:	3330      	adds	r3, #48	; 0x30
 801a196:	b2da      	uxtb	r2, r3
 801a198:	68bb      	ldr	r3, [r7, #8]
 801a19a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801a19c:	68bb      	ldr	r3, [r7, #8]
 801a19e:	3301      	adds	r3, #1
 801a1a0:	223a      	movs	r2, #58	; 0x3a
 801a1a2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801a1a4:	68bb      	ldr	r3, [r7, #8]
 801a1a6:	3302      	adds	r3, #2
 801a1a8:	222f      	movs	r2, #47	; 0x2f
 801a1aa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801a1ac:	68bb      	ldr	r3, [r7, #8]
 801a1ae:	3303      	adds	r3, #3
 801a1b0:	2200      	movs	r2, #0
 801a1b2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801a1b4:	2300      	movs	r3, #0
 801a1b6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801a1b8:	7dfb      	ldrb	r3, [r7, #23]
}
 801a1ba:	4618      	mov	r0, r3
 801a1bc:	371c      	adds	r7, #28
 801a1be:	46bd      	mov	sp, r7
 801a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1c4:	4770      	bx	lr
 801a1c6:	bf00      	nop
 801a1c8:	24003f24 	.word	0x24003f24

0801a1cc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801a1cc:	b580      	push	{r7, lr}
 801a1ce:	b082      	sub	sp, #8
 801a1d0:	af00      	add	r7, sp, #0
 801a1d2:	6078      	str	r0, [r7, #4]
 801a1d4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801a1d6:	2200      	movs	r2, #0
 801a1d8:	6839      	ldr	r1, [r7, #0]
 801a1da:	6878      	ldr	r0, [r7, #4]
 801a1dc:	f7ff ffaa 	bl	801a134 <FATFS_LinkDriverEx>
 801a1e0:	4603      	mov	r3, r0
}
 801a1e2:	4618      	mov	r0, r3
 801a1e4:	3708      	adds	r7, #8
 801a1e6:	46bd      	mov	sp, r7
 801a1e8:	bd80      	pop	{r7, pc}
	...

0801a1ec <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801a1ec:	b480      	push	{r7}
 801a1ee:	b085      	sub	sp, #20
 801a1f0:	af00      	add	r7, sp, #0
 801a1f2:	4603      	mov	r3, r0
 801a1f4:	6039      	str	r1, [r7, #0]
 801a1f6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801a1f8:	88fb      	ldrh	r3, [r7, #6]
 801a1fa:	2b7f      	cmp	r3, #127	; 0x7f
 801a1fc:	d802      	bhi.n	801a204 <ff_convert+0x18>
		c = chr;
 801a1fe:	88fb      	ldrh	r3, [r7, #6]
 801a200:	81fb      	strh	r3, [r7, #14]
 801a202:	e025      	b.n	801a250 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801a204:	683b      	ldr	r3, [r7, #0]
 801a206:	2b00      	cmp	r3, #0
 801a208:	d00b      	beq.n	801a222 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801a20a:	88fb      	ldrh	r3, [r7, #6]
 801a20c:	2bff      	cmp	r3, #255	; 0xff
 801a20e:	d805      	bhi.n	801a21c <ff_convert+0x30>
 801a210:	88fb      	ldrh	r3, [r7, #6]
 801a212:	3b80      	subs	r3, #128	; 0x80
 801a214:	4a12      	ldr	r2, [pc, #72]	; (801a260 <ff_convert+0x74>)
 801a216:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a21a:	e000      	b.n	801a21e <ff_convert+0x32>
 801a21c:	2300      	movs	r3, #0
 801a21e:	81fb      	strh	r3, [r7, #14]
 801a220:	e016      	b.n	801a250 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801a222:	2300      	movs	r3, #0
 801a224:	81fb      	strh	r3, [r7, #14]
 801a226:	e009      	b.n	801a23c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801a228:	89fb      	ldrh	r3, [r7, #14]
 801a22a:	4a0d      	ldr	r2, [pc, #52]	; (801a260 <ff_convert+0x74>)
 801a22c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a230:	88fa      	ldrh	r2, [r7, #6]
 801a232:	429a      	cmp	r2, r3
 801a234:	d006      	beq.n	801a244 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801a236:	89fb      	ldrh	r3, [r7, #14]
 801a238:	3301      	adds	r3, #1
 801a23a:	81fb      	strh	r3, [r7, #14]
 801a23c:	89fb      	ldrh	r3, [r7, #14]
 801a23e:	2b7f      	cmp	r3, #127	; 0x7f
 801a240:	d9f2      	bls.n	801a228 <ff_convert+0x3c>
 801a242:	e000      	b.n	801a246 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801a244:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801a246:	89fb      	ldrh	r3, [r7, #14]
 801a248:	3380      	adds	r3, #128	; 0x80
 801a24a:	b29b      	uxth	r3, r3
 801a24c:	b2db      	uxtb	r3, r3
 801a24e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801a250:	89fb      	ldrh	r3, [r7, #14]
}
 801a252:	4618      	mov	r0, r3
 801a254:	3714      	adds	r7, #20
 801a256:	46bd      	mov	sp, r7
 801a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a25c:	4770      	bx	lr
 801a25e:	bf00      	nop
 801a260:	0801c470 	.word	0x0801c470

0801a264 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801a264:	b480      	push	{r7}
 801a266:	b087      	sub	sp, #28
 801a268:	af00      	add	r7, sp, #0
 801a26a:	4603      	mov	r3, r0
 801a26c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801a26e:	88fb      	ldrh	r3, [r7, #6]
 801a270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a274:	d201      	bcs.n	801a27a <ff_wtoupper+0x16>
 801a276:	4b3e      	ldr	r3, [pc, #248]	; (801a370 <ff_wtoupper+0x10c>)
 801a278:	e000      	b.n	801a27c <ff_wtoupper+0x18>
 801a27a:	4b3e      	ldr	r3, [pc, #248]	; (801a374 <ff_wtoupper+0x110>)
 801a27c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801a27e:	697b      	ldr	r3, [r7, #20]
 801a280:	1c9a      	adds	r2, r3, #2
 801a282:	617a      	str	r2, [r7, #20]
 801a284:	881b      	ldrh	r3, [r3, #0]
 801a286:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801a288:	8a7b      	ldrh	r3, [r7, #18]
 801a28a:	2b00      	cmp	r3, #0
 801a28c:	d068      	beq.n	801a360 <ff_wtoupper+0xfc>
 801a28e:	88fa      	ldrh	r2, [r7, #6]
 801a290:	8a7b      	ldrh	r3, [r7, #18]
 801a292:	429a      	cmp	r2, r3
 801a294:	d364      	bcc.n	801a360 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801a296:	697b      	ldr	r3, [r7, #20]
 801a298:	1c9a      	adds	r2, r3, #2
 801a29a:	617a      	str	r2, [r7, #20]
 801a29c:	881b      	ldrh	r3, [r3, #0]
 801a29e:	823b      	strh	r3, [r7, #16]
 801a2a0:	8a3b      	ldrh	r3, [r7, #16]
 801a2a2:	0a1b      	lsrs	r3, r3, #8
 801a2a4:	81fb      	strh	r3, [r7, #14]
 801a2a6:	8a3b      	ldrh	r3, [r7, #16]
 801a2a8:	b2db      	uxtb	r3, r3
 801a2aa:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801a2ac:	88fa      	ldrh	r2, [r7, #6]
 801a2ae:	8a79      	ldrh	r1, [r7, #18]
 801a2b0:	8a3b      	ldrh	r3, [r7, #16]
 801a2b2:	440b      	add	r3, r1
 801a2b4:	429a      	cmp	r2, r3
 801a2b6:	da49      	bge.n	801a34c <ff_wtoupper+0xe8>
			switch (cmd) {
 801a2b8:	89fb      	ldrh	r3, [r7, #14]
 801a2ba:	2b08      	cmp	r3, #8
 801a2bc:	d84f      	bhi.n	801a35e <ff_wtoupper+0xfa>
 801a2be:	a201      	add	r2, pc, #4	; (adr r2, 801a2c4 <ff_wtoupper+0x60>)
 801a2c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a2c4:	0801a2e9 	.word	0x0801a2e9
 801a2c8:	0801a2fb 	.word	0x0801a2fb
 801a2cc:	0801a311 	.word	0x0801a311
 801a2d0:	0801a319 	.word	0x0801a319
 801a2d4:	0801a321 	.word	0x0801a321
 801a2d8:	0801a329 	.word	0x0801a329
 801a2dc:	0801a331 	.word	0x0801a331
 801a2e0:	0801a339 	.word	0x0801a339
 801a2e4:	0801a341 	.word	0x0801a341
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801a2e8:	88fa      	ldrh	r2, [r7, #6]
 801a2ea:	8a7b      	ldrh	r3, [r7, #18]
 801a2ec:	1ad3      	subs	r3, r2, r3
 801a2ee:	005b      	lsls	r3, r3, #1
 801a2f0:	697a      	ldr	r2, [r7, #20]
 801a2f2:	4413      	add	r3, r2
 801a2f4:	881b      	ldrh	r3, [r3, #0]
 801a2f6:	80fb      	strh	r3, [r7, #6]
 801a2f8:	e027      	b.n	801a34a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801a2fa:	88fa      	ldrh	r2, [r7, #6]
 801a2fc:	8a7b      	ldrh	r3, [r7, #18]
 801a2fe:	1ad3      	subs	r3, r2, r3
 801a300:	b29b      	uxth	r3, r3
 801a302:	f003 0301 	and.w	r3, r3, #1
 801a306:	b29b      	uxth	r3, r3
 801a308:	88fa      	ldrh	r2, [r7, #6]
 801a30a:	1ad3      	subs	r3, r2, r3
 801a30c:	80fb      	strh	r3, [r7, #6]
 801a30e:	e01c      	b.n	801a34a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801a310:	88fb      	ldrh	r3, [r7, #6]
 801a312:	3b10      	subs	r3, #16
 801a314:	80fb      	strh	r3, [r7, #6]
 801a316:	e018      	b.n	801a34a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801a318:	88fb      	ldrh	r3, [r7, #6]
 801a31a:	3b20      	subs	r3, #32
 801a31c:	80fb      	strh	r3, [r7, #6]
 801a31e:	e014      	b.n	801a34a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801a320:	88fb      	ldrh	r3, [r7, #6]
 801a322:	3b30      	subs	r3, #48	; 0x30
 801a324:	80fb      	strh	r3, [r7, #6]
 801a326:	e010      	b.n	801a34a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801a328:	88fb      	ldrh	r3, [r7, #6]
 801a32a:	3b1a      	subs	r3, #26
 801a32c:	80fb      	strh	r3, [r7, #6]
 801a32e:	e00c      	b.n	801a34a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801a330:	88fb      	ldrh	r3, [r7, #6]
 801a332:	3308      	adds	r3, #8
 801a334:	80fb      	strh	r3, [r7, #6]
 801a336:	e008      	b.n	801a34a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801a338:	88fb      	ldrh	r3, [r7, #6]
 801a33a:	3b50      	subs	r3, #80	; 0x50
 801a33c:	80fb      	strh	r3, [r7, #6]
 801a33e:	e004      	b.n	801a34a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801a340:	88fb      	ldrh	r3, [r7, #6]
 801a342:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801a346:	80fb      	strh	r3, [r7, #6]
 801a348:	bf00      	nop
			}
			break;
 801a34a:	e008      	b.n	801a35e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801a34c:	89fb      	ldrh	r3, [r7, #14]
 801a34e:	2b00      	cmp	r3, #0
 801a350:	d195      	bne.n	801a27e <ff_wtoupper+0x1a>
 801a352:	8a3b      	ldrh	r3, [r7, #16]
 801a354:	005b      	lsls	r3, r3, #1
 801a356:	697a      	ldr	r2, [r7, #20]
 801a358:	4413      	add	r3, r2
 801a35a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801a35c:	e78f      	b.n	801a27e <ff_wtoupper+0x1a>
			break;
 801a35e:	bf00      	nop
	}

	return chr;
 801a360:	88fb      	ldrh	r3, [r7, #6]
}
 801a362:	4618      	mov	r0, r3
 801a364:	371c      	adds	r7, #28
 801a366:	46bd      	mov	sp, r7
 801a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a36c:	4770      	bx	lr
 801a36e:	bf00      	nop
 801a370:	0801c570 	.word	0x0801c570
 801a374:	0801c764 	.word	0x0801c764

0801a378 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801a378:	b580      	push	{r7, lr}
 801a37a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 801a37c:	2201      	movs	r2, #1
 801a37e:	4913      	ldr	r1, [pc, #76]	; (801a3cc <MX_USB_DEVICE_Init+0x54>)
 801a380:	4813      	ldr	r0, [pc, #76]	; (801a3d0 <MX_USB_DEVICE_Init+0x58>)
 801a382:	f7fb fd1d 	bl	8015dc0 <USBD_Init>
 801a386:	4603      	mov	r3, r0
 801a388:	2b00      	cmp	r3, #0
 801a38a:	d001      	beq.n	801a390 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801a38c:	f7e8 f8c0 	bl	8002510 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 801a390:	4910      	ldr	r1, [pc, #64]	; (801a3d4 <MX_USB_DEVICE_Init+0x5c>)
 801a392:	480f      	ldr	r0, [pc, #60]	; (801a3d0 <MX_USB_DEVICE_Init+0x58>)
 801a394:	f7fb fd44 	bl	8015e20 <USBD_RegisterClass>
 801a398:	4603      	mov	r3, r0
 801a39a:	2b00      	cmp	r3, #0
 801a39c:	d001      	beq.n	801a3a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801a39e:	f7e8 f8b7 	bl	8002510 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 801a3a2:	490d      	ldr	r1, [pc, #52]	; (801a3d8 <MX_USB_DEVICE_Init+0x60>)
 801a3a4:	480a      	ldr	r0, [pc, #40]	; (801a3d0 <MX_USB_DEVICE_Init+0x58>)
 801a3a6:	f7fb fc3b 	bl	8015c20 <USBD_CDC_RegisterInterface>
 801a3aa:	4603      	mov	r3, r0
 801a3ac:	2b00      	cmp	r3, #0
 801a3ae:	d001      	beq.n	801a3b4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801a3b0:	f7e8 f8ae 	bl	8002510 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 801a3b4:	4806      	ldr	r0, [pc, #24]	; (801a3d0 <MX_USB_DEVICE_Init+0x58>)
 801a3b6:	f7fb fd69 	bl	8015e8c <USBD_Start>
 801a3ba:	4603      	mov	r3, r0
 801a3bc:	2b00      	cmp	r3, #0
 801a3be:	d001      	beq.n	801a3c4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801a3c0:	f7e8 f8a6 	bl	8002510 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801a3c4:	f7ef ffe6 	bl	800a394 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801a3c8:	bf00      	nop
 801a3ca:	bd80      	pop	{r7, pc}
 801a3cc:	240001b0 	.word	0x240001b0
 801a3d0:	24003f30 	.word	0x24003f30
 801a3d4:	2400011c 	.word	0x2400011c
 801a3d8:	2400019c 	.word	0x2400019c

0801a3dc <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 801a3dc:	b580      	push	{r7, lr}
 801a3de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 801a3e0:	2200      	movs	r2, #0
 801a3e2:	4905      	ldr	r1, [pc, #20]	; (801a3f8 <CDC_Init_HS+0x1c>)
 801a3e4:	4805      	ldr	r0, [pc, #20]	; (801a3fc <CDC_Init_HS+0x20>)
 801a3e6:	f7fb fc35 	bl	8015c54 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 801a3ea:	4905      	ldr	r1, [pc, #20]	; (801a400 <CDC_Init_HS+0x24>)
 801a3ec:	4803      	ldr	r0, [pc, #12]	; (801a3fc <CDC_Init_HS+0x20>)
 801a3ee:	f7fb fc53 	bl	8015c98 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801a3f2:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801a3f4:	4618      	mov	r0, r3
 801a3f6:	bd80      	pop	{r7, pc}
 801a3f8:	24004a0c 	.word	0x24004a0c
 801a3fc:	24003f30 	.word	0x24003f30
 801a400:	2400420c 	.word	0x2400420c

0801a404 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 801a404:	b480      	push	{r7}
 801a406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 801a408:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 801a40a:	4618      	mov	r0, r3
 801a40c:	46bd      	mov	sp, r7
 801a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a412:	4770      	bx	lr

0801a414 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801a414:	b480      	push	{r7}
 801a416:	b083      	sub	sp, #12
 801a418:	af00      	add	r7, sp, #0
 801a41a:	4603      	mov	r3, r0
 801a41c:	6039      	str	r1, [r7, #0]
 801a41e:	71fb      	strb	r3, [r7, #7]
 801a420:	4613      	mov	r3, r2
 801a422:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 801a424:	79fb      	ldrb	r3, [r7, #7]
 801a426:	2b23      	cmp	r3, #35	; 0x23
 801a428:	d84a      	bhi.n	801a4c0 <CDC_Control_HS+0xac>
 801a42a:	a201      	add	r2, pc, #4	; (adr r2, 801a430 <CDC_Control_HS+0x1c>)
 801a42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a430:	0801a4c1 	.word	0x0801a4c1
 801a434:	0801a4c1 	.word	0x0801a4c1
 801a438:	0801a4c1 	.word	0x0801a4c1
 801a43c:	0801a4c1 	.word	0x0801a4c1
 801a440:	0801a4c1 	.word	0x0801a4c1
 801a444:	0801a4c1 	.word	0x0801a4c1
 801a448:	0801a4c1 	.word	0x0801a4c1
 801a44c:	0801a4c1 	.word	0x0801a4c1
 801a450:	0801a4c1 	.word	0x0801a4c1
 801a454:	0801a4c1 	.word	0x0801a4c1
 801a458:	0801a4c1 	.word	0x0801a4c1
 801a45c:	0801a4c1 	.word	0x0801a4c1
 801a460:	0801a4c1 	.word	0x0801a4c1
 801a464:	0801a4c1 	.word	0x0801a4c1
 801a468:	0801a4c1 	.word	0x0801a4c1
 801a46c:	0801a4c1 	.word	0x0801a4c1
 801a470:	0801a4c1 	.word	0x0801a4c1
 801a474:	0801a4c1 	.word	0x0801a4c1
 801a478:	0801a4c1 	.word	0x0801a4c1
 801a47c:	0801a4c1 	.word	0x0801a4c1
 801a480:	0801a4c1 	.word	0x0801a4c1
 801a484:	0801a4c1 	.word	0x0801a4c1
 801a488:	0801a4c1 	.word	0x0801a4c1
 801a48c:	0801a4c1 	.word	0x0801a4c1
 801a490:	0801a4c1 	.word	0x0801a4c1
 801a494:	0801a4c1 	.word	0x0801a4c1
 801a498:	0801a4c1 	.word	0x0801a4c1
 801a49c:	0801a4c1 	.word	0x0801a4c1
 801a4a0:	0801a4c1 	.word	0x0801a4c1
 801a4a4:	0801a4c1 	.word	0x0801a4c1
 801a4a8:	0801a4c1 	.word	0x0801a4c1
 801a4ac:	0801a4c1 	.word	0x0801a4c1
 801a4b0:	0801a4c1 	.word	0x0801a4c1
 801a4b4:	0801a4c1 	.word	0x0801a4c1
 801a4b8:	0801a4c1 	.word	0x0801a4c1
 801a4bc:	0801a4c1 	.word	0x0801a4c1
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 801a4c0:	bf00      	nop
  }

  return (USBD_OK);
 801a4c2:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 801a4c4:	4618      	mov	r0, r3
 801a4c6:	370c      	adds	r7, #12
 801a4c8:	46bd      	mov	sp, r7
 801a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4ce:	4770      	bx	lr

0801a4d0 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 801a4d0:	b580      	push	{r7, lr}
 801a4d2:	b082      	sub	sp, #8
 801a4d4:	af00      	add	r7, sp, #0
 801a4d6:	6078      	str	r0, [r7, #4]
 801a4d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 801a4da:	6879      	ldr	r1, [r7, #4]
 801a4dc:	4805      	ldr	r0, [pc, #20]	; (801a4f4 <CDC_Receive_HS+0x24>)
 801a4de:	f7fb fbdb 	bl	8015c98 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 801a4e2:	4804      	ldr	r0, [pc, #16]	; (801a4f4 <CDC_Receive_HS+0x24>)
 801a4e4:	f7fb fc36 	bl	8015d54 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801a4e8:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 801a4ea:	4618      	mov	r0, r3
 801a4ec:	3708      	adds	r7, #8
 801a4ee:	46bd      	mov	sp, r7
 801a4f0:	bd80      	pop	{r7, pc}
 801a4f2:	bf00      	nop
 801a4f4:	24003f30 	.word	0x24003f30

0801a4f8 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 801a4f8:	b580      	push	{r7, lr}
 801a4fa:	b084      	sub	sp, #16
 801a4fc:	af00      	add	r7, sp, #0
 801a4fe:	6078      	str	r0, [r7, #4]
 801a500:	460b      	mov	r3, r1
 801a502:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801a504:	2300      	movs	r3, #0
 801a506:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 801a508:	4b0d      	ldr	r3, [pc, #52]	; (801a540 <CDC_Transmit_HS+0x48>)
 801a50a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801a50e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801a510:	68bb      	ldr	r3, [r7, #8]
 801a512:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801a516:	2b00      	cmp	r3, #0
 801a518:	d001      	beq.n	801a51e <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 801a51a:	2301      	movs	r3, #1
 801a51c:	e00b      	b.n	801a536 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 801a51e:	887b      	ldrh	r3, [r7, #2]
 801a520:	461a      	mov	r2, r3
 801a522:	6879      	ldr	r1, [r7, #4]
 801a524:	4806      	ldr	r0, [pc, #24]	; (801a540 <CDC_Transmit_HS+0x48>)
 801a526:	f7fb fb95 	bl	8015c54 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 801a52a:	4805      	ldr	r0, [pc, #20]	; (801a540 <CDC_Transmit_HS+0x48>)
 801a52c:	f7fb fbd2 	bl	8015cd4 <USBD_CDC_TransmitPacket>
 801a530:	4603      	mov	r3, r0
 801a532:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 801a534:	7bfb      	ldrb	r3, [r7, #15]
}
 801a536:	4618      	mov	r0, r3
 801a538:	3710      	adds	r7, #16
 801a53a:	46bd      	mov	sp, r7
 801a53c:	bd80      	pop	{r7, pc}
 801a53e:	bf00      	nop
 801a540:	24003f30 	.word	0x24003f30

0801a544 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801a544:	b480      	push	{r7}
 801a546:	b087      	sub	sp, #28
 801a548:	af00      	add	r7, sp, #0
 801a54a:	60f8      	str	r0, [r7, #12]
 801a54c:	60b9      	str	r1, [r7, #8]
 801a54e:	4613      	mov	r3, r2
 801a550:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801a552:	2300      	movs	r3, #0
 801a554:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801a556:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a55a:	4618      	mov	r0, r3
 801a55c:	371c      	adds	r7, #28
 801a55e:	46bd      	mov	sp, r7
 801a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a564:	4770      	bx	lr
	...

0801a568 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a568:	b480      	push	{r7}
 801a56a:	b083      	sub	sp, #12
 801a56c:	af00      	add	r7, sp, #0
 801a56e:	4603      	mov	r3, r0
 801a570:	6039      	str	r1, [r7, #0]
 801a572:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 801a574:	683b      	ldr	r3, [r7, #0]
 801a576:	2212      	movs	r2, #18
 801a578:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 801a57a:	4b03      	ldr	r3, [pc, #12]	; (801a588 <USBD_HS_DeviceDescriptor+0x20>)
}
 801a57c:	4618      	mov	r0, r3
 801a57e:	370c      	adds	r7, #12
 801a580:	46bd      	mov	sp, r7
 801a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a586:	4770      	bx	lr
 801a588:	240001cc 	.word	0x240001cc

0801a58c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a58c:	b480      	push	{r7}
 801a58e:	b083      	sub	sp, #12
 801a590:	af00      	add	r7, sp, #0
 801a592:	4603      	mov	r3, r0
 801a594:	6039      	str	r1, [r7, #0]
 801a596:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801a598:	683b      	ldr	r3, [r7, #0]
 801a59a:	2204      	movs	r2, #4
 801a59c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801a59e:	4b03      	ldr	r3, [pc, #12]	; (801a5ac <USBD_HS_LangIDStrDescriptor+0x20>)
}
 801a5a0:	4618      	mov	r0, r3
 801a5a2:	370c      	adds	r7, #12
 801a5a4:	46bd      	mov	sp, r7
 801a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5aa:	4770      	bx	lr
 801a5ac:	240001e0 	.word	0x240001e0

0801a5b0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a5b0:	b580      	push	{r7, lr}
 801a5b2:	b082      	sub	sp, #8
 801a5b4:	af00      	add	r7, sp, #0
 801a5b6:	4603      	mov	r3, r0
 801a5b8:	6039      	str	r1, [r7, #0]
 801a5ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a5bc:	79fb      	ldrb	r3, [r7, #7]
 801a5be:	2b00      	cmp	r3, #0
 801a5c0:	d105      	bne.n	801a5ce <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801a5c2:	683a      	ldr	r2, [r7, #0]
 801a5c4:	4907      	ldr	r1, [pc, #28]	; (801a5e4 <USBD_HS_ProductStrDescriptor+0x34>)
 801a5c6:	4808      	ldr	r0, [pc, #32]	; (801a5e8 <USBD_HS_ProductStrDescriptor+0x38>)
 801a5c8:	f7fc fe12 	bl	80171f0 <USBD_GetString>
 801a5cc:	e004      	b.n	801a5d8 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801a5ce:	683a      	ldr	r2, [r7, #0]
 801a5d0:	4904      	ldr	r1, [pc, #16]	; (801a5e4 <USBD_HS_ProductStrDescriptor+0x34>)
 801a5d2:	4805      	ldr	r0, [pc, #20]	; (801a5e8 <USBD_HS_ProductStrDescriptor+0x38>)
 801a5d4:	f7fc fe0c 	bl	80171f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a5d8:	4b02      	ldr	r3, [pc, #8]	; (801a5e4 <USBD_HS_ProductStrDescriptor+0x34>)
}
 801a5da:	4618      	mov	r0, r3
 801a5dc:	3708      	adds	r7, #8
 801a5de:	46bd      	mov	sp, r7
 801a5e0:	bd80      	pop	{r7, pc}
 801a5e2:	bf00      	nop
 801a5e4:	2400520c 	.word	0x2400520c
 801a5e8:	0801c2d4 	.word	0x0801c2d4

0801a5ec <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a5ec:	b580      	push	{r7, lr}
 801a5ee:	b082      	sub	sp, #8
 801a5f0:	af00      	add	r7, sp, #0
 801a5f2:	4603      	mov	r3, r0
 801a5f4:	6039      	str	r1, [r7, #0]
 801a5f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801a5f8:	683a      	ldr	r2, [r7, #0]
 801a5fa:	4904      	ldr	r1, [pc, #16]	; (801a60c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 801a5fc:	4804      	ldr	r0, [pc, #16]	; (801a610 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 801a5fe:	f7fc fdf7 	bl	80171f0 <USBD_GetString>
  return USBD_StrDesc;
 801a602:	4b02      	ldr	r3, [pc, #8]	; (801a60c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 801a604:	4618      	mov	r0, r3
 801a606:	3708      	adds	r7, #8
 801a608:	46bd      	mov	sp, r7
 801a60a:	bd80      	pop	{r7, pc}
 801a60c:	2400520c 	.word	0x2400520c
 801a610:	0801c2f0 	.word	0x0801c2f0

0801a614 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a614:	b580      	push	{r7, lr}
 801a616:	b082      	sub	sp, #8
 801a618:	af00      	add	r7, sp, #0
 801a61a:	4603      	mov	r3, r0
 801a61c:	6039      	str	r1, [r7, #0]
 801a61e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801a620:	683b      	ldr	r3, [r7, #0]
 801a622:	221a      	movs	r2, #26
 801a624:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801a626:	f000 f843 	bl	801a6b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801a62a:	4b02      	ldr	r3, [pc, #8]	; (801a634 <USBD_HS_SerialStrDescriptor+0x20>)
}
 801a62c:	4618      	mov	r0, r3
 801a62e:	3708      	adds	r7, #8
 801a630:	46bd      	mov	sp, r7
 801a632:	bd80      	pop	{r7, pc}
 801a634:	240001e4 	.word	0x240001e4

0801a638 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a638:	b580      	push	{r7, lr}
 801a63a:	b082      	sub	sp, #8
 801a63c:	af00      	add	r7, sp, #0
 801a63e:	4603      	mov	r3, r0
 801a640:	6039      	str	r1, [r7, #0]
 801a642:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801a644:	79fb      	ldrb	r3, [r7, #7]
 801a646:	2b00      	cmp	r3, #0
 801a648:	d105      	bne.n	801a656 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801a64a:	683a      	ldr	r2, [r7, #0]
 801a64c:	4907      	ldr	r1, [pc, #28]	; (801a66c <USBD_HS_ConfigStrDescriptor+0x34>)
 801a64e:	4808      	ldr	r0, [pc, #32]	; (801a670 <USBD_HS_ConfigStrDescriptor+0x38>)
 801a650:	f7fc fdce 	bl	80171f0 <USBD_GetString>
 801a654:	e004      	b.n	801a660 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801a656:	683a      	ldr	r2, [r7, #0]
 801a658:	4904      	ldr	r1, [pc, #16]	; (801a66c <USBD_HS_ConfigStrDescriptor+0x34>)
 801a65a:	4805      	ldr	r0, [pc, #20]	; (801a670 <USBD_HS_ConfigStrDescriptor+0x38>)
 801a65c:	f7fc fdc8 	bl	80171f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a660:	4b02      	ldr	r3, [pc, #8]	; (801a66c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801a662:	4618      	mov	r0, r3
 801a664:	3708      	adds	r7, #8
 801a666:	46bd      	mov	sp, r7
 801a668:	bd80      	pop	{r7, pc}
 801a66a:	bf00      	nop
 801a66c:	2400520c 	.word	0x2400520c
 801a670:	0801c2f4 	.word	0x0801c2f4

0801a674 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a674:	b580      	push	{r7, lr}
 801a676:	b082      	sub	sp, #8
 801a678:	af00      	add	r7, sp, #0
 801a67a:	4603      	mov	r3, r0
 801a67c:	6039      	str	r1, [r7, #0]
 801a67e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a680:	79fb      	ldrb	r3, [r7, #7]
 801a682:	2b00      	cmp	r3, #0
 801a684:	d105      	bne.n	801a692 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801a686:	683a      	ldr	r2, [r7, #0]
 801a688:	4907      	ldr	r1, [pc, #28]	; (801a6a8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801a68a:	4808      	ldr	r0, [pc, #32]	; (801a6ac <USBD_HS_InterfaceStrDescriptor+0x38>)
 801a68c:	f7fc fdb0 	bl	80171f0 <USBD_GetString>
 801a690:	e004      	b.n	801a69c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801a692:	683a      	ldr	r2, [r7, #0]
 801a694:	4904      	ldr	r1, [pc, #16]	; (801a6a8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801a696:	4805      	ldr	r0, [pc, #20]	; (801a6ac <USBD_HS_InterfaceStrDescriptor+0x38>)
 801a698:	f7fc fdaa 	bl	80171f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a69c:	4b02      	ldr	r3, [pc, #8]	; (801a6a8 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801a69e:	4618      	mov	r0, r3
 801a6a0:	3708      	adds	r7, #8
 801a6a2:	46bd      	mov	sp, r7
 801a6a4:	bd80      	pop	{r7, pc}
 801a6a6:	bf00      	nop
 801a6a8:	2400520c 	.word	0x2400520c
 801a6ac:	0801c300 	.word	0x0801c300

0801a6b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801a6b0:	b580      	push	{r7, lr}
 801a6b2:	b084      	sub	sp, #16
 801a6b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801a6b6:	4b0f      	ldr	r3, [pc, #60]	; (801a6f4 <Get_SerialNum+0x44>)
 801a6b8:	681b      	ldr	r3, [r3, #0]
 801a6ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801a6bc:	4b0e      	ldr	r3, [pc, #56]	; (801a6f8 <Get_SerialNum+0x48>)
 801a6be:	681b      	ldr	r3, [r3, #0]
 801a6c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801a6c2:	4b0e      	ldr	r3, [pc, #56]	; (801a6fc <Get_SerialNum+0x4c>)
 801a6c4:	681b      	ldr	r3, [r3, #0]
 801a6c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801a6c8:	68fa      	ldr	r2, [r7, #12]
 801a6ca:	687b      	ldr	r3, [r7, #4]
 801a6cc:	4413      	add	r3, r2
 801a6ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801a6d0:	68fb      	ldr	r3, [r7, #12]
 801a6d2:	2b00      	cmp	r3, #0
 801a6d4:	d009      	beq.n	801a6ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801a6d6:	2208      	movs	r2, #8
 801a6d8:	4909      	ldr	r1, [pc, #36]	; (801a700 <Get_SerialNum+0x50>)
 801a6da:	68f8      	ldr	r0, [r7, #12]
 801a6dc:	f000 f814 	bl	801a708 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801a6e0:	2204      	movs	r2, #4
 801a6e2:	4908      	ldr	r1, [pc, #32]	; (801a704 <Get_SerialNum+0x54>)
 801a6e4:	68b8      	ldr	r0, [r7, #8]
 801a6e6:	f000 f80f 	bl	801a708 <IntToUnicode>
  }
}
 801a6ea:	bf00      	nop
 801a6ec:	3710      	adds	r7, #16
 801a6ee:	46bd      	mov	sp, r7
 801a6f0:	bd80      	pop	{r7, pc}
 801a6f2:	bf00      	nop
 801a6f4:	1ff1e800 	.word	0x1ff1e800
 801a6f8:	1ff1e804 	.word	0x1ff1e804
 801a6fc:	1ff1e808 	.word	0x1ff1e808
 801a700:	240001e6 	.word	0x240001e6
 801a704:	240001f6 	.word	0x240001f6

0801a708 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801a708:	b480      	push	{r7}
 801a70a:	b087      	sub	sp, #28
 801a70c:	af00      	add	r7, sp, #0
 801a70e:	60f8      	str	r0, [r7, #12]
 801a710:	60b9      	str	r1, [r7, #8]
 801a712:	4613      	mov	r3, r2
 801a714:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801a716:	2300      	movs	r3, #0
 801a718:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801a71a:	2300      	movs	r3, #0
 801a71c:	75fb      	strb	r3, [r7, #23]
 801a71e:	e027      	b.n	801a770 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801a720:	68fb      	ldr	r3, [r7, #12]
 801a722:	0f1b      	lsrs	r3, r3, #28
 801a724:	2b09      	cmp	r3, #9
 801a726:	d80b      	bhi.n	801a740 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801a728:	68fb      	ldr	r3, [r7, #12]
 801a72a:	0f1b      	lsrs	r3, r3, #28
 801a72c:	b2da      	uxtb	r2, r3
 801a72e:	7dfb      	ldrb	r3, [r7, #23]
 801a730:	005b      	lsls	r3, r3, #1
 801a732:	4619      	mov	r1, r3
 801a734:	68bb      	ldr	r3, [r7, #8]
 801a736:	440b      	add	r3, r1
 801a738:	3230      	adds	r2, #48	; 0x30
 801a73a:	b2d2      	uxtb	r2, r2
 801a73c:	701a      	strb	r2, [r3, #0]
 801a73e:	e00a      	b.n	801a756 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801a740:	68fb      	ldr	r3, [r7, #12]
 801a742:	0f1b      	lsrs	r3, r3, #28
 801a744:	b2da      	uxtb	r2, r3
 801a746:	7dfb      	ldrb	r3, [r7, #23]
 801a748:	005b      	lsls	r3, r3, #1
 801a74a:	4619      	mov	r1, r3
 801a74c:	68bb      	ldr	r3, [r7, #8]
 801a74e:	440b      	add	r3, r1
 801a750:	3237      	adds	r2, #55	; 0x37
 801a752:	b2d2      	uxtb	r2, r2
 801a754:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801a756:	68fb      	ldr	r3, [r7, #12]
 801a758:	011b      	lsls	r3, r3, #4
 801a75a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801a75c:	7dfb      	ldrb	r3, [r7, #23]
 801a75e:	005b      	lsls	r3, r3, #1
 801a760:	3301      	adds	r3, #1
 801a762:	68ba      	ldr	r2, [r7, #8]
 801a764:	4413      	add	r3, r2
 801a766:	2200      	movs	r2, #0
 801a768:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801a76a:	7dfb      	ldrb	r3, [r7, #23]
 801a76c:	3301      	adds	r3, #1
 801a76e:	75fb      	strb	r3, [r7, #23]
 801a770:	7dfa      	ldrb	r2, [r7, #23]
 801a772:	79fb      	ldrb	r3, [r7, #7]
 801a774:	429a      	cmp	r2, r3
 801a776:	d3d3      	bcc.n	801a720 <IntToUnicode+0x18>
  }
}
 801a778:	bf00      	nop
 801a77a:	bf00      	nop
 801a77c:	371c      	adds	r7, #28
 801a77e:	46bd      	mov	sp, r7
 801a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a784:	4770      	bx	lr
	...

0801a788 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801a788:	b580      	push	{r7, lr}
 801a78a:	b0b2      	sub	sp, #200	; 0xc8
 801a78c:	af00      	add	r7, sp, #0
 801a78e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801a790:	f107 0310 	add.w	r3, r7, #16
 801a794:	22b8      	movs	r2, #184	; 0xb8
 801a796:	2100      	movs	r1, #0
 801a798:	4618      	mov	r0, r3
 801a79a:	f000 fb4f 	bl	801ae3c <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 801a79e:	687b      	ldr	r3, [r7, #4]
 801a7a0:	681b      	ldr	r3, [r3, #0]
 801a7a2:	4a1a      	ldr	r2, [pc, #104]	; (801a80c <HAL_PCD_MspInit+0x84>)
 801a7a4:	4293      	cmp	r3, r2
 801a7a6:	d12c      	bne.n	801a802 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801a7a8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 801a7ac:	f04f 0300 	mov.w	r3, #0
 801a7b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801a7b4:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 801a7b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801a7bc:	f107 0310 	add.w	r3, r7, #16
 801a7c0:	4618      	mov	r0, r3
 801a7c2:	f7f0 fdc7 	bl	800b354 <HAL_RCCEx_PeriphCLKConfig>
 801a7c6:	4603      	mov	r3, r0
 801a7c8:	2b00      	cmp	r3, #0
 801a7ca:	d001      	beq.n	801a7d0 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 801a7cc:	f7e7 fea0 	bl	8002510 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801a7d0:	f7ef fde0 	bl	800a394 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801a7d4:	4b0e      	ldr	r3, [pc, #56]	; (801a810 <HAL_PCD_MspInit+0x88>)
 801a7d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801a7da:	4a0d      	ldr	r2, [pc, #52]	; (801a810 <HAL_PCD_MspInit+0x88>)
 801a7dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801a7e0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801a7e4:	4b0a      	ldr	r3, [pc, #40]	; (801a810 <HAL_PCD_MspInit+0x88>)
 801a7e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801a7ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a7ee:	60fb      	str	r3, [r7, #12]
 801a7f0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801a7f2:	2200      	movs	r2, #0
 801a7f4:	2100      	movs	r1, #0
 801a7f6:	204d      	movs	r0, #77	; 0x4d
 801a7f8:	f7eb fb51 	bl	8005e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 801a7fc:	204d      	movs	r0, #77	; 0x4d
 801a7fe:	f7eb fb68 	bl	8005ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801a802:	bf00      	nop
 801a804:	37c8      	adds	r7, #200	; 0xc8
 801a806:	46bd      	mov	sp, r7
 801a808:	bd80      	pop	{r7, pc}
 801a80a:	bf00      	nop
 801a80c:	40040000 	.word	0x40040000
 801a810:	58024400 	.word	0x58024400

0801a814 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a814:	b580      	push	{r7, lr}
 801a816:	b082      	sub	sp, #8
 801a818:	af00      	add	r7, sp, #0
 801a81a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801a81c:	687b      	ldr	r3, [r7, #4]
 801a81e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801a822:	687b      	ldr	r3, [r7, #4]
 801a824:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801a828:	4619      	mov	r1, r3
 801a82a:	4610      	mov	r0, r2
 801a82c:	f7fb fb7b 	bl	8015f26 <USBD_LL_SetupStage>
}
 801a830:	bf00      	nop
 801a832:	3708      	adds	r7, #8
 801a834:	46bd      	mov	sp, r7
 801a836:	bd80      	pop	{r7, pc}

0801a838 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a838:	b580      	push	{r7, lr}
 801a83a:	b082      	sub	sp, #8
 801a83c:	af00      	add	r7, sp, #0
 801a83e:	6078      	str	r0, [r7, #4]
 801a840:	460b      	mov	r3, r1
 801a842:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801a844:	687b      	ldr	r3, [r7, #4]
 801a846:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801a84a:	78fa      	ldrb	r2, [r7, #3]
 801a84c:	6879      	ldr	r1, [r7, #4]
 801a84e:	4613      	mov	r3, r2
 801a850:	00db      	lsls	r3, r3, #3
 801a852:	4413      	add	r3, r2
 801a854:	009b      	lsls	r3, r3, #2
 801a856:	440b      	add	r3, r1
 801a858:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801a85c:	681a      	ldr	r2, [r3, #0]
 801a85e:	78fb      	ldrb	r3, [r7, #3]
 801a860:	4619      	mov	r1, r3
 801a862:	f7fb fbb5 	bl	8015fd0 <USBD_LL_DataOutStage>
}
 801a866:	bf00      	nop
 801a868:	3708      	adds	r7, #8
 801a86a:	46bd      	mov	sp, r7
 801a86c:	bd80      	pop	{r7, pc}

0801a86e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a86e:	b580      	push	{r7, lr}
 801a870:	b082      	sub	sp, #8
 801a872:	af00      	add	r7, sp, #0
 801a874:	6078      	str	r0, [r7, #4]
 801a876:	460b      	mov	r3, r1
 801a878:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801a87a:	687b      	ldr	r3, [r7, #4]
 801a87c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801a880:	78fa      	ldrb	r2, [r7, #3]
 801a882:	6879      	ldr	r1, [r7, #4]
 801a884:	4613      	mov	r3, r2
 801a886:	00db      	lsls	r3, r3, #3
 801a888:	4413      	add	r3, r2
 801a88a:	009b      	lsls	r3, r3, #2
 801a88c:	440b      	add	r3, r1
 801a88e:	3348      	adds	r3, #72	; 0x48
 801a890:	681a      	ldr	r2, [r3, #0]
 801a892:	78fb      	ldrb	r3, [r7, #3]
 801a894:	4619      	mov	r1, r3
 801a896:	f7fb fc4e 	bl	8016136 <USBD_LL_DataInStage>
}
 801a89a:	bf00      	nop
 801a89c:	3708      	adds	r7, #8
 801a89e:	46bd      	mov	sp, r7
 801a8a0:	bd80      	pop	{r7, pc}

0801a8a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a8a2:	b580      	push	{r7, lr}
 801a8a4:	b082      	sub	sp, #8
 801a8a6:	af00      	add	r7, sp, #0
 801a8a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801a8aa:	687b      	ldr	r3, [r7, #4]
 801a8ac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a8b0:	4618      	mov	r0, r3
 801a8b2:	f7fb fd88 	bl	80163c6 <USBD_LL_SOF>
}
 801a8b6:	bf00      	nop
 801a8b8:	3708      	adds	r7, #8
 801a8ba:	46bd      	mov	sp, r7
 801a8bc:	bd80      	pop	{r7, pc}

0801a8be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a8be:	b580      	push	{r7, lr}
 801a8c0:	b084      	sub	sp, #16
 801a8c2:	af00      	add	r7, sp, #0
 801a8c4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801a8c6:	2301      	movs	r3, #1
 801a8c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801a8ca:	687b      	ldr	r3, [r7, #4]
 801a8cc:	691b      	ldr	r3, [r3, #16]
 801a8ce:	2b00      	cmp	r3, #0
 801a8d0:	d102      	bne.n	801a8d8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801a8d2:	2300      	movs	r3, #0
 801a8d4:	73fb      	strb	r3, [r7, #15]
 801a8d6:	e008      	b.n	801a8ea <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801a8d8:	687b      	ldr	r3, [r7, #4]
 801a8da:	691b      	ldr	r3, [r3, #16]
 801a8dc:	2b02      	cmp	r3, #2
 801a8de:	d102      	bne.n	801a8e6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801a8e0:	2301      	movs	r3, #1
 801a8e2:	73fb      	strb	r3, [r7, #15]
 801a8e4:	e001      	b.n	801a8ea <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801a8e6:	f7e7 fe13 	bl	8002510 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801a8ea:	687b      	ldr	r3, [r7, #4]
 801a8ec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a8f0:	7bfa      	ldrb	r2, [r7, #15]
 801a8f2:	4611      	mov	r1, r2
 801a8f4:	4618      	mov	r0, r3
 801a8f6:	f7fb fd22 	bl	801633e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801a8fa:	687b      	ldr	r3, [r7, #4]
 801a8fc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a900:	4618      	mov	r0, r3
 801a902:	f7fb fcca 	bl	801629a <USBD_LL_Reset>
}
 801a906:	bf00      	nop
 801a908:	3710      	adds	r7, #16
 801a90a:	46bd      	mov	sp, r7
 801a90c:	bd80      	pop	{r7, pc}
	...

0801a910 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a910:	b580      	push	{r7, lr}
 801a912:	b082      	sub	sp, #8
 801a914:	af00      	add	r7, sp, #0
 801a916:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801a918:	687b      	ldr	r3, [r7, #4]
 801a91a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a91e:	4618      	mov	r0, r3
 801a920:	f7fb fd1d 	bl	801635e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801a924:	687b      	ldr	r3, [r7, #4]
 801a926:	681b      	ldr	r3, [r3, #0]
 801a928:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801a92c:	681b      	ldr	r3, [r3, #0]
 801a92e:	687a      	ldr	r2, [r7, #4]
 801a930:	6812      	ldr	r2, [r2, #0]
 801a932:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801a936:	f043 0301 	orr.w	r3, r3, #1
 801a93a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801a93c:	687b      	ldr	r3, [r7, #4]
 801a93e:	6a1b      	ldr	r3, [r3, #32]
 801a940:	2b00      	cmp	r3, #0
 801a942:	d005      	beq.n	801a950 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a944:	4b04      	ldr	r3, [pc, #16]	; (801a958 <HAL_PCD_SuspendCallback+0x48>)
 801a946:	691b      	ldr	r3, [r3, #16]
 801a948:	4a03      	ldr	r2, [pc, #12]	; (801a958 <HAL_PCD_SuspendCallback+0x48>)
 801a94a:	f043 0306 	orr.w	r3, r3, #6
 801a94e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801a950:	bf00      	nop
 801a952:	3708      	adds	r7, #8
 801a954:	46bd      	mov	sp, r7
 801a956:	bd80      	pop	{r7, pc}
 801a958:	e000ed00 	.word	0xe000ed00

0801a95c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a95c:	b580      	push	{r7, lr}
 801a95e:	b082      	sub	sp, #8
 801a960:	af00      	add	r7, sp, #0
 801a962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801a964:	687b      	ldr	r3, [r7, #4]
 801a966:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a96a:	4618      	mov	r0, r3
 801a96c:	f7fb fd13 	bl	8016396 <USBD_LL_Resume>
}
 801a970:	bf00      	nop
 801a972:	3708      	adds	r7, #8
 801a974:	46bd      	mov	sp, r7
 801a976:	bd80      	pop	{r7, pc}

0801a978 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a978:	b580      	push	{r7, lr}
 801a97a:	b082      	sub	sp, #8
 801a97c:	af00      	add	r7, sp, #0
 801a97e:	6078      	str	r0, [r7, #4]
 801a980:	460b      	mov	r3, r1
 801a982:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a984:	687b      	ldr	r3, [r7, #4]
 801a986:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a98a:	78fa      	ldrb	r2, [r7, #3]
 801a98c:	4611      	mov	r1, r2
 801a98e:	4618      	mov	r0, r3
 801a990:	f7fb fd6b 	bl	801646a <USBD_LL_IsoOUTIncomplete>
}
 801a994:	bf00      	nop
 801a996:	3708      	adds	r7, #8
 801a998:	46bd      	mov	sp, r7
 801a99a:	bd80      	pop	{r7, pc}

0801a99c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a99c:	b580      	push	{r7, lr}
 801a99e:	b082      	sub	sp, #8
 801a9a0:	af00      	add	r7, sp, #0
 801a9a2:	6078      	str	r0, [r7, #4]
 801a9a4:	460b      	mov	r3, r1
 801a9a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a9a8:	687b      	ldr	r3, [r7, #4]
 801a9aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a9ae:	78fa      	ldrb	r2, [r7, #3]
 801a9b0:	4611      	mov	r1, r2
 801a9b2:	4618      	mov	r0, r3
 801a9b4:	f7fb fd27 	bl	8016406 <USBD_LL_IsoINIncomplete>
}
 801a9b8:	bf00      	nop
 801a9ba:	3708      	adds	r7, #8
 801a9bc:	46bd      	mov	sp, r7
 801a9be:	bd80      	pop	{r7, pc}

0801a9c0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a9c0:	b580      	push	{r7, lr}
 801a9c2:	b082      	sub	sp, #8
 801a9c4:	af00      	add	r7, sp, #0
 801a9c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801a9c8:	687b      	ldr	r3, [r7, #4]
 801a9ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a9ce:	4618      	mov	r0, r3
 801a9d0:	f7fb fd7d 	bl	80164ce <USBD_LL_DevConnected>
}
 801a9d4:	bf00      	nop
 801a9d6:	3708      	adds	r7, #8
 801a9d8:	46bd      	mov	sp, r7
 801a9da:	bd80      	pop	{r7, pc}

0801a9dc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a9dc:	b580      	push	{r7, lr}
 801a9de:	b082      	sub	sp, #8
 801a9e0:	af00      	add	r7, sp, #0
 801a9e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801a9e4:	687b      	ldr	r3, [r7, #4]
 801a9e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a9ea:	4618      	mov	r0, r3
 801a9ec:	f7fb fd7a 	bl	80164e4 <USBD_LL_DevDisconnected>
}
 801a9f0:	bf00      	nop
 801a9f2:	3708      	adds	r7, #8
 801a9f4:	46bd      	mov	sp, r7
 801a9f6:	bd80      	pop	{r7, pc}

0801a9f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801a9f8:	b580      	push	{r7, lr}
 801a9fa:	b082      	sub	sp, #8
 801a9fc:	af00      	add	r7, sp, #0
 801a9fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 801aa00:	687b      	ldr	r3, [r7, #4]
 801aa02:	781b      	ldrb	r3, [r3, #0]
 801aa04:	2b01      	cmp	r3, #1
 801aa06:	d140      	bne.n	801aa8a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 801aa08:	4a22      	ldr	r2, [pc, #136]	; (801aa94 <USBD_LL_Init+0x9c>)
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 801aa10:	687b      	ldr	r3, [r7, #4]
 801aa12:	4a20      	ldr	r2, [pc, #128]	; (801aa94 <USBD_LL_Init+0x9c>)
 801aa14:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 801aa18:	4b1e      	ldr	r3, [pc, #120]	; (801aa94 <USBD_LL_Init+0x9c>)
 801aa1a:	4a1f      	ldr	r2, [pc, #124]	; (801aa98 <USBD_LL_Init+0xa0>)
 801aa1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 801aa1e:	4b1d      	ldr	r3, [pc, #116]	; (801aa94 <USBD_LL_Init+0x9c>)
 801aa20:	2209      	movs	r2, #9
 801aa22:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 801aa24:	4b1b      	ldr	r3, [pc, #108]	; (801aa94 <USBD_LL_Init+0x9c>)
 801aa26:	2202      	movs	r2, #2
 801aa28:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801aa2a:	4b1a      	ldr	r3, [pc, #104]	; (801aa94 <USBD_LL_Init+0x9c>)
 801aa2c:	2200      	movs	r2, #0
 801aa2e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 801aa30:	4b18      	ldr	r3, [pc, #96]	; (801aa94 <USBD_LL_Init+0x9c>)
 801aa32:	2202      	movs	r2, #2
 801aa34:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801aa36:	4b17      	ldr	r3, [pc, #92]	; (801aa94 <USBD_LL_Init+0x9c>)
 801aa38:	2200      	movs	r2, #0
 801aa3a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801aa3c:	4b15      	ldr	r3, [pc, #84]	; (801aa94 <USBD_LL_Init+0x9c>)
 801aa3e:	2200      	movs	r2, #0
 801aa40:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801aa42:	4b14      	ldr	r3, [pc, #80]	; (801aa94 <USBD_LL_Init+0x9c>)
 801aa44:	2200      	movs	r2, #0
 801aa46:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 801aa48:	4b12      	ldr	r3, [pc, #72]	; (801aa94 <USBD_LL_Init+0x9c>)
 801aa4a:	2200      	movs	r2, #0
 801aa4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 801aa4e:	4b11      	ldr	r3, [pc, #68]	; (801aa94 <USBD_LL_Init+0x9c>)
 801aa50:	2200      	movs	r2, #0
 801aa52:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801aa54:	4b0f      	ldr	r3, [pc, #60]	; (801aa94 <USBD_LL_Init+0x9c>)
 801aa56:	2200      	movs	r2, #0
 801aa58:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801aa5a:	480e      	ldr	r0, [pc, #56]	; (801aa94 <USBD_LL_Init+0x9c>)
 801aa5c:	f7ee f9a7 	bl	8008dae <HAL_PCD_Init>
 801aa60:	4603      	mov	r3, r0
 801aa62:	2b00      	cmp	r3, #0
 801aa64:	d001      	beq.n	801aa6a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801aa66:	f7e7 fd53 	bl	8002510 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 801aa6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801aa6e:	4809      	ldr	r0, [pc, #36]	; (801aa94 <USBD_LL_Init+0x9c>)
 801aa70:	f7ef fc15 	bl	800a29e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 801aa74:	2280      	movs	r2, #128	; 0x80
 801aa76:	2100      	movs	r1, #0
 801aa78:	4806      	ldr	r0, [pc, #24]	; (801aa94 <USBD_LL_Init+0x9c>)
 801aa7a:	f7ef fbc9 	bl	800a210 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801aa7e:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801aa82:	2101      	movs	r1, #1
 801aa84:	4803      	ldr	r0, [pc, #12]	; (801aa94 <USBD_LL_Init+0x9c>)
 801aa86:	f7ef fbc3 	bl	800a210 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 801aa8a:	2300      	movs	r3, #0
}
 801aa8c:	4618      	mov	r0, r3
 801aa8e:	3708      	adds	r7, #8
 801aa90:	46bd      	mov	sp, r7
 801aa92:	bd80      	pop	{r7, pc}
 801aa94:	2400540c 	.word	0x2400540c
 801aa98:	40040000 	.word	0x40040000

0801aa9c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801aa9c:	b580      	push	{r7, lr}
 801aa9e:	b084      	sub	sp, #16
 801aaa0:	af00      	add	r7, sp, #0
 801aaa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aaa4:	2300      	movs	r3, #0
 801aaa6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801aaa8:	2300      	movs	r3, #0
 801aaaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801aaac:	687b      	ldr	r3, [r7, #4]
 801aaae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801aab2:	4618      	mov	r0, r3
 801aab4:	f7ee fa9f 	bl	8008ff6 <HAL_PCD_Start>
 801aab8:	4603      	mov	r3, r0
 801aaba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801aabc:	7bfb      	ldrb	r3, [r7, #15]
 801aabe:	4618      	mov	r0, r3
 801aac0:	f000 f942 	bl	801ad48 <USBD_Get_USB_Status>
 801aac4:	4603      	mov	r3, r0
 801aac6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801aac8:	7bbb      	ldrb	r3, [r7, #14]
}
 801aaca:	4618      	mov	r0, r3
 801aacc:	3710      	adds	r7, #16
 801aace:	46bd      	mov	sp, r7
 801aad0:	bd80      	pop	{r7, pc}

0801aad2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801aad2:	b580      	push	{r7, lr}
 801aad4:	b084      	sub	sp, #16
 801aad6:	af00      	add	r7, sp, #0
 801aad8:	6078      	str	r0, [r7, #4]
 801aada:	4608      	mov	r0, r1
 801aadc:	4611      	mov	r1, r2
 801aade:	461a      	mov	r2, r3
 801aae0:	4603      	mov	r3, r0
 801aae2:	70fb      	strb	r3, [r7, #3]
 801aae4:	460b      	mov	r3, r1
 801aae6:	70bb      	strb	r3, [r7, #2]
 801aae8:	4613      	mov	r3, r2
 801aaea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aaec:	2300      	movs	r3, #0
 801aaee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801aaf0:	2300      	movs	r3, #0
 801aaf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801aaf4:	687b      	ldr	r3, [r7, #4]
 801aaf6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801aafa:	78bb      	ldrb	r3, [r7, #2]
 801aafc:	883a      	ldrh	r2, [r7, #0]
 801aafe:	78f9      	ldrb	r1, [r7, #3]
 801ab00:	f7ee ff9f 	bl	8009a42 <HAL_PCD_EP_Open>
 801ab04:	4603      	mov	r3, r0
 801ab06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ab08:	7bfb      	ldrb	r3, [r7, #15]
 801ab0a:	4618      	mov	r0, r3
 801ab0c:	f000 f91c 	bl	801ad48 <USBD_Get_USB_Status>
 801ab10:	4603      	mov	r3, r0
 801ab12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ab14:	7bbb      	ldrb	r3, [r7, #14]
}
 801ab16:	4618      	mov	r0, r3
 801ab18:	3710      	adds	r7, #16
 801ab1a:	46bd      	mov	sp, r7
 801ab1c:	bd80      	pop	{r7, pc}

0801ab1e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ab1e:	b580      	push	{r7, lr}
 801ab20:	b084      	sub	sp, #16
 801ab22:	af00      	add	r7, sp, #0
 801ab24:	6078      	str	r0, [r7, #4]
 801ab26:	460b      	mov	r3, r1
 801ab28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ab2a:	2300      	movs	r3, #0
 801ab2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ab2e:	2300      	movs	r3, #0
 801ab30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801ab32:	687b      	ldr	r3, [r7, #4]
 801ab34:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ab38:	78fa      	ldrb	r2, [r7, #3]
 801ab3a:	4611      	mov	r1, r2
 801ab3c:	4618      	mov	r0, r3
 801ab3e:	f7ee ffe8 	bl	8009b12 <HAL_PCD_EP_Close>
 801ab42:	4603      	mov	r3, r0
 801ab44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ab46:	7bfb      	ldrb	r3, [r7, #15]
 801ab48:	4618      	mov	r0, r3
 801ab4a:	f000 f8fd 	bl	801ad48 <USBD_Get_USB_Status>
 801ab4e:	4603      	mov	r3, r0
 801ab50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ab52:	7bbb      	ldrb	r3, [r7, #14]
}
 801ab54:	4618      	mov	r0, r3
 801ab56:	3710      	adds	r7, #16
 801ab58:	46bd      	mov	sp, r7
 801ab5a:	bd80      	pop	{r7, pc}

0801ab5c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ab5c:	b580      	push	{r7, lr}
 801ab5e:	b084      	sub	sp, #16
 801ab60:	af00      	add	r7, sp, #0
 801ab62:	6078      	str	r0, [r7, #4]
 801ab64:	460b      	mov	r3, r1
 801ab66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ab68:	2300      	movs	r3, #0
 801ab6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ab6c:	2300      	movs	r3, #0
 801ab6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801ab70:	687b      	ldr	r3, [r7, #4]
 801ab72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ab76:	78fa      	ldrb	r2, [r7, #3]
 801ab78:	4611      	mov	r1, r2
 801ab7a:	4618      	mov	r0, r3
 801ab7c:	f7ef f8a2 	bl	8009cc4 <HAL_PCD_EP_SetStall>
 801ab80:	4603      	mov	r3, r0
 801ab82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ab84:	7bfb      	ldrb	r3, [r7, #15]
 801ab86:	4618      	mov	r0, r3
 801ab88:	f000 f8de 	bl	801ad48 <USBD_Get_USB_Status>
 801ab8c:	4603      	mov	r3, r0
 801ab8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ab90:	7bbb      	ldrb	r3, [r7, #14]
}
 801ab92:	4618      	mov	r0, r3
 801ab94:	3710      	adds	r7, #16
 801ab96:	46bd      	mov	sp, r7
 801ab98:	bd80      	pop	{r7, pc}

0801ab9a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ab9a:	b580      	push	{r7, lr}
 801ab9c:	b084      	sub	sp, #16
 801ab9e:	af00      	add	r7, sp, #0
 801aba0:	6078      	str	r0, [r7, #4]
 801aba2:	460b      	mov	r3, r1
 801aba4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aba6:	2300      	movs	r3, #0
 801aba8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801abaa:	2300      	movs	r3, #0
 801abac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801abae:	687b      	ldr	r3, [r7, #4]
 801abb0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801abb4:	78fa      	ldrb	r2, [r7, #3]
 801abb6:	4611      	mov	r1, r2
 801abb8:	4618      	mov	r0, r3
 801abba:	f7ef f8e7 	bl	8009d8c <HAL_PCD_EP_ClrStall>
 801abbe:	4603      	mov	r3, r0
 801abc0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801abc2:	7bfb      	ldrb	r3, [r7, #15]
 801abc4:	4618      	mov	r0, r3
 801abc6:	f000 f8bf 	bl	801ad48 <USBD_Get_USB_Status>
 801abca:	4603      	mov	r3, r0
 801abcc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801abce:	7bbb      	ldrb	r3, [r7, #14]
}
 801abd0:	4618      	mov	r0, r3
 801abd2:	3710      	adds	r7, #16
 801abd4:	46bd      	mov	sp, r7
 801abd6:	bd80      	pop	{r7, pc}

0801abd8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801abd8:	b480      	push	{r7}
 801abda:	b085      	sub	sp, #20
 801abdc:	af00      	add	r7, sp, #0
 801abde:	6078      	str	r0, [r7, #4]
 801abe0:	460b      	mov	r3, r1
 801abe2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801abe4:	687b      	ldr	r3, [r7, #4]
 801abe6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801abea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801abec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801abf0:	2b00      	cmp	r3, #0
 801abf2:	da0b      	bge.n	801ac0c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801abf4:	78fb      	ldrb	r3, [r7, #3]
 801abf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801abfa:	68f9      	ldr	r1, [r7, #12]
 801abfc:	4613      	mov	r3, r2
 801abfe:	00db      	lsls	r3, r3, #3
 801ac00:	4413      	add	r3, r2
 801ac02:	009b      	lsls	r3, r3, #2
 801ac04:	440b      	add	r3, r1
 801ac06:	333e      	adds	r3, #62	; 0x3e
 801ac08:	781b      	ldrb	r3, [r3, #0]
 801ac0a:	e00b      	b.n	801ac24 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801ac0c:	78fb      	ldrb	r3, [r7, #3]
 801ac0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801ac12:	68f9      	ldr	r1, [r7, #12]
 801ac14:	4613      	mov	r3, r2
 801ac16:	00db      	lsls	r3, r3, #3
 801ac18:	4413      	add	r3, r2
 801ac1a:	009b      	lsls	r3, r3, #2
 801ac1c:	440b      	add	r3, r1
 801ac1e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801ac22:	781b      	ldrb	r3, [r3, #0]
  }
}
 801ac24:	4618      	mov	r0, r3
 801ac26:	3714      	adds	r7, #20
 801ac28:	46bd      	mov	sp, r7
 801ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac2e:	4770      	bx	lr

0801ac30 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801ac30:	b580      	push	{r7, lr}
 801ac32:	b084      	sub	sp, #16
 801ac34:	af00      	add	r7, sp, #0
 801ac36:	6078      	str	r0, [r7, #4]
 801ac38:	460b      	mov	r3, r1
 801ac3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ac3c:	2300      	movs	r3, #0
 801ac3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ac40:	2300      	movs	r3, #0
 801ac42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801ac44:	687b      	ldr	r3, [r7, #4]
 801ac46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ac4a:	78fa      	ldrb	r2, [r7, #3]
 801ac4c:	4611      	mov	r1, r2
 801ac4e:	4618      	mov	r0, r3
 801ac50:	f7ee fed2 	bl	80099f8 <HAL_PCD_SetAddress>
 801ac54:	4603      	mov	r3, r0
 801ac56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ac58:	7bfb      	ldrb	r3, [r7, #15]
 801ac5a:	4618      	mov	r0, r3
 801ac5c:	f000 f874 	bl	801ad48 <USBD_Get_USB_Status>
 801ac60:	4603      	mov	r3, r0
 801ac62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ac64:	7bbb      	ldrb	r3, [r7, #14]
}
 801ac66:	4618      	mov	r0, r3
 801ac68:	3710      	adds	r7, #16
 801ac6a:	46bd      	mov	sp, r7
 801ac6c:	bd80      	pop	{r7, pc}

0801ac6e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801ac6e:	b580      	push	{r7, lr}
 801ac70:	b086      	sub	sp, #24
 801ac72:	af00      	add	r7, sp, #0
 801ac74:	60f8      	str	r0, [r7, #12]
 801ac76:	607a      	str	r2, [r7, #4]
 801ac78:	603b      	str	r3, [r7, #0]
 801ac7a:	460b      	mov	r3, r1
 801ac7c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ac7e:	2300      	movs	r3, #0
 801ac80:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ac82:	2300      	movs	r3, #0
 801ac84:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801ac86:	68fb      	ldr	r3, [r7, #12]
 801ac88:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801ac8c:	7af9      	ldrb	r1, [r7, #11]
 801ac8e:	683b      	ldr	r3, [r7, #0]
 801ac90:	687a      	ldr	r2, [r7, #4]
 801ac92:	f7ee ffdc 	bl	8009c4e <HAL_PCD_EP_Transmit>
 801ac96:	4603      	mov	r3, r0
 801ac98:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ac9a:	7dfb      	ldrb	r3, [r7, #23]
 801ac9c:	4618      	mov	r0, r3
 801ac9e:	f000 f853 	bl	801ad48 <USBD_Get_USB_Status>
 801aca2:	4603      	mov	r3, r0
 801aca4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801aca6:	7dbb      	ldrb	r3, [r7, #22]
}
 801aca8:	4618      	mov	r0, r3
 801acaa:	3718      	adds	r7, #24
 801acac:	46bd      	mov	sp, r7
 801acae:	bd80      	pop	{r7, pc}

0801acb0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801acb0:	b580      	push	{r7, lr}
 801acb2:	b086      	sub	sp, #24
 801acb4:	af00      	add	r7, sp, #0
 801acb6:	60f8      	str	r0, [r7, #12]
 801acb8:	607a      	str	r2, [r7, #4]
 801acba:	603b      	str	r3, [r7, #0]
 801acbc:	460b      	mov	r3, r1
 801acbe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801acc0:	2300      	movs	r3, #0
 801acc2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801acc4:	2300      	movs	r3, #0
 801acc6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801acc8:	68fb      	ldr	r3, [r7, #12]
 801acca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801acce:	7af9      	ldrb	r1, [r7, #11]
 801acd0:	683b      	ldr	r3, [r7, #0]
 801acd2:	687a      	ldr	r2, [r7, #4]
 801acd4:	f7ee ff67 	bl	8009ba6 <HAL_PCD_EP_Receive>
 801acd8:	4603      	mov	r3, r0
 801acda:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801acdc:	7dfb      	ldrb	r3, [r7, #23]
 801acde:	4618      	mov	r0, r3
 801ace0:	f000 f832 	bl	801ad48 <USBD_Get_USB_Status>
 801ace4:	4603      	mov	r3, r0
 801ace6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801ace8:	7dbb      	ldrb	r3, [r7, #22]
}
 801acea:	4618      	mov	r0, r3
 801acec:	3718      	adds	r7, #24
 801acee:	46bd      	mov	sp, r7
 801acf0:	bd80      	pop	{r7, pc}

0801acf2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801acf2:	b580      	push	{r7, lr}
 801acf4:	b082      	sub	sp, #8
 801acf6:	af00      	add	r7, sp, #0
 801acf8:	6078      	str	r0, [r7, #4]
 801acfa:	460b      	mov	r3, r1
 801acfc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801acfe:	687b      	ldr	r3, [r7, #4]
 801ad00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ad04:	78fa      	ldrb	r2, [r7, #3]
 801ad06:	4611      	mov	r1, r2
 801ad08:	4618      	mov	r0, r3
 801ad0a:	f7ee ff88 	bl	8009c1e <HAL_PCD_EP_GetRxCount>
 801ad0e:	4603      	mov	r3, r0
}
 801ad10:	4618      	mov	r0, r3
 801ad12:	3708      	adds	r7, #8
 801ad14:	46bd      	mov	sp, r7
 801ad16:	bd80      	pop	{r7, pc}

0801ad18 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801ad18:	b480      	push	{r7}
 801ad1a:	b083      	sub	sp, #12
 801ad1c:	af00      	add	r7, sp, #0
 801ad1e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801ad20:	4b03      	ldr	r3, [pc, #12]	; (801ad30 <USBD_static_malloc+0x18>)
}
 801ad22:	4618      	mov	r0, r3
 801ad24:	370c      	adds	r7, #12
 801ad26:	46bd      	mov	sp, r7
 801ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad2c:	4770      	bx	lr
 801ad2e:	bf00      	nop
 801ad30:	24005918 	.word	0x24005918

0801ad34 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801ad34:	b480      	push	{r7}
 801ad36:	b083      	sub	sp, #12
 801ad38:	af00      	add	r7, sp, #0
 801ad3a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801ad3c:	bf00      	nop
 801ad3e:	370c      	adds	r7, #12
 801ad40:	46bd      	mov	sp, r7
 801ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad46:	4770      	bx	lr

0801ad48 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801ad48:	b480      	push	{r7}
 801ad4a:	b085      	sub	sp, #20
 801ad4c:	af00      	add	r7, sp, #0
 801ad4e:	4603      	mov	r3, r0
 801ad50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ad52:	2300      	movs	r3, #0
 801ad54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801ad56:	79fb      	ldrb	r3, [r7, #7]
 801ad58:	2b03      	cmp	r3, #3
 801ad5a:	d817      	bhi.n	801ad8c <USBD_Get_USB_Status+0x44>
 801ad5c:	a201      	add	r2, pc, #4	; (adr r2, 801ad64 <USBD_Get_USB_Status+0x1c>)
 801ad5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ad62:	bf00      	nop
 801ad64:	0801ad75 	.word	0x0801ad75
 801ad68:	0801ad7b 	.word	0x0801ad7b
 801ad6c:	0801ad81 	.word	0x0801ad81
 801ad70:	0801ad87 	.word	0x0801ad87
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801ad74:	2300      	movs	r3, #0
 801ad76:	73fb      	strb	r3, [r7, #15]
    break;
 801ad78:	e00b      	b.n	801ad92 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801ad7a:	2303      	movs	r3, #3
 801ad7c:	73fb      	strb	r3, [r7, #15]
    break;
 801ad7e:	e008      	b.n	801ad92 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801ad80:	2301      	movs	r3, #1
 801ad82:	73fb      	strb	r3, [r7, #15]
    break;
 801ad84:	e005      	b.n	801ad92 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801ad86:	2303      	movs	r3, #3
 801ad88:	73fb      	strb	r3, [r7, #15]
    break;
 801ad8a:	e002      	b.n	801ad92 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801ad8c:	2303      	movs	r3, #3
 801ad8e:	73fb      	strb	r3, [r7, #15]
    break;
 801ad90:	bf00      	nop
  }
  return usb_status;
 801ad92:	7bfb      	ldrb	r3, [r7, #15]
}
 801ad94:	4618      	mov	r0, r3
 801ad96:	3714      	adds	r7, #20
 801ad98:	46bd      	mov	sp, r7
 801ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad9e:	4770      	bx	lr

0801ada0 <siprintf>:
 801ada0:	b40e      	push	{r1, r2, r3}
 801ada2:	b500      	push	{lr}
 801ada4:	b09c      	sub	sp, #112	; 0x70
 801ada6:	ab1d      	add	r3, sp, #116	; 0x74
 801ada8:	9002      	str	r0, [sp, #8]
 801adaa:	9006      	str	r0, [sp, #24]
 801adac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801adb0:	4809      	ldr	r0, [pc, #36]	; (801add8 <siprintf+0x38>)
 801adb2:	9107      	str	r1, [sp, #28]
 801adb4:	9104      	str	r1, [sp, #16]
 801adb6:	4909      	ldr	r1, [pc, #36]	; (801addc <siprintf+0x3c>)
 801adb8:	f853 2b04 	ldr.w	r2, [r3], #4
 801adbc:	9105      	str	r1, [sp, #20]
 801adbe:	6800      	ldr	r0, [r0, #0]
 801adc0:	9301      	str	r3, [sp, #4]
 801adc2:	a902      	add	r1, sp, #8
 801adc4:	f000 f9d6 	bl	801b174 <_svfiprintf_r>
 801adc8:	9b02      	ldr	r3, [sp, #8]
 801adca:	2200      	movs	r2, #0
 801adcc:	701a      	strb	r2, [r3, #0]
 801adce:	b01c      	add	sp, #112	; 0x70
 801add0:	f85d eb04 	ldr.w	lr, [sp], #4
 801add4:	b003      	add	sp, #12
 801add6:	4770      	bx	lr
 801add8:	2400024c 	.word	0x2400024c
 801addc:	ffff0208 	.word	0xffff0208

0801ade0 <siscanf>:
 801ade0:	b40e      	push	{r1, r2, r3}
 801ade2:	b510      	push	{r4, lr}
 801ade4:	b09f      	sub	sp, #124	; 0x7c
 801ade6:	ac21      	add	r4, sp, #132	; 0x84
 801ade8:	f44f 7101 	mov.w	r1, #516	; 0x204
 801adec:	f854 2b04 	ldr.w	r2, [r4], #4
 801adf0:	9201      	str	r2, [sp, #4]
 801adf2:	f8ad 101c 	strh.w	r1, [sp, #28]
 801adf6:	9004      	str	r0, [sp, #16]
 801adf8:	9008      	str	r0, [sp, #32]
 801adfa:	f7e5 fa93 	bl	8000324 <strlen>
 801adfe:	4b0c      	ldr	r3, [pc, #48]	; (801ae30 <siscanf+0x50>)
 801ae00:	9005      	str	r0, [sp, #20]
 801ae02:	9009      	str	r0, [sp, #36]	; 0x24
 801ae04:	930d      	str	r3, [sp, #52]	; 0x34
 801ae06:	480b      	ldr	r0, [pc, #44]	; (801ae34 <siscanf+0x54>)
 801ae08:	9a01      	ldr	r2, [sp, #4]
 801ae0a:	6800      	ldr	r0, [r0, #0]
 801ae0c:	9403      	str	r4, [sp, #12]
 801ae0e:	2300      	movs	r3, #0
 801ae10:	9311      	str	r3, [sp, #68]	; 0x44
 801ae12:	9316      	str	r3, [sp, #88]	; 0x58
 801ae14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ae18:	f8ad 301e 	strh.w	r3, [sp, #30]
 801ae1c:	a904      	add	r1, sp, #16
 801ae1e:	4623      	mov	r3, r4
 801ae20:	f000 fb00 	bl	801b424 <__ssvfiscanf_r>
 801ae24:	b01f      	add	sp, #124	; 0x7c
 801ae26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ae2a:	b003      	add	sp, #12
 801ae2c:	4770      	bx	lr
 801ae2e:	bf00      	nop
 801ae30:	0801ae39 	.word	0x0801ae39
 801ae34:	2400024c 	.word	0x2400024c

0801ae38 <__seofread>:
 801ae38:	2000      	movs	r0, #0
 801ae3a:	4770      	bx	lr

0801ae3c <memset>:
 801ae3c:	4402      	add	r2, r0
 801ae3e:	4603      	mov	r3, r0
 801ae40:	4293      	cmp	r3, r2
 801ae42:	d100      	bne.n	801ae46 <memset+0xa>
 801ae44:	4770      	bx	lr
 801ae46:	f803 1b01 	strb.w	r1, [r3], #1
 801ae4a:	e7f9      	b.n	801ae40 <memset+0x4>

0801ae4c <__errno>:
 801ae4c:	4b01      	ldr	r3, [pc, #4]	; (801ae54 <__errno+0x8>)
 801ae4e:	6818      	ldr	r0, [r3, #0]
 801ae50:	4770      	bx	lr
 801ae52:	bf00      	nop
 801ae54:	2400024c 	.word	0x2400024c

0801ae58 <__libc_init_array>:
 801ae58:	b570      	push	{r4, r5, r6, lr}
 801ae5a:	4d0d      	ldr	r5, [pc, #52]	; (801ae90 <__libc_init_array+0x38>)
 801ae5c:	4c0d      	ldr	r4, [pc, #52]	; (801ae94 <__libc_init_array+0x3c>)
 801ae5e:	1b64      	subs	r4, r4, r5
 801ae60:	10a4      	asrs	r4, r4, #2
 801ae62:	2600      	movs	r6, #0
 801ae64:	42a6      	cmp	r6, r4
 801ae66:	d109      	bne.n	801ae7c <__libc_init_array+0x24>
 801ae68:	4d0b      	ldr	r5, [pc, #44]	; (801ae98 <__libc_init_array+0x40>)
 801ae6a:	4c0c      	ldr	r4, [pc, #48]	; (801ae9c <__libc_init_array+0x44>)
 801ae6c:	f001 f8fe 	bl	801c06c <_init>
 801ae70:	1b64      	subs	r4, r4, r5
 801ae72:	10a4      	asrs	r4, r4, #2
 801ae74:	2600      	movs	r6, #0
 801ae76:	42a6      	cmp	r6, r4
 801ae78:	d105      	bne.n	801ae86 <__libc_init_array+0x2e>
 801ae7a:	bd70      	pop	{r4, r5, r6, pc}
 801ae7c:	f855 3b04 	ldr.w	r3, [r5], #4
 801ae80:	4798      	blx	r3
 801ae82:	3601      	adds	r6, #1
 801ae84:	e7ee      	b.n	801ae64 <__libc_init_array+0xc>
 801ae86:	f855 3b04 	ldr.w	r3, [r5], #4
 801ae8a:	4798      	blx	r3
 801ae8c:	3601      	adds	r6, #1
 801ae8e:	e7f2      	b.n	801ae76 <__libc_init_array+0x1e>
 801ae90:	0801c978 	.word	0x0801c978
 801ae94:	0801c978 	.word	0x0801c978
 801ae98:	0801c978 	.word	0x0801c978
 801ae9c:	0801c97c 	.word	0x0801c97c

0801aea0 <__retarget_lock_acquire_recursive>:
 801aea0:	4770      	bx	lr

0801aea2 <__retarget_lock_release_recursive>:
 801aea2:	4770      	bx	lr

0801aea4 <strcpy>:
 801aea4:	4603      	mov	r3, r0
 801aea6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801aeaa:	f803 2b01 	strb.w	r2, [r3], #1
 801aeae:	2a00      	cmp	r2, #0
 801aeb0:	d1f9      	bne.n	801aea6 <strcpy+0x2>
 801aeb2:	4770      	bx	lr

0801aeb4 <memcpy>:
 801aeb4:	440a      	add	r2, r1
 801aeb6:	4291      	cmp	r1, r2
 801aeb8:	f100 33ff 	add.w	r3, r0, #4294967295
 801aebc:	d100      	bne.n	801aec0 <memcpy+0xc>
 801aebe:	4770      	bx	lr
 801aec0:	b510      	push	{r4, lr}
 801aec2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801aec6:	f803 4f01 	strb.w	r4, [r3, #1]!
 801aeca:	4291      	cmp	r1, r2
 801aecc:	d1f9      	bne.n	801aec2 <memcpy+0xe>
 801aece:	bd10      	pop	{r4, pc}

0801aed0 <_free_r>:
 801aed0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801aed2:	2900      	cmp	r1, #0
 801aed4:	d044      	beq.n	801af60 <_free_r+0x90>
 801aed6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801aeda:	9001      	str	r0, [sp, #4]
 801aedc:	2b00      	cmp	r3, #0
 801aede:	f1a1 0404 	sub.w	r4, r1, #4
 801aee2:	bfb8      	it	lt
 801aee4:	18e4      	addlt	r4, r4, r3
 801aee6:	f000 f8df 	bl	801b0a8 <__malloc_lock>
 801aeea:	4a1e      	ldr	r2, [pc, #120]	; (801af64 <_free_r+0x94>)
 801aeec:	9801      	ldr	r0, [sp, #4]
 801aeee:	6813      	ldr	r3, [r2, #0]
 801aef0:	b933      	cbnz	r3, 801af00 <_free_r+0x30>
 801aef2:	6063      	str	r3, [r4, #4]
 801aef4:	6014      	str	r4, [r2, #0]
 801aef6:	b003      	add	sp, #12
 801aef8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801aefc:	f000 b8da 	b.w	801b0b4 <__malloc_unlock>
 801af00:	42a3      	cmp	r3, r4
 801af02:	d908      	bls.n	801af16 <_free_r+0x46>
 801af04:	6825      	ldr	r5, [r4, #0]
 801af06:	1961      	adds	r1, r4, r5
 801af08:	428b      	cmp	r3, r1
 801af0a:	bf01      	itttt	eq
 801af0c:	6819      	ldreq	r1, [r3, #0]
 801af0e:	685b      	ldreq	r3, [r3, #4]
 801af10:	1949      	addeq	r1, r1, r5
 801af12:	6021      	streq	r1, [r4, #0]
 801af14:	e7ed      	b.n	801aef2 <_free_r+0x22>
 801af16:	461a      	mov	r2, r3
 801af18:	685b      	ldr	r3, [r3, #4]
 801af1a:	b10b      	cbz	r3, 801af20 <_free_r+0x50>
 801af1c:	42a3      	cmp	r3, r4
 801af1e:	d9fa      	bls.n	801af16 <_free_r+0x46>
 801af20:	6811      	ldr	r1, [r2, #0]
 801af22:	1855      	adds	r5, r2, r1
 801af24:	42a5      	cmp	r5, r4
 801af26:	d10b      	bne.n	801af40 <_free_r+0x70>
 801af28:	6824      	ldr	r4, [r4, #0]
 801af2a:	4421      	add	r1, r4
 801af2c:	1854      	adds	r4, r2, r1
 801af2e:	42a3      	cmp	r3, r4
 801af30:	6011      	str	r1, [r2, #0]
 801af32:	d1e0      	bne.n	801aef6 <_free_r+0x26>
 801af34:	681c      	ldr	r4, [r3, #0]
 801af36:	685b      	ldr	r3, [r3, #4]
 801af38:	6053      	str	r3, [r2, #4]
 801af3a:	440c      	add	r4, r1
 801af3c:	6014      	str	r4, [r2, #0]
 801af3e:	e7da      	b.n	801aef6 <_free_r+0x26>
 801af40:	d902      	bls.n	801af48 <_free_r+0x78>
 801af42:	230c      	movs	r3, #12
 801af44:	6003      	str	r3, [r0, #0]
 801af46:	e7d6      	b.n	801aef6 <_free_r+0x26>
 801af48:	6825      	ldr	r5, [r4, #0]
 801af4a:	1961      	adds	r1, r4, r5
 801af4c:	428b      	cmp	r3, r1
 801af4e:	bf04      	itt	eq
 801af50:	6819      	ldreq	r1, [r3, #0]
 801af52:	685b      	ldreq	r3, [r3, #4]
 801af54:	6063      	str	r3, [r4, #4]
 801af56:	bf04      	itt	eq
 801af58:	1949      	addeq	r1, r1, r5
 801af5a:	6021      	streq	r1, [r4, #0]
 801af5c:	6054      	str	r4, [r2, #4]
 801af5e:	e7ca      	b.n	801aef6 <_free_r+0x26>
 801af60:	b003      	add	sp, #12
 801af62:	bd30      	pop	{r4, r5, pc}
 801af64:	24005c78 	.word	0x24005c78

0801af68 <sbrk_aligned>:
 801af68:	b570      	push	{r4, r5, r6, lr}
 801af6a:	4e0e      	ldr	r6, [pc, #56]	; (801afa4 <sbrk_aligned+0x3c>)
 801af6c:	460c      	mov	r4, r1
 801af6e:	6831      	ldr	r1, [r6, #0]
 801af70:	4605      	mov	r5, r0
 801af72:	b911      	cbnz	r1, 801af7a <sbrk_aligned+0x12>
 801af74:	f000 ff3a 	bl	801bdec <_sbrk_r>
 801af78:	6030      	str	r0, [r6, #0]
 801af7a:	4621      	mov	r1, r4
 801af7c:	4628      	mov	r0, r5
 801af7e:	f000 ff35 	bl	801bdec <_sbrk_r>
 801af82:	1c43      	adds	r3, r0, #1
 801af84:	d00a      	beq.n	801af9c <sbrk_aligned+0x34>
 801af86:	1cc4      	adds	r4, r0, #3
 801af88:	f024 0403 	bic.w	r4, r4, #3
 801af8c:	42a0      	cmp	r0, r4
 801af8e:	d007      	beq.n	801afa0 <sbrk_aligned+0x38>
 801af90:	1a21      	subs	r1, r4, r0
 801af92:	4628      	mov	r0, r5
 801af94:	f000 ff2a 	bl	801bdec <_sbrk_r>
 801af98:	3001      	adds	r0, #1
 801af9a:	d101      	bne.n	801afa0 <sbrk_aligned+0x38>
 801af9c:	f04f 34ff 	mov.w	r4, #4294967295
 801afa0:	4620      	mov	r0, r4
 801afa2:	bd70      	pop	{r4, r5, r6, pc}
 801afa4:	24005c7c 	.word	0x24005c7c

0801afa8 <_malloc_r>:
 801afa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801afac:	1ccd      	adds	r5, r1, #3
 801afae:	f025 0503 	bic.w	r5, r5, #3
 801afb2:	3508      	adds	r5, #8
 801afb4:	2d0c      	cmp	r5, #12
 801afb6:	bf38      	it	cc
 801afb8:	250c      	movcc	r5, #12
 801afba:	2d00      	cmp	r5, #0
 801afbc:	4607      	mov	r7, r0
 801afbe:	db01      	blt.n	801afc4 <_malloc_r+0x1c>
 801afc0:	42a9      	cmp	r1, r5
 801afc2:	d905      	bls.n	801afd0 <_malloc_r+0x28>
 801afc4:	230c      	movs	r3, #12
 801afc6:	603b      	str	r3, [r7, #0]
 801afc8:	2600      	movs	r6, #0
 801afca:	4630      	mov	r0, r6
 801afcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801afd0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801b0a4 <_malloc_r+0xfc>
 801afd4:	f000 f868 	bl	801b0a8 <__malloc_lock>
 801afd8:	f8d8 3000 	ldr.w	r3, [r8]
 801afdc:	461c      	mov	r4, r3
 801afde:	bb5c      	cbnz	r4, 801b038 <_malloc_r+0x90>
 801afe0:	4629      	mov	r1, r5
 801afe2:	4638      	mov	r0, r7
 801afe4:	f7ff ffc0 	bl	801af68 <sbrk_aligned>
 801afe8:	1c43      	adds	r3, r0, #1
 801afea:	4604      	mov	r4, r0
 801afec:	d155      	bne.n	801b09a <_malloc_r+0xf2>
 801afee:	f8d8 4000 	ldr.w	r4, [r8]
 801aff2:	4626      	mov	r6, r4
 801aff4:	2e00      	cmp	r6, #0
 801aff6:	d145      	bne.n	801b084 <_malloc_r+0xdc>
 801aff8:	2c00      	cmp	r4, #0
 801affa:	d048      	beq.n	801b08e <_malloc_r+0xe6>
 801affc:	6823      	ldr	r3, [r4, #0]
 801affe:	4631      	mov	r1, r6
 801b000:	4638      	mov	r0, r7
 801b002:	eb04 0903 	add.w	r9, r4, r3
 801b006:	f000 fef1 	bl	801bdec <_sbrk_r>
 801b00a:	4581      	cmp	r9, r0
 801b00c:	d13f      	bne.n	801b08e <_malloc_r+0xe6>
 801b00e:	6821      	ldr	r1, [r4, #0]
 801b010:	1a6d      	subs	r5, r5, r1
 801b012:	4629      	mov	r1, r5
 801b014:	4638      	mov	r0, r7
 801b016:	f7ff ffa7 	bl	801af68 <sbrk_aligned>
 801b01a:	3001      	adds	r0, #1
 801b01c:	d037      	beq.n	801b08e <_malloc_r+0xe6>
 801b01e:	6823      	ldr	r3, [r4, #0]
 801b020:	442b      	add	r3, r5
 801b022:	6023      	str	r3, [r4, #0]
 801b024:	f8d8 3000 	ldr.w	r3, [r8]
 801b028:	2b00      	cmp	r3, #0
 801b02a:	d038      	beq.n	801b09e <_malloc_r+0xf6>
 801b02c:	685a      	ldr	r2, [r3, #4]
 801b02e:	42a2      	cmp	r2, r4
 801b030:	d12b      	bne.n	801b08a <_malloc_r+0xe2>
 801b032:	2200      	movs	r2, #0
 801b034:	605a      	str	r2, [r3, #4]
 801b036:	e00f      	b.n	801b058 <_malloc_r+0xb0>
 801b038:	6822      	ldr	r2, [r4, #0]
 801b03a:	1b52      	subs	r2, r2, r5
 801b03c:	d41f      	bmi.n	801b07e <_malloc_r+0xd6>
 801b03e:	2a0b      	cmp	r2, #11
 801b040:	d917      	bls.n	801b072 <_malloc_r+0xca>
 801b042:	1961      	adds	r1, r4, r5
 801b044:	42a3      	cmp	r3, r4
 801b046:	6025      	str	r5, [r4, #0]
 801b048:	bf18      	it	ne
 801b04a:	6059      	strne	r1, [r3, #4]
 801b04c:	6863      	ldr	r3, [r4, #4]
 801b04e:	bf08      	it	eq
 801b050:	f8c8 1000 	streq.w	r1, [r8]
 801b054:	5162      	str	r2, [r4, r5]
 801b056:	604b      	str	r3, [r1, #4]
 801b058:	4638      	mov	r0, r7
 801b05a:	f104 060b 	add.w	r6, r4, #11
 801b05e:	f000 f829 	bl	801b0b4 <__malloc_unlock>
 801b062:	f026 0607 	bic.w	r6, r6, #7
 801b066:	1d23      	adds	r3, r4, #4
 801b068:	1af2      	subs	r2, r6, r3
 801b06a:	d0ae      	beq.n	801afca <_malloc_r+0x22>
 801b06c:	1b9b      	subs	r3, r3, r6
 801b06e:	50a3      	str	r3, [r4, r2]
 801b070:	e7ab      	b.n	801afca <_malloc_r+0x22>
 801b072:	42a3      	cmp	r3, r4
 801b074:	6862      	ldr	r2, [r4, #4]
 801b076:	d1dd      	bne.n	801b034 <_malloc_r+0x8c>
 801b078:	f8c8 2000 	str.w	r2, [r8]
 801b07c:	e7ec      	b.n	801b058 <_malloc_r+0xb0>
 801b07e:	4623      	mov	r3, r4
 801b080:	6864      	ldr	r4, [r4, #4]
 801b082:	e7ac      	b.n	801afde <_malloc_r+0x36>
 801b084:	4634      	mov	r4, r6
 801b086:	6876      	ldr	r6, [r6, #4]
 801b088:	e7b4      	b.n	801aff4 <_malloc_r+0x4c>
 801b08a:	4613      	mov	r3, r2
 801b08c:	e7cc      	b.n	801b028 <_malloc_r+0x80>
 801b08e:	230c      	movs	r3, #12
 801b090:	603b      	str	r3, [r7, #0]
 801b092:	4638      	mov	r0, r7
 801b094:	f000 f80e 	bl	801b0b4 <__malloc_unlock>
 801b098:	e797      	b.n	801afca <_malloc_r+0x22>
 801b09a:	6025      	str	r5, [r4, #0]
 801b09c:	e7dc      	b.n	801b058 <_malloc_r+0xb0>
 801b09e:	605b      	str	r3, [r3, #4]
 801b0a0:	deff      	udf	#255	; 0xff
 801b0a2:	bf00      	nop
 801b0a4:	24005c78 	.word	0x24005c78

0801b0a8 <__malloc_lock>:
 801b0a8:	4801      	ldr	r0, [pc, #4]	; (801b0b0 <__malloc_lock+0x8>)
 801b0aa:	f7ff bef9 	b.w	801aea0 <__retarget_lock_acquire_recursive>
 801b0ae:	bf00      	nop
 801b0b0:	24005c74 	.word	0x24005c74

0801b0b4 <__malloc_unlock>:
 801b0b4:	4801      	ldr	r0, [pc, #4]	; (801b0bc <__malloc_unlock+0x8>)
 801b0b6:	f7ff bef4 	b.w	801aea2 <__retarget_lock_release_recursive>
 801b0ba:	bf00      	nop
 801b0bc:	24005c74 	.word	0x24005c74

0801b0c0 <__ssputs_r>:
 801b0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b0c4:	688e      	ldr	r6, [r1, #8]
 801b0c6:	461f      	mov	r7, r3
 801b0c8:	42be      	cmp	r6, r7
 801b0ca:	680b      	ldr	r3, [r1, #0]
 801b0cc:	4682      	mov	sl, r0
 801b0ce:	460c      	mov	r4, r1
 801b0d0:	4690      	mov	r8, r2
 801b0d2:	d82c      	bhi.n	801b12e <__ssputs_r+0x6e>
 801b0d4:	898a      	ldrh	r2, [r1, #12]
 801b0d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b0da:	d026      	beq.n	801b12a <__ssputs_r+0x6a>
 801b0dc:	6965      	ldr	r5, [r4, #20]
 801b0de:	6909      	ldr	r1, [r1, #16]
 801b0e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b0e4:	eba3 0901 	sub.w	r9, r3, r1
 801b0e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b0ec:	1c7b      	adds	r3, r7, #1
 801b0ee:	444b      	add	r3, r9
 801b0f0:	106d      	asrs	r5, r5, #1
 801b0f2:	429d      	cmp	r5, r3
 801b0f4:	bf38      	it	cc
 801b0f6:	461d      	movcc	r5, r3
 801b0f8:	0553      	lsls	r3, r2, #21
 801b0fa:	d527      	bpl.n	801b14c <__ssputs_r+0x8c>
 801b0fc:	4629      	mov	r1, r5
 801b0fe:	f7ff ff53 	bl	801afa8 <_malloc_r>
 801b102:	4606      	mov	r6, r0
 801b104:	b360      	cbz	r0, 801b160 <__ssputs_r+0xa0>
 801b106:	6921      	ldr	r1, [r4, #16]
 801b108:	464a      	mov	r2, r9
 801b10a:	f7ff fed3 	bl	801aeb4 <memcpy>
 801b10e:	89a3      	ldrh	r3, [r4, #12]
 801b110:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801b114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b118:	81a3      	strh	r3, [r4, #12]
 801b11a:	6126      	str	r6, [r4, #16]
 801b11c:	6165      	str	r5, [r4, #20]
 801b11e:	444e      	add	r6, r9
 801b120:	eba5 0509 	sub.w	r5, r5, r9
 801b124:	6026      	str	r6, [r4, #0]
 801b126:	60a5      	str	r5, [r4, #8]
 801b128:	463e      	mov	r6, r7
 801b12a:	42be      	cmp	r6, r7
 801b12c:	d900      	bls.n	801b130 <__ssputs_r+0x70>
 801b12e:	463e      	mov	r6, r7
 801b130:	6820      	ldr	r0, [r4, #0]
 801b132:	4632      	mov	r2, r6
 801b134:	4641      	mov	r1, r8
 801b136:	f000 fe3e 	bl	801bdb6 <memmove>
 801b13a:	68a3      	ldr	r3, [r4, #8]
 801b13c:	1b9b      	subs	r3, r3, r6
 801b13e:	60a3      	str	r3, [r4, #8]
 801b140:	6823      	ldr	r3, [r4, #0]
 801b142:	4433      	add	r3, r6
 801b144:	6023      	str	r3, [r4, #0]
 801b146:	2000      	movs	r0, #0
 801b148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b14c:	462a      	mov	r2, r5
 801b14e:	f000 fe5d 	bl	801be0c <_realloc_r>
 801b152:	4606      	mov	r6, r0
 801b154:	2800      	cmp	r0, #0
 801b156:	d1e0      	bne.n	801b11a <__ssputs_r+0x5a>
 801b158:	6921      	ldr	r1, [r4, #16]
 801b15a:	4650      	mov	r0, sl
 801b15c:	f7ff feb8 	bl	801aed0 <_free_r>
 801b160:	230c      	movs	r3, #12
 801b162:	f8ca 3000 	str.w	r3, [sl]
 801b166:	89a3      	ldrh	r3, [r4, #12]
 801b168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b16c:	81a3      	strh	r3, [r4, #12]
 801b16e:	f04f 30ff 	mov.w	r0, #4294967295
 801b172:	e7e9      	b.n	801b148 <__ssputs_r+0x88>

0801b174 <_svfiprintf_r>:
 801b174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b178:	4698      	mov	r8, r3
 801b17a:	898b      	ldrh	r3, [r1, #12]
 801b17c:	061b      	lsls	r3, r3, #24
 801b17e:	b09d      	sub	sp, #116	; 0x74
 801b180:	4607      	mov	r7, r0
 801b182:	460d      	mov	r5, r1
 801b184:	4614      	mov	r4, r2
 801b186:	d50e      	bpl.n	801b1a6 <_svfiprintf_r+0x32>
 801b188:	690b      	ldr	r3, [r1, #16]
 801b18a:	b963      	cbnz	r3, 801b1a6 <_svfiprintf_r+0x32>
 801b18c:	2140      	movs	r1, #64	; 0x40
 801b18e:	f7ff ff0b 	bl	801afa8 <_malloc_r>
 801b192:	6028      	str	r0, [r5, #0]
 801b194:	6128      	str	r0, [r5, #16]
 801b196:	b920      	cbnz	r0, 801b1a2 <_svfiprintf_r+0x2e>
 801b198:	230c      	movs	r3, #12
 801b19a:	603b      	str	r3, [r7, #0]
 801b19c:	f04f 30ff 	mov.w	r0, #4294967295
 801b1a0:	e0d0      	b.n	801b344 <_svfiprintf_r+0x1d0>
 801b1a2:	2340      	movs	r3, #64	; 0x40
 801b1a4:	616b      	str	r3, [r5, #20]
 801b1a6:	2300      	movs	r3, #0
 801b1a8:	9309      	str	r3, [sp, #36]	; 0x24
 801b1aa:	2320      	movs	r3, #32
 801b1ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b1b0:	f8cd 800c 	str.w	r8, [sp, #12]
 801b1b4:	2330      	movs	r3, #48	; 0x30
 801b1b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801b35c <_svfiprintf_r+0x1e8>
 801b1ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b1be:	f04f 0901 	mov.w	r9, #1
 801b1c2:	4623      	mov	r3, r4
 801b1c4:	469a      	mov	sl, r3
 801b1c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b1ca:	b10a      	cbz	r2, 801b1d0 <_svfiprintf_r+0x5c>
 801b1cc:	2a25      	cmp	r2, #37	; 0x25
 801b1ce:	d1f9      	bne.n	801b1c4 <_svfiprintf_r+0x50>
 801b1d0:	ebba 0b04 	subs.w	fp, sl, r4
 801b1d4:	d00b      	beq.n	801b1ee <_svfiprintf_r+0x7a>
 801b1d6:	465b      	mov	r3, fp
 801b1d8:	4622      	mov	r2, r4
 801b1da:	4629      	mov	r1, r5
 801b1dc:	4638      	mov	r0, r7
 801b1de:	f7ff ff6f 	bl	801b0c0 <__ssputs_r>
 801b1e2:	3001      	adds	r0, #1
 801b1e4:	f000 80a9 	beq.w	801b33a <_svfiprintf_r+0x1c6>
 801b1e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b1ea:	445a      	add	r2, fp
 801b1ec:	9209      	str	r2, [sp, #36]	; 0x24
 801b1ee:	f89a 3000 	ldrb.w	r3, [sl]
 801b1f2:	2b00      	cmp	r3, #0
 801b1f4:	f000 80a1 	beq.w	801b33a <_svfiprintf_r+0x1c6>
 801b1f8:	2300      	movs	r3, #0
 801b1fa:	f04f 32ff 	mov.w	r2, #4294967295
 801b1fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b202:	f10a 0a01 	add.w	sl, sl, #1
 801b206:	9304      	str	r3, [sp, #16]
 801b208:	9307      	str	r3, [sp, #28]
 801b20a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b20e:	931a      	str	r3, [sp, #104]	; 0x68
 801b210:	4654      	mov	r4, sl
 801b212:	2205      	movs	r2, #5
 801b214:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b218:	4850      	ldr	r0, [pc, #320]	; (801b35c <_svfiprintf_r+0x1e8>)
 801b21a:	f7e5 f891 	bl	8000340 <memchr>
 801b21e:	9a04      	ldr	r2, [sp, #16]
 801b220:	b9d8      	cbnz	r0, 801b25a <_svfiprintf_r+0xe6>
 801b222:	06d0      	lsls	r0, r2, #27
 801b224:	bf44      	itt	mi
 801b226:	2320      	movmi	r3, #32
 801b228:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b22c:	0711      	lsls	r1, r2, #28
 801b22e:	bf44      	itt	mi
 801b230:	232b      	movmi	r3, #43	; 0x2b
 801b232:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b236:	f89a 3000 	ldrb.w	r3, [sl]
 801b23a:	2b2a      	cmp	r3, #42	; 0x2a
 801b23c:	d015      	beq.n	801b26a <_svfiprintf_r+0xf6>
 801b23e:	9a07      	ldr	r2, [sp, #28]
 801b240:	4654      	mov	r4, sl
 801b242:	2000      	movs	r0, #0
 801b244:	f04f 0c0a 	mov.w	ip, #10
 801b248:	4621      	mov	r1, r4
 801b24a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b24e:	3b30      	subs	r3, #48	; 0x30
 801b250:	2b09      	cmp	r3, #9
 801b252:	d94d      	bls.n	801b2f0 <_svfiprintf_r+0x17c>
 801b254:	b1b0      	cbz	r0, 801b284 <_svfiprintf_r+0x110>
 801b256:	9207      	str	r2, [sp, #28]
 801b258:	e014      	b.n	801b284 <_svfiprintf_r+0x110>
 801b25a:	eba0 0308 	sub.w	r3, r0, r8
 801b25e:	fa09 f303 	lsl.w	r3, r9, r3
 801b262:	4313      	orrs	r3, r2
 801b264:	9304      	str	r3, [sp, #16]
 801b266:	46a2      	mov	sl, r4
 801b268:	e7d2      	b.n	801b210 <_svfiprintf_r+0x9c>
 801b26a:	9b03      	ldr	r3, [sp, #12]
 801b26c:	1d19      	adds	r1, r3, #4
 801b26e:	681b      	ldr	r3, [r3, #0]
 801b270:	9103      	str	r1, [sp, #12]
 801b272:	2b00      	cmp	r3, #0
 801b274:	bfbb      	ittet	lt
 801b276:	425b      	neglt	r3, r3
 801b278:	f042 0202 	orrlt.w	r2, r2, #2
 801b27c:	9307      	strge	r3, [sp, #28]
 801b27e:	9307      	strlt	r3, [sp, #28]
 801b280:	bfb8      	it	lt
 801b282:	9204      	strlt	r2, [sp, #16]
 801b284:	7823      	ldrb	r3, [r4, #0]
 801b286:	2b2e      	cmp	r3, #46	; 0x2e
 801b288:	d10c      	bne.n	801b2a4 <_svfiprintf_r+0x130>
 801b28a:	7863      	ldrb	r3, [r4, #1]
 801b28c:	2b2a      	cmp	r3, #42	; 0x2a
 801b28e:	d134      	bne.n	801b2fa <_svfiprintf_r+0x186>
 801b290:	9b03      	ldr	r3, [sp, #12]
 801b292:	1d1a      	adds	r2, r3, #4
 801b294:	681b      	ldr	r3, [r3, #0]
 801b296:	9203      	str	r2, [sp, #12]
 801b298:	2b00      	cmp	r3, #0
 801b29a:	bfb8      	it	lt
 801b29c:	f04f 33ff 	movlt.w	r3, #4294967295
 801b2a0:	3402      	adds	r4, #2
 801b2a2:	9305      	str	r3, [sp, #20]
 801b2a4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801b36c <_svfiprintf_r+0x1f8>
 801b2a8:	7821      	ldrb	r1, [r4, #0]
 801b2aa:	2203      	movs	r2, #3
 801b2ac:	4650      	mov	r0, sl
 801b2ae:	f7e5 f847 	bl	8000340 <memchr>
 801b2b2:	b138      	cbz	r0, 801b2c4 <_svfiprintf_r+0x150>
 801b2b4:	9b04      	ldr	r3, [sp, #16]
 801b2b6:	eba0 000a 	sub.w	r0, r0, sl
 801b2ba:	2240      	movs	r2, #64	; 0x40
 801b2bc:	4082      	lsls	r2, r0
 801b2be:	4313      	orrs	r3, r2
 801b2c0:	3401      	adds	r4, #1
 801b2c2:	9304      	str	r3, [sp, #16]
 801b2c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b2c8:	4825      	ldr	r0, [pc, #148]	; (801b360 <_svfiprintf_r+0x1ec>)
 801b2ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b2ce:	2206      	movs	r2, #6
 801b2d0:	f7e5 f836 	bl	8000340 <memchr>
 801b2d4:	2800      	cmp	r0, #0
 801b2d6:	d038      	beq.n	801b34a <_svfiprintf_r+0x1d6>
 801b2d8:	4b22      	ldr	r3, [pc, #136]	; (801b364 <_svfiprintf_r+0x1f0>)
 801b2da:	bb1b      	cbnz	r3, 801b324 <_svfiprintf_r+0x1b0>
 801b2dc:	9b03      	ldr	r3, [sp, #12]
 801b2de:	3307      	adds	r3, #7
 801b2e0:	f023 0307 	bic.w	r3, r3, #7
 801b2e4:	3308      	adds	r3, #8
 801b2e6:	9303      	str	r3, [sp, #12]
 801b2e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b2ea:	4433      	add	r3, r6
 801b2ec:	9309      	str	r3, [sp, #36]	; 0x24
 801b2ee:	e768      	b.n	801b1c2 <_svfiprintf_r+0x4e>
 801b2f0:	fb0c 3202 	mla	r2, ip, r2, r3
 801b2f4:	460c      	mov	r4, r1
 801b2f6:	2001      	movs	r0, #1
 801b2f8:	e7a6      	b.n	801b248 <_svfiprintf_r+0xd4>
 801b2fa:	2300      	movs	r3, #0
 801b2fc:	3401      	adds	r4, #1
 801b2fe:	9305      	str	r3, [sp, #20]
 801b300:	4619      	mov	r1, r3
 801b302:	f04f 0c0a 	mov.w	ip, #10
 801b306:	4620      	mov	r0, r4
 801b308:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b30c:	3a30      	subs	r2, #48	; 0x30
 801b30e:	2a09      	cmp	r2, #9
 801b310:	d903      	bls.n	801b31a <_svfiprintf_r+0x1a6>
 801b312:	2b00      	cmp	r3, #0
 801b314:	d0c6      	beq.n	801b2a4 <_svfiprintf_r+0x130>
 801b316:	9105      	str	r1, [sp, #20]
 801b318:	e7c4      	b.n	801b2a4 <_svfiprintf_r+0x130>
 801b31a:	fb0c 2101 	mla	r1, ip, r1, r2
 801b31e:	4604      	mov	r4, r0
 801b320:	2301      	movs	r3, #1
 801b322:	e7f0      	b.n	801b306 <_svfiprintf_r+0x192>
 801b324:	ab03      	add	r3, sp, #12
 801b326:	9300      	str	r3, [sp, #0]
 801b328:	462a      	mov	r2, r5
 801b32a:	4b0f      	ldr	r3, [pc, #60]	; (801b368 <_svfiprintf_r+0x1f4>)
 801b32c:	a904      	add	r1, sp, #16
 801b32e:	4638      	mov	r0, r7
 801b330:	f3af 8000 	nop.w
 801b334:	1c42      	adds	r2, r0, #1
 801b336:	4606      	mov	r6, r0
 801b338:	d1d6      	bne.n	801b2e8 <_svfiprintf_r+0x174>
 801b33a:	89ab      	ldrh	r3, [r5, #12]
 801b33c:	065b      	lsls	r3, r3, #25
 801b33e:	f53f af2d 	bmi.w	801b19c <_svfiprintf_r+0x28>
 801b342:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b344:	b01d      	add	sp, #116	; 0x74
 801b346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b34a:	ab03      	add	r3, sp, #12
 801b34c:	9300      	str	r3, [sp, #0]
 801b34e:	462a      	mov	r2, r5
 801b350:	4b05      	ldr	r3, [pc, #20]	; (801b368 <_svfiprintf_r+0x1f4>)
 801b352:	a904      	add	r1, sp, #16
 801b354:	4638      	mov	r0, r7
 801b356:	f000 fa4b 	bl	801b7f0 <_printf_i>
 801b35a:	e7eb      	b.n	801b334 <_svfiprintf_r+0x1c0>
 801b35c:	0801c820 	.word	0x0801c820
 801b360:	0801c82a 	.word	0x0801c82a
 801b364:	00000000 	.word	0x00000000
 801b368:	0801b0c1 	.word	0x0801b0c1
 801b36c:	0801c826 	.word	0x0801c826

0801b370 <_sungetc_r>:
 801b370:	b538      	push	{r3, r4, r5, lr}
 801b372:	1c4b      	adds	r3, r1, #1
 801b374:	4614      	mov	r4, r2
 801b376:	d103      	bne.n	801b380 <_sungetc_r+0x10>
 801b378:	f04f 35ff 	mov.w	r5, #4294967295
 801b37c:	4628      	mov	r0, r5
 801b37e:	bd38      	pop	{r3, r4, r5, pc}
 801b380:	8993      	ldrh	r3, [r2, #12]
 801b382:	f023 0320 	bic.w	r3, r3, #32
 801b386:	8193      	strh	r3, [r2, #12]
 801b388:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b38a:	6852      	ldr	r2, [r2, #4]
 801b38c:	b2cd      	uxtb	r5, r1
 801b38e:	b18b      	cbz	r3, 801b3b4 <_sungetc_r+0x44>
 801b390:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b392:	4293      	cmp	r3, r2
 801b394:	dd08      	ble.n	801b3a8 <_sungetc_r+0x38>
 801b396:	6823      	ldr	r3, [r4, #0]
 801b398:	1e5a      	subs	r2, r3, #1
 801b39a:	6022      	str	r2, [r4, #0]
 801b39c:	f803 5c01 	strb.w	r5, [r3, #-1]
 801b3a0:	6863      	ldr	r3, [r4, #4]
 801b3a2:	3301      	adds	r3, #1
 801b3a4:	6063      	str	r3, [r4, #4]
 801b3a6:	e7e9      	b.n	801b37c <_sungetc_r+0xc>
 801b3a8:	4621      	mov	r1, r4
 801b3aa:	f000 fcca 	bl	801bd42 <__submore>
 801b3ae:	2800      	cmp	r0, #0
 801b3b0:	d0f1      	beq.n	801b396 <_sungetc_r+0x26>
 801b3b2:	e7e1      	b.n	801b378 <_sungetc_r+0x8>
 801b3b4:	6921      	ldr	r1, [r4, #16]
 801b3b6:	6823      	ldr	r3, [r4, #0]
 801b3b8:	b151      	cbz	r1, 801b3d0 <_sungetc_r+0x60>
 801b3ba:	4299      	cmp	r1, r3
 801b3bc:	d208      	bcs.n	801b3d0 <_sungetc_r+0x60>
 801b3be:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801b3c2:	42a9      	cmp	r1, r5
 801b3c4:	d104      	bne.n	801b3d0 <_sungetc_r+0x60>
 801b3c6:	3b01      	subs	r3, #1
 801b3c8:	3201      	adds	r2, #1
 801b3ca:	6023      	str	r3, [r4, #0]
 801b3cc:	6062      	str	r2, [r4, #4]
 801b3ce:	e7d5      	b.n	801b37c <_sungetc_r+0xc>
 801b3d0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801b3d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b3d8:	6363      	str	r3, [r4, #52]	; 0x34
 801b3da:	2303      	movs	r3, #3
 801b3dc:	63a3      	str	r3, [r4, #56]	; 0x38
 801b3de:	4623      	mov	r3, r4
 801b3e0:	f803 5f46 	strb.w	r5, [r3, #70]!
 801b3e4:	6023      	str	r3, [r4, #0]
 801b3e6:	2301      	movs	r3, #1
 801b3e8:	e7dc      	b.n	801b3a4 <_sungetc_r+0x34>

0801b3ea <__ssrefill_r>:
 801b3ea:	b510      	push	{r4, lr}
 801b3ec:	460c      	mov	r4, r1
 801b3ee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801b3f0:	b169      	cbz	r1, 801b40e <__ssrefill_r+0x24>
 801b3f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b3f6:	4299      	cmp	r1, r3
 801b3f8:	d001      	beq.n	801b3fe <__ssrefill_r+0x14>
 801b3fa:	f7ff fd69 	bl	801aed0 <_free_r>
 801b3fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b400:	6063      	str	r3, [r4, #4]
 801b402:	2000      	movs	r0, #0
 801b404:	6360      	str	r0, [r4, #52]	; 0x34
 801b406:	b113      	cbz	r3, 801b40e <__ssrefill_r+0x24>
 801b408:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801b40a:	6023      	str	r3, [r4, #0]
 801b40c:	bd10      	pop	{r4, pc}
 801b40e:	6923      	ldr	r3, [r4, #16]
 801b410:	6023      	str	r3, [r4, #0]
 801b412:	2300      	movs	r3, #0
 801b414:	6063      	str	r3, [r4, #4]
 801b416:	89a3      	ldrh	r3, [r4, #12]
 801b418:	f043 0320 	orr.w	r3, r3, #32
 801b41c:	81a3      	strh	r3, [r4, #12]
 801b41e:	f04f 30ff 	mov.w	r0, #4294967295
 801b422:	e7f3      	b.n	801b40c <__ssrefill_r+0x22>

0801b424 <__ssvfiscanf_r>:
 801b424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b428:	460c      	mov	r4, r1
 801b42a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801b42e:	2100      	movs	r1, #0
 801b430:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801b434:	49a6      	ldr	r1, [pc, #664]	; (801b6d0 <__ssvfiscanf_r+0x2ac>)
 801b436:	91a0      	str	r1, [sp, #640]	; 0x280
 801b438:	f10d 0804 	add.w	r8, sp, #4
 801b43c:	49a5      	ldr	r1, [pc, #660]	; (801b6d4 <__ssvfiscanf_r+0x2b0>)
 801b43e:	4fa6      	ldr	r7, [pc, #664]	; (801b6d8 <__ssvfiscanf_r+0x2b4>)
 801b440:	f8df 9298 	ldr.w	r9, [pc, #664]	; 801b6dc <__ssvfiscanf_r+0x2b8>
 801b444:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801b448:	4606      	mov	r6, r0
 801b44a:	91a1      	str	r1, [sp, #644]	; 0x284
 801b44c:	9300      	str	r3, [sp, #0]
 801b44e:	7813      	ldrb	r3, [r2, #0]
 801b450:	2b00      	cmp	r3, #0
 801b452:	f000 815a 	beq.w	801b70a <__ssvfiscanf_r+0x2e6>
 801b456:	5cf9      	ldrb	r1, [r7, r3]
 801b458:	f011 0108 	ands.w	r1, r1, #8
 801b45c:	f102 0501 	add.w	r5, r2, #1
 801b460:	d019      	beq.n	801b496 <__ssvfiscanf_r+0x72>
 801b462:	6863      	ldr	r3, [r4, #4]
 801b464:	2b00      	cmp	r3, #0
 801b466:	dd0f      	ble.n	801b488 <__ssvfiscanf_r+0x64>
 801b468:	6823      	ldr	r3, [r4, #0]
 801b46a:	781a      	ldrb	r2, [r3, #0]
 801b46c:	5cba      	ldrb	r2, [r7, r2]
 801b46e:	0712      	lsls	r2, r2, #28
 801b470:	d401      	bmi.n	801b476 <__ssvfiscanf_r+0x52>
 801b472:	462a      	mov	r2, r5
 801b474:	e7eb      	b.n	801b44e <__ssvfiscanf_r+0x2a>
 801b476:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801b478:	3201      	adds	r2, #1
 801b47a:	9245      	str	r2, [sp, #276]	; 0x114
 801b47c:	6862      	ldr	r2, [r4, #4]
 801b47e:	3301      	adds	r3, #1
 801b480:	3a01      	subs	r2, #1
 801b482:	6062      	str	r2, [r4, #4]
 801b484:	6023      	str	r3, [r4, #0]
 801b486:	e7ec      	b.n	801b462 <__ssvfiscanf_r+0x3e>
 801b488:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801b48a:	4621      	mov	r1, r4
 801b48c:	4630      	mov	r0, r6
 801b48e:	4798      	blx	r3
 801b490:	2800      	cmp	r0, #0
 801b492:	d0e9      	beq.n	801b468 <__ssvfiscanf_r+0x44>
 801b494:	e7ed      	b.n	801b472 <__ssvfiscanf_r+0x4e>
 801b496:	2b25      	cmp	r3, #37	; 0x25
 801b498:	d012      	beq.n	801b4c0 <__ssvfiscanf_r+0x9c>
 801b49a:	469a      	mov	sl, r3
 801b49c:	6863      	ldr	r3, [r4, #4]
 801b49e:	2b00      	cmp	r3, #0
 801b4a0:	f340 8091 	ble.w	801b5c6 <__ssvfiscanf_r+0x1a2>
 801b4a4:	6822      	ldr	r2, [r4, #0]
 801b4a6:	7813      	ldrb	r3, [r2, #0]
 801b4a8:	4553      	cmp	r3, sl
 801b4aa:	f040 812e 	bne.w	801b70a <__ssvfiscanf_r+0x2e6>
 801b4ae:	6863      	ldr	r3, [r4, #4]
 801b4b0:	3b01      	subs	r3, #1
 801b4b2:	6063      	str	r3, [r4, #4]
 801b4b4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801b4b6:	3201      	adds	r2, #1
 801b4b8:	3301      	adds	r3, #1
 801b4ba:	6022      	str	r2, [r4, #0]
 801b4bc:	9345      	str	r3, [sp, #276]	; 0x114
 801b4be:	e7d8      	b.n	801b472 <__ssvfiscanf_r+0x4e>
 801b4c0:	9141      	str	r1, [sp, #260]	; 0x104
 801b4c2:	9143      	str	r1, [sp, #268]	; 0x10c
 801b4c4:	7853      	ldrb	r3, [r2, #1]
 801b4c6:	2b2a      	cmp	r3, #42	; 0x2a
 801b4c8:	bf02      	ittt	eq
 801b4ca:	2310      	moveq	r3, #16
 801b4cc:	1c95      	addeq	r5, r2, #2
 801b4ce:	9341      	streq	r3, [sp, #260]	; 0x104
 801b4d0:	220a      	movs	r2, #10
 801b4d2:	46aa      	mov	sl, r5
 801b4d4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801b4d8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801b4dc:	2b09      	cmp	r3, #9
 801b4de:	d91c      	bls.n	801b51a <__ssvfiscanf_r+0xf6>
 801b4e0:	487e      	ldr	r0, [pc, #504]	; (801b6dc <__ssvfiscanf_r+0x2b8>)
 801b4e2:	2203      	movs	r2, #3
 801b4e4:	f7e4 ff2c 	bl	8000340 <memchr>
 801b4e8:	b138      	cbz	r0, 801b4fa <__ssvfiscanf_r+0xd6>
 801b4ea:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801b4ec:	eba0 0009 	sub.w	r0, r0, r9
 801b4f0:	2301      	movs	r3, #1
 801b4f2:	4083      	lsls	r3, r0
 801b4f4:	4313      	orrs	r3, r2
 801b4f6:	9341      	str	r3, [sp, #260]	; 0x104
 801b4f8:	4655      	mov	r5, sl
 801b4fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 801b4fe:	2b78      	cmp	r3, #120	; 0x78
 801b500:	d806      	bhi.n	801b510 <__ssvfiscanf_r+0xec>
 801b502:	2b57      	cmp	r3, #87	; 0x57
 801b504:	d810      	bhi.n	801b528 <__ssvfiscanf_r+0x104>
 801b506:	2b25      	cmp	r3, #37	; 0x25
 801b508:	d0c7      	beq.n	801b49a <__ssvfiscanf_r+0x76>
 801b50a:	d857      	bhi.n	801b5bc <__ssvfiscanf_r+0x198>
 801b50c:	2b00      	cmp	r3, #0
 801b50e:	d065      	beq.n	801b5dc <__ssvfiscanf_r+0x1b8>
 801b510:	2303      	movs	r3, #3
 801b512:	9347      	str	r3, [sp, #284]	; 0x11c
 801b514:	230a      	movs	r3, #10
 801b516:	9342      	str	r3, [sp, #264]	; 0x108
 801b518:	e076      	b.n	801b608 <__ssvfiscanf_r+0x1e4>
 801b51a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801b51c:	fb02 1103 	mla	r1, r2, r3, r1
 801b520:	3930      	subs	r1, #48	; 0x30
 801b522:	9143      	str	r1, [sp, #268]	; 0x10c
 801b524:	4655      	mov	r5, sl
 801b526:	e7d4      	b.n	801b4d2 <__ssvfiscanf_r+0xae>
 801b528:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801b52c:	2a20      	cmp	r2, #32
 801b52e:	d8ef      	bhi.n	801b510 <__ssvfiscanf_r+0xec>
 801b530:	a101      	add	r1, pc, #4	; (adr r1, 801b538 <__ssvfiscanf_r+0x114>)
 801b532:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801b536:	bf00      	nop
 801b538:	0801b5eb 	.word	0x0801b5eb
 801b53c:	0801b511 	.word	0x0801b511
 801b540:	0801b511 	.word	0x0801b511
 801b544:	0801b649 	.word	0x0801b649
 801b548:	0801b511 	.word	0x0801b511
 801b54c:	0801b511 	.word	0x0801b511
 801b550:	0801b511 	.word	0x0801b511
 801b554:	0801b511 	.word	0x0801b511
 801b558:	0801b511 	.word	0x0801b511
 801b55c:	0801b511 	.word	0x0801b511
 801b560:	0801b511 	.word	0x0801b511
 801b564:	0801b65f 	.word	0x0801b65f
 801b568:	0801b645 	.word	0x0801b645
 801b56c:	0801b5c3 	.word	0x0801b5c3
 801b570:	0801b5c3 	.word	0x0801b5c3
 801b574:	0801b5c3 	.word	0x0801b5c3
 801b578:	0801b511 	.word	0x0801b511
 801b57c:	0801b601 	.word	0x0801b601
 801b580:	0801b511 	.word	0x0801b511
 801b584:	0801b511 	.word	0x0801b511
 801b588:	0801b511 	.word	0x0801b511
 801b58c:	0801b511 	.word	0x0801b511
 801b590:	0801b66f 	.word	0x0801b66f
 801b594:	0801b63d 	.word	0x0801b63d
 801b598:	0801b5e3 	.word	0x0801b5e3
 801b59c:	0801b511 	.word	0x0801b511
 801b5a0:	0801b511 	.word	0x0801b511
 801b5a4:	0801b66b 	.word	0x0801b66b
 801b5a8:	0801b511 	.word	0x0801b511
 801b5ac:	0801b645 	.word	0x0801b645
 801b5b0:	0801b511 	.word	0x0801b511
 801b5b4:	0801b511 	.word	0x0801b511
 801b5b8:	0801b5eb 	.word	0x0801b5eb
 801b5bc:	3b45      	subs	r3, #69	; 0x45
 801b5be:	2b02      	cmp	r3, #2
 801b5c0:	d8a6      	bhi.n	801b510 <__ssvfiscanf_r+0xec>
 801b5c2:	2305      	movs	r3, #5
 801b5c4:	e01f      	b.n	801b606 <__ssvfiscanf_r+0x1e2>
 801b5c6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801b5c8:	4621      	mov	r1, r4
 801b5ca:	4630      	mov	r0, r6
 801b5cc:	4798      	blx	r3
 801b5ce:	2800      	cmp	r0, #0
 801b5d0:	f43f af68 	beq.w	801b4a4 <__ssvfiscanf_r+0x80>
 801b5d4:	9844      	ldr	r0, [sp, #272]	; 0x110
 801b5d6:	2800      	cmp	r0, #0
 801b5d8:	f040 808d 	bne.w	801b6f6 <__ssvfiscanf_r+0x2d2>
 801b5dc:	f04f 30ff 	mov.w	r0, #4294967295
 801b5e0:	e08f      	b.n	801b702 <__ssvfiscanf_r+0x2de>
 801b5e2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801b5e4:	f042 0220 	orr.w	r2, r2, #32
 801b5e8:	9241      	str	r2, [sp, #260]	; 0x104
 801b5ea:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801b5ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801b5f0:	9241      	str	r2, [sp, #260]	; 0x104
 801b5f2:	2210      	movs	r2, #16
 801b5f4:	2b6f      	cmp	r3, #111	; 0x6f
 801b5f6:	9242      	str	r2, [sp, #264]	; 0x108
 801b5f8:	bf34      	ite	cc
 801b5fa:	2303      	movcc	r3, #3
 801b5fc:	2304      	movcs	r3, #4
 801b5fe:	e002      	b.n	801b606 <__ssvfiscanf_r+0x1e2>
 801b600:	2300      	movs	r3, #0
 801b602:	9342      	str	r3, [sp, #264]	; 0x108
 801b604:	2303      	movs	r3, #3
 801b606:	9347      	str	r3, [sp, #284]	; 0x11c
 801b608:	6863      	ldr	r3, [r4, #4]
 801b60a:	2b00      	cmp	r3, #0
 801b60c:	dd3d      	ble.n	801b68a <__ssvfiscanf_r+0x266>
 801b60e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801b610:	0659      	lsls	r1, r3, #25
 801b612:	d404      	bmi.n	801b61e <__ssvfiscanf_r+0x1fa>
 801b614:	6823      	ldr	r3, [r4, #0]
 801b616:	781a      	ldrb	r2, [r3, #0]
 801b618:	5cba      	ldrb	r2, [r7, r2]
 801b61a:	0712      	lsls	r2, r2, #28
 801b61c:	d43c      	bmi.n	801b698 <__ssvfiscanf_r+0x274>
 801b61e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801b620:	2b02      	cmp	r3, #2
 801b622:	dc4b      	bgt.n	801b6bc <__ssvfiscanf_r+0x298>
 801b624:	466b      	mov	r3, sp
 801b626:	4622      	mov	r2, r4
 801b628:	a941      	add	r1, sp, #260	; 0x104
 801b62a:	4630      	mov	r0, r6
 801b62c:	f000 fa02 	bl	801ba34 <_scanf_chars>
 801b630:	2801      	cmp	r0, #1
 801b632:	d06a      	beq.n	801b70a <__ssvfiscanf_r+0x2e6>
 801b634:	2802      	cmp	r0, #2
 801b636:	f47f af1c 	bne.w	801b472 <__ssvfiscanf_r+0x4e>
 801b63a:	e7cb      	b.n	801b5d4 <__ssvfiscanf_r+0x1b0>
 801b63c:	2308      	movs	r3, #8
 801b63e:	9342      	str	r3, [sp, #264]	; 0x108
 801b640:	2304      	movs	r3, #4
 801b642:	e7e0      	b.n	801b606 <__ssvfiscanf_r+0x1e2>
 801b644:	220a      	movs	r2, #10
 801b646:	e7d5      	b.n	801b5f4 <__ssvfiscanf_r+0x1d0>
 801b648:	4629      	mov	r1, r5
 801b64a:	4640      	mov	r0, r8
 801b64c:	f000 fb40 	bl	801bcd0 <__sccl>
 801b650:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801b652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b656:	9341      	str	r3, [sp, #260]	; 0x104
 801b658:	4605      	mov	r5, r0
 801b65a:	2301      	movs	r3, #1
 801b65c:	e7d3      	b.n	801b606 <__ssvfiscanf_r+0x1e2>
 801b65e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801b660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b664:	9341      	str	r3, [sp, #260]	; 0x104
 801b666:	2300      	movs	r3, #0
 801b668:	e7cd      	b.n	801b606 <__ssvfiscanf_r+0x1e2>
 801b66a:	2302      	movs	r3, #2
 801b66c:	e7cb      	b.n	801b606 <__ssvfiscanf_r+0x1e2>
 801b66e:	9841      	ldr	r0, [sp, #260]	; 0x104
 801b670:	06c3      	lsls	r3, r0, #27
 801b672:	f53f aefe 	bmi.w	801b472 <__ssvfiscanf_r+0x4e>
 801b676:	9b00      	ldr	r3, [sp, #0]
 801b678:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801b67a:	1d19      	adds	r1, r3, #4
 801b67c:	9100      	str	r1, [sp, #0]
 801b67e:	681b      	ldr	r3, [r3, #0]
 801b680:	07c0      	lsls	r0, r0, #31
 801b682:	bf4c      	ite	mi
 801b684:	801a      	strhmi	r2, [r3, #0]
 801b686:	601a      	strpl	r2, [r3, #0]
 801b688:	e6f3      	b.n	801b472 <__ssvfiscanf_r+0x4e>
 801b68a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801b68c:	4621      	mov	r1, r4
 801b68e:	4630      	mov	r0, r6
 801b690:	4798      	blx	r3
 801b692:	2800      	cmp	r0, #0
 801b694:	d0bb      	beq.n	801b60e <__ssvfiscanf_r+0x1ea>
 801b696:	e79d      	b.n	801b5d4 <__ssvfiscanf_r+0x1b0>
 801b698:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801b69a:	3201      	adds	r2, #1
 801b69c:	9245      	str	r2, [sp, #276]	; 0x114
 801b69e:	6862      	ldr	r2, [r4, #4]
 801b6a0:	3a01      	subs	r2, #1
 801b6a2:	2a00      	cmp	r2, #0
 801b6a4:	6062      	str	r2, [r4, #4]
 801b6a6:	dd02      	ble.n	801b6ae <__ssvfiscanf_r+0x28a>
 801b6a8:	3301      	adds	r3, #1
 801b6aa:	6023      	str	r3, [r4, #0]
 801b6ac:	e7b2      	b.n	801b614 <__ssvfiscanf_r+0x1f0>
 801b6ae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801b6b0:	4621      	mov	r1, r4
 801b6b2:	4630      	mov	r0, r6
 801b6b4:	4798      	blx	r3
 801b6b6:	2800      	cmp	r0, #0
 801b6b8:	d0ac      	beq.n	801b614 <__ssvfiscanf_r+0x1f0>
 801b6ba:	e78b      	b.n	801b5d4 <__ssvfiscanf_r+0x1b0>
 801b6bc:	2b04      	cmp	r3, #4
 801b6be:	dc0f      	bgt.n	801b6e0 <__ssvfiscanf_r+0x2bc>
 801b6c0:	466b      	mov	r3, sp
 801b6c2:	4622      	mov	r2, r4
 801b6c4:	a941      	add	r1, sp, #260	; 0x104
 801b6c6:	4630      	mov	r0, r6
 801b6c8:	f000 fa0e 	bl	801bae8 <_scanf_i>
 801b6cc:	e7b0      	b.n	801b630 <__ssvfiscanf_r+0x20c>
 801b6ce:	bf00      	nop
 801b6d0:	0801b371 	.word	0x0801b371
 801b6d4:	0801b3eb 	.word	0x0801b3eb
 801b6d8:	0801c86f 	.word	0x0801c86f
 801b6dc:	0801c826 	.word	0x0801c826
 801b6e0:	4b0b      	ldr	r3, [pc, #44]	; (801b710 <__ssvfiscanf_r+0x2ec>)
 801b6e2:	2b00      	cmp	r3, #0
 801b6e4:	f43f aec5 	beq.w	801b472 <__ssvfiscanf_r+0x4e>
 801b6e8:	466b      	mov	r3, sp
 801b6ea:	4622      	mov	r2, r4
 801b6ec:	a941      	add	r1, sp, #260	; 0x104
 801b6ee:	4630      	mov	r0, r6
 801b6f0:	f3af 8000 	nop.w
 801b6f4:	e79c      	b.n	801b630 <__ssvfiscanf_r+0x20c>
 801b6f6:	89a3      	ldrh	r3, [r4, #12]
 801b6f8:	f013 0f40 	tst.w	r3, #64	; 0x40
 801b6fc:	bf18      	it	ne
 801b6fe:	f04f 30ff 	movne.w	r0, #4294967295
 801b702:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801b706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b70a:	9844      	ldr	r0, [sp, #272]	; 0x110
 801b70c:	e7f9      	b.n	801b702 <__ssvfiscanf_r+0x2de>
 801b70e:	bf00      	nop
 801b710:	00000000 	.word	0x00000000

0801b714 <_printf_common>:
 801b714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b718:	4616      	mov	r6, r2
 801b71a:	4699      	mov	r9, r3
 801b71c:	688a      	ldr	r2, [r1, #8]
 801b71e:	690b      	ldr	r3, [r1, #16]
 801b720:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b724:	4293      	cmp	r3, r2
 801b726:	bfb8      	it	lt
 801b728:	4613      	movlt	r3, r2
 801b72a:	6033      	str	r3, [r6, #0]
 801b72c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b730:	4607      	mov	r7, r0
 801b732:	460c      	mov	r4, r1
 801b734:	b10a      	cbz	r2, 801b73a <_printf_common+0x26>
 801b736:	3301      	adds	r3, #1
 801b738:	6033      	str	r3, [r6, #0]
 801b73a:	6823      	ldr	r3, [r4, #0]
 801b73c:	0699      	lsls	r1, r3, #26
 801b73e:	bf42      	ittt	mi
 801b740:	6833      	ldrmi	r3, [r6, #0]
 801b742:	3302      	addmi	r3, #2
 801b744:	6033      	strmi	r3, [r6, #0]
 801b746:	6825      	ldr	r5, [r4, #0]
 801b748:	f015 0506 	ands.w	r5, r5, #6
 801b74c:	d106      	bne.n	801b75c <_printf_common+0x48>
 801b74e:	f104 0a19 	add.w	sl, r4, #25
 801b752:	68e3      	ldr	r3, [r4, #12]
 801b754:	6832      	ldr	r2, [r6, #0]
 801b756:	1a9b      	subs	r3, r3, r2
 801b758:	42ab      	cmp	r3, r5
 801b75a:	dc26      	bgt.n	801b7aa <_printf_common+0x96>
 801b75c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b760:	1e13      	subs	r3, r2, #0
 801b762:	6822      	ldr	r2, [r4, #0]
 801b764:	bf18      	it	ne
 801b766:	2301      	movne	r3, #1
 801b768:	0692      	lsls	r2, r2, #26
 801b76a:	d42b      	bmi.n	801b7c4 <_printf_common+0xb0>
 801b76c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b770:	4649      	mov	r1, r9
 801b772:	4638      	mov	r0, r7
 801b774:	47c0      	blx	r8
 801b776:	3001      	adds	r0, #1
 801b778:	d01e      	beq.n	801b7b8 <_printf_common+0xa4>
 801b77a:	6823      	ldr	r3, [r4, #0]
 801b77c:	6922      	ldr	r2, [r4, #16]
 801b77e:	f003 0306 	and.w	r3, r3, #6
 801b782:	2b04      	cmp	r3, #4
 801b784:	bf02      	ittt	eq
 801b786:	68e5      	ldreq	r5, [r4, #12]
 801b788:	6833      	ldreq	r3, [r6, #0]
 801b78a:	1aed      	subeq	r5, r5, r3
 801b78c:	68a3      	ldr	r3, [r4, #8]
 801b78e:	bf0c      	ite	eq
 801b790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b794:	2500      	movne	r5, #0
 801b796:	4293      	cmp	r3, r2
 801b798:	bfc4      	itt	gt
 801b79a:	1a9b      	subgt	r3, r3, r2
 801b79c:	18ed      	addgt	r5, r5, r3
 801b79e:	2600      	movs	r6, #0
 801b7a0:	341a      	adds	r4, #26
 801b7a2:	42b5      	cmp	r5, r6
 801b7a4:	d11a      	bne.n	801b7dc <_printf_common+0xc8>
 801b7a6:	2000      	movs	r0, #0
 801b7a8:	e008      	b.n	801b7bc <_printf_common+0xa8>
 801b7aa:	2301      	movs	r3, #1
 801b7ac:	4652      	mov	r2, sl
 801b7ae:	4649      	mov	r1, r9
 801b7b0:	4638      	mov	r0, r7
 801b7b2:	47c0      	blx	r8
 801b7b4:	3001      	adds	r0, #1
 801b7b6:	d103      	bne.n	801b7c0 <_printf_common+0xac>
 801b7b8:	f04f 30ff 	mov.w	r0, #4294967295
 801b7bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b7c0:	3501      	adds	r5, #1
 801b7c2:	e7c6      	b.n	801b752 <_printf_common+0x3e>
 801b7c4:	18e1      	adds	r1, r4, r3
 801b7c6:	1c5a      	adds	r2, r3, #1
 801b7c8:	2030      	movs	r0, #48	; 0x30
 801b7ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b7ce:	4422      	add	r2, r4
 801b7d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b7d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b7d8:	3302      	adds	r3, #2
 801b7da:	e7c7      	b.n	801b76c <_printf_common+0x58>
 801b7dc:	2301      	movs	r3, #1
 801b7de:	4622      	mov	r2, r4
 801b7e0:	4649      	mov	r1, r9
 801b7e2:	4638      	mov	r0, r7
 801b7e4:	47c0      	blx	r8
 801b7e6:	3001      	adds	r0, #1
 801b7e8:	d0e6      	beq.n	801b7b8 <_printf_common+0xa4>
 801b7ea:	3601      	adds	r6, #1
 801b7ec:	e7d9      	b.n	801b7a2 <_printf_common+0x8e>
	...

0801b7f0 <_printf_i>:
 801b7f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b7f4:	7e0f      	ldrb	r7, [r1, #24]
 801b7f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b7f8:	2f78      	cmp	r7, #120	; 0x78
 801b7fa:	4691      	mov	r9, r2
 801b7fc:	4680      	mov	r8, r0
 801b7fe:	460c      	mov	r4, r1
 801b800:	469a      	mov	sl, r3
 801b802:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b806:	d807      	bhi.n	801b818 <_printf_i+0x28>
 801b808:	2f62      	cmp	r7, #98	; 0x62
 801b80a:	d80a      	bhi.n	801b822 <_printf_i+0x32>
 801b80c:	2f00      	cmp	r7, #0
 801b80e:	f000 80d4 	beq.w	801b9ba <_printf_i+0x1ca>
 801b812:	2f58      	cmp	r7, #88	; 0x58
 801b814:	f000 80c0 	beq.w	801b998 <_printf_i+0x1a8>
 801b818:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b81c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b820:	e03a      	b.n	801b898 <_printf_i+0xa8>
 801b822:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b826:	2b15      	cmp	r3, #21
 801b828:	d8f6      	bhi.n	801b818 <_printf_i+0x28>
 801b82a:	a101      	add	r1, pc, #4	; (adr r1, 801b830 <_printf_i+0x40>)
 801b82c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b830:	0801b889 	.word	0x0801b889
 801b834:	0801b89d 	.word	0x0801b89d
 801b838:	0801b819 	.word	0x0801b819
 801b83c:	0801b819 	.word	0x0801b819
 801b840:	0801b819 	.word	0x0801b819
 801b844:	0801b819 	.word	0x0801b819
 801b848:	0801b89d 	.word	0x0801b89d
 801b84c:	0801b819 	.word	0x0801b819
 801b850:	0801b819 	.word	0x0801b819
 801b854:	0801b819 	.word	0x0801b819
 801b858:	0801b819 	.word	0x0801b819
 801b85c:	0801b9a1 	.word	0x0801b9a1
 801b860:	0801b8c9 	.word	0x0801b8c9
 801b864:	0801b95b 	.word	0x0801b95b
 801b868:	0801b819 	.word	0x0801b819
 801b86c:	0801b819 	.word	0x0801b819
 801b870:	0801b9c3 	.word	0x0801b9c3
 801b874:	0801b819 	.word	0x0801b819
 801b878:	0801b8c9 	.word	0x0801b8c9
 801b87c:	0801b819 	.word	0x0801b819
 801b880:	0801b819 	.word	0x0801b819
 801b884:	0801b963 	.word	0x0801b963
 801b888:	682b      	ldr	r3, [r5, #0]
 801b88a:	1d1a      	adds	r2, r3, #4
 801b88c:	681b      	ldr	r3, [r3, #0]
 801b88e:	602a      	str	r2, [r5, #0]
 801b890:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b894:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b898:	2301      	movs	r3, #1
 801b89a:	e09f      	b.n	801b9dc <_printf_i+0x1ec>
 801b89c:	6820      	ldr	r0, [r4, #0]
 801b89e:	682b      	ldr	r3, [r5, #0]
 801b8a0:	0607      	lsls	r7, r0, #24
 801b8a2:	f103 0104 	add.w	r1, r3, #4
 801b8a6:	6029      	str	r1, [r5, #0]
 801b8a8:	d501      	bpl.n	801b8ae <_printf_i+0xbe>
 801b8aa:	681e      	ldr	r6, [r3, #0]
 801b8ac:	e003      	b.n	801b8b6 <_printf_i+0xc6>
 801b8ae:	0646      	lsls	r6, r0, #25
 801b8b0:	d5fb      	bpl.n	801b8aa <_printf_i+0xba>
 801b8b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b8b6:	2e00      	cmp	r6, #0
 801b8b8:	da03      	bge.n	801b8c2 <_printf_i+0xd2>
 801b8ba:	232d      	movs	r3, #45	; 0x2d
 801b8bc:	4276      	negs	r6, r6
 801b8be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b8c2:	485a      	ldr	r0, [pc, #360]	; (801ba2c <_printf_i+0x23c>)
 801b8c4:	230a      	movs	r3, #10
 801b8c6:	e012      	b.n	801b8ee <_printf_i+0xfe>
 801b8c8:	682b      	ldr	r3, [r5, #0]
 801b8ca:	6820      	ldr	r0, [r4, #0]
 801b8cc:	1d19      	adds	r1, r3, #4
 801b8ce:	6029      	str	r1, [r5, #0]
 801b8d0:	0605      	lsls	r5, r0, #24
 801b8d2:	d501      	bpl.n	801b8d8 <_printf_i+0xe8>
 801b8d4:	681e      	ldr	r6, [r3, #0]
 801b8d6:	e002      	b.n	801b8de <_printf_i+0xee>
 801b8d8:	0641      	lsls	r1, r0, #25
 801b8da:	d5fb      	bpl.n	801b8d4 <_printf_i+0xe4>
 801b8dc:	881e      	ldrh	r6, [r3, #0]
 801b8de:	4853      	ldr	r0, [pc, #332]	; (801ba2c <_printf_i+0x23c>)
 801b8e0:	2f6f      	cmp	r7, #111	; 0x6f
 801b8e2:	bf0c      	ite	eq
 801b8e4:	2308      	moveq	r3, #8
 801b8e6:	230a      	movne	r3, #10
 801b8e8:	2100      	movs	r1, #0
 801b8ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b8ee:	6865      	ldr	r5, [r4, #4]
 801b8f0:	60a5      	str	r5, [r4, #8]
 801b8f2:	2d00      	cmp	r5, #0
 801b8f4:	bfa2      	ittt	ge
 801b8f6:	6821      	ldrge	r1, [r4, #0]
 801b8f8:	f021 0104 	bicge.w	r1, r1, #4
 801b8fc:	6021      	strge	r1, [r4, #0]
 801b8fe:	b90e      	cbnz	r6, 801b904 <_printf_i+0x114>
 801b900:	2d00      	cmp	r5, #0
 801b902:	d04b      	beq.n	801b99c <_printf_i+0x1ac>
 801b904:	4615      	mov	r5, r2
 801b906:	fbb6 f1f3 	udiv	r1, r6, r3
 801b90a:	fb03 6711 	mls	r7, r3, r1, r6
 801b90e:	5dc7      	ldrb	r7, [r0, r7]
 801b910:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b914:	4637      	mov	r7, r6
 801b916:	42bb      	cmp	r3, r7
 801b918:	460e      	mov	r6, r1
 801b91a:	d9f4      	bls.n	801b906 <_printf_i+0x116>
 801b91c:	2b08      	cmp	r3, #8
 801b91e:	d10b      	bne.n	801b938 <_printf_i+0x148>
 801b920:	6823      	ldr	r3, [r4, #0]
 801b922:	07de      	lsls	r6, r3, #31
 801b924:	d508      	bpl.n	801b938 <_printf_i+0x148>
 801b926:	6923      	ldr	r3, [r4, #16]
 801b928:	6861      	ldr	r1, [r4, #4]
 801b92a:	4299      	cmp	r1, r3
 801b92c:	bfde      	ittt	le
 801b92e:	2330      	movle	r3, #48	; 0x30
 801b930:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b934:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b938:	1b52      	subs	r2, r2, r5
 801b93a:	6122      	str	r2, [r4, #16]
 801b93c:	f8cd a000 	str.w	sl, [sp]
 801b940:	464b      	mov	r3, r9
 801b942:	aa03      	add	r2, sp, #12
 801b944:	4621      	mov	r1, r4
 801b946:	4640      	mov	r0, r8
 801b948:	f7ff fee4 	bl	801b714 <_printf_common>
 801b94c:	3001      	adds	r0, #1
 801b94e:	d14a      	bne.n	801b9e6 <_printf_i+0x1f6>
 801b950:	f04f 30ff 	mov.w	r0, #4294967295
 801b954:	b004      	add	sp, #16
 801b956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b95a:	6823      	ldr	r3, [r4, #0]
 801b95c:	f043 0320 	orr.w	r3, r3, #32
 801b960:	6023      	str	r3, [r4, #0]
 801b962:	4833      	ldr	r0, [pc, #204]	; (801ba30 <_printf_i+0x240>)
 801b964:	2778      	movs	r7, #120	; 0x78
 801b966:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b96a:	6823      	ldr	r3, [r4, #0]
 801b96c:	6829      	ldr	r1, [r5, #0]
 801b96e:	061f      	lsls	r7, r3, #24
 801b970:	f851 6b04 	ldr.w	r6, [r1], #4
 801b974:	d402      	bmi.n	801b97c <_printf_i+0x18c>
 801b976:	065f      	lsls	r7, r3, #25
 801b978:	bf48      	it	mi
 801b97a:	b2b6      	uxthmi	r6, r6
 801b97c:	07df      	lsls	r7, r3, #31
 801b97e:	bf48      	it	mi
 801b980:	f043 0320 	orrmi.w	r3, r3, #32
 801b984:	6029      	str	r1, [r5, #0]
 801b986:	bf48      	it	mi
 801b988:	6023      	strmi	r3, [r4, #0]
 801b98a:	b91e      	cbnz	r6, 801b994 <_printf_i+0x1a4>
 801b98c:	6823      	ldr	r3, [r4, #0]
 801b98e:	f023 0320 	bic.w	r3, r3, #32
 801b992:	6023      	str	r3, [r4, #0]
 801b994:	2310      	movs	r3, #16
 801b996:	e7a7      	b.n	801b8e8 <_printf_i+0xf8>
 801b998:	4824      	ldr	r0, [pc, #144]	; (801ba2c <_printf_i+0x23c>)
 801b99a:	e7e4      	b.n	801b966 <_printf_i+0x176>
 801b99c:	4615      	mov	r5, r2
 801b99e:	e7bd      	b.n	801b91c <_printf_i+0x12c>
 801b9a0:	682b      	ldr	r3, [r5, #0]
 801b9a2:	6826      	ldr	r6, [r4, #0]
 801b9a4:	6961      	ldr	r1, [r4, #20]
 801b9a6:	1d18      	adds	r0, r3, #4
 801b9a8:	6028      	str	r0, [r5, #0]
 801b9aa:	0635      	lsls	r5, r6, #24
 801b9ac:	681b      	ldr	r3, [r3, #0]
 801b9ae:	d501      	bpl.n	801b9b4 <_printf_i+0x1c4>
 801b9b0:	6019      	str	r1, [r3, #0]
 801b9b2:	e002      	b.n	801b9ba <_printf_i+0x1ca>
 801b9b4:	0670      	lsls	r0, r6, #25
 801b9b6:	d5fb      	bpl.n	801b9b0 <_printf_i+0x1c0>
 801b9b8:	8019      	strh	r1, [r3, #0]
 801b9ba:	2300      	movs	r3, #0
 801b9bc:	6123      	str	r3, [r4, #16]
 801b9be:	4615      	mov	r5, r2
 801b9c0:	e7bc      	b.n	801b93c <_printf_i+0x14c>
 801b9c2:	682b      	ldr	r3, [r5, #0]
 801b9c4:	1d1a      	adds	r2, r3, #4
 801b9c6:	602a      	str	r2, [r5, #0]
 801b9c8:	681d      	ldr	r5, [r3, #0]
 801b9ca:	6862      	ldr	r2, [r4, #4]
 801b9cc:	2100      	movs	r1, #0
 801b9ce:	4628      	mov	r0, r5
 801b9d0:	f7e4 fcb6 	bl	8000340 <memchr>
 801b9d4:	b108      	cbz	r0, 801b9da <_printf_i+0x1ea>
 801b9d6:	1b40      	subs	r0, r0, r5
 801b9d8:	6060      	str	r0, [r4, #4]
 801b9da:	6863      	ldr	r3, [r4, #4]
 801b9dc:	6123      	str	r3, [r4, #16]
 801b9de:	2300      	movs	r3, #0
 801b9e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b9e4:	e7aa      	b.n	801b93c <_printf_i+0x14c>
 801b9e6:	6923      	ldr	r3, [r4, #16]
 801b9e8:	462a      	mov	r2, r5
 801b9ea:	4649      	mov	r1, r9
 801b9ec:	4640      	mov	r0, r8
 801b9ee:	47d0      	blx	sl
 801b9f0:	3001      	adds	r0, #1
 801b9f2:	d0ad      	beq.n	801b950 <_printf_i+0x160>
 801b9f4:	6823      	ldr	r3, [r4, #0]
 801b9f6:	079b      	lsls	r3, r3, #30
 801b9f8:	d413      	bmi.n	801ba22 <_printf_i+0x232>
 801b9fa:	68e0      	ldr	r0, [r4, #12]
 801b9fc:	9b03      	ldr	r3, [sp, #12]
 801b9fe:	4298      	cmp	r0, r3
 801ba00:	bfb8      	it	lt
 801ba02:	4618      	movlt	r0, r3
 801ba04:	e7a6      	b.n	801b954 <_printf_i+0x164>
 801ba06:	2301      	movs	r3, #1
 801ba08:	4632      	mov	r2, r6
 801ba0a:	4649      	mov	r1, r9
 801ba0c:	4640      	mov	r0, r8
 801ba0e:	47d0      	blx	sl
 801ba10:	3001      	adds	r0, #1
 801ba12:	d09d      	beq.n	801b950 <_printf_i+0x160>
 801ba14:	3501      	adds	r5, #1
 801ba16:	68e3      	ldr	r3, [r4, #12]
 801ba18:	9903      	ldr	r1, [sp, #12]
 801ba1a:	1a5b      	subs	r3, r3, r1
 801ba1c:	42ab      	cmp	r3, r5
 801ba1e:	dcf2      	bgt.n	801ba06 <_printf_i+0x216>
 801ba20:	e7eb      	b.n	801b9fa <_printf_i+0x20a>
 801ba22:	2500      	movs	r5, #0
 801ba24:	f104 0619 	add.w	r6, r4, #25
 801ba28:	e7f5      	b.n	801ba16 <_printf_i+0x226>
 801ba2a:	bf00      	nop
 801ba2c:	0801c831 	.word	0x0801c831
 801ba30:	0801c842 	.word	0x0801c842

0801ba34 <_scanf_chars>:
 801ba34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ba38:	4615      	mov	r5, r2
 801ba3a:	688a      	ldr	r2, [r1, #8]
 801ba3c:	4680      	mov	r8, r0
 801ba3e:	460c      	mov	r4, r1
 801ba40:	b932      	cbnz	r2, 801ba50 <_scanf_chars+0x1c>
 801ba42:	698a      	ldr	r2, [r1, #24]
 801ba44:	2a00      	cmp	r2, #0
 801ba46:	bf0c      	ite	eq
 801ba48:	2201      	moveq	r2, #1
 801ba4a:	f04f 32ff 	movne.w	r2, #4294967295
 801ba4e:	608a      	str	r2, [r1, #8]
 801ba50:	6822      	ldr	r2, [r4, #0]
 801ba52:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801bae4 <_scanf_chars+0xb0>
 801ba56:	06d1      	lsls	r1, r2, #27
 801ba58:	bf5f      	itttt	pl
 801ba5a:	681a      	ldrpl	r2, [r3, #0]
 801ba5c:	1d11      	addpl	r1, r2, #4
 801ba5e:	6019      	strpl	r1, [r3, #0]
 801ba60:	6816      	ldrpl	r6, [r2, #0]
 801ba62:	2700      	movs	r7, #0
 801ba64:	69a0      	ldr	r0, [r4, #24]
 801ba66:	b188      	cbz	r0, 801ba8c <_scanf_chars+0x58>
 801ba68:	2801      	cmp	r0, #1
 801ba6a:	d107      	bne.n	801ba7c <_scanf_chars+0x48>
 801ba6c:	682a      	ldr	r2, [r5, #0]
 801ba6e:	7811      	ldrb	r1, [r2, #0]
 801ba70:	6962      	ldr	r2, [r4, #20]
 801ba72:	5c52      	ldrb	r2, [r2, r1]
 801ba74:	b952      	cbnz	r2, 801ba8c <_scanf_chars+0x58>
 801ba76:	2f00      	cmp	r7, #0
 801ba78:	d031      	beq.n	801bade <_scanf_chars+0xaa>
 801ba7a:	e022      	b.n	801bac2 <_scanf_chars+0x8e>
 801ba7c:	2802      	cmp	r0, #2
 801ba7e:	d120      	bne.n	801bac2 <_scanf_chars+0x8e>
 801ba80:	682b      	ldr	r3, [r5, #0]
 801ba82:	781b      	ldrb	r3, [r3, #0]
 801ba84:	f819 3003 	ldrb.w	r3, [r9, r3]
 801ba88:	071b      	lsls	r3, r3, #28
 801ba8a:	d41a      	bmi.n	801bac2 <_scanf_chars+0x8e>
 801ba8c:	6823      	ldr	r3, [r4, #0]
 801ba8e:	06da      	lsls	r2, r3, #27
 801ba90:	bf5e      	ittt	pl
 801ba92:	682b      	ldrpl	r3, [r5, #0]
 801ba94:	781b      	ldrbpl	r3, [r3, #0]
 801ba96:	f806 3b01 	strbpl.w	r3, [r6], #1
 801ba9a:	682a      	ldr	r2, [r5, #0]
 801ba9c:	686b      	ldr	r3, [r5, #4]
 801ba9e:	3201      	adds	r2, #1
 801baa0:	602a      	str	r2, [r5, #0]
 801baa2:	68a2      	ldr	r2, [r4, #8]
 801baa4:	3b01      	subs	r3, #1
 801baa6:	3a01      	subs	r2, #1
 801baa8:	606b      	str	r3, [r5, #4]
 801baaa:	3701      	adds	r7, #1
 801baac:	60a2      	str	r2, [r4, #8]
 801baae:	b142      	cbz	r2, 801bac2 <_scanf_chars+0x8e>
 801bab0:	2b00      	cmp	r3, #0
 801bab2:	dcd7      	bgt.n	801ba64 <_scanf_chars+0x30>
 801bab4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801bab8:	4629      	mov	r1, r5
 801baba:	4640      	mov	r0, r8
 801babc:	4798      	blx	r3
 801babe:	2800      	cmp	r0, #0
 801bac0:	d0d0      	beq.n	801ba64 <_scanf_chars+0x30>
 801bac2:	6823      	ldr	r3, [r4, #0]
 801bac4:	f013 0310 	ands.w	r3, r3, #16
 801bac8:	d105      	bne.n	801bad6 <_scanf_chars+0xa2>
 801baca:	68e2      	ldr	r2, [r4, #12]
 801bacc:	3201      	adds	r2, #1
 801bace:	60e2      	str	r2, [r4, #12]
 801bad0:	69a2      	ldr	r2, [r4, #24]
 801bad2:	b102      	cbz	r2, 801bad6 <_scanf_chars+0xa2>
 801bad4:	7033      	strb	r3, [r6, #0]
 801bad6:	6923      	ldr	r3, [r4, #16]
 801bad8:	443b      	add	r3, r7
 801bada:	6123      	str	r3, [r4, #16]
 801badc:	2000      	movs	r0, #0
 801bade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bae2:	bf00      	nop
 801bae4:	0801c86f 	.word	0x0801c86f

0801bae8 <_scanf_i>:
 801bae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801baec:	4698      	mov	r8, r3
 801baee:	4b74      	ldr	r3, [pc, #464]	; (801bcc0 <_scanf_i+0x1d8>)
 801baf0:	460c      	mov	r4, r1
 801baf2:	4682      	mov	sl, r0
 801baf4:	4616      	mov	r6, r2
 801baf6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801bafa:	b087      	sub	sp, #28
 801bafc:	ab03      	add	r3, sp, #12
 801bafe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801bb02:	4b70      	ldr	r3, [pc, #448]	; (801bcc4 <_scanf_i+0x1dc>)
 801bb04:	69a1      	ldr	r1, [r4, #24]
 801bb06:	4a70      	ldr	r2, [pc, #448]	; (801bcc8 <_scanf_i+0x1e0>)
 801bb08:	2903      	cmp	r1, #3
 801bb0a:	bf18      	it	ne
 801bb0c:	461a      	movne	r2, r3
 801bb0e:	68a3      	ldr	r3, [r4, #8]
 801bb10:	9201      	str	r2, [sp, #4]
 801bb12:	1e5a      	subs	r2, r3, #1
 801bb14:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801bb18:	bf88      	it	hi
 801bb1a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801bb1e:	4627      	mov	r7, r4
 801bb20:	bf82      	ittt	hi
 801bb22:	eb03 0905 	addhi.w	r9, r3, r5
 801bb26:	f240 135d 	movwhi	r3, #349	; 0x15d
 801bb2a:	60a3      	strhi	r3, [r4, #8]
 801bb2c:	f857 3b1c 	ldr.w	r3, [r7], #28
 801bb30:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801bb34:	bf98      	it	ls
 801bb36:	f04f 0900 	movls.w	r9, #0
 801bb3a:	6023      	str	r3, [r4, #0]
 801bb3c:	463d      	mov	r5, r7
 801bb3e:	f04f 0b00 	mov.w	fp, #0
 801bb42:	6831      	ldr	r1, [r6, #0]
 801bb44:	ab03      	add	r3, sp, #12
 801bb46:	7809      	ldrb	r1, [r1, #0]
 801bb48:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801bb4c:	2202      	movs	r2, #2
 801bb4e:	f7e4 fbf7 	bl	8000340 <memchr>
 801bb52:	b328      	cbz	r0, 801bba0 <_scanf_i+0xb8>
 801bb54:	f1bb 0f01 	cmp.w	fp, #1
 801bb58:	d159      	bne.n	801bc0e <_scanf_i+0x126>
 801bb5a:	6862      	ldr	r2, [r4, #4]
 801bb5c:	b92a      	cbnz	r2, 801bb6a <_scanf_i+0x82>
 801bb5e:	6822      	ldr	r2, [r4, #0]
 801bb60:	2308      	movs	r3, #8
 801bb62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801bb66:	6063      	str	r3, [r4, #4]
 801bb68:	6022      	str	r2, [r4, #0]
 801bb6a:	6822      	ldr	r2, [r4, #0]
 801bb6c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801bb70:	6022      	str	r2, [r4, #0]
 801bb72:	68a2      	ldr	r2, [r4, #8]
 801bb74:	1e51      	subs	r1, r2, #1
 801bb76:	60a1      	str	r1, [r4, #8]
 801bb78:	b192      	cbz	r2, 801bba0 <_scanf_i+0xb8>
 801bb7a:	6832      	ldr	r2, [r6, #0]
 801bb7c:	1c51      	adds	r1, r2, #1
 801bb7e:	6031      	str	r1, [r6, #0]
 801bb80:	7812      	ldrb	r2, [r2, #0]
 801bb82:	f805 2b01 	strb.w	r2, [r5], #1
 801bb86:	6872      	ldr	r2, [r6, #4]
 801bb88:	3a01      	subs	r2, #1
 801bb8a:	2a00      	cmp	r2, #0
 801bb8c:	6072      	str	r2, [r6, #4]
 801bb8e:	dc07      	bgt.n	801bba0 <_scanf_i+0xb8>
 801bb90:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801bb94:	4631      	mov	r1, r6
 801bb96:	4650      	mov	r0, sl
 801bb98:	4790      	blx	r2
 801bb9a:	2800      	cmp	r0, #0
 801bb9c:	f040 8085 	bne.w	801bcaa <_scanf_i+0x1c2>
 801bba0:	f10b 0b01 	add.w	fp, fp, #1
 801bba4:	f1bb 0f03 	cmp.w	fp, #3
 801bba8:	d1cb      	bne.n	801bb42 <_scanf_i+0x5a>
 801bbaa:	6863      	ldr	r3, [r4, #4]
 801bbac:	b90b      	cbnz	r3, 801bbb2 <_scanf_i+0xca>
 801bbae:	230a      	movs	r3, #10
 801bbb0:	6063      	str	r3, [r4, #4]
 801bbb2:	6863      	ldr	r3, [r4, #4]
 801bbb4:	4945      	ldr	r1, [pc, #276]	; (801bccc <_scanf_i+0x1e4>)
 801bbb6:	6960      	ldr	r0, [r4, #20]
 801bbb8:	1ac9      	subs	r1, r1, r3
 801bbba:	f000 f889 	bl	801bcd0 <__sccl>
 801bbbe:	f04f 0b00 	mov.w	fp, #0
 801bbc2:	68a3      	ldr	r3, [r4, #8]
 801bbc4:	6822      	ldr	r2, [r4, #0]
 801bbc6:	2b00      	cmp	r3, #0
 801bbc8:	d03d      	beq.n	801bc46 <_scanf_i+0x15e>
 801bbca:	6831      	ldr	r1, [r6, #0]
 801bbcc:	6960      	ldr	r0, [r4, #20]
 801bbce:	f891 c000 	ldrb.w	ip, [r1]
 801bbd2:	f810 000c 	ldrb.w	r0, [r0, ip]
 801bbd6:	2800      	cmp	r0, #0
 801bbd8:	d035      	beq.n	801bc46 <_scanf_i+0x15e>
 801bbda:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801bbde:	d124      	bne.n	801bc2a <_scanf_i+0x142>
 801bbe0:	0510      	lsls	r0, r2, #20
 801bbe2:	d522      	bpl.n	801bc2a <_scanf_i+0x142>
 801bbe4:	f10b 0b01 	add.w	fp, fp, #1
 801bbe8:	f1b9 0f00 	cmp.w	r9, #0
 801bbec:	d003      	beq.n	801bbf6 <_scanf_i+0x10e>
 801bbee:	3301      	adds	r3, #1
 801bbf0:	f109 39ff 	add.w	r9, r9, #4294967295
 801bbf4:	60a3      	str	r3, [r4, #8]
 801bbf6:	6873      	ldr	r3, [r6, #4]
 801bbf8:	3b01      	subs	r3, #1
 801bbfa:	2b00      	cmp	r3, #0
 801bbfc:	6073      	str	r3, [r6, #4]
 801bbfe:	dd1b      	ble.n	801bc38 <_scanf_i+0x150>
 801bc00:	6833      	ldr	r3, [r6, #0]
 801bc02:	3301      	adds	r3, #1
 801bc04:	6033      	str	r3, [r6, #0]
 801bc06:	68a3      	ldr	r3, [r4, #8]
 801bc08:	3b01      	subs	r3, #1
 801bc0a:	60a3      	str	r3, [r4, #8]
 801bc0c:	e7d9      	b.n	801bbc2 <_scanf_i+0xda>
 801bc0e:	f1bb 0f02 	cmp.w	fp, #2
 801bc12:	d1ae      	bne.n	801bb72 <_scanf_i+0x8a>
 801bc14:	6822      	ldr	r2, [r4, #0]
 801bc16:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801bc1a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801bc1e:	d1bf      	bne.n	801bba0 <_scanf_i+0xb8>
 801bc20:	2310      	movs	r3, #16
 801bc22:	6063      	str	r3, [r4, #4]
 801bc24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801bc28:	e7a2      	b.n	801bb70 <_scanf_i+0x88>
 801bc2a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801bc2e:	6022      	str	r2, [r4, #0]
 801bc30:	780b      	ldrb	r3, [r1, #0]
 801bc32:	f805 3b01 	strb.w	r3, [r5], #1
 801bc36:	e7de      	b.n	801bbf6 <_scanf_i+0x10e>
 801bc38:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801bc3c:	4631      	mov	r1, r6
 801bc3e:	4650      	mov	r0, sl
 801bc40:	4798      	blx	r3
 801bc42:	2800      	cmp	r0, #0
 801bc44:	d0df      	beq.n	801bc06 <_scanf_i+0x11e>
 801bc46:	6823      	ldr	r3, [r4, #0]
 801bc48:	05d9      	lsls	r1, r3, #23
 801bc4a:	d50d      	bpl.n	801bc68 <_scanf_i+0x180>
 801bc4c:	42bd      	cmp	r5, r7
 801bc4e:	d909      	bls.n	801bc64 <_scanf_i+0x17c>
 801bc50:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801bc54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bc58:	4632      	mov	r2, r6
 801bc5a:	4650      	mov	r0, sl
 801bc5c:	4798      	blx	r3
 801bc5e:	f105 39ff 	add.w	r9, r5, #4294967295
 801bc62:	464d      	mov	r5, r9
 801bc64:	42bd      	cmp	r5, r7
 801bc66:	d028      	beq.n	801bcba <_scanf_i+0x1d2>
 801bc68:	6822      	ldr	r2, [r4, #0]
 801bc6a:	f012 0210 	ands.w	r2, r2, #16
 801bc6e:	d113      	bne.n	801bc98 <_scanf_i+0x1b0>
 801bc70:	702a      	strb	r2, [r5, #0]
 801bc72:	6863      	ldr	r3, [r4, #4]
 801bc74:	9e01      	ldr	r6, [sp, #4]
 801bc76:	4639      	mov	r1, r7
 801bc78:	4650      	mov	r0, sl
 801bc7a:	47b0      	blx	r6
 801bc7c:	f8d8 3000 	ldr.w	r3, [r8]
 801bc80:	6821      	ldr	r1, [r4, #0]
 801bc82:	1d1a      	adds	r2, r3, #4
 801bc84:	f8c8 2000 	str.w	r2, [r8]
 801bc88:	f011 0f20 	tst.w	r1, #32
 801bc8c:	681b      	ldr	r3, [r3, #0]
 801bc8e:	d00f      	beq.n	801bcb0 <_scanf_i+0x1c8>
 801bc90:	6018      	str	r0, [r3, #0]
 801bc92:	68e3      	ldr	r3, [r4, #12]
 801bc94:	3301      	adds	r3, #1
 801bc96:	60e3      	str	r3, [r4, #12]
 801bc98:	6923      	ldr	r3, [r4, #16]
 801bc9a:	1bed      	subs	r5, r5, r7
 801bc9c:	445d      	add	r5, fp
 801bc9e:	442b      	add	r3, r5
 801bca0:	6123      	str	r3, [r4, #16]
 801bca2:	2000      	movs	r0, #0
 801bca4:	b007      	add	sp, #28
 801bca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bcaa:	f04f 0b00 	mov.w	fp, #0
 801bcae:	e7ca      	b.n	801bc46 <_scanf_i+0x15e>
 801bcb0:	07ca      	lsls	r2, r1, #31
 801bcb2:	bf4c      	ite	mi
 801bcb4:	8018      	strhmi	r0, [r3, #0]
 801bcb6:	6018      	strpl	r0, [r3, #0]
 801bcb8:	e7eb      	b.n	801bc92 <_scanf_i+0x1aa>
 801bcba:	2001      	movs	r0, #1
 801bcbc:	e7f2      	b.n	801bca4 <_scanf_i+0x1bc>
 801bcbe:	bf00      	nop
 801bcc0:	0801c310 	.word	0x0801c310
 801bcc4:	0801c059 	.word	0x0801c059
 801bcc8:	0801bf71 	.word	0x0801bf71
 801bccc:	0801c863 	.word	0x0801c863

0801bcd0 <__sccl>:
 801bcd0:	b570      	push	{r4, r5, r6, lr}
 801bcd2:	780b      	ldrb	r3, [r1, #0]
 801bcd4:	4604      	mov	r4, r0
 801bcd6:	2b5e      	cmp	r3, #94	; 0x5e
 801bcd8:	bf0b      	itete	eq
 801bcda:	784b      	ldrbeq	r3, [r1, #1]
 801bcdc:	1c4a      	addne	r2, r1, #1
 801bcde:	1c8a      	addeq	r2, r1, #2
 801bce0:	2100      	movne	r1, #0
 801bce2:	bf08      	it	eq
 801bce4:	2101      	moveq	r1, #1
 801bce6:	3801      	subs	r0, #1
 801bce8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801bcec:	f800 1f01 	strb.w	r1, [r0, #1]!
 801bcf0:	42a8      	cmp	r0, r5
 801bcf2:	d1fb      	bne.n	801bcec <__sccl+0x1c>
 801bcf4:	b90b      	cbnz	r3, 801bcfa <__sccl+0x2a>
 801bcf6:	1e50      	subs	r0, r2, #1
 801bcf8:	bd70      	pop	{r4, r5, r6, pc}
 801bcfa:	f081 0101 	eor.w	r1, r1, #1
 801bcfe:	54e1      	strb	r1, [r4, r3]
 801bd00:	4610      	mov	r0, r2
 801bd02:	4602      	mov	r2, r0
 801bd04:	f812 5b01 	ldrb.w	r5, [r2], #1
 801bd08:	2d2d      	cmp	r5, #45	; 0x2d
 801bd0a:	d005      	beq.n	801bd18 <__sccl+0x48>
 801bd0c:	2d5d      	cmp	r5, #93	; 0x5d
 801bd0e:	d016      	beq.n	801bd3e <__sccl+0x6e>
 801bd10:	2d00      	cmp	r5, #0
 801bd12:	d0f1      	beq.n	801bcf8 <__sccl+0x28>
 801bd14:	462b      	mov	r3, r5
 801bd16:	e7f2      	b.n	801bcfe <__sccl+0x2e>
 801bd18:	7846      	ldrb	r6, [r0, #1]
 801bd1a:	2e5d      	cmp	r6, #93	; 0x5d
 801bd1c:	d0fa      	beq.n	801bd14 <__sccl+0x44>
 801bd1e:	42b3      	cmp	r3, r6
 801bd20:	dcf8      	bgt.n	801bd14 <__sccl+0x44>
 801bd22:	3002      	adds	r0, #2
 801bd24:	461a      	mov	r2, r3
 801bd26:	3201      	adds	r2, #1
 801bd28:	4296      	cmp	r6, r2
 801bd2a:	54a1      	strb	r1, [r4, r2]
 801bd2c:	dcfb      	bgt.n	801bd26 <__sccl+0x56>
 801bd2e:	1af2      	subs	r2, r6, r3
 801bd30:	3a01      	subs	r2, #1
 801bd32:	1c5d      	adds	r5, r3, #1
 801bd34:	42b3      	cmp	r3, r6
 801bd36:	bfa8      	it	ge
 801bd38:	2200      	movge	r2, #0
 801bd3a:	18ab      	adds	r3, r5, r2
 801bd3c:	e7e1      	b.n	801bd02 <__sccl+0x32>
 801bd3e:	4610      	mov	r0, r2
 801bd40:	e7da      	b.n	801bcf8 <__sccl+0x28>

0801bd42 <__submore>:
 801bd42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd46:	460c      	mov	r4, r1
 801bd48:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801bd4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bd4e:	4299      	cmp	r1, r3
 801bd50:	d11d      	bne.n	801bd8e <__submore+0x4c>
 801bd52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801bd56:	f7ff f927 	bl	801afa8 <_malloc_r>
 801bd5a:	b918      	cbnz	r0, 801bd64 <__submore+0x22>
 801bd5c:	f04f 30ff 	mov.w	r0, #4294967295
 801bd60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bd64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bd68:	63a3      	str	r3, [r4, #56]	; 0x38
 801bd6a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801bd6e:	6360      	str	r0, [r4, #52]	; 0x34
 801bd70:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801bd74:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801bd78:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801bd7c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801bd80:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801bd84:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801bd88:	6020      	str	r0, [r4, #0]
 801bd8a:	2000      	movs	r0, #0
 801bd8c:	e7e8      	b.n	801bd60 <__submore+0x1e>
 801bd8e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801bd90:	0077      	lsls	r7, r6, #1
 801bd92:	463a      	mov	r2, r7
 801bd94:	f000 f83a 	bl	801be0c <_realloc_r>
 801bd98:	4605      	mov	r5, r0
 801bd9a:	2800      	cmp	r0, #0
 801bd9c:	d0de      	beq.n	801bd5c <__submore+0x1a>
 801bd9e:	eb00 0806 	add.w	r8, r0, r6
 801bda2:	4601      	mov	r1, r0
 801bda4:	4632      	mov	r2, r6
 801bda6:	4640      	mov	r0, r8
 801bda8:	f7ff f884 	bl	801aeb4 <memcpy>
 801bdac:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801bdb0:	f8c4 8000 	str.w	r8, [r4]
 801bdb4:	e7e9      	b.n	801bd8a <__submore+0x48>

0801bdb6 <memmove>:
 801bdb6:	4288      	cmp	r0, r1
 801bdb8:	b510      	push	{r4, lr}
 801bdba:	eb01 0402 	add.w	r4, r1, r2
 801bdbe:	d902      	bls.n	801bdc6 <memmove+0x10>
 801bdc0:	4284      	cmp	r4, r0
 801bdc2:	4623      	mov	r3, r4
 801bdc4:	d807      	bhi.n	801bdd6 <memmove+0x20>
 801bdc6:	1e43      	subs	r3, r0, #1
 801bdc8:	42a1      	cmp	r1, r4
 801bdca:	d008      	beq.n	801bdde <memmove+0x28>
 801bdcc:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bdd0:	f803 2f01 	strb.w	r2, [r3, #1]!
 801bdd4:	e7f8      	b.n	801bdc8 <memmove+0x12>
 801bdd6:	4402      	add	r2, r0
 801bdd8:	4601      	mov	r1, r0
 801bdda:	428a      	cmp	r2, r1
 801bddc:	d100      	bne.n	801bde0 <memmove+0x2a>
 801bdde:	bd10      	pop	{r4, pc}
 801bde0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801bde4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801bde8:	e7f7      	b.n	801bdda <memmove+0x24>
	...

0801bdec <_sbrk_r>:
 801bdec:	b538      	push	{r3, r4, r5, lr}
 801bdee:	4d06      	ldr	r5, [pc, #24]	; (801be08 <_sbrk_r+0x1c>)
 801bdf0:	2300      	movs	r3, #0
 801bdf2:	4604      	mov	r4, r0
 801bdf4:	4608      	mov	r0, r1
 801bdf6:	602b      	str	r3, [r5, #0]
 801bdf8:	f7e7 fe16 	bl	8003a28 <_sbrk>
 801bdfc:	1c43      	adds	r3, r0, #1
 801bdfe:	d102      	bne.n	801be06 <_sbrk_r+0x1a>
 801be00:	682b      	ldr	r3, [r5, #0]
 801be02:	b103      	cbz	r3, 801be06 <_sbrk_r+0x1a>
 801be04:	6023      	str	r3, [r4, #0]
 801be06:	bd38      	pop	{r3, r4, r5, pc}
 801be08:	24005c70 	.word	0x24005c70

0801be0c <_realloc_r>:
 801be0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be10:	4680      	mov	r8, r0
 801be12:	4614      	mov	r4, r2
 801be14:	460e      	mov	r6, r1
 801be16:	b921      	cbnz	r1, 801be22 <_realloc_r+0x16>
 801be18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801be1c:	4611      	mov	r1, r2
 801be1e:	f7ff b8c3 	b.w	801afa8 <_malloc_r>
 801be22:	b92a      	cbnz	r2, 801be30 <_realloc_r+0x24>
 801be24:	f7ff f854 	bl	801aed0 <_free_r>
 801be28:	4625      	mov	r5, r4
 801be2a:	4628      	mov	r0, r5
 801be2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801be30:	f000 f914 	bl	801c05c <_malloc_usable_size_r>
 801be34:	4284      	cmp	r4, r0
 801be36:	4607      	mov	r7, r0
 801be38:	d802      	bhi.n	801be40 <_realloc_r+0x34>
 801be3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801be3e:	d812      	bhi.n	801be66 <_realloc_r+0x5a>
 801be40:	4621      	mov	r1, r4
 801be42:	4640      	mov	r0, r8
 801be44:	f7ff f8b0 	bl	801afa8 <_malloc_r>
 801be48:	4605      	mov	r5, r0
 801be4a:	2800      	cmp	r0, #0
 801be4c:	d0ed      	beq.n	801be2a <_realloc_r+0x1e>
 801be4e:	42bc      	cmp	r4, r7
 801be50:	4622      	mov	r2, r4
 801be52:	4631      	mov	r1, r6
 801be54:	bf28      	it	cs
 801be56:	463a      	movcs	r2, r7
 801be58:	f7ff f82c 	bl	801aeb4 <memcpy>
 801be5c:	4631      	mov	r1, r6
 801be5e:	4640      	mov	r0, r8
 801be60:	f7ff f836 	bl	801aed0 <_free_r>
 801be64:	e7e1      	b.n	801be2a <_realloc_r+0x1e>
 801be66:	4635      	mov	r5, r6
 801be68:	e7df      	b.n	801be2a <_realloc_r+0x1e>
	...

0801be6c <_strtol_l.constprop.0>:
 801be6c:	2b01      	cmp	r3, #1
 801be6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801be72:	d001      	beq.n	801be78 <_strtol_l.constprop.0+0xc>
 801be74:	2b24      	cmp	r3, #36	; 0x24
 801be76:	d906      	bls.n	801be86 <_strtol_l.constprop.0+0x1a>
 801be78:	f7fe ffe8 	bl	801ae4c <__errno>
 801be7c:	2316      	movs	r3, #22
 801be7e:	6003      	str	r3, [r0, #0]
 801be80:	2000      	movs	r0, #0
 801be82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801be86:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801bf6c <_strtol_l.constprop.0+0x100>
 801be8a:	460d      	mov	r5, r1
 801be8c:	462e      	mov	r6, r5
 801be8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801be92:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801be96:	f017 0708 	ands.w	r7, r7, #8
 801be9a:	d1f7      	bne.n	801be8c <_strtol_l.constprop.0+0x20>
 801be9c:	2c2d      	cmp	r4, #45	; 0x2d
 801be9e:	d132      	bne.n	801bf06 <_strtol_l.constprop.0+0x9a>
 801bea0:	782c      	ldrb	r4, [r5, #0]
 801bea2:	2701      	movs	r7, #1
 801bea4:	1cb5      	adds	r5, r6, #2
 801bea6:	2b00      	cmp	r3, #0
 801bea8:	d05b      	beq.n	801bf62 <_strtol_l.constprop.0+0xf6>
 801beaa:	2b10      	cmp	r3, #16
 801beac:	d109      	bne.n	801bec2 <_strtol_l.constprop.0+0x56>
 801beae:	2c30      	cmp	r4, #48	; 0x30
 801beb0:	d107      	bne.n	801bec2 <_strtol_l.constprop.0+0x56>
 801beb2:	782c      	ldrb	r4, [r5, #0]
 801beb4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801beb8:	2c58      	cmp	r4, #88	; 0x58
 801beba:	d14d      	bne.n	801bf58 <_strtol_l.constprop.0+0xec>
 801bebc:	786c      	ldrb	r4, [r5, #1]
 801bebe:	2310      	movs	r3, #16
 801bec0:	3502      	adds	r5, #2
 801bec2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801bec6:	f108 38ff 	add.w	r8, r8, #4294967295
 801beca:	f04f 0e00 	mov.w	lr, #0
 801bece:	fbb8 f9f3 	udiv	r9, r8, r3
 801bed2:	4676      	mov	r6, lr
 801bed4:	fb03 8a19 	mls	sl, r3, r9, r8
 801bed8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801bedc:	f1bc 0f09 	cmp.w	ip, #9
 801bee0:	d816      	bhi.n	801bf10 <_strtol_l.constprop.0+0xa4>
 801bee2:	4664      	mov	r4, ip
 801bee4:	42a3      	cmp	r3, r4
 801bee6:	dd24      	ble.n	801bf32 <_strtol_l.constprop.0+0xc6>
 801bee8:	f1be 3fff 	cmp.w	lr, #4294967295
 801beec:	d008      	beq.n	801bf00 <_strtol_l.constprop.0+0x94>
 801beee:	45b1      	cmp	r9, r6
 801bef0:	d31c      	bcc.n	801bf2c <_strtol_l.constprop.0+0xc0>
 801bef2:	d101      	bne.n	801bef8 <_strtol_l.constprop.0+0x8c>
 801bef4:	45a2      	cmp	sl, r4
 801bef6:	db19      	blt.n	801bf2c <_strtol_l.constprop.0+0xc0>
 801bef8:	fb06 4603 	mla	r6, r6, r3, r4
 801befc:	f04f 0e01 	mov.w	lr, #1
 801bf00:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bf04:	e7e8      	b.n	801bed8 <_strtol_l.constprop.0+0x6c>
 801bf06:	2c2b      	cmp	r4, #43	; 0x2b
 801bf08:	bf04      	itt	eq
 801bf0a:	782c      	ldrbeq	r4, [r5, #0]
 801bf0c:	1cb5      	addeq	r5, r6, #2
 801bf0e:	e7ca      	b.n	801bea6 <_strtol_l.constprop.0+0x3a>
 801bf10:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801bf14:	f1bc 0f19 	cmp.w	ip, #25
 801bf18:	d801      	bhi.n	801bf1e <_strtol_l.constprop.0+0xb2>
 801bf1a:	3c37      	subs	r4, #55	; 0x37
 801bf1c:	e7e2      	b.n	801bee4 <_strtol_l.constprop.0+0x78>
 801bf1e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801bf22:	f1bc 0f19 	cmp.w	ip, #25
 801bf26:	d804      	bhi.n	801bf32 <_strtol_l.constprop.0+0xc6>
 801bf28:	3c57      	subs	r4, #87	; 0x57
 801bf2a:	e7db      	b.n	801bee4 <_strtol_l.constprop.0+0x78>
 801bf2c:	f04f 3eff 	mov.w	lr, #4294967295
 801bf30:	e7e6      	b.n	801bf00 <_strtol_l.constprop.0+0x94>
 801bf32:	f1be 3fff 	cmp.w	lr, #4294967295
 801bf36:	d105      	bne.n	801bf44 <_strtol_l.constprop.0+0xd8>
 801bf38:	2322      	movs	r3, #34	; 0x22
 801bf3a:	6003      	str	r3, [r0, #0]
 801bf3c:	4646      	mov	r6, r8
 801bf3e:	b942      	cbnz	r2, 801bf52 <_strtol_l.constprop.0+0xe6>
 801bf40:	4630      	mov	r0, r6
 801bf42:	e79e      	b.n	801be82 <_strtol_l.constprop.0+0x16>
 801bf44:	b107      	cbz	r7, 801bf48 <_strtol_l.constprop.0+0xdc>
 801bf46:	4276      	negs	r6, r6
 801bf48:	2a00      	cmp	r2, #0
 801bf4a:	d0f9      	beq.n	801bf40 <_strtol_l.constprop.0+0xd4>
 801bf4c:	f1be 0f00 	cmp.w	lr, #0
 801bf50:	d000      	beq.n	801bf54 <_strtol_l.constprop.0+0xe8>
 801bf52:	1e69      	subs	r1, r5, #1
 801bf54:	6011      	str	r1, [r2, #0]
 801bf56:	e7f3      	b.n	801bf40 <_strtol_l.constprop.0+0xd4>
 801bf58:	2430      	movs	r4, #48	; 0x30
 801bf5a:	2b00      	cmp	r3, #0
 801bf5c:	d1b1      	bne.n	801bec2 <_strtol_l.constprop.0+0x56>
 801bf5e:	2308      	movs	r3, #8
 801bf60:	e7af      	b.n	801bec2 <_strtol_l.constprop.0+0x56>
 801bf62:	2c30      	cmp	r4, #48	; 0x30
 801bf64:	d0a5      	beq.n	801beb2 <_strtol_l.constprop.0+0x46>
 801bf66:	230a      	movs	r3, #10
 801bf68:	e7ab      	b.n	801bec2 <_strtol_l.constprop.0+0x56>
 801bf6a:	bf00      	nop
 801bf6c:	0801c86f 	.word	0x0801c86f

0801bf70 <_strtol_r>:
 801bf70:	f7ff bf7c 	b.w	801be6c <_strtol_l.constprop.0>

0801bf74 <_strtoul_l.constprop.0>:
 801bf74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bf78:	4f36      	ldr	r7, [pc, #216]	; (801c054 <_strtoul_l.constprop.0+0xe0>)
 801bf7a:	4686      	mov	lr, r0
 801bf7c:	460d      	mov	r5, r1
 801bf7e:	4628      	mov	r0, r5
 801bf80:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bf84:	5d3e      	ldrb	r6, [r7, r4]
 801bf86:	f016 0608 	ands.w	r6, r6, #8
 801bf8a:	d1f8      	bne.n	801bf7e <_strtoul_l.constprop.0+0xa>
 801bf8c:	2c2d      	cmp	r4, #45	; 0x2d
 801bf8e:	d130      	bne.n	801bff2 <_strtoul_l.constprop.0+0x7e>
 801bf90:	782c      	ldrb	r4, [r5, #0]
 801bf92:	2601      	movs	r6, #1
 801bf94:	1c85      	adds	r5, r0, #2
 801bf96:	2b00      	cmp	r3, #0
 801bf98:	d057      	beq.n	801c04a <_strtoul_l.constprop.0+0xd6>
 801bf9a:	2b10      	cmp	r3, #16
 801bf9c:	d109      	bne.n	801bfb2 <_strtoul_l.constprop.0+0x3e>
 801bf9e:	2c30      	cmp	r4, #48	; 0x30
 801bfa0:	d107      	bne.n	801bfb2 <_strtoul_l.constprop.0+0x3e>
 801bfa2:	7828      	ldrb	r0, [r5, #0]
 801bfa4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801bfa8:	2858      	cmp	r0, #88	; 0x58
 801bfaa:	d149      	bne.n	801c040 <_strtoul_l.constprop.0+0xcc>
 801bfac:	786c      	ldrb	r4, [r5, #1]
 801bfae:	2310      	movs	r3, #16
 801bfb0:	3502      	adds	r5, #2
 801bfb2:	f04f 38ff 	mov.w	r8, #4294967295
 801bfb6:	2700      	movs	r7, #0
 801bfb8:	fbb8 f8f3 	udiv	r8, r8, r3
 801bfbc:	fb03 f908 	mul.w	r9, r3, r8
 801bfc0:	ea6f 0909 	mvn.w	r9, r9
 801bfc4:	4638      	mov	r0, r7
 801bfc6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801bfca:	f1bc 0f09 	cmp.w	ip, #9
 801bfce:	d815      	bhi.n	801bffc <_strtoul_l.constprop.0+0x88>
 801bfd0:	4664      	mov	r4, ip
 801bfd2:	42a3      	cmp	r3, r4
 801bfd4:	dd23      	ble.n	801c01e <_strtoul_l.constprop.0+0xaa>
 801bfd6:	f1b7 3fff 	cmp.w	r7, #4294967295
 801bfda:	d007      	beq.n	801bfec <_strtoul_l.constprop.0+0x78>
 801bfdc:	4580      	cmp	r8, r0
 801bfde:	d31b      	bcc.n	801c018 <_strtoul_l.constprop.0+0xa4>
 801bfe0:	d101      	bne.n	801bfe6 <_strtoul_l.constprop.0+0x72>
 801bfe2:	45a1      	cmp	r9, r4
 801bfe4:	db18      	blt.n	801c018 <_strtoul_l.constprop.0+0xa4>
 801bfe6:	fb00 4003 	mla	r0, r0, r3, r4
 801bfea:	2701      	movs	r7, #1
 801bfec:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bff0:	e7e9      	b.n	801bfc6 <_strtoul_l.constprop.0+0x52>
 801bff2:	2c2b      	cmp	r4, #43	; 0x2b
 801bff4:	bf04      	itt	eq
 801bff6:	782c      	ldrbeq	r4, [r5, #0]
 801bff8:	1c85      	addeq	r5, r0, #2
 801bffa:	e7cc      	b.n	801bf96 <_strtoul_l.constprop.0+0x22>
 801bffc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801c000:	f1bc 0f19 	cmp.w	ip, #25
 801c004:	d801      	bhi.n	801c00a <_strtoul_l.constprop.0+0x96>
 801c006:	3c37      	subs	r4, #55	; 0x37
 801c008:	e7e3      	b.n	801bfd2 <_strtoul_l.constprop.0+0x5e>
 801c00a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801c00e:	f1bc 0f19 	cmp.w	ip, #25
 801c012:	d804      	bhi.n	801c01e <_strtoul_l.constprop.0+0xaa>
 801c014:	3c57      	subs	r4, #87	; 0x57
 801c016:	e7dc      	b.n	801bfd2 <_strtoul_l.constprop.0+0x5e>
 801c018:	f04f 37ff 	mov.w	r7, #4294967295
 801c01c:	e7e6      	b.n	801bfec <_strtoul_l.constprop.0+0x78>
 801c01e:	1c7b      	adds	r3, r7, #1
 801c020:	d106      	bne.n	801c030 <_strtoul_l.constprop.0+0xbc>
 801c022:	2322      	movs	r3, #34	; 0x22
 801c024:	f8ce 3000 	str.w	r3, [lr]
 801c028:	4638      	mov	r0, r7
 801c02a:	b932      	cbnz	r2, 801c03a <_strtoul_l.constprop.0+0xc6>
 801c02c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c030:	b106      	cbz	r6, 801c034 <_strtoul_l.constprop.0+0xc0>
 801c032:	4240      	negs	r0, r0
 801c034:	2a00      	cmp	r2, #0
 801c036:	d0f9      	beq.n	801c02c <_strtoul_l.constprop.0+0xb8>
 801c038:	b107      	cbz	r7, 801c03c <_strtoul_l.constprop.0+0xc8>
 801c03a:	1e69      	subs	r1, r5, #1
 801c03c:	6011      	str	r1, [r2, #0]
 801c03e:	e7f5      	b.n	801c02c <_strtoul_l.constprop.0+0xb8>
 801c040:	2430      	movs	r4, #48	; 0x30
 801c042:	2b00      	cmp	r3, #0
 801c044:	d1b5      	bne.n	801bfb2 <_strtoul_l.constprop.0+0x3e>
 801c046:	2308      	movs	r3, #8
 801c048:	e7b3      	b.n	801bfb2 <_strtoul_l.constprop.0+0x3e>
 801c04a:	2c30      	cmp	r4, #48	; 0x30
 801c04c:	d0a9      	beq.n	801bfa2 <_strtoul_l.constprop.0+0x2e>
 801c04e:	230a      	movs	r3, #10
 801c050:	e7af      	b.n	801bfb2 <_strtoul_l.constprop.0+0x3e>
 801c052:	bf00      	nop
 801c054:	0801c86f 	.word	0x0801c86f

0801c058 <_strtoul_r>:
 801c058:	f7ff bf8c 	b.w	801bf74 <_strtoul_l.constprop.0>

0801c05c <_malloc_usable_size_r>:
 801c05c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c060:	1f18      	subs	r0, r3, #4
 801c062:	2b00      	cmp	r3, #0
 801c064:	bfbc      	itt	lt
 801c066:	580b      	ldrlt	r3, [r1, r0]
 801c068:	18c0      	addlt	r0, r0, r3
 801c06a:	4770      	bx	lr

0801c06c <_init>:
 801c06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c06e:	bf00      	nop
 801c070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c072:	bc08      	pop	{r3}
 801c074:	469e      	mov	lr, r3
 801c076:	4770      	bx	lr

0801c078 <_fini>:
 801c078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c07a:	bf00      	nop
 801c07c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c07e:	bc08      	pop	{r3}
 801c080:	469e      	mov	lr, r3
 801c082:	4770      	bx	lr
