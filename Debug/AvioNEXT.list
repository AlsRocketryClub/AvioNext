
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000180ac  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  0801837c  0801837c  0002837c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018744  08018744  00028744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801874c  0801874c  0002874c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018750  08018750  00028750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000150  24000000  08018754  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000031f4  24000150  080188a4  00030150  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  24003344  080188a4  00033344  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030150  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0003017e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00035774  00000000  00000000  000301c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00006245  00000000  00000000  00065935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002ae8  00000000  00000000  0006bb80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000214b  00000000  00000000  0006e668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003de3d  00000000  00000000  000707b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003a926  00000000  00000000  000ae5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017d42a  00000000  00000000  000e8f16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000c2c0  00000000  00000000  00266340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  00272600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000150 	.word	0x24000150
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08018364 	.word	0x08018364

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000154 	.word	0x24000154
 800030c:	08018364 	.word	0x08018364

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b970 	b.w	80006d8 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9e08      	ldr	r6, [sp, #32]
 8000416:	460d      	mov	r5, r1
 8000418:	4604      	mov	r4, r0
 800041a:	460f      	mov	r7, r1
 800041c:	2b00      	cmp	r3, #0
 800041e:	d14a      	bne.n	80004b6 <__udivmoddi4+0xa6>
 8000420:	428a      	cmp	r2, r1
 8000422:	4694      	mov	ip, r2
 8000424:	d965      	bls.n	80004f2 <__udivmoddi4+0xe2>
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	b143      	cbz	r3, 800043e <__udivmoddi4+0x2e>
 800042c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000430:	f1c3 0220 	rsb	r2, r3, #32
 8000434:	409f      	lsls	r7, r3
 8000436:	fa20 f202 	lsr.w	r2, r0, r2
 800043a:	4317      	orrs	r7, r2
 800043c:	409c      	lsls	r4, r3
 800043e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000442:	fa1f f58c 	uxth.w	r5, ip
 8000446:	fbb7 f1fe 	udiv	r1, r7, lr
 800044a:	0c22      	lsrs	r2, r4, #16
 800044c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000450:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000454:	fb01 f005 	mul.w	r0, r1, r5
 8000458:	4290      	cmp	r0, r2
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x62>
 800045c:	eb1c 0202 	adds.w	r2, ip, r2
 8000460:	f101 37ff 	add.w	r7, r1, #4294967295
 8000464:	f080 811c 	bcs.w	80006a0 <__udivmoddi4+0x290>
 8000468:	4290      	cmp	r0, r2
 800046a:	f240 8119 	bls.w	80006a0 <__udivmoddi4+0x290>
 800046e:	3902      	subs	r1, #2
 8000470:	4462      	add	r2, ip
 8000472:	1a12      	subs	r2, r2, r0
 8000474:	b2a4      	uxth	r4, r4
 8000476:	fbb2 f0fe 	udiv	r0, r2, lr
 800047a:	fb0e 2210 	mls	r2, lr, r0, r2
 800047e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000482:	fb00 f505 	mul.w	r5, r0, r5
 8000486:	42a5      	cmp	r5, r4
 8000488:	d90a      	bls.n	80004a0 <__udivmoddi4+0x90>
 800048a:	eb1c 0404 	adds.w	r4, ip, r4
 800048e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000492:	f080 8107 	bcs.w	80006a4 <__udivmoddi4+0x294>
 8000496:	42a5      	cmp	r5, r4
 8000498:	f240 8104 	bls.w	80006a4 <__udivmoddi4+0x294>
 800049c:	4464      	add	r4, ip
 800049e:	3802      	subs	r0, #2
 80004a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80004a4:	1b64      	subs	r4, r4, r5
 80004a6:	2100      	movs	r1, #0
 80004a8:	b11e      	cbz	r6, 80004b2 <__udivmoddi4+0xa2>
 80004aa:	40dc      	lsrs	r4, r3
 80004ac:	2300      	movs	r3, #0
 80004ae:	e9c6 4300 	strd	r4, r3, [r6]
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0xbc>
 80004ba:	2e00      	cmp	r6, #0
 80004bc:	f000 80ed 	beq.w	800069a <__udivmoddi4+0x28a>
 80004c0:	2100      	movs	r1, #0
 80004c2:	e9c6 0500 	strd	r0, r5, [r6]
 80004c6:	4608      	mov	r0, r1
 80004c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004cc:	fab3 f183 	clz	r1, r3
 80004d0:	2900      	cmp	r1, #0
 80004d2:	d149      	bne.n	8000568 <__udivmoddi4+0x158>
 80004d4:	42ab      	cmp	r3, r5
 80004d6:	d302      	bcc.n	80004de <__udivmoddi4+0xce>
 80004d8:	4282      	cmp	r2, r0
 80004da:	f200 80f8 	bhi.w	80006ce <__udivmoddi4+0x2be>
 80004de:	1a84      	subs	r4, r0, r2
 80004e0:	eb65 0203 	sbc.w	r2, r5, r3
 80004e4:	2001      	movs	r0, #1
 80004e6:	4617      	mov	r7, r2
 80004e8:	2e00      	cmp	r6, #0
 80004ea:	d0e2      	beq.n	80004b2 <__udivmoddi4+0xa2>
 80004ec:	e9c6 4700 	strd	r4, r7, [r6]
 80004f0:	e7df      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004f2:	b902      	cbnz	r2, 80004f6 <__udivmoddi4+0xe6>
 80004f4:	deff      	udf	#255	; 0xff
 80004f6:	fab2 f382 	clz	r3, r2
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	f040 8090 	bne.w	8000620 <__udivmoddi4+0x210>
 8000500:	1a8a      	subs	r2, r1, r2
 8000502:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000506:	fa1f fe8c 	uxth.w	lr, ip
 800050a:	2101      	movs	r1, #1
 800050c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000510:	fb07 2015 	mls	r0, r7, r5, r2
 8000514:	0c22      	lsrs	r2, r4, #16
 8000516:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800051a:	fb0e f005 	mul.w	r0, lr, r5
 800051e:	4290      	cmp	r0, r2
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x124>
 8000522:	eb1c 0202 	adds.w	r2, ip, r2
 8000526:	f105 38ff 	add.w	r8, r5, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x122>
 800052c:	4290      	cmp	r0, r2
 800052e:	f200 80cb 	bhi.w	80006c8 <__udivmoddi4+0x2b8>
 8000532:	4645      	mov	r5, r8
 8000534:	1a12      	subs	r2, r2, r0
 8000536:	b2a4      	uxth	r4, r4
 8000538:	fbb2 f0f7 	udiv	r0, r2, r7
 800053c:	fb07 2210 	mls	r2, r7, r0, r2
 8000540:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000544:	fb0e fe00 	mul.w	lr, lr, r0
 8000548:	45a6      	cmp	lr, r4
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x14e>
 800054c:	eb1c 0404 	adds.w	r4, ip, r4
 8000550:	f100 32ff 	add.w	r2, r0, #4294967295
 8000554:	d202      	bcs.n	800055c <__udivmoddi4+0x14c>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f200 80bb 	bhi.w	80006d2 <__udivmoddi4+0x2c2>
 800055c:	4610      	mov	r0, r2
 800055e:	eba4 040e 	sub.w	r4, r4, lr
 8000562:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000566:	e79f      	b.n	80004a8 <__udivmoddi4+0x98>
 8000568:	f1c1 0720 	rsb	r7, r1, #32
 800056c:	408b      	lsls	r3, r1
 800056e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000572:	ea4c 0c03 	orr.w	ip, ip, r3
 8000576:	fa05 f401 	lsl.w	r4, r5, r1
 800057a:	fa20 f307 	lsr.w	r3, r0, r7
 800057e:	40fd      	lsrs	r5, r7
 8000580:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000584:	4323      	orrs	r3, r4
 8000586:	fbb5 f8f9 	udiv	r8, r5, r9
 800058a:	fa1f fe8c 	uxth.w	lr, ip
 800058e:	fb09 5518 	mls	r5, r9, r8, r5
 8000592:	0c1c      	lsrs	r4, r3, #16
 8000594:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000598:	fb08 f50e 	mul.w	r5, r8, lr
 800059c:	42a5      	cmp	r5, r4
 800059e:	fa02 f201 	lsl.w	r2, r2, r1
 80005a2:	fa00 f001 	lsl.w	r0, r0, r1
 80005a6:	d90b      	bls.n	80005c0 <__udivmoddi4+0x1b0>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80005b0:	f080 8088 	bcs.w	80006c4 <__udivmoddi4+0x2b4>
 80005b4:	42a5      	cmp	r5, r4
 80005b6:	f240 8085 	bls.w	80006c4 <__udivmoddi4+0x2b4>
 80005ba:	f1a8 0802 	sub.w	r8, r8, #2
 80005be:	4464      	add	r4, ip
 80005c0:	1b64      	subs	r4, r4, r5
 80005c2:	b29d      	uxth	r5, r3
 80005c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80005c8:	fb09 4413 	mls	r4, r9, r3, r4
 80005cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005d4:	45a6      	cmp	lr, r4
 80005d6:	d908      	bls.n	80005ea <__udivmoddi4+0x1da>
 80005d8:	eb1c 0404 	adds.w	r4, ip, r4
 80005dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80005e0:	d26c      	bcs.n	80006bc <__udivmoddi4+0x2ac>
 80005e2:	45a6      	cmp	lr, r4
 80005e4:	d96a      	bls.n	80006bc <__udivmoddi4+0x2ac>
 80005e6:	3b02      	subs	r3, #2
 80005e8:	4464      	add	r4, ip
 80005ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ee:	fba3 9502 	umull	r9, r5, r3, r2
 80005f2:	eba4 040e 	sub.w	r4, r4, lr
 80005f6:	42ac      	cmp	r4, r5
 80005f8:	46c8      	mov	r8, r9
 80005fa:	46ae      	mov	lr, r5
 80005fc:	d356      	bcc.n	80006ac <__udivmoddi4+0x29c>
 80005fe:	d053      	beq.n	80006a8 <__udivmoddi4+0x298>
 8000600:	b156      	cbz	r6, 8000618 <__udivmoddi4+0x208>
 8000602:	ebb0 0208 	subs.w	r2, r0, r8
 8000606:	eb64 040e 	sbc.w	r4, r4, lr
 800060a:	fa04 f707 	lsl.w	r7, r4, r7
 800060e:	40ca      	lsrs	r2, r1
 8000610:	40cc      	lsrs	r4, r1
 8000612:	4317      	orrs	r7, r2
 8000614:	e9c6 7400 	strd	r7, r4, [r6]
 8000618:	4618      	mov	r0, r3
 800061a:	2100      	movs	r1, #0
 800061c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000620:	f1c3 0120 	rsb	r1, r3, #32
 8000624:	fa02 fc03 	lsl.w	ip, r2, r3
 8000628:	fa20 f201 	lsr.w	r2, r0, r1
 800062c:	fa25 f101 	lsr.w	r1, r5, r1
 8000630:	409d      	lsls	r5, r3
 8000632:	432a      	orrs	r2, r5
 8000634:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000638:	fa1f fe8c 	uxth.w	lr, ip
 800063c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000640:	fb07 1510 	mls	r5, r7, r0, r1
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800064a:	fb00 f50e 	mul.w	r5, r0, lr
 800064e:	428d      	cmp	r5, r1
 8000650:	fa04 f403 	lsl.w	r4, r4, r3
 8000654:	d908      	bls.n	8000668 <__udivmoddi4+0x258>
 8000656:	eb1c 0101 	adds.w	r1, ip, r1
 800065a:	f100 38ff 	add.w	r8, r0, #4294967295
 800065e:	d22f      	bcs.n	80006c0 <__udivmoddi4+0x2b0>
 8000660:	428d      	cmp	r5, r1
 8000662:	d92d      	bls.n	80006c0 <__udivmoddi4+0x2b0>
 8000664:	3802      	subs	r0, #2
 8000666:	4461      	add	r1, ip
 8000668:	1b49      	subs	r1, r1, r5
 800066a:	b292      	uxth	r2, r2
 800066c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000670:	fb07 1115 	mls	r1, r7, r5, r1
 8000674:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000678:	fb05 f10e 	mul.w	r1, r5, lr
 800067c:	4291      	cmp	r1, r2
 800067e:	d908      	bls.n	8000692 <__udivmoddi4+0x282>
 8000680:	eb1c 0202 	adds.w	r2, ip, r2
 8000684:	f105 38ff 	add.w	r8, r5, #4294967295
 8000688:	d216      	bcs.n	80006b8 <__udivmoddi4+0x2a8>
 800068a:	4291      	cmp	r1, r2
 800068c:	d914      	bls.n	80006b8 <__udivmoddi4+0x2a8>
 800068e:	3d02      	subs	r5, #2
 8000690:	4462      	add	r2, ip
 8000692:	1a52      	subs	r2, r2, r1
 8000694:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000698:	e738      	b.n	800050c <__udivmoddi4+0xfc>
 800069a:	4631      	mov	r1, r6
 800069c:	4630      	mov	r0, r6
 800069e:	e708      	b.n	80004b2 <__udivmoddi4+0xa2>
 80006a0:	4639      	mov	r1, r7
 80006a2:	e6e6      	b.n	8000472 <__udivmoddi4+0x62>
 80006a4:	4610      	mov	r0, r2
 80006a6:	e6fb      	b.n	80004a0 <__udivmoddi4+0x90>
 80006a8:	4548      	cmp	r0, r9
 80006aa:	d2a9      	bcs.n	8000600 <__udivmoddi4+0x1f0>
 80006ac:	ebb9 0802 	subs.w	r8, r9, r2
 80006b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80006b4:	3b01      	subs	r3, #1
 80006b6:	e7a3      	b.n	8000600 <__udivmoddi4+0x1f0>
 80006b8:	4645      	mov	r5, r8
 80006ba:	e7ea      	b.n	8000692 <__udivmoddi4+0x282>
 80006bc:	462b      	mov	r3, r5
 80006be:	e794      	b.n	80005ea <__udivmoddi4+0x1da>
 80006c0:	4640      	mov	r0, r8
 80006c2:	e7d1      	b.n	8000668 <__udivmoddi4+0x258>
 80006c4:	46d0      	mov	r8, sl
 80006c6:	e77b      	b.n	80005c0 <__udivmoddi4+0x1b0>
 80006c8:	3d02      	subs	r5, #2
 80006ca:	4462      	add	r2, ip
 80006cc:	e732      	b.n	8000534 <__udivmoddi4+0x124>
 80006ce:	4608      	mov	r0, r1
 80006d0:	e70a      	b.n	80004e8 <__udivmoddi4+0xd8>
 80006d2:	4464      	add	r4, ip
 80006d4:	3802      	subs	r0, #2
 80006d6:	e742      	b.n	800055e <__udivmoddi4+0x14e>

080006d8 <__aeabi_idiv0>:
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop

080006dc <HG2_Write_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);

	return reg_value;
}

void HG2_Write_Register(uint8_t addr, uint8_t data){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	460a      	mov	r2, r1
 80006e6:	71fb      	strb	r3, [r7, #7]
 80006e8:	4613      	mov	r3, r2
 80006ea:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f2:	480c      	ldr	r0, [pc, #48]	; (8000724 <HG2_Write_Register+0x48>)
 80006f4:	f007 fc88 	bl	8008008 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80006f8:	1df9      	adds	r1, r7, #7
 80006fa:	2364      	movs	r3, #100	; 0x64
 80006fc:	2201      	movs	r2, #1
 80006fe:	480a      	ldr	r0, [pc, #40]	; (8000728 <HG2_Write_Register+0x4c>)
 8000700:	f00e fa1e 	bl	800eb40 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000704:	1db9      	adds	r1, r7, #6
 8000706:	2364      	movs	r3, #100	; 0x64
 8000708:	2201      	movs	r2, #1
 800070a:	4807      	ldr	r0, [pc, #28]	; (8000728 <HG2_Write_Register+0x4c>)
 800070c:	f00e fa18 	bl	800eb40 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000710:	2201      	movs	r2, #1
 8000712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000716:	4803      	ldr	r0, [pc, #12]	; (8000724 <HG2_Write_Register+0x48>)
 8000718:	f007 fc76 	bl	8008008 <HAL_GPIO_WritePin>

}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	58020c00 	.word	0x58020c00
 8000728:	24000fc0 	.word	0x24000fc0

0800072c <LG2_Read_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
}



uint8_t LG2_Read_Register(uint8_t addr){
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	addr |= (1<<7);
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800073c:	b2db      	uxtb	r3, r3
 800073e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <LG2_Read_Register+0x50>)
 8000748:	f007 fc5e 	bl	8008008 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 800074c:	1df9      	adds	r1, r7, #7
 800074e:	2364      	movs	r3, #100	; 0x64
 8000750:	2201      	movs	r2, #1
 8000752:	480b      	ldr	r0, [pc, #44]	; (8000780 <LG2_Read_Register+0x54>)
 8000754:	f00e f9f4 	bl	800eb40 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &reg_value, 1, 100);
 8000758:	f107 010f 	add.w	r1, r7, #15
 800075c:	2364      	movs	r3, #100	; 0x64
 800075e:	2201      	movs	r2, #1
 8000760:	4807      	ldr	r0, [pc, #28]	; (8000780 <LG2_Read_Register+0x54>)
 8000762:	f00e fbe9 	bl	800ef38 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <LG2_Read_Register+0x50>)
 800076e:	f007 fc4b 	bl	8008008 <HAL_GPIO_WritePin>

	return reg_value;
 8000772:	7bfb      	ldrb	r3, [r7, #15]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	58020c00 	.word	0x58020c00
 8000780:	24000fc0 	.word	0x24000fc0

08000784 <LG2_Write_Register>:

void LG2_Write_Register(uint8_t addr, uint8_t data){
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	460a      	mov	r2, r1
 800078e:	71fb      	strb	r3, [r7, #7]
 8000790:	4613      	mov	r3, r2
 8000792:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079a:	480c      	ldr	r0, [pc, #48]	; (80007cc <LG2_Write_Register+0x48>)
 800079c:	f007 fc34 	bl	8008008 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80007a0:	1df9      	adds	r1, r7, #7
 80007a2:	2364      	movs	r3, #100	; 0x64
 80007a4:	2201      	movs	r2, #1
 80007a6:	480a      	ldr	r0, [pc, #40]	; (80007d0 <LG2_Write_Register+0x4c>)
 80007a8:	f00e f9ca 	bl	800eb40 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 80007ac:	1db9      	adds	r1, r7, #6
 80007ae:	2364      	movs	r3, #100	; 0x64
 80007b0:	2201      	movs	r2, #1
 80007b2:	4807      	ldr	r0, [pc, #28]	; (80007d0 <LG2_Write_Register+0x4c>)
 80007b4:	f00e f9c4 	bl	800eb40 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 80007b8:	2201      	movs	r2, #1
 80007ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007be:	4803      	ldr	r0, [pc, #12]	; (80007cc <LG2_Write_Register+0x48>)
 80007c0:	f007 fc22 	bl	8008008 <HAL_GPIO_WritePin>

}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	58020c00 	.word	0x58020c00
 80007d0:	24000fc0 	.word	0x24000fc0

080007d4 <LG2_Get_Gyro_X>:

float LG2_Get_Gyro_X(){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x22);
 80007da:	2022      	movs	r0, #34	; 0x22
 80007dc:	f7ff ffa6 	bl	800072c <LG2_Read_Register>
 80007e0:	4603      	mov	r3, r0
 80007e2:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x23);
 80007e4:	2023      	movs	r0, #35	; 0x23
 80007e6:	f7ff ffa1 	bl	800072c <LG2_Read_Register>
 80007ea:	4603      	mov	r3, r0
 80007ec:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80007ee:	79bb      	ldrb	r3, [r7, #6]
 80007f0:	021b      	lsls	r3, r3, #8
 80007f2:	b21a      	sxth	r2, r3
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	4313      	orrs	r3, r2
 80007fa:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 80007fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000800:	ee07 3a90 	vmov	s15, r3
 8000804:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000808:	eddf 6a08 	vldr	s13, [pc, #32]	; 800082c <LG2_Get_Gyro_X+0x58>
 800080c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000810:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000830 <LG2_Get_Gyro_X+0x5c>
 8000814:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000818:	edc7 7a00 	vstr	s15, [r7]
	return omega;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	ee07 3a90 	vmov	s15, r3
}
 8000822:	eeb0 0a67 	vmov.f32	s0, s15
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	46fffe00 	.word	0x46fffe00
 8000830:	437a0000 	.word	0x437a0000

08000834 <LG2_Get_Gyro_Y>:

float LG2_Get_Gyro_Y(){
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x24);
 800083a:	2024      	movs	r0, #36	; 0x24
 800083c:	f7ff ff76 	bl	800072c <LG2_Read_Register>
 8000840:	4603      	mov	r3, r0
 8000842:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x25);
 8000844:	2025      	movs	r0, #37	; 0x25
 8000846:	f7ff ff71 	bl	800072c <LG2_Read_Register>
 800084a:	4603      	mov	r3, r0
 800084c:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	b21a      	sxth	r2, r3
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	b21b      	sxth	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 800085c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000860:	ee07 3a90 	vmov	s15, r3
 8000864:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000868:	eddf 6a08 	vldr	s13, [pc, #32]	; 800088c <LG2_Get_Gyro_Y+0x58>
 800086c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000870:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000890 <LG2_Get_Gyro_Y+0x5c>
 8000874:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000878:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	ee07 3a90 	vmov	s15, r3
}
 8000882:	eeb0 0a67 	vmov.f32	s0, s15
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	46fffe00 	.word	0x46fffe00
 8000890:	437a0000 	.word	0x437a0000
 8000894:	00000000 	.word	0x00000000

08000898 <LG2_Get_Gyro_Z>:

float LG2_Get_Gyro_Z(){
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x26);
 800089e:	2026      	movs	r0, #38	; 0x26
 80008a0:	f7ff ff44 	bl	800072c <LG2_Read_Register>
 80008a4:	4603      	mov	r3, r0
 80008a6:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x27);
 80008a8:	2027      	movs	r0, #39	; 0x27
 80008aa:	f7ff ff3f 	bl	800072c <LG2_Read_Register>
 80008ae:	4603      	mov	r3, r0
 80008b0:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80008b2:	79bb      	ldrb	r3, [r7, #6]
 80008b4:	021b      	lsls	r3, r3, #8
 80008b6:	b21a      	sxth	r2, r3
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	b21b      	sxth	r3, r3
 80008bc:	4313      	orrs	r3, r2
 80008be:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767.0) * 250.0;
 80008c0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008c4:	ee07 3a90 	vmov	s15, r3
 80008c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008cc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80008d0:	ed9f 5b09 	vldr	d5, [pc, #36]	; 80008f8 <LG2_Get_Gyro_Z+0x60>
 80008d4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008d8:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000900 <LG2_Get_Gyro_Z+0x68>
 80008dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008e4:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	ee07 3a90 	vmov	s15, r3
}
 80008ee:	eeb0 0a67 	vmov.f32	s0, s15
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	00000000 	.word	0x00000000
 80008fc:	40dfffc0 	.word	0x40dfffc0
 8000900:	00000000 	.word	0x00000000
 8000904:	406f4000 	.word	0x406f4000

08000908 <setServo>:
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;


void setServo(int servoNum, float angle){
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal =(int)( 3000 + (4000 * (angle/180)));
 8000914:	ed97 7a00 	vldr	s14, [r7]
 8000918:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000988 <setServo+0x80>
 800091c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000920:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800098c <setServo+0x84>
 8000924:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000928:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000990 <setServo+0x88>
 800092c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000930:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000934:	ee17 3a90 	vmov	r3, s15
 8000938:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3b01      	subs	r3, #1
 800093e:	2b03      	cmp	r3, #3
 8000940:	d81a      	bhi.n	8000978 <setServo+0x70>
 8000942:	a201      	add	r2, pc, #4	; (adr r2, 8000948 <setServo+0x40>)
 8000944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000948:	08000959 	.word	0x08000959
 800094c:	08000961 	.word	0x08000961
 8000950:	08000969 	.word	0x08000969
 8000954:	08000971 	.word	0x08000971
		case 1:
			TIM4->CCR4 = timerVal;
 8000958:	4a0e      	ldr	r2, [pc, #56]	; (8000994 <setServo+0x8c>)
 800095a:	89fb      	ldrh	r3, [r7, #14]
 800095c:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 800095e:	e00c      	b.n	800097a <setServo+0x72>
		case 2:
			TIM4->CCR3 = timerVal;
 8000960:	4a0c      	ldr	r2, [pc, #48]	; (8000994 <setServo+0x8c>)
 8000962:	89fb      	ldrh	r3, [r7, #14]
 8000964:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 8000966:	e008      	b.n	800097a <setServo+0x72>
		case 3:
			TIM4->CCR2 = timerVal;
 8000968:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <setServo+0x8c>)
 800096a:	89fb      	ldrh	r3, [r7, #14]
 800096c:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 800096e:	e004      	b.n	800097a <setServo+0x72>
		case 4:
			TIM4->CCR1 = timerVal;
 8000970:	4a08      	ldr	r2, [pc, #32]	; (8000994 <setServo+0x8c>)
 8000972:	89fb      	ldrh	r3, [r7, #14]
 8000974:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8000976:	e000      	b.n	800097a <setServo+0x72>

		default:
			break;
 8000978:	bf00      	nop
	}
}
 800097a:	bf00      	nop
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	43340000 	.word	0x43340000
 800098c:	457a0000 	.word	0x457a0000
 8000990:	453b8000 	.word	0x453b8000
 8000994:	40000800 	.word	0x40000800

08000998 <setLEDs>:

void setLEDs(void) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b08e      	sub	sp, #56	; 0x38
 800099c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 800099e:	2300      	movs	r3, #0
 80009a0:	637b      	str	r3, [r7, #52]	; 0x34
 80009a2:	e181      	b.n	8000ca8 <setLEDs+0x310>
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 80009a4:	4aa1      	ldr	r2, [pc, #644]	; (8000c2c <setLEDs+0x294>)
 80009a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80009ac:	2b03      	cmp	r3, #3
 80009ae:	f200 8177 	bhi.w	8000ca0 <setLEDs+0x308>
 80009b2:	a201      	add	r2, pc, #4	; (adr r2, 80009b8 <setLEDs+0x20>)
 80009b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b8:	080009c9 	.word	0x080009c9
 80009bc:	08000a79 	.word	0x08000a79
 80009c0:	08000b29 	.word	0x08000b29
 80009c4:	08000bd9 	.word	0x08000bd9
		case 0:
			for (int j = 0; j < 3; j++) {
 80009c8:	2300      	movs	r3, #0
 80009ca:	633b      	str	r3, [r7, #48]	; 0x30
 80009cc:	e042      	b.n	8000a54 <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 80009ce:	2300      	movs	r3, #0
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009d2:	e039      	b.n	8000a48 <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80009d4:	4996      	ldr	r1, [pc, #600]	; (8000c30 <setLEDs+0x298>)
 80009d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009d8:	4613      	mov	r3, r2
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	4413      	add	r3, r2
 80009de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80009e0:	4413      	add	r3, r2
 80009e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009e6:	2180      	movs	r1, #128	; 0x80
 80009e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009ea:	fa41 f202 	asr.w	r2, r1, r2
 80009ee:	4013      	ands	r3, r2
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d013      	beq.n	8000a1c <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 80009f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009f6:	00da      	lsls	r2, r3, #3
 80009f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009fa:	18d1      	adds	r1, r2, r3
 80009fc:	4a8b      	ldr	r2, [pc, #556]	; (8000c2c <setLEDs+0x294>)
 80009fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	4413      	add	r3, r2
 8000a04:	685a      	ldr	r2, [r3, #4]
 8000a06:	4613      	mov	r3, r2
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	4413      	add	r3, r2
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	440b      	add	r3, r1
 8000a10:	3308      	adds	r3, #8
 8000a12:	4a88      	ldr	r2, [pc, #544]	; (8000c34 <setLEDs+0x29c>)
 8000a14:	213c      	movs	r1, #60	; 0x3c
 8000a16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a1a:	e012      	b.n	8000a42 <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a1e:	00da      	lsls	r2, r3, #3
 8000a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a22:	18d1      	adds	r1, r2, r3
 8000a24:	4a81      	ldr	r2, [pc, #516]	; (8000c2c <setLEDs+0x294>)
 8000a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a28:	00db      	lsls	r3, r3, #3
 8000a2a:	4413      	add	r3, r2
 8000a2c:	685a      	ldr	r2, [r3, #4]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	4413      	add	r3, r2
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	440b      	add	r3, r1
 8000a38:	3308      	adds	r3, #8
 8000a3a:	4a7e      	ldr	r2, [pc, #504]	; (8000c34 <setLEDs+0x29c>)
 8000a3c:	211e      	movs	r1, #30
 8000a3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a44:	3301      	adds	r3, #1
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4a:	2b07      	cmp	r3, #7
 8000a4c:	ddc2      	ble.n	80009d4 <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8000a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a50:	3301      	adds	r3, #1
 8000a52:	633b      	str	r3, [r7, #48]	; 0x30
 8000a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	ddb9      	ble.n	80009ce <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a5a:	2380      	movs	r3, #128	; 0x80
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a5e:	e007      	b.n	8000a70 <setLEDs+0xd8>
				LED_PWM_Data_0[i] = 0;
 8000a60:	4a74      	ldr	r2, [pc, #464]	; (8000c34 <setLEDs+0x29c>)
 8000a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a64:	2100      	movs	r1, #0
 8000a66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a72:	2bb1      	cmp	r3, #177	; 0xb1
 8000a74:	ddf4      	ble.n	8000a60 <setLEDs+0xc8>
			}
			break;
 8000a76:	e114      	b.n	8000ca2 <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a7c:	e042      	b.n	8000b04 <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
 8000a82:	e039      	b.n	8000af8 <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000a84:	496a      	ldr	r1, [pc, #424]	; (8000c30 <setLEDs+0x298>)
 8000a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a88:	4613      	mov	r3, r2
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	4413      	add	r3, r2
 8000a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a90:	4413      	add	r3, r2
 8000a92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a96:	2180      	movs	r1, #128	; 0x80
 8000a98:	6a3a      	ldr	r2, [r7, #32]
 8000a9a:	fa41 f202 	asr.w	r2, r1, r2
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d013      	beq.n	8000acc <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa6:	00da      	lsls	r2, r3, #3
 8000aa8:	6a3b      	ldr	r3, [r7, #32]
 8000aaa:	18d1      	adds	r1, r2, r3
 8000aac:	4a5f      	ldr	r2, [pc, #380]	; (8000c2c <setLEDs+0x294>)
 8000aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	4413      	add	r3, r2
 8000ab4:	685a      	ldr	r2, [r3, #4]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	4413      	add	r3, r2
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	440b      	add	r3, r1
 8000ac0:	3308      	adds	r3, #8
 8000ac2:	4a5d      	ldr	r2, [pc, #372]	; (8000c38 <setLEDs+0x2a0>)
 8000ac4:	213c      	movs	r1, #60	; 0x3c
 8000ac6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000aca:	e012      	b.n	8000af2 <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	00da      	lsls	r2, r3, #3
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	18d1      	adds	r1, r2, r3
 8000ad4:	4a55      	ldr	r2, [pc, #340]	; (8000c2c <setLEDs+0x294>)
 8000ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	4413      	add	r3, r2
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	4413      	add	r3, r2
 8000ae4:	00db      	lsls	r3, r3, #3
 8000ae6:	440b      	add	r3, r1
 8000ae8:	3308      	adds	r3, #8
 8000aea:	4a53      	ldr	r2, [pc, #332]	; (8000c38 <setLEDs+0x2a0>)
 8000aec:	211e      	movs	r1, #30
 8000aee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000af2:	6a3b      	ldr	r3, [r7, #32]
 8000af4:	3301      	adds	r3, #1
 8000af6:	623b      	str	r3, [r7, #32]
 8000af8:	6a3b      	ldr	r3, [r7, #32]
 8000afa:	2b07      	cmp	r3, #7
 8000afc:	ddc2      	ble.n	8000a84 <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 8000afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b00:	3301      	adds	r3, #1
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
 8000b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	ddb9      	ble.n	8000a7e <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000b0a:	2380      	movs	r3, #128	; 0x80
 8000b0c:	61fb      	str	r3, [r7, #28]
 8000b0e:	e007      	b.n	8000b20 <setLEDs+0x188>
				LED_PWM_Data_1[i] = 0;
 8000b10:	4a49      	ldr	r2, [pc, #292]	; (8000c38 <setLEDs+0x2a0>)
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	2100      	movs	r1, #0
 8000b16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	61fb      	str	r3, [r7, #28]
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	2bb1      	cmp	r3, #177	; 0xb1
 8000b24:	ddf4      	ble.n	8000b10 <setLEDs+0x178>
			}
			break;
 8000b26:	e0bc      	b.n	8000ca2 <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61bb      	str	r3, [r7, #24]
 8000b2c:	e042      	b.n	8000bb4 <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	e039      	b.n	8000ba8 <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000b34:	493e      	ldr	r1, [pc, #248]	; (8000c30 <setLEDs+0x298>)
 8000b36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b38:	4613      	mov	r3, r2
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	4413      	add	r3, r2
 8000b3e:	69ba      	ldr	r2, [r7, #24]
 8000b40:	4413      	add	r3, r2
 8000b42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b46:	2180      	movs	r1, #128	; 0x80
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	fa41 f202 	asr.w	r2, r1, r2
 8000b4e:	4013      	ands	r3, r2
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d013      	beq.n	8000b7c <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	00da      	lsls	r2, r3, #3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	18d1      	adds	r1, r2, r3
 8000b5c:	4a33      	ldr	r2, [pc, #204]	; (8000c2c <setLEDs+0x294>)
 8000b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	4413      	add	r3, r2
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	4613      	mov	r3, r2
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	4413      	add	r3, r2
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	440b      	add	r3, r1
 8000b70:	3308      	adds	r3, #8
 8000b72:	4a32      	ldr	r2, [pc, #200]	; (8000c3c <setLEDs+0x2a4>)
 8000b74:	213c      	movs	r1, #60	; 0x3c
 8000b76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000b7a:	e012      	b.n	8000ba2 <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	00da      	lsls	r2, r3, #3
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	18d1      	adds	r1, r2, r3
 8000b84:	4a29      	ldr	r2, [pc, #164]	; (8000c2c <setLEDs+0x294>)
 8000b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	4413      	add	r3, r2
 8000b8c:	685a      	ldr	r2, [r3, #4]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	4413      	add	r3, r2
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	440b      	add	r3, r1
 8000b98:	3308      	adds	r3, #8
 8000b9a:	4a28      	ldr	r2, [pc, #160]	; (8000c3c <setLEDs+0x2a4>)
 8000b9c:	211e      	movs	r1, #30
 8000b9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	2b07      	cmp	r3, #7
 8000bac:	ddc2      	ble.n	8000b34 <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	61bb      	str	r3, [r7, #24]
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	ddb9      	ble.n	8000b2e <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000bba:	2338      	movs	r3, #56	; 0x38
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	e007      	b.n	8000bd0 <setLEDs+0x238>
				LED_PWM_Data_2[i] = 0;
 8000bc0:	4a1e      	ldr	r2, [pc, #120]	; (8000c3c <setLEDs+0x2a4>)
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	2b69      	cmp	r3, #105	; 0x69
 8000bd4:	ddf4      	ble.n	8000bc0 <setLEDs+0x228>
			}
			break;
 8000bd6:	e064      	b.n	8000ca2 <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	e04e      	b.n	8000c7c <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	e045      	b.n	8000c70 <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000be4:	4912      	ldr	r1, [pc, #72]	; (8000c30 <setLEDs+0x298>)
 8000be6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000be8:	4613      	mov	r3, r2
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	4413      	add	r3, r2
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bf6:	2180      	movs	r1, #128	; 0x80
 8000bf8:	68ba      	ldr	r2, [r7, #8]
 8000bfa:	fa41 f202 	asr.w	r2, r1, r2
 8000bfe:	4013      	ands	r3, r2
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d01f      	beq.n	8000c44 <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	00da      	lsls	r2, r3, #3
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	18d1      	adds	r1, r2, r3
 8000c0c:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <setLEDs+0x294>)
 8000c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	4413      	add	r3, r2
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	4613      	mov	r3, r2
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	4413      	add	r3, r2
 8000c1c:	00db      	lsls	r3, r3, #3
 8000c1e:	440b      	add	r3, r1
 8000c20:	3308      	adds	r3, #8
 8000c22:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <setLEDs+0x2a8>)
 8000c24:	213c      	movs	r1, #60	; 0x3c
 8000c26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000c2a:	e01e      	b.n	8000c6a <setLEDs+0x2d2>
 8000c2c:	08018530 	.word	0x08018530
 8000c30:	24000b50 	.word	0x24000b50
 8000c34:	24000270 	.word	0x24000270
 8000c38:	24000538 	.word	0x24000538
 8000c3c:	24000800 	.word	0x24000800
 8000c40:	240009a8 	.word	0x240009a8
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	00da      	lsls	r2, r3, #3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	18d1      	adds	r1, r2, r3
 8000c4c:	4a26      	ldr	r2, [pc, #152]	; (8000ce8 <setLEDs+0x350>)
 8000c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	4413      	add	r3, r2
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	4613      	mov	r3, r2
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	4413      	add	r3, r2
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	440b      	add	r3, r1
 8000c60:	3308      	adds	r3, #8
 8000c62:	4a22      	ldr	r2, [pc, #136]	; (8000cec <setLEDs+0x354>)
 8000c64:	211e      	movs	r1, #30
 8000c66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	2b07      	cmp	r3, #7
 8000c74:	ddb6      	ble.n	8000be4 <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	ddad      	ble.n	8000bde <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c82:	2338      	movs	r3, #56	; 0x38
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	e007      	b.n	8000c98 <setLEDs+0x300>
				LED_PWM_Data_3[i] = 0;
 8000c88:	4a18      	ldr	r2, [pc, #96]	; (8000cec <setLEDs+0x354>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	3301      	adds	r3, #1
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b69      	cmp	r3, #105	; 0x69
 8000c9c:	ddf4      	ble.n	8000c88 <setLEDs+0x2f0>
			}
			break;
 8000c9e:	e000      	b.n	8000ca2 <setLEDs+0x30a>
		default:
			break;
 8000ca0:	bf00      	nop
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 8000ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8000ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000caa:	2b0d      	cmp	r3, #13
 8000cac:	f77f ae7a 	ble.w	80009a4 <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0, (NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
 8000cb0:	23b2      	movs	r3, #178	; 0xb2
 8000cb2:	4a0f      	ldr	r2, [pc, #60]	; (8000cf0 <setLEDs+0x358>)
 8000cb4:	210c      	movs	r1, #12
 8000cb6:	480f      	ldr	r0, [pc, #60]	; (8000cf4 <setLEDs+0x35c>)
 8000cb8:	f00e fd82 	bl	800f7c0 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1, (NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
 8000cbc:	23b2      	movs	r3, #178	; 0xb2
 8000cbe:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <setLEDs+0x360>)
 8000cc0:	2108      	movs	r1, #8
 8000cc2:	480e      	ldr	r0, [pc, #56]	; (8000cfc <setLEDs+0x364>)
 8000cc4:	f00e fd7c 	bl	800f7c0 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2, (NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
 8000cc8:	236a      	movs	r3, #106	; 0x6a
 8000cca:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <setLEDs+0x368>)
 8000ccc:	2104      	movs	r1, #4
 8000cce:	480d      	ldr	r0, [pc, #52]	; (8000d04 <setLEDs+0x36c>)
 8000cd0:	f00e fd76 	bl	800f7c0 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3, (NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3
 8000cd4:	236a      	movs	r3, #106	; 0x6a
 8000cd6:	4a05      	ldr	r2, [pc, #20]	; (8000cec <setLEDs+0x354>)
 8000cd8:	2100      	movs	r1, #0
 8000cda:	480a      	ldr	r0, [pc, #40]	; (8000d04 <setLEDs+0x36c>)
 8000cdc:	f00e fd70 	bl	800f7c0 <HAL_TIM_PWM_Start_DMA>

}
 8000ce0:	bf00      	nop
 8000ce2:	3738      	adds	r7, #56	; 0x38
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	08018530 	.word	0x08018530
 8000cec:	240009a8 	.word	0x240009a8
 8000cf0:	24000270 	.word	0x24000270
 8000cf4:	240011b4 	.word	0x240011b4
 8000cf8:	24000538 	.word	0x24000538
 8000cfc:	240010d0 	.word	0x240010d0
 8000d00:	24000800 	.word	0x24000800
 8000d04:	2400111c 	.word	0x2400111c

08000d08 <LoRA_Read_Register>:
	}
}



uint8_t LoRA_Read_Register(uint8_t addr){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d18:	480d      	ldr	r0, [pc, #52]	; (8000d50 <LoRA_Read_Register+0x48>)
 8000d1a:	f007 f975 	bl	8008008 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d1e:	1df9      	adds	r1, r7, #7
 8000d20:	2364      	movs	r3, #100	; 0x64
 8000d22:	2201      	movs	r2, #1
 8000d24:	480b      	ldr	r0, [pc, #44]	; (8000d54 <LoRA_Read_Register+0x4c>)
 8000d26:	f00d ff0b 	bl	800eb40 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8000d2a:	f107 010f 	add.w	r1, r7, #15
 8000d2e:	2364      	movs	r3, #100	; 0x64
 8000d30:	2201      	movs	r2, #1
 8000d32:	4808      	ldr	r0, [pc, #32]	; (8000d54 <LoRA_Read_Register+0x4c>)
 8000d34:	f00e f900 	bl	800ef38 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d3e:	4804      	ldr	r0, [pc, #16]	; (8000d50 <LoRA_Read_Register+0x48>)
 8000d40:	f007 f962 	bl	8008008 <HAL_GPIO_WritePin>

	return reg_value;
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	58020000 	.word	0x58020000
 8000d54:	24001048 	.word	0x24001048

08000d58 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	460a      	mov	r2, r1
 8000d62:	71fb      	strb	r3, [r7, #7]
 8000d64:	4613      	mov	r3, r2
 8000d66:	71bb      	strb	r3, [r7, #6]
	addr |= (1<<7);
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d78:	480c      	ldr	r0, [pc, #48]	; (8000dac <LoRA_Write_Register+0x54>)
 8000d7a:	f007 f945 	bl	8008008 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d7e:	1df9      	adds	r1, r7, #7
 8000d80:	2364      	movs	r3, #100	; 0x64
 8000d82:	2201      	movs	r2, #1
 8000d84:	480a      	ldr	r0, [pc, #40]	; (8000db0 <LoRA_Write_Register+0x58>)
 8000d86:	f00d fedb 	bl	800eb40 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000d8a:	1db9      	adds	r1, r7, #6
 8000d8c:	2364      	movs	r3, #100	; 0x64
 8000d8e:	2201      	movs	r2, #1
 8000d90:	4807      	ldr	r0, [pc, #28]	; (8000db0 <LoRA_Write_Register+0x58>)
 8000d92:	f00d fed5 	bl	800eb40 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d96:	2201      	movs	r2, #1
 8000d98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d9c:	4803      	ldr	r0, [pc, #12]	; (8000dac <LoRA_Write_Register+0x54>)
 8000d9e:	f007 f933 	bl	8008008 <HAL_GPIO_WritePin>

}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	58020000 	.word	0x58020000
 8000db0:	24001048 	.word	0x24001048

08000db4 <LoRA_sleep>:


void LoRA_sleep(void){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000db8:	2180      	movs	r1, #128	; 0x80
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f7ff ffcc 	bl	8000d58 <LoRA_Write_Register>
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency){
 8000dc4:	b5b0      	push	{r4, r5, r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8000dcc:	6879      	ldr	r1, [r7, #4]
 8000dce:	17c8      	asrs	r0, r1, #31
 8000dd0:	460a      	mov	r2, r1
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	1355      	asrs	r5, r2, #13
 8000dd6:	04d4      	lsls	r4, r2, #19
 8000dd8:	4a18      	ldr	r2, [pc, #96]	; (8000e3c <LoRA_set_frequency+0x78>)
 8000dda:	f04f 0300 	mov.w	r3, #0
 8000dde:	4620      	mov	r0, r4
 8000de0:	4629      	mov	r1, r5
 8000de2:	f7ff fafd 	bl	80003e0 <__aeabi_uldivmod>
 8000de6:	4602      	mov	r2, r0
 8000de8:	460b      	mov	r3, r1
 8000dea:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8000dee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000df2:	f04f 0200 	mov.w	r2, #0
 8000df6:	f04f 0300 	mov.w	r3, #0
 8000dfa:	0c02      	lsrs	r2, r0, #16
 8000dfc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e00:	0c0b      	lsrs	r3, r1, #16
 8000e02:	b2d3      	uxtb	r3, r2
 8000e04:	4619      	mov	r1, r3
 8000e06:	2006      	movs	r0, #6
 8000e08:	f7ff ffa6 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t)(frf >> 8));
 8000e0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e10:	f04f 0200 	mov.w	r2, #0
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	0a02      	lsrs	r2, r0, #8
 8000e1a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000e1e:	0a0b      	lsrs	r3, r1, #8
 8000e20:	b2d3      	uxtb	r3, r2
 8000e22:	4619      	mov	r1, r3
 8000e24:	2007      	movs	r0, #7
 8000e26:	f7ff ff97 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8000e2a:	7a3b      	ldrb	r3, [r7, #8]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	2008      	movs	r0, #8
 8000e30:	f7ff ff92 	bl	8000d58 <LoRA_Write_Register>
}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e3c:	01e84800 	.word	0x01e84800

08000e40 <LoRA_idle>:

void LoRA_idle(){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8000e44:	2181      	movs	r1, #129	; 0x81
 8000e46:	2001      	movs	r0, #1
 8000e48:	f7ff ff86 	bl	8000d58 <LoRA_Write_Register>
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <LoRA_setOCP>:

void LoRA_setOCP(uint8_t mA){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
	  uint8_t ocpTrim = 27;
 8000e5a:	231b      	movs	r3, #27
 8000e5c:	73fb      	strb	r3, [r7, #15]

	  if (mA <= 120) {
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	2b78      	cmp	r3, #120	; 0x78
 8000e62:	d809      	bhi.n	8000e78 <LoRA_setOCP+0x28>
	    ocpTrim = (mA - 45) / 5;
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	3b2d      	subs	r3, #45	; 0x2d
 8000e68:	4a11      	ldr	r2, [pc, #68]	; (8000eb0 <LoRA_setOCP+0x60>)
 8000e6a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e6e:	1052      	asrs	r2, r2, #1
 8000e70:	17db      	asrs	r3, r3, #31
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	73fb      	strb	r3, [r7, #15]
 8000e76:	e00b      	b.n	8000e90 <LoRA_setOCP+0x40>
	  } else if (mA <=240) {
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	2bf0      	cmp	r3, #240	; 0xf0
 8000e7c:	d808      	bhi.n	8000e90 <LoRA_setOCP+0x40>
	    ocpTrim = (mA + 30) / 10;
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	331e      	adds	r3, #30
 8000e82:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <LoRA_setOCP+0x60>)
 8000e84:	fb82 1203 	smull	r1, r2, r2, r3
 8000e88:	1092      	asrs	r2, r2, #2
 8000e8a:	17db      	asrs	r3, r3, #31
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	73fb      	strb	r3, [r7, #15]
	  }

	  LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	f003 031f 	and.w	r3, r3, #31
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	f043 0320 	orr.w	r3, r3, #32
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	200b      	movs	r0, #11
 8000ea2:	f7ff ff59 	bl	8000d58 <LoRA_Write_Register>
}
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	66666667 	.word	0x66666667

08000eb4 <LoRA_setTxPower>:

void LoRA_setTxPower(int level){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
    // PA BOOST
    if (level > 17) {
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b11      	cmp	r3, #17
 8000ec0:	dd0f      	ble.n	8000ee2 <LoRA_setTxPower+0x2e>
      if (level > 20) {
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b14      	cmp	r3, #20
 8000ec6:	dd01      	ble.n	8000ecc <LoRA_setTxPower+0x18>
        level = 20;
 8000ec8:	2314      	movs	r3, #20
 8000eca:	607b      	str	r3, [r7, #4]
      }

      // subtract 3 from level, so 18 - 20 maps to 15 - 17
      level -= 3;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b03      	subs	r3, #3
 8000ed0:	607b      	str	r3, [r7, #4]

      // High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
      LoRA_Write_Register(REG_PA_DAC, 0x87);
 8000ed2:	2187      	movs	r1, #135	; 0x87
 8000ed4:	204d      	movs	r0, #77	; 0x4d
 8000ed6:	f7ff ff3f 	bl	8000d58 <LoRA_Write_Register>
      LoRA_setOCP(140);
 8000eda:	208c      	movs	r0, #140	; 0x8c
 8000edc:	f7ff ffb8 	bl	8000e50 <LoRA_setOCP>
 8000ee0:	e00b      	b.n	8000efa <LoRA_setTxPower+0x46>
    } else {
      if (level < 2) {
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	dc01      	bgt.n	8000eec <LoRA_setTxPower+0x38>
        level = 2;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	607b      	str	r3, [r7, #4]
      }
      //Default value PA_HF/LF or +17dBm
      LoRA_Write_Register(REG_PA_DAC, 0x84);
 8000eec:	2184      	movs	r1, #132	; 0x84
 8000eee:	204d      	movs	r0, #77	; 0x4d
 8000ef0:	f7ff ff32 	bl	8000d58 <LoRA_Write_Register>
      LoRA_setOCP(100);
 8000ef4:	2064      	movs	r0, #100	; 0x64
 8000ef6:	f7ff ffab 	bl	8000e50 <LoRA_setOCP>
    }

    LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	3b02      	subs	r3, #2
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	b25b      	sxtb	r3, r3
 8000f04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f08:	b25b      	sxtb	r3, r3
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	2009      	movs	r0, #9
 8000f10:	f7ff ff22 	bl	8000d58 <LoRA_Write_Register>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode(){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1, LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 8000f20:	201d      	movs	r0, #29
 8000f22:	f7ff fef1 	bl	8000d08 <LoRA_Read_Register>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f023 0301 	bic.w	r3, r3, #1
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	4619      	mov	r1, r3
 8000f30:	201d      	movs	r0, #29
 8000f32:	f7ff ff11 	bl	8000d58 <LoRA_Write_Register>
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <LoRA_begin>:

void LoRA_begin(long frequency){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b09c      	sub	sp, #112	; 0x70
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8000f44:	2201      	movs	r2, #1
 8000f46:	2101      	movs	r1, #1
 8000f48:	4822      	ldr	r0, [pc, #136]	; (8000fd4 <LoRA_begin+0x98>)
 8000f4a:	f007 f85d 	bl	8008008 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f54:	4820      	ldr	r0, [pc, #128]	; (8000fd8 <LoRA_begin+0x9c>)
 8000f56:	f007 f857 	bl	8008008 <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 8000f5a:	2042      	movs	r0, #66	; 0x42
 8000f5c:	f7ff fed4 	bl	8000d08 <LoRA_Read_Register>
 8000f60:	4603      	mov	r3, r0
 8000f62:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    char data_debug[100];
	sprintf( data_debug,  "%x\n", version);
 8000f66:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000f6a:	f107 0308 	add.w	r3, r7, #8
 8000f6e:	491b      	ldr	r1, [pc, #108]	; (8000fdc <LoRA_begin+0xa0>)
 8000f70:	4618      	mov	r0, r3
 8000f72:	f016 f891 	bl	8017098 <siprintf>
	CDC_Transmit_HS(data_debug, strlen(data_debug));
 8000f76:	f107 0308 	add.w	r3, r7, #8
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff f9d2 	bl	8000324 <strlen>
 8000f80:	4602      	mov	r2, r0
 8000f82:	f107 0308 	add.w	r3, r7, #8
 8000f86:	4611      	mov	r1, r2
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f015 fc31 	bl	80167f0 <CDC_Transmit_HS>

	LoRA_sleep();
 8000f8e:	f7ff ff11 	bl	8000db4 <LoRA_sleep>
	LoRA_set_frequency(868000000);
 8000f92:	4813      	ldr	r0, [pc, #76]	; (8000fe0 <LoRA_begin+0xa4>)
 8000f94:	f7ff ff16 	bl	8000dc4 <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 8000f98:	2100      	movs	r1, #0
 8000f9a:	200f      	movs	r0, #15
 8000f9c:	f7ff fedc 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	200e      	movs	r0, #14
 8000fa4:	f7ff fed8 	bl	8000d58 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 8000fa8:	200c      	movs	r0, #12
 8000faa:	f7ff fead 	bl	8000d08 <LoRA_Read_Register>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	f043 0303 	orr.w	r3, r3, #3
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	200c      	movs	r0, #12
 8000fba:	f7ff fecd 	bl	8000d58 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8000fbe:	2104      	movs	r1, #4
 8000fc0:	2026      	movs	r0, #38	; 0x26
 8000fc2:	f7ff fec9 	bl	8000d58 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 8000fc6:	2011      	movs	r0, #17
 8000fc8:	f7ff ff74 	bl	8000eb4 <LoRA_setTxPower>

}
 8000fcc:	bf00      	nop
 8000fce:	3770      	adds	r7, #112	; 0x70
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	58020c00 	.word	0x58020c00
 8000fd8:	58020000 	.word	0x58020000
 8000fdc:	0801837c 	.word	0x0801837c
 8000fe0:	33bca100 	.word	0x33bca100

08000fe4 <LoRA_beginPacket>:


void LoRA_beginPacket(){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 8000fe8:	f7ff ff98 	bl	8000f1c <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8000fec:	2100      	movs	r1, #0
 8000fee:	200d      	movs	r0, #13
 8000ff0:	f7ff feb2 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2022      	movs	r0, #34	; 0x22
 8000ff8:	f7ff feae 	bl	8000d58 <LoRA_Write_Register>
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <LoRA_endPacket>:

void LoRA_endPacket(){
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8001004:	2183      	movs	r1, #131	; 0x83
 8001006:	2001      	movs	r0, #1
 8001008:	f7ff fea6 	bl	8000d58 <LoRA_Write_Register>

	while((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0){
 800100c:	bf00      	nop
 800100e:	2012      	movs	r0, #18
 8001010:	f7ff fe7a 	bl	8000d08 <LoRA_Read_Register>
 8001014:	4603      	mov	r3, r0
 8001016:	f003 0308 	and.w	r3, r3, #8
 800101a:	2b00      	cmp	r3, #0
 800101c:	d0f7      	beq.n	800100e <LoRA_endPacket+0xe>

	}
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 800101e:	2185      	movs	r1, #133	; 0x85
 8001020:	2001      	movs	r0, #1
 8001022:	f7ff fe99 	bl	8000d58 <LoRA_Write_Register>

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8001026:	2108      	movs	r1, #8
 8001028:	2012      	movs	r0, #18
 800102a:	f7ff fe95 	bl	8000d58 <LoRA_Write_Register>

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}

08001032 <LoRA_parsePacket>:


int LoRA_parsePacket(){
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 800103c:	2012      	movs	r0, #18
 800103e:	f7ff fe63 	bl	8000d08 <LoRA_Read_Register>
 8001042:	4603      	mov	r3, r0
 8001044:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 8001046:	f7ff ff69 	bl	8000f1c <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	4619      	mov	r1, r3
 8001050:	2012      	movs	r0, #18
 8001052:	f7ff fe81 	bl	8000d58 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800105c:	2b00      	cmp	r3, #0
 800105e:	d016      	beq.n	800108e <LoRA_parsePacket+0x5c>
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	f003 0320 	and.w	r3, r3, #32
 8001066:	2b00      	cmp	r3, #0
 8001068:	d111      	bne.n	800108e <LoRA_parsePacket+0x5c>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 800106a:	2013      	movs	r0, #19
 800106c:	f7ff fe4c 	bl	8000d08 <LoRA_Read_Register>
 8001070:	4603      	mov	r3, r0
 8001072:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 8001074:	2010      	movs	r0, #16
 8001076:	f7ff fe47 	bl	8000d08 <LoRA_Read_Register>
 800107a:	4603      	mov	r3, r0
 800107c:	4619      	mov	r1, r3
 800107e:	200d      	movs	r0, #13
 8001080:	f7ff fe6a 	bl	8000d58 <LoRA_Write_Register>
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8001084:	2185      	movs	r1, #133	; 0x85
 8001086:	2001      	movs	r0, #1
 8001088:	f7ff fe66 	bl	8000d58 <LoRA_Write_Register>
 800108c:	e00d      	b.n	80010aa <LoRA_parsePacket+0x78>

		//LoRA_idle();
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS)){
 800108e:	2001      	movs	r0, #1
 8001090:	f7ff fe3a 	bl	8000d08 <LoRA_Read_Register>
 8001094:	4603      	mov	r3, r0
 8001096:	2b85      	cmp	r3, #133	; 0x85
 8001098:	d007      	beq.n	80010aa <LoRA_parsePacket+0x78>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 800109a:	2100      	movs	r1, #0
 800109c:	200d      	movs	r0, #13
 800109e:	f7ff fe5b 	bl	8000d58 <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 80010a2:	2185      	movs	r1, #133	; 0x85
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff fe57 	bl	8000d58 <LoRA_Write_Register>
	}
	return packetLenght;
 80010aa:	687b      	ldr	r3, [r7, #4]

}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <LoRA_sendPacket>:

void LoRA_sendPacket(char * data){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	LoRA_idle();
 80010bc:	f7ff fec0 	bl	8000e40 <LoRA_idle>
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 80010c0:	2012      	movs	r0, #18
 80010c2:	f7ff fe21 	bl	8000d08 <LoRA_Read_Register>
 80010c6:	4603      	mov	r3, r0
 80010c8:	60bb      	str	r3, [r7, #8]
	/*char debug[250];
	sprintf(debug, "here: %d\n", (irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK));
	CDC_Transmit_HS(debug, strlen(debug));
	HAL_Delay(100);*/
	if(!((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0))
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d004      	beq.n	80010de <LoRA_sendPacket+0x2a>
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	f003 0320 	and.w	r3, r3, #32
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d022      	beq.n	8001124 <LoRA_sendPacket+0x70>
	{
		//CDC_Transmit_HS("here1\n", strlen("here1\n"));
		LoRA_beginPacket();
 80010de:	f7ff ff81 	bl	8000fe4 <LoRA_beginPacket>
    	for(int i = 0; i < strlen(data); i++){
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	e00a      	b.n	80010fe <LoRA_sendPacket+0x4a>
    		LoRA_Write_Register(REG_FIFO, data[i]);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	2000      	movs	r0, #0
 80010f4:	f7ff fe30 	bl	8000d58 <LoRA_Write_Register>
    	for(int i = 0; i < strlen(data); i++){
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	3301      	adds	r3, #1
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff f910 	bl	8000324 <strlen>
 8001104:	4602      	mov	r2, r0
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	429a      	cmp	r2, r3
 800110a:	d8ed      	bhi.n	80010e8 <LoRA_sendPacket+0x34>
    	}
    	LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff f909 	bl	8000324 <strlen>
 8001112:	4603      	mov	r3, r0
 8001114:	b2db      	uxtb	r3, r3
 8001116:	4619      	mov	r1, r3
 8001118:	2022      	movs	r0, #34	; 0x22
 800111a:	f7ff fe1d 	bl	8000d58 <LoRA_Write_Register>
    	LoRA_endPacket();
 800111e:	f7ff ff6f 	bl	8001000 <LoRA_endPacket>
 8001122:	e004      	b.n	800112e <LoRA_sendPacket+0x7a>
    	HAL_Delay(100);
    	CDC_Transmit_HS(sent, strlen(sent));*/
	}
	else {
		//CDC_Transmit_HS("here2\n", strlen("here2\n"));
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8001124:	2185      	movs	r1, #133	; 0x85
 8001126:	2001      	movs	r0, #1
 8001128:	f7ff fe16 	bl	8000d58 <LoRA_Write_Register>
	}
	/*char sent[300];
	sprintf(sent, "\nsent: %s\n", data);
	HAL_Delay(100);
	CDC_Transmit_HS(sent, strlen(sent));*/
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <disarm>:
	int status = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
	return status;
}

int disarm(char* state)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 8001140:	2200      	movs	r2, #0
 8001142:	2102      	movs	r1, #2
 8001144:	4827      	ldr	r0, [pc, #156]	; (80011e4 <disarm+0xac>)
 8001146:	f006 ff5f 	bl	8008008 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2104      	movs	r1, #4
 800114e:	4825      	ldr	r0, [pc, #148]	; (80011e4 <disarm+0xac>)
 8001150:	f006 ff5a 	bl	8008008 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 8001154:	2200      	movs	r2, #0
 8001156:	2102      	movs	r1, #2
 8001158:	4823      	ldr	r0, [pc, #140]	; (80011e8 <disarm+0xb0>)
 800115a:	f006 ff55 	bl	8008008 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001164:	4821      	ldr	r0, [pc, #132]	; (80011ec <disarm+0xb4>)
 8001166:	f006 ff4f 	bl	8008008 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 800116a:	2200      	movs	r2, #0
 800116c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001170:	481e      	ldr	r0, [pc, #120]	; (80011ec <disarm+0xb4>)
 8001172:	f006 ff49 	bl	8008008 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800117c:	481b      	ldr	r0, [pc, #108]	; (80011ec <disarm+0xb4>)
 800117e:	f006 ff43 	bl	8008008 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2102      	movs	r1, #2
 8001186:	481a      	ldr	r0, [pc, #104]	; (80011f0 <disarm+0xb8>)
 8001188:	f006 ff3e 	bl	8008008 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001192:	4818      	ldr	r0, [pc, #96]	; (80011f4 <disarm+0xbc>)
 8001194:	f006 ff38 	bl	8008008 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 8001198:	2200      	movs	r2, #0
 800119a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800119e:	4815      	ldr	r0, [pc, #84]	; (80011f4 <disarm+0xbc>)
 80011a0:	f006 ff32 	bl	8008008 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011aa:	4812      	ldr	r0, [pc, #72]	; (80011f4 <disarm+0xbc>)
 80011ac:	f006 ff2c 	bl	8008008 <HAL_GPIO_WritePin>

  LED_Color_Data[7][0] = 255;
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <disarm+0xc0>)
 80011b2:	22ff      	movs	r2, #255	; 0xff
 80011b4:	655a      	str	r2, [r3, #84]	; 0x54
  LED_Color_Data[7][1] = 0;
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <disarm+0xc0>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	659a      	str	r2, [r3, #88]	; 0x58
  LED_Color_Data[7][2] = 0;
 80011bc:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <disarm+0xc0>)
 80011be:	2200      	movs	r2, #0
 80011c0:	65da      	str	r2, [r3, #92]	; 0x5c
  setLEDs();
 80011c2:	f7ff fbe9 	bl	8000998 <setLEDs>

  strcpy(state,"DISARMED");
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	490c      	ldr	r1, [pc, #48]	; (80011fc <disarm+0xc4>)
 80011ca:	461a      	mov	r2, r3
 80011cc:	460b      	mov	r3, r1
 80011ce:	cb03      	ldmia	r3!, {r0, r1}
 80011d0:	6010      	str	r0, [r2, #0]
 80011d2:	6051      	str	r1, [r2, #4]
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	7213      	strb	r3, [r2, #8]
  return 0;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	58020000 	.word	0x58020000
 80011e8:	58020400 	.word	0x58020400
 80011ec:	58021400 	.word	0x58021400
 80011f0:	58021800 	.word	0x58021800
 80011f4:	58021000 	.word	0x58021000
 80011f8:	24000b50 	.word	0x24000b50
 80011fc:	08018380 	.word	0x08018380

08001200 <recv_packet>:
  setLEDs();
  return 0;
}

int recv_packet(char* LoRA_data, int max_length)
{
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  int packet_length = LoRA_parsePacket();
 800120a:	f7ff ff12 	bl	8001032 <LoRA_parsePacket>
 800120e:	60b8      	str	r0, [r7, #8]
  if(max_length-1 < packet_length) //-1 for the null terminator
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	429a      	cmp	r2, r3
 8001216:	dc01      	bgt.n	800121c <recv_packet+0x1c>
  {
    return 0;
 8001218:	2300      	movs	r3, #0
 800121a:	e01c      	b.n	8001256 <recv_packet+0x56>
  }
  if(packet_length){
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d018      	beq.n	8001254 <recv_packet+0x54>
    for(int i = 0; i < packet_length; i++){
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	e00a      	b.n	800123e <recv_packet+0x3e>
      LoRA_data[i] = LoRA_Read_Register(0x00);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	18d4      	adds	r4, r2, r3
 800122e:	2000      	movs	r0, #0
 8001230:	f7ff fd6a 	bl	8000d08 <LoRA_Read_Register>
 8001234:	4603      	mov	r3, r0
 8001236:	7023      	strb	r3, [r4, #0]
    for(int i = 0; i < packet_length; i++){
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	3301      	adds	r3, #1
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	429a      	cmp	r2, r3
 8001244:	dbf0      	blt.n	8001228 <recv_packet+0x28>
    }
    LoRA_data[packet_length] = '\0';
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	4413      	add	r3, r2
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]

    /*char rec[300];
    sprintf(rec, "received: %s\n", LoRA_data);
    CDC_Transmit_HS(rec, strlen(rec));*/
    return packet_length;
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	e000      	b.n	8001256 <recv_packet+0x56>
  }
  else{
    return 0;
 8001254:	2300      	movs	r3, #0
  }
}
 8001256:	4618      	mov	r0, r3
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	bd90      	pop	{r4, r7, pc}

0800125e <reliable_send_packet>:

void reliable_send_packet(char *LoRA_data) {
 800125e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001262:	b087      	sub	sp, #28
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	466b      	mov	r3, sp
 800126a:	461e      	mov	r6, r3
	//CDC_Transmit_HS("debug\n", strlen("debug\n"));
	uint16_t length = strlen(LoRA_data) + 1; //+1 for the \0
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff f859 	bl	8000324 <strlen>
 8001272:	4603      	mov	r3, r0
 8001274:	b29b      	uxth	r3, r3
 8001276:	3301      	adds	r3, #1
 8001278:	827b      	strh	r3, [r7, #18]
	char acknowledge[length];
 800127a:	8a79      	ldrh	r1, [r7, #18]
 800127c:	460b      	mov	r3, r1
 800127e:	3b01      	subs	r3, #1
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	b28b      	uxth	r3, r1
 8001284:	2200      	movs	r2, #0
 8001286:	4698      	mov	r8, r3
 8001288:	4691      	mov	r9, r2
 800128a:	f04f 0200 	mov.w	r2, #0
 800128e:	f04f 0300 	mov.w	r3, #0
 8001292:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001296:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800129a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800129e:	b28b      	uxth	r3, r1
 80012a0:	2200      	movs	r2, #0
 80012a2:	461c      	mov	r4, r3
 80012a4:	4615      	mov	r5, r2
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	f04f 0300 	mov.w	r3, #0
 80012ae:	00eb      	lsls	r3, r5, #3
 80012b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012b4:	00e2      	lsls	r2, r4, #3
 80012b6:	460b      	mov	r3, r1
 80012b8:	3307      	adds	r3, #7
 80012ba:	08db      	lsrs	r3, r3, #3
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	ebad 0d03 	sub.w	sp, sp, r3
 80012c2:	466b      	mov	r3, sp
 80012c4:	3300      	adds	r3, #0
 80012c6:	60bb      	str	r3, [r7, #8]
	uint32_t lastTime = HAL_GetTick();
 80012c8:	f002 fbe0 	bl	8003a8c <HAL_GetTick>
 80012cc:	6178      	str	r0, [r7, #20]
	LoRA_sendPacket(LoRA_data);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff fef0 	bl	80010b4 <LoRA_sendPacket>
	while (1) {

		if (recv_packet(acknowledge, length)) {
 80012d4:	8a7b      	ldrh	r3, [r7, #18]
 80012d6:	4619      	mov	r1, r3
 80012d8:	68b8      	ldr	r0, [r7, #8]
 80012da:	f7ff ff91 	bl	8001200 <recv_packet>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d009      	beq.n	80012f8 <reliable_send_packet+0x9a>
			//cehck crc
			if (strcmp(acknowledge, LoRA_data) != 0) {
 80012e4:	6879      	ldr	r1, [r7, #4]
 80012e6:	68b8      	ldr	r0, [r7, #8]
 80012e8:	f7ff f812 	bl	8000310 <strcmp>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d011      	beq.n	8001316 <reliable_send_packet+0xb8>
				LoRA_sendPacket(LoRA_data);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff fede 	bl	80010b4 <LoRA_sendPacket>
			} else {
				break;
			}
		}

		if (HAL_GetTick() - lastTime > 1000) {
 80012f8:	f002 fbc8 	bl	8003a8c <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001306:	d9e5      	bls.n	80012d4 <reliable_send_packet+0x76>
	    	//CDC_Transmit_HS("debug\n", strlen("debug\n"));
			LoRA_sendPacket(LoRA_data);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff fed3 	bl	80010b4 <LoRA_sendPacket>
			lastTime = HAL_GetTick();
 800130e:	f002 fbbd 	bl	8003a8c <HAL_GetTick>
 8001312:	6178      	str	r0, [r7, #20]
		if (recv_packet(acknowledge, length)) {
 8001314:	e7de      	b.n	80012d4 <reliable_send_packet+0x76>
				break;
 8001316:	bf00      	nop
 8001318:	46b5      	mov	sp, r6
		}
	}
}
 800131a:	bf00      	nop
 800131c:	371c      	adds	r7, #28
 800131e:	46bd      	mov	sp, r7
 8001320:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001324 <usbReceiveHandle>:

		reliable_send_packet(message);
	}
}

int usbReceiveHandle(char* output){
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	uint32_t temp = usbBytesReady;
 800132c:	4b0b      	ldr	r3, [pc, #44]	; (800135c <usbReceiveHandle+0x38>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	60fb      	str	r3, [r7, #12]

	if(temp > 0){
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d00c      	beq.n	8001352 <usbReceiveHandle+0x2e>
		if(temp > 256){
			//crash(2);
		}
		memcpy(output, usbDataBuffer, temp);
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	4909      	ldr	r1, [pc, #36]	; (8001360 <usbReceiveHandle+0x3c>)
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f015 ff35 	bl	80171ac <memcpy>
		output[temp] = '\0';
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4413      	add	r3, r2
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]
		usbBytesReady = 0;
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <usbReceiveHandle+0x38>)
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
	}
	return temp;
 8001352:	68fb      	ldr	r3, [r7, #12]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	2400026c 	.word	0x2400026c
 8001360:	2400016c 	.word	0x2400016c
 8001364:	00000000 	.word	0x00000000

08001368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800136a:	f6ad 4d14 	subw	sp, sp, #3092	; 0xc14
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 8001370:	4bdb      	ldr	r3, [pc, #876]	; (80016e0 <main+0x378>)
 8001372:	f507 6439 	add.w	r4, r7, #2960	; 0xb90
 8001376:	461d      	mov	r5, r3
 8001378:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800137a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800137c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001380:	c403      	stmia	r4!, {r0, r1}
 8001382:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001384:	f002 fafc 	bl	8003980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001388:	f000 fb82 	bl	8001a90 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800138c:	f000 fbf8 	bl	8001b80 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001390:	f001 f980 	bl	8002694 <MX_GPIO_Init>
  MX_DMA_Init();
 8001394:	f001 f91e 	bl	80025d4 <MX_DMA_Init>
  MX_SPI3_Init();
 8001398:	f000 fe78 	bl	800208c <MX_SPI3_Init>
  MX_FDCAN3_Init();
 800139c:	f000 fd08 	bl	8001db0 <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 80013a0:	f001 f8cc 	bl	800253c <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80013a4:	f000 fc1e 	bl	8001be4 <MX_ADC1_Init>
  MX_TIM4_Init();
 80013a8:	f000 ff82 	bl	80022b0 <MX_TIM4_Init>
  MX_ADC3_Init();
 80013ac:	f000 fc92 	bl	8001cd4 <MX_ADC3_Init>
  MX_SPI2_Init();
 80013b0:	f000 fe16 	bl	8001fe0 <MX_SPI2_Init>
  MX_I2C2_Init();
 80013b4:	f000 fd60 	bl	8001e78 <MX_I2C2_Init>
  MX_TIM2_Init();
 80013b8:	f000 febe 	bl	8002138 <MX_TIM2_Init>
  MX_TIM5_Init();
 80013bc:	f000 fff4 	bl	80023a8 <MX_TIM5_Init>
  MX_TIM3_Init();
 80013c0:	f000 ff12 	bl	80021e8 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80013c4:	f015 f93e 	bl	8016644 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80013c8:	f000 fdb4 	bl	8001f34 <MX_SPI1_Init>
  MX_UART4_Init();
 80013cc:	f001 f86a 	bl	80024a4 <MX_UART4_Init>
  MX_FATFS_Init();
 80013d0:	f012 fecc 	bl	801416c <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 80013d4:	f000 fd90 	bl	8001ef8 <MX_SDMMC2_SD_Init>
  MX_TIM13_Init();
 80013d8:	f001 f840 	bl	800245c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

	const int MAX = 50;
 80013dc:	2332      	movs	r3, #50	; 0x32
 80013de:	f8c7 3bf4 	str.w	r3, [r7, #3060]	; 0xbf4
	const double SPEED = 2.0/2000;
 80013e2:	a3bd      	add	r3, pc, #756	; (adr r3, 80016d8 <main+0x370>)
 80013e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e8:	f607 31e8 	addw	r1, r7, #3048	; 0xbe8
 80013ec:	e9c1 2300 	strd	r2, r3, [r1]
	const double r_offset = 0;
 80013f0:	f04f 0200 	mov.w	r2, #0
 80013f4:	f04f 0300 	mov.w	r3, #0
 80013f8:	f507 613e 	add.w	r1, r7, #3040	; 0xbe0
 80013fc:	e9c1 2300 	strd	r2, r3, [r1]
	const double g_offset = 1;
 8001400:	f04f 0200 	mov.w	r2, #0
 8001404:	4bb7      	ldr	r3, [pc, #732]	; (80016e4 <main+0x37c>)
 8001406:	f607 31d8 	addw	r1, r7, #3032	; 0xbd8
 800140a:	e9c1 2300 	strd	r2, r3, [r1]
	const double b_offset = 2;
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001416:	f507 613d 	add.w	r1, r7, #3024	; 0xbd0
 800141a:	e9c1 2300 	strd	r2, r3, [r1]

	LG2_Write_Register(0x10, 0b00111100); //Accelerometer setup - CTRL1_XL
 800141e:	213c      	movs	r1, #60	; 0x3c
 8001420:	2010      	movs	r0, #16
 8001422:	f7ff f9af 	bl	8000784 <LG2_Write_Register>
	LG2_Write_Register(0x11, 0b00110000); //Gyroscope setup - CTRL2_G
 8001426:	2130      	movs	r1, #48	; 0x30
 8001428:	2011      	movs	r0, #17
 800142a:	f7ff f9ab 	bl	8000784 <LG2_Write_Register>
	LG2_Write_Register(0x13, 0b00000100); //disables I2C - CTRL4_C
 800142e:	2104      	movs	r1, #4
 8001430:	2013      	movs	r0, #19
 8001432:	f7ff f9a7 	bl	8000784 <LG2_Write_Register>

	HAL_Delay(3000);
 8001436:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800143a:	f002 fb33 	bl	8003aa4 <HAL_Delay>
	HG2_Write_Register(0x1C, 0b10111111);
 800143e:	21bf      	movs	r1, #191	; 0xbf
 8001440:	201c      	movs	r0, #28
 8001442:	f7ff f94b 	bl	80006dc <HG2_Write_Register>
	HAL_Delay(2);
 8001446:	2002      	movs	r0, #2
 8001448:	f002 fb2c 	bl	8003aa4 <HAL_Delay>

	HG2_Write_Register(0x1B, 0b01011000);
 800144c:	2158      	movs	r1, #88	; 0x58
 800144e:	201b      	movs	r0, #27
 8001450:	f7ff f944 	bl	80006dc <HG2_Write_Register>
	HG2_Write_Register(0x1B, 0b11011000);
 8001454:	21d8      	movs	r1, #216	; 0xd8
 8001456:	201b      	movs	r0, #27
 8001458:	f7ff f940 	bl	80006dc <HG2_Write_Register>

	float rotZ = 0;
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	f607 32cc 	addw	r2, r7, #3020	; 0xbcc
 8001464:	6013      	str	r3, [r2, #0]
	uint32_t lastTime = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	f8c7 3c0c 	str.w	r3, [r7, #3084]	; 0xc0c

	float calOmegaX = 0;
 800146c:	f04f 0300 	mov.w	r3, #0
 8001470:	f607 4208 	addw	r2, r7, #3080	; 0xc08
 8001474:	6013      	str	r3, [r2, #0]
	float calOmegaY = 0;
 8001476:	f04f 0300 	mov.w	r3, #0
 800147a:	f607 4204 	addw	r2, r7, #3076	; 0xc04
 800147e:	6013      	str	r3, [r2, #0]
	float calOmegaZ = 0;
 8001480:	f04f 0300 	mov.w	r3, #0
 8001484:	f507 6240 	add.w	r2, r7, #3072	; 0xc00
 8001488:	6013      	str	r3, [r2, #0]
	//HAL_Delay(2000);
	for(int i = 0; i < 500; i++){
 800148a:	2300      	movs	r3, #0
 800148c:	f8c7 3bfc 	str.w	r3, [r7, #3068]	; 0xbfc
 8001490:	e02e      	b.n	80014f0 <main+0x188>
		calOmegaX += LG2_Get_Gyro_X();
 8001492:	f7ff f99f 	bl	80007d4 <LG2_Get_Gyro_X>
 8001496:	eeb0 7a40 	vmov.f32	s14, s0
 800149a:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 800149e:	edd3 7a00 	vldr	s15, [r3]
 80014a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014a6:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 80014aa:	edc3 7a00 	vstr	s15, [r3]
		calOmegaY += LG2_Get_Gyro_Y();
 80014ae:	f7ff f9c1 	bl	8000834 <LG2_Get_Gyro_Y>
 80014b2:	eeb0 7a40 	vmov.f32	s14, s0
 80014b6:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 80014ba:	edd3 7a00 	vldr	s15, [r3]
 80014be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014c2:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 80014c6:	edc3 7a00 	vstr	s15, [r3]
		calOmegaZ += LG2_Get_Gyro_Z();
 80014ca:	f7ff f9e5 	bl	8000898 <LG2_Get_Gyro_Z>
 80014ce:	eeb0 7a40 	vmov.f32	s14, s0
 80014d2:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80014d6:	edd3 7a00 	vldr	s15, [r3]
 80014da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014de:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80014e2:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < 500; i++){
 80014e6:	f8d7 3bfc 	ldr.w	r3, [r7, #3068]	; 0xbfc
 80014ea:	3301      	adds	r3, #1
 80014ec:	f8c7 3bfc 	str.w	r3, [r7, #3068]	; 0xbfc
 80014f0:	f8d7 3bfc 	ldr.w	r3, [r7, #3068]	; 0xbfc
 80014f4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014f8:	dbcb      	blt.n	8001492 <main+0x12a>

		//HAL_Delay(20);
	}
	calOmegaX /= 500;
 80014fa:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 80014fe:	ed93 7a00 	vldr	s14, [r3]
 8001502:	eddf 6a79 	vldr	s13, [pc, #484]	; 80016e8 <main+0x380>
 8001506:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800150a:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 800150e:	edc3 7a00 	vstr	s15, [r3]
	calOmegaY /= 500;
 8001512:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 8001516:	ed93 7a00 	vldr	s14, [r3]
 800151a:	eddf 6a73 	vldr	s13, [pc, #460]	; 80016e8 <main+0x380>
 800151e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001522:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 8001526:	edc3 7a00 	vstr	s15, [r3]
	calOmegaZ /= 500;
 800152a:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 800152e:	ed93 7a00 	vldr	s14, [r3]
 8001532:	eddf 6a6d 	vldr	s13, [pc, #436]	; 80016e8 <main+0x380>
 8001536:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800153a:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 800153e:	edc3 7a00 	vstr	s15, [r3]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001542:	2201      	movs	r2, #1
 8001544:	2101      	movs	r1, #1
 8001546:	4869      	ldr	r0, [pc, #420]	; (80016ec <main+0x384>)
 8001548:	f006 fd5e 	bl	8008008 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800154c:	20c8      	movs	r0, #200	; 0xc8
 800154e:	f002 faa9 	bl	8003aa4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 8001552:	2200      	movs	r2, #0
 8001554:	2101      	movs	r1, #1
 8001556:	4865      	ldr	r0, [pc, #404]	; (80016ec <main+0x384>)
 8001558:	f006 fd56 	bl	8008008 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800155c:	20c8      	movs	r0, #200	; 0xc8
 800155e:	f002 faa1 	bl	8003aa4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001562:	2201      	movs	r2, #1
 8001564:	2101      	movs	r1, #1
 8001566:	4861      	ldr	r0, [pc, #388]	; (80016ec <main+0x384>)
 8001568:	f006 fd4e 	bl	8008008 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800156c:	20c8      	movs	r0, #200	; 0xc8
 800156e:	f002 fa99 	bl	8003aa4 <HAL_Delay>


	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 8001572:	2201      	movs	r2, #1
 8001574:	2104      	movs	r1, #4
 8001576:	485e      	ldr	r0, [pc, #376]	; (80016f0 <main+0x388>)
 8001578:	f006 fd46 	bl	8008008 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 800157c:	2201      	movs	r2, #1
 800157e:	2108      	movs	r1, #8
 8001580:	485b      	ldr	r0, [pc, #364]	; (80016f0 <main+0x388>)
 8001582:	f006 fd41 	bl	8008008 <HAL_GPIO_WritePin>


    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001586:	2100      	movs	r1, #0
 8001588:	485a      	ldr	r0, [pc, #360]	; (80016f4 <main+0x38c>)
 800158a:	f00d fffd 	bl	800f588 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800158e:	2104      	movs	r1, #4
 8001590:	4858      	ldr	r0, [pc, #352]	; (80016f4 <main+0x38c>)
 8001592:	f00d fff9 	bl	800f588 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001596:	2108      	movs	r1, #8
 8001598:	4856      	ldr	r0, [pc, #344]	; (80016f4 <main+0x38c>)
 800159a:	f00d fff5 	bl	800f588 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800159e:	210c      	movs	r1, #12
 80015a0:	4854      	ldr	r0, [pc, #336]	; (80016f4 <main+0x38c>)
 80015a2:	f00d fff1 	bl	800f588 <HAL_TIM_PWM_Start>

    setServo(1, 90);
 80015a6:	ed9f 0a54 	vldr	s0, [pc, #336]	; 80016f8 <main+0x390>
 80015aa:	2001      	movs	r0, #1
 80015ac:	f7ff f9ac 	bl	8000908 <setServo>
    setServo(2, 180);
 80015b0:	ed9f 0a52 	vldr	s0, [pc, #328]	; 80016fc <main+0x394>
 80015b4:	2002      	movs	r0, #2
 80015b6:	f7ff f9a7 	bl	8000908 <setServo>
    setServo(3, 0);
 80015ba:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8001700 <main+0x398>
 80015be:	2003      	movs	r0, #3
 80015c0:	f7ff f9a2 	bl	8000908 <setServo>
    setServo(4, 45);
 80015c4:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8001704 <main+0x39c>
 80015c8:	2004      	movs	r0, #4
 80015ca:	f7ff f99d 	bl	8000908 <setServo>
		LoRA_sendPacket("whatever");
		HAL_Delay(1000);
	}
*/

	int connected = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	f8c7 3bc8 	str.w	r3, [r7, #3016]	; 0xbc8
	long last_packet = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f8c7 3bc4 	str.w	r3, [r7, #3012]	; 0xbc4
	int ARMED = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	f8c7 3bc0 	str.w	r3, [r7, #3008]	; 0xbc0

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);

  int max_packet_count = 0;
 80015e0:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80015e4:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
  int stream_counter = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	f8c7 3bbc 	str.w	r3, [r7, #3004]	; 0xbbc
  char state[MAX_PAYLOAD_LENGHT] = "";
 80015f2:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80015f6:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	3304      	adds	r3, #4
 8001600:	22f6      	movs	r2, #246	; 0xf6
 8001602:	2100      	movs	r1, #0
 8001604:	4618      	mov	r0, r3
 8001606:	f015 fd95 	bl	8017134 <memset>
  char command[MAX_PAYLOAD_LENGHT];
  char acknowledge[MAX_PAYLOAD_LENGHT];
  char previous_packet[MAX_PAYLOAD_LENGHT] = "";
 800160a:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 800160e:	f5a3 63db 	sub.w	r3, r3, #1752	; 0x6d8
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	3304      	adds	r3, #4
 8001618:	22f6      	movs	r2, #246	; 0xf6
 800161a:	2100      	movs	r1, #0
 800161c:	4618      	mov	r0, r3
 800161e:	f015 fd89 	bl	8017134 <memset>
  char recieved_packet[MAX_PAYLOAD_LENGHT];
  char response_packet[MAX_PAYLOAD_LENGHT];
  char sendMessage[MAX_PAYLOAD_LENGHT];
  int last = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	f8c7 3bb8 	str.w	r3, [r7, #3000]	; 0xbb8
  int packets_streamed = 50;
 8001628:	2332      	movs	r3, #50	; 0x32
 800162a:	f8c7 3bb4 	str.w	r3, [r7, #2996]	; 0xbb4
  int packetId;
  int have_recieved_anything = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
  char communication_state[50] = "SENDING RELIABLE";
 8001634:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001638:	f5a3 6620 	sub.w	r6, r3, #2560	; 0xa00
 800163c:	4b32      	ldr	r3, [pc, #200]	; (8001708 <main+0x3a0>)
 800163e:	4634      	mov	r4, r6
 8001640:	461d      	mov	r5, r3
 8001642:	6828      	ldr	r0, [r5, #0]
 8001644:	6869      	ldr	r1, [r5, #4]
 8001646:	68aa      	ldr	r2, [r5, #8]
 8001648:	68eb      	ldr	r3, [r5, #12]
 800164a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800164c:	7c2b      	ldrb	r3, [r5, #16]
 800164e:	7023      	strb	r3, [r4, #0]
 8001650:	f106 0311 	add.w	r3, r6, #17
 8001654:	2221      	movs	r2, #33	; 0x21
 8001656:	2100      	movs	r1, #0
 8001658:	4618      	mov	r0, r3
 800165a:	f015 fd6b 	bl	8017134 <memset>
  uint32_t previousTime = HAL_GetTick();
 800165e:	f002 fa15 	bl	8003a8c <HAL_GetTick>
 8001662:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
  disarm(state);
 8001666:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fd64 	bl	8001138 <disarm>
  LoRA_begin(868000000);
 8001670:	4826      	ldr	r0, [pc, #152]	; (800170c <main+0x3a4>)
 8001672:	f7ff fc63 	bl	8000f3c <LoRA_begin>
	sprintf(debug, "Debug: %s\n", input);
	CDC_Transmit_HS(debug, strlen(debug));
  }*/

while (1) {
    if(strcmp(communication_state,"RECEIVING RELIABLE") == 0)
 8001676:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800167a:	4925      	ldr	r1, [pc, #148]	; (8001710 <main+0x3a8>)
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe fe47 	bl	8000310 <strcmp>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	f040 8089 	bne.w	800179c <main+0x434>
    {
      if(recv_packet(recieved_packet, MAX_PAYLOAD_LENGHT))
 800168a:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800168e:	21fa      	movs	r1, #250	; 0xfa
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fdb5 	bl	8001200 <recv_packet>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	f000 81c6 	beq.w	8001a2a <main+0x6c2>
      {
    	have_recieved_anything = 1;
 800169e:	2301      	movs	r3, #1
 80016a0:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
        previousTime = HAL_GetTick();
 80016a4:	f002 f9f2 	bl	8003a8c <HAL_GetTick>
 80016a8:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        //HAL_Delay(100);
        //CDC_Transmit_HS("is arm 0succ\n", strlen("is arm 0succ\n"));
        //HAL_Delay(100);
        if(sscanf(recieved_packet, "$ %s", state) == 1)
 80016ac:	f607 022c 	addw	r2, r7, #2092	; 0x82c
 80016b0:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80016b4:	4917      	ldr	r1, [pc, #92]	; (8001714 <main+0x3ac>)
 80016b6:	4618      	mov	r0, r3
 80016b8:	f015 fd0e 	bl	80170d8 <siscanf>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d12a      	bne.n	8001718 <main+0x3b0>
        {
          strcpy(communication_state,"SENDING RELIABLE");
 80016c2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80016c6:	4a10      	ldr	r2, [pc, #64]	; (8001708 <main+0x3a0>)
 80016c8:	461c      	mov	r4, r3
 80016ca:	4615      	mov	r5, r2
 80016cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016d0:	682b      	ldr	r3, [r5, #0]
 80016d2:	7023      	strb	r3, [r4, #0]
 80016d4:	e1a9      	b.n	8001a2a <main+0x6c2>
 80016d6:	bf00      	nop
 80016d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80016dc:	3f50624d 	.word	0x3f50624d
 80016e0:	0801847c 	.word	0x0801847c
 80016e4:	3ff00000 	.word	0x3ff00000
 80016e8:	43fa0000 	.word	0x43fa0000
 80016ec:	58020c00 	.word	0x58020c00
 80016f0:	58021800 	.word	0x58021800
 80016f4:	24001168 	.word	0x24001168
 80016f8:	42b40000 	.word	0x42b40000
 80016fc:	43340000 	.word	0x43340000
 8001700:	00000000 	.word	0x00000000
 8001704:	42340000 	.word	0x42340000
 8001708:	080183e8 	.word	0x080183e8
 800170c:	33bca100 	.word	0x33bca100
 8001710:	080183cc 	.word	0x080183cc
 8001714:	080183e0 	.word	0x080183e0
        }
        else if(sscanf(recieved_packet, "! %d", &max_packet_count) == 1)
 8001718:	f607 1228 	addw	r2, r7, #2344	; 0x928
 800171c:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001720:	49cd      	ldr	r1, [pc, #820]	; (8001a58 <main+0x6f0>)
 8001722:	4618      	mov	r0, r3
 8001724:	f015 fcd8 	bl	80170d8 <siscanf>
 8001728:	4603      	mov	r3, r0
 800172a:	2b01      	cmp	r3, #1
 800172c:	d10b      	bne.n	8001746 <main+0x3de>
        {
          strcpy(communication_state,"SENDING STREAM");
 800172e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001732:	4aca      	ldr	r2, [pc, #808]	; (8001a5c <main+0x6f4>)
 8001734:	461c      	mov	r4, r3
 8001736:	4613      	mov	r3, r2
 8001738:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800173a:	c407      	stmia	r4!, {r0, r1, r2}
 800173c:	8023      	strh	r3, [r4, #0]
 800173e:	3402      	adds	r4, #2
 8001740:	0c1b      	lsrs	r3, r3, #16
 8001742:	7023      	strb	r3, [r4, #0]
 8001744:	e171      	b.n	8001a2a <main+0x6c2>
        }
        else if(strcmp(recieved_packet, previous_packet)==0)
 8001746:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 800174a:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800174e:	4611      	mov	r1, r2
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe fddd 	bl	8000310 <strcmp>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d105      	bne.n	8001768 <main+0x400>
        {
          //send acknowledge again
          LoRA_sendPacket(recieved_packet);
 800175c:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fca7 	bl	80010b4 <LoRA_sendPacket>
 8001766:	e160      	b.n	8001a2a <main+0x6c2>
        }
        else
        {
          //CDC_Transmit_HS("is arm 1succ\n", strlen("is arm 1succ\n"));
          //HAL_Delay(100);
          strcpy(previous_packet, recieved_packet);
 8001768:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 800176c:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8001770:	4611      	mov	r1, r2
 8001772:	4618      	mov	r0, r3
 8001774:	f015 fd12 	bl	801719c <strcpy>
          //HAL_Delay(100);
          LoRA_sendPacket(recieved_packet);
 8001778:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff fc99 	bl	80010b4 <LoRA_sendPacket>
          //HAL_Delay(100);
          /*char debug[250];
          sprintf(debug, "new packet: %s\n", recieved_packet);*/
          CDC_Transmit_HS(recieved_packet, strlen(recieved_packet));
 8001782:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fdcc 	bl	8000324 <strlen>
 800178c:	4602      	mov	r2, r0
 800178e:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001792:	4611      	mov	r1, r2
 8001794:	4618      	mov	r0, r3
 8001796:	f015 f82b 	bl	80167f0 <CDC_Transmit_HS>
 800179a:	e146      	b.n	8001a2a <main+0x6c2>

        }
      }
    }
    else if(strcmp(communication_state,"RECEIVING STREAM") == 0)
 800179c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80017a0:	49af      	ldr	r1, [pc, #700]	; (8001a60 <main+0x6f8>)
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe fdb4 	bl	8000310 <strcmp>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d14a      	bne.n	8001844 <main+0x4dc>
    {
      if(recv_packet(recieved_packet, MAX_PAYLOAD_LENGHT))
 80017ae:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80017b2:	21fa      	movs	r1, #250	; 0xfa
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fd23 	bl	8001200 <recv_packet>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d025      	beq.n	800180c <main+0x4a4>
      {
        previousTime = HAL_GetTick();
 80017c0:	f002 f964 	bl	8003a8c <HAL_GetTick>
 80017c4:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        if(sscanf(recieved_packet, "$ %s", state) == 1)
 80017c8:	f607 022c 	addw	r2, r7, #2092	; 0x82c
 80017cc:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80017d0:	49a4      	ldr	r1, [pc, #656]	; (8001a64 <main+0x6fc>)
 80017d2:	4618      	mov	r0, r3
 80017d4:	f015 fc80 	bl	80170d8 <siscanf>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d109      	bne.n	80017f2 <main+0x48a>
        {
          strcpy(communication_state,"SENDING RELIABLE");
 80017de:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80017e2:	4aa1      	ldr	r2, [pc, #644]	; (8001a68 <main+0x700>)
 80017e4:	461c      	mov	r4, r3
 80017e6:	4615      	mov	r5, r2
 80017e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017ec:	682b      	ldr	r3, [r5, #0]
 80017ee:	7023      	strb	r3, [r4, #0]
 80017f0:	e11b      	b.n	8001a2a <main+0x6c2>
        }
        else
        {
          CDC_Transmit_HS(recieved_packet, strlen(recieved_packet));
 80017f2:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7fe fd94 	bl	8000324 <strlen>
 80017fc:	4602      	mov	r2, r0
 80017fe:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f014 fff3 	bl	80167f0 <CDC_Transmit_HS>
 800180a:	e10e      	b.n	8001a2a <main+0x6c2>
        }
      }
      else if(HAL_GetTick()-previousTime > 1000)
 800180c:	f002 f93e 	bl	8003a8c <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	f8d7 3bf8 	ldr.w	r3, [r7, #3064]	; 0xbf8
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800181c:	f240 8105 	bls.w	8001a2a <main+0x6c2>
      {
        previousTime = HAL_GetTick();
 8001820:	f002 f934 	bl	8003a8c <HAL_GetTick>
 8001824:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        //give up SENDING
        sprintf(sendMessage, "! %d", packets_streamed);
 8001828:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800182c:	f8d7 2bb4 	ldr.w	r2, [r7, #2996]	; 0xbb4
 8001830:	4989      	ldr	r1, [pc, #548]	; (8001a58 <main+0x6f0>)
 8001832:	4618      	mov	r0, r3
 8001834:	f015 fc30 	bl	8017098 <siprintf>
        LoRA_sendPacket(sendMessage);
 8001838:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fc39 	bl	80010b4 <LoRA_sendPacket>
 8001842:	e0f2      	b.n	8001a2a <main+0x6c2>
      }
    }
    else if(strcmp(communication_state,"SENDING STREAM") == 0)
 8001844:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001848:	4984      	ldr	r1, [pc, #528]	; (8001a5c <main+0x6f4>)
 800184a:	4618      	mov	r0, r3
 800184c:	f7fe fd60 	bl	8000310 <strcmp>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d121      	bne.n	800189a <main+0x532>
    {
      if(max_packet_count == 0)
 8001856:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 800185a:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d10e      	bne.n	8001882 <main+0x51a>
      {
        strcpy(communication_state,"TRANSITIONING");
 8001864:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001868:	4a80      	ldr	r2, [pc, #512]	; (8001a6c <main+0x704>)
 800186a:	461c      	mov	r4, r3
 800186c:	4613      	mov	r3, r2
 800186e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001870:	c407      	stmia	r4!, {r0, r1, r2}
 8001872:	8023      	strh	r3, [r4, #0]
        have_recieved_anything = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
        LoRA_sendPacket("$");
 800187a:	487d      	ldr	r0, [pc, #500]	; (8001a70 <main+0x708>)
 800187c:	f7ff fc1a 	bl	80010b4 <LoRA_sendPacket>
 8001880:	e0d3      	b.n	8001a2a <main+0x6c2>
      }
      else
      {
        //send whatever
        max_packet_count--;
 8001882:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001886:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	1e5a      	subs	r2, r3, #1
 800188e:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001892:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	e0c7      	b.n	8001a2a <main+0x6c2>
      }

    }
    else if(strcmp(communication_state,"SENDING RELIABLE") == 0)
 800189a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800189e:	4972      	ldr	r1, [pc, #456]	; (8001a68 <main+0x700>)
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fd35 	bl	8000310 <strcmp>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d166      	bne.n	800197a <main+0x612>
    {
    	reliable_send_packet("*");
 80018ac:	4871      	ldr	r0, [pc, #452]	; (8001a74 <main+0x70c>)
 80018ae:	f7ff fcd6 	bl	800125e <reliable_send_packet>
    	sprintf(response_packet, "\nState of other board: %s\n> ", state);
 80018b2:	f607 022c 	addw	r2, r7, #2092	; 0x82c
 80018b6:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80018ba:	496f      	ldr	r1, [pc, #444]	; (8001a78 <main+0x710>)
 80018bc:	4618      	mov	r0, r3
 80018be:	f015 fbeb 	bl	8017098 <siprintf>
	  	CDC_Transmit_HS(response_packet, strlen(response_packet));
 80018c2:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fd2c 	bl	8000324 <strlen>
 80018cc:	4602      	mov	r2, r0
 80018ce:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80018d2:	4611      	mov	r1, r2
 80018d4:	4618      	mov	r0, r3
 80018d6:	f014 ff8b 	bl	80167f0 <CDC_Transmit_HS>
	  	//CDC_Transmit_HS("", strlen("> "));
    	//get input
    	char input[usbBufferLen];
    	//usbReceiveHandle(input);

    	while(!usbReceiveHandle(input))
 80018da:	bf00      	nop
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff fd20 	bl	8001324 <usbReceiveHandle>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0f8      	beq.n	80018dc <main+0x574>
    	{}

      reliable_send_packet(input);
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff fcb6 	bl	800125e <reliable_send_packet>

	  	char debug[usbBufferLen+10];
	  	sprintf(debug, "%s\n", input);
 80018f2:	1d3a      	adds	r2, r7, #4
 80018f4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80018f8:	4960      	ldr	r1, [pc, #384]	; (8001a7c <main+0x714>)
 80018fa:	4618      	mov	r0, r3
 80018fc:	f015 fbcc 	bl	8017098 <siprintf>
	  	CDC_Transmit_HS(debug, strlen(debug));
 8001900:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fd0d 	bl	8000324 <strlen>
 800190a:	4602      	mov	r2, r0
 800190c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001910:	4611      	mov	r1, r2
 8001912:	4618      	mov	r0, r3
 8001914:	f014 ff6c 	bl	80167f0 <CDC_Transmit_HS>

      if(strcmp(input,"FIRE")==0)
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	4959      	ldr	r1, [pc, #356]	; (8001a80 <main+0x718>)
 800191c:	4618      	mov	r0, r3
 800191e:	f7fe fcf7 	bl	8000310 <strcmp>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d116      	bne.n	8001956 <main+0x5ee>
      {
        strcpy(communication_state,"RECEIVING STREAM");
 8001928:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800192c:	4a4c      	ldr	r2, [pc, #304]	; (8001a60 <main+0x6f8>)
 800192e:	461c      	mov	r4, r3
 8001930:	4615      	mov	r5, r2
 8001932:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001934:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001936:	682b      	ldr	r3, [r5, #0]
 8001938:	7023      	strb	r3, [r4, #0]
        sprintf(sendMessage, "! %d", packets_streamed);
 800193a:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800193e:	f8d7 2bb4 	ldr.w	r2, [r7, #2996]	; 0xbb4
 8001942:	4945      	ldr	r1, [pc, #276]	; (8001a58 <main+0x6f0>)
 8001944:	4618      	mov	r0, r3
 8001946:	f015 fba7 	bl	8017098 <siprintf>
        LoRA_sendPacket(sendMessage);
 800194a:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fbb0 	bl	80010b4 <LoRA_sendPacket>
 8001954:	e069      	b.n	8001a2a <main+0x6c2>
      }
      else
      {
        strcpy(communication_state,"TRANSITIONING");
 8001956:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800195a:	4a44      	ldr	r2, [pc, #272]	; (8001a6c <main+0x704>)
 800195c:	461c      	mov	r4, r3
 800195e:	4613      	mov	r3, r2
 8001960:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001962:	c407      	stmia	r4!, {r0, r1, r2}
 8001964:	8023      	strh	r3, [r4, #0]
        have_recieved_anything = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
        HAL_Delay(100);
 800196c:	2064      	movs	r0, #100	; 0x64
 800196e:	f002 f899 	bl	8003aa4 <HAL_Delay>
        LoRA_sendPacket("$");
 8001972:	483f      	ldr	r0, [pc, #252]	; (8001a70 <main+0x708>)
 8001974:	f7ff fb9e 	bl	80010b4 <LoRA_sendPacket>
 8001978:	e057      	b.n	8001a2a <main+0x6c2>
      }
    }
    else if(strcmp(communication_state,"TRANSITIONING") == 0)
 800197a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800197e:	493b      	ldr	r1, [pc, #236]	; (8001a6c <main+0x704>)
 8001980:	4618      	mov	r0, r3
 8001982:	f7fe fcc5 	bl	8000310 <strcmp>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d14e      	bne.n	8001a2a <main+0x6c2>
    {

        if(recv_packet(recieved_packet, MAX_PAYLOAD_LENGHT))
 800198c:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001990:	21fa      	movs	r1, #250	; 0xfa
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff fc34 	bl	8001200 <recv_packet>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d02b      	beq.n	80019f6 <main+0x68e>
        {
          CDC_Transmit_HS("transitioning\n", strlen("transitioning\n"));
 800199e:	210e      	movs	r1, #14
 80019a0:	4838      	ldr	r0, [pc, #224]	; (8001a84 <main+0x71c>)
 80019a2:	f014 ff25 	bl	80167f0 <CDC_Transmit_HS>
          previousTime = HAL_GetTick();
 80019a6:	f002 f871 	bl	8003a8c <HAL_GetTick>
 80019aa:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
          if(strcmp(recieved_packet, "*")==0)
 80019ae:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80019b2:	4930      	ldr	r1, [pc, #192]	; (8001a74 <main+0x70c>)
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7fe fcab 	bl	8000310 <strcmp>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d134      	bne.n	8001a2a <main+0x6c2>
          {
        	strcpy(previous_packet, recieved_packet);
 80019c0:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 80019c4:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80019c8:	4611      	mov	r1, r2
 80019ca:	4618      	mov	r0, r3
 80019cc:	f015 fbe6 	bl	801719c <strcpy>
        	strcpy(communication_state, "RECEIVING RELIABLE");
 80019d0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80019d4:	4a2c      	ldr	r2, [pc, #176]	; (8001a88 <main+0x720>)
 80019d6:	461c      	mov	r4, r3
 80019d8:	4615      	mov	r5, r2
 80019da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019de:	682b      	ldr	r3, [r5, #0]
 80019e0:	461a      	mov	r2, r3
 80019e2:	8022      	strh	r2, [r4, #0]
 80019e4:	3402      	adds	r4, #2
 80019e6:	0c1b      	lsrs	r3, r3, #16
 80019e8:	7023      	strb	r3, [r4, #0]
            LoRA_sendPacket(recieved_packet);
 80019ea:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fb60 	bl	80010b4 <LoRA_sendPacket>
 80019f4:	e019      	b.n	8001a2a <main+0x6c2>
          }
        }
        else if (HAL_GetTick()-previousTime > 300)
 80019f6:	f002 f849 	bl	8003a8c <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	f8d7 3bf8 	ldr.w	r3, [r7, #3064]	; 0xbf8
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001a06:	d910      	bls.n	8001a2a <main+0x6c2>
        {
          previousTime = HAL_GetTick();
 8001a08:	f002 f840 	bl	8003a8c <HAL_GetTick>
 8001a0c:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
		  sprintf(response_packet, "$ %s", state);
 8001a10:	f607 022c 	addw	r2, r7, #2092	; 0x82c
 8001a14:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8001a18:	4912      	ldr	r1, [pc, #72]	; (8001a64 <main+0x6fc>)
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f015 fb3c 	bl	8017098 <siprintf>
		  LoRA_sendPacket(response_packet);
 8001a20:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fb45 	bl	80010b4 <LoRA_sendPacket>
//			LED_Color_Data[i][0] = (uint32_t)MAX*triangle_space(color_offset+r_offset);
//			LED_Color_Data[i][1] = (uint32_t)MAX*triangle_space(color_offset+g_offset);
//			LED_Color_Data[i][2] = (uint32_t)MAX*triangle_space(color_offset+b_offset);
//		}

		float timeElapsed = ((float)(HAL_GetTick() - lastTime)) / 1000;
 8001a2a:	f002 f82f 	bl	8003a8c <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	f8d7 3c0c 	ldr.w	r3, [r7, #3084]	; 0xc0c
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	ee07 3a90 	vmov	s15, r3
 8001a3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a3e:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001a8c <main+0x724>
 8001a42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a46:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 8001a4a:	edc3 7a00 	vstr	s15, [r3]

		//float GyroX = LG2_Get_Gyro_X() - calOmegaX;
		//float GyroY = LG2_Get_Gyro_Y() - calOmegaY;
		//float GyroZ = LG2_Get_Gyro_Z() - calOmegaZ;

		lastTime = HAL_GetTick();
 8001a4e:	f002 f81d 	bl	8003a8c <HAL_GetTick>
 8001a52:	f8c7 0c0c 	str.w	r0, [r7, #3084]	; 0xc0c
while (1) {
 8001a56:	e60e      	b.n	8001676 <main+0x30e>
 8001a58:	080183fc 	.word	0x080183fc
 8001a5c:	08018404 	.word	0x08018404
 8001a60:	08018414 	.word	0x08018414
 8001a64:	080183e0 	.word	0x080183e0
 8001a68:	080183e8 	.word	0x080183e8
 8001a6c:	08018428 	.word	0x08018428
 8001a70:	08018438 	.word	0x08018438
 8001a74:	0801843c 	.word	0x0801843c
 8001a78:	08018440 	.word	0x08018440
 8001a7c:	08018460 	.word	0x08018460
 8001a80:	08018464 	.word	0x08018464
 8001a84:	0801846c 	.word	0x0801846c
 8001a88:	080183cc 	.word	0x080183cc
 8001a8c:	447a0000 	.word	0x447a0000

08001a90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b09c      	sub	sp, #112	; 0x70
 8001a94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a9a:	224c      	movs	r2, #76	; 0x4c
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f015 fb48 	bl	8017134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	2220      	movs	r2, #32
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f015 fb42 	bl	8017134 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001ab0:	2002      	movs	r0, #2
 8001ab2:	f007 febd 	bl	8009830 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	603b      	str	r3, [r7, #0]
 8001aba:	4b30      	ldr	r3, [pc, #192]	; (8001b7c <SystemClock_Config+0xec>)
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ac2:	4a2e      	ldr	r2, [pc, #184]	; (8001b7c <SystemClock_Config+0xec>)
 8001ac4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ac8:	6193      	str	r3, [r2, #24]
 8001aca:	4b2c      	ldr	r3, [pc, #176]	; (8001b7c <SystemClock_Config+0xec>)
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001ad6:	bf00      	nop
 8001ad8:	4b28      	ldr	r3, [pc, #160]	; (8001b7c <SystemClock_Config+0xec>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ae0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ae4:	d1f8      	bne.n	8001ad8 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001ae6:	2322      	movs	r3, #34	; 0x22
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001aea:	2301      	movs	r3, #1
 8001aec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001aee:	2340      	movs	r3, #64	; 0x40
 8001af0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001af2:	2301      	movs	r3, #1
 8001af4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001af6:	2302      	movs	r3, #2
 8001af8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001afa:	2300      	movs	r3, #0
 8001afc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001afe:	2304      	movs	r3, #4
 8001b00:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001b02:	230c      	movs	r3, #12
 8001b04:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001b06:	2301      	movs	r3, #1
 8001b08:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8001b0a:	230c      	movs	r3, #12
 8001b0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001b12:	230c      	movs	r3, #12
 8001b14:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001b16:	2300      	movs	r3, #0
 8001b18:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b22:	4618      	mov	r0, r3
 8001b24:	f007 fece 	bl	80098c4 <HAL_RCC_OscConfig>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001b2e:	f000 ff1b 	bl	8002968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b32:	233f      	movs	r3, #63	; 0x3f
 8001b34:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b36:	2303      	movs	r3, #3
 8001b38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001b3e:	2308      	movs	r3, #8
 8001b40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001b42:	2340      	movs	r3, #64	; 0x40
 8001b44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001b46:	2340      	movs	r3, #64	; 0x40
 8001b48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b4e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001b50:	2340      	movs	r3, #64	; 0x40
 8001b52:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	2101      	movs	r1, #1
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f008 fa8d 	bl	800a078 <HAL_RCC_ClockConfig>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001b64:	f000 ff00 	bl	8002968 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001b68:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	2000      	movs	r0, #0
 8001b70:	f008 fc38 	bl	800a3e4 <HAL_RCC_MCOConfig>
}
 8001b74:	bf00      	nop
 8001b76:	3770      	adds	r7, #112	; 0x70
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	58024800 	.word	0x58024800

08001b80 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b0ae      	sub	sp, #184	; 0xb8
 8001b84:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b86:	463b      	mov	r3, r7
 8001b88:	22b8      	movs	r2, #184	; 0xb8
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f015 fad1 	bl	8017134 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 8001b92:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001b9e:	2304      	movs	r3, #4
 8001ba0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001ba2:	230c      	movs	r3, #12
 8001ba4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001ba6:	2304      	movs	r3, #4
 8001ba8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001baa:	2302      	movs	r3, #2
 8001bac:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001bb2:	23c0      	movs	r3, #192	; 0xc0
 8001bb4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc2:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bca:	463b      	mov	r3, r7
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f008 fe49 	bl	800a864 <HAL_RCCEx_PeriphCLKConfig>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001bd8:	f000 fec6 	bl	8002968 <Error_Handler>
  }
}
 8001bdc:	bf00      	nop
 8001bde:	37b8      	adds	r7, #184	; 0xb8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08c      	sub	sp, #48	; 0x30
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	605a      	str	r2, [r3, #4]
 8001bf4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001bf6:	463b      	mov	r3, r7
 8001bf8:	2224      	movs	r2, #36	; 0x24
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f015 fa99 	bl	8017134 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c02:	4b31      	ldr	r3, [pc, #196]	; (8001cc8 <MX_ADC1_Init+0xe4>)
 8001c04:	4a31      	ldr	r2, [pc, #196]	; (8001ccc <MX_ADC1_Init+0xe8>)
 8001c06:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001c08:	4b2f      	ldr	r3, [pc, #188]	; (8001cc8 <MX_ADC1_Init+0xe4>)
 8001c0a:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001c0e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001c10:	4b2d      	ldr	r3, [pc, #180]	; (8001cc8 <MX_ADC1_Init+0xe4>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c16:	4b2c      	ldr	r3, [pc, #176]	; (8001cc8 <MX_ADC1_Init+0xe4>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c1c:	4b2a      	ldr	r3, [pc, #168]	; (8001cc8 <MX_ADC1_Init+0xe4>)
 8001c1e:	2204      	movs	r2, #4
 8001c20:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001c22:	4b29      	ldr	r3, [pc, #164]	; (8001cc8 <MX_ADC1_Init+0xe4>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c28:	4b27      	ldr	r3, [pc, #156]	; (8001cc8 <MX_ADC1_Init+0xe4>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001c2e:	4b26      	ldr	r3, [pc, #152]	; (8001cc8 <MX_ADC1_Init+0xe4>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c34:	4b24      	ldr	r3, [pc, #144]	; (8001cc8 <MX_ADC1_Init+0xe4>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c3c:	4b22      	ldr	r3, [pc, #136]	; (8001cc8 <MX_ADC1_Init+0xe4>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c42:	4b21      	ldr	r3, [pc, #132]	; (8001cc8 <MX_ADC1_Init+0xe4>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001c48:	4b1f      	ldr	r3, [pc, #124]	; (8001cc8 <MX_ADC1_Init+0xe4>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c4e:	4b1e      	ldr	r3, [pc, #120]	; (8001cc8 <MX_ADC1_Init+0xe4>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001c54:	4b1c      	ldr	r3, [pc, #112]	; (8001cc8 <MX_ADC1_Init+0xe4>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001c5a:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <MX_ADC1_Init+0xe4>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c62:	4819      	ldr	r0, [pc, #100]	; (8001cc8 <MX_ADC1_Init+0xe4>)
 8001c64:	f002 f99e 	bl	8003fa4 <HAL_ADC_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001c6e:	f000 fe7b 	bl	8002968 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c72:	2300      	movs	r3, #0
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4812      	ldr	r0, [pc, #72]	; (8001cc8 <MX_ADC1_Init+0xe4>)
 8001c7e:	f003 f9d9 	bl	8005034 <HAL_ADCEx_MultiModeConfigChannel>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001c88:	f000 fe6e 	bl	8002968 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001c8c:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <MX_ADC1_Init+0xec>)
 8001c8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c90:	2306      	movs	r3, #6
 8001c92:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8001c94:	2303      	movs	r3, #3
 8001c96:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c98:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001c9c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c9e:	2304      	movs	r3, #4
 8001ca0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cac:	463b      	mov	r3, r7
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4805      	ldr	r0, [pc, #20]	; (8001cc8 <MX_ADC1_Init+0xe4>)
 8001cb2:	f002 fb7f 	bl	80043b4 <HAL_ADC_ConfigChannel>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001cbc:	f000 fe54 	bl	8002968 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cc0:	bf00      	nop
 8001cc2:	3730      	adds	r7, #48	; 0x30
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	24000bf8 	.word	0x24000bf8
 8001ccc:	40022000 	.word	0x40022000
 8001cd0:	2a000400 	.word	0x2a000400

08001cd4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08a      	sub	sp, #40	; 0x28
 8001cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cda:	1d3b      	adds	r3, r7, #4
 8001cdc:	2224      	movs	r2, #36	; 0x24
 8001cde:	2100      	movs	r1, #0
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f015 fa27 	bl	8017134 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001ce6:	4b2f      	ldr	r3, [pc, #188]	; (8001da4 <MX_ADC3_Init+0xd0>)
 8001ce8:	4a2f      	ldr	r2, [pc, #188]	; (8001da8 <MX_ADC3_Init+0xd4>)
 8001cea:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001cec:	4b2d      	ldr	r3, [pc, #180]	; (8001da4 <MX_ADC3_Init+0xd0>)
 8001cee:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001cf2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001cf4:	4b2b      	ldr	r3, [pc, #172]	; (8001da4 <MX_ADC3_Init+0xd0>)
 8001cf6:	2208      	movs	r2, #8
 8001cf8:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001cfa:	4b2a      	ldr	r3, [pc, #168]	; (8001da4 <MX_ADC3_Init+0xd0>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d00:	4b28      	ldr	r3, [pc, #160]	; (8001da4 <MX_ADC3_Init+0xd0>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d06:	4b27      	ldr	r3, [pc, #156]	; (8001da4 <MX_ADC3_Init+0xd0>)
 8001d08:	2204      	movs	r2, #4
 8001d0a:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001d0c:	4b25      	ldr	r3, [pc, #148]	; (8001da4 <MX_ADC3_Init+0xd0>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001d12:	4b24      	ldr	r3, [pc, #144]	; (8001da4 <MX_ADC3_Init+0xd0>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001d18:	4b22      	ldr	r3, [pc, #136]	; (8001da4 <MX_ADC3_Init+0xd0>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001d1e:	4b21      	ldr	r3, [pc, #132]	; (8001da4 <MX_ADC3_Init+0xd0>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d26:	4b1f      	ldr	r3, [pc, #124]	; (8001da4 <MX_ADC3_Init+0xd0>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d2c:	4b1d      	ldr	r3, [pc, #116]	; (8001da4 <MX_ADC3_Init+0xd0>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001d32:	4b1c      	ldr	r3, [pc, #112]	; (8001da4 <MX_ADC3_Init+0xd0>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001d3a:	4b1a      	ldr	r3, [pc, #104]	; (8001da4 <MX_ADC3_Init+0xd0>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001d40:	4b18      	ldr	r3, [pc, #96]	; (8001da4 <MX_ADC3_Init+0xd0>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d46:	4b17      	ldr	r3, [pc, #92]	; (8001da4 <MX_ADC3_Init+0xd0>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001d4c:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <MX_ADC3_Init+0xd0>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001d52:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <MX_ADC3_Init+0xd0>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001d5a:	4812      	ldr	r0, [pc, #72]	; (8001da4 <MX_ADC3_Init+0xd0>)
 8001d5c:	f002 f922 	bl	8003fa4 <HAL_ADC_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001d66:	f000 fdff 	bl	8002968 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <MX_ADC3_Init+0xd8>)
 8001d6c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d6e:	2306      	movs	r3, #6
 8001d70:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001d76:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001d7a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d7c:	2304      	movs	r3, #4
 8001d7e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001d84:	2300      	movs	r3, #0
 8001d86:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001d88:	1d3b      	adds	r3, r7, #4
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4805      	ldr	r0, [pc, #20]	; (8001da4 <MX_ADC3_Init+0xd0>)
 8001d8e:	f002 fb11 	bl	80043b4 <HAL_ADC_ConfigChannel>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8001d98:	f000 fde6 	bl	8002968 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001d9c:	bf00      	nop
 8001d9e:	3728      	adds	r7, #40	; 0x28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	24000c68 	.word	0x24000c68
 8001da8:	58026000 	.word	0x58026000
 8001dac:	04300002 	.word	0x04300002

08001db0 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001db4:	4b2e      	ldr	r3, [pc, #184]	; (8001e70 <MX_FDCAN3_Init+0xc0>)
 8001db6:	4a2f      	ldr	r2, [pc, #188]	; (8001e74 <MX_FDCAN3_Init+0xc4>)
 8001db8:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001dba:	4b2d      	ldr	r3, [pc, #180]	; (8001e70 <MX_FDCAN3_Init+0xc0>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001dc0:	4b2b      	ldr	r3, [pc, #172]	; (8001e70 <MX_FDCAN3_Init+0xc0>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001dc6:	4b2a      	ldr	r3, [pc, #168]	; (8001e70 <MX_FDCAN3_Init+0xc0>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001dcc:	4b28      	ldr	r3, [pc, #160]	; (8001e70 <MX_FDCAN3_Init+0xc0>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001dd2:	4b27      	ldr	r3, [pc, #156]	; (8001e70 <MX_FDCAN3_Init+0xc0>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8001dd8:	4b25      	ldr	r3, [pc, #148]	; (8001e70 <MX_FDCAN3_Init+0xc0>)
 8001dda:	2210      	movs	r2, #16
 8001ddc:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001dde:	4b24      	ldr	r3, [pc, #144]	; (8001e70 <MX_FDCAN3_Init+0xc0>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8001de4:	4b22      	ldr	r3, [pc, #136]	; (8001e70 <MX_FDCAN3_Init+0xc0>)
 8001de6:	2202      	movs	r2, #2
 8001de8:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8001dea:	4b21      	ldr	r3, [pc, #132]	; (8001e70 <MX_FDCAN3_Init+0xc0>)
 8001dec:	2202      	movs	r2, #2
 8001dee:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8001df0:	4b1f      	ldr	r3, [pc, #124]	; (8001e70 <MX_FDCAN3_Init+0xc0>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8001df6:	4b1e      	ldr	r3, [pc, #120]	; (8001e70 <MX_FDCAN3_Init+0xc0>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001dfc:	4b1c      	ldr	r3, [pc, #112]	; (8001e70 <MX_FDCAN3_Init+0xc0>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001e02:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <MX_FDCAN3_Init+0xc0>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8001e08:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <MX_FDCAN3_Init+0xc0>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8001e0e:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <MX_FDCAN3_Init+0xc0>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8001e14:	4b16      	ldr	r3, [pc, #88]	; (8001e70 <MX_FDCAN3_Init+0xc0>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8001e1a:	4b15      	ldr	r3, [pc, #84]	; (8001e70 <MX_FDCAN3_Init+0xc0>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001e20:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <MX_FDCAN3_Init+0xc0>)
 8001e22:	2204      	movs	r2, #4
 8001e24:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8001e26:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <MX_FDCAN3_Init+0xc0>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001e2c:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <MX_FDCAN3_Init+0xc0>)
 8001e2e:	2204      	movs	r2, #4
 8001e30:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8001e32:	4b0f      	ldr	r3, [pc, #60]	; (8001e70 <MX_FDCAN3_Init+0xc0>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001e38:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <MX_FDCAN3_Init+0xc0>)
 8001e3a:	2204      	movs	r2, #4
 8001e3c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8001e3e:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <MX_FDCAN3_Init+0xc0>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8001e44:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <MX_FDCAN3_Init+0xc0>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8001e4a:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <MX_FDCAN3_Init+0xc0>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001e50:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <MX_FDCAN3_Init+0xc0>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001e56:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <MX_FDCAN3_Init+0xc0>)
 8001e58:	2204      	movs	r2, #4
 8001e5a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001e5c:	4804      	ldr	r0, [pc, #16]	; (8001e70 <MX_FDCAN3_Init+0xc0>)
 8001e5e:	f005 fbaf 	bl	80075c0 <HAL_FDCAN_Init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8001e68:	f000 fd7e 	bl	8002968 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8001e6c:	bf00      	nop
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	24000dc8 	.word	0x24000dc8
 8001e74:	4000d400 	.word	0x4000d400

08001e78 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001e7c:	4b1b      	ldr	r3, [pc, #108]	; (8001eec <MX_I2C2_Init+0x74>)
 8001e7e:	4a1c      	ldr	r2, [pc, #112]	; (8001ef0 <MX_I2C2_Init+0x78>)
 8001e80:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001e82:	4b1a      	ldr	r3, [pc, #104]	; (8001eec <MX_I2C2_Init+0x74>)
 8001e84:	4a1b      	ldr	r2, [pc, #108]	; (8001ef4 <MX_I2C2_Init+0x7c>)
 8001e86:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001e88:	4b18      	ldr	r3, [pc, #96]	; (8001eec <MX_I2C2_Init+0x74>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e8e:	4b17      	ldr	r3, [pc, #92]	; (8001eec <MX_I2C2_Init+0x74>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e94:	4b15      	ldr	r3, [pc, #84]	; (8001eec <MX_I2C2_Init+0x74>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001e9a:	4b14      	ldr	r3, [pc, #80]	; (8001eec <MX_I2C2_Init+0x74>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ea0:	4b12      	ldr	r3, [pc, #72]	; (8001eec <MX_I2C2_Init+0x74>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ea6:	4b11      	ldr	r3, [pc, #68]	; (8001eec <MX_I2C2_Init+0x74>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001eac:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <MX_I2C2_Init+0x74>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001eb2:	480e      	ldr	r0, [pc, #56]	; (8001eec <MX_I2C2_Init+0x74>)
 8001eb4:	f006 f8c2 	bl	800803c <HAL_I2C_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001ebe:	f000 fd53 	bl	8002968 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	4809      	ldr	r0, [pc, #36]	; (8001eec <MX_I2C2_Init+0x74>)
 8001ec6:	f006 f963 	bl	8008190 <HAL_I2CEx_ConfigAnalogFilter>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001ed0:	f000 fd4a 	bl	8002968 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	4805      	ldr	r0, [pc, #20]	; (8001eec <MX_I2C2_Init+0x74>)
 8001ed8:	f006 f9a5 	bl	8008226 <HAL_I2CEx_ConfigDigitalFilter>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001ee2:	f000 fd41 	bl	8002968 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	24000e68 	.word	0x24000e68
 8001ef0:	40005800 	.word	0x40005800
 8001ef4:	20303e5d 	.word	0x20303e5d

08001ef8 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8001efc:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <MX_SDMMC2_SD_Init+0x34>)
 8001efe:	4a0c      	ldr	r2, [pc, #48]	; (8001f30 <MX_SDMMC2_SD_Init+0x38>)
 8001f00:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001f02:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <MX_SDMMC2_SD_Init+0x34>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001f08:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <MX_SDMMC2_SD_Init+0x34>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001f0e:	4b07      	ldr	r3, [pc, #28]	; (8001f2c <MX_SDMMC2_SD_Init+0x34>)
 8001f10:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f14:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001f16:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <MX_SDMMC2_SD_Init+0x34>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 8001f1c:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <MX_SDMMC2_SD_Init+0x34>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8001f22:	bf00      	nop
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	24000ebc 	.word	0x24000ebc
 8001f30:	48022400 	.word	0x48022400

08001f34 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f38:	4b27      	ldr	r3, [pc, #156]	; (8001fd8 <MX_SPI1_Init+0xa4>)
 8001f3a:	4a28      	ldr	r2, [pc, #160]	; (8001fdc <MX_SPI1_Init+0xa8>)
 8001f3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f3e:	4b26      	ldr	r3, [pc, #152]	; (8001fd8 <MX_SPI1_Init+0xa4>)
 8001f40:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001f44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f46:	4b24      	ldr	r3, [pc, #144]	; (8001fd8 <MX_SPI1_Init+0xa4>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f4c:	4b22      	ldr	r3, [pc, #136]	; (8001fd8 <MX_SPI1_Init+0xa4>)
 8001f4e:	2207      	movs	r2, #7
 8001f50:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f52:	4b21      	ldr	r3, [pc, #132]	; (8001fd8 <MX_SPI1_Init+0xa4>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f58:	4b1f      	ldr	r3, [pc, #124]	; (8001fd8 <MX_SPI1_Init+0xa4>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f5e:	4b1e      	ldr	r3, [pc, #120]	; (8001fd8 <MX_SPI1_Init+0xa4>)
 8001f60:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f64:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001f66:	4b1c      	ldr	r3, [pc, #112]	; (8001fd8 <MX_SPI1_Init+0xa4>)
 8001f68:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001f6c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f6e:	4b1a      	ldr	r3, [pc, #104]	; (8001fd8 <MX_SPI1_Init+0xa4>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f74:	4b18      	ldr	r3, [pc, #96]	; (8001fd8 <MX_SPI1_Init+0xa4>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f7a:	4b17      	ldr	r3, [pc, #92]	; (8001fd8 <MX_SPI1_Init+0xa4>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001f80:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <MX_SPI1_Init+0xa4>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f86:	4b14      	ldr	r3, [pc, #80]	; (8001fd8 <MX_SPI1_Init+0xa4>)
 8001f88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f8c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001f8e:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <MX_SPI1_Init+0xa4>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001f94:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <MX_SPI1_Init+0xa4>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f9a:	4b0f      	ldr	r3, [pc, #60]	; (8001fd8 <MX_SPI1_Init+0xa4>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001fa0:	4b0d      	ldr	r3, [pc, #52]	; (8001fd8 <MX_SPI1_Init+0xa4>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <MX_SPI1_Init+0xa4>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001fac:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <MX_SPI1_Init+0xa4>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <MX_SPI1_Init+0xa4>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001fb8:	4b07      	ldr	r3, [pc, #28]	; (8001fd8 <MX_SPI1_Init+0xa4>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001fbe:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <MX_SPI1_Init+0xa4>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fc4:	4804      	ldr	r0, [pc, #16]	; (8001fd8 <MX_SPI1_Init+0xa4>)
 8001fc6:	f00c fc97 	bl	800e8f8 <HAL_SPI_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001fd0:	f000 fcca 	bl	8002968 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	24000f38 	.word	0x24000f38
 8001fdc:	40013000 	.word	0x40013000

08001fe0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001fe4:	4b27      	ldr	r3, [pc, #156]	; (8002084 <MX_SPI2_Init+0xa4>)
 8001fe6:	4a28      	ldr	r2, [pc, #160]	; (8002088 <MX_SPI2_Init+0xa8>)
 8001fe8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001fea:	4b26      	ldr	r3, [pc, #152]	; (8002084 <MX_SPI2_Init+0xa4>)
 8001fec:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001ff0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001ff2:	4b24      	ldr	r3, [pc, #144]	; (8002084 <MX_SPI2_Init+0xa4>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ff8:	4b22      	ldr	r3, [pc, #136]	; (8002084 <MX_SPI2_Init+0xa4>)
 8001ffa:	2207      	movs	r2, #7
 8001ffc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ffe:	4b21      	ldr	r3, [pc, #132]	; (8002084 <MX_SPI2_Init+0xa4>)
 8002000:	2200      	movs	r2, #0
 8002002:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002004:	4b1f      	ldr	r3, [pc, #124]	; (8002084 <MX_SPI2_Init+0xa4>)
 8002006:	2200      	movs	r2, #0
 8002008:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800200a:	4b1e      	ldr	r3, [pc, #120]	; (8002084 <MX_SPI2_Init+0xa4>)
 800200c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002010:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002012:	4b1c      	ldr	r3, [pc, #112]	; (8002084 <MX_SPI2_Init+0xa4>)
 8002014:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002018:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800201a:	4b1a      	ldr	r3, [pc, #104]	; (8002084 <MX_SPI2_Init+0xa4>)
 800201c:	2200      	movs	r2, #0
 800201e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002020:	4b18      	ldr	r3, [pc, #96]	; (8002084 <MX_SPI2_Init+0xa4>)
 8002022:	2200      	movs	r2, #0
 8002024:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002026:	4b17      	ldr	r3, [pc, #92]	; (8002084 <MX_SPI2_Init+0xa4>)
 8002028:	2200      	movs	r2, #0
 800202a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800202c:	4b15      	ldr	r3, [pc, #84]	; (8002084 <MX_SPI2_Init+0xa4>)
 800202e:	2200      	movs	r2, #0
 8002030:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002032:	4b14      	ldr	r3, [pc, #80]	; (8002084 <MX_SPI2_Init+0xa4>)
 8002034:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002038:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800203a:	4b12      	ldr	r3, [pc, #72]	; (8002084 <MX_SPI2_Init+0xa4>)
 800203c:	2200      	movs	r2, #0
 800203e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002040:	4b10      	ldr	r3, [pc, #64]	; (8002084 <MX_SPI2_Init+0xa4>)
 8002042:	2200      	movs	r2, #0
 8002044:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002046:	4b0f      	ldr	r3, [pc, #60]	; (8002084 <MX_SPI2_Init+0xa4>)
 8002048:	2200      	movs	r2, #0
 800204a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800204c:	4b0d      	ldr	r3, [pc, #52]	; (8002084 <MX_SPI2_Init+0xa4>)
 800204e:	2200      	movs	r2, #0
 8002050:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002052:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <MX_SPI2_Init+0xa4>)
 8002054:	2200      	movs	r2, #0
 8002056:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002058:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <MX_SPI2_Init+0xa4>)
 800205a:	2200      	movs	r2, #0
 800205c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800205e:	4b09      	ldr	r3, [pc, #36]	; (8002084 <MX_SPI2_Init+0xa4>)
 8002060:	2200      	movs	r2, #0
 8002062:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002064:	4b07      	ldr	r3, [pc, #28]	; (8002084 <MX_SPI2_Init+0xa4>)
 8002066:	2200      	movs	r2, #0
 8002068:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <MX_SPI2_Init+0xa4>)
 800206c:	2200      	movs	r2, #0
 800206e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002070:	4804      	ldr	r0, [pc, #16]	; (8002084 <MX_SPI2_Init+0xa4>)
 8002072:	f00c fc41 	bl	800e8f8 <HAL_SPI_Init>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 800207c:	f000 fc74 	bl	8002968 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002080:	bf00      	nop
 8002082:	bd80      	pop	{r7, pc}
 8002084:	24000fc0 	.word	0x24000fc0
 8002088:	40003800 	.word	0x40003800

0800208c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002090:	4b27      	ldr	r3, [pc, #156]	; (8002130 <MX_SPI3_Init+0xa4>)
 8002092:	4a28      	ldr	r2, [pc, #160]	; (8002134 <MX_SPI3_Init+0xa8>)
 8002094:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002096:	4b26      	ldr	r3, [pc, #152]	; (8002130 <MX_SPI3_Init+0xa4>)
 8002098:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800209c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800209e:	4b24      	ldr	r3, [pc, #144]	; (8002130 <MX_SPI3_Init+0xa4>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80020a4:	4b22      	ldr	r3, [pc, #136]	; (8002130 <MX_SPI3_Init+0xa4>)
 80020a6:	2207      	movs	r2, #7
 80020a8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020aa:	4b21      	ldr	r3, [pc, #132]	; (8002130 <MX_SPI3_Init+0xa4>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020b0:	4b1f      	ldr	r3, [pc, #124]	; (8002130 <MX_SPI3_Init+0xa4>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80020b6:	4b1e      	ldr	r3, [pc, #120]	; (8002130 <MX_SPI3_Init+0xa4>)
 80020b8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80020bc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80020be:	4b1c      	ldr	r3, [pc, #112]	; (8002130 <MX_SPI3_Init+0xa4>)
 80020c0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80020c4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020c6:	4b1a      	ldr	r3, [pc, #104]	; (8002130 <MX_SPI3_Init+0xa4>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80020cc:	4b18      	ldr	r3, [pc, #96]	; (8002130 <MX_SPI3_Init+0xa4>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020d2:	4b17      	ldr	r3, [pc, #92]	; (8002130 <MX_SPI3_Init+0xa4>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80020d8:	4b15      	ldr	r3, [pc, #84]	; (8002130 <MX_SPI3_Init+0xa4>)
 80020da:	2200      	movs	r2, #0
 80020dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020de:	4b14      	ldr	r3, [pc, #80]	; (8002130 <MX_SPI3_Init+0xa4>)
 80020e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020e4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80020e6:	4b12      	ldr	r3, [pc, #72]	; (8002130 <MX_SPI3_Init+0xa4>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80020ec:	4b10      	ldr	r3, [pc, #64]	; (8002130 <MX_SPI3_Init+0xa4>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80020f2:	4b0f      	ldr	r3, [pc, #60]	; (8002130 <MX_SPI3_Init+0xa4>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80020f8:	4b0d      	ldr	r3, [pc, #52]	; (8002130 <MX_SPI3_Init+0xa4>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80020fe:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <MX_SPI3_Init+0xa4>)
 8002100:	2200      	movs	r2, #0
 8002102:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002104:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <MX_SPI3_Init+0xa4>)
 8002106:	2200      	movs	r2, #0
 8002108:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800210a:	4b09      	ldr	r3, [pc, #36]	; (8002130 <MX_SPI3_Init+0xa4>)
 800210c:	2200      	movs	r2, #0
 800210e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002110:	4b07      	ldr	r3, [pc, #28]	; (8002130 <MX_SPI3_Init+0xa4>)
 8002112:	2200      	movs	r2, #0
 8002114:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002116:	4b06      	ldr	r3, [pc, #24]	; (8002130 <MX_SPI3_Init+0xa4>)
 8002118:	2200      	movs	r2, #0
 800211a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800211c:	4804      	ldr	r0, [pc, #16]	; (8002130 <MX_SPI3_Init+0xa4>)
 800211e:	f00c fbeb 	bl	800e8f8 <HAL_SPI_Init>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8002128:	f000 fc1e 	bl	8002968 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800212c:	bf00      	nop
 800212e:	bd80      	pop	{r7, pc}
 8002130:	24001048 	.word	0x24001048
 8002134:	40003c00 	.word	0x40003c00

08002138 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b08a      	sub	sp, #40	; 0x28
 800213c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800213e:	f107 031c 	add.w	r3, r7, #28
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	605a      	str	r2, [r3, #4]
 8002148:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800214a:	463b      	mov	r3, r7
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	60da      	str	r2, [r3, #12]
 8002156:	611a      	str	r2, [r3, #16]
 8002158:	615a      	str	r2, [r3, #20]
 800215a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800215c:	4b21      	ldr	r3, [pc, #132]	; (80021e4 <MX_TIM2_Init+0xac>)
 800215e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002162:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002164:	4b1f      	ldr	r3, [pc, #124]	; (80021e4 <MX_TIM2_Init+0xac>)
 8002166:	2200      	movs	r2, #0
 8002168:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800216a:	4b1e      	ldr	r3, [pc, #120]	; (80021e4 <MX_TIM2_Init+0xac>)
 800216c:	2200      	movs	r2, #0
 800216e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 8002170:	4b1c      	ldr	r3, [pc, #112]	; (80021e4 <MX_TIM2_Init+0xac>)
 8002172:	225a      	movs	r2, #90	; 0x5a
 8002174:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002176:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <MX_TIM2_Init+0xac>)
 8002178:	2200      	movs	r2, #0
 800217a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800217c:	4b19      	ldr	r3, [pc, #100]	; (80021e4 <MX_TIM2_Init+0xac>)
 800217e:	2200      	movs	r2, #0
 8002180:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002182:	4818      	ldr	r0, [pc, #96]	; (80021e4 <MX_TIM2_Init+0xac>)
 8002184:	f00d f9a8 	bl	800f4d8 <HAL_TIM_PWM_Init>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800218e:	f000 fbeb 	bl	8002968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002196:	2300      	movs	r3, #0
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800219a:	f107 031c 	add.w	r3, r7, #28
 800219e:	4619      	mov	r1, r3
 80021a0:	4810      	ldr	r0, [pc, #64]	; (80021e4 <MX_TIM2_Init+0xac>)
 80021a2:	f00e fc2f 	bl	8010a04 <HAL_TIMEx_MasterConfigSynchronization>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80021ac:	f000 fbdc 	bl	8002968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021b0:	2360      	movs	r3, #96	; 0x60
 80021b2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021b8:	2300      	movs	r3, #0
 80021ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021bc:	2300      	movs	r3, #0
 80021be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021c0:	463b      	mov	r3, r7
 80021c2:	2208      	movs	r2, #8
 80021c4:	4619      	mov	r1, r3
 80021c6:	4807      	ldr	r0, [pc, #28]	; (80021e4 <MX_TIM2_Init+0xac>)
 80021c8:	f00d fe4e 	bl	800fe68 <HAL_TIM_PWM_ConfigChannel>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80021d2:	f000 fbc9 	bl	8002968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80021d6:	4803      	ldr	r0, [pc, #12]	; (80021e4 <MX_TIM2_Init+0xac>)
 80021d8:	f001 f8e4 	bl	80033a4 <HAL_TIM_MspPostInit>

}
 80021dc:	bf00      	nop
 80021de:	3728      	adds	r7, #40	; 0x28
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	240010d0 	.word	0x240010d0

080021e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08a      	sub	sp, #40	; 0x28
 80021ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ee:	f107 031c 	add.w	r3, r7, #28
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021fa:	463b      	mov	r3, r7
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]
 8002208:	615a      	str	r2, [r3, #20]
 800220a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800220c:	4b26      	ldr	r3, [pc, #152]	; (80022a8 <MX_TIM3_Init+0xc0>)
 800220e:	4a27      	ldr	r2, [pc, #156]	; (80022ac <MX_TIM3_Init+0xc4>)
 8002210:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002212:	4b25      	ldr	r3, [pc, #148]	; (80022a8 <MX_TIM3_Init+0xc0>)
 8002214:	2200      	movs	r2, #0
 8002216:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002218:	4b23      	ldr	r3, [pc, #140]	; (80022a8 <MX_TIM3_Init+0xc0>)
 800221a:	2200      	movs	r2, #0
 800221c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 800221e:	4b22      	ldr	r3, [pc, #136]	; (80022a8 <MX_TIM3_Init+0xc0>)
 8002220:	225a      	movs	r2, #90	; 0x5a
 8002222:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002224:	4b20      	ldr	r3, [pc, #128]	; (80022a8 <MX_TIM3_Init+0xc0>)
 8002226:	2200      	movs	r2, #0
 8002228:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800222a:	4b1f      	ldr	r3, [pc, #124]	; (80022a8 <MX_TIM3_Init+0xc0>)
 800222c:	2200      	movs	r2, #0
 800222e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002230:	481d      	ldr	r0, [pc, #116]	; (80022a8 <MX_TIM3_Init+0xc0>)
 8002232:	f00d f951 	bl	800f4d8 <HAL_TIM_PWM_Init>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800223c:	f000 fb94 	bl	8002968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002240:	2300      	movs	r3, #0
 8002242:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002244:	2300      	movs	r3, #0
 8002246:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002248:	f107 031c 	add.w	r3, r7, #28
 800224c:	4619      	mov	r1, r3
 800224e:	4816      	ldr	r0, [pc, #88]	; (80022a8 <MX_TIM3_Init+0xc0>)
 8002250:	f00e fbd8 	bl	8010a04 <HAL_TIMEx_MasterConfigSynchronization>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800225a:	f000 fb85 	bl	8002968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800225e:	2360      	movs	r3, #96	; 0x60
 8002260:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002262:	2300      	movs	r3, #0
 8002264:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002266:	2300      	movs	r3, #0
 8002268:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800226e:	463b      	mov	r3, r7
 8002270:	2200      	movs	r2, #0
 8002272:	4619      	mov	r1, r3
 8002274:	480c      	ldr	r0, [pc, #48]	; (80022a8 <MX_TIM3_Init+0xc0>)
 8002276:	f00d fdf7 	bl	800fe68 <HAL_TIM_PWM_ConfigChannel>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002280:	f000 fb72 	bl	8002968 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002284:	463b      	mov	r3, r7
 8002286:	2204      	movs	r2, #4
 8002288:	4619      	mov	r1, r3
 800228a:	4807      	ldr	r0, [pc, #28]	; (80022a8 <MX_TIM3_Init+0xc0>)
 800228c:	f00d fdec 	bl	800fe68 <HAL_TIM_PWM_ConfigChannel>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002296:	f000 fb67 	bl	8002968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800229a:	4803      	ldr	r0, [pc, #12]	; (80022a8 <MX_TIM3_Init+0xc0>)
 800229c:	f001 f882 	bl	80033a4 <HAL_TIM_MspPostInit>

}
 80022a0:	bf00      	nop
 80022a2:	3728      	adds	r7, #40	; 0x28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	2400111c 	.word	0x2400111c
 80022ac:	40000400 	.word	0x40000400

080022b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08a      	sub	sp, #40	; 0x28
 80022b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b6:	f107 031c 	add.w	r3, r7, #28
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	605a      	str	r2, [r3, #4]
 80022c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022c2:	463b      	mov	r3, r7
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	611a      	str	r2, [r3, #16]
 80022d0:	615a      	str	r2, [r3, #20]
 80022d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80022d4:	4b32      	ldr	r3, [pc, #200]	; (80023a0 <MX_TIM4_Init+0xf0>)
 80022d6:	4a33      	ldr	r2, [pc, #204]	; (80023a4 <MX_TIM4_Init+0xf4>)
 80022d8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 28;
 80022da:	4b31      	ldr	r3, [pc, #196]	; (80023a0 <MX_TIM4_Init+0xf0>)
 80022dc:	221c      	movs	r2, #28
 80022de:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e0:	4b2f      	ldr	r3, [pc, #188]	; (80023a0 <MX_TIM4_Init+0xf0>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80022e6:	4b2e      	ldr	r3, [pc, #184]	; (80023a0 <MX_TIM4_Init+0xf0>)
 80022e8:	f242 720f 	movw	r2, #9999	; 0x270f
 80022ec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ee:	4b2c      	ldr	r3, [pc, #176]	; (80023a0 <MX_TIM4_Init+0xf0>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022f4:	4b2a      	ldr	r3, [pc, #168]	; (80023a0 <MX_TIM4_Init+0xf0>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80022fa:	4829      	ldr	r0, [pc, #164]	; (80023a0 <MX_TIM4_Init+0xf0>)
 80022fc:	f00d f8ec 	bl	800f4d8 <HAL_TIM_PWM_Init>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002306:	f000 fb2f 	bl	8002968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800230a:	2300      	movs	r3, #0
 800230c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800230e:	2300      	movs	r3, #0
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002312:	f107 031c 	add.w	r3, r7, #28
 8002316:	4619      	mov	r1, r3
 8002318:	4821      	ldr	r0, [pc, #132]	; (80023a0 <MX_TIM4_Init+0xf0>)
 800231a:	f00e fb73 	bl	8010a04 <HAL_TIMEx_MasterConfigSynchronization>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002324:	f000 fb20 	bl	8002968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002328:	2360      	movs	r3, #96	; 0x60
 800232a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800232c:	2300      	movs	r3, #0
 800232e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002330:	2300      	movs	r3, #0
 8002332:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002334:	2300      	movs	r3, #0
 8002336:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002338:	463b      	mov	r3, r7
 800233a:	2200      	movs	r2, #0
 800233c:	4619      	mov	r1, r3
 800233e:	4818      	ldr	r0, [pc, #96]	; (80023a0 <MX_TIM4_Init+0xf0>)
 8002340:	f00d fd92 	bl	800fe68 <HAL_TIM_PWM_ConfigChannel>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800234a:	f000 fb0d 	bl	8002968 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800234e:	463b      	mov	r3, r7
 8002350:	2204      	movs	r2, #4
 8002352:	4619      	mov	r1, r3
 8002354:	4812      	ldr	r0, [pc, #72]	; (80023a0 <MX_TIM4_Init+0xf0>)
 8002356:	f00d fd87 	bl	800fe68 <HAL_TIM_PWM_ConfigChannel>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002360:	f000 fb02 	bl	8002968 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002364:	463b      	mov	r3, r7
 8002366:	2208      	movs	r2, #8
 8002368:	4619      	mov	r1, r3
 800236a:	480d      	ldr	r0, [pc, #52]	; (80023a0 <MX_TIM4_Init+0xf0>)
 800236c:	f00d fd7c 	bl	800fe68 <HAL_TIM_PWM_ConfigChannel>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8002376:	f000 faf7 	bl	8002968 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800237a:	463b      	mov	r3, r7
 800237c:	220c      	movs	r2, #12
 800237e:	4619      	mov	r1, r3
 8002380:	4807      	ldr	r0, [pc, #28]	; (80023a0 <MX_TIM4_Init+0xf0>)
 8002382:	f00d fd71 	bl	800fe68 <HAL_TIM_PWM_ConfigChannel>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 800238c:	f000 faec 	bl	8002968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002390:	4803      	ldr	r0, [pc, #12]	; (80023a0 <MX_TIM4_Init+0xf0>)
 8002392:	f001 f807 	bl	80033a4 <HAL_TIM_MspPostInit>

}
 8002396:	bf00      	nop
 8002398:	3728      	adds	r7, #40	; 0x28
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	24001168 	.word	0x24001168
 80023a4:	40000800 	.word	0x40000800

080023a8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08a      	sub	sp, #40	; 0x28
 80023ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023ae:	f107 031c 	add.w	r3, r7, #28
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	605a      	str	r2, [r3, #4]
 80023b8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023ba:	463b      	mov	r3, r7
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	60da      	str	r2, [r3, #12]
 80023c6:	611a      	str	r2, [r3, #16]
 80023c8:	615a      	str	r2, [r3, #20]
 80023ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80023cc:	4b21      	ldr	r3, [pc, #132]	; (8002454 <MX_TIM5_Init+0xac>)
 80023ce:	4a22      	ldr	r2, [pc, #136]	; (8002458 <MX_TIM5_Init+0xb0>)
 80023d0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80023d2:	4b20      	ldr	r3, [pc, #128]	; (8002454 <MX_TIM5_Init+0xac>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d8:	4b1e      	ldr	r3, [pc, #120]	; (8002454 <MX_TIM5_Init+0xac>)
 80023da:	2200      	movs	r2, #0
 80023dc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 80023de:	4b1d      	ldr	r3, [pc, #116]	; (8002454 <MX_TIM5_Init+0xac>)
 80023e0:	225a      	movs	r2, #90	; 0x5a
 80023e2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e4:	4b1b      	ldr	r3, [pc, #108]	; (8002454 <MX_TIM5_Init+0xac>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ea:	4b1a      	ldr	r3, [pc, #104]	; (8002454 <MX_TIM5_Init+0xac>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80023f0:	4818      	ldr	r0, [pc, #96]	; (8002454 <MX_TIM5_Init+0xac>)
 80023f2:	f00d f871 	bl	800f4d8 <HAL_TIM_PWM_Init>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80023fc:	f000 fab4 	bl	8002968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002400:	2300      	movs	r3, #0
 8002402:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002404:	2300      	movs	r3, #0
 8002406:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002408:	f107 031c 	add.w	r3, r7, #28
 800240c:	4619      	mov	r1, r3
 800240e:	4811      	ldr	r0, [pc, #68]	; (8002454 <MX_TIM5_Init+0xac>)
 8002410:	f00e faf8 	bl	8010a04 <HAL_TIMEx_MasterConfigSynchronization>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800241a:	f000 faa5 	bl	8002968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800241e:	2360      	movs	r3, #96	; 0x60
 8002420:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002422:	2300      	movs	r3, #0
 8002424:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002426:	2300      	movs	r3, #0
 8002428:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800242e:	463b      	mov	r3, r7
 8002430:	220c      	movs	r2, #12
 8002432:	4619      	mov	r1, r3
 8002434:	4807      	ldr	r0, [pc, #28]	; (8002454 <MX_TIM5_Init+0xac>)
 8002436:	f00d fd17 	bl	800fe68 <HAL_TIM_PWM_ConfigChannel>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002440:	f000 fa92 	bl	8002968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002444:	4803      	ldr	r0, [pc, #12]	; (8002454 <MX_TIM5_Init+0xac>)
 8002446:	f000 ffad 	bl	80033a4 <HAL_TIM_MspPostInit>

}
 800244a:	bf00      	nop
 800244c:	3728      	adds	r7, #40	; 0x28
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	240011b4 	.word	0x240011b4
 8002458:	40000c00 	.word	0x40000c00

0800245c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002460:	4b0e      	ldr	r3, [pc, #56]	; (800249c <MX_TIM13_Init+0x40>)
 8002462:	4a0f      	ldr	r2, [pc, #60]	; (80024a0 <MX_TIM13_Init+0x44>)
 8002464:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 95;
 8002466:	4b0d      	ldr	r3, [pc, #52]	; (800249c <MX_TIM13_Init+0x40>)
 8002468:	225f      	movs	r2, #95	; 0x5f
 800246a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800246c:	4b0b      	ldr	r3, [pc, #44]	; (800249c <MX_TIM13_Init+0x40>)
 800246e:	2200      	movs	r2, #0
 8002470:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8002472:	4b0a      	ldr	r3, [pc, #40]	; (800249c <MX_TIM13_Init+0x40>)
 8002474:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002478:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800247a:	4b08      	ldr	r3, [pc, #32]	; (800249c <MX_TIM13_Init+0x40>)
 800247c:	2200      	movs	r2, #0
 800247e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <MX_TIM13_Init+0x40>)
 8002482:	2200      	movs	r2, #0
 8002484:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002486:	4805      	ldr	r0, [pc, #20]	; (800249c <MX_TIM13_Init+0x40>)
 8002488:	f00c ffcf 	bl	800f42a <HAL_TIM_Base_Init>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8002492:	f000 fa69 	bl	8002968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	24001200 	.word	0x24001200
 80024a0:	40001c00 	.word	0x40001c00

080024a4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80024a8:	4b22      	ldr	r3, [pc, #136]	; (8002534 <MX_UART4_Init+0x90>)
 80024aa:	4a23      	ldr	r2, [pc, #140]	; (8002538 <MX_UART4_Init+0x94>)
 80024ac:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80024ae:	4b21      	ldr	r3, [pc, #132]	; (8002534 <MX_UART4_Init+0x90>)
 80024b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024b4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80024b6:	4b1f      	ldr	r3, [pc, #124]	; (8002534 <MX_UART4_Init+0x90>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80024bc:	4b1d      	ldr	r3, [pc, #116]	; (8002534 <MX_UART4_Init+0x90>)
 80024be:	2200      	movs	r2, #0
 80024c0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80024c2:	4b1c      	ldr	r3, [pc, #112]	; (8002534 <MX_UART4_Init+0x90>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80024c8:	4b1a      	ldr	r3, [pc, #104]	; (8002534 <MX_UART4_Init+0x90>)
 80024ca:	220c      	movs	r2, #12
 80024cc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ce:	4b19      	ldr	r3, [pc, #100]	; (8002534 <MX_UART4_Init+0x90>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80024d4:	4b17      	ldr	r3, [pc, #92]	; (8002534 <MX_UART4_Init+0x90>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024da:	4b16      	ldr	r3, [pc, #88]	; (8002534 <MX_UART4_Init+0x90>)
 80024dc:	2200      	movs	r2, #0
 80024de:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024e0:	4b14      	ldr	r3, [pc, #80]	; (8002534 <MX_UART4_Init+0x90>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024e6:	4b13      	ldr	r3, [pc, #76]	; (8002534 <MX_UART4_Init+0x90>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80024ec:	4811      	ldr	r0, [pc, #68]	; (8002534 <MX_UART4_Init+0x90>)
 80024ee:	f00e fb43 	bl	8010b78 <HAL_UART_Init>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80024f8:	f000 fa36 	bl	8002968 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024fc:	2100      	movs	r1, #0
 80024fe:	480d      	ldr	r0, [pc, #52]	; (8002534 <MX_UART4_Init+0x90>)
 8002500:	f00f fc49 	bl	8011d96 <HAL_UARTEx_SetTxFifoThreshold>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800250a:	f000 fa2d 	bl	8002968 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800250e:	2100      	movs	r1, #0
 8002510:	4808      	ldr	r0, [pc, #32]	; (8002534 <MX_UART4_Init+0x90>)
 8002512:	f00f fc7e 	bl	8011e12 <HAL_UARTEx_SetRxFifoThreshold>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800251c:	f000 fa24 	bl	8002968 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002520:	4804      	ldr	r0, [pc, #16]	; (8002534 <MX_UART4_Init+0x90>)
 8002522:	f00f fbff 	bl	8011d24 <HAL_UARTEx_DisableFifoMode>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800252c:	f000 fa1c 	bl	8002968 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002530:	bf00      	nop
 8002532:	bd80      	pop	{r7, pc}
 8002534:	240014a4 	.word	0x240014a4
 8002538:	40004c00 	.word	0x40004c00

0800253c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002540:	4b22      	ldr	r3, [pc, #136]	; (80025cc <MX_USART6_UART_Init+0x90>)
 8002542:	4a23      	ldr	r2, [pc, #140]	; (80025d0 <MX_USART6_UART_Init+0x94>)
 8002544:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002546:	4b21      	ldr	r3, [pc, #132]	; (80025cc <MX_USART6_UART_Init+0x90>)
 8002548:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800254c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800254e:	4b1f      	ldr	r3, [pc, #124]	; (80025cc <MX_USART6_UART_Init+0x90>)
 8002550:	2200      	movs	r2, #0
 8002552:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002554:	4b1d      	ldr	r3, [pc, #116]	; (80025cc <MX_USART6_UART_Init+0x90>)
 8002556:	2200      	movs	r2, #0
 8002558:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800255a:	4b1c      	ldr	r3, [pc, #112]	; (80025cc <MX_USART6_UART_Init+0x90>)
 800255c:	2200      	movs	r2, #0
 800255e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002560:	4b1a      	ldr	r3, [pc, #104]	; (80025cc <MX_USART6_UART_Init+0x90>)
 8002562:	220c      	movs	r2, #12
 8002564:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002566:	4b19      	ldr	r3, [pc, #100]	; (80025cc <MX_USART6_UART_Init+0x90>)
 8002568:	2200      	movs	r2, #0
 800256a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800256c:	4b17      	ldr	r3, [pc, #92]	; (80025cc <MX_USART6_UART_Init+0x90>)
 800256e:	2200      	movs	r2, #0
 8002570:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002572:	4b16      	ldr	r3, [pc, #88]	; (80025cc <MX_USART6_UART_Init+0x90>)
 8002574:	2200      	movs	r2, #0
 8002576:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002578:	4b14      	ldr	r3, [pc, #80]	; (80025cc <MX_USART6_UART_Init+0x90>)
 800257a:	2200      	movs	r2, #0
 800257c:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800257e:	4b13      	ldr	r3, [pc, #76]	; (80025cc <MX_USART6_UART_Init+0x90>)
 8002580:	2200      	movs	r2, #0
 8002582:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002584:	4811      	ldr	r0, [pc, #68]	; (80025cc <MX_USART6_UART_Init+0x90>)
 8002586:	f00e faf7 	bl	8010b78 <HAL_UART_Init>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002590:	f000 f9ea 	bl	8002968 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002594:	2100      	movs	r1, #0
 8002596:	480d      	ldr	r0, [pc, #52]	; (80025cc <MX_USART6_UART_Init+0x90>)
 8002598:	f00f fbfd 	bl	8011d96 <HAL_UARTEx_SetTxFifoThreshold>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80025a2:	f000 f9e1 	bl	8002968 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025a6:	2100      	movs	r1, #0
 80025a8:	4808      	ldr	r0, [pc, #32]	; (80025cc <MX_USART6_UART_Init+0x90>)
 80025aa:	f00f fc32 	bl	8011e12 <HAL_UARTEx_SetRxFifoThreshold>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80025b4:	f000 f9d8 	bl	8002968 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80025b8:	4804      	ldr	r0, [pc, #16]	; (80025cc <MX_USART6_UART_Init+0x90>)
 80025ba:	f00f fbb3 	bl	8011d24 <HAL_UARTEx_DisableFifoMode>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80025c4:	f000 f9d0 	bl	8002968 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80025c8:	bf00      	nop
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	24001538 	.word	0x24001538
 80025d0:	40011400 	.word	0x40011400

080025d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025da:	4b2d      	ldr	r3, [pc, #180]	; (8002690 <MX_DMA_Init+0xbc>)
 80025dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025e0:	4a2b      	ldr	r2, [pc, #172]	; (8002690 <MX_DMA_Init+0xbc>)
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80025ea:	4b29      	ldr	r3, [pc, #164]	; (8002690 <MX_DMA_Init+0xbc>)
 80025ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	607b      	str	r3, [r7, #4]
 80025f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80025f8:	4b25      	ldr	r3, [pc, #148]	; (8002690 <MX_DMA_Init+0xbc>)
 80025fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025fe:	4a24      	ldr	r2, [pc, #144]	; (8002690 <MX_DMA_Init+0xbc>)
 8002600:	f043 0302 	orr.w	r3, r3, #2
 8002604:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002608:	4b21      	ldr	r3, [pc, #132]	; (8002690 <MX_DMA_Init+0xbc>)
 800260a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	603b      	str	r3, [r7, #0]
 8002614:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002616:	2200      	movs	r2, #0
 8002618:	2100      	movs	r1, #0
 800261a:	200b      	movs	r0, #11
 800261c:	f002 fec7 	bl	80053ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002620:	200b      	movs	r0, #11
 8002622:	f002 fede 	bl	80053e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002626:	2200      	movs	r2, #0
 8002628:	2100      	movs	r1, #0
 800262a:	200c      	movs	r0, #12
 800262c:	f002 febf 	bl	80053ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002630:	200c      	movs	r0, #12
 8002632:	f002 fed6 	bl	80053e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002636:	2200      	movs	r2, #0
 8002638:	2100      	movs	r1, #0
 800263a:	200d      	movs	r0, #13
 800263c:	f002 feb7 	bl	80053ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002640:	200d      	movs	r0, #13
 8002642:	f002 fece 	bl	80053e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002646:	2200      	movs	r2, #0
 8002648:	2100      	movs	r1, #0
 800264a:	200e      	movs	r0, #14
 800264c:	f002 feaf 	bl	80053ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002650:	200e      	movs	r0, #14
 8002652:	f002 fec6 	bl	80053e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002656:	2200      	movs	r2, #0
 8002658:	2100      	movs	r1, #0
 800265a:	200f      	movs	r0, #15
 800265c:	f002 fea7 	bl	80053ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002660:	200f      	movs	r0, #15
 8002662:	f002 febe 	bl	80053e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002666:	2200      	movs	r2, #0
 8002668:	2100      	movs	r1, #0
 800266a:	2010      	movs	r0, #16
 800266c:	f002 fe9f 	bl	80053ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002670:	2010      	movs	r0, #16
 8002672:	f002 feb6 	bl	80053e2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002676:	2200      	movs	r2, #0
 8002678:	2100      	movs	r1, #0
 800267a:	2046      	movs	r0, #70	; 0x46
 800267c:	f002 fe97 	bl	80053ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002680:	2046      	movs	r0, #70	; 0x46
 8002682:	f002 feae 	bl	80053e2 <HAL_NVIC_EnableIRQ>

}
 8002686:	bf00      	nop
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	58024400 	.word	0x58024400

08002694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08c      	sub	sp, #48	; 0x30
 8002698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800269a:	f107 031c 	add.w	r3, r7, #28
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	605a      	str	r2, [r3, #4]
 80026a4:	609a      	str	r2, [r3, #8]
 80026a6:	60da      	str	r2, [r3, #12]
 80026a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80026aa:	4ba7      	ldr	r3, [pc, #668]	; (8002948 <MX_GPIO_Init+0x2b4>)
 80026ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026b0:	4aa5      	ldr	r2, [pc, #660]	; (8002948 <MX_GPIO_Init+0x2b4>)
 80026b2:	f043 0310 	orr.w	r3, r3, #16
 80026b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026ba:	4ba3      	ldr	r3, [pc, #652]	; (8002948 <MX_GPIO_Init+0x2b4>)
 80026bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026c0:	f003 0310 	and.w	r3, r3, #16
 80026c4:	61bb      	str	r3, [r7, #24]
 80026c6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026c8:	4b9f      	ldr	r3, [pc, #636]	; (8002948 <MX_GPIO_Init+0x2b4>)
 80026ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ce:	4a9e      	ldr	r2, [pc, #632]	; (8002948 <MX_GPIO_Init+0x2b4>)
 80026d0:	f043 0320 	orr.w	r3, r3, #32
 80026d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026d8:	4b9b      	ldr	r3, [pc, #620]	; (8002948 <MX_GPIO_Init+0x2b4>)
 80026da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026de:	f003 0320 	and.w	r3, r3, #32
 80026e2:	617b      	str	r3, [r7, #20]
 80026e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026e6:	4b98      	ldr	r3, [pc, #608]	; (8002948 <MX_GPIO_Init+0x2b4>)
 80026e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ec:	4a96      	ldr	r2, [pc, #600]	; (8002948 <MX_GPIO_Init+0x2b4>)
 80026ee:	f043 0304 	orr.w	r3, r3, #4
 80026f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026f6:	4b94      	ldr	r3, [pc, #592]	; (8002948 <MX_GPIO_Init+0x2b4>)
 80026f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002704:	4b90      	ldr	r3, [pc, #576]	; (8002948 <MX_GPIO_Init+0x2b4>)
 8002706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800270a:	4a8f      	ldr	r2, [pc, #572]	; (8002948 <MX_GPIO_Init+0x2b4>)
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002714:	4b8c      	ldr	r3, [pc, #560]	; (8002948 <MX_GPIO_Init+0x2b4>)
 8002716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002722:	4b89      	ldr	r3, [pc, #548]	; (8002948 <MX_GPIO_Init+0x2b4>)
 8002724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002728:	4a87      	ldr	r2, [pc, #540]	; (8002948 <MX_GPIO_Init+0x2b4>)
 800272a:	f043 0302 	orr.w	r3, r3, #2
 800272e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002732:	4b85      	ldr	r3, [pc, #532]	; (8002948 <MX_GPIO_Init+0x2b4>)
 8002734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	60bb      	str	r3, [r7, #8]
 800273e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002740:	4b81      	ldr	r3, [pc, #516]	; (8002948 <MX_GPIO_Init+0x2b4>)
 8002742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002746:	4a80      	ldr	r2, [pc, #512]	; (8002948 <MX_GPIO_Init+0x2b4>)
 8002748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800274c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002750:	4b7d      	ldr	r3, [pc, #500]	; (8002948 <MX_GPIO_Init+0x2b4>)
 8002752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800275a:	607b      	str	r3, [r7, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800275e:	4b7a      	ldr	r3, [pc, #488]	; (8002948 <MX_GPIO_Init+0x2b4>)
 8002760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002764:	4a78      	ldr	r2, [pc, #480]	; (8002948 <MX_GPIO_Init+0x2b4>)
 8002766:	f043 0308 	orr.w	r3, r3, #8
 800276a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800276e:	4b76      	ldr	r3, [pc, #472]	; (8002948 <MX_GPIO_Init+0x2b4>)
 8002770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	603b      	str	r3, [r7, #0]
 800277a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 800277c:	2200      	movs	r2, #0
 800277e:	f241 5104 	movw	r1, #5380	; 0x1504
 8002782:	4872      	ldr	r0, [pc, #456]	; (800294c <MX_GPIO_Init+0x2b8>)
 8002784:	f005 fc40 	bl	8008008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|ARM2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8002788:	2200      	movs	r2, #0
 800278a:	f248 0106 	movw	r1, #32774	; 0x8006
 800278e:	4870      	ldr	r0, [pc, #448]	; (8002950 <MX_GPIO_Init+0x2bc>)
 8002790:	f005 fc3a 	bl	8008008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002794:	2200      	movs	r2, #0
 8002796:	2130      	movs	r1, #48	; 0x30
 8002798:	486e      	ldr	r0, [pc, #440]	; (8002954 <MX_GPIO_Init+0x2c0>)
 800279a:	f005 fc35 	bl	8008008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|PYRO1_Pin, GPIO_PIN_RESET);
 800279e:	2200      	movs	r2, #0
 80027a0:	2103      	movs	r1, #3
 80027a2:	486d      	ldr	r0, [pc, #436]	; (8002958 <MX_GPIO_Init+0x2c4>)
 80027a4:	f005 fc30 	bl	8008008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 80027a8:	2200      	movs	r2, #0
 80027aa:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 80027ae:	486b      	ldr	r0, [pc, #428]	; (800295c <MX_GPIO_Init+0x2c8>)
 80027b0:	f005 fc2a 	bl	8008008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80027b4:	2200      	movs	r2, #0
 80027b6:	210e      	movs	r1, #14
 80027b8:	4869      	ldr	r0, [pc, #420]	; (8002960 <MX_GPIO_Init+0x2cc>)
 80027ba:	f005 fc25 	bl	8008008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_SET);
 80027be:	2201      	movs	r2, #1
 80027c0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80027c4:	4867      	ldr	r0, [pc, #412]	; (8002964 <MX_GPIO_Init+0x2d0>)
 80027c6:	f005 fc1f 	bl	8008008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 80027ca:	2200      	movs	r2, #0
 80027cc:	2101      	movs	r1, #1
 80027ce:	4865      	ldr	r0, [pc, #404]	; (8002964 <MX_GPIO_Init+0x2d0>)
 80027d0:	f005 fc1a 	bl	8008008 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 80027d4:	f241 5304 	movw	r3, #5380	; 0x1504
 80027d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027da:	2301      	movs	r3, #1
 80027dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027de:	2300      	movs	r3, #0
 80027e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e2:	2300      	movs	r3, #0
 80027e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027e6:	f107 031c 	add.w	r3, r7, #28
 80027ea:	4619      	mov	r1, r3
 80027ec:	4857      	ldr	r0, [pc, #348]	; (800294c <MX_GPIO_Init+0x2b8>)
 80027ee:	f005 fa4b 	bl	8007c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin ARM2_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|ARM2_Pin|GPIO_PIN_15;
 80027f2:	f248 0306 	movw	r3, #32774	; 0x8006
 80027f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027f8:	2301      	movs	r3, #1
 80027fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002800:	2300      	movs	r3, #0
 8002802:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002804:	f107 031c 	add.w	r3, r7, #28
 8002808:	4619      	mov	r1, r3
 800280a:	4851      	ldr	r0, [pc, #324]	; (8002950 <MX_GPIO_Init+0x2bc>)
 800280c:	f005 fa3c 	bl	8007c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002810:	2330      	movs	r3, #48	; 0x30
 8002812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002814:	2301      	movs	r3, #1
 8002816:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002818:	2300      	movs	r3, #0
 800281a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281c:	2300      	movs	r3, #0
 800281e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002820:	f107 031c 	add.w	r3, r7, #28
 8002824:	4619      	mov	r1, r3
 8002826:	484b      	ldr	r0, [pc, #300]	; (8002954 <MX_GPIO_Init+0x2c0>)
 8002828:	f005 fa2e 	bl	8007c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PYRO1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|PYRO1_Pin;
 800282c:	2303      	movs	r3, #3
 800282e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002830:	2301      	movs	r3, #1
 8002832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002834:	2300      	movs	r3, #0
 8002836:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002838:	2300      	movs	r3, #0
 800283a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800283c:	f107 031c 	add.w	r3, r7, #28
 8002840:	4619      	mov	r1, r3
 8002842:	4845      	ldr	r0, [pc, #276]	; (8002958 <MX_GPIO_Init+0x2c4>)
 8002844:	f005 fa20 	bl	8007c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 8002848:	2304      	movs	r3, #4
 800284a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800284c:	2300      	movs	r3, #0
 800284e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002850:	2301      	movs	r3, #1
 8002852:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 8002854:	f107 031c 	add.w	r3, r7, #28
 8002858:	4619      	mov	r1, r3
 800285a:	483f      	ldr	r0, [pc, #252]	; (8002958 <MX_GPIO_Init+0x2c4>)
 800285c:	f005 fa14 	bl	8007c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 8002860:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8002864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002866:	2301      	movs	r3, #1
 8002868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286a:	2300      	movs	r3, #0
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800286e:	2300      	movs	r3, #0
 8002870:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002872:	f107 031c 	add.w	r3, r7, #28
 8002876:	4619      	mov	r1, r3
 8002878:	4838      	ldr	r0, [pc, #224]	; (800295c <MX_GPIO_Init+0x2c8>)
 800287a:	f005 fa05 	bl	8007c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 800287e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002884:	2300      	movs	r3, #0
 8002886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002888:	2301      	movs	r3, #1
 800288a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800288c:	f107 031c 	add.w	r3, r7, #28
 8002890:	4619      	mov	r1, r3
 8002892:	4832      	ldr	r0, [pc, #200]	; (800295c <MX_GPIO_Init+0x2c8>)
 8002894:	f005 f9f8 	bl	8007c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 8002898:	2301      	movs	r3, #1
 800289a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800289c:	2300      	movs	r3, #0
 800289e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028a0:	2301      	movs	r3, #1
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 80028a4:	f107 031c 	add.w	r3, r7, #28
 80028a8:	4619      	mov	r1, r3
 80028aa:	482d      	ldr	r0, [pc, #180]	; (8002960 <MX_GPIO_Init+0x2cc>)
 80028ac:	f005 f9ec 	bl	8007c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 80028b0:	230e      	movs	r3, #14
 80028b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028b4:	2301      	movs	r3, #1
 80028b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028bc:	2300      	movs	r3, #0
 80028be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028c0:	f107 031c 	add.w	r3, r7, #28
 80028c4:	4619      	mov	r1, r3
 80028c6:	4826      	ldr	r0, [pc, #152]	; (8002960 <MX_GPIO_Init+0x2cc>)
 80028c8:	f005 f9de 	bl	8007c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 80028cc:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 80028d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028d2:	2300      	movs	r3, #0
 80028d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028d6:	2301      	movs	r3, #1
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028da:	f107 031c 	add.w	r3, r7, #28
 80028de:	4619      	mov	r1, r3
 80028e0:	481a      	ldr	r0, [pc, #104]	; (800294c <MX_GPIO_Init+0x2b8>)
 80028e2:	f005 f9d1 	bl	8007c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0;
 80028e6:	f240 7301 	movw	r3, #1793	; 0x701
 80028ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ec:	2301      	movs	r3, #1
 80028ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f0:	2300      	movs	r3, #0
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f4:	2300      	movs	r3, #0
 80028f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028f8:	f107 031c 	add.w	r3, r7, #28
 80028fc:	4619      	mov	r1, r3
 80028fe:	4819      	ldr	r0, [pc, #100]	; (8002964 <MX_GPIO_Init+0x2d0>)
 8002900:	f005 f9c2 	bl	8007c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 8002904:	2310      	movs	r3, #16
 8002906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002908:	2300      	movs	r3, #0
 800290a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290c:	2300      	movs	r3, #0
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002910:	f107 031c 	add.w	r3, r7, #28
 8002914:	4619      	mov	r1, r3
 8002916:	4812      	ldr	r0, [pc, #72]	; (8002960 <MX_GPIO_Init+0x2cc>)
 8002918:	f005 f9b6 	bl	8007c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800291c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002922:	2302      	movs	r3, #2
 8002924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002926:	2300      	movs	r3, #0
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292a:	2300      	movs	r3, #0
 800292c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800292e:	2300      	movs	r3, #0
 8002930:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002932:	f107 031c 	add.w	r3, r7, #28
 8002936:	4619      	mov	r1, r3
 8002938:	4805      	ldr	r0, [pc, #20]	; (8002950 <MX_GPIO_Init+0x2bc>)
 800293a:	f005 f9a5 	bl	8007c88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800293e:	bf00      	nop
 8002940:	3730      	adds	r7, #48	; 0x30
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	58024400 	.word	0x58024400
 800294c:	58021000 	.word	0x58021000
 8002950:	58020000 	.word	0x58020000
 8002954:	58020800 	.word	0x58020800
 8002958:	58020400 	.word	0x58020400
 800295c:	58021400 	.word	0x58021400
 8002960:	58021800 	.word	0x58021800
 8002964:	58020c00 	.word	0x58020c00

08002968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800296c:	b672      	cpsid	i
}
 800296e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002970:	e7fe      	b.n	8002970 <Error_Handler+0x8>
	...

08002974 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800297a:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <HAL_MspInit+0x30>)
 800297c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002980:	4a08      	ldr	r2, [pc, #32]	; (80029a4 <HAL_MspInit+0x30>)
 8002982:	f043 0302 	orr.w	r3, r3, #2
 8002986:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800298a:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <HAL_MspInit+0x30>)
 800298c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	607b      	str	r3, [r7, #4]
 8002996:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	58024400 	.word	0x58024400

080029a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08c      	sub	sp, #48	; 0x30
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b0:	f107 031c 	add.w	r3, r7, #28
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	60da      	str	r2, [r3, #12]
 80029be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a5d      	ldr	r2, [pc, #372]	; (8002b3c <HAL_ADC_MspInit+0x194>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d159      	bne.n	8002a7e <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80029ca:	4b5d      	ldr	r3, [pc, #372]	; (8002b40 <HAL_ADC_MspInit+0x198>)
 80029cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80029d0:	4a5b      	ldr	r2, [pc, #364]	; (8002b40 <HAL_ADC_MspInit+0x198>)
 80029d2:	f043 0320 	orr.w	r3, r3, #32
 80029d6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80029da:	4b59      	ldr	r3, [pc, #356]	; (8002b40 <HAL_ADC_MspInit+0x198>)
 80029dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80029e0:	f003 0320 	and.w	r3, r3, #32
 80029e4:	61bb      	str	r3, [r7, #24]
 80029e6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029e8:	4b55      	ldr	r3, [pc, #340]	; (8002b40 <HAL_ADC_MspInit+0x198>)
 80029ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ee:	4a54      	ldr	r2, [pc, #336]	; (8002b40 <HAL_ADC_MspInit+0x198>)
 80029f0:	f043 0304 	orr.w	r3, r3, #4
 80029f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029f8:	4b51      	ldr	r3, [pc, #324]	; (8002b40 <HAL_ADC_MspInit+0x198>)
 80029fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = ARM_CHECK_Pin;
 8002a06:	2301      	movs	r3, #1
 8002a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002a12:	f107 031c 	add.w	r3, r7, #28
 8002a16:	4619      	mov	r1, r3
 8002a18:	484a      	ldr	r0, [pc, #296]	; (8002b44 <HAL_ADC_MspInit+0x19c>)
 8002a1a:	f005 f935 	bl	8007c88 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 8002a1e:	4b4a      	ldr	r3, [pc, #296]	; (8002b48 <HAL_ADC_MspInit+0x1a0>)
 8002a20:	4a4a      	ldr	r2, [pc, #296]	; (8002b4c <HAL_ADC_MspInit+0x1a4>)
 8002a22:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002a24:	4b48      	ldr	r3, [pc, #288]	; (8002b48 <HAL_ADC_MspInit+0x1a0>)
 8002a26:	2209      	movs	r2, #9
 8002a28:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a2a:	4b47      	ldr	r3, [pc, #284]	; (8002b48 <HAL_ADC_MspInit+0x1a0>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a30:	4b45      	ldr	r3, [pc, #276]	; (8002b48 <HAL_ADC_MspInit+0x1a0>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002a36:	4b44      	ldr	r3, [pc, #272]	; (8002b48 <HAL_ADC_MspInit+0x1a0>)
 8002a38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a3c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a3e:	4b42      	ldr	r3, [pc, #264]	; (8002b48 <HAL_ADC_MspInit+0x1a0>)
 8002a40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a44:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a46:	4b40      	ldr	r3, [pc, #256]	; (8002b48 <HAL_ADC_MspInit+0x1a0>)
 8002a48:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a4c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002a4e:	4b3e      	ldr	r3, [pc, #248]	; (8002b48 <HAL_ADC_MspInit+0x1a0>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002a54:	4b3c      	ldr	r3, [pc, #240]	; (8002b48 <HAL_ADC_MspInit+0x1a0>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a5a:	4b3b      	ldr	r3, [pc, #236]	; (8002b48 <HAL_ADC_MspInit+0x1a0>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002a60:	4839      	ldr	r0, [pc, #228]	; (8002b48 <HAL_ADC_MspInit+0x1a0>)
 8002a62:	f002 fcd9 	bl	8005418 <HAL_DMA_Init>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002a6c:	f7ff ff7c 	bl	8002968 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a35      	ldr	r2, [pc, #212]	; (8002b48 <HAL_ADC_MspInit+0x1a0>)
 8002a74:	659a      	str	r2, [r3, #88]	; 0x58
 8002a76:	4a34      	ldr	r2, [pc, #208]	; (8002b48 <HAL_ADC_MspInit+0x1a0>)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002a7c:	e059      	b.n	8002b32 <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a33      	ldr	r2, [pc, #204]	; (8002b50 <HAL_ADC_MspInit+0x1a8>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d154      	bne.n	8002b32 <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002a88:	4b2d      	ldr	r3, [pc, #180]	; (8002b40 <HAL_ADC_MspInit+0x198>)
 8002a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a8e:	4a2c      	ldr	r2, [pc, #176]	; (8002b40 <HAL_ADC_MspInit+0x198>)
 8002a90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a98:	4b29      	ldr	r3, [pc, #164]	; (8002b40 <HAL_ADC_MspInit+0x198>)
 8002a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aa2:	613b      	str	r3, [r7, #16]
 8002aa4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aa6:	4b26      	ldr	r3, [pc, #152]	; (8002b40 <HAL_ADC_MspInit+0x198>)
 8002aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aac:	4a24      	ldr	r2, [pc, #144]	; (8002b40 <HAL_ADC_MspInit+0x198>)
 8002aae:	f043 0304 	orr.w	r3, r3, #4
 8002ab2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ab6:	4b22      	ldr	r3, [pc, #136]	; (8002b40 <HAL_ADC_MspInit+0x198>)
 8002ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002ac4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002ac8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002acc:	f001 f80e 	bl	8003aec <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8002ad0:	4b20      	ldr	r3, [pc, #128]	; (8002b54 <HAL_ADC_MspInit+0x1ac>)
 8002ad2:	4a21      	ldr	r2, [pc, #132]	; (8002b58 <HAL_ADC_MspInit+0x1b0>)
 8002ad4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002ad6:	4b1f      	ldr	r3, [pc, #124]	; (8002b54 <HAL_ADC_MspInit+0x1ac>)
 8002ad8:	2273      	movs	r2, #115	; 0x73
 8002ada:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002adc:	4b1d      	ldr	r3, [pc, #116]	; (8002b54 <HAL_ADC_MspInit+0x1ac>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ae2:	4b1c      	ldr	r3, [pc, #112]	; (8002b54 <HAL_ADC_MspInit+0x1ac>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002ae8:	4b1a      	ldr	r3, [pc, #104]	; (8002b54 <HAL_ADC_MspInit+0x1ac>)
 8002aea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002aee:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002af0:	4b18      	ldr	r3, [pc, #96]	; (8002b54 <HAL_ADC_MspInit+0x1ac>)
 8002af2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002af6:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002af8:	4b16      	ldr	r3, [pc, #88]	; (8002b54 <HAL_ADC_MspInit+0x1ac>)
 8002afa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002afe:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002b00:	4b14      	ldr	r3, [pc, #80]	; (8002b54 <HAL_ADC_MspInit+0x1ac>)
 8002b02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b06:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002b08:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <HAL_ADC_MspInit+0x1ac>)
 8002b0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b0e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b10:	4b10      	ldr	r3, [pc, #64]	; (8002b54 <HAL_ADC_MspInit+0x1ac>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002b16:	480f      	ldr	r0, [pc, #60]	; (8002b54 <HAL_ADC_MspInit+0x1ac>)
 8002b18:	f002 fc7e 	bl	8005418 <HAL_DMA_Init>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 8002b22:	f7ff ff21 	bl	8002968 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a0a      	ldr	r2, [pc, #40]	; (8002b54 <HAL_ADC_MspInit+0x1ac>)
 8002b2a:	659a      	str	r2, [r3, #88]	; 0x58
 8002b2c:	4a09      	ldr	r2, [pc, #36]	; (8002b54 <HAL_ADC_MspInit+0x1ac>)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002b32:	bf00      	nop
 8002b34:	3730      	adds	r7, #48	; 0x30
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40022000 	.word	0x40022000
 8002b40:	58024400 	.word	0x58024400
 8002b44:	58020800 	.word	0x58020800
 8002b48:	24000cd8 	.word	0x24000cd8
 8002b4c:	40020088 	.word	0x40020088
 8002b50:	58026000 	.word	0x58026000
 8002b54:	24000d50 	.word	0x24000d50
 8002b58:	400204b8 	.word	0x400204b8

08002b5c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b0b8      	sub	sp, #224	; 0xe0
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b64:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	605a      	str	r2, [r3, #4]
 8002b6e:	609a      	str	r2, [r3, #8]
 8002b70:	60da      	str	r2, [r3, #12]
 8002b72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b74:	f107 0310 	add.w	r3, r7, #16
 8002b78:	22b8      	movs	r2, #184	; 0xb8
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f014 fad9 	bl	8017134 <memset>
  if(hfdcan->Instance==FDCAN3)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a26      	ldr	r2, [pc, #152]	; (8002c20 <HAL_FDCAN_MspInit+0xc4>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d145      	bne.n	8002c18 <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002b8c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002b90:	f04f 0300 	mov.w	r3, #0
 8002b94:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002b98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002b9c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b9e:	f107 0310 	add.w	r3, r7, #16
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f007 fe5e 	bl	800a864 <HAL_RCCEx_PeriphCLKConfig>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8002bae:	f7ff fedb 	bl	8002968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002bb2:	4b1c      	ldr	r3, [pc, #112]	; (8002c24 <HAL_FDCAN_MspInit+0xc8>)
 8002bb4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002bb8:	4a1a      	ldr	r2, [pc, #104]	; (8002c24 <HAL_FDCAN_MspInit+0xc8>)
 8002bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bbe:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002bc2:	4b18      	ldr	r3, [pc, #96]	; (8002c24 <HAL_FDCAN_MspInit+0xc8>)
 8002bc4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002bd0:	4b14      	ldr	r3, [pc, #80]	; (8002c24 <HAL_FDCAN_MspInit+0xc8>)
 8002bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bd6:	4a13      	ldr	r2, [pc, #76]	; (8002c24 <HAL_FDCAN_MspInit+0xc8>)
 8002bd8:	f043 0320 	orr.w	r3, r3, #32
 8002bdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002be0:	4b10      	ldr	r3, [pc, #64]	; (8002c24 <HAL_FDCAN_MspInit+0xc8>)
 8002be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002be6:	f003 0320 	and.w	r3, r3, #32
 8002bea:	60bb      	str	r3, [r7, #8]
 8002bec:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bee:	23c0      	movs	r3, #192	; 0xc0
 8002bf0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c00:	2300      	movs	r3, #0
 8002c02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8002c06:	2302      	movs	r3, #2
 8002c08:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c0c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c10:	4619      	mov	r1, r3
 8002c12:	4805      	ldr	r0, [pc, #20]	; (8002c28 <HAL_FDCAN_MspInit+0xcc>)
 8002c14:	f005 f838 	bl	8007c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8002c18:	bf00      	nop
 8002c1a:	37e0      	adds	r7, #224	; 0xe0
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	4000d400 	.word	0x4000d400
 8002c24:	58024400 	.word	0x58024400
 8002c28:	58021400 	.word	0x58021400

08002c2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b0b8      	sub	sp, #224	; 0xe0
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c34:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	605a      	str	r2, [r3, #4]
 8002c3e:	609a      	str	r2, [r3, #8]
 8002c40:	60da      	str	r2, [r3, #12]
 8002c42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c44:	f107 0310 	add.w	r3, r7, #16
 8002c48:	22b8      	movs	r2, #184	; 0xb8
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f014 fa71 	bl	8017134 <memset>
  if(hi2c->Instance==I2C2)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a2a      	ldr	r2, [pc, #168]	; (8002d00 <HAL_I2C_MspInit+0xd4>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d14d      	bne.n	8002cf8 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002c5c:	f04f 0208 	mov.w	r2, #8
 8002c60:	f04f 0300 	mov.w	r3, #0
 8002c64:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c6e:	f107 0310 	add.w	r3, r7, #16
 8002c72:	4618      	mov	r0, r3
 8002c74:	f007 fdf6 	bl	800a864 <HAL_RCCEx_PeriphCLKConfig>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002c7e:	f7ff fe73 	bl	8002968 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c82:	4b20      	ldr	r3, [pc, #128]	; (8002d04 <HAL_I2C_MspInit+0xd8>)
 8002c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c88:	4a1e      	ldr	r2, [pc, #120]	; (8002d04 <HAL_I2C_MspInit+0xd8>)
 8002c8a:	f043 0320 	orr.w	r3, r3, #32
 8002c8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c92:	4b1c      	ldr	r3, [pc, #112]	; (8002d04 <HAL_I2C_MspInit+0xd8>)
 8002c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c98:	f003 0320 	and.w	r3, r3, #32
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ca6:	2312      	movs	r3, #18
 8002ca8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002cb8:	2304      	movs	r3, #4
 8002cba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002cbe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4810      	ldr	r0, [pc, #64]	; (8002d08 <HAL_I2C_MspInit+0xdc>)
 8002cc6:	f004 ffdf 	bl	8007c88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002cca:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <HAL_I2C_MspInit+0xd8>)
 8002ccc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cd0:	4a0c      	ldr	r2, [pc, #48]	; (8002d04 <HAL_I2C_MspInit+0xd8>)
 8002cd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002cd6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002cda:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <HAL_I2C_MspInit+0xd8>)
 8002cdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ce0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce4:	60bb      	str	r3, [r7, #8]
 8002ce6:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8002ce8:	2200      	movs	r2, #0
 8002cea:	2101      	movs	r1, #1
 8002cec:	2021      	movs	r0, #33	; 0x21
 8002cee:	f002 fb5e 	bl	80053ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002cf2:	2021      	movs	r0, #33	; 0x21
 8002cf4:	f002 fb75 	bl	80053e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002cf8:	bf00      	nop
 8002cfa:	37e0      	adds	r7, #224	; 0xe0
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40005800 	.word	0x40005800
 8002d04:	58024400 	.word	0x58024400
 8002d08:	58021400 	.word	0x58021400

08002d0c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b0ba      	sub	sp, #232	; 0xe8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d14:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	605a      	str	r2, [r3, #4]
 8002d1e:	609a      	str	r2, [r3, #8]
 8002d20:	60da      	str	r2, [r3, #12]
 8002d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d24:	f107 0318 	add.w	r3, r7, #24
 8002d28:	22b8      	movs	r2, #184	; 0xb8
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f014 fa01 	bl	8017134 <memset>
  if(hsd->Instance==SDMMC2)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a5d      	ldr	r2, [pc, #372]	; (8002eac <HAL_SD_MspInit+0x1a0>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	f040 80b3 	bne.w	8002ea4 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002d3e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d4e:	f107 0318 	add.w	r3, r7, #24
 8002d52:	4618      	mov	r0, r3
 8002d54:	f007 fd86 	bl	800a864 <HAL_RCCEx_PeriphCLKConfig>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8002d5e:	f7ff fe03 	bl	8002968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8002d62:	4b53      	ldr	r3, [pc, #332]	; (8002eb0 <HAL_SD_MspInit+0x1a4>)
 8002d64:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002d68:	4a51      	ldr	r2, [pc, #324]	; (8002eb0 <HAL_SD_MspInit+0x1a4>)
 8002d6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d6e:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002d72:	4b4f      	ldr	r3, [pc, #316]	; (8002eb0 <HAL_SD_MspInit+0x1a4>)
 8002d74:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002d78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d80:	4b4b      	ldr	r3, [pc, #300]	; (8002eb0 <HAL_SD_MspInit+0x1a4>)
 8002d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d86:	4a4a      	ldr	r2, [pc, #296]	; (8002eb0 <HAL_SD_MspInit+0x1a4>)
 8002d88:	f043 0308 	orr.w	r3, r3, #8
 8002d8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d90:	4b47      	ldr	r3, [pc, #284]	; (8002eb0 <HAL_SD_MspInit+0x1a4>)
 8002d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d96:	f003 0308 	and.w	r3, r3, #8
 8002d9a:	613b      	str	r3, [r7, #16]
 8002d9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d9e:	4b44      	ldr	r3, [pc, #272]	; (8002eb0 <HAL_SD_MspInit+0x1a4>)
 8002da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002da4:	4a42      	ldr	r2, [pc, #264]	; (8002eb0 <HAL_SD_MspInit+0x1a4>)
 8002da6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002daa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dae:	4b40      	ldr	r3, [pc, #256]	; (8002eb0 <HAL_SD_MspInit+0x1a4>)
 8002db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002dbc:	2340      	movs	r3, #64	; 0x40
 8002dbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002dd4:	230b      	movs	r3, #11
 8002dd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dda:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002dde:	4619      	mov	r1, r3
 8002de0:	4834      	ldr	r0, [pc, #208]	; (8002eb4 <HAL_SD_MspInit+0x1a8>)
 8002de2:	f004 ff51 	bl	8007c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002de6:	2380      	movs	r3, #128	; 0x80
 8002de8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dec:	2302      	movs	r3, #2
 8002dee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002df2:	2301      	movs	r3, #1
 8002df4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002dfe:	230b      	movs	r3, #11
 8002e00:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e04:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e08:	4619      	mov	r1, r3
 8002e0a:	482a      	ldr	r0, [pc, #168]	; (8002eb4 <HAL_SD_MspInit+0x1a8>)
 8002e0c:	f004 ff3c 	bl	8007c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e18:	2302      	movs	r3, #2
 8002e1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e24:	2303      	movs	r3, #3
 8002e26:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002e2a:	230b      	movs	r3, #11
 8002e2c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e30:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e34:	4619      	mov	r1, r3
 8002e36:	4820      	ldr	r0, [pc, #128]	; (8002eb8 <HAL_SD_MspInit+0x1ac>)
 8002e38:	f004 ff26 	bl	8007c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e44:	2302      	movs	r3, #2
 8002e46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e50:	2303      	movs	r3, #3
 8002e52:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002e56:	230b      	movs	r3, #11
 8002e58:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e5c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e60:	4619      	mov	r1, r3
 8002e62:	4815      	ldr	r0, [pc, #84]	; (8002eb8 <HAL_SD_MspInit+0x1ac>)
 8002e64:	f004 ff10 	bl	8007c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002e68:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002e6c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e70:	2302      	movs	r3, #2
 8002e72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e76:	2300      	movs	r3, #0
 8002e78:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8002e82:	230a      	movs	r3, #10
 8002e84:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e88:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	480a      	ldr	r0, [pc, #40]	; (8002eb8 <HAL_SD_MspInit+0x1ac>)
 8002e90:	f004 fefa 	bl	8007c88 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8002e94:	2200      	movs	r2, #0
 8002e96:	2100      	movs	r1, #0
 8002e98:	207c      	movs	r0, #124	; 0x7c
 8002e9a:	f002 fa88 	bl	80053ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8002e9e:	207c      	movs	r0, #124	; 0x7c
 8002ea0:	f002 fa9f 	bl	80053e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8002ea4:	bf00      	nop
 8002ea6:	37e8      	adds	r7, #232	; 0xe8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	48022400 	.word	0x48022400
 8002eb0:	58024400 	.word	0x58024400
 8002eb4:	58020c00 	.word	0x58020c00
 8002eb8:	58021800 	.word	0x58021800

08002ebc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08e      	sub	sp, #56	; 0x38
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	605a      	str	r2, [r3, #4]
 8002ece:	609a      	str	r2, [r3, #8]
 8002ed0:	60da      	str	r2, [r3, #12]
 8002ed2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a4f      	ldr	r2, [pc, #316]	; (8003018 <HAL_SPI_MspInit+0x15c>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d12e      	bne.n	8002f3c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ede:	4b4f      	ldr	r3, [pc, #316]	; (800301c <HAL_SPI_MspInit+0x160>)
 8002ee0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ee4:	4a4d      	ldr	r2, [pc, #308]	; (800301c <HAL_SPI_MspInit+0x160>)
 8002ee6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002eea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002eee:	4b4b      	ldr	r3, [pc, #300]	; (800301c <HAL_SPI_MspInit+0x160>)
 8002ef0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ef4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ef8:	623b      	str	r3, [r7, #32]
 8002efa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002efc:	4b47      	ldr	r3, [pc, #284]	; (800301c <HAL_SPI_MspInit+0x160>)
 8002efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f02:	4a46      	ldr	r2, [pc, #280]	; (800301c <HAL_SPI_MspInit+0x160>)
 8002f04:	f043 0301 	orr.w	r3, r3, #1
 8002f08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f0c:	4b43      	ldr	r3, [pc, #268]	; (800301c <HAL_SPI_MspInit+0x160>)
 8002f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	61fb      	str	r3, [r7, #28]
 8002f18:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002f1a:	23e0      	movs	r3, #224	; 0xe0
 8002f1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1e:	2302      	movs	r3, #2
 8002f20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f22:	2300      	movs	r3, #0
 8002f24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f26:	2300      	movs	r3, #0
 8002f28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f2a:	2305      	movs	r3, #5
 8002f2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f32:	4619      	mov	r1, r3
 8002f34:	483a      	ldr	r0, [pc, #232]	; (8003020 <HAL_SPI_MspInit+0x164>)
 8002f36:	f004 fea7 	bl	8007c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002f3a:	e068      	b.n	800300e <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a38      	ldr	r2, [pc, #224]	; (8003024 <HAL_SPI_MspInit+0x168>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d12f      	bne.n	8002fa6 <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f46:	4b35      	ldr	r3, [pc, #212]	; (800301c <HAL_SPI_MspInit+0x160>)
 8002f48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f4c:	4a33      	ldr	r2, [pc, #204]	; (800301c <HAL_SPI_MspInit+0x160>)
 8002f4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f52:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f56:	4b31      	ldr	r3, [pc, #196]	; (800301c <HAL_SPI_MspInit+0x160>)
 8002f58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f60:	61bb      	str	r3, [r7, #24]
 8002f62:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f64:	4b2d      	ldr	r3, [pc, #180]	; (800301c <HAL_SPI_MspInit+0x160>)
 8002f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f6a:	4a2c      	ldr	r2, [pc, #176]	; (800301c <HAL_SPI_MspInit+0x160>)
 8002f6c:	f043 0302 	orr.w	r3, r3, #2
 8002f70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f74:	4b29      	ldr	r3, [pc, #164]	; (800301c <HAL_SPI_MspInit+0x160>)
 8002f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	617b      	str	r3, [r7, #20]
 8002f80:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002f82:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002f86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f88:	2302      	movs	r3, #2
 8002f8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f90:	2300      	movs	r3, #0
 8002f92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f94:	2305      	movs	r3, #5
 8002f96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4822      	ldr	r0, [pc, #136]	; (8003028 <HAL_SPI_MspInit+0x16c>)
 8002fa0:	f004 fe72 	bl	8007c88 <HAL_GPIO_Init>
}
 8002fa4:	e033      	b.n	800300e <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a20      	ldr	r2, [pc, #128]	; (800302c <HAL_SPI_MspInit+0x170>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d12e      	bne.n	800300e <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002fb0:	4b1a      	ldr	r3, [pc, #104]	; (800301c <HAL_SPI_MspInit+0x160>)
 8002fb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fb6:	4a19      	ldr	r2, [pc, #100]	; (800301c <HAL_SPI_MspInit+0x160>)
 8002fb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fbc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002fc0:	4b16      	ldr	r3, [pc, #88]	; (800301c <HAL_SPI_MspInit+0x160>)
 8002fc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fca:	613b      	str	r3, [r7, #16]
 8002fcc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fce:	4b13      	ldr	r3, [pc, #76]	; (800301c <HAL_SPI_MspInit+0x160>)
 8002fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fd4:	4a11      	ldr	r2, [pc, #68]	; (800301c <HAL_SPI_MspInit+0x160>)
 8002fd6:	f043 0304 	orr.w	r3, r3, #4
 8002fda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fde:	4b0f      	ldr	r3, [pc, #60]	; (800301c <HAL_SPI_MspInit+0x160>)
 8002fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002fec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002ff0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002ffe:	2306      	movs	r3, #6
 8003000:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003006:	4619      	mov	r1, r3
 8003008:	4809      	ldr	r0, [pc, #36]	; (8003030 <HAL_SPI_MspInit+0x174>)
 800300a:	f004 fe3d 	bl	8007c88 <HAL_GPIO_Init>
}
 800300e:	bf00      	nop
 8003010:	3738      	adds	r7, #56	; 0x38
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40013000 	.word	0x40013000
 800301c:	58024400 	.word	0x58024400
 8003020:	58020000 	.word	0x58020000
 8003024:	40003800 	.word	0x40003800
 8003028:	58020400 	.word	0x58020400
 800302c:	40003c00 	.word	0x40003c00
 8003030:	58020800 	.word	0x58020800

08003034 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b08c      	sub	sp, #48	; 0x30
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800303c:	f107 031c 	add.w	r3, r7, #28
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	605a      	str	r2, [r3, #4]
 8003046:	609a      	str	r2, [r3, #8]
 8003048:	60da      	str	r2, [r3, #12]
 800304a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003054:	d15d      	bne.n	8003112 <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003056:	4b8e      	ldr	r3, [pc, #568]	; (8003290 <HAL_TIM_PWM_MspInit+0x25c>)
 8003058:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800305c:	4a8c      	ldr	r2, [pc, #560]	; (8003290 <HAL_TIM_PWM_MspInit+0x25c>)
 800305e:	f043 0301 	orr.w	r3, r3, #1
 8003062:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003066:	4b8a      	ldr	r3, [pc, #552]	; (8003290 <HAL_TIM_PWM_MspInit+0x25c>)
 8003068:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	61bb      	str	r3, [r7, #24]
 8003072:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003074:	4b86      	ldr	r3, [pc, #536]	; (8003290 <HAL_TIM_PWM_MspInit+0x25c>)
 8003076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800307a:	4a85      	ldr	r2, [pc, #532]	; (8003290 <HAL_TIM_PWM_MspInit+0x25c>)
 800307c:	f043 0301 	orr.w	r3, r3, #1
 8003080:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003084:	4b82      	ldr	r3, [pc, #520]	; (8003290 <HAL_TIM_PWM_MspInit+0x25c>)
 8003086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	617b      	str	r3, [r7, #20]
 8003090:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003092:	2301      	movs	r3, #1
 8003094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003096:	2302      	movs	r3, #2
 8003098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309a:	2300      	movs	r3, #0
 800309c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309e:	2300      	movs	r3, #0
 80030a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80030a2:	2301      	movs	r3, #1
 80030a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030a6:	f107 031c 	add.w	r3, r7, #28
 80030aa:	4619      	mov	r1, r3
 80030ac:	4879      	ldr	r0, [pc, #484]	; (8003294 <HAL_TIM_PWM_MspInit+0x260>)
 80030ae:	f004 fdeb 	bl	8007c88 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 80030b2:	4b79      	ldr	r3, [pc, #484]	; (8003298 <HAL_TIM_PWM_MspInit+0x264>)
 80030b4:	4a79      	ldr	r2, [pc, #484]	; (800329c <HAL_TIM_PWM_MspInit+0x268>)
 80030b6:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 80030b8:	4b77      	ldr	r3, [pc, #476]	; (8003298 <HAL_TIM_PWM_MspInit+0x264>)
 80030ba:	2214      	movs	r2, #20
 80030bc:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030be:	4b76      	ldr	r3, [pc, #472]	; (8003298 <HAL_TIM_PWM_MspInit+0x264>)
 80030c0:	2240      	movs	r2, #64	; 0x40
 80030c2:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80030c4:	4b74      	ldr	r3, [pc, #464]	; (8003298 <HAL_TIM_PWM_MspInit+0x264>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80030ca:	4b73      	ldr	r3, [pc, #460]	; (8003298 <HAL_TIM_PWM_MspInit+0x264>)
 80030cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030d0:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80030d2:	4b71      	ldr	r3, [pc, #452]	; (8003298 <HAL_TIM_PWM_MspInit+0x264>)
 80030d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030d8:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80030da:	4b6f      	ldr	r3, [pc, #444]	; (8003298 <HAL_TIM_PWM_MspInit+0x264>)
 80030dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030e0:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 80030e2:	4b6d      	ldr	r3, [pc, #436]	; (8003298 <HAL_TIM_PWM_MspInit+0x264>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80030e8:	4b6b      	ldr	r3, [pc, #428]	; (8003298 <HAL_TIM_PWM_MspInit+0x264>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030ee:	4b6a      	ldr	r3, [pc, #424]	; (8003298 <HAL_TIM_PWM_MspInit+0x264>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 80030f4:	4868      	ldr	r0, [pc, #416]	; (8003298 <HAL_TIM_PWM_MspInit+0x264>)
 80030f6:	f002 f98f 	bl	8005418 <HAL_DMA_Init>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8003100:	f7ff fc32 	bl	8002968 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a64      	ldr	r2, [pc, #400]	; (8003298 <HAL_TIM_PWM_MspInit+0x264>)
 8003108:	62da      	str	r2, [r3, #44]	; 0x2c
 800310a:	4a63      	ldr	r2, [pc, #396]	; (8003298 <HAL_TIM_PWM_MspInit+0x264>)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003110:	e119      	b.n	8003346 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a62      	ldr	r2, [pc, #392]	; (80032a0 <HAL_TIM_PWM_MspInit+0x26c>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d16d      	bne.n	80031f8 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800311c:	4b5c      	ldr	r3, [pc, #368]	; (8003290 <HAL_TIM_PWM_MspInit+0x25c>)
 800311e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003122:	4a5b      	ldr	r2, [pc, #364]	; (8003290 <HAL_TIM_PWM_MspInit+0x25c>)
 8003124:	f043 0302 	orr.w	r3, r3, #2
 8003128:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800312c:	4b58      	ldr	r3, [pc, #352]	; (8003290 <HAL_TIM_PWM_MspInit+0x25c>)
 800312e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	613b      	str	r3, [r7, #16]
 8003138:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 800313a:	4b5a      	ldr	r3, [pc, #360]	; (80032a4 <HAL_TIM_PWM_MspInit+0x270>)
 800313c:	4a5a      	ldr	r2, [pc, #360]	; (80032a8 <HAL_TIM_PWM_MspInit+0x274>)
 800313e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8003140:	4b58      	ldr	r3, [pc, #352]	; (80032a4 <HAL_TIM_PWM_MspInit+0x270>)
 8003142:	2218      	movs	r2, #24
 8003144:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003146:	4b57      	ldr	r3, [pc, #348]	; (80032a4 <HAL_TIM_PWM_MspInit+0x270>)
 8003148:	2240      	movs	r2, #64	; 0x40
 800314a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800314c:	4b55      	ldr	r3, [pc, #340]	; (80032a4 <HAL_TIM_PWM_MspInit+0x270>)
 800314e:	2200      	movs	r2, #0
 8003150:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003152:	4b54      	ldr	r3, [pc, #336]	; (80032a4 <HAL_TIM_PWM_MspInit+0x270>)
 8003154:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003158:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800315a:	4b52      	ldr	r3, [pc, #328]	; (80032a4 <HAL_TIM_PWM_MspInit+0x270>)
 800315c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003160:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003162:	4b50      	ldr	r3, [pc, #320]	; (80032a4 <HAL_TIM_PWM_MspInit+0x270>)
 8003164:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003168:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 800316a:	4b4e      	ldr	r3, [pc, #312]	; (80032a4 <HAL_TIM_PWM_MspInit+0x270>)
 800316c:	2200      	movs	r2, #0
 800316e:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003170:	4b4c      	ldr	r3, [pc, #304]	; (80032a4 <HAL_TIM_PWM_MspInit+0x270>)
 8003172:	2200      	movs	r2, #0
 8003174:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003176:	4b4b      	ldr	r3, [pc, #300]	; (80032a4 <HAL_TIM_PWM_MspInit+0x270>)
 8003178:	2200      	movs	r2, #0
 800317a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 800317c:	4849      	ldr	r0, [pc, #292]	; (80032a4 <HAL_TIM_PWM_MspInit+0x270>)
 800317e:	f002 f94b 	bl	8005418 <HAL_DMA_Init>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 8003188:	f7ff fbee 	bl	8002968 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a45      	ldr	r2, [pc, #276]	; (80032a4 <HAL_TIM_PWM_MspInit+0x270>)
 8003190:	629a      	str	r2, [r3, #40]	; 0x28
 8003192:	4a44      	ldr	r2, [pc, #272]	; (80032a4 <HAL_TIM_PWM_MspInit+0x270>)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 8003198:	4b44      	ldr	r3, [pc, #272]	; (80032ac <HAL_TIM_PWM_MspInit+0x278>)
 800319a:	4a45      	ldr	r2, [pc, #276]	; (80032b0 <HAL_TIM_PWM_MspInit+0x27c>)
 800319c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 800319e:	4b43      	ldr	r3, [pc, #268]	; (80032ac <HAL_TIM_PWM_MspInit+0x278>)
 80031a0:	2217      	movs	r2, #23
 80031a2:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031a4:	4b41      	ldr	r3, [pc, #260]	; (80032ac <HAL_TIM_PWM_MspInit+0x278>)
 80031a6:	2240      	movs	r2, #64	; 0x40
 80031a8:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80031aa:	4b40      	ldr	r3, [pc, #256]	; (80032ac <HAL_TIM_PWM_MspInit+0x278>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80031b0:	4b3e      	ldr	r3, [pc, #248]	; (80032ac <HAL_TIM_PWM_MspInit+0x278>)
 80031b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031b6:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80031b8:	4b3c      	ldr	r3, [pc, #240]	; (80032ac <HAL_TIM_PWM_MspInit+0x278>)
 80031ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031be:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80031c0:	4b3a      	ldr	r3, [pc, #232]	; (80032ac <HAL_TIM_PWM_MspInit+0x278>)
 80031c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031c6:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 80031c8:	4b38      	ldr	r3, [pc, #224]	; (80032ac <HAL_TIM_PWM_MspInit+0x278>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80031ce:	4b37      	ldr	r3, [pc, #220]	; (80032ac <HAL_TIM_PWM_MspInit+0x278>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031d4:	4b35      	ldr	r3, [pc, #212]	; (80032ac <HAL_TIM_PWM_MspInit+0x278>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 80031da:	4834      	ldr	r0, [pc, #208]	; (80032ac <HAL_TIM_PWM_MspInit+0x278>)
 80031dc:	f002 f91c 	bl	8005418 <HAL_DMA_Init>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 80031e6:	f7ff fbbf 	bl	8002968 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a2f      	ldr	r2, [pc, #188]	; (80032ac <HAL_TIM_PWM_MspInit+0x278>)
 80031ee:	625a      	str	r2, [r3, #36]	; 0x24
 80031f0:	4a2e      	ldr	r2, [pc, #184]	; (80032ac <HAL_TIM_PWM_MspInit+0x278>)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80031f6:	e0a6      	b.n	8003346 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a2d      	ldr	r2, [pc, #180]	; (80032b4 <HAL_TIM_PWM_MspInit+0x280>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d15e      	bne.n	80032c0 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003202:	4b23      	ldr	r3, [pc, #140]	; (8003290 <HAL_TIM_PWM_MspInit+0x25c>)
 8003204:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003208:	4a21      	ldr	r2, [pc, #132]	; (8003290 <HAL_TIM_PWM_MspInit+0x25c>)
 800320a:	f043 0304 	orr.w	r3, r3, #4
 800320e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003212:	4b1f      	ldr	r3, [pc, #124]	; (8003290 <HAL_TIM_PWM_MspInit+0x25c>)
 8003214:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8003220:	4b25      	ldr	r3, [pc, #148]	; (80032b8 <HAL_TIM_PWM_MspInit+0x284>)
 8003222:	4a26      	ldr	r2, [pc, #152]	; (80032bc <HAL_TIM_PWM_MspInit+0x288>)
 8003224:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 8003226:	4b24      	ldr	r3, [pc, #144]	; (80032b8 <HAL_TIM_PWM_MspInit+0x284>)
 8003228:	221f      	movs	r2, #31
 800322a:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800322c:	4b22      	ldr	r3, [pc, #136]	; (80032b8 <HAL_TIM_PWM_MspInit+0x284>)
 800322e:	2240      	movs	r2, #64	; 0x40
 8003230:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003232:	4b21      	ldr	r3, [pc, #132]	; (80032b8 <HAL_TIM_PWM_MspInit+0x284>)
 8003234:	2200      	movs	r2, #0
 8003236:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003238:	4b1f      	ldr	r3, [pc, #124]	; (80032b8 <HAL_TIM_PWM_MspInit+0x284>)
 800323a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800323e:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003240:	4b1d      	ldr	r3, [pc, #116]	; (80032b8 <HAL_TIM_PWM_MspInit+0x284>)
 8003242:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003246:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003248:	4b1b      	ldr	r3, [pc, #108]	; (80032b8 <HAL_TIM_PWM_MspInit+0x284>)
 800324a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800324e:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8003250:	4b19      	ldr	r3, [pc, #100]	; (80032b8 <HAL_TIM_PWM_MspInit+0x284>)
 8003252:	2200      	movs	r2, #0
 8003254:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003256:	4b18      	ldr	r3, [pc, #96]	; (80032b8 <HAL_TIM_PWM_MspInit+0x284>)
 8003258:	2200      	movs	r2, #0
 800325a:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800325c:	4b16      	ldr	r3, [pc, #88]	; (80032b8 <HAL_TIM_PWM_MspInit+0x284>)
 800325e:	2200      	movs	r2, #0
 8003260:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8003262:	4815      	ldr	r0, [pc, #84]	; (80032b8 <HAL_TIM_PWM_MspInit+0x284>)
 8003264:	f002 f8d8 	bl	8005418 <HAL_DMA_Init>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 800326e:	f7ff fb7b 	bl	8002968 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a10      	ldr	r2, [pc, #64]	; (80032b8 <HAL_TIM_PWM_MspInit+0x284>)
 8003276:	62da      	str	r2, [r3, #44]	; 0x2c
 8003278:	4a0f      	ldr	r2, [pc, #60]	; (80032b8 <HAL_TIM_PWM_MspInit+0x284>)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800327e:	2200      	movs	r2, #0
 8003280:	2100      	movs	r1, #0
 8003282:	201e      	movs	r0, #30
 8003284:	f002 f893 	bl	80053ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003288:	201e      	movs	r0, #30
 800328a:	f002 f8aa 	bl	80053e2 <HAL_NVIC_EnableIRQ>
}
 800328e:	e05a      	b.n	8003346 <HAL_TIM_PWM_MspInit+0x312>
 8003290:	58024400 	.word	0x58024400
 8003294:	58020000 	.word	0x58020000
 8003298:	2400124c 	.word	0x2400124c
 800329c:	40020028 	.word	0x40020028
 80032a0:	40000400 	.word	0x40000400
 80032a4:	240012c4 	.word	0x240012c4
 80032a8:	40020058 	.word	0x40020058
 80032ac:	2400133c 	.word	0x2400133c
 80032b0:	40020070 	.word	0x40020070
 80032b4:	40000800 	.word	0x40000800
 80032b8:	240013b4 	.word	0x240013b4
 80032bc:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a22      	ldr	r2, [pc, #136]	; (8003350 <HAL_TIM_PWM_MspInit+0x31c>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d13d      	bne.n	8003346 <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80032ca:	4b22      	ldr	r3, [pc, #136]	; (8003354 <HAL_TIM_PWM_MspInit+0x320>)
 80032cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032d0:	4a20      	ldr	r2, [pc, #128]	; (8003354 <HAL_TIM_PWM_MspInit+0x320>)
 80032d2:	f043 0308 	orr.w	r3, r3, #8
 80032d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80032da:	4b1e      	ldr	r3, [pc, #120]	; (8003354 <HAL_TIM_PWM_MspInit+0x320>)
 80032dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032e0:	f003 0308 	and.w	r3, r3, #8
 80032e4:	60bb      	str	r3, [r7, #8]
 80032e6:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 80032e8:	4b1b      	ldr	r3, [pc, #108]	; (8003358 <HAL_TIM_PWM_MspInit+0x324>)
 80032ea:	4a1c      	ldr	r2, [pc, #112]	; (800335c <HAL_TIM_PWM_MspInit+0x328>)
 80032ec:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 80032ee:	4b1a      	ldr	r3, [pc, #104]	; (8003358 <HAL_TIM_PWM_MspInit+0x324>)
 80032f0:	223a      	movs	r2, #58	; 0x3a
 80032f2:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032f4:	4b18      	ldr	r3, [pc, #96]	; (8003358 <HAL_TIM_PWM_MspInit+0x324>)
 80032f6:	2240      	movs	r2, #64	; 0x40
 80032f8:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80032fa:	4b17      	ldr	r3, [pc, #92]	; (8003358 <HAL_TIM_PWM_MspInit+0x324>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8003300:	4b15      	ldr	r3, [pc, #84]	; (8003358 <HAL_TIM_PWM_MspInit+0x324>)
 8003302:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003306:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003308:	4b13      	ldr	r3, [pc, #76]	; (8003358 <HAL_TIM_PWM_MspInit+0x324>)
 800330a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800330e:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003310:	4b11      	ldr	r3, [pc, #68]	; (8003358 <HAL_TIM_PWM_MspInit+0x324>)
 8003312:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003316:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8003318:	4b0f      	ldr	r3, [pc, #60]	; (8003358 <HAL_TIM_PWM_MspInit+0x324>)
 800331a:	2200      	movs	r2, #0
 800331c:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 800331e:	4b0e      	ldr	r3, [pc, #56]	; (8003358 <HAL_TIM_PWM_MspInit+0x324>)
 8003320:	2200      	movs	r2, #0
 8003322:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003324:	4b0c      	ldr	r3, [pc, #48]	; (8003358 <HAL_TIM_PWM_MspInit+0x324>)
 8003326:	2200      	movs	r2, #0
 8003328:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 800332a:	480b      	ldr	r0, [pc, #44]	; (8003358 <HAL_TIM_PWM_MspInit+0x324>)
 800332c:	f002 f874 	bl	8005418 <HAL_DMA_Init>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 8003336:	f7ff fb17 	bl	8002968 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a06      	ldr	r2, [pc, #24]	; (8003358 <HAL_TIM_PWM_MspInit+0x324>)
 800333e:	631a      	str	r2, [r3, #48]	; 0x30
 8003340:	4a05      	ldr	r2, [pc, #20]	; (8003358 <HAL_TIM_PWM_MspInit+0x324>)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003346:	bf00      	nop
 8003348:	3730      	adds	r7, #48	; 0x30
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40000c00 	.word	0x40000c00
 8003354:	58024400 	.word	0x58024400
 8003358:	2400142c 	.word	0x2400142c
 800335c:	40020040 	.word	0x40020040

08003360 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a0b      	ldr	r2, [pc, #44]	; (800339c <HAL_TIM_Base_MspInit+0x3c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d10e      	bne.n	8003390 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003372:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <HAL_TIM_Base_MspInit+0x40>)
 8003374:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003378:	4a09      	ldr	r2, [pc, #36]	; (80033a0 <HAL_TIM_Base_MspInit+0x40>)
 800337a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800337e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003382:	4b07      	ldr	r3, [pc, #28]	; (80033a0 <HAL_TIM_Base_MspInit+0x40>)
 8003384:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8003390:	bf00      	nop
 8003392:	3714      	adds	r7, #20
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	40001c00 	.word	0x40001c00
 80033a0:	58024400 	.word	0x58024400

080033a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08c      	sub	sp, #48	; 0x30
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ac:	f107 031c 	add.w	r3, r7, #28
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	605a      	str	r2, [r3, #4]
 80033b6:	609a      	str	r2, [r3, #8]
 80033b8:	60da      	str	r2, [r3, #12]
 80033ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c4:	d120      	bne.n	8003408 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033c6:	4b52      	ldr	r3, [pc, #328]	; (8003510 <HAL_TIM_MspPostInit+0x16c>)
 80033c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033cc:	4a50      	ldr	r2, [pc, #320]	; (8003510 <HAL_TIM_MspPostInit+0x16c>)
 80033ce:	f043 0302 	orr.w	r3, r3, #2
 80033d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033d6:	4b4e      	ldr	r3, [pc, #312]	; (8003510 <HAL_TIM_MspPostInit+0x16c>)
 80033d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	61bb      	str	r3, [r7, #24]
 80033e2:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80033e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ea:	2302      	movs	r3, #2
 80033ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80033ee:	2302      	movs	r3, #2
 80033f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f2:	2300      	movs	r3, #0
 80033f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80033f6:	2301      	movs	r3, #1
 80033f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033fa:	f107 031c 	add.w	r3, r7, #28
 80033fe:	4619      	mov	r1, r3
 8003400:	4844      	ldr	r0, [pc, #272]	; (8003514 <HAL_TIM_MspPostInit+0x170>)
 8003402:	f004 fc41 	bl	8007c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003406:	e07f      	b.n	8003508 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a42      	ldr	r2, [pc, #264]	; (8003518 <HAL_TIM_MspPostInit+0x174>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d11f      	bne.n	8003452 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003412:	4b3f      	ldr	r3, [pc, #252]	; (8003510 <HAL_TIM_MspPostInit+0x16c>)
 8003414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003418:	4a3d      	ldr	r2, [pc, #244]	; (8003510 <HAL_TIM_MspPostInit+0x16c>)
 800341a:	f043 0302 	orr.w	r3, r3, #2
 800341e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003422:	4b3b      	ldr	r3, [pc, #236]	; (8003510 <HAL_TIM_MspPostInit+0x16c>)
 8003424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	617b      	str	r3, [r7, #20]
 800342e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003430:	2330      	movs	r3, #48	; 0x30
 8003432:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003434:	2302      	movs	r3, #2
 8003436:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003438:	2302      	movs	r3, #2
 800343a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800343c:	2300      	movs	r3, #0
 800343e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003440:	2302      	movs	r3, #2
 8003442:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003444:	f107 031c 	add.w	r3, r7, #28
 8003448:	4619      	mov	r1, r3
 800344a:	4832      	ldr	r0, [pc, #200]	; (8003514 <HAL_TIM_MspPostInit+0x170>)
 800344c:	f004 fc1c 	bl	8007c88 <HAL_GPIO_Init>
}
 8003450:	e05a      	b.n	8003508 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a31      	ldr	r2, [pc, #196]	; (800351c <HAL_TIM_MspPostInit+0x178>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d131      	bne.n	80034c0 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800345c:	4b2c      	ldr	r3, [pc, #176]	; (8003510 <HAL_TIM_MspPostInit+0x16c>)
 800345e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003462:	4a2b      	ldr	r2, [pc, #172]	; (8003510 <HAL_TIM_MspPostInit+0x16c>)
 8003464:	f043 0308 	orr.w	r3, r3, #8
 8003468:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800346c:	4b28      	ldr	r3, [pc, #160]	; (8003510 <HAL_TIM_MspPostInit+0x16c>)
 800346e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	613b      	str	r3, [r7, #16]
 8003478:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800347a:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800347e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003480:	2302      	movs	r3, #2
 8003482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003484:	2300      	movs	r3, #0
 8003486:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003488:	2300      	movs	r3, #0
 800348a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800348c:	2302      	movs	r3, #2
 800348e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003490:	f107 031c 	add.w	r3, r7, #28
 8003494:	4619      	mov	r1, r3
 8003496:	4822      	ldr	r0, [pc, #136]	; (8003520 <HAL_TIM_MspPostInit+0x17c>)
 8003498:	f004 fbf6 	bl	8007c88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800349c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a2:	2302      	movs	r3, #2
 80034a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80034a6:	2302      	movs	r3, #2
 80034a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034aa:	2300      	movs	r3, #0
 80034ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80034ae:	2302      	movs	r3, #2
 80034b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034b2:	f107 031c 	add.w	r3, r7, #28
 80034b6:	4619      	mov	r1, r3
 80034b8:	4819      	ldr	r0, [pc, #100]	; (8003520 <HAL_TIM_MspPostInit+0x17c>)
 80034ba:	f004 fbe5 	bl	8007c88 <HAL_GPIO_Init>
}
 80034be:	e023      	b.n	8003508 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a17      	ldr	r2, [pc, #92]	; (8003524 <HAL_TIM_MspPostInit+0x180>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d11e      	bne.n	8003508 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ca:	4b11      	ldr	r3, [pc, #68]	; (8003510 <HAL_TIM_MspPostInit+0x16c>)
 80034cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034d0:	4a0f      	ldr	r2, [pc, #60]	; (8003510 <HAL_TIM_MspPostInit+0x16c>)
 80034d2:	f043 0301 	orr.w	r3, r3, #1
 80034d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034da:	4b0d      	ldr	r3, [pc, #52]	; (8003510 <HAL_TIM_MspPostInit+0x16c>)
 80034dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80034e8:	2308      	movs	r3, #8
 80034ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ec:	2302      	movs	r3, #2
 80034ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80034f0:	2302      	movs	r3, #2
 80034f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f4:	2300      	movs	r3, #0
 80034f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80034f8:	2302      	movs	r3, #2
 80034fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034fc:	f107 031c 	add.w	r3, r7, #28
 8003500:	4619      	mov	r1, r3
 8003502:	4809      	ldr	r0, [pc, #36]	; (8003528 <HAL_TIM_MspPostInit+0x184>)
 8003504:	f004 fbc0 	bl	8007c88 <HAL_GPIO_Init>
}
 8003508:	bf00      	nop
 800350a:	3730      	adds	r7, #48	; 0x30
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	58024400 	.word	0x58024400
 8003514:	58020400 	.word	0x58020400
 8003518:	40000400 	.word	0x40000400
 800351c:	40000800 	.word	0x40000800
 8003520:	58020c00 	.word	0x58020c00
 8003524:	40000c00 	.word	0x40000c00
 8003528:	58020000 	.word	0x58020000

0800352c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b0ba      	sub	sp, #232	; 0xe8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003534:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	605a      	str	r2, [r3, #4]
 800353e:	609a      	str	r2, [r3, #8]
 8003540:	60da      	str	r2, [r3, #12]
 8003542:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003544:	f107 0318 	add.w	r3, r7, #24
 8003548:	22b8      	movs	r2, #184	; 0xb8
 800354a:	2100      	movs	r1, #0
 800354c:	4618      	mov	r0, r3
 800354e:	f013 fdf1 	bl	8017134 <memset>
  if(huart->Instance==UART4)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a4d      	ldr	r2, [pc, #308]	; (800368c <HAL_UART_MspInit+0x160>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d147      	bne.n	80035ec <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800355c:	f04f 0202 	mov.w	r2, #2
 8003560:	f04f 0300 	mov.w	r3, #0
 8003564:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003568:	2300      	movs	r3, #0
 800356a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800356e:	f107 0318 	add.w	r3, r7, #24
 8003572:	4618      	mov	r0, r3
 8003574:	f007 f976 	bl	800a864 <HAL_RCCEx_PeriphCLKConfig>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800357e:	f7ff f9f3 	bl	8002968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003582:	4b43      	ldr	r3, [pc, #268]	; (8003690 <HAL_UART_MspInit+0x164>)
 8003584:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003588:	4a41      	ldr	r2, [pc, #260]	; (8003690 <HAL_UART_MspInit+0x164>)
 800358a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800358e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003592:	4b3f      	ldr	r3, [pc, #252]	; (8003690 <HAL_UART_MspInit+0x164>)
 8003594:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003598:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800359c:	617b      	str	r3, [r7, #20]
 800359e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035a0:	4b3b      	ldr	r3, [pc, #236]	; (8003690 <HAL_UART_MspInit+0x164>)
 80035a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035a6:	4a3a      	ldr	r2, [pc, #232]	; (8003690 <HAL_UART_MspInit+0x164>)
 80035a8:	f043 0302 	orr.w	r3, r3, #2
 80035ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035b0:	4b37      	ldr	r3, [pc, #220]	; (8003690 <HAL_UART_MspInit+0x164>)
 80035b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	613b      	str	r3, [r7, #16]
 80035bc:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80035be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80035c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c6:	2302      	movs	r3, #2
 80035c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035cc:	2300      	movs	r3, #0
 80035ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d2:	2300      	movs	r3, #0
 80035d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80035d8:	2308      	movs	r3, #8
 80035da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035de:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80035e2:	4619      	mov	r1, r3
 80035e4:	482b      	ldr	r0, [pc, #172]	; (8003694 <HAL_UART_MspInit+0x168>)
 80035e6:	f004 fb4f 	bl	8007c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80035ea:	e04a      	b.n	8003682 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a29      	ldr	r2, [pc, #164]	; (8003698 <HAL_UART_MspInit+0x16c>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d145      	bne.n	8003682 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80035f6:	f04f 0201 	mov.w	r2, #1
 80035fa:	f04f 0300 	mov.w	r3, #0
 80035fe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003602:	2300      	movs	r3, #0
 8003604:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003608:	f107 0318 	add.w	r3, r7, #24
 800360c:	4618      	mov	r0, r3
 800360e:	f007 f929 	bl	800a864 <HAL_RCCEx_PeriphCLKConfig>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8003618:	f7ff f9a6 	bl	8002968 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800361c:	4b1c      	ldr	r3, [pc, #112]	; (8003690 <HAL_UART_MspInit+0x164>)
 800361e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003622:	4a1b      	ldr	r2, [pc, #108]	; (8003690 <HAL_UART_MspInit+0x164>)
 8003624:	f043 0320 	orr.w	r3, r3, #32
 8003628:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800362c:	4b18      	ldr	r3, [pc, #96]	; (8003690 <HAL_UART_MspInit+0x164>)
 800362e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003632:	f003 0320 	and.w	r3, r3, #32
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800363a:	4b15      	ldr	r3, [pc, #84]	; (8003690 <HAL_UART_MspInit+0x164>)
 800363c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003640:	4a13      	ldr	r2, [pc, #76]	; (8003690 <HAL_UART_MspInit+0x164>)
 8003642:	f043 0304 	orr.w	r3, r3, #4
 8003646:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800364a:	4b11      	ldr	r3, [pc, #68]	; (8003690 <HAL_UART_MspInit+0x164>)
 800364c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	60bb      	str	r3, [r7, #8]
 8003656:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003658:	23c0      	movs	r3, #192	; 0xc0
 800365a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365e:	2302      	movs	r3, #2
 8003660:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003664:	2300      	movs	r3, #0
 8003666:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800366a:	2300      	movs	r3, #0
 800366c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8003670:	2307      	movs	r3, #7
 8003672:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003676:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800367a:	4619      	mov	r1, r3
 800367c:	4807      	ldr	r0, [pc, #28]	; (800369c <HAL_UART_MspInit+0x170>)
 800367e:	f004 fb03 	bl	8007c88 <HAL_GPIO_Init>
}
 8003682:	bf00      	nop
 8003684:	37e8      	adds	r7, #232	; 0xe8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	40004c00 	.word	0x40004c00
 8003690:	58024400 	.word	0x58024400
 8003694:	58020400 	.word	0x58020400
 8003698:	40011400 	.word	0x40011400
 800369c:	58020800 	.word	0x58020800

080036a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036a4:	e7fe      	b.n	80036a4 <NMI_Handler+0x4>

080036a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036a6:	b480      	push	{r7}
 80036a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036aa:	e7fe      	b.n	80036aa <HardFault_Handler+0x4>

080036ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036b0:	e7fe      	b.n	80036b0 <MemManage_Handler+0x4>

080036b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036b2:	b480      	push	{r7}
 80036b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036b6:	e7fe      	b.n	80036b6 <BusFault_Handler+0x4>

080036b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036bc:	e7fe      	b.n	80036bc <UsageFault_Handler+0x4>

080036be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036be:	b480      	push	{r7}
 80036c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036c2:	bf00      	nop
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036d0:	bf00      	nop
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036da:	b480      	push	{r7}
 80036dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036de:	bf00      	nop
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036ec:	f000 f9ba 	bl	8003a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036f0:	bf00      	nop
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 80036f8:	4802      	ldr	r0, [pc, #8]	; (8003704 <DMA1_Stream0_IRQHandler+0x10>)
 80036fa:	f002 fc4f 	bl	8005f9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80036fe:	bf00      	nop
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	240013b4 	.word	0x240013b4

08003708 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 800370c:	4802      	ldr	r0, [pc, #8]	; (8003718 <DMA1_Stream1_IRQHandler+0x10>)
 800370e:	f002 fc45 	bl	8005f9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003712:	bf00      	nop
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	2400124c 	.word	0x2400124c

0800371c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8003720:	4802      	ldr	r0, [pc, #8]	; (800372c <DMA1_Stream2_IRQHandler+0x10>)
 8003722:	f002 fc3b 	bl	8005f9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003726:	bf00      	nop
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	2400142c 	.word	0x2400142c

08003730 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003734:	4802      	ldr	r0, [pc, #8]	; (8003740 <DMA1_Stream3_IRQHandler+0x10>)
 8003736:	f002 fc31 	bl	8005f9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800373a:	bf00      	nop
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	240012c4 	.word	0x240012c4

08003744 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8003748:	4802      	ldr	r0, [pc, #8]	; (8003754 <DMA1_Stream4_IRQHandler+0x10>)
 800374a:	f002 fc27 	bl	8005f9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800374e:	bf00      	nop
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	2400133c 	.word	0x2400133c

08003758 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800375c:	4802      	ldr	r0, [pc, #8]	; (8003768 <DMA1_Stream5_IRQHandler+0x10>)
 800375e:	f002 fc1d 	bl	8005f9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003762:	bf00      	nop
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	24000cd8 	.word	0x24000cd8

0800376c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003770:	4802      	ldr	r0, [pc, #8]	; (800377c <TIM4_IRQHandler+0x10>)
 8003772:	f00c fa59 	bl	800fc28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003776:	bf00      	nop
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	24001168 	.word	0x24001168

08003780 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003784:	4802      	ldr	r0, [pc, #8]	; (8003790 <I2C2_EV_IRQHandler+0x10>)
 8003786:	f004 fce9 	bl	800815c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800378a:	bf00      	nop
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	24000e68 	.word	0x24000e68

08003794 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003798:	4802      	ldr	r0, [pc, #8]	; (80037a4 <DMA2_Stream7_IRQHandler+0x10>)
 800379a:	f002 fbff 	bl	8005f9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800379e:	bf00      	nop
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	24000d50 	.word	0x24000d50

080037a8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80037ac:	4802      	ldr	r0, [pc, #8]	; (80037b8 <OTG_HS_IRQHandler+0x10>)
 80037ae:	f004 fedf 	bl	8008570 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80037b2:	bf00      	nop
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	24002ad0 	.word	0x24002ad0

080037bc <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 80037c0:	4802      	ldr	r0, [pc, #8]	; (80037cc <SDMMC2_IRQHandler+0x10>)
 80037c2:	f009 fea5 	bl	800d510 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 80037c6:	bf00      	nop
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	24000ebc 	.word	0x24000ebc

080037d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037d8:	4a14      	ldr	r2, [pc, #80]	; (800382c <_sbrk+0x5c>)
 80037da:	4b15      	ldr	r3, [pc, #84]	; (8003830 <_sbrk+0x60>)
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037e4:	4b13      	ldr	r3, [pc, #76]	; (8003834 <_sbrk+0x64>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d102      	bne.n	80037f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037ec:	4b11      	ldr	r3, [pc, #68]	; (8003834 <_sbrk+0x64>)
 80037ee:	4a12      	ldr	r2, [pc, #72]	; (8003838 <_sbrk+0x68>)
 80037f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037f2:	4b10      	ldr	r3, [pc, #64]	; (8003834 <_sbrk+0x64>)
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4413      	add	r3, r2
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d207      	bcs.n	8003810 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003800:	f013 fca0 	bl	8017144 <__errno>
 8003804:	4603      	mov	r3, r0
 8003806:	220c      	movs	r2, #12
 8003808:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800380a:	f04f 33ff 	mov.w	r3, #4294967295
 800380e:	e009      	b.n	8003824 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003810:	4b08      	ldr	r3, [pc, #32]	; (8003834 <_sbrk+0x64>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003816:	4b07      	ldr	r3, [pc, #28]	; (8003834 <_sbrk+0x64>)
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4413      	add	r3, r2
 800381e:	4a05      	ldr	r2, [pc, #20]	; (8003834 <_sbrk+0x64>)
 8003820:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003822:	68fb      	ldr	r3, [r7, #12]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3718      	adds	r7, #24
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	24050000 	.word	0x24050000
 8003830:	00000800 	.word	0x00000800
 8003834:	240015cc 	.word	0x240015cc
 8003838:	24003348 	.word	0x24003348

0800383c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003840:	4b32      	ldr	r3, [pc, #200]	; (800390c <SystemInit+0xd0>)
 8003842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003846:	4a31      	ldr	r2, [pc, #196]	; (800390c <SystemInit+0xd0>)
 8003848:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800384c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003850:	4b2f      	ldr	r3, [pc, #188]	; (8003910 <SystemInit+0xd4>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 030f 	and.w	r3, r3, #15
 8003858:	2b06      	cmp	r3, #6
 800385a:	d807      	bhi.n	800386c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800385c:	4b2c      	ldr	r3, [pc, #176]	; (8003910 <SystemInit+0xd4>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f023 030f 	bic.w	r3, r3, #15
 8003864:	4a2a      	ldr	r2, [pc, #168]	; (8003910 <SystemInit+0xd4>)
 8003866:	f043 0307 	orr.w	r3, r3, #7
 800386a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800386c:	4b29      	ldr	r3, [pc, #164]	; (8003914 <SystemInit+0xd8>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a28      	ldr	r2, [pc, #160]	; (8003914 <SystemInit+0xd8>)
 8003872:	f043 0301 	orr.w	r3, r3, #1
 8003876:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003878:	4b26      	ldr	r3, [pc, #152]	; (8003914 <SystemInit+0xd8>)
 800387a:	2200      	movs	r2, #0
 800387c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800387e:	4b25      	ldr	r3, [pc, #148]	; (8003914 <SystemInit+0xd8>)
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	4924      	ldr	r1, [pc, #144]	; (8003914 <SystemInit+0xd8>)
 8003884:	4b24      	ldr	r3, [pc, #144]	; (8003918 <SystemInit+0xdc>)
 8003886:	4013      	ands	r3, r2
 8003888:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800388a:	4b21      	ldr	r3, [pc, #132]	; (8003910 <SystemInit+0xd4>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b00      	cmp	r3, #0
 8003894:	d007      	beq.n	80038a6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003896:	4b1e      	ldr	r3, [pc, #120]	; (8003910 <SystemInit+0xd4>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f023 030f 	bic.w	r3, r3, #15
 800389e:	4a1c      	ldr	r2, [pc, #112]	; (8003910 <SystemInit+0xd4>)
 80038a0:	f043 0307 	orr.w	r3, r3, #7
 80038a4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80038a6:	4b1b      	ldr	r3, [pc, #108]	; (8003914 <SystemInit+0xd8>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80038ac:	4b19      	ldr	r3, [pc, #100]	; (8003914 <SystemInit+0xd8>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80038b2:	4b18      	ldr	r3, [pc, #96]	; (8003914 <SystemInit+0xd8>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80038b8:	4b16      	ldr	r3, [pc, #88]	; (8003914 <SystemInit+0xd8>)
 80038ba:	4a18      	ldr	r2, [pc, #96]	; (800391c <SystemInit+0xe0>)
 80038bc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80038be:	4b15      	ldr	r3, [pc, #84]	; (8003914 <SystemInit+0xd8>)
 80038c0:	4a17      	ldr	r2, [pc, #92]	; (8003920 <SystemInit+0xe4>)
 80038c2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80038c4:	4b13      	ldr	r3, [pc, #76]	; (8003914 <SystemInit+0xd8>)
 80038c6:	4a17      	ldr	r2, [pc, #92]	; (8003924 <SystemInit+0xe8>)
 80038c8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80038ca:	4b12      	ldr	r3, [pc, #72]	; (8003914 <SystemInit+0xd8>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80038d0:	4b10      	ldr	r3, [pc, #64]	; (8003914 <SystemInit+0xd8>)
 80038d2:	4a14      	ldr	r2, [pc, #80]	; (8003924 <SystemInit+0xe8>)
 80038d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80038d6:	4b0f      	ldr	r3, [pc, #60]	; (8003914 <SystemInit+0xd8>)
 80038d8:	2200      	movs	r2, #0
 80038da:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80038dc:	4b0d      	ldr	r3, [pc, #52]	; (8003914 <SystemInit+0xd8>)
 80038de:	4a11      	ldr	r2, [pc, #68]	; (8003924 <SystemInit+0xe8>)
 80038e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80038e2:	4b0c      	ldr	r3, [pc, #48]	; (8003914 <SystemInit+0xd8>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80038e8:	4b0a      	ldr	r3, [pc, #40]	; (8003914 <SystemInit+0xd8>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a09      	ldr	r2, [pc, #36]	; (8003914 <SystemInit+0xd8>)
 80038ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80038f4:	4b07      	ldr	r3, [pc, #28]	; (8003914 <SystemInit+0xd8>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80038fa:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <SystemInit+0xec>)
 80038fc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003900:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003902:	bf00      	nop
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	e000ed00 	.word	0xe000ed00
 8003910:	52002000 	.word	0x52002000
 8003914:	58024400 	.word	0x58024400
 8003918:	eaf6ed7f 	.word	0xeaf6ed7f
 800391c:	02020200 	.word	0x02020200
 8003920:	01ff0000 	.word	0x01ff0000
 8003924:	01010280 	.word	0x01010280
 8003928:	52004000 	.word	0x52004000

0800392c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800392c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003964 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003930:	f7ff ff84 	bl	800383c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003934:	480c      	ldr	r0, [pc, #48]	; (8003968 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003936:	490d      	ldr	r1, [pc, #52]	; (800396c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003938:	4a0d      	ldr	r2, [pc, #52]	; (8003970 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800393a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800393c:	e002      	b.n	8003944 <LoopCopyDataInit>

0800393e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800393e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003942:	3304      	adds	r3, #4

08003944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003948:	d3f9      	bcc.n	800393e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800394a:	4a0a      	ldr	r2, [pc, #40]	; (8003974 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800394c:	4c0a      	ldr	r4, [pc, #40]	; (8003978 <LoopFillZerobss+0x22>)
  movs r3, #0
 800394e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003950:	e001      	b.n	8003956 <LoopFillZerobss>

08003952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003954:	3204      	adds	r2, #4

08003956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003958:	d3fb      	bcc.n	8003952 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800395a:	f013 fbf9 	bl	8017150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800395e:	f7fd fd03 	bl	8001368 <main>
  bx  lr
 8003962:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003964:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003968:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800396c:	24000150 	.word	0x24000150
  ldr r2, =_sidata
 8003970:	08018754 	.word	0x08018754
  ldr r2, =_sbss
 8003974:	24000150 	.word	0x24000150
  ldr r4, =_ebss
 8003978:	24003344 	.word	0x24003344

0800397c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800397c:	e7fe      	b.n	800397c <ADC3_IRQHandler>
	...

08003980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003986:	2003      	movs	r0, #3
 8003988:	f001 fd06 	bl	8005398 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800398c:	f006 fd94 	bl	800a4b8 <HAL_RCC_GetSysClockFreq>
 8003990:	4602      	mov	r2, r0
 8003992:	4b15      	ldr	r3, [pc, #84]	; (80039e8 <HAL_Init+0x68>)
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	0a1b      	lsrs	r3, r3, #8
 8003998:	f003 030f 	and.w	r3, r3, #15
 800399c:	4913      	ldr	r1, [pc, #76]	; (80039ec <HAL_Init+0x6c>)
 800399e:	5ccb      	ldrb	r3, [r1, r3]
 80039a0:	f003 031f 	and.w	r3, r3, #31
 80039a4:	fa22 f303 	lsr.w	r3, r2, r3
 80039a8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80039aa:	4b0f      	ldr	r3, [pc, #60]	; (80039e8 <HAL_Init+0x68>)
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	4a0e      	ldr	r2, [pc, #56]	; (80039ec <HAL_Init+0x6c>)
 80039b4:	5cd3      	ldrb	r3, [r2, r3]
 80039b6:	f003 031f 	and.w	r3, r3, #31
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	fa22 f303 	lsr.w	r3, r2, r3
 80039c0:	4a0b      	ldr	r2, [pc, #44]	; (80039f0 <HAL_Init+0x70>)
 80039c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80039c4:	4a0b      	ldr	r2, [pc, #44]	; (80039f4 <HAL_Init+0x74>)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80039ca:	200f      	movs	r0, #15
 80039cc:	f000 f814 	bl	80039f8 <HAL_InitTick>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e002      	b.n	80039e0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80039da:	f7fe ffcb 	bl	8002974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	58024400 	.word	0x58024400
 80039ec:	080185a0 	.word	0x080185a0
 80039f0:	24000004 	.word	0x24000004
 80039f4:	24000000 	.word	0x24000000

080039f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003a00:	4b15      	ldr	r3, [pc, #84]	; (8003a58 <HAL_InitTick+0x60>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e021      	b.n	8003a50 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003a0c:	4b13      	ldr	r3, [pc, #76]	; (8003a5c <HAL_InitTick+0x64>)
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	4b11      	ldr	r3, [pc, #68]	; (8003a58 <HAL_InitTick+0x60>)
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	4619      	mov	r1, r3
 8003a16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a22:	4618      	mov	r0, r3
 8003a24:	f001 fceb 	bl	80053fe <HAL_SYSTICK_Config>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e00e      	b.n	8003a50 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b0f      	cmp	r3, #15
 8003a36:	d80a      	bhi.n	8003a4e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a38:	2200      	movs	r2, #0
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a40:	f001 fcb5 	bl	80053ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a44:	4a06      	ldr	r2, [pc, #24]	; (8003a60 <HAL_InitTick+0x68>)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	e000      	b.n	8003a50 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	2400000c 	.word	0x2400000c
 8003a5c:	24000000 	.word	0x24000000
 8003a60:	24000008 	.word	0x24000008

08003a64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a68:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <HAL_IncTick+0x20>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	4b06      	ldr	r3, [pc, #24]	; (8003a88 <HAL_IncTick+0x24>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4413      	add	r3, r2
 8003a74:	4a04      	ldr	r2, [pc, #16]	; (8003a88 <HAL_IncTick+0x24>)
 8003a76:	6013      	str	r3, [r2, #0]
}
 8003a78:	bf00      	nop
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	2400000c 	.word	0x2400000c
 8003a88:	240015d0 	.word	0x240015d0

08003a8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8003a90:	4b03      	ldr	r3, [pc, #12]	; (8003aa0 <HAL_GetTick+0x14>)
 8003a92:	681b      	ldr	r3, [r3, #0]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	240015d0 	.word	0x240015d0

08003aa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003aac:	f7ff ffee 	bl	8003a8c <HAL_GetTick>
 8003ab0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003abc:	d005      	beq.n	8003aca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003abe:	4b0a      	ldr	r3, [pc, #40]	; (8003ae8 <HAL_Delay+0x44>)
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003aca:	bf00      	nop
 8003acc:	f7ff ffde 	bl	8003a8c <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d8f7      	bhi.n	8003acc <HAL_Delay+0x28>
  {
  }
}
 8003adc:	bf00      	nop
 8003ade:	bf00      	nop
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	2400000c 	.word	0x2400000c

08003aec <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003af6:	4b07      	ldr	r3, [pc, #28]	; (8003b14 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	43db      	mvns	r3, r3
 8003afe:	401a      	ands	r2, r3
 8003b00:	4904      	ldr	r1, [pc, #16]	; (8003b14 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	604b      	str	r3, [r1, #4]
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	58000400 	.word	0x58000400

08003b18 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	609a      	str	r2, [r3, #8]
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
 8003b46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	609a      	str	r2, [r3, #8]
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b087      	sub	sp, #28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
 8003b8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	3360      	adds	r3, #96	; 0x60
 8003b92:	461a      	mov	r2, r3
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4a10      	ldr	r2, [pc, #64]	; (8003be0 <LL_ADC_SetOffset+0x60>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d10b      	bne.n	8003bbc <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003bba:	e00b      	b.n	8003bd4 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	430b      	orrs	r3, r1
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	601a      	str	r2, [r3, #0]
}
 8003bd4:	bf00      	nop
 8003bd6:	371c      	adds	r7, #28
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	58026000 	.word	0x58026000

08003be4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	3360      	adds	r3, #96	; 0x60
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3714      	adds	r7, #20
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	f003 031f 	and.w	r3, r3, #31
 8003c2a:	6879      	ldr	r1, [r7, #4]
 8003c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c30:	431a      	orrs	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	611a      	str	r2, [r3, #16]
}
 8003c36:	bf00      	nop
 8003c38:	3714      	adds	r7, #20
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
	...

08003c44 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b087      	sub	sp, #28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4a0c      	ldr	r2, [pc, #48]	; (8003c84 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d00e      	beq.n	8003c76 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	3360      	adds	r3, #96	; 0x60
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4413      	add	r3, r2
 8003c64:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	431a      	orrs	r2, r3
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	601a      	str	r2, [r3, #0]
  }
}
 8003c76:	bf00      	nop
 8003c78:	371c      	adds	r7, #28
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	58026000 	.word	0x58026000

08003c88 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b087      	sub	sp, #28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4a0c      	ldr	r2, [pc, #48]	; (8003cc8 <LL_ADC_SetOffsetSaturation+0x40>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d10e      	bne.n	8003cba <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	3360      	adds	r3, #96	; 0x60
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4413      	add	r3, r2
 8003ca8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003cba:	bf00      	nop
 8003cbc:	371c      	adds	r7, #28
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	58026000 	.word	0x58026000

08003ccc <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b087      	sub	sp, #28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	4a0c      	ldr	r2, [pc, #48]	; (8003d0c <LL_ADC_SetOffsetSign+0x40>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d10e      	bne.n	8003cfe <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	3360      	adds	r3, #96	; 0x60
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4413      	add	r3, r2
 8003cec:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003cfe:	bf00      	nop
 8003d00:	371c      	adds	r7, #28
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	58026000 	.word	0x58026000

08003d10 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	3360      	adds	r3, #96	; 0x60
 8003d20:	461a      	mov	r2, r3
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4413      	add	r3, r2
 8003d28:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	4a0c      	ldr	r2, [pc, #48]	; (8003d60 <LL_ADC_SetOffsetState+0x50>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d108      	bne.n	8003d44 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003d42:	e007      	b.n	8003d54 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	601a      	str	r2, [r3, #0]
}
 8003d54:	bf00      	nop
 8003d56:	371c      	adds	r7, #28
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	58026000 	.word	0x58026000

08003d64 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	3330      	adds	r3, #48	; 0x30
 8003d74:	461a      	mov	r2, r3
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	0a1b      	lsrs	r3, r3, #8
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	f003 030c 	and.w	r3, r3, #12
 8003d80:	4413      	add	r3, r2
 8003d82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f003 031f 	and.w	r3, r3, #31
 8003d8e:	211f      	movs	r1, #31
 8003d90:	fa01 f303 	lsl.w	r3, r1, r3
 8003d94:	43db      	mvns	r3, r3
 8003d96:	401a      	ands	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	0e9b      	lsrs	r3, r3, #26
 8003d9c:	f003 011f 	and.w	r1, r3, #31
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	f003 031f 	and.w	r3, r3, #31
 8003da6:	fa01 f303 	lsl.w	r3, r1, r3
 8003daa:	431a      	orrs	r2, r3
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003db0:	bf00      	nop
 8003db2:	371c      	adds	r7, #28
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b087      	sub	sp, #28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	3314      	adds	r3, #20
 8003dcc:	461a      	mov	r2, r3
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	0e5b      	lsrs	r3, r3, #25
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	4413      	add	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	0d1b      	lsrs	r3, r3, #20
 8003de4:	f003 031f 	and.w	r3, r3, #31
 8003de8:	2107      	movs	r1, #7
 8003dea:	fa01 f303 	lsl.w	r3, r1, r3
 8003dee:	43db      	mvns	r3, r3
 8003df0:	401a      	ands	r2, r3
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	0d1b      	lsrs	r3, r3, #20
 8003df6:	f003 031f 	and.w	r3, r3, #31
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003e00:	431a      	orrs	r2, r3
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003e06:	bf00      	nop
 8003e08:	371c      	adds	r7, #28
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
	...

08003e14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4a1a      	ldr	r2, [pc, #104]	; (8003e8c <LL_ADC_SetChannelSingleDiff+0x78>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d115      	bne.n	8003e54 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e34:	43db      	mvns	r3, r3
 8003e36:	401a      	ands	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f003 0318 	and.w	r3, r3, #24
 8003e3e:	4914      	ldr	r1, [pc, #80]	; (8003e90 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003e40:	40d9      	lsrs	r1, r3
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	400b      	ands	r3, r1
 8003e46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003e52:	e014      	b.n	8003e7e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e60:	43db      	mvns	r3, r3
 8003e62:	401a      	ands	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f003 0318 	and.w	r3, r3, #24
 8003e6a:	4909      	ldr	r1, [pc, #36]	; (8003e90 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003e6c:	40d9      	lsrs	r1, r3
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	400b      	ands	r3, r1
 8003e72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e76:	431a      	orrs	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003e7e:	bf00      	nop
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	58026000 	.word	0x58026000
 8003e90:	000fffff 	.word	0x000fffff

08003e94 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	4b04      	ldr	r3, [pc, #16]	; (8003eb4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6093      	str	r3, [r2, #8]
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	5fffffc0 	.word	0x5fffffc0

08003eb8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ec8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ecc:	d101      	bne.n	8003ed2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e000      	b.n	8003ed4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	4b05      	ldr	r3, [pc, #20]	; (8003f04 <LL_ADC_EnableInternalRegulator+0x24>)
 8003eee:	4013      	ands	r3, r2
 8003ef0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	6fffffc0 	.word	0x6fffffc0

08003f08 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f1c:	d101      	bne.n	8003f22 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e000      	b.n	8003f24 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d101      	bne.n	8003f48 <LL_ADC_IsEnabled+0x18>
 8003f44:	2301      	movs	r3, #1
 8003f46:	e000      	b.n	8003f4a <LL_ADC_IsEnabled+0x1a>
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 0304 	and.w	r3, r3, #4
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d101      	bne.n	8003f6e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e000      	b.n	8003f70 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f003 0308 	and.w	r3, r3, #8
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	d101      	bne.n	8003f94 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003f90:	2301      	movs	r3, #1
 8003f92:	e000      	b.n	8003f96 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
	...

08003fa4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003fa4:	b590      	push	{r4, r7, lr}
 8003fa6:	b089      	sub	sp, #36	; 0x24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fac:	2300      	movs	r3, #0
 8003fae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e1ee      	b.n	800439c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d109      	bne.n	8003fe0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f7fe fceb 	bl	80029a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7ff ff67 	bl	8003eb8 <LL_ADC_IsDeepPowerDownEnabled>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d004      	beq.n	8003ffa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff ff4d 	bl	8003e94 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7ff ff82 	bl	8003f08 <LL_ADC_IsInternalRegulatorEnabled>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d114      	bne.n	8004034 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff ff66 	bl	8003ee0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004014:	4b8e      	ldr	r3, [pc, #568]	; (8004250 <HAL_ADC_Init+0x2ac>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	099b      	lsrs	r3, r3, #6
 800401a:	4a8e      	ldr	r2, [pc, #568]	; (8004254 <HAL_ADC_Init+0x2b0>)
 800401c:	fba2 2303 	umull	r2, r3, r2, r3
 8004020:	099b      	lsrs	r3, r3, #6
 8004022:	3301      	adds	r3, #1
 8004024:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004026:	e002      	b.n	800402e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	3b01      	subs	r3, #1
 800402c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1f9      	bne.n	8004028 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff ff65 	bl	8003f08 <LL_ADC_IsInternalRegulatorEnabled>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10d      	bne.n	8004060 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004048:	f043 0210 	orr.w	r2, r3, #16
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004054:	f043 0201 	orr.w	r2, r3, #1
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff ff76 	bl	8003f56 <LL_ADC_REG_IsConversionOngoing>
 800406a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004070:	f003 0310 	and.w	r3, r3, #16
 8004074:	2b00      	cmp	r3, #0
 8004076:	f040 8188 	bne.w	800438a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	2b00      	cmp	r3, #0
 800407e:	f040 8184 	bne.w	800438a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004086:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800408a:	f043 0202 	orr.w	r2, r3, #2
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4618      	mov	r0, r3
 8004098:	f7ff ff4a 	bl	8003f30 <LL_ADC_IsEnabled>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d136      	bne.n	8004110 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a6c      	ldr	r2, [pc, #432]	; (8004258 <HAL_ADC_Init+0x2b4>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d004      	beq.n	80040b6 <HAL_ADC_Init+0x112>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a6a      	ldr	r2, [pc, #424]	; (800425c <HAL_ADC_Init+0x2b8>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d10e      	bne.n	80040d4 <HAL_ADC_Init+0x130>
 80040b6:	4868      	ldr	r0, [pc, #416]	; (8004258 <HAL_ADC_Init+0x2b4>)
 80040b8:	f7ff ff3a 	bl	8003f30 <LL_ADC_IsEnabled>
 80040bc:	4604      	mov	r4, r0
 80040be:	4867      	ldr	r0, [pc, #412]	; (800425c <HAL_ADC_Init+0x2b8>)
 80040c0:	f7ff ff36 	bl	8003f30 <LL_ADC_IsEnabled>
 80040c4:	4603      	mov	r3, r0
 80040c6:	4323      	orrs	r3, r4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	bf0c      	ite	eq
 80040cc:	2301      	moveq	r3, #1
 80040ce:	2300      	movne	r3, #0
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	e008      	b.n	80040e6 <HAL_ADC_Init+0x142>
 80040d4:	4862      	ldr	r0, [pc, #392]	; (8004260 <HAL_ADC_Init+0x2bc>)
 80040d6:	f7ff ff2b 	bl	8003f30 <LL_ADC_IsEnabled>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	bf0c      	ite	eq
 80040e0:	2301      	moveq	r3, #1
 80040e2:	2300      	movne	r3, #0
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d012      	beq.n	8004110 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a5a      	ldr	r2, [pc, #360]	; (8004258 <HAL_ADC_Init+0x2b4>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d004      	beq.n	80040fe <HAL_ADC_Init+0x15a>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a58      	ldr	r2, [pc, #352]	; (800425c <HAL_ADC_Init+0x2b8>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d101      	bne.n	8004102 <HAL_ADC_Init+0x15e>
 80040fe:	4a59      	ldr	r2, [pc, #356]	; (8004264 <HAL_ADC_Init+0x2c0>)
 8004100:	e000      	b.n	8004104 <HAL_ADC_Init+0x160>
 8004102:	4a59      	ldr	r2, [pc, #356]	; (8004268 <HAL_ADC_Init+0x2c4>)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	4619      	mov	r1, r3
 800410a:	4610      	mov	r0, r2
 800410c:	f7ff fd04 	bl	8003b18 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a52      	ldr	r2, [pc, #328]	; (8004260 <HAL_ADC_Init+0x2bc>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d129      	bne.n	800416e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	7e5b      	ldrb	r3, [r3, #25]
 800411e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004124:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800412a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	2b08      	cmp	r3, #8
 8004132:	d013      	beq.n	800415c <HAL_ADC_Init+0x1b8>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	2b0c      	cmp	r3, #12
 800413a:	d00d      	beq.n	8004158 <HAL_ADC_Init+0x1b4>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	2b1c      	cmp	r3, #28
 8004142:	d007      	beq.n	8004154 <HAL_ADC_Init+0x1b0>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	2b18      	cmp	r3, #24
 800414a:	d101      	bne.n	8004150 <HAL_ADC_Init+0x1ac>
 800414c:	2318      	movs	r3, #24
 800414e:	e006      	b.n	800415e <HAL_ADC_Init+0x1ba>
 8004150:	2300      	movs	r3, #0
 8004152:	e004      	b.n	800415e <HAL_ADC_Init+0x1ba>
 8004154:	2310      	movs	r3, #16
 8004156:	e002      	b.n	800415e <HAL_ADC_Init+0x1ba>
 8004158:	2308      	movs	r3, #8
 800415a:	e000      	b.n	800415e <HAL_ADC_Init+0x1ba>
 800415c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800415e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004166:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004168:	4313      	orrs	r3, r2
 800416a:	61bb      	str	r3, [r7, #24]
 800416c:	e00e      	b.n	800418c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	7e5b      	ldrb	r3, [r3, #25]
 8004172:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004178:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800417e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004186:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004188:	4313      	orrs	r3, r2
 800418a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d106      	bne.n	80041a4 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	3b01      	subs	r3, #1
 800419c:	045b      	lsls	r3, r3, #17
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d009      	beq.n	80041c0 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80041ba:	69ba      	ldr	r2, [r7, #24]
 80041bc:	4313      	orrs	r3, r2
 80041be:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a26      	ldr	r2, [pc, #152]	; (8004260 <HAL_ADC_Init+0x2bc>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d115      	bne.n	80041f6 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68da      	ldr	r2, [r3, #12]
 80041d0:	4b26      	ldr	r3, [pc, #152]	; (800426c <HAL_ADC_Init+0x2c8>)
 80041d2:	4013      	ands	r3, r2
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6812      	ldr	r2, [r2, #0]
 80041d8:	69b9      	ldr	r1, [r7, #24]
 80041da:	430b      	orrs	r3, r1
 80041dc:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	611a      	str	r2, [r3, #16]
 80041f4:	e009      	b.n	800420a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	4b1c      	ldr	r3, [pc, #112]	; (8004270 <HAL_ADC_Init+0x2cc>)
 80041fe:	4013      	ands	r3, r2
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	6812      	ldr	r2, [r2, #0]
 8004204:	69b9      	ldr	r1, [r7, #24]
 8004206:	430b      	orrs	r3, r1
 8004208:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4618      	mov	r0, r3
 8004210:	f7ff fea1 	bl	8003f56 <LL_ADC_REG_IsConversionOngoing>
 8004214:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4618      	mov	r0, r3
 800421c:	f7ff feae 	bl	8003f7c <LL_ADC_INJ_IsConversionOngoing>
 8004220:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	2b00      	cmp	r3, #0
 8004226:	f040 808e 	bne.w	8004346 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2b00      	cmp	r3, #0
 800422e:	f040 808a 	bne.w	8004346 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a0a      	ldr	r2, [pc, #40]	; (8004260 <HAL_ADC_Init+0x2bc>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d11b      	bne.n	8004274 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	7e1b      	ldrb	r3, [r3, #24]
 8004240:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004248:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800424a:	4313      	orrs	r3, r2
 800424c:	61bb      	str	r3, [r7, #24]
 800424e:	e018      	b.n	8004282 <HAL_ADC_Init+0x2de>
 8004250:	24000000 	.word	0x24000000
 8004254:	053e2d63 	.word	0x053e2d63
 8004258:	40022000 	.word	0x40022000
 800425c:	40022100 	.word	0x40022100
 8004260:	58026000 	.word	0x58026000
 8004264:	40022300 	.word	0x40022300
 8004268:	58026300 	.word	0x58026300
 800426c:	fff04007 	.word	0xfff04007
 8004270:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	7e1b      	ldrb	r3, [r3, #24]
 8004278:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 800427e:	4313      	orrs	r3, r2
 8004280:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68da      	ldr	r2, [r3, #12]
 8004288:	4b46      	ldr	r3, [pc, #280]	; (80043a4 <HAL_ADC_Init+0x400>)
 800428a:	4013      	ands	r3, r2
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	6812      	ldr	r2, [r2, #0]
 8004290:	69b9      	ldr	r1, [r7, #24]
 8004292:	430b      	orrs	r3, r1
 8004294:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800429c:	2b01      	cmp	r3, #1
 800429e:	d137      	bne.n	8004310 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a4:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a3f      	ldr	r2, [pc, #252]	; (80043a8 <HAL_ADC_Init+0x404>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d116      	bne.n	80042de <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	691a      	ldr	r2, [r3, #16]
 80042b6:	4b3d      	ldr	r3, [pc, #244]	; (80043ac <HAL_ADC_Init+0x408>)
 80042b8:	4013      	ands	r3, r2
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80042c2:	4311      	orrs	r1, r2
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80042c8:	4311      	orrs	r1, r2
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80042ce:	430a      	orrs	r2, r1
 80042d0:	431a      	orrs	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f042 0201 	orr.w	r2, r2, #1
 80042da:	611a      	str	r2, [r3, #16]
 80042dc:	e020      	b.n	8004320 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	691a      	ldr	r2, [r3, #16]
 80042e4:	4b32      	ldr	r3, [pc, #200]	; (80043b0 <HAL_ADC_Init+0x40c>)
 80042e6:	4013      	ands	r3, r2
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80042ec:	3a01      	subs	r2, #1
 80042ee:	0411      	lsls	r1, r2, #16
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80042f4:	4311      	orrs	r1, r2
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80042fa:	4311      	orrs	r1, r2
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004300:	430a      	orrs	r2, r1
 8004302:	431a      	orrs	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f042 0201 	orr.w	r2, r2, #1
 800430c:	611a      	str	r2, [r3, #16]
 800430e:	e007      	b.n	8004320 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	691a      	ldr	r2, [r3, #16]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 0201 	bic.w	r2, r2, #1
 800431e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a1b      	ldr	r2, [pc, #108]	; (80043a8 <HAL_ADC_Init+0x404>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d002      	beq.n	8004346 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 fd63 	bl	8004e0c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d10c      	bne.n	8004368 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004354:	f023 010f 	bic.w	r1, r3, #15
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	1e5a      	subs	r2, r3, #1
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	631a      	str	r2, [r3, #48]	; 0x30
 8004366:	e007      	b.n	8004378 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 020f 	bic.w	r2, r2, #15
 8004376:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800437c:	f023 0303 	bic.w	r3, r3, #3
 8004380:	f043 0201 	orr.w	r2, r3, #1
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	661a      	str	r2, [r3, #96]	; 0x60
 8004388:	e007      	b.n	800439a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800438e:	f043 0210 	orr.w	r2, r3, #16
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800439a:	7ffb      	ldrb	r3, [r7, #31]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3724      	adds	r7, #36	; 0x24
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd90      	pop	{r4, r7, pc}
 80043a4:	ffffbffc 	.word	0xffffbffc
 80043a8:	58026000 	.word	0x58026000
 80043ac:	fc00f81f 	.word	0xfc00f81f
 80043b0:	fc00f81e 	.word	0xfc00f81e

080043b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80043b4:	b590      	push	{r4, r7, lr}
 80043b6:	b0b9      	sub	sp, #228	; 0xe4
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043be:	2300      	movs	r3, #0
 80043c0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80043c4:	2300      	movs	r3, #0
 80043c6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043ce:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	4aa9      	ldr	r2, [pc, #676]	; (800467c <HAL_ADC_ConfigChannel+0x2c8>)
 80043d6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d102      	bne.n	80043e8 <HAL_ADC_ConfigChannel+0x34>
 80043e2:	2302      	movs	r3, #2
 80043e4:	f000 bcfa 	b.w	8004ddc <HAL_ADC_ConfigChannel+0xa28>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff fdae 	bl	8003f56 <LL_ADC_REG_IsConversionOngoing>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f040 84de 	bne.w	8004dbe <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a9e      	ldr	r2, [pc, #632]	; (8004680 <HAL_ADC_ConfigChannel+0x2cc>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d033      	beq.n	8004474 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004414:	2b00      	cmp	r3, #0
 8004416:	d108      	bne.n	800442a <HAL_ADC_ConfigChannel+0x76>
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	0e9b      	lsrs	r3, r3, #26
 800441e:	f003 031f 	and.w	r3, r3, #31
 8004422:	2201      	movs	r2, #1
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	e01d      	b.n	8004466 <HAL_ADC_ConfigChannel+0xb2>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004432:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004436:	fa93 f3a3 	rbit	r3, r3
 800443a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800443e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004442:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004446:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 800444e:	2320      	movs	r3, #32
 8004450:	e004      	b.n	800445c <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8004452:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004456:	fab3 f383 	clz	r3, r3
 800445a:	b2db      	uxtb	r3, r3
 800445c:	f003 031f 	and.w	r3, r3, #31
 8004460:	2201      	movs	r2, #1
 8004462:	fa02 f303 	lsl.w	r3, r2, r3
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	6812      	ldr	r2, [r2, #0]
 800446a:	69d1      	ldr	r1, [r2, #28]
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6812      	ldr	r2, [r2, #0]
 8004470:	430b      	orrs	r3, r1
 8004472:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6818      	ldr	r0, [r3, #0]
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	6859      	ldr	r1, [r3, #4]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	461a      	mov	r2, r3
 8004482:	f7ff fc6f 	bl	8003d64 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4618      	mov	r0, r3
 800448c:	f7ff fd63 	bl	8003f56 <LL_ADC_REG_IsConversionOngoing>
 8004490:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4618      	mov	r0, r3
 800449a:	f7ff fd6f 	bl	8003f7c <LL_ADC_INJ_IsConversionOngoing>
 800449e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80044a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f040 8270 	bne.w	800498c <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80044ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f040 826b 	bne.w	800498c <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6818      	ldr	r0, [r3, #0]
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	6819      	ldr	r1, [r3, #0]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	461a      	mov	r2, r3
 80044c4:	f7ff fc7a 	bl	8003dbc <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a6c      	ldr	r2, [pc, #432]	; (8004680 <HAL_ADC_ConfigChannel+0x2cc>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d10d      	bne.n	80044ee <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	695a      	ldr	r2, [r3, #20]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	08db      	lsrs	r3, r3, #3
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	005b      	lsls	r3, r3, #1
 80044e4:	fa02 f303 	lsl.w	r3, r2, r3
 80044e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80044ec:	e032      	b.n	8004554 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80044ee:	4b65      	ldr	r3, [pc, #404]	; (8004684 <HAL_ADC_ConfigChannel+0x2d0>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80044f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044fa:	d10b      	bne.n	8004514 <HAL_ADC_ConfigChannel+0x160>
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	695a      	ldr	r2, [r3, #20]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	089b      	lsrs	r3, r3, #2
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	fa02 f303 	lsl.w	r3, r2, r3
 8004512:	e01d      	b.n	8004550 <HAL_ADC_ConfigChannel+0x19c>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	f003 0310 	and.w	r3, r3, #16
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10b      	bne.n	800453a <HAL_ADC_ConfigChannel+0x186>
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	695a      	ldr	r2, [r3, #20]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	089b      	lsrs	r3, r3, #2
 800452e:	f003 0307 	and.w	r3, r3, #7
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	fa02 f303 	lsl.w	r3, r2, r3
 8004538:	e00a      	b.n	8004550 <HAL_ADC_ConfigChannel+0x19c>
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	695a      	ldr	r2, [r3, #20]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	089b      	lsrs	r3, r3, #2
 8004546:	f003 0304 	and.w	r3, r3, #4
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	2b04      	cmp	r3, #4
 800455a:	d048      	beq.n	80045ee <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6818      	ldr	r0, [r3, #0]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	6919      	ldr	r1, [r3, #16]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800456c:	f7ff fb08 	bl	8003b80 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a42      	ldr	r2, [pc, #264]	; (8004680 <HAL_ADC_ConfigChannel+0x2cc>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d119      	bne.n	80045ae <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6818      	ldr	r0, [r3, #0]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	6919      	ldr	r1, [r3, #16]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	461a      	mov	r2, r3
 8004588:	f7ff fba0 	bl	8003ccc <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6818      	ldr	r0, [r3, #0]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	6919      	ldr	r1, [r3, #16]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	f893 3020 	ldrb.w	r3, [r3, #32]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d102      	bne.n	80045a4 <HAL_ADC_ConfigChannel+0x1f0>
 800459e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045a2:	e000      	b.n	80045a6 <HAL_ADC_ConfigChannel+0x1f2>
 80045a4:	2300      	movs	r3, #0
 80045a6:	461a      	mov	r2, r3
 80045a8:	f7ff fb6e 	bl	8003c88 <LL_ADC_SetOffsetSaturation>
 80045ac:	e1ee      	b.n	800498c <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6818      	ldr	r0, [r3, #0]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	6919      	ldr	r1, [r3, #16]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d102      	bne.n	80045c6 <HAL_ADC_ConfigChannel+0x212>
 80045c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80045c4:	e000      	b.n	80045c8 <HAL_ADC_ConfigChannel+0x214>
 80045c6:	2300      	movs	r3, #0
 80045c8:	461a      	mov	r2, r3
 80045ca:	f7ff fb3b 	bl	8003c44 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6818      	ldr	r0, [r3, #0]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	6919      	ldr	r1, [r3, #16]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	7e1b      	ldrb	r3, [r3, #24]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d102      	bne.n	80045e4 <HAL_ADC_ConfigChannel+0x230>
 80045de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80045e2:	e000      	b.n	80045e6 <HAL_ADC_ConfigChannel+0x232>
 80045e4:	2300      	movs	r3, #0
 80045e6:	461a      	mov	r2, r3
 80045e8:	f7ff fb12 	bl	8003c10 <LL_ADC_SetDataRightShift>
 80045ec:	e1ce      	b.n	800498c <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a23      	ldr	r2, [pc, #140]	; (8004680 <HAL_ADC_ConfigChannel+0x2cc>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	f040 8181 	bne.w	80048fc <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2100      	movs	r1, #0
 8004600:	4618      	mov	r0, r3
 8004602:	f7ff faef 	bl	8003be4 <LL_ADC_GetOffsetChannel>
 8004606:	4603      	mov	r3, r0
 8004608:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10a      	bne.n	8004626 <HAL_ADC_ConfigChannel+0x272>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2100      	movs	r1, #0
 8004616:	4618      	mov	r0, r3
 8004618:	f7ff fae4 	bl	8003be4 <LL_ADC_GetOffsetChannel>
 800461c:	4603      	mov	r3, r0
 800461e:	0e9b      	lsrs	r3, r3, #26
 8004620:	f003 021f 	and.w	r2, r3, #31
 8004624:	e01e      	b.n	8004664 <HAL_ADC_ConfigChannel+0x2b0>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2100      	movs	r1, #0
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff fad9 	bl	8003be4 <LL_ADC_GetOffsetChannel>
 8004632:	4603      	mov	r3, r0
 8004634:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004638:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800463c:	fa93 f3a3 	rbit	r3, r3
 8004640:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004644:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004648:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 800464c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004650:	2b00      	cmp	r3, #0
 8004652:	d101      	bne.n	8004658 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8004654:	2320      	movs	r3, #32
 8004656:	e004      	b.n	8004662 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8004658:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800465c:	fab3 f383 	clz	r3, r3
 8004660:	b2db      	uxtb	r3, r3
 8004662:	461a      	mov	r2, r3
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10b      	bne.n	8004688 <HAL_ADC_ConfigChannel+0x2d4>
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	0e9b      	lsrs	r3, r3, #26
 8004676:	f003 031f 	and.w	r3, r3, #31
 800467a:	e01e      	b.n	80046ba <HAL_ADC_ConfigChannel+0x306>
 800467c:	47ff0000 	.word	0x47ff0000
 8004680:	58026000 	.word	0x58026000
 8004684:	5c001000 	.word	0x5c001000
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004690:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004694:	fa93 f3a3 	rbit	r3, r3
 8004698:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 800469c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80046a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 80046ac:	2320      	movs	r3, #32
 80046ae:	e004      	b.n	80046ba <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 80046b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80046b4:	fab3 f383 	clz	r3, r3
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d106      	bne.n	80046cc <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2200      	movs	r2, #0
 80046c4:	2100      	movs	r1, #0
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7ff fb22 	bl	8003d10 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2101      	movs	r1, #1
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff fa86 	bl	8003be4 <LL_ADC_GetOffsetChannel>
 80046d8:	4603      	mov	r3, r0
 80046da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10a      	bne.n	80046f8 <HAL_ADC_ConfigChannel+0x344>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2101      	movs	r1, #1
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7ff fa7b 	bl	8003be4 <LL_ADC_GetOffsetChannel>
 80046ee:	4603      	mov	r3, r0
 80046f0:	0e9b      	lsrs	r3, r3, #26
 80046f2:	f003 021f 	and.w	r2, r3, #31
 80046f6:	e01e      	b.n	8004736 <HAL_ADC_ConfigChannel+0x382>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2101      	movs	r1, #1
 80046fe:	4618      	mov	r0, r3
 8004700:	f7ff fa70 	bl	8003be4 <LL_ADC_GetOffsetChannel>
 8004704:	4603      	mov	r3, r0
 8004706:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800470a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800470e:	fa93 f3a3 	rbit	r3, r3
 8004712:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004716:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800471a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800471e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8004726:	2320      	movs	r3, #32
 8004728:	e004      	b.n	8004734 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800472a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800472e:	fab3 f383 	clz	r3, r3
 8004732:	b2db      	uxtb	r3, r3
 8004734:	461a      	mov	r2, r3
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800473e:	2b00      	cmp	r3, #0
 8004740:	d105      	bne.n	800474e <HAL_ADC_ConfigChannel+0x39a>
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	0e9b      	lsrs	r3, r3, #26
 8004748:	f003 031f 	and.w	r3, r3, #31
 800474c:	e018      	b.n	8004780 <HAL_ADC_ConfigChannel+0x3cc>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004756:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800475a:	fa93 f3a3 	rbit	r3, r3
 800475e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004762:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004766:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800476a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8004772:	2320      	movs	r3, #32
 8004774:	e004      	b.n	8004780 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8004776:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800477a:	fab3 f383 	clz	r3, r3
 800477e:	b2db      	uxtb	r3, r3
 8004780:	429a      	cmp	r2, r3
 8004782:	d106      	bne.n	8004792 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2200      	movs	r2, #0
 800478a:	2101      	movs	r1, #1
 800478c:	4618      	mov	r0, r3
 800478e:	f7ff fabf 	bl	8003d10 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2102      	movs	r1, #2
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff fa23 	bl	8003be4 <LL_ADC_GetOffsetChannel>
 800479e:	4603      	mov	r3, r0
 80047a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10a      	bne.n	80047be <HAL_ADC_ConfigChannel+0x40a>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2102      	movs	r1, #2
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7ff fa18 	bl	8003be4 <LL_ADC_GetOffsetChannel>
 80047b4:	4603      	mov	r3, r0
 80047b6:	0e9b      	lsrs	r3, r3, #26
 80047b8:	f003 021f 	and.w	r2, r3, #31
 80047bc:	e01e      	b.n	80047fc <HAL_ADC_ConfigChannel+0x448>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2102      	movs	r1, #2
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7ff fa0d 	bl	8003be4 <LL_ADC_GetOffsetChannel>
 80047ca:	4603      	mov	r3, r0
 80047cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047d4:	fa93 f3a3 	rbit	r3, r3
 80047d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80047dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80047e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d101      	bne.n	80047f0 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 80047ec:	2320      	movs	r3, #32
 80047ee:	e004      	b.n	80047fa <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 80047f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047f4:	fab3 f383 	clz	r3, r3
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	461a      	mov	r2, r3
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004804:	2b00      	cmp	r3, #0
 8004806:	d105      	bne.n	8004814 <HAL_ADC_ConfigChannel+0x460>
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	0e9b      	lsrs	r3, r3, #26
 800480e:	f003 031f 	and.w	r3, r3, #31
 8004812:	e014      	b.n	800483e <HAL_ADC_ConfigChannel+0x48a>
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800481a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800481c:	fa93 f3a3 	rbit	r3, r3
 8004820:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004822:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004824:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004828:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004830:	2320      	movs	r3, #32
 8004832:	e004      	b.n	800483e <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004834:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004838:	fab3 f383 	clz	r3, r3
 800483c:	b2db      	uxtb	r3, r3
 800483e:	429a      	cmp	r2, r3
 8004840:	d106      	bne.n	8004850 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2200      	movs	r2, #0
 8004848:	2102      	movs	r1, #2
 800484a:	4618      	mov	r0, r3
 800484c:	f7ff fa60 	bl	8003d10 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2103      	movs	r1, #3
 8004856:	4618      	mov	r0, r3
 8004858:	f7ff f9c4 	bl	8003be4 <LL_ADC_GetOffsetChannel>
 800485c:	4603      	mov	r3, r0
 800485e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10a      	bne.n	800487c <HAL_ADC_ConfigChannel+0x4c8>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2103      	movs	r1, #3
 800486c:	4618      	mov	r0, r3
 800486e:	f7ff f9b9 	bl	8003be4 <LL_ADC_GetOffsetChannel>
 8004872:	4603      	mov	r3, r0
 8004874:	0e9b      	lsrs	r3, r3, #26
 8004876:	f003 021f 	and.w	r2, r3, #31
 800487a:	e017      	b.n	80048ac <HAL_ADC_ConfigChannel+0x4f8>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2103      	movs	r1, #3
 8004882:	4618      	mov	r0, r3
 8004884:	f7ff f9ae 	bl	8003be4 <LL_ADC_GetOffsetChannel>
 8004888:	4603      	mov	r3, r0
 800488a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800488c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800488e:	fa93 f3a3 	rbit	r3, r3
 8004892:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004896:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004898:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800489e:	2320      	movs	r3, #32
 80048a0:	e003      	b.n	80048aa <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80048a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048a4:	fab3 f383 	clz	r3, r3
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	461a      	mov	r2, r3
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d105      	bne.n	80048c4 <HAL_ADC_ConfigChannel+0x510>
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	0e9b      	lsrs	r3, r3, #26
 80048be:	f003 031f 	and.w	r3, r3, #31
 80048c2:	e011      	b.n	80048e8 <HAL_ADC_ConfigChannel+0x534>
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048cc:	fa93 f3a3 	rbit	r3, r3
 80048d0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80048d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048d4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80048d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 80048dc:	2320      	movs	r3, #32
 80048de:	e003      	b.n	80048e8 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 80048e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048e2:	fab3 f383 	clz	r3, r3
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d14f      	bne.n	800498c <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2200      	movs	r2, #0
 80048f2:	2103      	movs	r1, #3
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7ff fa0b 	bl	8003d10 <LL_ADC_SetOffsetState>
 80048fa:	e047      	b.n	800498c <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004902:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	069b      	lsls	r3, r3, #26
 800490c:	429a      	cmp	r2, r3
 800490e:	d107      	bne.n	8004920 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800491e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004926:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	069b      	lsls	r3, r3, #26
 8004930:	429a      	cmp	r2, r3
 8004932:	d107      	bne.n	8004944 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004942:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800494a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	069b      	lsls	r3, r3, #26
 8004954:	429a      	cmp	r2, r3
 8004956:	d107      	bne.n	8004968 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004966:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800496e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	069b      	lsls	r3, r3, #26
 8004978:	429a      	cmp	r2, r3
 800497a:	d107      	bne.n	800498c <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800498a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4618      	mov	r0, r3
 8004992:	f7ff facd 	bl	8003f30 <LL_ADC_IsEnabled>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	f040 8219 	bne.w	8004dd0 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6818      	ldr	r0, [r3, #0]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	6819      	ldr	r1, [r3, #0]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	461a      	mov	r2, r3
 80049ac:	f7ff fa32 	bl	8003e14 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	4aa1      	ldr	r2, [pc, #644]	; (8004c3c <HAL_ADC_ConfigChannel+0x888>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	f040 812e 	bne.w	8004c18 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10b      	bne.n	80049e4 <HAL_ADC_ConfigChannel+0x630>
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	0e9b      	lsrs	r3, r3, #26
 80049d2:	3301      	adds	r3, #1
 80049d4:	f003 031f 	and.w	r3, r3, #31
 80049d8:	2b09      	cmp	r3, #9
 80049da:	bf94      	ite	ls
 80049dc:	2301      	movls	r3, #1
 80049de:	2300      	movhi	r3, #0
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	e019      	b.n	8004a18 <HAL_ADC_ConfigChannel+0x664>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049ec:	fa93 f3a3 	rbit	r3, r3
 80049f0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80049f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80049f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d101      	bne.n	8004a00 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80049fc:	2320      	movs	r3, #32
 80049fe:	e003      	b.n	8004a08 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8004a00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a02:	fab3 f383 	clz	r3, r3
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	3301      	adds	r3, #1
 8004a0a:	f003 031f 	and.w	r3, r3, #31
 8004a0e:	2b09      	cmp	r3, #9
 8004a10:	bf94      	ite	ls
 8004a12:	2301      	movls	r3, #1
 8004a14:	2300      	movhi	r3, #0
 8004a16:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d079      	beq.n	8004b10 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d107      	bne.n	8004a38 <HAL_ADC_ConfigChannel+0x684>
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	0e9b      	lsrs	r3, r3, #26
 8004a2e:	3301      	adds	r3, #1
 8004a30:	069b      	lsls	r3, r3, #26
 8004a32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a36:	e015      	b.n	8004a64 <HAL_ADC_ConfigChannel+0x6b0>
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a40:	fa93 f3a3 	rbit	r3, r3
 8004a44:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004a46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a48:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004a50:	2320      	movs	r3, #32
 8004a52:	e003      	b.n	8004a5c <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004a54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a56:	fab3 f383 	clz	r3, r3
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	069b      	lsls	r3, r3, #26
 8004a60:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d109      	bne.n	8004a84 <HAL_ADC_ConfigChannel+0x6d0>
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	0e9b      	lsrs	r3, r3, #26
 8004a76:	3301      	adds	r3, #1
 8004a78:	f003 031f 	and.w	r3, r3, #31
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a82:	e017      	b.n	8004ab4 <HAL_ADC_ConfigChannel+0x700>
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a8c:	fa93 f3a3 	rbit	r3, r3
 8004a90:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a94:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004a96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d101      	bne.n	8004aa0 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004a9c:	2320      	movs	r3, #32
 8004a9e:	e003      	b.n	8004aa8 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aa2:	fab3 f383 	clz	r3, r3
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	f003 031f 	and.w	r3, r3, #31
 8004aae:	2101      	movs	r1, #1
 8004ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab4:	ea42 0103 	orr.w	r1, r2, r3
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10a      	bne.n	8004ada <HAL_ADC_ConfigChannel+0x726>
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	0e9b      	lsrs	r3, r3, #26
 8004aca:	3301      	adds	r3, #1
 8004acc:	f003 021f 	and.w	r2, r3, #31
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	4413      	add	r3, r2
 8004ad6:	051b      	lsls	r3, r3, #20
 8004ad8:	e018      	b.n	8004b0c <HAL_ADC_ConfigChannel+0x758>
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae2:	fa93 f3a3 	rbit	r3, r3
 8004ae6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aea:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8004af2:	2320      	movs	r3, #32
 8004af4:	e003      	b.n	8004afe <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8004af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af8:	fab3 f383 	clz	r3, r3
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	3301      	adds	r3, #1
 8004b00:	f003 021f 	and.w	r2, r3, #31
 8004b04:	4613      	mov	r3, r2
 8004b06:	005b      	lsls	r3, r3, #1
 8004b08:	4413      	add	r3, r2
 8004b0a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b0c:	430b      	orrs	r3, r1
 8004b0e:	e07e      	b.n	8004c0e <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d107      	bne.n	8004b2c <HAL_ADC_ConfigChannel+0x778>
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	0e9b      	lsrs	r3, r3, #26
 8004b22:	3301      	adds	r3, #1
 8004b24:	069b      	lsls	r3, r3, #26
 8004b26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b2a:	e015      	b.n	8004b58 <HAL_ADC_ConfigChannel+0x7a4>
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b34:	fa93 f3a3 	rbit	r3, r3
 8004b38:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004b44:	2320      	movs	r3, #32
 8004b46:	e003      	b.n	8004b50 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4a:	fab3 f383 	clz	r3, r3
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	3301      	adds	r3, #1
 8004b52:	069b      	lsls	r3, r3, #26
 8004b54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d109      	bne.n	8004b78 <HAL_ADC_ConfigChannel+0x7c4>
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	0e9b      	lsrs	r3, r3, #26
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	f003 031f 	and.w	r3, r3, #31
 8004b70:	2101      	movs	r1, #1
 8004b72:	fa01 f303 	lsl.w	r3, r1, r3
 8004b76:	e017      	b.n	8004ba8 <HAL_ADC_ConfigChannel+0x7f4>
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	fa93 f3a3 	rbit	r3, r3
 8004b84:	61bb      	str	r3, [r7, #24]
  return result;
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004b8a:	6a3b      	ldr	r3, [r7, #32]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004b90:	2320      	movs	r3, #32
 8004b92:	e003      	b.n	8004b9c <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004b94:	6a3b      	ldr	r3, [r7, #32]
 8004b96:	fab3 f383 	clz	r3, r3
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	f003 031f 	and.w	r3, r3, #31
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba8:	ea42 0103 	orr.w	r1, r2, r3
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10d      	bne.n	8004bd4 <HAL_ADC_ConfigChannel+0x820>
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	0e9b      	lsrs	r3, r3, #26
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	f003 021f 	and.w	r2, r3, #31
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	4413      	add	r3, r2
 8004bca:	3b1e      	subs	r3, #30
 8004bcc:	051b      	lsls	r3, r3, #20
 8004bce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004bd2:	e01b      	b.n	8004c0c <HAL_ADC_ConfigChannel+0x858>
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	fa93 f3a3 	rbit	r3, r3
 8004be0:	60fb      	str	r3, [r7, #12]
  return result;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004bec:	2320      	movs	r3, #32
 8004bee:	e003      	b.n	8004bf8 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	fab3 f383 	clz	r3, r3
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	f003 021f 	and.w	r2, r3, #31
 8004bfe:	4613      	mov	r3, r2
 8004c00:	005b      	lsls	r3, r3, #1
 8004c02:	4413      	add	r3, r2
 8004c04:	3b1e      	subs	r3, #30
 8004c06:	051b      	lsls	r3, r3, #20
 8004c08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c0c:	430b      	orrs	r3, r1
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	6892      	ldr	r2, [r2, #8]
 8004c12:	4619      	mov	r1, r3
 8004c14:	f7ff f8d2 	bl	8003dbc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f280 80d7 	bge.w	8004dd0 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a06      	ldr	r2, [pc, #24]	; (8004c40 <HAL_ADC_ConfigChannel+0x88c>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d004      	beq.n	8004c36 <HAL_ADC_ConfigChannel+0x882>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a04      	ldr	r2, [pc, #16]	; (8004c44 <HAL_ADC_ConfigChannel+0x890>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d10a      	bne.n	8004c4c <HAL_ADC_ConfigChannel+0x898>
 8004c36:	4b04      	ldr	r3, [pc, #16]	; (8004c48 <HAL_ADC_ConfigChannel+0x894>)
 8004c38:	e009      	b.n	8004c4e <HAL_ADC_ConfigChannel+0x89a>
 8004c3a:	bf00      	nop
 8004c3c:	47ff0000 	.word	0x47ff0000
 8004c40:	40022000 	.word	0x40022000
 8004c44:	40022100 	.word	0x40022100
 8004c48:	40022300 	.word	0x40022300
 8004c4c:	4b65      	ldr	r3, [pc, #404]	; (8004de4 <HAL_ADC_ConfigChannel+0xa30>)
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7fe ff88 	bl	8003b64 <LL_ADC_GetCommonPathInternalCh>
 8004c54:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a62      	ldr	r2, [pc, #392]	; (8004de8 <HAL_ADC_ConfigChannel+0xa34>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d004      	beq.n	8004c6c <HAL_ADC_ConfigChannel+0x8b8>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a61      	ldr	r2, [pc, #388]	; (8004dec <HAL_ADC_ConfigChannel+0xa38>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d10e      	bne.n	8004c8a <HAL_ADC_ConfigChannel+0x8d6>
 8004c6c:	485e      	ldr	r0, [pc, #376]	; (8004de8 <HAL_ADC_ConfigChannel+0xa34>)
 8004c6e:	f7ff f95f 	bl	8003f30 <LL_ADC_IsEnabled>
 8004c72:	4604      	mov	r4, r0
 8004c74:	485d      	ldr	r0, [pc, #372]	; (8004dec <HAL_ADC_ConfigChannel+0xa38>)
 8004c76:	f7ff f95b 	bl	8003f30 <LL_ADC_IsEnabled>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	4323      	orrs	r3, r4
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	bf0c      	ite	eq
 8004c82:	2301      	moveq	r3, #1
 8004c84:	2300      	movne	r3, #0
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	e008      	b.n	8004c9c <HAL_ADC_ConfigChannel+0x8e8>
 8004c8a:	4859      	ldr	r0, [pc, #356]	; (8004df0 <HAL_ADC_ConfigChannel+0xa3c>)
 8004c8c:	f7ff f950 	bl	8003f30 <LL_ADC_IsEnabled>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	bf0c      	ite	eq
 8004c96:	2301      	moveq	r3, #1
 8004c98:	2300      	movne	r3, #0
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 8084 	beq.w	8004daa <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a53      	ldr	r2, [pc, #332]	; (8004df4 <HAL_ADC_ConfigChannel+0xa40>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d132      	bne.n	8004d12 <HAL_ADC_ConfigChannel+0x95e>
 8004cac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004cb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d12c      	bne.n	8004d12 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a4c      	ldr	r2, [pc, #304]	; (8004df0 <HAL_ADC_ConfigChannel+0xa3c>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	f040 8086 	bne.w	8004dd0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a47      	ldr	r2, [pc, #284]	; (8004de8 <HAL_ADC_ConfigChannel+0xa34>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d004      	beq.n	8004cd8 <HAL_ADC_ConfigChannel+0x924>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a46      	ldr	r2, [pc, #280]	; (8004dec <HAL_ADC_ConfigChannel+0xa38>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d101      	bne.n	8004cdc <HAL_ADC_ConfigChannel+0x928>
 8004cd8:	4a47      	ldr	r2, [pc, #284]	; (8004df8 <HAL_ADC_ConfigChannel+0xa44>)
 8004cda:	e000      	b.n	8004cde <HAL_ADC_ConfigChannel+0x92a>
 8004cdc:	4a41      	ldr	r2, [pc, #260]	; (8004de4 <HAL_ADC_ConfigChannel+0xa30>)
 8004cde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ce2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	4610      	mov	r0, r2
 8004cea:	f7fe ff28 	bl	8003b3e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004cee:	4b43      	ldr	r3, [pc, #268]	; (8004dfc <HAL_ADC_ConfigChannel+0xa48>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	099b      	lsrs	r3, r3, #6
 8004cf4:	4a42      	ldr	r2, [pc, #264]	; (8004e00 <HAL_ADC_ConfigChannel+0xa4c>)
 8004cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfa:	099b      	lsrs	r3, r3, #6
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	005b      	lsls	r3, r3, #1
 8004d00:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004d02:	e002      	b.n	8004d0a <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	3b01      	subs	r3, #1
 8004d08:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1f9      	bne.n	8004d04 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d10:	e05e      	b.n	8004dd0 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a3b      	ldr	r2, [pc, #236]	; (8004e04 <HAL_ADC_ConfigChannel+0xa50>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d120      	bne.n	8004d5e <HAL_ADC_ConfigChannel+0x9aa>
 8004d1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d11a      	bne.n	8004d5e <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a30      	ldr	r2, [pc, #192]	; (8004df0 <HAL_ADC_ConfigChannel+0xa3c>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d14e      	bne.n	8004dd0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a2c      	ldr	r2, [pc, #176]	; (8004de8 <HAL_ADC_ConfigChannel+0xa34>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d004      	beq.n	8004d46 <HAL_ADC_ConfigChannel+0x992>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a2a      	ldr	r2, [pc, #168]	; (8004dec <HAL_ADC_ConfigChannel+0xa38>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d101      	bne.n	8004d4a <HAL_ADC_ConfigChannel+0x996>
 8004d46:	4a2c      	ldr	r2, [pc, #176]	; (8004df8 <HAL_ADC_ConfigChannel+0xa44>)
 8004d48:	e000      	b.n	8004d4c <HAL_ADC_ConfigChannel+0x998>
 8004d4a:	4a26      	ldr	r2, [pc, #152]	; (8004de4 <HAL_ADC_ConfigChannel+0xa30>)
 8004d4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d54:	4619      	mov	r1, r3
 8004d56:	4610      	mov	r0, r2
 8004d58:	f7fe fef1 	bl	8003b3e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d5c:	e038      	b.n	8004dd0 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a29      	ldr	r2, [pc, #164]	; (8004e08 <HAL_ADC_ConfigChannel+0xa54>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d133      	bne.n	8004dd0 <HAL_ADC_ConfigChannel+0xa1c>
 8004d68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d12d      	bne.n	8004dd0 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a1d      	ldr	r2, [pc, #116]	; (8004df0 <HAL_ADC_ConfigChannel+0xa3c>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d128      	bne.n	8004dd0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a19      	ldr	r2, [pc, #100]	; (8004de8 <HAL_ADC_ConfigChannel+0xa34>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d004      	beq.n	8004d92 <HAL_ADC_ConfigChannel+0x9de>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a17      	ldr	r2, [pc, #92]	; (8004dec <HAL_ADC_ConfigChannel+0xa38>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d101      	bne.n	8004d96 <HAL_ADC_ConfigChannel+0x9e2>
 8004d92:	4a19      	ldr	r2, [pc, #100]	; (8004df8 <HAL_ADC_ConfigChannel+0xa44>)
 8004d94:	e000      	b.n	8004d98 <HAL_ADC_ConfigChannel+0x9e4>
 8004d96:	4a13      	ldr	r2, [pc, #76]	; (8004de4 <HAL_ADC_ConfigChannel+0xa30>)
 8004d98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004da0:	4619      	mov	r1, r3
 8004da2:	4610      	mov	r0, r2
 8004da4:	f7fe fecb 	bl	8003b3e <LL_ADC_SetCommonPathInternalCh>
 8004da8:	e012      	b.n	8004dd0 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dae:	f043 0220 	orr.w	r2, r3, #32
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004dbc:	e008      	b.n	8004dd0 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc2:	f043 0220 	orr.w	r2, r3, #32
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004dd8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	37e4      	adds	r7, #228	; 0xe4
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd90      	pop	{r4, r7, pc}
 8004de4:	58026300 	.word	0x58026300
 8004de8:	40022000 	.word	0x40022000
 8004dec:	40022100 	.word	0x40022100
 8004df0:	58026000 	.word	0x58026000
 8004df4:	c7520000 	.word	0xc7520000
 8004df8:	40022300 	.word	0x40022300
 8004dfc:	24000000 	.word	0x24000000
 8004e00:	053e2d63 	.word	0x053e2d63
 8004e04:	c3210000 	.word	0xc3210000
 8004e08:	cb840000 	.word	0xcb840000

08004e0c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a6c      	ldr	r2, [pc, #432]	; (8004fcc <ADC_ConfigureBoostMode+0x1c0>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d004      	beq.n	8004e28 <ADC_ConfigureBoostMode+0x1c>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a6b      	ldr	r2, [pc, #428]	; (8004fd0 <ADC_ConfigureBoostMode+0x1c4>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d109      	bne.n	8004e3c <ADC_ConfigureBoostMode+0x30>
 8004e28:	4b6a      	ldr	r3, [pc, #424]	; (8004fd4 <ADC_ConfigureBoostMode+0x1c8>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	bf14      	ite	ne
 8004e34:	2301      	movne	r3, #1
 8004e36:	2300      	moveq	r3, #0
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	e008      	b.n	8004e4e <ADC_ConfigureBoostMode+0x42>
 8004e3c:	4b66      	ldr	r3, [pc, #408]	; (8004fd8 <ADC_ConfigureBoostMode+0x1cc>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	bf14      	ite	ne
 8004e48:	2301      	movne	r3, #1
 8004e4a:	2300      	moveq	r3, #0
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d01c      	beq.n	8004e8c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004e52:	f005 fcab 	bl	800a7ac <HAL_RCC_GetHCLKFreq>
 8004e56:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e60:	d010      	beq.n	8004e84 <ADC_ConfigureBoostMode+0x78>
 8004e62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e66:	d873      	bhi.n	8004f50 <ADC_ConfigureBoostMode+0x144>
 8004e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e6c:	d002      	beq.n	8004e74 <ADC_ConfigureBoostMode+0x68>
 8004e6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e72:	d16d      	bne.n	8004f50 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	0c1b      	lsrs	r3, r3, #16
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e80:	60fb      	str	r3, [r7, #12]
        break;
 8004e82:	e068      	b.n	8004f56 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	089b      	lsrs	r3, r3, #2
 8004e88:	60fb      	str	r3, [r7, #12]
        break;
 8004e8a:	e064      	b.n	8004f56 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004e8c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004e90:	f04f 0100 	mov.w	r1, #0
 8004e94:	f006 fe86 	bl	800bba4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004e98:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004ea2:	d051      	beq.n	8004f48 <ADC_ConfigureBoostMode+0x13c>
 8004ea4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004ea8:	d854      	bhi.n	8004f54 <ADC_ConfigureBoostMode+0x148>
 8004eaa:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004eae:	d047      	beq.n	8004f40 <ADC_ConfigureBoostMode+0x134>
 8004eb0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004eb4:	d84e      	bhi.n	8004f54 <ADC_ConfigureBoostMode+0x148>
 8004eb6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004eba:	d03d      	beq.n	8004f38 <ADC_ConfigureBoostMode+0x12c>
 8004ebc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004ec0:	d848      	bhi.n	8004f54 <ADC_ConfigureBoostMode+0x148>
 8004ec2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ec6:	d033      	beq.n	8004f30 <ADC_ConfigureBoostMode+0x124>
 8004ec8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ecc:	d842      	bhi.n	8004f54 <ADC_ConfigureBoostMode+0x148>
 8004ece:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004ed2:	d029      	beq.n	8004f28 <ADC_ConfigureBoostMode+0x11c>
 8004ed4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004ed8:	d83c      	bhi.n	8004f54 <ADC_ConfigureBoostMode+0x148>
 8004eda:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004ede:	d01a      	beq.n	8004f16 <ADC_ConfigureBoostMode+0x10a>
 8004ee0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004ee4:	d836      	bhi.n	8004f54 <ADC_ConfigureBoostMode+0x148>
 8004ee6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004eea:	d014      	beq.n	8004f16 <ADC_ConfigureBoostMode+0x10a>
 8004eec:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004ef0:	d830      	bhi.n	8004f54 <ADC_ConfigureBoostMode+0x148>
 8004ef2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ef6:	d00e      	beq.n	8004f16 <ADC_ConfigureBoostMode+0x10a>
 8004ef8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004efc:	d82a      	bhi.n	8004f54 <ADC_ConfigureBoostMode+0x148>
 8004efe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004f02:	d008      	beq.n	8004f16 <ADC_ConfigureBoostMode+0x10a>
 8004f04:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004f08:	d824      	bhi.n	8004f54 <ADC_ConfigureBoostMode+0x148>
 8004f0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f0e:	d002      	beq.n	8004f16 <ADC_ConfigureBoostMode+0x10a>
 8004f10:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f14:	d11e      	bne.n	8004f54 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	0c9b      	lsrs	r3, r3, #18
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f24:	60fb      	str	r3, [r7, #12]
        break;
 8004f26:	e016      	b.n	8004f56 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	091b      	lsrs	r3, r3, #4
 8004f2c:	60fb      	str	r3, [r7, #12]
        break;
 8004f2e:	e012      	b.n	8004f56 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	095b      	lsrs	r3, r3, #5
 8004f34:	60fb      	str	r3, [r7, #12]
        break;
 8004f36:	e00e      	b.n	8004f56 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	099b      	lsrs	r3, r3, #6
 8004f3c:	60fb      	str	r3, [r7, #12]
        break;
 8004f3e:	e00a      	b.n	8004f56 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	09db      	lsrs	r3, r3, #7
 8004f44:	60fb      	str	r3, [r7, #12]
        break;
 8004f46:	e006      	b.n	8004f56 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	0a1b      	lsrs	r3, r3, #8
 8004f4c:	60fb      	str	r3, [r7, #12]
        break;
 8004f4e:	e002      	b.n	8004f56 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004f50:	bf00      	nop
 8004f52:	e000      	b.n	8004f56 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004f54:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	085b      	lsrs	r3, r3, #1
 8004f5a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4a1f      	ldr	r2, [pc, #124]	; (8004fdc <ADC_ConfigureBoostMode+0x1d0>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d808      	bhi.n	8004f76 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689a      	ldr	r2, [r3, #8]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004f72:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004f74:	e025      	b.n	8004fc2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	4a19      	ldr	r2, [pc, #100]	; (8004fe0 <ADC_ConfigureBoostMode+0x1d4>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d80a      	bhi.n	8004f94 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f90:	609a      	str	r2, [r3, #8]
}
 8004f92:	e016      	b.n	8004fc2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4a13      	ldr	r2, [pc, #76]	; (8004fe4 <ADC_ConfigureBoostMode+0x1d8>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d80a      	bhi.n	8004fb2 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fae:	609a      	str	r2, [r3, #8]
}
 8004fb0:	e007      	b.n	8004fc2 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	689a      	ldr	r2, [r3, #8]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004fc0:	609a      	str	r2, [r3, #8]
}
 8004fc2:	bf00      	nop
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	40022000 	.word	0x40022000
 8004fd0:	40022100 	.word	0x40022100
 8004fd4:	40022300 	.word	0x40022300
 8004fd8:	58026300 	.word	0x58026300
 8004fdc:	005f5e10 	.word	0x005f5e10
 8004fe0:	00bebc20 	.word	0x00bebc20
 8004fe4:	017d7840 	.word	0x017d7840

08004fe8 <LL_ADC_IsEnabled>:
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d101      	bne.n	8005000 <LL_ADC_IsEnabled+0x18>
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e000      	b.n	8005002 <LL_ADC_IsEnabled+0x1a>
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <LL_ADC_REG_IsConversionOngoing>:
{
 800500e:	b480      	push	{r7}
 8005010:	b083      	sub	sp, #12
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f003 0304 	and.w	r3, r3, #4
 800501e:	2b04      	cmp	r3, #4
 8005020:	d101      	bne.n	8005026 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005022:	2301      	movs	r3, #1
 8005024:	e000      	b.n	8005028 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005034:	b590      	push	{r4, r7, lr}
 8005036:	b0a3      	sub	sp, #140	; 0x8c
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800503e:	2300      	movs	r3, #0
 8005040:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800504a:	2b01      	cmp	r3, #1
 800504c:	d101      	bne.n	8005052 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800504e:	2302      	movs	r3, #2
 8005050:	e0c1      	b.n	80051d6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800505a:	2300      	movs	r3, #0
 800505c:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800505e:	2300      	movs	r3, #0
 8005060:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a5e      	ldr	r2, [pc, #376]	; (80051e0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d102      	bne.n	8005072 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800506c:	4b5d      	ldr	r3, [pc, #372]	; (80051e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800506e:	60fb      	str	r3, [r7, #12]
 8005070:	e001      	b.n	8005076 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005072:	2300      	movs	r3, #0
 8005074:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10b      	bne.n	8005094 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005080:	f043 0220 	orr.w	r2, r3, #32
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e0a0      	b.n	80051d6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	4618      	mov	r0, r3
 8005098:	f7ff ffb9 	bl	800500e <LL_ADC_REG_IsConversionOngoing>
 800509c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7ff ffb2 	bl	800500e <LL_ADC_REG_IsConversionOngoing>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f040 8081 	bne.w	80051b4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80050b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d17c      	bne.n	80051b4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a48      	ldr	r2, [pc, #288]	; (80051e0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d004      	beq.n	80050ce <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a46      	ldr	r2, [pc, #280]	; (80051e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d101      	bne.n	80050d2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80050ce:	4b46      	ldr	r3, [pc, #280]	; (80051e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80050d0:	e000      	b.n	80050d4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80050d2:	4b46      	ldr	r3, [pc, #280]	; (80051ec <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80050d4:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d039      	beq.n	8005152 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80050de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	431a      	orrs	r2, r3
 80050ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050ee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a3a      	ldr	r2, [pc, #232]	; (80051e0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d004      	beq.n	8005104 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a39      	ldr	r2, [pc, #228]	; (80051e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d10e      	bne.n	8005122 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005104:	4836      	ldr	r0, [pc, #216]	; (80051e0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005106:	f7ff ff6f 	bl	8004fe8 <LL_ADC_IsEnabled>
 800510a:	4604      	mov	r4, r0
 800510c:	4835      	ldr	r0, [pc, #212]	; (80051e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800510e:	f7ff ff6b 	bl	8004fe8 <LL_ADC_IsEnabled>
 8005112:	4603      	mov	r3, r0
 8005114:	4323      	orrs	r3, r4
 8005116:	2b00      	cmp	r3, #0
 8005118:	bf0c      	ite	eq
 800511a:	2301      	moveq	r3, #1
 800511c:	2300      	movne	r3, #0
 800511e:	b2db      	uxtb	r3, r3
 8005120:	e008      	b.n	8005134 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8005122:	4833      	ldr	r0, [pc, #204]	; (80051f0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005124:	f7ff ff60 	bl	8004fe8 <LL_ADC_IsEnabled>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	bf0c      	ite	eq
 800512e:	2301      	moveq	r3, #1
 8005130:	2300      	movne	r3, #0
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b00      	cmp	r3, #0
 8005136:	d047      	beq.n	80051c8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005138:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	4b2d      	ldr	r3, [pc, #180]	; (80051f4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800513e:	4013      	ands	r3, r2
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	6811      	ldr	r1, [r2, #0]
 8005144:	683a      	ldr	r2, [r7, #0]
 8005146:	6892      	ldr	r2, [r2, #8]
 8005148:	430a      	orrs	r2, r1
 800514a:	431a      	orrs	r2, r3
 800514c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800514e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005150:	e03a      	b.n	80051c8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005152:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800515a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800515c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a1f      	ldr	r2, [pc, #124]	; (80051e0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d004      	beq.n	8005172 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a1d      	ldr	r2, [pc, #116]	; (80051e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d10e      	bne.n	8005190 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8005172:	481b      	ldr	r0, [pc, #108]	; (80051e0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005174:	f7ff ff38 	bl	8004fe8 <LL_ADC_IsEnabled>
 8005178:	4604      	mov	r4, r0
 800517a:	481a      	ldr	r0, [pc, #104]	; (80051e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800517c:	f7ff ff34 	bl	8004fe8 <LL_ADC_IsEnabled>
 8005180:	4603      	mov	r3, r0
 8005182:	4323      	orrs	r3, r4
 8005184:	2b00      	cmp	r3, #0
 8005186:	bf0c      	ite	eq
 8005188:	2301      	moveq	r3, #1
 800518a:	2300      	movne	r3, #0
 800518c:	b2db      	uxtb	r3, r3
 800518e:	e008      	b.n	80051a2 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8005190:	4817      	ldr	r0, [pc, #92]	; (80051f0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005192:	f7ff ff29 	bl	8004fe8 <LL_ADC_IsEnabled>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	bf0c      	ite	eq
 800519c:	2301      	moveq	r3, #1
 800519e:	2300      	movne	r3, #0
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d010      	beq.n	80051c8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80051a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80051a8:	689a      	ldr	r2, [r3, #8]
 80051aa:	4b12      	ldr	r3, [pc, #72]	; (80051f4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80051ac:	4013      	ands	r3, r2
 80051ae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80051b0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80051b2:	e009      	b.n	80051c8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051b8:	f043 0220 	orr.w	r2, r3, #32
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80051c6:	e000      	b.n	80051ca <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80051c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80051d2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	378c      	adds	r7, #140	; 0x8c
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd90      	pop	{r4, r7, pc}
 80051de:	bf00      	nop
 80051e0:	40022000 	.word	0x40022000
 80051e4:	40022100 	.word	0x40022100
 80051e8:	40022300 	.word	0x40022300
 80051ec:	58026300 	.word	0x58026300
 80051f0:	58026000 	.word	0x58026000
 80051f4:	fffff0e0 	.word	0xfffff0e0

080051f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f003 0307 	and.w	r3, r3, #7
 8005206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005208:	4b0b      	ldr	r3, [pc, #44]	; (8005238 <__NVIC_SetPriorityGrouping+0x40>)
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005214:	4013      	ands	r3, r2
 8005216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005220:	4b06      	ldr	r3, [pc, #24]	; (800523c <__NVIC_SetPriorityGrouping+0x44>)
 8005222:	4313      	orrs	r3, r2
 8005224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005226:	4a04      	ldr	r2, [pc, #16]	; (8005238 <__NVIC_SetPriorityGrouping+0x40>)
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	60d3      	str	r3, [r2, #12]
}
 800522c:	bf00      	nop
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	e000ed00 	.word	0xe000ed00
 800523c:	05fa0000 	.word	0x05fa0000

08005240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005240:	b480      	push	{r7}
 8005242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005244:	4b04      	ldr	r3, [pc, #16]	; (8005258 <__NVIC_GetPriorityGrouping+0x18>)
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	0a1b      	lsrs	r3, r3, #8
 800524a:	f003 0307 	and.w	r3, r3, #7
}
 800524e:	4618      	mov	r0, r3
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	e000ed00 	.word	0xe000ed00

0800525c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	4603      	mov	r3, r0
 8005264:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005266:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800526a:	2b00      	cmp	r3, #0
 800526c:	db0b      	blt.n	8005286 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800526e:	88fb      	ldrh	r3, [r7, #6]
 8005270:	f003 021f 	and.w	r2, r3, #31
 8005274:	4907      	ldr	r1, [pc, #28]	; (8005294 <__NVIC_EnableIRQ+0x38>)
 8005276:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800527a:	095b      	lsrs	r3, r3, #5
 800527c:	2001      	movs	r0, #1
 800527e:	fa00 f202 	lsl.w	r2, r0, r2
 8005282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005286:	bf00      	nop
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	e000e100 	.word	0xe000e100

08005298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	4603      	mov	r3, r0
 80052a0:	6039      	str	r1, [r7, #0]
 80052a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80052a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	db0a      	blt.n	80052c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	490c      	ldr	r1, [pc, #48]	; (80052e4 <__NVIC_SetPriority+0x4c>)
 80052b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052b6:	0112      	lsls	r2, r2, #4
 80052b8:	b2d2      	uxtb	r2, r2
 80052ba:	440b      	add	r3, r1
 80052bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052c0:	e00a      	b.n	80052d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	4908      	ldr	r1, [pc, #32]	; (80052e8 <__NVIC_SetPriority+0x50>)
 80052c8:	88fb      	ldrh	r3, [r7, #6]
 80052ca:	f003 030f 	and.w	r3, r3, #15
 80052ce:	3b04      	subs	r3, #4
 80052d0:	0112      	lsls	r2, r2, #4
 80052d2:	b2d2      	uxtb	r2, r2
 80052d4:	440b      	add	r3, r1
 80052d6:	761a      	strb	r2, [r3, #24]
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	e000e100 	.word	0xe000e100
 80052e8:	e000ed00 	.word	0xe000ed00

080052ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b089      	sub	sp, #36	; 0x24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f003 0307 	and.w	r3, r3, #7
 80052fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	f1c3 0307 	rsb	r3, r3, #7
 8005306:	2b04      	cmp	r3, #4
 8005308:	bf28      	it	cs
 800530a:	2304      	movcs	r3, #4
 800530c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	3304      	adds	r3, #4
 8005312:	2b06      	cmp	r3, #6
 8005314:	d902      	bls.n	800531c <NVIC_EncodePriority+0x30>
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	3b03      	subs	r3, #3
 800531a:	e000      	b.n	800531e <NVIC_EncodePriority+0x32>
 800531c:	2300      	movs	r3, #0
 800531e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005320:	f04f 32ff 	mov.w	r2, #4294967295
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	fa02 f303 	lsl.w	r3, r2, r3
 800532a:	43da      	mvns	r2, r3
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	401a      	ands	r2, r3
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005334:	f04f 31ff 	mov.w	r1, #4294967295
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	fa01 f303 	lsl.w	r3, r1, r3
 800533e:	43d9      	mvns	r1, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005344:	4313      	orrs	r3, r2
         );
}
 8005346:	4618      	mov	r0, r3
 8005348:	3724      	adds	r7, #36	; 0x24
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
	...

08005354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	3b01      	subs	r3, #1
 8005360:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005364:	d301      	bcc.n	800536a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005366:	2301      	movs	r3, #1
 8005368:	e00f      	b.n	800538a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800536a:	4a0a      	ldr	r2, [pc, #40]	; (8005394 <SysTick_Config+0x40>)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	3b01      	subs	r3, #1
 8005370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005372:	210f      	movs	r1, #15
 8005374:	f04f 30ff 	mov.w	r0, #4294967295
 8005378:	f7ff ff8e 	bl	8005298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800537c:	4b05      	ldr	r3, [pc, #20]	; (8005394 <SysTick_Config+0x40>)
 800537e:	2200      	movs	r2, #0
 8005380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005382:	4b04      	ldr	r3, [pc, #16]	; (8005394 <SysTick_Config+0x40>)
 8005384:	2207      	movs	r2, #7
 8005386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3708      	adds	r7, #8
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	e000e010 	.word	0xe000e010

08005398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f7ff ff29 	bl	80051f8 <__NVIC_SetPriorityGrouping>
}
 80053a6:	bf00      	nop
 80053a8:	3708      	adds	r7, #8
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b086      	sub	sp, #24
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	4603      	mov	r3, r0
 80053b6:	60b9      	str	r1, [r7, #8]
 80053b8:	607a      	str	r2, [r7, #4]
 80053ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80053bc:	f7ff ff40 	bl	8005240 <__NVIC_GetPriorityGrouping>
 80053c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	68b9      	ldr	r1, [r7, #8]
 80053c6:	6978      	ldr	r0, [r7, #20]
 80053c8:	f7ff ff90 	bl	80052ec <NVIC_EncodePriority>
 80053cc:	4602      	mov	r2, r0
 80053ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80053d2:	4611      	mov	r1, r2
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7ff ff5f 	bl	8005298 <__NVIC_SetPriority>
}
 80053da:	bf00      	nop
 80053dc:	3718      	adds	r7, #24
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b082      	sub	sp, #8
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	4603      	mov	r3, r0
 80053ea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7ff ff33 	bl	800525c <__NVIC_EnableIRQ>
}
 80053f6:	bf00      	nop
 80053f8:	3708      	adds	r7, #8
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b082      	sub	sp, #8
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7ff ffa4 	bl	8005354 <SysTick_Config>
 800540c:	4603      	mov	r3, r0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
	...

08005418 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005420:	f7fe fb34 	bl	8003a8c <HAL_GetTick>
 8005424:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e312      	b.n	8005a56 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a66      	ldr	r2, [pc, #408]	; (80055d0 <HAL_DMA_Init+0x1b8>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d04a      	beq.n	80054d0 <HAL_DMA_Init+0xb8>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a65      	ldr	r2, [pc, #404]	; (80055d4 <HAL_DMA_Init+0x1bc>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d045      	beq.n	80054d0 <HAL_DMA_Init+0xb8>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a63      	ldr	r2, [pc, #396]	; (80055d8 <HAL_DMA_Init+0x1c0>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d040      	beq.n	80054d0 <HAL_DMA_Init+0xb8>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a62      	ldr	r2, [pc, #392]	; (80055dc <HAL_DMA_Init+0x1c4>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d03b      	beq.n	80054d0 <HAL_DMA_Init+0xb8>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a60      	ldr	r2, [pc, #384]	; (80055e0 <HAL_DMA_Init+0x1c8>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d036      	beq.n	80054d0 <HAL_DMA_Init+0xb8>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a5f      	ldr	r2, [pc, #380]	; (80055e4 <HAL_DMA_Init+0x1cc>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d031      	beq.n	80054d0 <HAL_DMA_Init+0xb8>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a5d      	ldr	r2, [pc, #372]	; (80055e8 <HAL_DMA_Init+0x1d0>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d02c      	beq.n	80054d0 <HAL_DMA_Init+0xb8>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a5c      	ldr	r2, [pc, #368]	; (80055ec <HAL_DMA_Init+0x1d4>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d027      	beq.n	80054d0 <HAL_DMA_Init+0xb8>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a5a      	ldr	r2, [pc, #360]	; (80055f0 <HAL_DMA_Init+0x1d8>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d022      	beq.n	80054d0 <HAL_DMA_Init+0xb8>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a59      	ldr	r2, [pc, #356]	; (80055f4 <HAL_DMA_Init+0x1dc>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d01d      	beq.n	80054d0 <HAL_DMA_Init+0xb8>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a57      	ldr	r2, [pc, #348]	; (80055f8 <HAL_DMA_Init+0x1e0>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d018      	beq.n	80054d0 <HAL_DMA_Init+0xb8>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a56      	ldr	r2, [pc, #344]	; (80055fc <HAL_DMA_Init+0x1e4>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d013      	beq.n	80054d0 <HAL_DMA_Init+0xb8>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a54      	ldr	r2, [pc, #336]	; (8005600 <HAL_DMA_Init+0x1e8>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d00e      	beq.n	80054d0 <HAL_DMA_Init+0xb8>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a53      	ldr	r2, [pc, #332]	; (8005604 <HAL_DMA_Init+0x1ec>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d009      	beq.n	80054d0 <HAL_DMA_Init+0xb8>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a51      	ldr	r2, [pc, #324]	; (8005608 <HAL_DMA_Init+0x1f0>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d004      	beq.n	80054d0 <HAL_DMA_Init+0xb8>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a50      	ldr	r2, [pc, #320]	; (800560c <HAL_DMA_Init+0x1f4>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d101      	bne.n	80054d4 <HAL_DMA_Init+0xbc>
 80054d0:	2301      	movs	r3, #1
 80054d2:	e000      	b.n	80054d6 <HAL_DMA_Init+0xbe>
 80054d4:	2300      	movs	r3, #0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f000 813c 	beq.w	8005754 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2202      	movs	r2, #2
 80054e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a37      	ldr	r2, [pc, #220]	; (80055d0 <HAL_DMA_Init+0x1b8>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d04a      	beq.n	800558c <HAL_DMA_Init+0x174>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a36      	ldr	r2, [pc, #216]	; (80055d4 <HAL_DMA_Init+0x1bc>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d045      	beq.n	800558c <HAL_DMA_Init+0x174>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a34      	ldr	r2, [pc, #208]	; (80055d8 <HAL_DMA_Init+0x1c0>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d040      	beq.n	800558c <HAL_DMA_Init+0x174>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a33      	ldr	r2, [pc, #204]	; (80055dc <HAL_DMA_Init+0x1c4>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d03b      	beq.n	800558c <HAL_DMA_Init+0x174>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a31      	ldr	r2, [pc, #196]	; (80055e0 <HAL_DMA_Init+0x1c8>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d036      	beq.n	800558c <HAL_DMA_Init+0x174>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a30      	ldr	r2, [pc, #192]	; (80055e4 <HAL_DMA_Init+0x1cc>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d031      	beq.n	800558c <HAL_DMA_Init+0x174>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a2e      	ldr	r2, [pc, #184]	; (80055e8 <HAL_DMA_Init+0x1d0>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d02c      	beq.n	800558c <HAL_DMA_Init+0x174>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a2d      	ldr	r2, [pc, #180]	; (80055ec <HAL_DMA_Init+0x1d4>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d027      	beq.n	800558c <HAL_DMA_Init+0x174>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a2b      	ldr	r2, [pc, #172]	; (80055f0 <HAL_DMA_Init+0x1d8>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d022      	beq.n	800558c <HAL_DMA_Init+0x174>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a2a      	ldr	r2, [pc, #168]	; (80055f4 <HAL_DMA_Init+0x1dc>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d01d      	beq.n	800558c <HAL_DMA_Init+0x174>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a28      	ldr	r2, [pc, #160]	; (80055f8 <HAL_DMA_Init+0x1e0>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d018      	beq.n	800558c <HAL_DMA_Init+0x174>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a27      	ldr	r2, [pc, #156]	; (80055fc <HAL_DMA_Init+0x1e4>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d013      	beq.n	800558c <HAL_DMA_Init+0x174>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a25      	ldr	r2, [pc, #148]	; (8005600 <HAL_DMA_Init+0x1e8>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d00e      	beq.n	800558c <HAL_DMA_Init+0x174>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a24      	ldr	r2, [pc, #144]	; (8005604 <HAL_DMA_Init+0x1ec>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d009      	beq.n	800558c <HAL_DMA_Init+0x174>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a22      	ldr	r2, [pc, #136]	; (8005608 <HAL_DMA_Init+0x1f0>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d004      	beq.n	800558c <HAL_DMA_Init+0x174>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a21      	ldr	r2, [pc, #132]	; (800560c <HAL_DMA_Init+0x1f4>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d108      	bne.n	800559e <HAL_DMA_Init+0x186>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f022 0201 	bic.w	r2, r2, #1
 800559a:	601a      	str	r2, [r3, #0]
 800559c:	e007      	b.n	80055ae <HAL_DMA_Init+0x196>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 0201 	bic.w	r2, r2, #1
 80055ac:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80055ae:	e02f      	b.n	8005610 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055b0:	f7fe fa6c 	bl	8003a8c <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b05      	cmp	r3, #5
 80055bc:	d928      	bls.n	8005610 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2220      	movs	r2, #32
 80055c2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2203      	movs	r2, #3
 80055c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e242      	b.n	8005a56 <HAL_DMA_Init+0x63e>
 80055d0:	40020010 	.word	0x40020010
 80055d4:	40020028 	.word	0x40020028
 80055d8:	40020040 	.word	0x40020040
 80055dc:	40020058 	.word	0x40020058
 80055e0:	40020070 	.word	0x40020070
 80055e4:	40020088 	.word	0x40020088
 80055e8:	400200a0 	.word	0x400200a0
 80055ec:	400200b8 	.word	0x400200b8
 80055f0:	40020410 	.word	0x40020410
 80055f4:	40020428 	.word	0x40020428
 80055f8:	40020440 	.word	0x40020440
 80055fc:	40020458 	.word	0x40020458
 8005600:	40020470 	.word	0x40020470
 8005604:	40020488 	.word	0x40020488
 8005608:	400204a0 	.word	0x400204a0
 800560c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1c8      	bne.n	80055b0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	4b83      	ldr	r3, [pc, #524]	; (8005838 <HAL_DMA_Init+0x420>)
 800562a:	4013      	ands	r3, r2
 800562c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005636:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005642:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800564e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	4313      	orrs	r3, r2
 800565a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005660:	2b04      	cmp	r3, #4
 8005662:	d107      	bne.n	8005674 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566c:	4313      	orrs	r3, r2
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	4313      	orrs	r3, r2
 8005672:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	2b28      	cmp	r3, #40	; 0x28
 800567a:	d903      	bls.n	8005684 <HAL_DMA_Init+0x26c>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	2b2e      	cmp	r3, #46	; 0x2e
 8005682:	d91f      	bls.n	80056c4 <HAL_DMA_Init+0x2ac>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	2b3e      	cmp	r3, #62	; 0x3e
 800568a:	d903      	bls.n	8005694 <HAL_DMA_Init+0x27c>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	2b42      	cmp	r3, #66	; 0x42
 8005692:	d917      	bls.n	80056c4 <HAL_DMA_Init+0x2ac>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	2b46      	cmp	r3, #70	; 0x46
 800569a:	d903      	bls.n	80056a4 <HAL_DMA_Init+0x28c>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	2b48      	cmp	r3, #72	; 0x48
 80056a2:	d90f      	bls.n	80056c4 <HAL_DMA_Init+0x2ac>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	2b4e      	cmp	r3, #78	; 0x4e
 80056aa:	d903      	bls.n	80056b4 <HAL_DMA_Init+0x29c>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	2b52      	cmp	r3, #82	; 0x52
 80056b2:	d907      	bls.n	80056c4 <HAL_DMA_Init+0x2ac>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	2b73      	cmp	r3, #115	; 0x73
 80056ba:	d905      	bls.n	80056c8 <HAL_DMA_Init+0x2b0>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	2b77      	cmp	r3, #119	; 0x77
 80056c2:	d801      	bhi.n	80056c8 <HAL_DMA_Init+0x2b0>
 80056c4:	2301      	movs	r3, #1
 80056c6:	e000      	b.n	80056ca <HAL_DMA_Init+0x2b2>
 80056c8:	2300      	movs	r3, #0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056d4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f023 0307 	bic.w	r3, r3, #7
 80056ec:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fc:	2b04      	cmp	r3, #4
 80056fe:	d117      	bne.n	8005730 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	4313      	orrs	r3, r2
 8005708:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00e      	beq.n	8005730 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f001 fdca 	bl	80072ac <DMA_CheckFifoParam>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d008      	beq.n	8005730 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2240      	movs	r2, #64	; 0x40
 8005722:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e192      	b.n	8005a56 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	697a      	ldr	r2, [r7, #20]
 8005736:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f001 fd05 	bl	8007148 <DMA_CalcBaseAndBitshift>
 800573e:	4603      	mov	r3, r0
 8005740:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005746:	f003 031f 	and.w	r3, r3, #31
 800574a:	223f      	movs	r2, #63	; 0x3f
 800574c:	409a      	lsls	r2, r3
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	609a      	str	r2, [r3, #8]
 8005752:	e0c8      	b.n	80058e6 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a38      	ldr	r2, [pc, #224]	; (800583c <HAL_DMA_Init+0x424>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d022      	beq.n	80057a4 <HAL_DMA_Init+0x38c>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a37      	ldr	r2, [pc, #220]	; (8005840 <HAL_DMA_Init+0x428>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d01d      	beq.n	80057a4 <HAL_DMA_Init+0x38c>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a35      	ldr	r2, [pc, #212]	; (8005844 <HAL_DMA_Init+0x42c>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d018      	beq.n	80057a4 <HAL_DMA_Init+0x38c>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a34      	ldr	r2, [pc, #208]	; (8005848 <HAL_DMA_Init+0x430>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d013      	beq.n	80057a4 <HAL_DMA_Init+0x38c>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a32      	ldr	r2, [pc, #200]	; (800584c <HAL_DMA_Init+0x434>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d00e      	beq.n	80057a4 <HAL_DMA_Init+0x38c>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a31      	ldr	r2, [pc, #196]	; (8005850 <HAL_DMA_Init+0x438>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d009      	beq.n	80057a4 <HAL_DMA_Init+0x38c>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a2f      	ldr	r2, [pc, #188]	; (8005854 <HAL_DMA_Init+0x43c>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d004      	beq.n	80057a4 <HAL_DMA_Init+0x38c>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a2e      	ldr	r2, [pc, #184]	; (8005858 <HAL_DMA_Init+0x440>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d101      	bne.n	80057a8 <HAL_DMA_Init+0x390>
 80057a4:	2301      	movs	r3, #1
 80057a6:	e000      	b.n	80057aa <HAL_DMA_Init+0x392>
 80057a8:	2300      	movs	r3, #0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f000 8092 	beq.w	80058d4 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a21      	ldr	r2, [pc, #132]	; (800583c <HAL_DMA_Init+0x424>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d021      	beq.n	80057fe <HAL_DMA_Init+0x3e6>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a20      	ldr	r2, [pc, #128]	; (8005840 <HAL_DMA_Init+0x428>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d01c      	beq.n	80057fe <HAL_DMA_Init+0x3e6>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a1e      	ldr	r2, [pc, #120]	; (8005844 <HAL_DMA_Init+0x42c>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d017      	beq.n	80057fe <HAL_DMA_Init+0x3e6>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a1d      	ldr	r2, [pc, #116]	; (8005848 <HAL_DMA_Init+0x430>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d012      	beq.n	80057fe <HAL_DMA_Init+0x3e6>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a1b      	ldr	r2, [pc, #108]	; (800584c <HAL_DMA_Init+0x434>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d00d      	beq.n	80057fe <HAL_DMA_Init+0x3e6>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a1a      	ldr	r2, [pc, #104]	; (8005850 <HAL_DMA_Init+0x438>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d008      	beq.n	80057fe <HAL_DMA_Init+0x3e6>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a18      	ldr	r2, [pc, #96]	; (8005854 <HAL_DMA_Init+0x43c>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d003      	beq.n	80057fe <HAL_DMA_Init+0x3e6>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a17      	ldr	r2, [pc, #92]	; (8005858 <HAL_DMA_Init+0x440>)
 80057fc:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2202      	movs	r2, #2
 8005802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	4b10      	ldr	r3, [pc, #64]	; (800585c <HAL_DMA_Init+0x444>)
 800581a:	4013      	ands	r3, r2
 800581c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	2b40      	cmp	r3, #64	; 0x40
 8005824:	d01c      	beq.n	8005860 <HAL_DMA_Init+0x448>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	2b80      	cmp	r3, #128	; 0x80
 800582c:	d102      	bne.n	8005834 <HAL_DMA_Init+0x41c>
 800582e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005832:	e016      	b.n	8005862 <HAL_DMA_Init+0x44a>
 8005834:	2300      	movs	r3, #0
 8005836:	e014      	b.n	8005862 <HAL_DMA_Init+0x44a>
 8005838:	fe10803f 	.word	0xfe10803f
 800583c:	58025408 	.word	0x58025408
 8005840:	5802541c 	.word	0x5802541c
 8005844:	58025430 	.word	0x58025430
 8005848:	58025444 	.word	0x58025444
 800584c:	58025458 	.word	0x58025458
 8005850:	5802546c 	.word	0x5802546c
 8005854:	58025480 	.word	0x58025480
 8005858:	58025494 	.word	0x58025494
 800585c:	fffe000f 	.word	0xfffe000f
 8005860:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	68d2      	ldr	r2, [r2, #12]
 8005866:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005868:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005870:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005878:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005880:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	69db      	ldr	r3, [r3, #28]
 8005886:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005888:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005890:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	4313      	orrs	r3, r2
 8005896:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	461a      	mov	r2, r3
 80058a6:	4b6e      	ldr	r3, [pc, #440]	; (8005a60 <HAL_DMA_Init+0x648>)
 80058a8:	4413      	add	r3, r2
 80058aa:	4a6e      	ldr	r2, [pc, #440]	; (8005a64 <HAL_DMA_Init+0x64c>)
 80058ac:	fba2 2303 	umull	r2, r3, r2, r3
 80058b0:	091b      	lsrs	r3, r3, #4
 80058b2:	009a      	lsls	r2, r3, #2
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f001 fc45 	bl	8007148 <DMA_CalcBaseAndBitshift>
 80058be:	4603      	mov	r3, r0
 80058c0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c6:	f003 031f 	and.w	r3, r3, #31
 80058ca:	2201      	movs	r2, #1
 80058cc:	409a      	lsls	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	605a      	str	r2, [r3, #4]
 80058d2:	e008      	b.n	80058e6 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2240      	movs	r2, #64	; 0x40
 80058d8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2203      	movs	r2, #3
 80058de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e0b7      	b.n	8005a56 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a5f      	ldr	r2, [pc, #380]	; (8005a68 <HAL_DMA_Init+0x650>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d072      	beq.n	80059d6 <HAL_DMA_Init+0x5be>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a5d      	ldr	r2, [pc, #372]	; (8005a6c <HAL_DMA_Init+0x654>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d06d      	beq.n	80059d6 <HAL_DMA_Init+0x5be>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a5c      	ldr	r2, [pc, #368]	; (8005a70 <HAL_DMA_Init+0x658>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d068      	beq.n	80059d6 <HAL_DMA_Init+0x5be>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a5a      	ldr	r2, [pc, #360]	; (8005a74 <HAL_DMA_Init+0x65c>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d063      	beq.n	80059d6 <HAL_DMA_Init+0x5be>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a59      	ldr	r2, [pc, #356]	; (8005a78 <HAL_DMA_Init+0x660>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d05e      	beq.n	80059d6 <HAL_DMA_Init+0x5be>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a57      	ldr	r2, [pc, #348]	; (8005a7c <HAL_DMA_Init+0x664>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d059      	beq.n	80059d6 <HAL_DMA_Init+0x5be>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a56      	ldr	r2, [pc, #344]	; (8005a80 <HAL_DMA_Init+0x668>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d054      	beq.n	80059d6 <HAL_DMA_Init+0x5be>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a54      	ldr	r2, [pc, #336]	; (8005a84 <HAL_DMA_Init+0x66c>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d04f      	beq.n	80059d6 <HAL_DMA_Init+0x5be>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a53      	ldr	r2, [pc, #332]	; (8005a88 <HAL_DMA_Init+0x670>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d04a      	beq.n	80059d6 <HAL_DMA_Init+0x5be>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a51      	ldr	r2, [pc, #324]	; (8005a8c <HAL_DMA_Init+0x674>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d045      	beq.n	80059d6 <HAL_DMA_Init+0x5be>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a50      	ldr	r2, [pc, #320]	; (8005a90 <HAL_DMA_Init+0x678>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d040      	beq.n	80059d6 <HAL_DMA_Init+0x5be>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a4e      	ldr	r2, [pc, #312]	; (8005a94 <HAL_DMA_Init+0x67c>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d03b      	beq.n	80059d6 <HAL_DMA_Init+0x5be>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a4d      	ldr	r2, [pc, #308]	; (8005a98 <HAL_DMA_Init+0x680>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d036      	beq.n	80059d6 <HAL_DMA_Init+0x5be>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a4b      	ldr	r2, [pc, #300]	; (8005a9c <HAL_DMA_Init+0x684>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d031      	beq.n	80059d6 <HAL_DMA_Init+0x5be>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a4a      	ldr	r2, [pc, #296]	; (8005aa0 <HAL_DMA_Init+0x688>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d02c      	beq.n	80059d6 <HAL_DMA_Init+0x5be>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a48      	ldr	r2, [pc, #288]	; (8005aa4 <HAL_DMA_Init+0x68c>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d027      	beq.n	80059d6 <HAL_DMA_Init+0x5be>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a47      	ldr	r2, [pc, #284]	; (8005aa8 <HAL_DMA_Init+0x690>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d022      	beq.n	80059d6 <HAL_DMA_Init+0x5be>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a45      	ldr	r2, [pc, #276]	; (8005aac <HAL_DMA_Init+0x694>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d01d      	beq.n	80059d6 <HAL_DMA_Init+0x5be>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a44      	ldr	r2, [pc, #272]	; (8005ab0 <HAL_DMA_Init+0x698>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d018      	beq.n	80059d6 <HAL_DMA_Init+0x5be>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a42      	ldr	r2, [pc, #264]	; (8005ab4 <HAL_DMA_Init+0x69c>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d013      	beq.n	80059d6 <HAL_DMA_Init+0x5be>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a41      	ldr	r2, [pc, #260]	; (8005ab8 <HAL_DMA_Init+0x6a0>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d00e      	beq.n	80059d6 <HAL_DMA_Init+0x5be>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a3f      	ldr	r2, [pc, #252]	; (8005abc <HAL_DMA_Init+0x6a4>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d009      	beq.n	80059d6 <HAL_DMA_Init+0x5be>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a3e      	ldr	r2, [pc, #248]	; (8005ac0 <HAL_DMA_Init+0x6a8>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d004      	beq.n	80059d6 <HAL_DMA_Init+0x5be>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a3c      	ldr	r2, [pc, #240]	; (8005ac4 <HAL_DMA_Init+0x6ac>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d101      	bne.n	80059da <HAL_DMA_Init+0x5c2>
 80059d6:	2301      	movs	r3, #1
 80059d8:	e000      	b.n	80059dc <HAL_DMA_Init+0x5c4>
 80059da:	2300      	movs	r3, #0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d032      	beq.n	8005a46 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f001 fcdf 	bl	80073a4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	2b80      	cmp	r3, #128	; 0x80
 80059ec:	d102      	bne.n	80059f4 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685a      	ldr	r2, [r3, #4]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059fc:	b2d2      	uxtb	r2, r2
 80059fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005a08:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d010      	beq.n	8005a34 <HAL_DMA_Init+0x61c>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	2b08      	cmp	r3, #8
 8005a18:	d80c      	bhi.n	8005a34 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f001 fd5c 	bl	80074d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a24:	2200      	movs	r2, #0
 8005a26:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005a30:	605a      	str	r2, [r3, #4]
 8005a32:	e008      	b.n	8005a46 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3718      	adds	r7, #24
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	a7fdabf8 	.word	0xa7fdabf8
 8005a64:	cccccccd 	.word	0xcccccccd
 8005a68:	40020010 	.word	0x40020010
 8005a6c:	40020028 	.word	0x40020028
 8005a70:	40020040 	.word	0x40020040
 8005a74:	40020058 	.word	0x40020058
 8005a78:	40020070 	.word	0x40020070
 8005a7c:	40020088 	.word	0x40020088
 8005a80:	400200a0 	.word	0x400200a0
 8005a84:	400200b8 	.word	0x400200b8
 8005a88:	40020410 	.word	0x40020410
 8005a8c:	40020428 	.word	0x40020428
 8005a90:	40020440 	.word	0x40020440
 8005a94:	40020458 	.word	0x40020458
 8005a98:	40020470 	.word	0x40020470
 8005a9c:	40020488 	.word	0x40020488
 8005aa0:	400204a0 	.word	0x400204a0
 8005aa4:	400204b8 	.word	0x400204b8
 8005aa8:	58025408 	.word	0x58025408
 8005aac:	5802541c 	.word	0x5802541c
 8005ab0:	58025430 	.word	0x58025430
 8005ab4:	58025444 	.word	0x58025444
 8005ab8:	58025458 	.word	0x58025458
 8005abc:	5802546c 	.word	0x5802546c
 8005ac0:	58025480 	.word	0x58025480
 8005ac4:	58025494 	.word	0x58025494

08005ac8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b086      	sub	sp, #24
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
 8005ad4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e226      	b.n	8005f32 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d101      	bne.n	8005af2 <HAL_DMA_Start_IT+0x2a>
 8005aee:	2302      	movs	r3, #2
 8005af0:	e21f      	b.n	8005f32 <HAL_DMA_Start_IT+0x46a>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	f040 820a 	bne.w	8005f1c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a68      	ldr	r2, [pc, #416]	; (8005cbc <HAL_DMA_Start_IT+0x1f4>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d04a      	beq.n	8005bb6 <HAL_DMA_Start_IT+0xee>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a66      	ldr	r2, [pc, #408]	; (8005cc0 <HAL_DMA_Start_IT+0x1f8>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d045      	beq.n	8005bb6 <HAL_DMA_Start_IT+0xee>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a65      	ldr	r2, [pc, #404]	; (8005cc4 <HAL_DMA_Start_IT+0x1fc>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d040      	beq.n	8005bb6 <HAL_DMA_Start_IT+0xee>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a63      	ldr	r2, [pc, #396]	; (8005cc8 <HAL_DMA_Start_IT+0x200>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d03b      	beq.n	8005bb6 <HAL_DMA_Start_IT+0xee>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a62      	ldr	r2, [pc, #392]	; (8005ccc <HAL_DMA_Start_IT+0x204>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d036      	beq.n	8005bb6 <HAL_DMA_Start_IT+0xee>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a60      	ldr	r2, [pc, #384]	; (8005cd0 <HAL_DMA_Start_IT+0x208>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d031      	beq.n	8005bb6 <HAL_DMA_Start_IT+0xee>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a5f      	ldr	r2, [pc, #380]	; (8005cd4 <HAL_DMA_Start_IT+0x20c>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d02c      	beq.n	8005bb6 <HAL_DMA_Start_IT+0xee>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a5d      	ldr	r2, [pc, #372]	; (8005cd8 <HAL_DMA_Start_IT+0x210>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d027      	beq.n	8005bb6 <HAL_DMA_Start_IT+0xee>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a5c      	ldr	r2, [pc, #368]	; (8005cdc <HAL_DMA_Start_IT+0x214>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d022      	beq.n	8005bb6 <HAL_DMA_Start_IT+0xee>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a5a      	ldr	r2, [pc, #360]	; (8005ce0 <HAL_DMA_Start_IT+0x218>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d01d      	beq.n	8005bb6 <HAL_DMA_Start_IT+0xee>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a59      	ldr	r2, [pc, #356]	; (8005ce4 <HAL_DMA_Start_IT+0x21c>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d018      	beq.n	8005bb6 <HAL_DMA_Start_IT+0xee>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a57      	ldr	r2, [pc, #348]	; (8005ce8 <HAL_DMA_Start_IT+0x220>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d013      	beq.n	8005bb6 <HAL_DMA_Start_IT+0xee>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a56      	ldr	r2, [pc, #344]	; (8005cec <HAL_DMA_Start_IT+0x224>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d00e      	beq.n	8005bb6 <HAL_DMA_Start_IT+0xee>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a54      	ldr	r2, [pc, #336]	; (8005cf0 <HAL_DMA_Start_IT+0x228>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d009      	beq.n	8005bb6 <HAL_DMA_Start_IT+0xee>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a53      	ldr	r2, [pc, #332]	; (8005cf4 <HAL_DMA_Start_IT+0x22c>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d004      	beq.n	8005bb6 <HAL_DMA_Start_IT+0xee>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a51      	ldr	r2, [pc, #324]	; (8005cf8 <HAL_DMA_Start_IT+0x230>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d108      	bne.n	8005bc8 <HAL_DMA_Start_IT+0x100>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f022 0201 	bic.w	r2, r2, #1
 8005bc4:	601a      	str	r2, [r3, #0]
 8005bc6:	e007      	b.n	8005bd8 <HAL_DMA_Start_IT+0x110>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f022 0201 	bic.w	r2, r2, #1
 8005bd6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	68b9      	ldr	r1, [r7, #8]
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f001 f906 	bl	8006df0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a34      	ldr	r2, [pc, #208]	; (8005cbc <HAL_DMA_Start_IT+0x1f4>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d04a      	beq.n	8005c84 <HAL_DMA_Start_IT+0x1bc>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a33      	ldr	r2, [pc, #204]	; (8005cc0 <HAL_DMA_Start_IT+0x1f8>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d045      	beq.n	8005c84 <HAL_DMA_Start_IT+0x1bc>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a31      	ldr	r2, [pc, #196]	; (8005cc4 <HAL_DMA_Start_IT+0x1fc>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d040      	beq.n	8005c84 <HAL_DMA_Start_IT+0x1bc>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a30      	ldr	r2, [pc, #192]	; (8005cc8 <HAL_DMA_Start_IT+0x200>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d03b      	beq.n	8005c84 <HAL_DMA_Start_IT+0x1bc>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a2e      	ldr	r2, [pc, #184]	; (8005ccc <HAL_DMA_Start_IT+0x204>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d036      	beq.n	8005c84 <HAL_DMA_Start_IT+0x1bc>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a2d      	ldr	r2, [pc, #180]	; (8005cd0 <HAL_DMA_Start_IT+0x208>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d031      	beq.n	8005c84 <HAL_DMA_Start_IT+0x1bc>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a2b      	ldr	r2, [pc, #172]	; (8005cd4 <HAL_DMA_Start_IT+0x20c>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d02c      	beq.n	8005c84 <HAL_DMA_Start_IT+0x1bc>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a2a      	ldr	r2, [pc, #168]	; (8005cd8 <HAL_DMA_Start_IT+0x210>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d027      	beq.n	8005c84 <HAL_DMA_Start_IT+0x1bc>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a28      	ldr	r2, [pc, #160]	; (8005cdc <HAL_DMA_Start_IT+0x214>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d022      	beq.n	8005c84 <HAL_DMA_Start_IT+0x1bc>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a27      	ldr	r2, [pc, #156]	; (8005ce0 <HAL_DMA_Start_IT+0x218>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d01d      	beq.n	8005c84 <HAL_DMA_Start_IT+0x1bc>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a25      	ldr	r2, [pc, #148]	; (8005ce4 <HAL_DMA_Start_IT+0x21c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d018      	beq.n	8005c84 <HAL_DMA_Start_IT+0x1bc>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a24      	ldr	r2, [pc, #144]	; (8005ce8 <HAL_DMA_Start_IT+0x220>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d013      	beq.n	8005c84 <HAL_DMA_Start_IT+0x1bc>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a22      	ldr	r2, [pc, #136]	; (8005cec <HAL_DMA_Start_IT+0x224>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d00e      	beq.n	8005c84 <HAL_DMA_Start_IT+0x1bc>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a21      	ldr	r2, [pc, #132]	; (8005cf0 <HAL_DMA_Start_IT+0x228>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d009      	beq.n	8005c84 <HAL_DMA_Start_IT+0x1bc>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a1f      	ldr	r2, [pc, #124]	; (8005cf4 <HAL_DMA_Start_IT+0x22c>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d004      	beq.n	8005c84 <HAL_DMA_Start_IT+0x1bc>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a1e      	ldr	r2, [pc, #120]	; (8005cf8 <HAL_DMA_Start_IT+0x230>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d101      	bne.n	8005c88 <HAL_DMA_Start_IT+0x1c0>
 8005c84:	2301      	movs	r3, #1
 8005c86:	e000      	b.n	8005c8a <HAL_DMA_Start_IT+0x1c2>
 8005c88:	2300      	movs	r3, #0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d036      	beq.n	8005cfc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f023 021e 	bic.w	r2, r3, #30
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f042 0216 	orr.w	r2, r2, #22
 8005ca0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d03e      	beq.n	8005d28 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f042 0208 	orr.w	r2, r2, #8
 8005cb8:	601a      	str	r2, [r3, #0]
 8005cba:	e035      	b.n	8005d28 <HAL_DMA_Start_IT+0x260>
 8005cbc:	40020010 	.word	0x40020010
 8005cc0:	40020028 	.word	0x40020028
 8005cc4:	40020040 	.word	0x40020040
 8005cc8:	40020058 	.word	0x40020058
 8005ccc:	40020070 	.word	0x40020070
 8005cd0:	40020088 	.word	0x40020088
 8005cd4:	400200a0 	.word	0x400200a0
 8005cd8:	400200b8 	.word	0x400200b8
 8005cdc:	40020410 	.word	0x40020410
 8005ce0:	40020428 	.word	0x40020428
 8005ce4:	40020440 	.word	0x40020440
 8005ce8:	40020458 	.word	0x40020458
 8005cec:	40020470 	.word	0x40020470
 8005cf0:	40020488 	.word	0x40020488
 8005cf4:	400204a0 	.word	0x400204a0
 8005cf8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f023 020e 	bic.w	r2, r3, #14
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f042 020a 	orr.w	r2, r2, #10
 8005d0e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d007      	beq.n	8005d28 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f042 0204 	orr.w	r2, r2, #4
 8005d26:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a83      	ldr	r2, [pc, #524]	; (8005f3c <HAL_DMA_Start_IT+0x474>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d072      	beq.n	8005e18 <HAL_DMA_Start_IT+0x350>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a82      	ldr	r2, [pc, #520]	; (8005f40 <HAL_DMA_Start_IT+0x478>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d06d      	beq.n	8005e18 <HAL_DMA_Start_IT+0x350>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a80      	ldr	r2, [pc, #512]	; (8005f44 <HAL_DMA_Start_IT+0x47c>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d068      	beq.n	8005e18 <HAL_DMA_Start_IT+0x350>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a7f      	ldr	r2, [pc, #508]	; (8005f48 <HAL_DMA_Start_IT+0x480>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d063      	beq.n	8005e18 <HAL_DMA_Start_IT+0x350>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a7d      	ldr	r2, [pc, #500]	; (8005f4c <HAL_DMA_Start_IT+0x484>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d05e      	beq.n	8005e18 <HAL_DMA_Start_IT+0x350>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a7c      	ldr	r2, [pc, #496]	; (8005f50 <HAL_DMA_Start_IT+0x488>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d059      	beq.n	8005e18 <HAL_DMA_Start_IT+0x350>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a7a      	ldr	r2, [pc, #488]	; (8005f54 <HAL_DMA_Start_IT+0x48c>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d054      	beq.n	8005e18 <HAL_DMA_Start_IT+0x350>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a79      	ldr	r2, [pc, #484]	; (8005f58 <HAL_DMA_Start_IT+0x490>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d04f      	beq.n	8005e18 <HAL_DMA_Start_IT+0x350>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a77      	ldr	r2, [pc, #476]	; (8005f5c <HAL_DMA_Start_IT+0x494>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d04a      	beq.n	8005e18 <HAL_DMA_Start_IT+0x350>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a76      	ldr	r2, [pc, #472]	; (8005f60 <HAL_DMA_Start_IT+0x498>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d045      	beq.n	8005e18 <HAL_DMA_Start_IT+0x350>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a74      	ldr	r2, [pc, #464]	; (8005f64 <HAL_DMA_Start_IT+0x49c>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d040      	beq.n	8005e18 <HAL_DMA_Start_IT+0x350>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a73      	ldr	r2, [pc, #460]	; (8005f68 <HAL_DMA_Start_IT+0x4a0>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d03b      	beq.n	8005e18 <HAL_DMA_Start_IT+0x350>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a71      	ldr	r2, [pc, #452]	; (8005f6c <HAL_DMA_Start_IT+0x4a4>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d036      	beq.n	8005e18 <HAL_DMA_Start_IT+0x350>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a70      	ldr	r2, [pc, #448]	; (8005f70 <HAL_DMA_Start_IT+0x4a8>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d031      	beq.n	8005e18 <HAL_DMA_Start_IT+0x350>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a6e      	ldr	r2, [pc, #440]	; (8005f74 <HAL_DMA_Start_IT+0x4ac>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d02c      	beq.n	8005e18 <HAL_DMA_Start_IT+0x350>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a6d      	ldr	r2, [pc, #436]	; (8005f78 <HAL_DMA_Start_IT+0x4b0>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d027      	beq.n	8005e18 <HAL_DMA_Start_IT+0x350>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a6b      	ldr	r2, [pc, #428]	; (8005f7c <HAL_DMA_Start_IT+0x4b4>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d022      	beq.n	8005e18 <HAL_DMA_Start_IT+0x350>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a6a      	ldr	r2, [pc, #424]	; (8005f80 <HAL_DMA_Start_IT+0x4b8>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d01d      	beq.n	8005e18 <HAL_DMA_Start_IT+0x350>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a68      	ldr	r2, [pc, #416]	; (8005f84 <HAL_DMA_Start_IT+0x4bc>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d018      	beq.n	8005e18 <HAL_DMA_Start_IT+0x350>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a67      	ldr	r2, [pc, #412]	; (8005f88 <HAL_DMA_Start_IT+0x4c0>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d013      	beq.n	8005e18 <HAL_DMA_Start_IT+0x350>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a65      	ldr	r2, [pc, #404]	; (8005f8c <HAL_DMA_Start_IT+0x4c4>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d00e      	beq.n	8005e18 <HAL_DMA_Start_IT+0x350>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a64      	ldr	r2, [pc, #400]	; (8005f90 <HAL_DMA_Start_IT+0x4c8>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d009      	beq.n	8005e18 <HAL_DMA_Start_IT+0x350>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a62      	ldr	r2, [pc, #392]	; (8005f94 <HAL_DMA_Start_IT+0x4cc>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d004      	beq.n	8005e18 <HAL_DMA_Start_IT+0x350>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a61      	ldr	r2, [pc, #388]	; (8005f98 <HAL_DMA_Start_IT+0x4d0>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d101      	bne.n	8005e1c <HAL_DMA_Start_IT+0x354>
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e000      	b.n	8005e1e <HAL_DMA_Start_IT+0x356>
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d01a      	beq.n	8005e58 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d007      	beq.n	8005e40 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e3e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d007      	beq.n	8005e58 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e56:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a37      	ldr	r2, [pc, #220]	; (8005f3c <HAL_DMA_Start_IT+0x474>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d04a      	beq.n	8005ef8 <HAL_DMA_Start_IT+0x430>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a36      	ldr	r2, [pc, #216]	; (8005f40 <HAL_DMA_Start_IT+0x478>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d045      	beq.n	8005ef8 <HAL_DMA_Start_IT+0x430>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a34      	ldr	r2, [pc, #208]	; (8005f44 <HAL_DMA_Start_IT+0x47c>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d040      	beq.n	8005ef8 <HAL_DMA_Start_IT+0x430>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a33      	ldr	r2, [pc, #204]	; (8005f48 <HAL_DMA_Start_IT+0x480>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d03b      	beq.n	8005ef8 <HAL_DMA_Start_IT+0x430>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a31      	ldr	r2, [pc, #196]	; (8005f4c <HAL_DMA_Start_IT+0x484>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d036      	beq.n	8005ef8 <HAL_DMA_Start_IT+0x430>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a30      	ldr	r2, [pc, #192]	; (8005f50 <HAL_DMA_Start_IT+0x488>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d031      	beq.n	8005ef8 <HAL_DMA_Start_IT+0x430>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a2e      	ldr	r2, [pc, #184]	; (8005f54 <HAL_DMA_Start_IT+0x48c>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d02c      	beq.n	8005ef8 <HAL_DMA_Start_IT+0x430>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a2d      	ldr	r2, [pc, #180]	; (8005f58 <HAL_DMA_Start_IT+0x490>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d027      	beq.n	8005ef8 <HAL_DMA_Start_IT+0x430>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a2b      	ldr	r2, [pc, #172]	; (8005f5c <HAL_DMA_Start_IT+0x494>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d022      	beq.n	8005ef8 <HAL_DMA_Start_IT+0x430>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a2a      	ldr	r2, [pc, #168]	; (8005f60 <HAL_DMA_Start_IT+0x498>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d01d      	beq.n	8005ef8 <HAL_DMA_Start_IT+0x430>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a28      	ldr	r2, [pc, #160]	; (8005f64 <HAL_DMA_Start_IT+0x49c>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d018      	beq.n	8005ef8 <HAL_DMA_Start_IT+0x430>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a27      	ldr	r2, [pc, #156]	; (8005f68 <HAL_DMA_Start_IT+0x4a0>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d013      	beq.n	8005ef8 <HAL_DMA_Start_IT+0x430>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a25      	ldr	r2, [pc, #148]	; (8005f6c <HAL_DMA_Start_IT+0x4a4>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d00e      	beq.n	8005ef8 <HAL_DMA_Start_IT+0x430>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a24      	ldr	r2, [pc, #144]	; (8005f70 <HAL_DMA_Start_IT+0x4a8>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d009      	beq.n	8005ef8 <HAL_DMA_Start_IT+0x430>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a22      	ldr	r2, [pc, #136]	; (8005f74 <HAL_DMA_Start_IT+0x4ac>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d004      	beq.n	8005ef8 <HAL_DMA_Start_IT+0x430>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a21      	ldr	r2, [pc, #132]	; (8005f78 <HAL_DMA_Start_IT+0x4b0>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d108      	bne.n	8005f0a <HAL_DMA_Start_IT+0x442>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f042 0201 	orr.w	r2, r2, #1
 8005f06:	601a      	str	r2, [r3, #0]
 8005f08:	e012      	b.n	8005f30 <HAL_DMA_Start_IT+0x468>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f042 0201 	orr.w	r2, r2, #1
 8005f18:	601a      	str	r2, [r3, #0]
 8005f1a:	e009      	b.n	8005f30 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f22:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3718      	adds	r7, #24
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	40020010 	.word	0x40020010
 8005f40:	40020028 	.word	0x40020028
 8005f44:	40020040 	.word	0x40020040
 8005f48:	40020058 	.word	0x40020058
 8005f4c:	40020070 	.word	0x40020070
 8005f50:	40020088 	.word	0x40020088
 8005f54:	400200a0 	.word	0x400200a0
 8005f58:	400200b8 	.word	0x400200b8
 8005f5c:	40020410 	.word	0x40020410
 8005f60:	40020428 	.word	0x40020428
 8005f64:	40020440 	.word	0x40020440
 8005f68:	40020458 	.word	0x40020458
 8005f6c:	40020470 	.word	0x40020470
 8005f70:	40020488 	.word	0x40020488
 8005f74:	400204a0 	.word	0x400204a0
 8005f78:	400204b8 	.word	0x400204b8
 8005f7c:	58025408 	.word	0x58025408
 8005f80:	5802541c 	.word	0x5802541c
 8005f84:	58025430 	.word	0x58025430
 8005f88:	58025444 	.word	0x58025444
 8005f8c:	58025458 	.word	0x58025458
 8005f90:	5802546c 	.word	0x5802546c
 8005f94:	58025480 	.word	0x58025480
 8005f98:	58025494 	.word	0x58025494

08005f9c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b08a      	sub	sp, #40	; 0x28
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005fa8:	4b67      	ldr	r3, [pc, #412]	; (8006148 <HAL_DMA_IRQHandler+0x1ac>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a67      	ldr	r2, [pc, #412]	; (800614c <HAL_DMA_IRQHandler+0x1b0>)
 8005fae:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb2:	0a9b      	lsrs	r3, r3, #10
 8005fb4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fba:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fc0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005fc2:	6a3b      	ldr	r3, [r7, #32]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a5f      	ldr	r2, [pc, #380]	; (8006150 <HAL_DMA_IRQHandler+0x1b4>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d04a      	beq.n	800606e <HAL_DMA_IRQHandler+0xd2>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a5d      	ldr	r2, [pc, #372]	; (8006154 <HAL_DMA_IRQHandler+0x1b8>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d045      	beq.n	800606e <HAL_DMA_IRQHandler+0xd2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a5c      	ldr	r2, [pc, #368]	; (8006158 <HAL_DMA_IRQHandler+0x1bc>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d040      	beq.n	800606e <HAL_DMA_IRQHandler+0xd2>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a5a      	ldr	r2, [pc, #360]	; (800615c <HAL_DMA_IRQHandler+0x1c0>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d03b      	beq.n	800606e <HAL_DMA_IRQHandler+0xd2>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a59      	ldr	r2, [pc, #356]	; (8006160 <HAL_DMA_IRQHandler+0x1c4>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d036      	beq.n	800606e <HAL_DMA_IRQHandler+0xd2>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a57      	ldr	r2, [pc, #348]	; (8006164 <HAL_DMA_IRQHandler+0x1c8>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d031      	beq.n	800606e <HAL_DMA_IRQHandler+0xd2>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a56      	ldr	r2, [pc, #344]	; (8006168 <HAL_DMA_IRQHandler+0x1cc>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d02c      	beq.n	800606e <HAL_DMA_IRQHandler+0xd2>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a54      	ldr	r2, [pc, #336]	; (800616c <HAL_DMA_IRQHandler+0x1d0>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d027      	beq.n	800606e <HAL_DMA_IRQHandler+0xd2>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a53      	ldr	r2, [pc, #332]	; (8006170 <HAL_DMA_IRQHandler+0x1d4>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d022      	beq.n	800606e <HAL_DMA_IRQHandler+0xd2>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a51      	ldr	r2, [pc, #324]	; (8006174 <HAL_DMA_IRQHandler+0x1d8>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d01d      	beq.n	800606e <HAL_DMA_IRQHandler+0xd2>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a50      	ldr	r2, [pc, #320]	; (8006178 <HAL_DMA_IRQHandler+0x1dc>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d018      	beq.n	800606e <HAL_DMA_IRQHandler+0xd2>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a4e      	ldr	r2, [pc, #312]	; (800617c <HAL_DMA_IRQHandler+0x1e0>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d013      	beq.n	800606e <HAL_DMA_IRQHandler+0xd2>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a4d      	ldr	r2, [pc, #308]	; (8006180 <HAL_DMA_IRQHandler+0x1e4>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d00e      	beq.n	800606e <HAL_DMA_IRQHandler+0xd2>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a4b      	ldr	r2, [pc, #300]	; (8006184 <HAL_DMA_IRQHandler+0x1e8>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d009      	beq.n	800606e <HAL_DMA_IRQHandler+0xd2>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a4a      	ldr	r2, [pc, #296]	; (8006188 <HAL_DMA_IRQHandler+0x1ec>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d004      	beq.n	800606e <HAL_DMA_IRQHandler+0xd2>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a48      	ldr	r2, [pc, #288]	; (800618c <HAL_DMA_IRQHandler+0x1f0>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d101      	bne.n	8006072 <HAL_DMA_IRQHandler+0xd6>
 800606e:	2301      	movs	r3, #1
 8006070:	e000      	b.n	8006074 <HAL_DMA_IRQHandler+0xd8>
 8006072:	2300      	movs	r3, #0
 8006074:	2b00      	cmp	r3, #0
 8006076:	f000 842b 	beq.w	80068d0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800607e:	f003 031f 	and.w	r3, r3, #31
 8006082:	2208      	movs	r2, #8
 8006084:	409a      	lsls	r2, r3
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	4013      	ands	r3, r2
 800608a:	2b00      	cmp	r3, #0
 800608c:	f000 80a2 	beq.w	80061d4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a2e      	ldr	r2, [pc, #184]	; (8006150 <HAL_DMA_IRQHandler+0x1b4>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d04a      	beq.n	8006130 <HAL_DMA_IRQHandler+0x194>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a2d      	ldr	r2, [pc, #180]	; (8006154 <HAL_DMA_IRQHandler+0x1b8>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d045      	beq.n	8006130 <HAL_DMA_IRQHandler+0x194>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a2b      	ldr	r2, [pc, #172]	; (8006158 <HAL_DMA_IRQHandler+0x1bc>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d040      	beq.n	8006130 <HAL_DMA_IRQHandler+0x194>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a2a      	ldr	r2, [pc, #168]	; (800615c <HAL_DMA_IRQHandler+0x1c0>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d03b      	beq.n	8006130 <HAL_DMA_IRQHandler+0x194>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a28      	ldr	r2, [pc, #160]	; (8006160 <HAL_DMA_IRQHandler+0x1c4>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d036      	beq.n	8006130 <HAL_DMA_IRQHandler+0x194>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a27      	ldr	r2, [pc, #156]	; (8006164 <HAL_DMA_IRQHandler+0x1c8>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d031      	beq.n	8006130 <HAL_DMA_IRQHandler+0x194>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a25      	ldr	r2, [pc, #148]	; (8006168 <HAL_DMA_IRQHandler+0x1cc>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d02c      	beq.n	8006130 <HAL_DMA_IRQHandler+0x194>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a24      	ldr	r2, [pc, #144]	; (800616c <HAL_DMA_IRQHandler+0x1d0>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d027      	beq.n	8006130 <HAL_DMA_IRQHandler+0x194>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a22      	ldr	r2, [pc, #136]	; (8006170 <HAL_DMA_IRQHandler+0x1d4>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d022      	beq.n	8006130 <HAL_DMA_IRQHandler+0x194>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a21      	ldr	r2, [pc, #132]	; (8006174 <HAL_DMA_IRQHandler+0x1d8>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d01d      	beq.n	8006130 <HAL_DMA_IRQHandler+0x194>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a1f      	ldr	r2, [pc, #124]	; (8006178 <HAL_DMA_IRQHandler+0x1dc>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d018      	beq.n	8006130 <HAL_DMA_IRQHandler+0x194>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a1e      	ldr	r2, [pc, #120]	; (800617c <HAL_DMA_IRQHandler+0x1e0>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d013      	beq.n	8006130 <HAL_DMA_IRQHandler+0x194>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a1c      	ldr	r2, [pc, #112]	; (8006180 <HAL_DMA_IRQHandler+0x1e4>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d00e      	beq.n	8006130 <HAL_DMA_IRQHandler+0x194>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a1b      	ldr	r2, [pc, #108]	; (8006184 <HAL_DMA_IRQHandler+0x1e8>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d009      	beq.n	8006130 <HAL_DMA_IRQHandler+0x194>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a19      	ldr	r2, [pc, #100]	; (8006188 <HAL_DMA_IRQHandler+0x1ec>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d004      	beq.n	8006130 <HAL_DMA_IRQHandler+0x194>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a18      	ldr	r2, [pc, #96]	; (800618c <HAL_DMA_IRQHandler+0x1f0>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d12f      	bne.n	8006190 <HAL_DMA_IRQHandler+0x1f4>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0304 	and.w	r3, r3, #4
 800613a:	2b00      	cmp	r3, #0
 800613c:	bf14      	ite	ne
 800613e:	2301      	movne	r3, #1
 8006140:	2300      	moveq	r3, #0
 8006142:	b2db      	uxtb	r3, r3
 8006144:	e02e      	b.n	80061a4 <HAL_DMA_IRQHandler+0x208>
 8006146:	bf00      	nop
 8006148:	24000000 	.word	0x24000000
 800614c:	1b4e81b5 	.word	0x1b4e81b5
 8006150:	40020010 	.word	0x40020010
 8006154:	40020028 	.word	0x40020028
 8006158:	40020040 	.word	0x40020040
 800615c:	40020058 	.word	0x40020058
 8006160:	40020070 	.word	0x40020070
 8006164:	40020088 	.word	0x40020088
 8006168:	400200a0 	.word	0x400200a0
 800616c:	400200b8 	.word	0x400200b8
 8006170:	40020410 	.word	0x40020410
 8006174:	40020428 	.word	0x40020428
 8006178:	40020440 	.word	0x40020440
 800617c:	40020458 	.word	0x40020458
 8006180:	40020470 	.word	0x40020470
 8006184:	40020488 	.word	0x40020488
 8006188:	400204a0 	.word	0x400204a0
 800618c:	400204b8 	.word	0x400204b8
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0308 	and.w	r3, r3, #8
 800619a:	2b00      	cmp	r3, #0
 800619c:	bf14      	ite	ne
 800619e:	2301      	movne	r3, #1
 80061a0:	2300      	moveq	r3, #0
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d015      	beq.n	80061d4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f022 0204 	bic.w	r2, r2, #4
 80061b6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061bc:	f003 031f 	and.w	r3, r3, #31
 80061c0:	2208      	movs	r2, #8
 80061c2:	409a      	lsls	r2, r3
 80061c4:	6a3b      	ldr	r3, [r7, #32]
 80061c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061cc:	f043 0201 	orr.w	r2, r3, #1
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061d8:	f003 031f 	and.w	r3, r3, #31
 80061dc:	69ba      	ldr	r2, [r7, #24]
 80061de:	fa22 f303 	lsr.w	r3, r2, r3
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d06e      	beq.n	80062c8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a69      	ldr	r2, [pc, #420]	; (8006394 <HAL_DMA_IRQHandler+0x3f8>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d04a      	beq.n	800628a <HAL_DMA_IRQHandler+0x2ee>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a67      	ldr	r2, [pc, #412]	; (8006398 <HAL_DMA_IRQHandler+0x3fc>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d045      	beq.n	800628a <HAL_DMA_IRQHandler+0x2ee>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a66      	ldr	r2, [pc, #408]	; (800639c <HAL_DMA_IRQHandler+0x400>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d040      	beq.n	800628a <HAL_DMA_IRQHandler+0x2ee>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a64      	ldr	r2, [pc, #400]	; (80063a0 <HAL_DMA_IRQHandler+0x404>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d03b      	beq.n	800628a <HAL_DMA_IRQHandler+0x2ee>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a63      	ldr	r2, [pc, #396]	; (80063a4 <HAL_DMA_IRQHandler+0x408>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d036      	beq.n	800628a <HAL_DMA_IRQHandler+0x2ee>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a61      	ldr	r2, [pc, #388]	; (80063a8 <HAL_DMA_IRQHandler+0x40c>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d031      	beq.n	800628a <HAL_DMA_IRQHandler+0x2ee>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a60      	ldr	r2, [pc, #384]	; (80063ac <HAL_DMA_IRQHandler+0x410>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d02c      	beq.n	800628a <HAL_DMA_IRQHandler+0x2ee>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a5e      	ldr	r2, [pc, #376]	; (80063b0 <HAL_DMA_IRQHandler+0x414>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d027      	beq.n	800628a <HAL_DMA_IRQHandler+0x2ee>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a5d      	ldr	r2, [pc, #372]	; (80063b4 <HAL_DMA_IRQHandler+0x418>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d022      	beq.n	800628a <HAL_DMA_IRQHandler+0x2ee>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a5b      	ldr	r2, [pc, #364]	; (80063b8 <HAL_DMA_IRQHandler+0x41c>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d01d      	beq.n	800628a <HAL_DMA_IRQHandler+0x2ee>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a5a      	ldr	r2, [pc, #360]	; (80063bc <HAL_DMA_IRQHandler+0x420>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d018      	beq.n	800628a <HAL_DMA_IRQHandler+0x2ee>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a58      	ldr	r2, [pc, #352]	; (80063c0 <HAL_DMA_IRQHandler+0x424>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d013      	beq.n	800628a <HAL_DMA_IRQHandler+0x2ee>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a57      	ldr	r2, [pc, #348]	; (80063c4 <HAL_DMA_IRQHandler+0x428>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d00e      	beq.n	800628a <HAL_DMA_IRQHandler+0x2ee>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a55      	ldr	r2, [pc, #340]	; (80063c8 <HAL_DMA_IRQHandler+0x42c>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d009      	beq.n	800628a <HAL_DMA_IRQHandler+0x2ee>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a54      	ldr	r2, [pc, #336]	; (80063cc <HAL_DMA_IRQHandler+0x430>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d004      	beq.n	800628a <HAL_DMA_IRQHandler+0x2ee>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a52      	ldr	r2, [pc, #328]	; (80063d0 <HAL_DMA_IRQHandler+0x434>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d10a      	bne.n	80062a0 <HAL_DMA_IRQHandler+0x304>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	695b      	ldr	r3, [r3, #20]
 8006290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006294:	2b00      	cmp	r3, #0
 8006296:	bf14      	ite	ne
 8006298:	2301      	movne	r3, #1
 800629a:	2300      	moveq	r3, #0
 800629c:	b2db      	uxtb	r3, r3
 800629e:	e003      	b.n	80062a8 <HAL_DMA_IRQHandler+0x30c>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2300      	movs	r3, #0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00d      	beq.n	80062c8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062b0:	f003 031f 	and.w	r3, r3, #31
 80062b4:	2201      	movs	r2, #1
 80062b6:	409a      	lsls	r2, r3
 80062b8:	6a3b      	ldr	r3, [r7, #32]
 80062ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c0:	f043 0202 	orr.w	r2, r3, #2
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062cc:	f003 031f 	and.w	r3, r3, #31
 80062d0:	2204      	movs	r2, #4
 80062d2:	409a      	lsls	r2, r3
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	4013      	ands	r3, r2
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f000 808f 	beq.w	80063fc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a2c      	ldr	r2, [pc, #176]	; (8006394 <HAL_DMA_IRQHandler+0x3f8>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d04a      	beq.n	800637e <HAL_DMA_IRQHandler+0x3e2>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a2a      	ldr	r2, [pc, #168]	; (8006398 <HAL_DMA_IRQHandler+0x3fc>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d045      	beq.n	800637e <HAL_DMA_IRQHandler+0x3e2>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a29      	ldr	r2, [pc, #164]	; (800639c <HAL_DMA_IRQHandler+0x400>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d040      	beq.n	800637e <HAL_DMA_IRQHandler+0x3e2>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a27      	ldr	r2, [pc, #156]	; (80063a0 <HAL_DMA_IRQHandler+0x404>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d03b      	beq.n	800637e <HAL_DMA_IRQHandler+0x3e2>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a26      	ldr	r2, [pc, #152]	; (80063a4 <HAL_DMA_IRQHandler+0x408>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d036      	beq.n	800637e <HAL_DMA_IRQHandler+0x3e2>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a24      	ldr	r2, [pc, #144]	; (80063a8 <HAL_DMA_IRQHandler+0x40c>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d031      	beq.n	800637e <HAL_DMA_IRQHandler+0x3e2>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a23      	ldr	r2, [pc, #140]	; (80063ac <HAL_DMA_IRQHandler+0x410>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d02c      	beq.n	800637e <HAL_DMA_IRQHandler+0x3e2>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a21      	ldr	r2, [pc, #132]	; (80063b0 <HAL_DMA_IRQHandler+0x414>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d027      	beq.n	800637e <HAL_DMA_IRQHandler+0x3e2>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a20      	ldr	r2, [pc, #128]	; (80063b4 <HAL_DMA_IRQHandler+0x418>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d022      	beq.n	800637e <HAL_DMA_IRQHandler+0x3e2>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a1e      	ldr	r2, [pc, #120]	; (80063b8 <HAL_DMA_IRQHandler+0x41c>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d01d      	beq.n	800637e <HAL_DMA_IRQHandler+0x3e2>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a1d      	ldr	r2, [pc, #116]	; (80063bc <HAL_DMA_IRQHandler+0x420>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d018      	beq.n	800637e <HAL_DMA_IRQHandler+0x3e2>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a1b      	ldr	r2, [pc, #108]	; (80063c0 <HAL_DMA_IRQHandler+0x424>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d013      	beq.n	800637e <HAL_DMA_IRQHandler+0x3e2>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a1a      	ldr	r2, [pc, #104]	; (80063c4 <HAL_DMA_IRQHandler+0x428>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d00e      	beq.n	800637e <HAL_DMA_IRQHandler+0x3e2>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a18      	ldr	r2, [pc, #96]	; (80063c8 <HAL_DMA_IRQHandler+0x42c>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d009      	beq.n	800637e <HAL_DMA_IRQHandler+0x3e2>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a17      	ldr	r2, [pc, #92]	; (80063cc <HAL_DMA_IRQHandler+0x430>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d004      	beq.n	800637e <HAL_DMA_IRQHandler+0x3e2>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a15      	ldr	r2, [pc, #84]	; (80063d0 <HAL_DMA_IRQHandler+0x434>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d12a      	bne.n	80063d4 <HAL_DMA_IRQHandler+0x438>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0302 	and.w	r3, r3, #2
 8006388:	2b00      	cmp	r3, #0
 800638a:	bf14      	ite	ne
 800638c:	2301      	movne	r3, #1
 800638e:	2300      	moveq	r3, #0
 8006390:	b2db      	uxtb	r3, r3
 8006392:	e023      	b.n	80063dc <HAL_DMA_IRQHandler+0x440>
 8006394:	40020010 	.word	0x40020010
 8006398:	40020028 	.word	0x40020028
 800639c:	40020040 	.word	0x40020040
 80063a0:	40020058 	.word	0x40020058
 80063a4:	40020070 	.word	0x40020070
 80063a8:	40020088 	.word	0x40020088
 80063ac:	400200a0 	.word	0x400200a0
 80063b0:	400200b8 	.word	0x400200b8
 80063b4:	40020410 	.word	0x40020410
 80063b8:	40020428 	.word	0x40020428
 80063bc:	40020440 	.word	0x40020440
 80063c0:	40020458 	.word	0x40020458
 80063c4:	40020470 	.word	0x40020470
 80063c8:	40020488 	.word	0x40020488
 80063cc:	400204a0 	.word	0x400204a0
 80063d0:	400204b8 	.word	0x400204b8
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2300      	movs	r3, #0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00d      	beq.n	80063fc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063e4:	f003 031f 	and.w	r3, r3, #31
 80063e8:	2204      	movs	r2, #4
 80063ea:	409a      	lsls	r2, r3
 80063ec:	6a3b      	ldr	r3, [r7, #32]
 80063ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f4:	f043 0204 	orr.w	r2, r3, #4
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006400:	f003 031f 	and.w	r3, r3, #31
 8006404:	2210      	movs	r2, #16
 8006406:	409a      	lsls	r2, r3
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	4013      	ands	r3, r2
 800640c:	2b00      	cmp	r3, #0
 800640e:	f000 80a6 	beq.w	800655e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a85      	ldr	r2, [pc, #532]	; (800662c <HAL_DMA_IRQHandler+0x690>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d04a      	beq.n	80064b2 <HAL_DMA_IRQHandler+0x516>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a83      	ldr	r2, [pc, #524]	; (8006630 <HAL_DMA_IRQHandler+0x694>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d045      	beq.n	80064b2 <HAL_DMA_IRQHandler+0x516>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a82      	ldr	r2, [pc, #520]	; (8006634 <HAL_DMA_IRQHandler+0x698>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d040      	beq.n	80064b2 <HAL_DMA_IRQHandler+0x516>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a80      	ldr	r2, [pc, #512]	; (8006638 <HAL_DMA_IRQHandler+0x69c>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d03b      	beq.n	80064b2 <HAL_DMA_IRQHandler+0x516>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a7f      	ldr	r2, [pc, #508]	; (800663c <HAL_DMA_IRQHandler+0x6a0>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d036      	beq.n	80064b2 <HAL_DMA_IRQHandler+0x516>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a7d      	ldr	r2, [pc, #500]	; (8006640 <HAL_DMA_IRQHandler+0x6a4>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d031      	beq.n	80064b2 <HAL_DMA_IRQHandler+0x516>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a7c      	ldr	r2, [pc, #496]	; (8006644 <HAL_DMA_IRQHandler+0x6a8>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d02c      	beq.n	80064b2 <HAL_DMA_IRQHandler+0x516>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a7a      	ldr	r2, [pc, #488]	; (8006648 <HAL_DMA_IRQHandler+0x6ac>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d027      	beq.n	80064b2 <HAL_DMA_IRQHandler+0x516>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a79      	ldr	r2, [pc, #484]	; (800664c <HAL_DMA_IRQHandler+0x6b0>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d022      	beq.n	80064b2 <HAL_DMA_IRQHandler+0x516>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a77      	ldr	r2, [pc, #476]	; (8006650 <HAL_DMA_IRQHandler+0x6b4>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d01d      	beq.n	80064b2 <HAL_DMA_IRQHandler+0x516>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a76      	ldr	r2, [pc, #472]	; (8006654 <HAL_DMA_IRQHandler+0x6b8>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d018      	beq.n	80064b2 <HAL_DMA_IRQHandler+0x516>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a74      	ldr	r2, [pc, #464]	; (8006658 <HAL_DMA_IRQHandler+0x6bc>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d013      	beq.n	80064b2 <HAL_DMA_IRQHandler+0x516>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a73      	ldr	r2, [pc, #460]	; (800665c <HAL_DMA_IRQHandler+0x6c0>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d00e      	beq.n	80064b2 <HAL_DMA_IRQHandler+0x516>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a71      	ldr	r2, [pc, #452]	; (8006660 <HAL_DMA_IRQHandler+0x6c4>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d009      	beq.n	80064b2 <HAL_DMA_IRQHandler+0x516>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a70      	ldr	r2, [pc, #448]	; (8006664 <HAL_DMA_IRQHandler+0x6c8>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d004      	beq.n	80064b2 <HAL_DMA_IRQHandler+0x516>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a6e      	ldr	r2, [pc, #440]	; (8006668 <HAL_DMA_IRQHandler+0x6cc>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d10a      	bne.n	80064c8 <HAL_DMA_IRQHandler+0x52c>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0308 	and.w	r3, r3, #8
 80064bc:	2b00      	cmp	r3, #0
 80064be:	bf14      	ite	ne
 80064c0:	2301      	movne	r3, #1
 80064c2:	2300      	moveq	r3, #0
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	e009      	b.n	80064dc <HAL_DMA_IRQHandler+0x540>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0304 	and.w	r3, r3, #4
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	bf14      	ite	ne
 80064d6:	2301      	movne	r3, #1
 80064d8:	2300      	moveq	r3, #0
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d03e      	beq.n	800655e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064e4:	f003 031f 	and.w	r3, r3, #31
 80064e8:	2210      	movs	r2, #16
 80064ea:	409a      	lsls	r2, r3
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d018      	beq.n	8006530 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006508:	2b00      	cmp	r3, #0
 800650a:	d108      	bne.n	800651e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006510:	2b00      	cmp	r3, #0
 8006512:	d024      	beq.n	800655e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	4798      	blx	r3
 800651c:	e01f      	b.n	800655e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006522:	2b00      	cmp	r3, #0
 8006524:	d01b      	beq.n	800655e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	4798      	blx	r3
 800652e:	e016      	b.n	800655e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800653a:	2b00      	cmp	r3, #0
 800653c:	d107      	bne.n	800654e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f022 0208 	bic.w	r2, r2, #8
 800654c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006552:	2b00      	cmp	r3, #0
 8006554:	d003      	beq.n	800655e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006562:	f003 031f 	and.w	r3, r3, #31
 8006566:	2220      	movs	r2, #32
 8006568:	409a      	lsls	r2, r3
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	4013      	ands	r3, r2
 800656e:	2b00      	cmp	r3, #0
 8006570:	f000 8110 	beq.w	8006794 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a2c      	ldr	r2, [pc, #176]	; (800662c <HAL_DMA_IRQHandler+0x690>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d04a      	beq.n	8006614 <HAL_DMA_IRQHandler+0x678>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a2b      	ldr	r2, [pc, #172]	; (8006630 <HAL_DMA_IRQHandler+0x694>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d045      	beq.n	8006614 <HAL_DMA_IRQHandler+0x678>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a29      	ldr	r2, [pc, #164]	; (8006634 <HAL_DMA_IRQHandler+0x698>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d040      	beq.n	8006614 <HAL_DMA_IRQHandler+0x678>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a28      	ldr	r2, [pc, #160]	; (8006638 <HAL_DMA_IRQHandler+0x69c>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d03b      	beq.n	8006614 <HAL_DMA_IRQHandler+0x678>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a26      	ldr	r2, [pc, #152]	; (800663c <HAL_DMA_IRQHandler+0x6a0>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d036      	beq.n	8006614 <HAL_DMA_IRQHandler+0x678>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a25      	ldr	r2, [pc, #148]	; (8006640 <HAL_DMA_IRQHandler+0x6a4>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d031      	beq.n	8006614 <HAL_DMA_IRQHandler+0x678>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a23      	ldr	r2, [pc, #140]	; (8006644 <HAL_DMA_IRQHandler+0x6a8>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d02c      	beq.n	8006614 <HAL_DMA_IRQHandler+0x678>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a22      	ldr	r2, [pc, #136]	; (8006648 <HAL_DMA_IRQHandler+0x6ac>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d027      	beq.n	8006614 <HAL_DMA_IRQHandler+0x678>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a20      	ldr	r2, [pc, #128]	; (800664c <HAL_DMA_IRQHandler+0x6b0>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d022      	beq.n	8006614 <HAL_DMA_IRQHandler+0x678>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a1f      	ldr	r2, [pc, #124]	; (8006650 <HAL_DMA_IRQHandler+0x6b4>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d01d      	beq.n	8006614 <HAL_DMA_IRQHandler+0x678>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a1d      	ldr	r2, [pc, #116]	; (8006654 <HAL_DMA_IRQHandler+0x6b8>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d018      	beq.n	8006614 <HAL_DMA_IRQHandler+0x678>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a1c      	ldr	r2, [pc, #112]	; (8006658 <HAL_DMA_IRQHandler+0x6bc>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d013      	beq.n	8006614 <HAL_DMA_IRQHandler+0x678>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a1a      	ldr	r2, [pc, #104]	; (800665c <HAL_DMA_IRQHandler+0x6c0>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d00e      	beq.n	8006614 <HAL_DMA_IRQHandler+0x678>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a19      	ldr	r2, [pc, #100]	; (8006660 <HAL_DMA_IRQHandler+0x6c4>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d009      	beq.n	8006614 <HAL_DMA_IRQHandler+0x678>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a17      	ldr	r2, [pc, #92]	; (8006664 <HAL_DMA_IRQHandler+0x6c8>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d004      	beq.n	8006614 <HAL_DMA_IRQHandler+0x678>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a16      	ldr	r2, [pc, #88]	; (8006668 <HAL_DMA_IRQHandler+0x6cc>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d12b      	bne.n	800666c <HAL_DMA_IRQHandler+0x6d0>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0310 	and.w	r3, r3, #16
 800661e:	2b00      	cmp	r3, #0
 8006620:	bf14      	ite	ne
 8006622:	2301      	movne	r3, #1
 8006624:	2300      	moveq	r3, #0
 8006626:	b2db      	uxtb	r3, r3
 8006628:	e02a      	b.n	8006680 <HAL_DMA_IRQHandler+0x6e4>
 800662a:	bf00      	nop
 800662c:	40020010 	.word	0x40020010
 8006630:	40020028 	.word	0x40020028
 8006634:	40020040 	.word	0x40020040
 8006638:	40020058 	.word	0x40020058
 800663c:	40020070 	.word	0x40020070
 8006640:	40020088 	.word	0x40020088
 8006644:	400200a0 	.word	0x400200a0
 8006648:	400200b8 	.word	0x400200b8
 800664c:	40020410 	.word	0x40020410
 8006650:	40020428 	.word	0x40020428
 8006654:	40020440 	.word	0x40020440
 8006658:	40020458 	.word	0x40020458
 800665c:	40020470 	.word	0x40020470
 8006660:	40020488 	.word	0x40020488
 8006664:	400204a0 	.word	0x400204a0
 8006668:	400204b8 	.word	0x400204b8
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 0302 	and.w	r3, r3, #2
 8006676:	2b00      	cmp	r3, #0
 8006678:	bf14      	ite	ne
 800667a:	2301      	movne	r3, #1
 800667c:	2300      	moveq	r3, #0
 800667e:	b2db      	uxtb	r3, r3
 8006680:	2b00      	cmp	r3, #0
 8006682:	f000 8087 	beq.w	8006794 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800668a:	f003 031f 	and.w	r3, r3, #31
 800668e:	2220      	movs	r2, #32
 8006690:	409a      	lsls	r2, r3
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b04      	cmp	r3, #4
 80066a0:	d139      	bne.n	8006716 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f022 0216 	bic.w	r2, r2, #22
 80066b0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	695a      	ldr	r2, [r3, #20]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066c0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d103      	bne.n	80066d2 <HAL_DMA_IRQHandler+0x736>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d007      	beq.n	80066e2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f022 0208 	bic.w	r2, r2, #8
 80066e0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066e6:	f003 031f 	and.w	r3, r3, #31
 80066ea:	223f      	movs	r2, #63	; 0x3f
 80066ec:	409a      	lsls	r2, r3
 80066ee:	6a3b      	ldr	r3, [r7, #32]
 80066f0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006706:	2b00      	cmp	r3, #0
 8006708:	f000 834a 	beq.w	8006da0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	4798      	blx	r3
          }
          return;
 8006714:	e344      	b.n	8006da0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006720:	2b00      	cmp	r3, #0
 8006722:	d018      	beq.n	8006756 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d108      	bne.n	8006744 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006736:	2b00      	cmp	r3, #0
 8006738:	d02c      	beq.n	8006794 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	4798      	blx	r3
 8006742:	e027      	b.n	8006794 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006748:	2b00      	cmp	r3, #0
 800674a:	d023      	beq.n	8006794 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	4798      	blx	r3
 8006754:	e01e      	b.n	8006794 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006760:	2b00      	cmp	r3, #0
 8006762:	d10f      	bne.n	8006784 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f022 0210 	bic.w	r2, r2, #16
 8006772:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006788:	2b00      	cmp	r3, #0
 800678a:	d003      	beq.n	8006794 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006798:	2b00      	cmp	r3, #0
 800679a:	f000 8306 	beq.w	8006daa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	f000 8088 	beq.w	80068bc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2204      	movs	r2, #4
 80067b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a7a      	ldr	r2, [pc, #488]	; (80069a4 <HAL_DMA_IRQHandler+0xa08>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d04a      	beq.n	8006854 <HAL_DMA_IRQHandler+0x8b8>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a79      	ldr	r2, [pc, #484]	; (80069a8 <HAL_DMA_IRQHandler+0xa0c>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d045      	beq.n	8006854 <HAL_DMA_IRQHandler+0x8b8>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a77      	ldr	r2, [pc, #476]	; (80069ac <HAL_DMA_IRQHandler+0xa10>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d040      	beq.n	8006854 <HAL_DMA_IRQHandler+0x8b8>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a76      	ldr	r2, [pc, #472]	; (80069b0 <HAL_DMA_IRQHandler+0xa14>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d03b      	beq.n	8006854 <HAL_DMA_IRQHandler+0x8b8>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a74      	ldr	r2, [pc, #464]	; (80069b4 <HAL_DMA_IRQHandler+0xa18>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d036      	beq.n	8006854 <HAL_DMA_IRQHandler+0x8b8>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a73      	ldr	r2, [pc, #460]	; (80069b8 <HAL_DMA_IRQHandler+0xa1c>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d031      	beq.n	8006854 <HAL_DMA_IRQHandler+0x8b8>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a71      	ldr	r2, [pc, #452]	; (80069bc <HAL_DMA_IRQHandler+0xa20>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d02c      	beq.n	8006854 <HAL_DMA_IRQHandler+0x8b8>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a70      	ldr	r2, [pc, #448]	; (80069c0 <HAL_DMA_IRQHandler+0xa24>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d027      	beq.n	8006854 <HAL_DMA_IRQHandler+0x8b8>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a6e      	ldr	r2, [pc, #440]	; (80069c4 <HAL_DMA_IRQHandler+0xa28>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d022      	beq.n	8006854 <HAL_DMA_IRQHandler+0x8b8>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a6d      	ldr	r2, [pc, #436]	; (80069c8 <HAL_DMA_IRQHandler+0xa2c>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d01d      	beq.n	8006854 <HAL_DMA_IRQHandler+0x8b8>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a6b      	ldr	r2, [pc, #428]	; (80069cc <HAL_DMA_IRQHandler+0xa30>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d018      	beq.n	8006854 <HAL_DMA_IRQHandler+0x8b8>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a6a      	ldr	r2, [pc, #424]	; (80069d0 <HAL_DMA_IRQHandler+0xa34>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d013      	beq.n	8006854 <HAL_DMA_IRQHandler+0x8b8>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a68      	ldr	r2, [pc, #416]	; (80069d4 <HAL_DMA_IRQHandler+0xa38>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d00e      	beq.n	8006854 <HAL_DMA_IRQHandler+0x8b8>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a67      	ldr	r2, [pc, #412]	; (80069d8 <HAL_DMA_IRQHandler+0xa3c>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d009      	beq.n	8006854 <HAL_DMA_IRQHandler+0x8b8>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a65      	ldr	r2, [pc, #404]	; (80069dc <HAL_DMA_IRQHandler+0xa40>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d004      	beq.n	8006854 <HAL_DMA_IRQHandler+0x8b8>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a64      	ldr	r2, [pc, #400]	; (80069e0 <HAL_DMA_IRQHandler+0xa44>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d108      	bne.n	8006866 <HAL_DMA_IRQHandler+0x8ca>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f022 0201 	bic.w	r2, r2, #1
 8006862:	601a      	str	r2, [r3, #0]
 8006864:	e007      	b.n	8006876 <HAL_DMA_IRQHandler+0x8da>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f022 0201 	bic.w	r2, r2, #1
 8006874:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	3301      	adds	r3, #1
 800687a:	60fb      	str	r3, [r7, #12]
 800687c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800687e:	429a      	cmp	r2, r3
 8006880:	d307      	bcc.n	8006892 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 0301 	and.w	r3, r3, #1
 800688c:	2b00      	cmp	r3, #0
 800688e:	d1f2      	bne.n	8006876 <HAL_DMA_IRQHandler+0x8da>
 8006890:	e000      	b.n	8006894 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006892:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0301 	and.w	r3, r3, #1
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d004      	beq.n	80068ac <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2203      	movs	r2, #3
 80068a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80068aa:	e003      	b.n	80068b4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 8272 	beq.w	8006daa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	4798      	blx	r3
 80068ce:	e26c      	b.n	8006daa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a43      	ldr	r2, [pc, #268]	; (80069e4 <HAL_DMA_IRQHandler+0xa48>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d022      	beq.n	8006920 <HAL_DMA_IRQHandler+0x984>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a42      	ldr	r2, [pc, #264]	; (80069e8 <HAL_DMA_IRQHandler+0xa4c>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d01d      	beq.n	8006920 <HAL_DMA_IRQHandler+0x984>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a40      	ldr	r2, [pc, #256]	; (80069ec <HAL_DMA_IRQHandler+0xa50>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d018      	beq.n	8006920 <HAL_DMA_IRQHandler+0x984>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a3f      	ldr	r2, [pc, #252]	; (80069f0 <HAL_DMA_IRQHandler+0xa54>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d013      	beq.n	8006920 <HAL_DMA_IRQHandler+0x984>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a3d      	ldr	r2, [pc, #244]	; (80069f4 <HAL_DMA_IRQHandler+0xa58>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d00e      	beq.n	8006920 <HAL_DMA_IRQHandler+0x984>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a3c      	ldr	r2, [pc, #240]	; (80069f8 <HAL_DMA_IRQHandler+0xa5c>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d009      	beq.n	8006920 <HAL_DMA_IRQHandler+0x984>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a3a      	ldr	r2, [pc, #232]	; (80069fc <HAL_DMA_IRQHandler+0xa60>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d004      	beq.n	8006920 <HAL_DMA_IRQHandler+0x984>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a39      	ldr	r2, [pc, #228]	; (8006a00 <HAL_DMA_IRQHandler+0xa64>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d101      	bne.n	8006924 <HAL_DMA_IRQHandler+0x988>
 8006920:	2301      	movs	r3, #1
 8006922:	e000      	b.n	8006926 <HAL_DMA_IRQHandler+0x98a>
 8006924:	2300      	movs	r3, #0
 8006926:	2b00      	cmp	r3, #0
 8006928:	f000 823f 	beq.w	8006daa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006938:	f003 031f 	and.w	r3, r3, #31
 800693c:	2204      	movs	r2, #4
 800693e:	409a      	lsls	r2, r3
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	4013      	ands	r3, r2
 8006944:	2b00      	cmp	r3, #0
 8006946:	f000 80cd 	beq.w	8006ae4 <HAL_DMA_IRQHandler+0xb48>
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	f003 0304 	and.w	r3, r3, #4
 8006950:	2b00      	cmp	r3, #0
 8006952:	f000 80c7 	beq.w	8006ae4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800695a:	f003 031f 	and.w	r3, r3, #31
 800695e:	2204      	movs	r2, #4
 8006960:	409a      	lsls	r2, r3
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800696c:	2b00      	cmp	r3, #0
 800696e:	d049      	beq.n	8006a04 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d109      	bne.n	800698e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800697e:	2b00      	cmp	r3, #0
 8006980:	f000 8210 	beq.w	8006da4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800698c:	e20a      	b.n	8006da4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006992:	2b00      	cmp	r3, #0
 8006994:	f000 8206 	beq.w	8006da4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069a0:	e200      	b.n	8006da4 <HAL_DMA_IRQHandler+0xe08>
 80069a2:	bf00      	nop
 80069a4:	40020010 	.word	0x40020010
 80069a8:	40020028 	.word	0x40020028
 80069ac:	40020040 	.word	0x40020040
 80069b0:	40020058 	.word	0x40020058
 80069b4:	40020070 	.word	0x40020070
 80069b8:	40020088 	.word	0x40020088
 80069bc:	400200a0 	.word	0x400200a0
 80069c0:	400200b8 	.word	0x400200b8
 80069c4:	40020410 	.word	0x40020410
 80069c8:	40020428 	.word	0x40020428
 80069cc:	40020440 	.word	0x40020440
 80069d0:	40020458 	.word	0x40020458
 80069d4:	40020470 	.word	0x40020470
 80069d8:	40020488 	.word	0x40020488
 80069dc:	400204a0 	.word	0x400204a0
 80069e0:	400204b8 	.word	0x400204b8
 80069e4:	58025408 	.word	0x58025408
 80069e8:	5802541c 	.word	0x5802541c
 80069ec:	58025430 	.word	0x58025430
 80069f0:	58025444 	.word	0x58025444
 80069f4:	58025458 	.word	0x58025458
 80069f8:	5802546c 	.word	0x5802546c
 80069fc:	58025480 	.word	0x58025480
 8006a00:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	f003 0320 	and.w	r3, r3, #32
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d160      	bne.n	8006ad0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a7f      	ldr	r2, [pc, #508]	; (8006c10 <HAL_DMA_IRQHandler+0xc74>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d04a      	beq.n	8006aae <HAL_DMA_IRQHandler+0xb12>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a7d      	ldr	r2, [pc, #500]	; (8006c14 <HAL_DMA_IRQHandler+0xc78>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d045      	beq.n	8006aae <HAL_DMA_IRQHandler+0xb12>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a7c      	ldr	r2, [pc, #496]	; (8006c18 <HAL_DMA_IRQHandler+0xc7c>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d040      	beq.n	8006aae <HAL_DMA_IRQHandler+0xb12>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a7a      	ldr	r2, [pc, #488]	; (8006c1c <HAL_DMA_IRQHandler+0xc80>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d03b      	beq.n	8006aae <HAL_DMA_IRQHandler+0xb12>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a79      	ldr	r2, [pc, #484]	; (8006c20 <HAL_DMA_IRQHandler+0xc84>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d036      	beq.n	8006aae <HAL_DMA_IRQHandler+0xb12>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a77      	ldr	r2, [pc, #476]	; (8006c24 <HAL_DMA_IRQHandler+0xc88>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d031      	beq.n	8006aae <HAL_DMA_IRQHandler+0xb12>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a76      	ldr	r2, [pc, #472]	; (8006c28 <HAL_DMA_IRQHandler+0xc8c>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d02c      	beq.n	8006aae <HAL_DMA_IRQHandler+0xb12>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a74      	ldr	r2, [pc, #464]	; (8006c2c <HAL_DMA_IRQHandler+0xc90>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d027      	beq.n	8006aae <HAL_DMA_IRQHandler+0xb12>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a73      	ldr	r2, [pc, #460]	; (8006c30 <HAL_DMA_IRQHandler+0xc94>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d022      	beq.n	8006aae <HAL_DMA_IRQHandler+0xb12>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a71      	ldr	r2, [pc, #452]	; (8006c34 <HAL_DMA_IRQHandler+0xc98>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d01d      	beq.n	8006aae <HAL_DMA_IRQHandler+0xb12>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a70      	ldr	r2, [pc, #448]	; (8006c38 <HAL_DMA_IRQHandler+0xc9c>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d018      	beq.n	8006aae <HAL_DMA_IRQHandler+0xb12>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a6e      	ldr	r2, [pc, #440]	; (8006c3c <HAL_DMA_IRQHandler+0xca0>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d013      	beq.n	8006aae <HAL_DMA_IRQHandler+0xb12>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a6d      	ldr	r2, [pc, #436]	; (8006c40 <HAL_DMA_IRQHandler+0xca4>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d00e      	beq.n	8006aae <HAL_DMA_IRQHandler+0xb12>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a6b      	ldr	r2, [pc, #428]	; (8006c44 <HAL_DMA_IRQHandler+0xca8>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d009      	beq.n	8006aae <HAL_DMA_IRQHandler+0xb12>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a6a      	ldr	r2, [pc, #424]	; (8006c48 <HAL_DMA_IRQHandler+0xcac>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d004      	beq.n	8006aae <HAL_DMA_IRQHandler+0xb12>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a68      	ldr	r2, [pc, #416]	; (8006c4c <HAL_DMA_IRQHandler+0xcb0>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d108      	bne.n	8006ac0 <HAL_DMA_IRQHandler+0xb24>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f022 0208 	bic.w	r2, r2, #8
 8006abc:	601a      	str	r2, [r3, #0]
 8006abe:	e007      	b.n	8006ad0 <HAL_DMA_IRQHandler+0xb34>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f022 0204 	bic.w	r2, r2, #4
 8006ace:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f000 8165 	beq.w	8006da4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ae2:	e15f      	b.n	8006da4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ae8:	f003 031f 	and.w	r3, r3, #31
 8006aec:	2202      	movs	r2, #2
 8006aee:	409a      	lsls	r2, r3
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	4013      	ands	r3, r2
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f000 80c5 	beq.w	8006c84 <HAL_DMA_IRQHandler+0xce8>
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	f003 0302 	and.w	r3, r3, #2
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f000 80bf 	beq.w	8006c84 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b0a:	f003 031f 	and.w	r3, r3, #31
 8006b0e:	2202      	movs	r2, #2
 8006b10:	409a      	lsls	r2, r3
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d018      	beq.n	8006b52 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d109      	bne.n	8006b3e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f000 813a 	beq.w	8006da8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b3c:	e134      	b.n	8006da8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	f000 8130 	beq.w	8006da8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b50:	e12a      	b.n	8006da8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	f003 0320 	and.w	r3, r3, #32
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f040 8089 	bne.w	8006c70 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a2b      	ldr	r2, [pc, #172]	; (8006c10 <HAL_DMA_IRQHandler+0xc74>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d04a      	beq.n	8006bfe <HAL_DMA_IRQHandler+0xc62>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a29      	ldr	r2, [pc, #164]	; (8006c14 <HAL_DMA_IRQHandler+0xc78>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d045      	beq.n	8006bfe <HAL_DMA_IRQHandler+0xc62>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a28      	ldr	r2, [pc, #160]	; (8006c18 <HAL_DMA_IRQHandler+0xc7c>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d040      	beq.n	8006bfe <HAL_DMA_IRQHandler+0xc62>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a26      	ldr	r2, [pc, #152]	; (8006c1c <HAL_DMA_IRQHandler+0xc80>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d03b      	beq.n	8006bfe <HAL_DMA_IRQHandler+0xc62>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a25      	ldr	r2, [pc, #148]	; (8006c20 <HAL_DMA_IRQHandler+0xc84>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d036      	beq.n	8006bfe <HAL_DMA_IRQHandler+0xc62>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a23      	ldr	r2, [pc, #140]	; (8006c24 <HAL_DMA_IRQHandler+0xc88>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d031      	beq.n	8006bfe <HAL_DMA_IRQHandler+0xc62>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a22      	ldr	r2, [pc, #136]	; (8006c28 <HAL_DMA_IRQHandler+0xc8c>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d02c      	beq.n	8006bfe <HAL_DMA_IRQHandler+0xc62>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a20      	ldr	r2, [pc, #128]	; (8006c2c <HAL_DMA_IRQHandler+0xc90>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d027      	beq.n	8006bfe <HAL_DMA_IRQHandler+0xc62>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a1f      	ldr	r2, [pc, #124]	; (8006c30 <HAL_DMA_IRQHandler+0xc94>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d022      	beq.n	8006bfe <HAL_DMA_IRQHandler+0xc62>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a1d      	ldr	r2, [pc, #116]	; (8006c34 <HAL_DMA_IRQHandler+0xc98>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d01d      	beq.n	8006bfe <HAL_DMA_IRQHandler+0xc62>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a1c      	ldr	r2, [pc, #112]	; (8006c38 <HAL_DMA_IRQHandler+0xc9c>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d018      	beq.n	8006bfe <HAL_DMA_IRQHandler+0xc62>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a1a      	ldr	r2, [pc, #104]	; (8006c3c <HAL_DMA_IRQHandler+0xca0>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d013      	beq.n	8006bfe <HAL_DMA_IRQHandler+0xc62>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a19      	ldr	r2, [pc, #100]	; (8006c40 <HAL_DMA_IRQHandler+0xca4>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d00e      	beq.n	8006bfe <HAL_DMA_IRQHandler+0xc62>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a17      	ldr	r2, [pc, #92]	; (8006c44 <HAL_DMA_IRQHandler+0xca8>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d009      	beq.n	8006bfe <HAL_DMA_IRQHandler+0xc62>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a16      	ldr	r2, [pc, #88]	; (8006c48 <HAL_DMA_IRQHandler+0xcac>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d004      	beq.n	8006bfe <HAL_DMA_IRQHandler+0xc62>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a14      	ldr	r2, [pc, #80]	; (8006c4c <HAL_DMA_IRQHandler+0xcb0>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d128      	bne.n	8006c50 <HAL_DMA_IRQHandler+0xcb4>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f022 0214 	bic.w	r2, r2, #20
 8006c0c:	601a      	str	r2, [r3, #0]
 8006c0e:	e027      	b.n	8006c60 <HAL_DMA_IRQHandler+0xcc4>
 8006c10:	40020010 	.word	0x40020010
 8006c14:	40020028 	.word	0x40020028
 8006c18:	40020040 	.word	0x40020040
 8006c1c:	40020058 	.word	0x40020058
 8006c20:	40020070 	.word	0x40020070
 8006c24:	40020088 	.word	0x40020088
 8006c28:	400200a0 	.word	0x400200a0
 8006c2c:	400200b8 	.word	0x400200b8
 8006c30:	40020410 	.word	0x40020410
 8006c34:	40020428 	.word	0x40020428
 8006c38:	40020440 	.word	0x40020440
 8006c3c:	40020458 	.word	0x40020458
 8006c40:	40020470 	.word	0x40020470
 8006c44:	40020488 	.word	0x40020488
 8006c48:	400204a0 	.word	0x400204a0
 8006c4c:	400204b8 	.word	0x400204b8
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f022 020a 	bic.w	r2, r2, #10
 8006c5e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f000 8097 	beq.w	8006da8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c82:	e091      	b.n	8006da8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c88:	f003 031f 	and.w	r3, r3, #31
 8006c8c:	2208      	movs	r2, #8
 8006c8e:	409a      	lsls	r2, r3
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	4013      	ands	r3, r2
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 8088 	beq.w	8006daa <HAL_DMA_IRQHandler+0xe0e>
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	f003 0308 	and.w	r3, r3, #8
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f000 8082 	beq.w	8006daa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a41      	ldr	r2, [pc, #260]	; (8006db0 <HAL_DMA_IRQHandler+0xe14>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d04a      	beq.n	8006d46 <HAL_DMA_IRQHandler+0xdaa>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a3f      	ldr	r2, [pc, #252]	; (8006db4 <HAL_DMA_IRQHandler+0xe18>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d045      	beq.n	8006d46 <HAL_DMA_IRQHandler+0xdaa>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a3e      	ldr	r2, [pc, #248]	; (8006db8 <HAL_DMA_IRQHandler+0xe1c>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d040      	beq.n	8006d46 <HAL_DMA_IRQHandler+0xdaa>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a3c      	ldr	r2, [pc, #240]	; (8006dbc <HAL_DMA_IRQHandler+0xe20>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d03b      	beq.n	8006d46 <HAL_DMA_IRQHandler+0xdaa>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a3b      	ldr	r2, [pc, #236]	; (8006dc0 <HAL_DMA_IRQHandler+0xe24>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d036      	beq.n	8006d46 <HAL_DMA_IRQHandler+0xdaa>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a39      	ldr	r2, [pc, #228]	; (8006dc4 <HAL_DMA_IRQHandler+0xe28>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d031      	beq.n	8006d46 <HAL_DMA_IRQHandler+0xdaa>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a38      	ldr	r2, [pc, #224]	; (8006dc8 <HAL_DMA_IRQHandler+0xe2c>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d02c      	beq.n	8006d46 <HAL_DMA_IRQHandler+0xdaa>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a36      	ldr	r2, [pc, #216]	; (8006dcc <HAL_DMA_IRQHandler+0xe30>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d027      	beq.n	8006d46 <HAL_DMA_IRQHandler+0xdaa>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a35      	ldr	r2, [pc, #212]	; (8006dd0 <HAL_DMA_IRQHandler+0xe34>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d022      	beq.n	8006d46 <HAL_DMA_IRQHandler+0xdaa>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a33      	ldr	r2, [pc, #204]	; (8006dd4 <HAL_DMA_IRQHandler+0xe38>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d01d      	beq.n	8006d46 <HAL_DMA_IRQHandler+0xdaa>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a32      	ldr	r2, [pc, #200]	; (8006dd8 <HAL_DMA_IRQHandler+0xe3c>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d018      	beq.n	8006d46 <HAL_DMA_IRQHandler+0xdaa>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a30      	ldr	r2, [pc, #192]	; (8006ddc <HAL_DMA_IRQHandler+0xe40>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d013      	beq.n	8006d46 <HAL_DMA_IRQHandler+0xdaa>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a2f      	ldr	r2, [pc, #188]	; (8006de0 <HAL_DMA_IRQHandler+0xe44>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d00e      	beq.n	8006d46 <HAL_DMA_IRQHandler+0xdaa>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a2d      	ldr	r2, [pc, #180]	; (8006de4 <HAL_DMA_IRQHandler+0xe48>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d009      	beq.n	8006d46 <HAL_DMA_IRQHandler+0xdaa>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a2c      	ldr	r2, [pc, #176]	; (8006de8 <HAL_DMA_IRQHandler+0xe4c>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d004      	beq.n	8006d46 <HAL_DMA_IRQHandler+0xdaa>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a2a      	ldr	r2, [pc, #168]	; (8006dec <HAL_DMA_IRQHandler+0xe50>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d108      	bne.n	8006d58 <HAL_DMA_IRQHandler+0xdbc>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f022 021c 	bic.w	r2, r2, #28
 8006d54:	601a      	str	r2, [r3, #0]
 8006d56:	e007      	b.n	8006d68 <HAL_DMA_IRQHandler+0xdcc>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f022 020e 	bic.w	r2, r2, #14
 8006d66:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d6c:	f003 031f 	and.w	r3, r3, #31
 8006d70:	2201      	movs	r2, #1
 8006d72:	409a      	lsls	r2, r3
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d009      	beq.n	8006daa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	4798      	blx	r3
 8006d9e:	e004      	b.n	8006daa <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006da0:	bf00      	nop
 8006da2:	e002      	b.n	8006daa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006da4:	bf00      	nop
 8006da6:	e000      	b.n	8006daa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006da8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006daa:	3728      	adds	r7, #40	; 0x28
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	40020010 	.word	0x40020010
 8006db4:	40020028 	.word	0x40020028
 8006db8:	40020040 	.word	0x40020040
 8006dbc:	40020058 	.word	0x40020058
 8006dc0:	40020070 	.word	0x40020070
 8006dc4:	40020088 	.word	0x40020088
 8006dc8:	400200a0 	.word	0x400200a0
 8006dcc:	400200b8 	.word	0x400200b8
 8006dd0:	40020410 	.word	0x40020410
 8006dd4:	40020428 	.word	0x40020428
 8006dd8:	40020440 	.word	0x40020440
 8006ddc:	40020458 	.word	0x40020458
 8006de0:	40020470 	.word	0x40020470
 8006de4:	40020488 	.word	0x40020488
 8006de8:	400204a0 	.word	0x400204a0
 8006dec:	400204b8 	.word	0x400204b8

08006df0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b087      	sub	sp, #28
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	607a      	str	r2, [r7, #4]
 8006dfc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e02:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e08:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a7f      	ldr	r2, [pc, #508]	; (800700c <DMA_SetConfig+0x21c>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d072      	beq.n	8006efa <DMA_SetConfig+0x10a>
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a7d      	ldr	r2, [pc, #500]	; (8007010 <DMA_SetConfig+0x220>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d06d      	beq.n	8006efa <DMA_SetConfig+0x10a>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a7c      	ldr	r2, [pc, #496]	; (8007014 <DMA_SetConfig+0x224>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d068      	beq.n	8006efa <DMA_SetConfig+0x10a>
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a7a      	ldr	r2, [pc, #488]	; (8007018 <DMA_SetConfig+0x228>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d063      	beq.n	8006efa <DMA_SetConfig+0x10a>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a79      	ldr	r2, [pc, #484]	; (800701c <DMA_SetConfig+0x22c>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d05e      	beq.n	8006efa <DMA_SetConfig+0x10a>
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a77      	ldr	r2, [pc, #476]	; (8007020 <DMA_SetConfig+0x230>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d059      	beq.n	8006efa <DMA_SetConfig+0x10a>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a76      	ldr	r2, [pc, #472]	; (8007024 <DMA_SetConfig+0x234>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d054      	beq.n	8006efa <DMA_SetConfig+0x10a>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a74      	ldr	r2, [pc, #464]	; (8007028 <DMA_SetConfig+0x238>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d04f      	beq.n	8006efa <DMA_SetConfig+0x10a>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a73      	ldr	r2, [pc, #460]	; (800702c <DMA_SetConfig+0x23c>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d04a      	beq.n	8006efa <DMA_SetConfig+0x10a>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a71      	ldr	r2, [pc, #452]	; (8007030 <DMA_SetConfig+0x240>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d045      	beq.n	8006efa <DMA_SetConfig+0x10a>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a70      	ldr	r2, [pc, #448]	; (8007034 <DMA_SetConfig+0x244>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d040      	beq.n	8006efa <DMA_SetConfig+0x10a>
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a6e      	ldr	r2, [pc, #440]	; (8007038 <DMA_SetConfig+0x248>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d03b      	beq.n	8006efa <DMA_SetConfig+0x10a>
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a6d      	ldr	r2, [pc, #436]	; (800703c <DMA_SetConfig+0x24c>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d036      	beq.n	8006efa <DMA_SetConfig+0x10a>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a6b      	ldr	r2, [pc, #428]	; (8007040 <DMA_SetConfig+0x250>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d031      	beq.n	8006efa <DMA_SetConfig+0x10a>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a6a      	ldr	r2, [pc, #424]	; (8007044 <DMA_SetConfig+0x254>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d02c      	beq.n	8006efa <DMA_SetConfig+0x10a>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a68      	ldr	r2, [pc, #416]	; (8007048 <DMA_SetConfig+0x258>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d027      	beq.n	8006efa <DMA_SetConfig+0x10a>
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a67      	ldr	r2, [pc, #412]	; (800704c <DMA_SetConfig+0x25c>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d022      	beq.n	8006efa <DMA_SetConfig+0x10a>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a65      	ldr	r2, [pc, #404]	; (8007050 <DMA_SetConfig+0x260>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d01d      	beq.n	8006efa <DMA_SetConfig+0x10a>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a64      	ldr	r2, [pc, #400]	; (8007054 <DMA_SetConfig+0x264>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d018      	beq.n	8006efa <DMA_SetConfig+0x10a>
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a62      	ldr	r2, [pc, #392]	; (8007058 <DMA_SetConfig+0x268>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d013      	beq.n	8006efa <DMA_SetConfig+0x10a>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a61      	ldr	r2, [pc, #388]	; (800705c <DMA_SetConfig+0x26c>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d00e      	beq.n	8006efa <DMA_SetConfig+0x10a>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a5f      	ldr	r2, [pc, #380]	; (8007060 <DMA_SetConfig+0x270>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d009      	beq.n	8006efa <DMA_SetConfig+0x10a>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a5e      	ldr	r2, [pc, #376]	; (8007064 <DMA_SetConfig+0x274>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d004      	beq.n	8006efa <DMA_SetConfig+0x10a>
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a5c      	ldr	r2, [pc, #368]	; (8007068 <DMA_SetConfig+0x278>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d101      	bne.n	8006efe <DMA_SetConfig+0x10e>
 8006efa:	2301      	movs	r3, #1
 8006efc:	e000      	b.n	8006f00 <DMA_SetConfig+0x110>
 8006efe:	2300      	movs	r3, #0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00d      	beq.n	8006f20 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006f0c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d004      	beq.n	8006f20 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006f1e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a39      	ldr	r2, [pc, #228]	; (800700c <DMA_SetConfig+0x21c>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d04a      	beq.n	8006fc0 <DMA_SetConfig+0x1d0>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a38      	ldr	r2, [pc, #224]	; (8007010 <DMA_SetConfig+0x220>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d045      	beq.n	8006fc0 <DMA_SetConfig+0x1d0>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a36      	ldr	r2, [pc, #216]	; (8007014 <DMA_SetConfig+0x224>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d040      	beq.n	8006fc0 <DMA_SetConfig+0x1d0>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a35      	ldr	r2, [pc, #212]	; (8007018 <DMA_SetConfig+0x228>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d03b      	beq.n	8006fc0 <DMA_SetConfig+0x1d0>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a33      	ldr	r2, [pc, #204]	; (800701c <DMA_SetConfig+0x22c>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d036      	beq.n	8006fc0 <DMA_SetConfig+0x1d0>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a32      	ldr	r2, [pc, #200]	; (8007020 <DMA_SetConfig+0x230>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d031      	beq.n	8006fc0 <DMA_SetConfig+0x1d0>
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a30      	ldr	r2, [pc, #192]	; (8007024 <DMA_SetConfig+0x234>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d02c      	beq.n	8006fc0 <DMA_SetConfig+0x1d0>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a2f      	ldr	r2, [pc, #188]	; (8007028 <DMA_SetConfig+0x238>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d027      	beq.n	8006fc0 <DMA_SetConfig+0x1d0>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a2d      	ldr	r2, [pc, #180]	; (800702c <DMA_SetConfig+0x23c>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d022      	beq.n	8006fc0 <DMA_SetConfig+0x1d0>
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a2c      	ldr	r2, [pc, #176]	; (8007030 <DMA_SetConfig+0x240>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d01d      	beq.n	8006fc0 <DMA_SetConfig+0x1d0>
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a2a      	ldr	r2, [pc, #168]	; (8007034 <DMA_SetConfig+0x244>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d018      	beq.n	8006fc0 <DMA_SetConfig+0x1d0>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a29      	ldr	r2, [pc, #164]	; (8007038 <DMA_SetConfig+0x248>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d013      	beq.n	8006fc0 <DMA_SetConfig+0x1d0>
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a27      	ldr	r2, [pc, #156]	; (800703c <DMA_SetConfig+0x24c>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d00e      	beq.n	8006fc0 <DMA_SetConfig+0x1d0>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a26      	ldr	r2, [pc, #152]	; (8007040 <DMA_SetConfig+0x250>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d009      	beq.n	8006fc0 <DMA_SetConfig+0x1d0>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a24      	ldr	r2, [pc, #144]	; (8007044 <DMA_SetConfig+0x254>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d004      	beq.n	8006fc0 <DMA_SetConfig+0x1d0>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a23      	ldr	r2, [pc, #140]	; (8007048 <DMA_SetConfig+0x258>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d101      	bne.n	8006fc4 <DMA_SetConfig+0x1d4>
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e000      	b.n	8006fc6 <DMA_SetConfig+0x1d6>
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d059      	beq.n	800707e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fce:	f003 031f 	and.w	r3, r3, #31
 8006fd2:	223f      	movs	r2, #63	; 0x3f
 8006fd4:	409a      	lsls	r2, r3
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006fe8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	683a      	ldr	r2, [r7, #0]
 8006ff0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	2b40      	cmp	r3, #64	; 0x40
 8006ff8:	d138      	bne.n	800706c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68ba      	ldr	r2, [r7, #8]
 8007008:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800700a:	e086      	b.n	800711a <DMA_SetConfig+0x32a>
 800700c:	40020010 	.word	0x40020010
 8007010:	40020028 	.word	0x40020028
 8007014:	40020040 	.word	0x40020040
 8007018:	40020058 	.word	0x40020058
 800701c:	40020070 	.word	0x40020070
 8007020:	40020088 	.word	0x40020088
 8007024:	400200a0 	.word	0x400200a0
 8007028:	400200b8 	.word	0x400200b8
 800702c:	40020410 	.word	0x40020410
 8007030:	40020428 	.word	0x40020428
 8007034:	40020440 	.word	0x40020440
 8007038:	40020458 	.word	0x40020458
 800703c:	40020470 	.word	0x40020470
 8007040:	40020488 	.word	0x40020488
 8007044:	400204a0 	.word	0x400204a0
 8007048:	400204b8 	.word	0x400204b8
 800704c:	58025408 	.word	0x58025408
 8007050:	5802541c 	.word	0x5802541c
 8007054:	58025430 	.word	0x58025430
 8007058:	58025444 	.word	0x58025444
 800705c:	58025458 	.word	0x58025458
 8007060:	5802546c 	.word	0x5802546c
 8007064:	58025480 	.word	0x58025480
 8007068:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	68ba      	ldr	r2, [r7, #8]
 8007072:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	60da      	str	r2, [r3, #12]
}
 800707c:	e04d      	b.n	800711a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a29      	ldr	r2, [pc, #164]	; (8007128 <DMA_SetConfig+0x338>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d022      	beq.n	80070ce <DMA_SetConfig+0x2de>
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a27      	ldr	r2, [pc, #156]	; (800712c <DMA_SetConfig+0x33c>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d01d      	beq.n	80070ce <DMA_SetConfig+0x2de>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a26      	ldr	r2, [pc, #152]	; (8007130 <DMA_SetConfig+0x340>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d018      	beq.n	80070ce <DMA_SetConfig+0x2de>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a24      	ldr	r2, [pc, #144]	; (8007134 <DMA_SetConfig+0x344>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d013      	beq.n	80070ce <DMA_SetConfig+0x2de>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a23      	ldr	r2, [pc, #140]	; (8007138 <DMA_SetConfig+0x348>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d00e      	beq.n	80070ce <DMA_SetConfig+0x2de>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a21      	ldr	r2, [pc, #132]	; (800713c <DMA_SetConfig+0x34c>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d009      	beq.n	80070ce <DMA_SetConfig+0x2de>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a20      	ldr	r2, [pc, #128]	; (8007140 <DMA_SetConfig+0x350>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d004      	beq.n	80070ce <DMA_SetConfig+0x2de>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a1e      	ldr	r2, [pc, #120]	; (8007144 <DMA_SetConfig+0x354>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d101      	bne.n	80070d2 <DMA_SetConfig+0x2e2>
 80070ce:	2301      	movs	r3, #1
 80070d0:	e000      	b.n	80070d4 <DMA_SetConfig+0x2e4>
 80070d2:	2300      	movs	r3, #0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d020      	beq.n	800711a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070dc:	f003 031f 	and.w	r3, r3, #31
 80070e0:	2201      	movs	r2, #1
 80070e2:	409a      	lsls	r2, r3
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	683a      	ldr	r2, [r7, #0]
 80070ee:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	2b40      	cmp	r3, #64	; 0x40
 80070f6:	d108      	bne.n	800710a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	60da      	str	r2, [r3, #12]
}
 8007108:	e007      	b.n	800711a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68ba      	ldr	r2, [r7, #8]
 8007110:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	60da      	str	r2, [r3, #12]
}
 800711a:	bf00      	nop
 800711c:	371c      	adds	r7, #28
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	58025408 	.word	0x58025408
 800712c:	5802541c 	.word	0x5802541c
 8007130:	58025430 	.word	0x58025430
 8007134:	58025444 	.word	0x58025444
 8007138:	58025458 	.word	0x58025458
 800713c:	5802546c 	.word	0x5802546c
 8007140:	58025480 	.word	0x58025480
 8007144:	58025494 	.word	0x58025494

08007148 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a42      	ldr	r2, [pc, #264]	; (8007260 <DMA_CalcBaseAndBitshift+0x118>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d04a      	beq.n	80071f0 <DMA_CalcBaseAndBitshift+0xa8>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a41      	ldr	r2, [pc, #260]	; (8007264 <DMA_CalcBaseAndBitshift+0x11c>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d045      	beq.n	80071f0 <DMA_CalcBaseAndBitshift+0xa8>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a3f      	ldr	r2, [pc, #252]	; (8007268 <DMA_CalcBaseAndBitshift+0x120>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d040      	beq.n	80071f0 <DMA_CalcBaseAndBitshift+0xa8>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a3e      	ldr	r2, [pc, #248]	; (800726c <DMA_CalcBaseAndBitshift+0x124>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d03b      	beq.n	80071f0 <DMA_CalcBaseAndBitshift+0xa8>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a3c      	ldr	r2, [pc, #240]	; (8007270 <DMA_CalcBaseAndBitshift+0x128>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d036      	beq.n	80071f0 <DMA_CalcBaseAndBitshift+0xa8>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a3b      	ldr	r2, [pc, #236]	; (8007274 <DMA_CalcBaseAndBitshift+0x12c>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d031      	beq.n	80071f0 <DMA_CalcBaseAndBitshift+0xa8>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a39      	ldr	r2, [pc, #228]	; (8007278 <DMA_CalcBaseAndBitshift+0x130>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d02c      	beq.n	80071f0 <DMA_CalcBaseAndBitshift+0xa8>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a38      	ldr	r2, [pc, #224]	; (800727c <DMA_CalcBaseAndBitshift+0x134>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d027      	beq.n	80071f0 <DMA_CalcBaseAndBitshift+0xa8>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a36      	ldr	r2, [pc, #216]	; (8007280 <DMA_CalcBaseAndBitshift+0x138>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d022      	beq.n	80071f0 <DMA_CalcBaseAndBitshift+0xa8>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a35      	ldr	r2, [pc, #212]	; (8007284 <DMA_CalcBaseAndBitshift+0x13c>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d01d      	beq.n	80071f0 <DMA_CalcBaseAndBitshift+0xa8>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a33      	ldr	r2, [pc, #204]	; (8007288 <DMA_CalcBaseAndBitshift+0x140>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d018      	beq.n	80071f0 <DMA_CalcBaseAndBitshift+0xa8>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a32      	ldr	r2, [pc, #200]	; (800728c <DMA_CalcBaseAndBitshift+0x144>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d013      	beq.n	80071f0 <DMA_CalcBaseAndBitshift+0xa8>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a30      	ldr	r2, [pc, #192]	; (8007290 <DMA_CalcBaseAndBitshift+0x148>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d00e      	beq.n	80071f0 <DMA_CalcBaseAndBitshift+0xa8>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a2f      	ldr	r2, [pc, #188]	; (8007294 <DMA_CalcBaseAndBitshift+0x14c>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d009      	beq.n	80071f0 <DMA_CalcBaseAndBitshift+0xa8>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a2d      	ldr	r2, [pc, #180]	; (8007298 <DMA_CalcBaseAndBitshift+0x150>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d004      	beq.n	80071f0 <DMA_CalcBaseAndBitshift+0xa8>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a2c      	ldr	r2, [pc, #176]	; (800729c <DMA_CalcBaseAndBitshift+0x154>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d101      	bne.n	80071f4 <DMA_CalcBaseAndBitshift+0xac>
 80071f0:	2301      	movs	r3, #1
 80071f2:	e000      	b.n	80071f6 <DMA_CalcBaseAndBitshift+0xae>
 80071f4:	2300      	movs	r3, #0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d024      	beq.n	8007244 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	3b10      	subs	r3, #16
 8007202:	4a27      	ldr	r2, [pc, #156]	; (80072a0 <DMA_CalcBaseAndBitshift+0x158>)
 8007204:	fba2 2303 	umull	r2, r3, r2, r3
 8007208:	091b      	lsrs	r3, r3, #4
 800720a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f003 0307 	and.w	r3, r3, #7
 8007212:	4a24      	ldr	r2, [pc, #144]	; (80072a4 <DMA_CalcBaseAndBitshift+0x15c>)
 8007214:	5cd3      	ldrb	r3, [r2, r3]
 8007216:	461a      	mov	r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2b03      	cmp	r3, #3
 8007220:	d908      	bls.n	8007234 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	461a      	mov	r2, r3
 8007228:	4b1f      	ldr	r3, [pc, #124]	; (80072a8 <DMA_CalcBaseAndBitshift+0x160>)
 800722a:	4013      	ands	r3, r2
 800722c:	1d1a      	adds	r2, r3, #4
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	659a      	str	r2, [r3, #88]	; 0x58
 8007232:	e00d      	b.n	8007250 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	461a      	mov	r2, r3
 800723a:	4b1b      	ldr	r3, [pc, #108]	; (80072a8 <DMA_CalcBaseAndBitshift+0x160>)
 800723c:	4013      	ands	r3, r2
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	6593      	str	r3, [r2, #88]	; 0x58
 8007242:	e005      	b.n	8007250 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007254:	4618      	mov	r0, r3
 8007256:	3714      	adds	r7, #20
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr
 8007260:	40020010 	.word	0x40020010
 8007264:	40020028 	.word	0x40020028
 8007268:	40020040 	.word	0x40020040
 800726c:	40020058 	.word	0x40020058
 8007270:	40020070 	.word	0x40020070
 8007274:	40020088 	.word	0x40020088
 8007278:	400200a0 	.word	0x400200a0
 800727c:	400200b8 	.word	0x400200b8
 8007280:	40020410 	.word	0x40020410
 8007284:	40020428 	.word	0x40020428
 8007288:	40020440 	.word	0x40020440
 800728c:	40020458 	.word	0x40020458
 8007290:	40020470 	.word	0x40020470
 8007294:	40020488 	.word	0x40020488
 8007298:	400204a0 	.word	0x400204a0
 800729c:	400204b8 	.word	0x400204b8
 80072a0:	aaaaaaab 	.word	0xaaaaaaab
 80072a4:	080185b0 	.word	0x080185b0
 80072a8:	fffffc00 	.word	0xfffffc00

080072ac <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072b4:	2300      	movs	r3, #0
 80072b6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	699b      	ldr	r3, [r3, #24]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d120      	bne.n	8007302 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c4:	2b03      	cmp	r3, #3
 80072c6:	d858      	bhi.n	800737a <DMA_CheckFifoParam+0xce>
 80072c8:	a201      	add	r2, pc, #4	; (adr r2, 80072d0 <DMA_CheckFifoParam+0x24>)
 80072ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ce:	bf00      	nop
 80072d0:	080072e1 	.word	0x080072e1
 80072d4:	080072f3 	.word	0x080072f3
 80072d8:	080072e1 	.word	0x080072e1
 80072dc:	0800737b 	.word	0x0800737b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d048      	beq.n	800737e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80072f0:	e045      	b.n	800737e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80072fa:	d142      	bne.n	8007382 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007300:	e03f      	b.n	8007382 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800730a:	d123      	bne.n	8007354 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007310:	2b03      	cmp	r3, #3
 8007312:	d838      	bhi.n	8007386 <DMA_CheckFifoParam+0xda>
 8007314:	a201      	add	r2, pc, #4	; (adr r2, 800731c <DMA_CheckFifoParam+0x70>)
 8007316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800731a:	bf00      	nop
 800731c:	0800732d 	.word	0x0800732d
 8007320:	08007333 	.word	0x08007333
 8007324:	0800732d 	.word	0x0800732d
 8007328:	08007345 	.word	0x08007345
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	73fb      	strb	r3, [r7, #15]
        break;
 8007330:	e030      	b.n	8007394 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007336:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800733a:	2b00      	cmp	r3, #0
 800733c:	d025      	beq.n	800738a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007342:	e022      	b.n	800738a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007348:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800734c:	d11f      	bne.n	800738e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007352:	e01c      	b.n	800738e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007358:	2b02      	cmp	r3, #2
 800735a:	d902      	bls.n	8007362 <DMA_CheckFifoParam+0xb6>
 800735c:	2b03      	cmp	r3, #3
 800735e:	d003      	beq.n	8007368 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007360:	e018      	b.n	8007394 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	73fb      	strb	r3, [r7, #15]
        break;
 8007366:	e015      	b.n	8007394 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800736c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00e      	beq.n	8007392 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	73fb      	strb	r3, [r7, #15]
    break;
 8007378:	e00b      	b.n	8007392 <DMA_CheckFifoParam+0xe6>
        break;
 800737a:	bf00      	nop
 800737c:	e00a      	b.n	8007394 <DMA_CheckFifoParam+0xe8>
        break;
 800737e:	bf00      	nop
 8007380:	e008      	b.n	8007394 <DMA_CheckFifoParam+0xe8>
        break;
 8007382:	bf00      	nop
 8007384:	e006      	b.n	8007394 <DMA_CheckFifoParam+0xe8>
        break;
 8007386:	bf00      	nop
 8007388:	e004      	b.n	8007394 <DMA_CheckFifoParam+0xe8>
        break;
 800738a:	bf00      	nop
 800738c:	e002      	b.n	8007394 <DMA_CheckFifoParam+0xe8>
        break;
 800738e:	bf00      	nop
 8007390:	e000      	b.n	8007394 <DMA_CheckFifoParam+0xe8>
    break;
 8007392:	bf00      	nop
    }
  }

  return status;
 8007394:	7bfb      	ldrb	r3, [r7, #15]
}
 8007396:	4618      	mov	r0, r3
 8007398:	3714      	adds	r7, #20
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop

080073a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a38      	ldr	r2, [pc, #224]	; (8007498 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d022      	beq.n	8007402 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a36      	ldr	r2, [pc, #216]	; (800749c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d01d      	beq.n	8007402 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a35      	ldr	r2, [pc, #212]	; (80074a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d018      	beq.n	8007402 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a33      	ldr	r2, [pc, #204]	; (80074a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d013      	beq.n	8007402 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a32      	ldr	r2, [pc, #200]	; (80074a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d00e      	beq.n	8007402 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a30      	ldr	r2, [pc, #192]	; (80074ac <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d009      	beq.n	8007402 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a2f      	ldr	r2, [pc, #188]	; (80074b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d004      	beq.n	8007402 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a2d      	ldr	r2, [pc, #180]	; (80074b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d101      	bne.n	8007406 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007402:	2301      	movs	r3, #1
 8007404:	e000      	b.n	8007408 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007406:	2300      	movs	r3, #0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d01a      	beq.n	8007442 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	b2db      	uxtb	r3, r3
 8007412:	3b08      	subs	r3, #8
 8007414:	4a28      	ldr	r2, [pc, #160]	; (80074b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007416:	fba2 2303 	umull	r2, r3, r2, r3
 800741a:	091b      	lsrs	r3, r3, #4
 800741c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	4b26      	ldr	r3, [pc, #152]	; (80074bc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007422:	4413      	add	r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	461a      	mov	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a24      	ldr	r2, [pc, #144]	; (80074c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007430:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f003 031f 	and.w	r3, r3, #31
 8007438:	2201      	movs	r2, #1
 800743a:	409a      	lsls	r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007440:	e024      	b.n	800748c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	b2db      	uxtb	r3, r3
 8007448:	3b10      	subs	r3, #16
 800744a:	4a1e      	ldr	r2, [pc, #120]	; (80074c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800744c:	fba2 2303 	umull	r2, r3, r2, r3
 8007450:	091b      	lsrs	r3, r3, #4
 8007452:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	4a1c      	ldr	r2, [pc, #112]	; (80074c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d806      	bhi.n	800746a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	4a1b      	ldr	r2, [pc, #108]	; (80074cc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d902      	bls.n	800746a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	3308      	adds	r3, #8
 8007468:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	4b18      	ldr	r3, [pc, #96]	; (80074d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800746e:	4413      	add	r3, r2
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	461a      	mov	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a16      	ldr	r2, [pc, #88]	; (80074d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800747c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f003 031f 	and.w	r3, r3, #31
 8007484:	2201      	movs	r2, #1
 8007486:	409a      	lsls	r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800748c:	bf00      	nop
 800748e:	3714      	adds	r7, #20
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr
 8007498:	58025408 	.word	0x58025408
 800749c:	5802541c 	.word	0x5802541c
 80074a0:	58025430 	.word	0x58025430
 80074a4:	58025444 	.word	0x58025444
 80074a8:	58025458 	.word	0x58025458
 80074ac:	5802546c 	.word	0x5802546c
 80074b0:	58025480 	.word	0x58025480
 80074b4:	58025494 	.word	0x58025494
 80074b8:	cccccccd 	.word	0xcccccccd
 80074bc:	16009600 	.word	0x16009600
 80074c0:	58025880 	.word	0x58025880
 80074c4:	aaaaaaab 	.word	0xaaaaaaab
 80074c8:	400204b8 	.word	0x400204b8
 80074cc:	4002040f 	.word	0x4002040f
 80074d0:	10008200 	.word	0x10008200
 80074d4:	40020880 	.word	0x40020880

080074d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d04a      	beq.n	8007584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2b08      	cmp	r3, #8
 80074f2:	d847      	bhi.n	8007584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a25      	ldr	r2, [pc, #148]	; (8007590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d022      	beq.n	8007544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a24      	ldr	r2, [pc, #144]	; (8007594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d01d      	beq.n	8007544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a22      	ldr	r2, [pc, #136]	; (8007598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d018      	beq.n	8007544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a21      	ldr	r2, [pc, #132]	; (800759c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d013      	beq.n	8007544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a1f      	ldr	r2, [pc, #124]	; (80075a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d00e      	beq.n	8007544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a1e      	ldr	r2, [pc, #120]	; (80075a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d009      	beq.n	8007544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a1c      	ldr	r2, [pc, #112]	; (80075a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d004      	beq.n	8007544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a1b      	ldr	r2, [pc, #108]	; (80075ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d101      	bne.n	8007548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007544:	2301      	movs	r3, #1
 8007546:	e000      	b.n	800754a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007548:	2300      	movs	r3, #0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00a      	beq.n	8007564 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	4b17      	ldr	r3, [pc, #92]	; (80075b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007552:	4413      	add	r3, r2
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	461a      	mov	r2, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a15      	ldr	r2, [pc, #84]	; (80075b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007560:	671a      	str	r2, [r3, #112]	; 0x70
 8007562:	e009      	b.n	8007578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	4b14      	ldr	r3, [pc, #80]	; (80075b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007568:	4413      	add	r3, r2
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	461a      	mov	r2, r3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a11      	ldr	r2, [pc, #68]	; (80075bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007576:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	3b01      	subs	r3, #1
 800757c:	2201      	movs	r2, #1
 800757e:	409a      	lsls	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007584:	bf00      	nop
 8007586:	3714      	adds	r7, #20
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr
 8007590:	58025408 	.word	0x58025408
 8007594:	5802541c 	.word	0x5802541c
 8007598:	58025430 	.word	0x58025430
 800759c:	58025444 	.word	0x58025444
 80075a0:	58025458 	.word	0x58025458
 80075a4:	5802546c 	.word	0x5802546c
 80075a8:	58025480 	.word	0x58025480
 80075ac:	58025494 	.word	0x58025494
 80075b0:	1600963f 	.word	0x1600963f
 80075b4:	58025940 	.word	0x58025940
 80075b8:	1000823f 	.word	0x1000823f
 80075bc:	40020940 	.word	0x40020940

080075c0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b098      	sub	sp, #96	; 0x60
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80075c8:	4a84      	ldr	r2, [pc, #528]	; (80077dc <HAL_FDCAN_Init+0x21c>)
 80075ca:	f107 030c 	add.w	r3, r7, #12
 80075ce:	4611      	mov	r1, r2
 80075d0:	224c      	movs	r2, #76	; 0x4c
 80075d2:	4618      	mov	r0, r3
 80075d4:	f00f fdea 	bl	80171ac <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d101      	bne.n	80075e2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e1c6      	b.n	8007970 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a7e      	ldr	r2, [pc, #504]	; (80077e0 <HAL_FDCAN_Init+0x220>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d106      	bne.n	80075fa <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80075f4:	461a      	mov	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007600:	b2db      	uxtb	r3, r3
 8007602:	2b00      	cmp	r3, #0
 8007604:	d106      	bne.n	8007614 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f7fb faa4 	bl	8002b5c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	699a      	ldr	r2, [r3, #24]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f022 0210 	bic.w	r2, r2, #16
 8007622:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007624:	f7fc fa32 	bl	8003a8c <HAL_GetTick>
 8007628:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800762a:	e014      	b.n	8007656 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800762c:	f7fc fa2e 	bl	8003a8c <HAL_GetTick>
 8007630:	4602      	mov	r2, r0
 8007632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	2b0a      	cmp	r3, #10
 8007638:	d90d      	bls.n	8007656 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007640:	f043 0201 	orr.w	r2, r3, #1
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2203      	movs	r2, #3
 800764e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e18c      	b.n	8007970 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	f003 0308 	and.w	r3, r3, #8
 8007660:	2b08      	cmp	r3, #8
 8007662:	d0e3      	beq.n	800762c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	699a      	ldr	r2, [r3, #24]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f042 0201 	orr.w	r2, r2, #1
 8007672:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007674:	f7fc fa0a 	bl	8003a8c <HAL_GetTick>
 8007678:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800767a:	e014      	b.n	80076a6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800767c:	f7fc fa06 	bl	8003a8c <HAL_GetTick>
 8007680:	4602      	mov	r2, r0
 8007682:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	2b0a      	cmp	r3, #10
 8007688:	d90d      	bls.n	80076a6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007690:	f043 0201 	orr.w	r2, r3, #1
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2203      	movs	r2, #3
 800769e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e164      	b.n	8007970 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	699b      	ldr	r3, [r3, #24]
 80076ac:	f003 0301 	and.w	r3, r3, #1
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d0e3      	beq.n	800767c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	699a      	ldr	r2, [r3, #24]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f042 0202 	orr.w	r2, r2, #2
 80076c2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	7c1b      	ldrb	r3, [r3, #16]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d108      	bne.n	80076de <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	699a      	ldr	r2, [r3, #24]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076da:	619a      	str	r2, [r3, #24]
 80076dc:	e007      	b.n	80076ee <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	699a      	ldr	r2, [r3, #24]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076ec:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	7c5b      	ldrb	r3, [r3, #17]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d108      	bne.n	8007708 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	699a      	ldr	r2, [r3, #24]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007704:	619a      	str	r2, [r3, #24]
 8007706:	e007      	b.n	8007718 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	699a      	ldr	r2, [r3, #24]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007716:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	7c9b      	ldrb	r3, [r3, #18]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d108      	bne.n	8007732 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	699a      	ldr	r2, [r3, #24]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800772e:	619a      	str	r2, [r3, #24]
 8007730:	e007      	b.n	8007742 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	699a      	ldr	r2, [r3, #24]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007740:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	699b      	ldr	r3, [r3, #24]
 8007748:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	689a      	ldr	r2, [r3, #8]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	430a      	orrs	r2, r1
 8007756:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	699a      	ldr	r2, [r3, #24]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8007766:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	691a      	ldr	r2, [r3, #16]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f022 0210 	bic.w	r2, r2, #16
 8007776:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d108      	bne.n	8007792 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	699a      	ldr	r2, [r3, #24]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f042 0204 	orr.w	r2, r2, #4
 800778e:	619a      	str	r2, [r3, #24]
 8007790:	e030      	b.n	80077f4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d02c      	beq.n	80077f4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d020      	beq.n	80077e4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	699a      	ldr	r2, [r3, #24]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80077b0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	691a      	ldr	r2, [r3, #16]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f042 0210 	orr.w	r2, r2, #16
 80077c0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	2b03      	cmp	r3, #3
 80077c8:	d114      	bne.n	80077f4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	699a      	ldr	r2, [r3, #24]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f042 0220 	orr.w	r2, r2, #32
 80077d8:	619a      	str	r2, [r3, #24]
 80077da:	e00b      	b.n	80077f4 <HAL_FDCAN_Init+0x234>
 80077dc:	0801849c 	.word	0x0801849c
 80077e0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	699a      	ldr	r2, [r3, #24]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f042 0220 	orr.w	r2, r2, #32
 80077f2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	699b      	ldr	r3, [r3, #24]
 80077f8:	3b01      	subs	r3, #1
 80077fa:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	69db      	ldr	r3, [r3, #28]
 8007800:	3b01      	subs	r3, #1
 8007802:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007804:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a1b      	ldr	r3, [r3, #32]
 800780a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800780c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	695b      	ldr	r3, [r3, #20]
 8007814:	3b01      	subs	r3, #1
 8007816:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800781c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800781e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007828:	d115      	bne.n	8007856 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800782e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007834:	3b01      	subs	r3, #1
 8007836:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007838:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800783e:	3b01      	subs	r3, #1
 8007840:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007842:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784a:	3b01      	subs	r3, #1
 800784c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007852:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007854:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00a      	beq.n	8007874 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	430a      	orrs	r2, r1
 8007870:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800787c:	4413      	add	r3, r2
 800787e:	2b00      	cmp	r3, #0
 8007880:	d011      	beq.n	80078a6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800788a:	f023 0107 	bic.w	r1, r3, #7
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	3360      	adds	r3, #96	; 0x60
 8007896:	443b      	add	r3, r7
 8007898:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	430a      	orrs	r2, r1
 80078a2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d011      	beq.n	80078d2 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80078b6:	f023 0107 	bic.w	r1, r3, #7
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	3360      	adds	r3, #96	; 0x60
 80078c2:	443b      	add	r3, r7
 80078c4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	430a      	orrs	r2, r1
 80078ce:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d012      	beq.n	8007900 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80078e2:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	3360      	adds	r3, #96	; 0x60
 80078ee:	443b      	add	r3, r7
 80078f0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80078f4:	011a      	lsls	r2, r3, #4
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	430a      	orrs	r2, r1
 80078fc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007904:	2b00      	cmp	r3, #0
 8007906:	d012      	beq.n	800792e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007910:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	3360      	adds	r3, #96	; 0x60
 800791c:	443b      	add	r3, r7
 800791e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007922:	021a      	lsls	r2, r3, #8
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	430a      	orrs	r2, r1
 800792a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a11      	ldr	r2, [pc, #68]	; (8007978 <HAL_FDCAN_Init+0x3b8>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d107      	bne.n	8007948 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	689a      	ldr	r2, [r3, #8]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	f022 0203 	bic.w	r2, r2, #3
 8007946:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 f80b 	bl	800797c <FDCAN_CalcultateRamBlockAddresses>
 8007966:	4603      	mov	r3, r0
 8007968:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 800796c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8007970:	4618      	mov	r0, r3
 8007972:	3760      	adds	r7, #96	; 0x60
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}
 8007978:	4000a000 	.word	0x4000a000

0800797c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007988:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007992:	4ba7      	ldr	r3, [pc, #668]	; (8007c30 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007994:	4013      	ands	r3, r2
 8007996:	68ba      	ldr	r2, [r7, #8]
 8007998:	0091      	lsls	r1, r2, #2
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	6812      	ldr	r2, [r2, #0]
 800799e:	430b      	orrs	r3, r1
 80079a0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079ac:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b4:	041a      	lsls	r2, r3, #16
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	430a      	orrs	r2, r1
 80079bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c4:	68ba      	ldr	r2, [r7, #8]
 80079c6:	4413      	add	r3, r2
 80079c8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80079d2:	4b97      	ldr	r3, [pc, #604]	; (8007c30 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80079d4:	4013      	ands	r3, r2
 80079d6:	68ba      	ldr	r2, [r7, #8]
 80079d8:	0091      	lsls	r1, r2, #2
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	6812      	ldr	r2, [r2, #0]
 80079de:	430b      	orrs	r3, r1
 80079e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079ec:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079f4:	041a      	lsls	r2, r3, #16
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	430a      	orrs	r2, r1
 80079fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a04:	005b      	lsls	r3, r3, #1
 8007a06:	68ba      	ldr	r2, [r7, #8]
 8007a08:	4413      	add	r3, r2
 8007a0a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007a14:	4b86      	ldr	r3, [pc, #536]	; (8007c30 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a16:	4013      	ands	r3, r2
 8007a18:	68ba      	ldr	r2, [r7, #8]
 8007a1a:	0091      	lsls	r1, r2, #2
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	6812      	ldr	r2, [r2, #0]
 8007a20:	430b      	orrs	r3, r1
 8007a22:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007a2e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a36:	041a      	lsls	r2, r3, #16
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	430a      	orrs	r2, r1
 8007a3e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007a4a:	fb02 f303 	mul.w	r3, r2, r3
 8007a4e:	68ba      	ldr	r2, [r7, #8]
 8007a50:	4413      	add	r3, r2
 8007a52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007a5c:	4b74      	ldr	r3, [pc, #464]	; (8007c30 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a5e:	4013      	ands	r3, r2
 8007a60:	68ba      	ldr	r2, [r7, #8]
 8007a62:	0091      	lsls	r1, r2, #2
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	6812      	ldr	r2, [r2, #0]
 8007a68:	430b      	orrs	r3, r1
 8007a6a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a76:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a7e:	041a      	lsls	r2, r3, #16
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	430a      	orrs	r2, r1
 8007a86:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007a92:	fb02 f303 	mul.w	r3, r2, r3
 8007a96:	68ba      	ldr	r2, [r7, #8]
 8007a98:	4413      	add	r3, r2
 8007a9a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007aa4:	4b62      	ldr	r3, [pc, #392]	; (8007c30 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007aa6:	4013      	ands	r3, r2
 8007aa8:	68ba      	ldr	r2, [r7, #8]
 8007aaa:	0091      	lsls	r1, r2, #2
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	6812      	ldr	r2, [r2, #0]
 8007ab0:	430b      	orrs	r3, r1
 8007ab2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007abe:	fb02 f303 	mul.w	r3, r2, r3
 8007ac2:	68ba      	ldr	r2, [r7, #8]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007ad0:	4b57      	ldr	r3, [pc, #348]	; (8007c30 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	0091      	lsls	r1, r2, #2
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	6812      	ldr	r2, [r2, #0]
 8007adc:	430b      	orrs	r3, r1
 8007ade:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007aea:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007af2:	041a      	lsls	r2, r3, #16
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	430a      	orrs	r2, r1
 8007afa:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b02:	005b      	lsls	r3, r3, #1
 8007b04:	68ba      	ldr	r2, [r7, #8]
 8007b06:	4413      	add	r3, r2
 8007b08:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007b12:	4b47      	ldr	r3, [pc, #284]	; (8007c30 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007b14:	4013      	ands	r3, r2
 8007b16:	68ba      	ldr	r2, [r7, #8]
 8007b18:	0091      	lsls	r1, r2, #2
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	6812      	ldr	r2, [r2, #0]
 8007b1e:	430b      	orrs	r3, r1
 8007b20:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007b2c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b34:	041a      	lsls	r2, r3, #16
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	430a      	orrs	r2, r1
 8007b3c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007b48:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b50:	061a      	lsls	r2, r3, #24
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	430a      	orrs	r2, r1
 8007b58:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b60:	4b34      	ldr	r3, [pc, #208]	; (8007c34 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007b62:	4413      	add	r3, r2
 8007b64:	009a      	lsls	r2, r3, #2
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	441a      	add	r2, r3
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b82:	00db      	lsls	r3, r3, #3
 8007b84:	441a      	add	r2, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b92:	6879      	ldr	r1, [r7, #4]
 8007b94:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007b96:	fb01 f303 	mul.w	r3, r1, r3
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	441a      	add	r2, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007baa:	6879      	ldr	r1, [r7, #4]
 8007bac:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007bae:	fb01 f303 	mul.w	r3, r1, r3
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	441a      	add	r2, r3
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bc2:	6879      	ldr	r1, [r7, #4]
 8007bc4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007bc6:	fb01 f303 	mul.w	r3, r1, r3
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	441a      	add	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bde:	00db      	lsls	r3, r3, #3
 8007be0:	441a      	add	r2, r3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bf2:	6879      	ldr	r1, [r7, #4]
 8007bf4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007bf6:	fb01 f303 	mul.w	r3, r1, r3
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	441a      	add	r2, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c0e:	6879      	ldr	r1, [r7, #4]
 8007c10:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007c12:	fb01 f303 	mul.w	r3, r1, r3
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	441a      	add	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c26:	4a04      	ldr	r2, [pc, #16]	; (8007c38 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d915      	bls.n	8007c58 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007c2c:	e006      	b.n	8007c3c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007c2e:	bf00      	nop
 8007c30:	ffff0003 	.word	0xffff0003
 8007c34:	10002b00 	.word	0x10002b00
 8007c38:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c42:	f043 0220 	orr.w	r2, r3, #32
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2203      	movs	r2, #3
 8007c50:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	e010      	b.n	8007c7a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c5c:	60fb      	str	r3, [r7, #12]
 8007c5e:	e005      	b.n	8007c6c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2200      	movs	r2, #0
 8007c64:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	3304      	adds	r3, #4
 8007c6a:	60fb      	str	r3, [r7, #12]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d3f3      	bcc.n	8007c60 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3714      	adds	r7, #20
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr
 8007c86:	bf00      	nop

08007c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b089      	sub	sp, #36	; 0x24
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007c92:	2300      	movs	r3, #0
 8007c94:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007c96:	4b86      	ldr	r3, [pc, #536]	; (8007eb0 <HAL_GPIO_Init+0x228>)
 8007c98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007c9a:	e18c      	b.n	8007fb6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	2101      	movs	r1, #1
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ca8:	4013      	ands	r3, r2
 8007caa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	f000 817e 	beq.w	8007fb0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	f003 0303 	and.w	r3, r3, #3
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d005      	beq.n	8007ccc <HAL_GPIO_Init+0x44>
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	f003 0303 	and.w	r3, r3, #3
 8007cc8:	2b02      	cmp	r3, #2
 8007cca:	d130      	bne.n	8007d2e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	005b      	lsls	r3, r3, #1
 8007cd6:	2203      	movs	r2, #3
 8007cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8007cdc:	43db      	mvns	r3, r3
 8007cde:	69ba      	ldr	r2, [r7, #24]
 8007ce0:	4013      	ands	r3, r2
 8007ce2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	68da      	ldr	r2, [r3, #12]
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	005b      	lsls	r3, r3, #1
 8007cec:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf0:	69ba      	ldr	r2, [r7, #24]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	69ba      	ldr	r2, [r7, #24]
 8007cfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007d02:	2201      	movs	r2, #1
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	fa02 f303 	lsl.w	r3, r2, r3
 8007d0a:	43db      	mvns	r3, r3
 8007d0c:	69ba      	ldr	r2, [r7, #24]
 8007d0e:	4013      	ands	r3, r2
 8007d10:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	091b      	lsrs	r3, r3, #4
 8007d18:	f003 0201 	and.w	r2, r3, #1
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d22:	69ba      	ldr	r2, [r7, #24]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	69ba      	ldr	r2, [r7, #24]
 8007d2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	f003 0303 	and.w	r3, r3, #3
 8007d36:	2b03      	cmp	r3, #3
 8007d38:	d017      	beq.n	8007d6a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	005b      	lsls	r3, r3, #1
 8007d44:	2203      	movs	r2, #3
 8007d46:	fa02 f303 	lsl.w	r3, r2, r3
 8007d4a:	43db      	mvns	r3, r3
 8007d4c:	69ba      	ldr	r2, [r7, #24]
 8007d4e:	4013      	ands	r3, r2
 8007d50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	689a      	ldr	r2, [r3, #8]
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	005b      	lsls	r3, r3, #1
 8007d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d5e:	69ba      	ldr	r2, [r7, #24]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	69ba      	ldr	r2, [r7, #24]
 8007d68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	f003 0303 	and.w	r3, r3, #3
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d123      	bne.n	8007dbe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	08da      	lsrs	r2, r3, #3
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	3208      	adds	r2, #8
 8007d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	f003 0307 	and.w	r3, r3, #7
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	220f      	movs	r2, #15
 8007d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d92:	43db      	mvns	r3, r3
 8007d94:	69ba      	ldr	r2, [r7, #24]
 8007d96:	4013      	ands	r3, r2
 8007d98:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	691a      	ldr	r2, [r3, #16]
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	f003 0307 	and.w	r3, r3, #7
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	fa02 f303 	lsl.w	r3, r2, r3
 8007daa:	69ba      	ldr	r2, [r7, #24]
 8007dac:	4313      	orrs	r3, r2
 8007dae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	08da      	lsrs	r2, r3, #3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	3208      	adds	r2, #8
 8007db8:	69b9      	ldr	r1, [r7, #24]
 8007dba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	005b      	lsls	r3, r3, #1
 8007dc8:	2203      	movs	r2, #3
 8007dca:	fa02 f303 	lsl.w	r3, r2, r3
 8007dce:	43db      	mvns	r3, r3
 8007dd0:	69ba      	ldr	r2, [r7, #24]
 8007dd2:	4013      	ands	r3, r2
 8007dd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	f003 0203 	and.w	r2, r3, #3
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	005b      	lsls	r3, r3, #1
 8007de2:	fa02 f303 	lsl.w	r3, r2, r3
 8007de6:	69ba      	ldr	r2, [r7, #24]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	69ba      	ldr	r2, [r7, #24]
 8007df0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	f000 80d8 	beq.w	8007fb0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e00:	4b2c      	ldr	r3, [pc, #176]	; (8007eb4 <HAL_GPIO_Init+0x22c>)
 8007e02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e06:	4a2b      	ldr	r2, [pc, #172]	; (8007eb4 <HAL_GPIO_Init+0x22c>)
 8007e08:	f043 0302 	orr.w	r3, r3, #2
 8007e0c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007e10:	4b28      	ldr	r3, [pc, #160]	; (8007eb4 <HAL_GPIO_Init+0x22c>)
 8007e12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e16:	f003 0302 	and.w	r3, r3, #2
 8007e1a:	60fb      	str	r3, [r7, #12]
 8007e1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007e1e:	4a26      	ldr	r2, [pc, #152]	; (8007eb8 <HAL_GPIO_Init+0x230>)
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	089b      	lsrs	r3, r3, #2
 8007e24:	3302      	adds	r3, #2
 8007e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	f003 0303 	and.w	r3, r3, #3
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	220f      	movs	r2, #15
 8007e36:	fa02 f303 	lsl.w	r3, r2, r3
 8007e3a:	43db      	mvns	r3, r3
 8007e3c:	69ba      	ldr	r2, [r7, #24]
 8007e3e:	4013      	ands	r3, r2
 8007e40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a1d      	ldr	r2, [pc, #116]	; (8007ebc <HAL_GPIO_Init+0x234>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d04a      	beq.n	8007ee0 <HAL_GPIO_Init+0x258>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a1c      	ldr	r2, [pc, #112]	; (8007ec0 <HAL_GPIO_Init+0x238>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d02b      	beq.n	8007eaa <HAL_GPIO_Init+0x222>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a1b      	ldr	r2, [pc, #108]	; (8007ec4 <HAL_GPIO_Init+0x23c>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d025      	beq.n	8007ea6 <HAL_GPIO_Init+0x21e>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a1a      	ldr	r2, [pc, #104]	; (8007ec8 <HAL_GPIO_Init+0x240>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d01f      	beq.n	8007ea2 <HAL_GPIO_Init+0x21a>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a19      	ldr	r2, [pc, #100]	; (8007ecc <HAL_GPIO_Init+0x244>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d019      	beq.n	8007e9e <HAL_GPIO_Init+0x216>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a18      	ldr	r2, [pc, #96]	; (8007ed0 <HAL_GPIO_Init+0x248>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d013      	beq.n	8007e9a <HAL_GPIO_Init+0x212>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a17      	ldr	r2, [pc, #92]	; (8007ed4 <HAL_GPIO_Init+0x24c>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d00d      	beq.n	8007e96 <HAL_GPIO_Init+0x20e>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a16      	ldr	r2, [pc, #88]	; (8007ed8 <HAL_GPIO_Init+0x250>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d007      	beq.n	8007e92 <HAL_GPIO_Init+0x20a>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a15      	ldr	r2, [pc, #84]	; (8007edc <HAL_GPIO_Init+0x254>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d101      	bne.n	8007e8e <HAL_GPIO_Init+0x206>
 8007e8a:	2309      	movs	r3, #9
 8007e8c:	e029      	b.n	8007ee2 <HAL_GPIO_Init+0x25a>
 8007e8e:	230a      	movs	r3, #10
 8007e90:	e027      	b.n	8007ee2 <HAL_GPIO_Init+0x25a>
 8007e92:	2307      	movs	r3, #7
 8007e94:	e025      	b.n	8007ee2 <HAL_GPIO_Init+0x25a>
 8007e96:	2306      	movs	r3, #6
 8007e98:	e023      	b.n	8007ee2 <HAL_GPIO_Init+0x25a>
 8007e9a:	2305      	movs	r3, #5
 8007e9c:	e021      	b.n	8007ee2 <HAL_GPIO_Init+0x25a>
 8007e9e:	2304      	movs	r3, #4
 8007ea0:	e01f      	b.n	8007ee2 <HAL_GPIO_Init+0x25a>
 8007ea2:	2303      	movs	r3, #3
 8007ea4:	e01d      	b.n	8007ee2 <HAL_GPIO_Init+0x25a>
 8007ea6:	2302      	movs	r3, #2
 8007ea8:	e01b      	b.n	8007ee2 <HAL_GPIO_Init+0x25a>
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e019      	b.n	8007ee2 <HAL_GPIO_Init+0x25a>
 8007eae:	bf00      	nop
 8007eb0:	58000080 	.word	0x58000080
 8007eb4:	58024400 	.word	0x58024400
 8007eb8:	58000400 	.word	0x58000400
 8007ebc:	58020000 	.word	0x58020000
 8007ec0:	58020400 	.word	0x58020400
 8007ec4:	58020800 	.word	0x58020800
 8007ec8:	58020c00 	.word	0x58020c00
 8007ecc:	58021000 	.word	0x58021000
 8007ed0:	58021400 	.word	0x58021400
 8007ed4:	58021800 	.word	0x58021800
 8007ed8:	58021c00 	.word	0x58021c00
 8007edc:	58022400 	.word	0x58022400
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	69fa      	ldr	r2, [r7, #28]
 8007ee4:	f002 0203 	and.w	r2, r2, #3
 8007ee8:	0092      	lsls	r2, r2, #2
 8007eea:	4093      	lsls	r3, r2
 8007eec:	69ba      	ldr	r2, [r7, #24]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007ef2:	4938      	ldr	r1, [pc, #224]	; (8007fd4 <HAL_GPIO_Init+0x34c>)
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	089b      	lsrs	r3, r3, #2
 8007ef8:	3302      	adds	r3, #2
 8007efa:	69ba      	ldr	r2, [r7, #24]
 8007efc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	43db      	mvns	r3, r3
 8007f0c:	69ba      	ldr	r2, [r7, #24]
 8007f0e:	4013      	ands	r3, r2
 8007f10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d003      	beq.n	8007f26 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007f1e:	69ba      	ldr	r2, [r7, #24]
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007f26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	43db      	mvns	r3, r3
 8007f3a:	69ba      	ldr	r2, [r7, #24]
 8007f3c:	4013      	ands	r3, r2
 8007f3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d003      	beq.n	8007f54 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007f4c:	69ba      	ldr	r2, [r7, #24]
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007f54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	43db      	mvns	r3, r3
 8007f66:	69ba      	ldr	r2, [r7, #24]
 8007f68:	4013      	ands	r3, r2
 8007f6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d003      	beq.n	8007f80 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007f78:	69ba      	ldr	r2, [r7, #24]
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	69ba      	ldr	r2, [r7, #24]
 8007f84:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	43db      	mvns	r3, r3
 8007f90:	69ba      	ldr	r2, [r7, #24]
 8007f92:	4013      	ands	r3, r2
 8007f94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d003      	beq.n	8007faa <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007fa2:	69ba      	ldr	r2, [r7, #24]
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	69ba      	ldr	r2, [r7, #24]
 8007fae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f47f ae6b 	bne.w	8007c9c <HAL_GPIO_Init+0x14>
  }
}
 8007fc6:	bf00      	nop
 8007fc8:	bf00      	nop
 8007fca:	3724      	adds	r7, #36	; 0x24
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr
 8007fd4:	58000400 	.word	0x58000400

08007fd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b085      	sub	sp, #20
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	691a      	ldr	r2, [r3, #16]
 8007fe8:	887b      	ldrh	r3, [r7, #2]
 8007fea:	4013      	ands	r3, r2
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d002      	beq.n	8007ff6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	73fb      	strb	r3, [r7, #15]
 8007ff4:	e001      	b.n	8007ffa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3714      	adds	r7, #20
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	460b      	mov	r3, r1
 8008012:	807b      	strh	r3, [r7, #2]
 8008014:	4613      	mov	r3, r2
 8008016:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008018:	787b      	ldrb	r3, [r7, #1]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d003      	beq.n	8008026 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800801e:	887a      	ldrh	r2, [r7, #2]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008024:	e003      	b.n	800802e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008026:	887b      	ldrh	r3, [r7, #2]
 8008028:	041a      	lsls	r2, r3, #16
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	619a      	str	r2, [r3, #24]
}
 800802e:	bf00      	nop
 8008030:	370c      	adds	r7, #12
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr
	...

0800803c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d101      	bne.n	800804e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e07f      	b.n	800814e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008054:	b2db      	uxtb	r3, r3
 8008056:	2b00      	cmp	r3, #0
 8008058:	d106      	bne.n	8008068 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f7fa fde2 	bl	8002c2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2224      	movs	r2, #36	; 0x24
 800806c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f022 0201 	bic.w	r2, r2, #1
 800807e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	685a      	ldr	r2, [r3, #4]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800808c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	689a      	ldr	r2, [r3, #8]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800809c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d107      	bne.n	80080b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	689a      	ldr	r2, [r3, #8]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80080b2:	609a      	str	r2, [r3, #8]
 80080b4:	e006      	b.n	80080c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	689a      	ldr	r2, [r3, #8]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80080c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d104      	bne.n	80080d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80080d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	6859      	ldr	r1, [r3, #4]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	4b1d      	ldr	r3, [pc, #116]	; (8008158 <HAL_I2C_Init+0x11c>)
 80080e2:	430b      	orrs	r3, r1
 80080e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68da      	ldr	r2, [r3, #12]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80080f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	691a      	ldr	r2, [r3, #16]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	699b      	ldr	r3, [r3, #24]
 8008106:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	430a      	orrs	r2, r1
 800810e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	69d9      	ldr	r1, [r3, #28]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6a1a      	ldr	r2, [r3, #32]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	430a      	orrs	r2, r1
 800811e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f042 0201 	orr.w	r2, r2, #1
 800812e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2220      	movs	r2, #32
 800813a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3708      	adds	r7, #8
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	02008000 	.word	0x02008000

0800815c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	699b      	ldr	r3, [r3, #24]
 800816a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008178:	2b00      	cmp	r3, #0
 800817a:	d005      	beq.n	8008188 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008180:	68ba      	ldr	r2, [r7, #8]
 8008182:	68f9      	ldr	r1, [r7, #12]
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	4798      	blx	r3
  }
}
 8008188:	bf00      	nop
 800818a:	3710      	adds	r7, #16
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008190:	b480      	push	{r7}
 8008192:	b083      	sub	sp, #12
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	2b20      	cmp	r3, #32
 80081a4:	d138      	bne.n	8008218 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d101      	bne.n	80081b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80081b0:	2302      	movs	r3, #2
 80081b2:	e032      	b.n	800821a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2224      	movs	r2, #36	; 0x24
 80081c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f022 0201 	bic.w	r2, r2, #1
 80081d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80081e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	6819      	ldr	r1, [r3, #0]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	683a      	ldr	r2, [r7, #0]
 80081f0:	430a      	orrs	r2, r1
 80081f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f042 0201 	orr.w	r2, r2, #1
 8008202:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2220      	movs	r2, #32
 8008208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008214:	2300      	movs	r3, #0
 8008216:	e000      	b.n	800821a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008218:	2302      	movs	r3, #2
  }
}
 800821a:	4618      	mov	r0, r3
 800821c:	370c      	adds	r7, #12
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr

08008226 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008226:	b480      	push	{r7}
 8008228:	b085      	sub	sp, #20
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
 800822e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008236:	b2db      	uxtb	r3, r3
 8008238:	2b20      	cmp	r3, #32
 800823a:	d139      	bne.n	80082b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008242:	2b01      	cmp	r3, #1
 8008244:	d101      	bne.n	800824a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008246:	2302      	movs	r3, #2
 8008248:	e033      	b.n	80082b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2201      	movs	r2, #1
 800824e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2224      	movs	r2, #36	; 0x24
 8008256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f022 0201 	bic.w	r2, r2, #1
 8008268:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008278:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	021b      	lsls	r3, r3, #8
 800827e:	68fa      	ldr	r2, [r7, #12]
 8008280:	4313      	orrs	r3, r2
 8008282:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f042 0201 	orr.w	r2, r2, #1
 800829a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2220      	movs	r2, #32
 80082a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80082ac:	2300      	movs	r3, #0
 80082ae:	e000      	b.n	80082b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80082b0:	2302      	movs	r3, #2
  }
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3714      	adds	r7, #20
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr

080082be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80082be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082c0:	b08f      	sub	sp, #60	; 0x3c
 80082c2:	af0a      	add	r7, sp, #40	; 0x28
 80082c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d101      	bne.n	80082d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	e116      	b.n	80084fe <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d106      	bne.n	80082f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f00e fbc8 	bl	8016a80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2203      	movs	r2, #3
 80082f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008300:	2b00      	cmp	r3, #0
 8008302:	d102      	bne.n	800830a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4618      	mov	r0, r3
 8008310:	f00a fcf7 	bl	8012d02 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	603b      	str	r3, [r7, #0]
 800831a:	687e      	ldr	r6, [r7, #4]
 800831c:	466d      	mov	r5, sp
 800831e:	f106 0410 	add.w	r4, r6, #16
 8008322:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008324:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008326:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008328:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800832a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800832e:	e885 0003 	stmia.w	r5, {r0, r1}
 8008332:	1d33      	adds	r3, r6, #4
 8008334:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008336:	6838      	ldr	r0, [r7, #0]
 8008338:	f00a fbc2 	bl	8012ac0 <USB_CoreInit>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	d005      	beq.n	800834e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2202      	movs	r2, #2
 8008346:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	e0d7      	b.n	80084fe <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2100      	movs	r1, #0
 8008354:	4618      	mov	r0, r3
 8008356:	f00a fce5 	bl	8012d24 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800835a:	2300      	movs	r3, #0
 800835c:	73fb      	strb	r3, [r7, #15]
 800835e:	e04a      	b.n	80083f6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008360:	7bfa      	ldrb	r2, [r7, #15]
 8008362:	6879      	ldr	r1, [r7, #4]
 8008364:	4613      	mov	r3, r2
 8008366:	00db      	lsls	r3, r3, #3
 8008368:	4413      	add	r3, r2
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	440b      	add	r3, r1
 800836e:	333d      	adds	r3, #61	; 0x3d
 8008370:	2201      	movs	r2, #1
 8008372:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008374:	7bfa      	ldrb	r2, [r7, #15]
 8008376:	6879      	ldr	r1, [r7, #4]
 8008378:	4613      	mov	r3, r2
 800837a:	00db      	lsls	r3, r3, #3
 800837c:	4413      	add	r3, r2
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	440b      	add	r3, r1
 8008382:	333c      	adds	r3, #60	; 0x3c
 8008384:	7bfa      	ldrb	r2, [r7, #15]
 8008386:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008388:	7bfa      	ldrb	r2, [r7, #15]
 800838a:	7bfb      	ldrb	r3, [r7, #15]
 800838c:	b298      	uxth	r0, r3
 800838e:	6879      	ldr	r1, [r7, #4]
 8008390:	4613      	mov	r3, r2
 8008392:	00db      	lsls	r3, r3, #3
 8008394:	4413      	add	r3, r2
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	440b      	add	r3, r1
 800839a:	3356      	adds	r3, #86	; 0x56
 800839c:	4602      	mov	r2, r0
 800839e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80083a0:	7bfa      	ldrb	r2, [r7, #15]
 80083a2:	6879      	ldr	r1, [r7, #4]
 80083a4:	4613      	mov	r3, r2
 80083a6:	00db      	lsls	r3, r3, #3
 80083a8:	4413      	add	r3, r2
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	440b      	add	r3, r1
 80083ae:	3340      	adds	r3, #64	; 0x40
 80083b0:	2200      	movs	r2, #0
 80083b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80083b4:	7bfa      	ldrb	r2, [r7, #15]
 80083b6:	6879      	ldr	r1, [r7, #4]
 80083b8:	4613      	mov	r3, r2
 80083ba:	00db      	lsls	r3, r3, #3
 80083bc:	4413      	add	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	440b      	add	r3, r1
 80083c2:	3344      	adds	r3, #68	; 0x44
 80083c4:	2200      	movs	r2, #0
 80083c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80083c8:	7bfa      	ldrb	r2, [r7, #15]
 80083ca:	6879      	ldr	r1, [r7, #4]
 80083cc:	4613      	mov	r3, r2
 80083ce:	00db      	lsls	r3, r3, #3
 80083d0:	4413      	add	r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	440b      	add	r3, r1
 80083d6:	3348      	adds	r3, #72	; 0x48
 80083d8:	2200      	movs	r2, #0
 80083da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80083dc:	7bfa      	ldrb	r2, [r7, #15]
 80083de:	6879      	ldr	r1, [r7, #4]
 80083e0:	4613      	mov	r3, r2
 80083e2:	00db      	lsls	r3, r3, #3
 80083e4:	4413      	add	r3, r2
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	440b      	add	r3, r1
 80083ea:	334c      	adds	r3, #76	; 0x4c
 80083ec:	2200      	movs	r2, #0
 80083ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80083f0:	7bfb      	ldrb	r3, [r7, #15]
 80083f2:	3301      	adds	r3, #1
 80083f4:	73fb      	strb	r3, [r7, #15]
 80083f6:	7bfa      	ldrb	r2, [r7, #15]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d3af      	bcc.n	8008360 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008400:	2300      	movs	r3, #0
 8008402:	73fb      	strb	r3, [r7, #15]
 8008404:	e044      	b.n	8008490 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008406:	7bfa      	ldrb	r2, [r7, #15]
 8008408:	6879      	ldr	r1, [r7, #4]
 800840a:	4613      	mov	r3, r2
 800840c:	00db      	lsls	r3, r3, #3
 800840e:	4413      	add	r3, r2
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	440b      	add	r3, r1
 8008414:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008418:	2200      	movs	r2, #0
 800841a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800841c:	7bfa      	ldrb	r2, [r7, #15]
 800841e:	6879      	ldr	r1, [r7, #4]
 8008420:	4613      	mov	r3, r2
 8008422:	00db      	lsls	r3, r3, #3
 8008424:	4413      	add	r3, r2
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	440b      	add	r3, r1
 800842a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800842e:	7bfa      	ldrb	r2, [r7, #15]
 8008430:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008432:	7bfa      	ldrb	r2, [r7, #15]
 8008434:	6879      	ldr	r1, [r7, #4]
 8008436:	4613      	mov	r3, r2
 8008438:	00db      	lsls	r3, r3, #3
 800843a:	4413      	add	r3, r2
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	440b      	add	r3, r1
 8008440:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008444:	2200      	movs	r2, #0
 8008446:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008448:	7bfa      	ldrb	r2, [r7, #15]
 800844a:	6879      	ldr	r1, [r7, #4]
 800844c:	4613      	mov	r3, r2
 800844e:	00db      	lsls	r3, r3, #3
 8008450:	4413      	add	r3, r2
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	440b      	add	r3, r1
 8008456:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800845a:	2200      	movs	r2, #0
 800845c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800845e:	7bfa      	ldrb	r2, [r7, #15]
 8008460:	6879      	ldr	r1, [r7, #4]
 8008462:	4613      	mov	r3, r2
 8008464:	00db      	lsls	r3, r3, #3
 8008466:	4413      	add	r3, r2
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	440b      	add	r3, r1
 800846c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008470:	2200      	movs	r2, #0
 8008472:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008474:	7bfa      	ldrb	r2, [r7, #15]
 8008476:	6879      	ldr	r1, [r7, #4]
 8008478:	4613      	mov	r3, r2
 800847a:	00db      	lsls	r3, r3, #3
 800847c:	4413      	add	r3, r2
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	440b      	add	r3, r1
 8008482:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008486:	2200      	movs	r2, #0
 8008488:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800848a:	7bfb      	ldrb	r3, [r7, #15]
 800848c:	3301      	adds	r3, #1
 800848e:	73fb      	strb	r3, [r7, #15]
 8008490:	7bfa      	ldrb	r2, [r7, #15]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	429a      	cmp	r2, r3
 8008498:	d3b5      	bcc.n	8008406 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	603b      	str	r3, [r7, #0]
 80084a0:	687e      	ldr	r6, [r7, #4]
 80084a2:	466d      	mov	r5, sp
 80084a4:	f106 0410 	add.w	r4, r6, #16
 80084a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80084aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80084ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80084ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80084b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80084b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80084b8:	1d33      	adds	r3, r6, #4
 80084ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80084bc:	6838      	ldr	r0, [r7, #0]
 80084be:	f00a fc7d 	bl	8012dbc <USB_DevInit>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d005      	beq.n	80084d4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2202      	movs	r2, #2
 80084cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80084d0:	2301      	movs	r3, #1
 80084d2:	e014      	b.n	80084fe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2201      	movs	r2, #1
 80084e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d102      	bne.n	80084f2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f001 f96f 	bl	80097d0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4618      	mov	r0, r3
 80084f8:	f00b fcbf 	bl	8013e7a <USB_DevDisconnect>

  return HAL_OK;
 80084fc:	2300      	movs	r3, #0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3714      	adds	r7, #20
 8008502:	46bd      	mov	sp, r7
 8008504:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008506 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b084      	sub	sp, #16
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800851a:	2b01      	cmp	r3, #1
 800851c:	d101      	bne.n	8008522 <HAL_PCD_Start+0x1c>
 800851e:	2302      	movs	r3, #2
 8008520:	e022      	b.n	8008568 <HAL_PCD_Start+0x62>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2201      	movs	r2, #1
 8008526:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800852e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008532:	2b00      	cmp	r3, #0
 8008534:	d109      	bne.n	800854a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800853a:	2b01      	cmp	r3, #1
 800853c:	d105      	bne.n	800854a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008542:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4618      	mov	r0, r3
 8008550:	f00a fbc6 	bl	8012ce0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4618      	mov	r0, r3
 800855a:	f00b fc6d 	bl	8013e38 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008566:	2300      	movs	r3, #0
}
 8008568:	4618      	mov	r0, r3
 800856a:	3710      	adds	r7, #16
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008570:	b590      	push	{r4, r7, lr}
 8008572:	b08d      	sub	sp, #52	; 0x34
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800857e:	6a3b      	ldr	r3, [r7, #32]
 8008580:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4618      	mov	r0, r3
 8008588:	f00b fd2b 	bl	8013fe2 <USB_GetMode>
 800858c:	4603      	mov	r3, r0
 800858e:	2b00      	cmp	r3, #0
 8008590:	f040 84b7 	bne.w	8008f02 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4618      	mov	r0, r3
 800859a:	f00b fc8f 	bl	8013ebc <USB_ReadInterrupts>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	f000 84ad 	beq.w	8008f00 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	0a1b      	lsrs	r3, r3, #8
 80085b0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4618      	mov	r0, r3
 80085c0:	f00b fc7c 	bl	8013ebc <USB_ReadInterrupts>
 80085c4:	4603      	mov	r3, r0
 80085c6:	f003 0302 	and.w	r3, r3, #2
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	d107      	bne.n	80085de <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	695a      	ldr	r2, [r3, #20]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f002 0202 	and.w	r2, r2, #2
 80085dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4618      	mov	r0, r3
 80085e4:	f00b fc6a 	bl	8013ebc <USB_ReadInterrupts>
 80085e8:	4603      	mov	r3, r0
 80085ea:	f003 0310 	and.w	r3, r3, #16
 80085ee:	2b10      	cmp	r3, #16
 80085f0:	d161      	bne.n	80086b6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	699a      	ldr	r2, [r3, #24]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f022 0210 	bic.w	r2, r2, #16
 8008600:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008602:	6a3b      	ldr	r3, [r7, #32]
 8008604:	6a1b      	ldr	r3, [r3, #32]
 8008606:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008608:	69bb      	ldr	r3, [r7, #24]
 800860a:	f003 020f 	and.w	r2, r3, #15
 800860e:	4613      	mov	r3, r2
 8008610:	00db      	lsls	r3, r3, #3
 8008612:	4413      	add	r3, r2
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	4413      	add	r3, r2
 800861e:	3304      	adds	r3, #4
 8008620:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	0c5b      	lsrs	r3, r3, #17
 8008626:	f003 030f 	and.w	r3, r3, #15
 800862a:	2b02      	cmp	r3, #2
 800862c:	d124      	bne.n	8008678 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800862e:	69ba      	ldr	r2, [r7, #24]
 8008630:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008634:	4013      	ands	r3, r2
 8008636:	2b00      	cmp	r3, #0
 8008638:	d035      	beq.n	80086a6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	091b      	lsrs	r3, r3, #4
 8008642:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008644:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008648:	b29b      	uxth	r3, r3
 800864a:	461a      	mov	r2, r3
 800864c:	6a38      	ldr	r0, [r7, #32]
 800864e:	f00b faa1 	bl	8013b94 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	68da      	ldr	r2, [r3, #12]
 8008656:	69bb      	ldr	r3, [r7, #24]
 8008658:	091b      	lsrs	r3, r3, #4
 800865a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800865e:	441a      	add	r2, r3
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	695a      	ldr	r2, [r3, #20]
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	091b      	lsrs	r3, r3, #4
 800866c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008670:	441a      	add	r2, r3
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	615a      	str	r2, [r3, #20]
 8008676:	e016      	b.n	80086a6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008678:	69bb      	ldr	r3, [r7, #24]
 800867a:	0c5b      	lsrs	r3, r3, #17
 800867c:	f003 030f 	and.w	r3, r3, #15
 8008680:	2b06      	cmp	r3, #6
 8008682:	d110      	bne.n	80086a6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800868a:	2208      	movs	r2, #8
 800868c:	4619      	mov	r1, r3
 800868e:	6a38      	ldr	r0, [r7, #32]
 8008690:	f00b fa80 	bl	8013b94 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	695a      	ldr	r2, [r3, #20]
 8008698:	69bb      	ldr	r3, [r7, #24]
 800869a:	091b      	lsrs	r3, r3, #4
 800869c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80086a0:	441a      	add	r2, r3
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	699a      	ldr	r2, [r3, #24]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f042 0210 	orr.w	r2, r2, #16
 80086b4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4618      	mov	r0, r3
 80086bc:	f00b fbfe 	bl	8013ebc <USB_ReadInterrupts>
 80086c0:	4603      	mov	r3, r0
 80086c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80086c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80086ca:	f040 80a7 	bne.w	800881c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80086ce:	2300      	movs	r3, #0
 80086d0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4618      	mov	r0, r3
 80086d8:	f00b fc03 	bl	8013ee2 <USB_ReadDevAllOutEpInterrupt>
 80086dc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80086de:	e099      	b.n	8008814 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80086e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e2:	f003 0301 	and.w	r3, r3, #1
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	f000 808e 	beq.w	8008808 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086f2:	b2d2      	uxtb	r2, r2
 80086f4:	4611      	mov	r1, r2
 80086f6:	4618      	mov	r0, r3
 80086f8:	f00b fc27 	bl	8013f4a <USB_ReadDevOutEPInterrupt>
 80086fc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	f003 0301 	and.w	r3, r3, #1
 8008704:	2b00      	cmp	r3, #0
 8008706:	d00c      	beq.n	8008722 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870a:	015a      	lsls	r2, r3, #5
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	4413      	add	r3, r2
 8008710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008714:	461a      	mov	r2, r3
 8008716:	2301      	movs	r3, #1
 8008718:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800871a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 fed1 	bl	80094c4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	f003 0308 	and.w	r3, r3, #8
 8008728:	2b00      	cmp	r3, #0
 800872a:	d00c      	beq.n	8008746 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800872c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872e:	015a      	lsls	r2, r3, #5
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	4413      	add	r3, r2
 8008734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008738:	461a      	mov	r2, r3
 800873a:	2308      	movs	r3, #8
 800873c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800873e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 ffa7 	bl	8009694 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	f003 0310 	and.w	r3, r3, #16
 800874c:	2b00      	cmp	r3, #0
 800874e:	d008      	beq.n	8008762 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008752:	015a      	lsls	r2, r3, #5
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	4413      	add	r3, r2
 8008758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800875c:	461a      	mov	r2, r3
 800875e:	2310      	movs	r3, #16
 8008760:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	f003 0302 	and.w	r3, r3, #2
 8008768:	2b00      	cmp	r3, #0
 800876a:	d030      	beq.n	80087ce <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800876c:	6a3b      	ldr	r3, [r7, #32]
 800876e:	695b      	ldr	r3, [r3, #20]
 8008770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008774:	2b80      	cmp	r3, #128	; 0x80
 8008776:	d109      	bne.n	800878c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	69fa      	ldr	r2, [r7, #28]
 8008782:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008786:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800878a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800878c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800878e:	4613      	mov	r3, r2
 8008790:	00db      	lsls	r3, r3, #3
 8008792:	4413      	add	r3, r2
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	4413      	add	r3, r2
 800879e:	3304      	adds	r3, #4
 80087a0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	78db      	ldrb	r3, [r3, #3]
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d108      	bne.n	80087bc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	2200      	movs	r2, #0
 80087ae:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80087b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	4619      	mov	r1, r3
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f00e fa5a 	bl	8016c70 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80087bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087be:	015a      	lsls	r2, r3, #5
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	4413      	add	r3, r2
 80087c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087c8:	461a      	mov	r2, r3
 80087ca:	2302      	movs	r3, #2
 80087cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	f003 0320 	and.w	r3, r3, #32
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d008      	beq.n	80087ea <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80087d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087da:	015a      	lsls	r2, r3, #5
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	4413      	add	r3, r2
 80087e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087e4:	461a      	mov	r2, r3
 80087e6:	2320      	movs	r3, #32
 80087e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d009      	beq.n	8008808 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80087f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f6:	015a      	lsls	r2, r3, #5
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	4413      	add	r3, r2
 80087fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008800:	461a      	mov	r2, r3
 8008802:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008806:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880a:	3301      	adds	r3, #1
 800880c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800880e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008810:	085b      	lsrs	r3, r3, #1
 8008812:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008816:	2b00      	cmp	r3, #0
 8008818:	f47f af62 	bne.w	80086e0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4618      	mov	r0, r3
 8008822:	f00b fb4b 	bl	8013ebc <USB_ReadInterrupts>
 8008826:	4603      	mov	r3, r0
 8008828:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800882c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008830:	f040 80db 	bne.w	80089ea <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4618      	mov	r0, r3
 800883a:	f00b fb6c 	bl	8013f16 <USB_ReadDevAllInEpInterrupt>
 800883e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008840:	2300      	movs	r3, #0
 8008842:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008844:	e0cd      	b.n	80089e2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008848:	f003 0301 	and.w	r3, r3, #1
 800884c:	2b00      	cmp	r3, #0
 800884e:	f000 80c2 	beq.w	80089d6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008858:	b2d2      	uxtb	r2, r2
 800885a:	4611      	mov	r1, r2
 800885c:	4618      	mov	r0, r3
 800885e:	f00b fb92 	bl	8013f86 <USB_ReadDevInEPInterrupt>
 8008862:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	f003 0301 	and.w	r3, r3, #1
 800886a:	2b00      	cmp	r3, #0
 800886c:	d057      	beq.n	800891e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800886e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008870:	f003 030f 	and.w	r3, r3, #15
 8008874:	2201      	movs	r2, #1
 8008876:	fa02 f303 	lsl.w	r3, r2, r3
 800887a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008882:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	43db      	mvns	r3, r3
 8008888:	69f9      	ldr	r1, [r7, #28]
 800888a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800888e:	4013      	ands	r3, r2
 8008890:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008894:	015a      	lsls	r2, r3, #5
 8008896:	69fb      	ldr	r3, [r7, #28]
 8008898:	4413      	add	r3, r2
 800889a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800889e:	461a      	mov	r2, r3
 80088a0:	2301      	movs	r3, #1
 80088a2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d132      	bne.n	8008912 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80088ac:	6879      	ldr	r1, [r7, #4]
 80088ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088b0:	4613      	mov	r3, r2
 80088b2:	00db      	lsls	r3, r3, #3
 80088b4:	4413      	add	r3, r2
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	440b      	add	r3, r1
 80088ba:	3348      	adds	r3, #72	; 0x48
 80088bc:	6819      	ldr	r1, [r3, #0]
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088c2:	4613      	mov	r3, r2
 80088c4:	00db      	lsls	r3, r3, #3
 80088c6:	4413      	add	r3, r2
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	4403      	add	r3, r0
 80088cc:	3344      	adds	r3, #68	; 0x44
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4419      	add	r1, r3
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088d6:	4613      	mov	r3, r2
 80088d8:	00db      	lsls	r3, r3, #3
 80088da:	4413      	add	r3, r2
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	4403      	add	r3, r0
 80088e0:	3348      	adds	r3, #72	; 0x48
 80088e2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80088e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d113      	bne.n	8008912 <HAL_PCD_IRQHandler+0x3a2>
 80088ea:	6879      	ldr	r1, [r7, #4]
 80088ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ee:	4613      	mov	r3, r2
 80088f0:	00db      	lsls	r3, r3, #3
 80088f2:	4413      	add	r3, r2
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	440b      	add	r3, r1
 80088f8:	334c      	adds	r3, #76	; 0x4c
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d108      	bne.n	8008912 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6818      	ldr	r0, [r3, #0]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800890a:	461a      	mov	r2, r3
 800890c:	2101      	movs	r1, #1
 800890e:	f00b fb9b 	bl	8014048 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008914:	b2db      	uxtb	r3, r3
 8008916:	4619      	mov	r1, r3
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f00e f924 	bl	8016b66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	f003 0308 	and.w	r3, r3, #8
 8008924:	2b00      	cmp	r3, #0
 8008926:	d008      	beq.n	800893a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892a:	015a      	lsls	r2, r3, #5
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	4413      	add	r3, r2
 8008930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008934:	461a      	mov	r2, r3
 8008936:	2308      	movs	r3, #8
 8008938:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	f003 0310 	and.w	r3, r3, #16
 8008940:	2b00      	cmp	r3, #0
 8008942:	d008      	beq.n	8008956 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008946:	015a      	lsls	r2, r3, #5
 8008948:	69fb      	ldr	r3, [r7, #28]
 800894a:	4413      	add	r3, r2
 800894c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008950:	461a      	mov	r2, r3
 8008952:	2310      	movs	r3, #16
 8008954:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800895c:	2b00      	cmp	r3, #0
 800895e:	d008      	beq.n	8008972 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008962:	015a      	lsls	r2, r3, #5
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	4413      	add	r3, r2
 8008968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800896c:	461a      	mov	r2, r3
 800896e:	2340      	movs	r3, #64	; 0x40
 8008970:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	f003 0302 	and.w	r3, r3, #2
 8008978:	2b00      	cmp	r3, #0
 800897a:	d023      	beq.n	80089c4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800897c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800897e:	6a38      	ldr	r0, [r7, #32]
 8008980:	f00a fb7a 	bl	8013078 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008986:	4613      	mov	r3, r2
 8008988:	00db      	lsls	r3, r3, #3
 800898a:	4413      	add	r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	3338      	adds	r3, #56	; 0x38
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	4413      	add	r3, r2
 8008994:	3304      	adds	r3, #4
 8008996:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	78db      	ldrb	r3, [r3, #3]
 800899c:	2b01      	cmp	r3, #1
 800899e:	d108      	bne.n	80089b2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	2200      	movs	r2, #0
 80089a4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80089a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	4619      	mov	r1, r3
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f00e f971 	bl	8016c94 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80089b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b4:	015a      	lsls	r2, r3, #5
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	4413      	add	r3, r2
 80089ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089be:	461a      	mov	r2, r3
 80089c0:	2302      	movs	r3, #2
 80089c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d003      	beq.n	80089d6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80089ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 fcea 	bl	80093aa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80089d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d8:	3301      	adds	r3, #1
 80089da:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80089dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089de:	085b      	lsrs	r3, r3, #1
 80089e0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80089e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	f47f af2e 	bne.w	8008846 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4618      	mov	r0, r3
 80089f0:	f00b fa64 	bl	8013ebc <USB_ReadInterrupts>
 80089f4:	4603      	mov	r3, r0
 80089f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089fe:	d122      	bne.n	8008a46 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	69fa      	ldr	r2, [r7, #28]
 8008a0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a0e:	f023 0301 	bic.w	r3, r3, #1
 8008a12:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d108      	bne.n	8008a30 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008a26:	2100      	movs	r1, #0
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 fef5 	bl	8009818 <HAL_PCDEx_LPM_Callback>
 8008a2e:	e002      	b.n	8008a36 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f00e f90f 	bl	8016c54 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	695a      	ldr	r2, [r3, #20]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008a44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f00b fa36 	bl	8013ebc <USB_ReadInterrupts>
 8008a50:	4603      	mov	r3, r0
 8008a52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a5a:	d112      	bne.n	8008a82 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	f003 0301 	and.w	r3, r3, #1
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d102      	bne.n	8008a72 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f00e f8cb 	bl	8016c08 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	695a      	ldr	r2, [r3, #20]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008a80:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4618      	mov	r0, r3
 8008a88:	f00b fa18 	bl	8013ebc <USB_ReadInterrupts>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a96:	d121      	bne.n	8008adc <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	695a      	ldr	r2, [r3, #20]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008aa6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d111      	bne.n	8008ad6 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ac0:	089b      	lsrs	r3, r3, #2
 8008ac2:	f003 020f 	and.w	r2, r3, #15
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008acc:	2101      	movs	r1, #1
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 fea2 	bl	8009818 <HAL_PCDEx_LPM_Callback>
 8008ad4:	e002      	b.n	8008adc <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f00e f896 	bl	8016c08 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f00b f9eb 	bl	8013ebc <USB_ReadInterrupts>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008af0:	f040 80b7 	bne.w	8008c62 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	69fa      	ldr	r2, [r7, #28]
 8008afe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b02:	f023 0301 	bic.w	r3, r3, #1
 8008b06:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2110      	movs	r1, #16
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f00a fab2 	bl	8013078 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b14:	2300      	movs	r3, #0
 8008b16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b18:	e046      	b.n	8008ba8 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b1c:	015a      	lsls	r2, r3, #5
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	4413      	add	r3, r2
 8008b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b26:	461a      	mov	r2, r3
 8008b28:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b2c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b30:	015a      	lsls	r2, r3, #5
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	4413      	add	r3, r2
 8008b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b3e:	0151      	lsls	r1, r2, #5
 8008b40:	69fa      	ldr	r2, [r7, #28]
 8008b42:	440a      	add	r2, r1
 8008b44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b48:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b4c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b50:	015a      	lsls	r2, r3, #5
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	4413      	add	r3, r2
 8008b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b60:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b64:	015a      	lsls	r2, r3, #5
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	4413      	add	r3, r2
 8008b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b72:	0151      	lsls	r1, r2, #5
 8008b74:	69fa      	ldr	r2, [r7, #28]
 8008b76:	440a      	add	r2, r1
 8008b78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b80:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b84:	015a      	lsls	r2, r3, #5
 8008b86:	69fb      	ldr	r3, [r7, #28]
 8008b88:	4413      	add	r3, r2
 8008b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b92:	0151      	lsls	r1, r2, #5
 8008b94:	69fa      	ldr	r2, [r7, #28]
 8008b96:	440a      	add	r2, r1
 8008b98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008ba0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d3b3      	bcc.n	8008b1a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bb8:	69db      	ldr	r3, [r3, #28]
 8008bba:	69fa      	ldr	r2, [r7, #28]
 8008bbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bc0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008bc4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d016      	beq.n	8008bfc <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008bce:	69fb      	ldr	r3, [r7, #28]
 8008bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bd8:	69fa      	ldr	r2, [r7, #28]
 8008bda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bde:	f043 030b 	orr.w	r3, r3, #11
 8008be2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008be6:	69fb      	ldr	r3, [r7, #28]
 8008be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bee:	69fa      	ldr	r2, [r7, #28]
 8008bf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bf4:	f043 030b 	orr.w	r3, r3, #11
 8008bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8008bfa:	e015      	b.n	8008c28 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c02:	695a      	ldr	r2, [r3, #20]
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	f242 032b 	movw	r3, #8235	; 0x202b
 8008c10:	4313      	orrs	r3, r2
 8008c12:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c1a:	691b      	ldr	r3, [r3, #16]
 8008c1c:	69fa      	ldr	r2, [r7, #28]
 8008c1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c22:	f043 030b 	orr.w	r3, r3, #11
 8008c26:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	69fa      	ldr	r2, [r7, #28]
 8008c32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c36:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008c3a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6818      	ldr	r0, [r3, #0]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	68db      	ldr	r3, [r3, #12]
 8008c44:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	f00b f9fb 	bl	8014048 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	695a      	ldr	r2, [r3, #20]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008c60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4618      	mov	r0, r3
 8008c68:	f00b f928 	bl	8013ebc <USB_ReadInterrupts>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c76:	d124      	bne.n	8008cc2 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f00b f9bf 	bl	8014000 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4618      	mov	r0, r3
 8008c88:	f00a fa73 	bl	8013172 <USB_GetDevSpeed>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	461a      	mov	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681c      	ldr	r4, [r3, #0]
 8008c98:	f001 fd88 	bl	800a7ac <HAL_RCC_GetHCLKFreq>
 8008c9c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	f009 ff78 	bl	8012b9c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f00d ff82 	bl	8016bb6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	695a      	ldr	r2, [r3, #20]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008cc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f00b f8f8 	bl	8013ebc <USB_ReadInterrupts>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	f003 0308 	and.w	r3, r3, #8
 8008cd2:	2b08      	cmp	r3, #8
 8008cd4:	d10a      	bne.n	8008cec <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f00d ff5f 	bl	8016b9a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	695a      	ldr	r2, [r3, #20]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f002 0208 	and.w	r2, r2, #8
 8008cea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f00b f8e3 	bl	8013ebc <USB_ReadInterrupts>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cfc:	2b80      	cmp	r3, #128	; 0x80
 8008cfe:	d122      	bne.n	8008d46 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008d00:	6a3b      	ldr	r3, [r7, #32]
 8008d02:	699b      	ldr	r3, [r3, #24]
 8008d04:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d08:	6a3b      	ldr	r3, [r7, #32]
 8008d0a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8008d10:	e014      	b.n	8008d3c <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008d12:	6879      	ldr	r1, [r7, #4]
 8008d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d16:	4613      	mov	r3, r2
 8008d18:	00db      	lsls	r3, r3, #3
 8008d1a:	4413      	add	r3, r2
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	440b      	add	r3, r1
 8008d20:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d105      	bne.n	8008d36 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2c:	b2db      	uxtb	r3, r3
 8008d2e:	4619      	mov	r1, r3
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 fb09 	bl	8009348 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d38:	3301      	adds	r3, #1
 8008d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d3e5      	bcc.n	8008d12 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f00b f8b6 	bl	8013ebc <USB_ReadInterrupts>
 8008d50:	4603      	mov	r3, r0
 8008d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d5a:	d13b      	bne.n	8008dd4 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8008d60:	e02b      	b.n	8008dba <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d64:	015a      	lsls	r2, r3, #5
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	4413      	add	r3, r2
 8008d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008d72:	6879      	ldr	r1, [r7, #4]
 8008d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d76:	4613      	mov	r3, r2
 8008d78:	00db      	lsls	r3, r3, #3
 8008d7a:	4413      	add	r3, r2
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	440b      	add	r3, r1
 8008d80:	3340      	adds	r3, #64	; 0x40
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d115      	bne.n	8008db4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008d88:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	da12      	bge.n	8008db4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008d8e:	6879      	ldr	r1, [r7, #4]
 8008d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d92:	4613      	mov	r3, r2
 8008d94:	00db      	lsls	r3, r3, #3
 8008d96:	4413      	add	r3, r2
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	440b      	add	r3, r1
 8008d9c:	333f      	adds	r3, #63	; 0x3f
 8008d9e:	2201      	movs	r2, #1
 8008da0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	4619      	mov	r1, r3
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 faca 	bl	8009348 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db6:	3301      	adds	r3, #1
 8008db8:	627b      	str	r3, [r7, #36]	; 0x24
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d3ce      	bcc.n	8008d62 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	695a      	ldr	r2, [r3, #20]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008dd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f00b f86f 	bl	8013ebc <USB_ReadInterrupts>
 8008dde:	4603      	mov	r3, r0
 8008de0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008de4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008de8:	d155      	bne.n	8008e96 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008dea:	2301      	movs	r3, #1
 8008dec:	627b      	str	r3, [r7, #36]	; 0x24
 8008dee:	e045      	b.n	8008e7c <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df2:	015a      	lsls	r2, r3, #5
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	4413      	add	r3, r2
 8008df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008e00:	6879      	ldr	r1, [r7, #4]
 8008e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e04:	4613      	mov	r3, r2
 8008e06:	00db      	lsls	r3, r3, #3
 8008e08:	4413      	add	r3, r2
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	440b      	add	r3, r1
 8008e0e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d12e      	bne.n	8008e76 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008e18:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	da2b      	bge.n	8008e76 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008e2a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d121      	bne.n	8008e76 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008e32:	6879      	ldr	r1, [r7, #4]
 8008e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e36:	4613      	mov	r3, r2
 8008e38:	00db      	lsls	r3, r3, #3
 8008e3a:	4413      	add	r3, r2
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	440b      	add	r3, r1
 8008e40:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008e44:	2201      	movs	r2, #1
 8008e46:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008e48:	6a3b      	ldr	r3, [r7, #32]
 8008e4a:	699b      	ldr	r3, [r3, #24]
 8008e4c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008e50:	6a3b      	ldr	r3, [r7, #32]
 8008e52:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008e54:	6a3b      	ldr	r3, [r7, #32]
 8008e56:	695b      	ldr	r3, [r3, #20]
 8008e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d10a      	bne.n	8008e76 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	69fa      	ldr	r2, [r7, #28]
 8008e6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e72:	6053      	str	r3, [r2, #4]
            break;
 8008e74:	e007      	b.n	8008e86 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e78:	3301      	adds	r3, #1
 8008e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d3b4      	bcc.n	8008df0 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	695a      	ldr	r2, [r3, #20]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008e94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f00b f80e 	bl	8013ebc <USB_ReadInterrupts>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eaa:	d10a      	bne.n	8008ec2 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f00d ff03 	bl	8016cb8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	695a      	ldr	r2, [r3, #20]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008ec0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f00a fff8 	bl	8013ebc <USB_ReadInterrupts>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	f003 0304 	and.w	r3, r3, #4
 8008ed2:	2b04      	cmp	r3, #4
 8008ed4:	d115      	bne.n	8008f02 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	f003 0304 	and.w	r3, r3, #4
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d002      	beq.n	8008eee <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f00d fef3 	bl	8016cd4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	6859      	ldr	r1, [r3, #4]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	69ba      	ldr	r2, [r7, #24]
 8008efa:	430a      	orrs	r2, r1
 8008efc:	605a      	str	r2, [r3, #4]
 8008efe:	e000      	b.n	8008f02 <HAL_PCD_IRQHandler+0x992>
      return;
 8008f00:	bf00      	nop
    }
  }
}
 8008f02:	3734      	adds	r7, #52	; 0x34
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd90      	pop	{r4, r7, pc}

08008f08 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	460b      	mov	r3, r1
 8008f12:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d101      	bne.n	8008f22 <HAL_PCD_SetAddress+0x1a>
 8008f1e:	2302      	movs	r3, #2
 8008f20:	e013      	b.n	8008f4a <HAL_PCD_SetAddress+0x42>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2201      	movs	r2, #1
 8008f26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	78fa      	ldrb	r2, [r7, #3]
 8008f2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	78fa      	ldrb	r2, [r7, #3]
 8008f38:	4611      	mov	r1, r2
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f00a ff56 	bl	8013dec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3708      	adds	r7, #8
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b084      	sub	sp, #16
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
 8008f5a:	4608      	mov	r0, r1
 8008f5c:	4611      	mov	r1, r2
 8008f5e:	461a      	mov	r2, r3
 8008f60:	4603      	mov	r3, r0
 8008f62:	70fb      	strb	r3, [r7, #3]
 8008f64:	460b      	mov	r3, r1
 8008f66:	803b      	strh	r3, [r7, #0]
 8008f68:	4613      	mov	r3, r2
 8008f6a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008f70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	da0f      	bge.n	8008f98 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f78:	78fb      	ldrb	r3, [r7, #3]
 8008f7a:	f003 020f 	and.w	r2, r3, #15
 8008f7e:	4613      	mov	r3, r2
 8008f80:	00db      	lsls	r3, r3, #3
 8008f82:	4413      	add	r3, r2
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	3338      	adds	r3, #56	; 0x38
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	3304      	adds	r3, #4
 8008f8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2201      	movs	r2, #1
 8008f94:	705a      	strb	r2, [r3, #1]
 8008f96:	e00f      	b.n	8008fb8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f98:	78fb      	ldrb	r3, [r7, #3]
 8008f9a:	f003 020f 	and.w	r2, r3, #15
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	00db      	lsls	r3, r3, #3
 8008fa2:	4413      	add	r3, r2
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	4413      	add	r3, r2
 8008fae:	3304      	adds	r3, #4
 8008fb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008fb8:	78fb      	ldrb	r3, [r7, #3]
 8008fba:	f003 030f 	and.w	r3, r3, #15
 8008fbe:	b2da      	uxtb	r2, r3
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008fc4:	883a      	ldrh	r2, [r7, #0]
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	78ba      	ldrb	r2, [r7, #2]
 8008fce:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	785b      	ldrb	r3, [r3, #1]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d004      	beq.n	8008fe2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	b29a      	uxth	r2, r3
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008fe2:	78bb      	ldrb	r3, [r7, #2]
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	d102      	bne.n	8008fee <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2200      	movs	r2, #0
 8008fec:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d101      	bne.n	8008ffc <HAL_PCD_EP_Open+0xaa>
 8008ff8:	2302      	movs	r3, #2
 8008ffa:	e00e      	b.n	800901a <HAL_PCD_EP_Open+0xc8>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2201      	movs	r2, #1
 8009000:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	68f9      	ldr	r1, [r7, #12]
 800900a:	4618      	mov	r0, r3
 800900c:	f00a f8d6 	bl	80131bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8009018:	7afb      	ldrb	r3, [r7, #11]
}
 800901a:	4618      	mov	r0, r3
 800901c:	3710      	adds	r7, #16
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}

08009022 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009022:	b580      	push	{r7, lr}
 8009024:	b084      	sub	sp, #16
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
 800902a:	460b      	mov	r3, r1
 800902c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800902e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009032:	2b00      	cmp	r3, #0
 8009034:	da0f      	bge.n	8009056 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009036:	78fb      	ldrb	r3, [r7, #3]
 8009038:	f003 020f 	and.w	r2, r3, #15
 800903c:	4613      	mov	r3, r2
 800903e:	00db      	lsls	r3, r3, #3
 8009040:	4413      	add	r3, r2
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	3338      	adds	r3, #56	; 0x38
 8009046:	687a      	ldr	r2, [r7, #4]
 8009048:	4413      	add	r3, r2
 800904a:	3304      	adds	r3, #4
 800904c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2201      	movs	r2, #1
 8009052:	705a      	strb	r2, [r3, #1]
 8009054:	e00f      	b.n	8009076 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009056:	78fb      	ldrb	r3, [r7, #3]
 8009058:	f003 020f 	and.w	r2, r3, #15
 800905c:	4613      	mov	r3, r2
 800905e:	00db      	lsls	r3, r3, #3
 8009060:	4413      	add	r3, r2
 8009062:	009b      	lsls	r3, r3, #2
 8009064:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	4413      	add	r3, r2
 800906c:	3304      	adds	r3, #4
 800906e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2200      	movs	r2, #0
 8009074:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009076:	78fb      	ldrb	r3, [r7, #3]
 8009078:	f003 030f 	and.w	r3, r3, #15
 800907c:	b2da      	uxtb	r2, r3
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009088:	2b01      	cmp	r3, #1
 800908a:	d101      	bne.n	8009090 <HAL_PCD_EP_Close+0x6e>
 800908c:	2302      	movs	r3, #2
 800908e:	e00e      	b.n	80090ae <HAL_PCD_EP_Close+0x8c>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2201      	movs	r2, #1
 8009094:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	68f9      	ldr	r1, [r7, #12]
 800909e:	4618      	mov	r0, r3
 80090a0:	f00a f914 	bl	80132cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3710      	adds	r7, #16
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b086      	sub	sp, #24
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	60f8      	str	r0, [r7, #12]
 80090be:	607a      	str	r2, [r7, #4]
 80090c0:	603b      	str	r3, [r7, #0]
 80090c2:	460b      	mov	r3, r1
 80090c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80090c6:	7afb      	ldrb	r3, [r7, #11]
 80090c8:	f003 020f 	and.w	r2, r3, #15
 80090cc:	4613      	mov	r3, r2
 80090ce:	00db      	lsls	r3, r3, #3
 80090d0:	4413      	add	r3, r2
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80090d8:	68fa      	ldr	r2, [r7, #12]
 80090da:	4413      	add	r3, r2
 80090dc:	3304      	adds	r3, #4
 80090de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	683a      	ldr	r2, [r7, #0]
 80090ea:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	2200      	movs	r2, #0
 80090f0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	2200      	movs	r2, #0
 80090f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80090f8:	7afb      	ldrb	r3, [r7, #11]
 80090fa:	f003 030f 	and.w	r3, r3, #15
 80090fe:	b2da      	uxtb	r2, r3
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	2b01      	cmp	r3, #1
 800910a:	d102      	bne.n	8009112 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	6818      	ldr	r0, [r3, #0]
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	b2db      	uxtb	r3, r3
 800911c:	461a      	mov	r2, r3
 800911e:	6979      	ldr	r1, [r7, #20]
 8009120:	f00a f9b0 	bl	8013484 <USB_EPStartXfer>

  return HAL_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	4618      	mov	r0, r3
 8009128:	3718      	adds	r7, #24
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800912e:	b480      	push	{r7}
 8009130:	b083      	sub	sp, #12
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
 8009136:	460b      	mov	r3, r1
 8009138:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800913a:	78fb      	ldrb	r3, [r7, #3]
 800913c:	f003 020f 	and.w	r2, r3, #15
 8009140:	6879      	ldr	r1, [r7, #4]
 8009142:	4613      	mov	r3, r2
 8009144:	00db      	lsls	r3, r3, #3
 8009146:	4413      	add	r3, r2
 8009148:	009b      	lsls	r3, r3, #2
 800914a:	440b      	add	r3, r1
 800914c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8009150:	681b      	ldr	r3, [r3, #0]
}
 8009152:	4618      	mov	r0, r3
 8009154:	370c      	adds	r7, #12
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr

0800915e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800915e:	b580      	push	{r7, lr}
 8009160:	b086      	sub	sp, #24
 8009162:	af00      	add	r7, sp, #0
 8009164:	60f8      	str	r0, [r7, #12]
 8009166:	607a      	str	r2, [r7, #4]
 8009168:	603b      	str	r3, [r7, #0]
 800916a:	460b      	mov	r3, r1
 800916c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800916e:	7afb      	ldrb	r3, [r7, #11]
 8009170:	f003 020f 	and.w	r2, r3, #15
 8009174:	4613      	mov	r3, r2
 8009176:	00db      	lsls	r3, r3, #3
 8009178:	4413      	add	r3, r2
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	3338      	adds	r3, #56	; 0x38
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	4413      	add	r3, r2
 8009182:	3304      	adds	r3, #4
 8009184:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	683a      	ldr	r2, [r7, #0]
 8009190:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	2200      	movs	r2, #0
 8009196:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	2201      	movs	r2, #1
 800919c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800919e:	7afb      	ldrb	r3, [r7, #11]
 80091a0:	f003 030f 	and.w	r3, r3, #15
 80091a4:	b2da      	uxtb	r2, r3
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	68db      	ldr	r3, [r3, #12]
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d102      	bne.n	80091b8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	6818      	ldr	r0, [r3, #0]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	461a      	mov	r2, r3
 80091c4:	6979      	ldr	r1, [r7, #20]
 80091c6:	f00a f95d 	bl	8013484 <USB_EPStartXfer>

  return HAL_OK;
 80091ca:	2300      	movs	r3, #0
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3718      	adds	r7, #24
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	460b      	mov	r3, r1
 80091de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80091e0:	78fb      	ldrb	r3, [r7, #3]
 80091e2:	f003 020f 	and.w	r2, r3, #15
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d901      	bls.n	80091f2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80091ee:	2301      	movs	r3, #1
 80091f0:	e050      	b.n	8009294 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80091f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	da0f      	bge.n	800921a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091fa:	78fb      	ldrb	r3, [r7, #3]
 80091fc:	f003 020f 	and.w	r2, r3, #15
 8009200:	4613      	mov	r3, r2
 8009202:	00db      	lsls	r3, r3, #3
 8009204:	4413      	add	r3, r2
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	3338      	adds	r3, #56	; 0x38
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	4413      	add	r3, r2
 800920e:	3304      	adds	r3, #4
 8009210:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2201      	movs	r2, #1
 8009216:	705a      	strb	r2, [r3, #1]
 8009218:	e00d      	b.n	8009236 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800921a:	78fa      	ldrb	r2, [r7, #3]
 800921c:	4613      	mov	r3, r2
 800921e:	00db      	lsls	r3, r3, #3
 8009220:	4413      	add	r3, r2
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	4413      	add	r3, r2
 800922c:	3304      	adds	r3, #4
 800922e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2200      	movs	r2, #0
 8009234:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2201      	movs	r2, #1
 800923a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800923c:	78fb      	ldrb	r3, [r7, #3]
 800923e:	f003 030f 	and.w	r3, r3, #15
 8009242:	b2da      	uxtb	r2, r3
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800924e:	2b01      	cmp	r3, #1
 8009250:	d101      	bne.n	8009256 <HAL_PCD_EP_SetStall+0x82>
 8009252:	2302      	movs	r3, #2
 8009254:	e01e      	b.n	8009294 <HAL_PCD_EP_SetStall+0xc0>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2201      	movs	r2, #1
 800925a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	68f9      	ldr	r1, [r7, #12]
 8009264:	4618      	mov	r0, r3
 8009266:	f00a fced 	bl	8013c44 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800926a:	78fb      	ldrb	r3, [r7, #3]
 800926c:	f003 030f 	and.w	r3, r3, #15
 8009270:	2b00      	cmp	r3, #0
 8009272:	d10a      	bne.n	800928a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6818      	ldr	r0, [r3, #0]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	68db      	ldr	r3, [r3, #12]
 800927c:	b2d9      	uxtb	r1, r3
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009284:	461a      	mov	r2, r3
 8009286:	f00a fedf 	bl	8014048 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009292:	2300      	movs	r3, #0
}
 8009294:	4618      	mov	r0, r3
 8009296:	3710      	adds	r7, #16
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	460b      	mov	r3, r1
 80092a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80092a8:	78fb      	ldrb	r3, [r7, #3]
 80092aa:	f003 020f 	and.w	r2, r3, #15
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d901      	bls.n	80092ba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	e042      	b.n	8009340 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80092ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	da0f      	bge.n	80092e2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80092c2:	78fb      	ldrb	r3, [r7, #3]
 80092c4:	f003 020f 	and.w	r2, r3, #15
 80092c8:	4613      	mov	r3, r2
 80092ca:	00db      	lsls	r3, r3, #3
 80092cc:	4413      	add	r3, r2
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	3338      	adds	r3, #56	; 0x38
 80092d2:	687a      	ldr	r2, [r7, #4]
 80092d4:	4413      	add	r3, r2
 80092d6:	3304      	adds	r3, #4
 80092d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2201      	movs	r2, #1
 80092de:	705a      	strb	r2, [r3, #1]
 80092e0:	e00f      	b.n	8009302 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80092e2:	78fb      	ldrb	r3, [r7, #3]
 80092e4:	f003 020f 	and.w	r2, r3, #15
 80092e8:	4613      	mov	r3, r2
 80092ea:	00db      	lsls	r3, r3, #3
 80092ec:	4413      	add	r3, r2
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	4413      	add	r3, r2
 80092f8:	3304      	adds	r3, #4
 80092fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2200      	movs	r2, #0
 8009300:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2200      	movs	r2, #0
 8009306:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009308:	78fb      	ldrb	r3, [r7, #3]
 800930a:	f003 030f 	and.w	r3, r3, #15
 800930e:	b2da      	uxtb	r2, r3
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800931a:	2b01      	cmp	r3, #1
 800931c:	d101      	bne.n	8009322 <HAL_PCD_EP_ClrStall+0x86>
 800931e:	2302      	movs	r3, #2
 8009320:	e00e      	b.n	8009340 <HAL_PCD_EP_ClrStall+0xa4>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2201      	movs	r2, #1
 8009326:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	68f9      	ldr	r1, [r7, #12]
 8009330:	4618      	mov	r0, r3
 8009332:	f00a fcf5 	bl	8013d20 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	3710      	adds	r7, #16
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	460b      	mov	r3, r1
 8009352:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009354:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009358:	2b00      	cmp	r3, #0
 800935a:	da0c      	bge.n	8009376 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800935c:	78fb      	ldrb	r3, [r7, #3]
 800935e:	f003 020f 	and.w	r2, r3, #15
 8009362:	4613      	mov	r3, r2
 8009364:	00db      	lsls	r3, r3, #3
 8009366:	4413      	add	r3, r2
 8009368:	009b      	lsls	r3, r3, #2
 800936a:	3338      	adds	r3, #56	; 0x38
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	4413      	add	r3, r2
 8009370:	3304      	adds	r3, #4
 8009372:	60fb      	str	r3, [r7, #12]
 8009374:	e00c      	b.n	8009390 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009376:	78fb      	ldrb	r3, [r7, #3]
 8009378:	f003 020f 	and.w	r2, r3, #15
 800937c:	4613      	mov	r3, r2
 800937e:	00db      	lsls	r3, r3, #3
 8009380:	4413      	add	r3, r2
 8009382:	009b      	lsls	r3, r3, #2
 8009384:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	4413      	add	r3, r2
 800938c:	3304      	adds	r3, #4
 800938e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	68f9      	ldr	r1, [r7, #12]
 8009396:	4618      	mov	r0, r3
 8009398:	f00a fb14 	bl	80139c4 <USB_EPStopXfer>
 800939c:	4603      	mov	r3, r0
 800939e:	72fb      	strb	r3, [r7, #11]

  return ret;
 80093a0:	7afb      	ldrb	r3, [r7, #11]
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3710      	adds	r7, #16
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}

080093aa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b08a      	sub	sp, #40	; 0x28
 80093ae:	af02      	add	r7, sp, #8
 80093b0:	6078      	str	r0, [r7, #4]
 80093b2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80093be:	683a      	ldr	r2, [r7, #0]
 80093c0:	4613      	mov	r3, r2
 80093c2:	00db      	lsls	r3, r3, #3
 80093c4:	4413      	add	r3, r2
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	3338      	adds	r3, #56	; 0x38
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	4413      	add	r3, r2
 80093ce:	3304      	adds	r3, #4
 80093d0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	695a      	ldr	r2, [r3, #20]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	691b      	ldr	r3, [r3, #16]
 80093da:	429a      	cmp	r2, r3
 80093dc:	d901      	bls.n	80093e2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80093de:	2301      	movs	r3, #1
 80093e0:	e06c      	b.n	80094bc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	691a      	ldr	r2, [r3, #16]
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	695b      	ldr	r3, [r3, #20]
 80093ea:	1ad3      	subs	r3, r2, r3
 80093ec:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	69fa      	ldr	r2, [r7, #28]
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d902      	bls.n	80093fe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	689b      	ldr	r3, [r3, #8]
 80093fc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80093fe:	69fb      	ldr	r3, [r7, #28]
 8009400:	3303      	adds	r3, #3
 8009402:	089b      	lsrs	r3, r3, #2
 8009404:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009406:	e02b      	b.n	8009460 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	691a      	ldr	r2, [r3, #16]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	695b      	ldr	r3, [r3, #20]
 8009410:	1ad3      	subs	r3, r2, r3
 8009412:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	69fa      	ldr	r2, [r7, #28]
 800941a:	429a      	cmp	r2, r3
 800941c:	d902      	bls.n	8009424 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009424:	69fb      	ldr	r3, [r7, #28]
 8009426:	3303      	adds	r3, #3
 8009428:	089b      	lsrs	r3, r3, #2
 800942a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	68d9      	ldr	r1, [r3, #12]
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	b2da      	uxtb	r2, r3
 8009434:	69fb      	ldr	r3, [r7, #28]
 8009436:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800943c:	b2db      	uxtb	r3, r3
 800943e:	9300      	str	r3, [sp, #0]
 8009440:	4603      	mov	r3, r0
 8009442:	6978      	ldr	r0, [r7, #20]
 8009444:	f00a fb68 	bl	8013b18 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	68da      	ldr	r2, [r3, #12]
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	441a      	add	r2, r3
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	695a      	ldr	r2, [r3, #20]
 8009458:	69fb      	ldr	r3, [r7, #28]
 800945a:	441a      	add	r2, r3
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	015a      	lsls	r2, r3, #5
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	4413      	add	r3, r2
 8009468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800946c:	699b      	ldr	r3, [r3, #24]
 800946e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009470:	69ba      	ldr	r2, [r7, #24]
 8009472:	429a      	cmp	r2, r3
 8009474:	d809      	bhi.n	800948a <PCD_WriteEmptyTxFifo+0xe0>
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	695a      	ldr	r2, [r3, #20]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800947e:	429a      	cmp	r2, r3
 8009480:	d203      	bcs.n	800948a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	691b      	ldr	r3, [r3, #16]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d1be      	bne.n	8009408 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	691a      	ldr	r2, [r3, #16]
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	695b      	ldr	r3, [r3, #20]
 8009492:	429a      	cmp	r2, r3
 8009494:	d811      	bhi.n	80094ba <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	f003 030f 	and.w	r3, r3, #15
 800949c:	2201      	movs	r2, #1
 800949e:	fa02 f303 	lsl.w	r3, r2, r3
 80094a2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	43db      	mvns	r3, r3
 80094b0:	6939      	ldr	r1, [r7, #16]
 80094b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094b6:	4013      	ands	r3, r2
 80094b8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80094ba:	2300      	movs	r3, #0
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3720      	adds	r7, #32
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b088      	sub	sp, #32
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80094d8:	69fb      	ldr	r3, [r7, #28]
 80094da:	333c      	adds	r3, #60	; 0x3c
 80094dc:	3304      	adds	r3, #4
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	015a      	lsls	r2, r3, #5
 80094e6:	69bb      	ldr	r3, [r7, #24]
 80094e8:	4413      	add	r3, r2
 80094ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ee:	689b      	ldr	r3, [r3, #8]
 80094f0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	68db      	ldr	r3, [r3, #12]
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d17b      	bne.n	80095f2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	f003 0308 	and.w	r3, r3, #8
 8009500:	2b00      	cmp	r3, #0
 8009502:	d015      	beq.n	8009530 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	4a61      	ldr	r2, [pc, #388]	; (800968c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009508:	4293      	cmp	r3, r2
 800950a:	f240 80b9 	bls.w	8009680 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009514:	2b00      	cmp	r3, #0
 8009516:	f000 80b3 	beq.w	8009680 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	015a      	lsls	r2, r3, #5
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	4413      	add	r3, r2
 8009522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009526:	461a      	mov	r2, r3
 8009528:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800952c:	6093      	str	r3, [r2, #8]
 800952e:	e0a7      	b.n	8009680 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	f003 0320 	and.w	r3, r3, #32
 8009536:	2b00      	cmp	r3, #0
 8009538:	d009      	beq.n	800954e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	015a      	lsls	r2, r3, #5
 800953e:	69bb      	ldr	r3, [r7, #24]
 8009540:	4413      	add	r3, r2
 8009542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009546:	461a      	mov	r2, r3
 8009548:	2320      	movs	r3, #32
 800954a:	6093      	str	r3, [r2, #8]
 800954c:	e098      	b.n	8009680 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009554:	2b00      	cmp	r3, #0
 8009556:	f040 8093 	bne.w	8009680 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	4a4b      	ldr	r2, [pc, #300]	; (800968c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d90f      	bls.n	8009582 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009568:	2b00      	cmp	r3, #0
 800956a:	d00a      	beq.n	8009582 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	015a      	lsls	r2, r3, #5
 8009570:	69bb      	ldr	r3, [r7, #24]
 8009572:	4413      	add	r3, r2
 8009574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009578:	461a      	mov	r2, r3
 800957a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800957e:	6093      	str	r3, [r2, #8]
 8009580:	e07e      	b.n	8009680 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8009582:	683a      	ldr	r2, [r7, #0]
 8009584:	4613      	mov	r3, r2
 8009586:	00db      	lsls	r3, r3, #3
 8009588:	4413      	add	r3, r2
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009590:	687a      	ldr	r2, [r7, #4]
 8009592:	4413      	add	r3, r2
 8009594:	3304      	adds	r3, #4
 8009596:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	6a1a      	ldr	r2, [r3, #32]
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	0159      	lsls	r1, r3, #5
 80095a0:	69bb      	ldr	r3, [r7, #24]
 80095a2:	440b      	add	r3, r1
 80095a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095a8:	691b      	ldr	r3, [r3, #16]
 80095aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80095ae:	1ad2      	subs	r2, r2, r3
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d114      	bne.n	80095e4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	691b      	ldr	r3, [r3, #16]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d109      	bne.n	80095d6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6818      	ldr	r0, [r3, #0]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80095cc:	461a      	mov	r2, r3
 80095ce:	2101      	movs	r1, #1
 80095d0:	f00a fd3a 	bl	8014048 <USB_EP0_OutStart>
 80095d4:	e006      	b.n	80095e4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	68da      	ldr	r2, [r3, #12]
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	695b      	ldr	r3, [r3, #20]
 80095de:	441a      	add	r2, r3
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	4619      	mov	r1, r3
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f00d faa0 	bl	8016b30 <HAL_PCD_DataOutStageCallback>
 80095f0:	e046      	b.n	8009680 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	4a26      	ldr	r2, [pc, #152]	; (8009690 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d124      	bne.n	8009644 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009600:	2b00      	cmp	r3, #0
 8009602:	d00a      	beq.n	800961a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	015a      	lsls	r2, r3, #5
 8009608:	69bb      	ldr	r3, [r7, #24]
 800960a:	4413      	add	r3, r2
 800960c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009610:	461a      	mov	r2, r3
 8009612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009616:	6093      	str	r3, [r2, #8]
 8009618:	e032      	b.n	8009680 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	f003 0320 	and.w	r3, r3, #32
 8009620:	2b00      	cmp	r3, #0
 8009622:	d008      	beq.n	8009636 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	015a      	lsls	r2, r3, #5
 8009628:	69bb      	ldr	r3, [r7, #24]
 800962a:	4413      	add	r3, r2
 800962c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009630:	461a      	mov	r2, r3
 8009632:	2320      	movs	r3, #32
 8009634:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	b2db      	uxtb	r3, r3
 800963a:	4619      	mov	r1, r3
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f00d fa77 	bl	8016b30 <HAL_PCD_DataOutStageCallback>
 8009642:	e01d      	b.n	8009680 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d114      	bne.n	8009674 <PCD_EP_OutXfrComplete_int+0x1b0>
 800964a:	6879      	ldr	r1, [r7, #4]
 800964c:	683a      	ldr	r2, [r7, #0]
 800964e:	4613      	mov	r3, r2
 8009650:	00db      	lsls	r3, r3, #3
 8009652:	4413      	add	r3, r2
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	440b      	add	r3, r1
 8009658:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d108      	bne.n	8009674 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6818      	ldr	r0, [r3, #0]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800966c:	461a      	mov	r2, r3
 800966e:	2100      	movs	r1, #0
 8009670:	f00a fcea 	bl	8014048 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	b2db      	uxtb	r3, r3
 8009678:	4619      	mov	r1, r3
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f00d fa58 	bl	8016b30 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009680:	2300      	movs	r3, #0
}
 8009682:	4618      	mov	r0, r3
 8009684:	3720      	adds	r7, #32
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop
 800968c:	4f54300a 	.word	0x4f54300a
 8009690:	4f54310a 	.word	0x4f54310a

08009694 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b086      	sub	sp, #24
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	333c      	adds	r3, #60	; 0x3c
 80096ac:	3304      	adds	r3, #4
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	015a      	lsls	r2, r3, #5
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	4413      	add	r3, r2
 80096ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096be:	689b      	ldr	r3, [r3, #8]
 80096c0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	4a15      	ldr	r2, [pc, #84]	; (800971c <PCD_EP_OutSetupPacket_int+0x88>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d90e      	bls.n	80096e8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d009      	beq.n	80096e8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	015a      	lsls	r2, r3, #5
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	4413      	add	r3, r2
 80096dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096e0:	461a      	mov	r2, r3
 80096e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096e6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f00d fa0f 	bl	8016b0c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	4a0a      	ldr	r2, [pc, #40]	; (800971c <PCD_EP_OutSetupPacket_int+0x88>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d90c      	bls.n	8009710 <PCD_EP_OutSetupPacket_int+0x7c>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	2b01      	cmp	r3, #1
 80096fc:	d108      	bne.n	8009710 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6818      	ldr	r0, [r3, #0]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009708:	461a      	mov	r2, r3
 800970a:	2101      	movs	r1, #1
 800970c:	f00a fc9c 	bl	8014048 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009710:	2300      	movs	r3, #0
}
 8009712:	4618      	mov	r0, r3
 8009714:	3718      	adds	r7, #24
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
 800971a:	bf00      	nop
 800971c:	4f54300a 	.word	0x4f54300a

08009720 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009720:	b480      	push	{r7}
 8009722:	b085      	sub	sp, #20
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	460b      	mov	r3, r1
 800972a:	70fb      	strb	r3, [r7, #3]
 800972c:	4613      	mov	r3, r2
 800972e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009736:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009738:	78fb      	ldrb	r3, [r7, #3]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d107      	bne.n	800974e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800973e:	883b      	ldrh	r3, [r7, #0]
 8009740:	0419      	lsls	r1, r3, #16
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	68ba      	ldr	r2, [r7, #8]
 8009748:	430a      	orrs	r2, r1
 800974a:	629a      	str	r2, [r3, #40]	; 0x28
 800974c:	e028      	b.n	80097a0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009754:	0c1b      	lsrs	r3, r3, #16
 8009756:	68ba      	ldr	r2, [r7, #8]
 8009758:	4413      	add	r3, r2
 800975a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800975c:	2300      	movs	r3, #0
 800975e:	73fb      	strb	r3, [r7, #15]
 8009760:	e00d      	b.n	800977e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	7bfb      	ldrb	r3, [r7, #15]
 8009768:	3340      	adds	r3, #64	; 0x40
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	4413      	add	r3, r2
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	0c1b      	lsrs	r3, r3, #16
 8009772:	68ba      	ldr	r2, [r7, #8]
 8009774:	4413      	add	r3, r2
 8009776:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009778:	7bfb      	ldrb	r3, [r7, #15]
 800977a:	3301      	adds	r3, #1
 800977c:	73fb      	strb	r3, [r7, #15]
 800977e:	7bfa      	ldrb	r2, [r7, #15]
 8009780:	78fb      	ldrb	r3, [r7, #3]
 8009782:	3b01      	subs	r3, #1
 8009784:	429a      	cmp	r2, r3
 8009786:	d3ec      	bcc.n	8009762 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009788:	883b      	ldrh	r3, [r7, #0]
 800978a:	0418      	lsls	r0, r3, #16
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6819      	ldr	r1, [r3, #0]
 8009790:	78fb      	ldrb	r3, [r7, #3]
 8009792:	3b01      	subs	r3, #1
 8009794:	68ba      	ldr	r2, [r7, #8]
 8009796:	4302      	orrs	r2, r0
 8009798:	3340      	adds	r3, #64	; 0x40
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	440b      	add	r3, r1
 800979e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80097a0:	2300      	movs	r3, #0
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3714      	adds	r7, #20
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr

080097ae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80097ae:	b480      	push	{r7}
 80097b0:	b083      	sub	sp, #12
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
 80097b6:	460b      	mov	r3, r1
 80097b8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	887a      	ldrh	r2, [r7, #2]
 80097c0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80097c2:	2300      	movs	r3, #0
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	370c      	adds	r7, #12
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b085      	sub	sp, #20
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2201      	movs	r2, #1
 80097e2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	699b      	ldr	r3, [r3, #24]
 80097f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80097fe:	4b05      	ldr	r3, [pc, #20]	; (8009814 <HAL_PCDEx_ActivateLPM+0x44>)
 8009800:	4313      	orrs	r3, r2
 8009802:	68fa      	ldr	r2, [r7, #12]
 8009804:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009806:	2300      	movs	r3, #0
}
 8009808:	4618      	mov	r0, r3
 800980a:	3714      	adds	r7, #20
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr
 8009814:	10000003 	.word	0x10000003

08009818 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	460b      	mov	r3, r1
 8009822:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009824:	bf00      	nop
 8009826:	370c      	adds	r7, #12
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009838:	4b19      	ldr	r3, [pc, #100]	; (80098a0 <HAL_PWREx_ConfigSupply+0x70>)
 800983a:	68db      	ldr	r3, [r3, #12]
 800983c:	f003 0304 	and.w	r3, r3, #4
 8009840:	2b04      	cmp	r3, #4
 8009842:	d00a      	beq.n	800985a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009844:	4b16      	ldr	r3, [pc, #88]	; (80098a0 <HAL_PWREx_ConfigSupply+0x70>)
 8009846:	68db      	ldr	r3, [r3, #12]
 8009848:	f003 0307 	and.w	r3, r3, #7
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	429a      	cmp	r2, r3
 8009850:	d001      	beq.n	8009856 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009852:	2301      	movs	r3, #1
 8009854:	e01f      	b.n	8009896 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009856:	2300      	movs	r3, #0
 8009858:	e01d      	b.n	8009896 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800985a:	4b11      	ldr	r3, [pc, #68]	; (80098a0 <HAL_PWREx_ConfigSupply+0x70>)
 800985c:	68db      	ldr	r3, [r3, #12]
 800985e:	f023 0207 	bic.w	r2, r3, #7
 8009862:	490f      	ldr	r1, [pc, #60]	; (80098a0 <HAL_PWREx_ConfigSupply+0x70>)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	4313      	orrs	r3, r2
 8009868:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800986a:	f7fa f90f 	bl	8003a8c <HAL_GetTick>
 800986e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009870:	e009      	b.n	8009886 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009872:	f7fa f90b 	bl	8003a8c <HAL_GetTick>
 8009876:	4602      	mov	r2, r0
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	1ad3      	subs	r3, r2, r3
 800987c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009880:	d901      	bls.n	8009886 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	e007      	b.n	8009896 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009886:	4b06      	ldr	r3, [pc, #24]	; (80098a0 <HAL_PWREx_ConfigSupply+0x70>)
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800988e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009892:	d1ee      	bne.n	8009872 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009894:	2300      	movs	r3, #0
}
 8009896:	4618      	mov	r0, r3
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	58024800 	.word	0x58024800

080098a4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80098a4:	b480      	push	{r7}
 80098a6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80098a8:	4b05      	ldr	r3, [pc, #20]	; (80098c0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80098aa:	68db      	ldr	r3, [r3, #12]
 80098ac:	4a04      	ldr	r2, [pc, #16]	; (80098c0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80098ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80098b2:	60d3      	str	r3, [r2, #12]
}
 80098b4:	bf00      	nop
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr
 80098be:	bf00      	nop
 80098c0:	58024800 	.word	0x58024800

080098c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b08c      	sub	sp, #48	; 0x30
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d101      	bne.n	80098d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80098d2:	2301      	movs	r3, #1
 80098d4:	e3c8      	b.n	800a068 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f003 0301 	and.w	r3, r3, #1
 80098de:	2b00      	cmp	r3, #0
 80098e0:	f000 8087 	beq.w	80099f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80098e4:	4b88      	ldr	r3, [pc, #544]	; (8009b08 <HAL_RCC_OscConfig+0x244>)
 80098e6:	691b      	ldr	r3, [r3, #16]
 80098e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80098ee:	4b86      	ldr	r3, [pc, #536]	; (8009b08 <HAL_RCC_OscConfig+0x244>)
 80098f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098f2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80098f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f6:	2b10      	cmp	r3, #16
 80098f8:	d007      	beq.n	800990a <HAL_RCC_OscConfig+0x46>
 80098fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098fc:	2b18      	cmp	r3, #24
 80098fe:	d110      	bne.n	8009922 <HAL_RCC_OscConfig+0x5e>
 8009900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009902:	f003 0303 	and.w	r3, r3, #3
 8009906:	2b02      	cmp	r3, #2
 8009908:	d10b      	bne.n	8009922 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800990a:	4b7f      	ldr	r3, [pc, #508]	; (8009b08 <HAL_RCC_OscConfig+0x244>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009912:	2b00      	cmp	r3, #0
 8009914:	d06c      	beq.n	80099f0 <HAL_RCC_OscConfig+0x12c>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d168      	bne.n	80099f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800991e:	2301      	movs	r3, #1
 8009920:	e3a2      	b.n	800a068 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800992a:	d106      	bne.n	800993a <HAL_RCC_OscConfig+0x76>
 800992c:	4b76      	ldr	r3, [pc, #472]	; (8009b08 <HAL_RCC_OscConfig+0x244>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a75      	ldr	r2, [pc, #468]	; (8009b08 <HAL_RCC_OscConfig+0x244>)
 8009932:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009936:	6013      	str	r3, [r2, #0]
 8009938:	e02e      	b.n	8009998 <HAL_RCC_OscConfig+0xd4>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d10c      	bne.n	800995c <HAL_RCC_OscConfig+0x98>
 8009942:	4b71      	ldr	r3, [pc, #452]	; (8009b08 <HAL_RCC_OscConfig+0x244>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a70      	ldr	r2, [pc, #448]	; (8009b08 <HAL_RCC_OscConfig+0x244>)
 8009948:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800994c:	6013      	str	r3, [r2, #0]
 800994e:	4b6e      	ldr	r3, [pc, #440]	; (8009b08 <HAL_RCC_OscConfig+0x244>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a6d      	ldr	r2, [pc, #436]	; (8009b08 <HAL_RCC_OscConfig+0x244>)
 8009954:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009958:	6013      	str	r3, [r2, #0]
 800995a:	e01d      	b.n	8009998 <HAL_RCC_OscConfig+0xd4>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009964:	d10c      	bne.n	8009980 <HAL_RCC_OscConfig+0xbc>
 8009966:	4b68      	ldr	r3, [pc, #416]	; (8009b08 <HAL_RCC_OscConfig+0x244>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a67      	ldr	r2, [pc, #412]	; (8009b08 <HAL_RCC_OscConfig+0x244>)
 800996c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009970:	6013      	str	r3, [r2, #0]
 8009972:	4b65      	ldr	r3, [pc, #404]	; (8009b08 <HAL_RCC_OscConfig+0x244>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4a64      	ldr	r2, [pc, #400]	; (8009b08 <HAL_RCC_OscConfig+0x244>)
 8009978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800997c:	6013      	str	r3, [r2, #0]
 800997e:	e00b      	b.n	8009998 <HAL_RCC_OscConfig+0xd4>
 8009980:	4b61      	ldr	r3, [pc, #388]	; (8009b08 <HAL_RCC_OscConfig+0x244>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4a60      	ldr	r2, [pc, #384]	; (8009b08 <HAL_RCC_OscConfig+0x244>)
 8009986:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800998a:	6013      	str	r3, [r2, #0]
 800998c:	4b5e      	ldr	r3, [pc, #376]	; (8009b08 <HAL_RCC_OscConfig+0x244>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a5d      	ldr	r2, [pc, #372]	; (8009b08 <HAL_RCC_OscConfig+0x244>)
 8009992:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009996:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d013      	beq.n	80099c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099a0:	f7fa f874 	bl	8003a8c <HAL_GetTick>
 80099a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80099a6:	e008      	b.n	80099ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80099a8:	f7fa f870 	bl	8003a8c <HAL_GetTick>
 80099ac:	4602      	mov	r2, r0
 80099ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b0:	1ad3      	subs	r3, r2, r3
 80099b2:	2b64      	cmp	r3, #100	; 0x64
 80099b4:	d901      	bls.n	80099ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80099b6:	2303      	movs	r3, #3
 80099b8:	e356      	b.n	800a068 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80099ba:	4b53      	ldr	r3, [pc, #332]	; (8009b08 <HAL_RCC_OscConfig+0x244>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d0f0      	beq.n	80099a8 <HAL_RCC_OscConfig+0xe4>
 80099c6:	e014      	b.n	80099f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099c8:	f7fa f860 	bl	8003a8c <HAL_GetTick>
 80099cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80099ce:	e008      	b.n	80099e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80099d0:	f7fa f85c 	bl	8003a8c <HAL_GetTick>
 80099d4:	4602      	mov	r2, r0
 80099d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d8:	1ad3      	subs	r3, r2, r3
 80099da:	2b64      	cmp	r3, #100	; 0x64
 80099dc:	d901      	bls.n	80099e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80099de:	2303      	movs	r3, #3
 80099e0:	e342      	b.n	800a068 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80099e2:	4b49      	ldr	r3, [pc, #292]	; (8009b08 <HAL_RCC_OscConfig+0x244>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d1f0      	bne.n	80099d0 <HAL_RCC_OscConfig+0x10c>
 80099ee:	e000      	b.n	80099f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80099f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f003 0302 	and.w	r3, r3, #2
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	f000 808c 	beq.w	8009b18 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a00:	4b41      	ldr	r3, [pc, #260]	; (8009b08 <HAL_RCC_OscConfig+0x244>)
 8009a02:	691b      	ldr	r3, [r3, #16]
 8009a04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a08:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009a0a:	4b3f      	ldr	r3, [pc, #252]	; (8009b08 <HAL_RCC_OscConfig+0x244>)
 8009a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a0e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009a10:	6a3b      	ldr	r3, [r7, #32]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d007      	beq.n	8009a26 <HAL_RCC_OscConfig+0x162>
 8009a16:	6a3b      	ldr	r3, [r7, #32]
 8009a18:	2b18      	cmp	r3, #24
 8009a1a:	d137      	bne.n	8009a8c <HAL_RCC_OscConfig+0x1c8>
 8009a1c:	69fb      	ldr	r3, [r7, #28]
 8009a1e:	f003 0303 	and.w	r3, r3, #3
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d132      	bne.n	8009a8c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a26:	4b38      	ldr	r3, [pc, #224]	; (8009b08 <HAL_RCC_OscConfig+0x244>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f003 0304 	and.w	r3, r3, #4
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d005      	beq.n	8009a3e <HAL_RCC_OscConfig+0x17a>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	68db      	ldr	r3, [r3, #12]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d101      	bne.n	8009a3e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e314      	b.n	800a068 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009a3e:	4b32      	ldr	r3, [pc, #200]	; (8009b08 <HAL_RCC_OscConfig+0x244>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f023 0219 	bic.w	r2, r3, #25
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	492f      	ldr	r1, [pc, #188]	; (8009b08 <HAL_RCC_OscConfig+0x244>)
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a50:	f7fa f81c 	bl	8003a8c <HAL_GetTick>
 8009a54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a56:	e008      	b.n	8009a6a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a58:	f7fa f818 	bl	8003a8c <HAL_GetTick>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a60:	1ad3      	subs	r3, r2, r3
 8009a62:	2b02      	cmp	r3, #2
 8009a64:	d901      	bls.n	8009a6a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009a66:	2303      	movs	r3, #3
 8009a68:	e2fe      	b.n	800a068 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a6a:	4b27      	ldr	r3, [pc, #156]	; (8009b08 <HAL_RCC_OscConfig+0x244>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f003 0304 	and.w	r3, r3, #4
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d0f0      	beq.n	8009a58 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a76:	4b24      	ldr	r3, [pc, #144]	; (8009b08 <HAL_RCC_OscConfig+0x244>)
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	691b      	ldr	r3, [r3, #16]
 8009a82:	061b      	lsls	r3, r3, #24
 8009a84:	4920      	ldr	r1, [pc, #128]	; (8009b08 <HAL_RCC_OscConfig+0x244>)
 8009a86:	4313      	orrs	r3, r2
 8009a88:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a8a:	e045      	b.n	8009b18 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d026      	beq.n	8009ae2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009a94:	4b1c      	ldr	r3, [pc, #112]	; (8009b08 <HAL_RCC_OscConfig+0x244>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f023 0219 	bic.w	r2, r3, #25
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	68db      	ldr	r3, [r3, #12]
 8009aa0:	4919      	ldr	r1, [pc, #100]	; (8009b08 <HAL_RCC_OscConfig+0x244>)
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009aa6:	f7f9 fff1 	bl	8003a8c <HAL_GetTick>
 8009aaa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009aac:	e008      	b.n	8009ac0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009aae:	f7f9 ffed 	bl	8003a8c <HAL_GetTick>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab6:	1ad3      	subs	r3, r2, r3
 8009ab8:	2b02      	cmp	r3, #2
 8009aba:	d901      	bls.n	8009ac0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009abc:	2303      	movs	r3, #3
 8009abe:	e2d3      	b.n	800a068 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009ac0:	4b11      	ldr	r3, [pc, #68]	; (8009b08 <HAL_RCC_OscConfig+0x244>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f003 0304 	and.w	r3, r3, #4
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d0f0      	beq.n	8009aae <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009acc:	4b0e      	ldr	r3, [pc, #56]	; (8009b08 <HAL_RCC_OscConfig+0x244>)
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	691b      	ldr	r3, [r3, #16]
 8009ad8:	061b      	lsls	r3, r3, #24
 8009ada:	490b      	ldr	r1, [pc, #44]	; (8009b08 <HAL_RCC_OscConfig+0x244>)
 8009adc:	4313      	orrs	r3, r2
 8009ade:	604b      	str	r3, [r1, #4]
 8009ae0:	e01a      	b.n	8009b18 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009ae2:	4b09      	ldr	r3, [pc, #36]	; (8009b08 <HAL_RCC_OscConfig+0x244>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a08      	ldr	r2, [pc, #32]	; (8009b08 <HAL_RCC_OscConfig+0x244>)
 8009ae8:	f023 0301 	bic.w	r3, r3, #1
 8009aec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009aee:	f7f9 ffcd 	bl	8003a8c <HAL_GetTick>
 8009af2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009af4:	e00a      	b.n	8009b0c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009af6:	f7f9 ffc9 	bl	8003a8c <HAL_GetTick>
 8009afa:	4602      	mov	r2, r0
 8009afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afe:	1ad3      	subs	r3, r2, r3
 8009b00:	2b02      	cmp	r3, #2
 8009b02:	d903      	bls.n	8009b0c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009b04:	2303      	movs	r3, #3
 8009b06:	e2af      	b.n	800a068 <HAL_RCC_OscConfig+0x7a4>
 8009b08:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009b0c:	4b96      	ldr	r3, [pc, #600]	; (8009d68 <HAL_RCC_OscConfig+0x4a4>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f003 0304 	and.w	r3, r3, #4
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d1ee      	bne.n	8009af6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f003 0310 	and.w	r3, r3, #16
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d06a      	beq.n	8009bfa <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b24:	4b90      	ldr	r3, [pc, #576]	; (8009d68 <HAL_RCC_OscConfig+0x4a4>)
 8009b26:	691b      	ldr	r3, [r3, #16]
 8009b28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b2c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009b2e:	4b8e      	ldr	r3, [pc, #568]	; (8009d68 <HAL_RCC_OscConfig+0x4a4>)
 8009b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b32:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009b34:	69bb      	ldr	r3, [r7, #24]
 8009b36:	2b08      	cmp	r3, #8
 8009b38:	d007      	beq.n	8009b4a <HAL_RCC_OscConfig+0x286>
 8009b3a:	69bb      	ldr	r3, [r7, #24]
 8009b3c:	2b18      	cmp	r3, #24
 8009b3e:	d11b      	bne.n	8009b78 <HAL_RCC_OscConfig+0x2b4>
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	f003 0303 	and.w	r3, r3, #3
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	d116      	bne.n	8009b78 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009b4a:	4b87      	ldr	r3, [pc, #540]	; (8009d68 <HAL_RCC_OscConfig+0x4a4>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d005      	beq.n	8009b62 <HAL_RCC_OscConfig+0x29e>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	69db      	ldr	r3, [r3, #28]
 8009b5a:	2b80      	cmp	r3, #128	; 0x80
 8009b5c:	d001      	beq.n	8009b62 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	e282      	b.n	800a068 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009b62:	4b81      	ldr	r3, [pc, #516]	; (8009d68 <HAL_RCC_OscConfig+0x4a4>)
 8009b64:	68db      	ldr	r3, [r3, #12]
 8009b66:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6a1b      	ldr	r3, [r3, #32]
 8009b6e:	061b      	lsls	r3, r3, #24
 8009b70:	497d      	ldr	r1, [pc, #500]	; (8009d68 <HAL_RCC_OscConfig+0x4a4>)
 8009b72:	4313      	orrs	r3, r2
 8009b74:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009b76:	e040      	b.n	8009bfa <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	69db      	ldr	r3, [r3, #28]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d023      	beq.n	8009bc8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009b80:	4b79      	ldr	r3, [pc, #484]	; (8009d68 <HAL_RCC_OscConfig+0x4a4>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a78      	ldr	r2, [pc, #480]	; (8009d68 <HAL_RCC_OscConfig+0x4a4>)
 8009b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b8c:	f7f9 ff7e 	bl	8003a8c <HAL_GetTick>
 8009b90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009b92:	e008      	b.n	8009ba6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009b94:	f7f9 ff7a 	bl	8003a8c <HAL_GetTick>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9c:	1ad3      	subs	r3, r2, r3
 8009b9e:	2b02      	cmp	r3, #2
 8009ba0:	d901      	bls.n	8009ba6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009ba2:	2303      	movs	r3, #3
 8009ba4:	e260      	b.n	800a068 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009ba6:	4b70      	ldr	r3, [pc, #448]	; (8009d68 <HAL_RCC_OscConfig+0x4a4>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d0f0      	beq.n	8009b94 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009bb2:	4b6d      	ldr	r3, [pc, #436]	; (8009d68 <HAL_RCC_OscConfig+0x4a4>)
 8009bb4:	68db      	ldr	r3, [r3, #12]
 8009bb6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6a1b      	ldr	r3, [r3, #32]
 8009bbe:	061b      	lsls	r3, r3, #24
 8009bc0:	4969      	ldr	r1, [pc, #420]	; (8009d68 <HAL_RCC_OscConfig+0x4a4>)
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	60cb      	str	r3, [r1, #12]
 8009bc6:	e018      	b.n	8009bfa <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009bc8:	4b67      	ldr	r3, [pc, #412]	; (8009d68 <HAL_RCC_OscConfig+0x4a4>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4a66      	ldr	r2, [pc, #408]	; (8009d68 <HAL_RCC_OscConfig+0x4a4>)
 8009bce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bd4:	f7f9 ff5a 	bl	8003a8c <HAL_GetTick>
 8009bd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009bda:	e008      	b.n	8009bee <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009bdc:	f7f9 ff56 	bl	8003a8c <HAL_GetTick>
 8009be0:	4602      	mov	r2, r0
 8009be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be4:	1ad3      	subs	r3, r2, r3
 8009be6:	2b02      	cmp	r3, #2
 8009be8:	d901      	bls.n	8009bee <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009bea:	2303      	movs	r3, #3
 8009bec:	e23c      	b.n	800a068 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009bee:	4b5e      	ldr	r3, [pc, #376]	; (8009d68 <HAL_RCC_OscConfig+0x4a4>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d1f0      	bne.n	8009bdc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f003 0308 	and.w	r3, r3, #8
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d036      	beq.n	8009c74 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	695b      	ldr	r3, [r3, #20]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d019      	beq.n	8009c42 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009c0e:	4b56      	ldr	r3, [pc, #344]	; (8009d68 <HAL_RCC_OscConfig+0x4a4>)
 8009c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c12:	4a55      	ldr	r2, [pc, #340]	; (8009d68 <HAL_RCC_OscConfig+0x4a4>)
 8009c14:	f043 0301 	orr.w	r3, r3, #1
 8009c18:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c1a:	f7f9 ff37 	bl	8003a8c <HAL_GetTick>
 8009c1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009c20:	e008      	b.n	8009c34 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c22:	f7f9 ff33 	bl	8003a8c <HAL_GetTick>
 8009c26:	4602      	mov	r2, r0
 8009c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2a:	1ad3      	subs	r3, r2, r3
 8009c2c:	2b02      	cmp	r3, #2
 8009c2e:	d901      	bls.n	8009c34 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009c30:	2303      	movs	r3, #3
 8009c32:	e219      	b.n	800a068 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009c34:	4b4c      	ldr	r3, [pc, #304]	; (8009d68 <HAL_RCC_OscConfig+0x4a4>)
 8009c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c38:	f003 0302 	and.w	r3, r3, #2
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d0f0      	beq.n	8009c22 <HAL_RCC_OscConfig+0x35e>
 8009c40:	e018      	b.n	8009c74 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009c42:	4b49      	ldr	r3, [pc, #292]	; (8009d68 <HAL_RCC_OscConfig+0x4a4>)
 8009c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c46:	4a48      	ldr	r2, [pc, #288]	; (8009d68 <HAL_RCC_OscConfig+0x4a4>)
 8009c48:	f023 0301 	bic.w	r3, r3, #1
 8009c4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c4e:	f7f9 ff1d 	bl	8003a8c <HAL_GetTick>
 8009c52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009c54:	e008      	b.n	8009c68 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c56:	f7f9 ff19 	bl	8003a8c <HAL_GetTick>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5e:	1ad3      	subs	r3, r2, r3
 8009c60:	2b02      	cmp	r3, #2
 8009c62:	d901      	bls.n	8009c68 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009c64:	2303      	movs	r3, #3
 8009c66:	e1ff      	b.n	800a068 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009c68:	4b3f      	ldr	r3, [pc, #252]	; (8009d68 <HAL_RCC_OscConfig+0x4a4>)
 8009c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c6c:	f003 0302 	and.w	r3, r3, #2
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d1f0      	bne.n	8009c56 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f003 0320 	and.w	r3, r3, #32
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d036      	beq.n	8009cee <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	699b      	ldr	r3, [r3, #24]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d019      	beq.n	8009cbc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009c88:	4b37      	ldr	r3, [pc, #220]	; (8009d68 <HAL_RCC_OscConfig+0x4a4>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a36      	ldr	r2, [pc, #216]	; (8009d68 <HAL_RCC_OscConfig+0x4a4>)
 8009c8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009c92:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009c94:	f7f9 fefa 	bl	8003a8c <HAL_GetTick>
 8009c98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009c9a:	e008      	b.n	8009cae <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009c9c:	f7f9 fef6 	bl	8003a8c <HAL_GetTick>
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca4:	1ad3      	subs	r3, r2, r3
 8009ca6:	2b02      	cmp	r3, #2
 8009ca8:	d901      	bls.n	8009cae <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009caa:	2303      	movs	r3, #3
 8009cac:	e1dc      	b.n	800a068 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009cae:	4b2e      	ldr	r3, [pc, #184]	; (8009d68 <HAL_RCC_OscConfig+0x4a4>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d0f0      	beq.n	8009c9c <HAL_RCC_OscConfig+0x3d8>
 8009cba:	e018      	b.n	8009cee <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009cbc:	4b2a      	ldr	r3, [pc, #168]	; (8009d68 <HAL_RCC_OscConfig+0x4a4>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a29      	ldr	r2, [pc, #164]	; (8009d68 <HAL_RCC_OscConfig+0x4a4>)
 8009cc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cc6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009cc8:	f7f9 fee0 	bl	8003a8c <HAL_GetTick>
 8009ccc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009cce:	e008      	b.n	8009ce2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009cd0:	f7f9 fedc 	bl	8003a8c <HAL_GetTick>
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd8:	1ad3      	subs	r3, r2, r3
 8009cda:	2b02      	cmp	r3, #2
 8009cdc:	d901      	bls.n	8009ce2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009cde:	2303      	movs	r3, #3
 8009ce0:	e1c2      	b.n	800a068 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009ce2:	4b21      	ldr	r3, [pc, #132]	; (8009d68 <HAL_RCC_OscConfig+0x4a4>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d1f0      	bne.n	8009cd0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f003 0304 	and.w	r3, r3, #4
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	f000 8086 	beq.w	8009e08 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009cfc:	4b1b      	ldr	r3, [pc, #108]	; (8009d6c <HAL_RCC_OscConfig+0x4a8>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a1a      	ldr	r2, [pc, #104]	; (8009d6c <HAL_RCC_OscConfig+0x4a8>)
 8009d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009d08:	f7f9 fec0 	bl	8003a8c <HAL_GetTick>
 8009d0c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d0e:	e008      	b.n	8009d22 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d10:	f7f9 febc 	bl	8003a8c <HAL_GetTick>
 8009d14:	4602      	mov	r2, r0
 8009d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d18:	1ad3      	subs	r3, r2, r3
 8009d1a:	2b64      	cmp	r3, #100	; 0x64
 8009d1c:	d901      	bls.n	8009d22 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009d1e:	2303      	movs	r3, #3
 8009d20:	e1a2      	b.n	800a068 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d22:	4b12      	ldr	r3, [pc, #72]	; (8009d6c <HAL_RCC_OscConfig+0x4a8>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d0f0      	beq.n	8009d10 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	689b      	ldr	r3, [r3, #8]
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d106      	bne.n	8009d44 <HAL_RCC_OscConfig+0x480>
 8009d36:	4b0c      	ldr	r3, [pc, #48]	; (8009d68 <HAL_RCC_OscConfig+0x4a4>)
 8009d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d3a:	4a0b      	ldr	r2, [pc, #44]	; (8009d68 <HAL_RCC_OscConfig+0x4a4>)
 8009d3c:	f043 0301 	orr.w	r3, r3, #1
 8009d40:	6713      	str	r3, [r2, #112]	; 0x70
 8009d42:	e032      	b.n	8009daa <HAL_RCC_OscConfig+0x4e6>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	689b      	ldr	r3, [r3, #8]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d111      	bne.n	8009d70 <HAL_RCC_OscConfig+0x4ac>
 8009d4c:	4b06      	ldr	r3, [pc, #24]	; (8009d68 <HAL_RCC_OscConfig+0x4a4>)
 8009d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d50:	4a05      	ldr	r2, [pc, #20]	; (8009d68 <HAL_RCC_OscConfig+0x4a4>)
 8009d52:	f023 0301 	bic.w	r3, r3, #1
 8009d56:	6713      	str	r3, [r2, #112]	; 0x70
 8009d58:	4b03      	ldr	r3, [pc, #12]	; (8009d68 <HAL_RCC_OscConfig+0x4a4>)
 8009d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d5c:	4a02      	ldr	r2, [pc, #8]	; (8009d68 <HAL_RCC_OscConfig+0x4a4>)
 8009d5e:	f023 0304 	bic.w	r3, r3, #4
 8009d62:	6713      	str	r3, [r2, #112]	; 0x70
 8009d64:	e021      	b.n	8009daa <HAL_RCC_OscConfig+0x4e6>
 8009d66:	bf00      	nop
 8009d68:	58024400 	.word	0x58024400
 8009d6c:	58024800 	.word	0x58024800
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	689b      	ldr	r3, [r3, #8]
 8009d74:	2b05      	cmp	r3, #5
 8009d76:	d10c      	bne.n	8009d92 <HAL_RCC_OscConfig+0x4ce>
 8009d78:	4b83      	ldr	r3, [pc, #524]	; (8009f88 <HAL_RCC_OscConfig+0x6c4>)
 8009d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d7c:	4a82      	ldr	r2, [pc, #520]	; (8009f88 <HAL_RCC_OscConfig+0x6c4>)
 8009d7e:	f043 0304 	orr.w	r3, r3, #4
 8009d82:	6713      	str	r3, [r2, #112]	; 0x70
 8009d84:	4b80      	ldr	r3, [pc, #512]	; (8009f88 <HAL_RCC_OscConfig+0x6c4>)
 8009d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d88:	4a7f      	ldr	r2, [pc, #508]	; (8009f88 <HAL_RCC_OscConfig+0x6c4>)
 8009d8a:	f043 0301 	orr.w	r3, r3, #1
 8009d8e:	6713      	str	r3, [r2, #112]	; 0x70
 8009d90:	e00b      	b.n	8009daa <HAL_RCC_OscConfig+0x4e6>
 8009d92:	4b7d      	ldr	r3, [pc, #500]	; (8009f88 <HAL_RCC_OscConfig+0x6c4>)
 8009d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d96:	4a7c      	ldr	r2, [pc, #496]	; (8009f88 <HAL_RCC_OscConfig+0x6c4>)
 8009d98:	f023 0301 	bic.w	r3, r3, #1
 8009d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8009d9e:	4b7a      	ldr	r3, [pc, #488]	; (8009f88 <HAL_RCC_OscConfig+0x6c4>)
 8009da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009da2:	4a79      	ldr	r2, [pc, #484]	; (8009f88 <HAL_RCC_OscConfig+0x6c4>)
 8009da4:	f023 0304 	bic.w	r3, r3, #4
 8009da8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	689b      	ldr	r3, [r3, #8]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d015      	beq.n	8009dde <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009db2:	f7f9 fe6b 	bl	8003a8c <HAL_GetTick>
 8009db6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009db8:	e00a      	b.n	8009dd0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009dba:	f7f9 fe67 	bl	8003a8c <HAL_GetTick>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc2:	1ad3      	subs	r3, r2, r3
 8009dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d901      	bls.n	8009dd0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009dcc:	2303      	movs	r3, #3
 8009dce:	e14b      	b.n	800a068 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009dd0:	4b6d      	ldr	r3, [pc, #436]	; (8009f88 <HAL_RCC_OscConfig+0x6c4>)
 8009dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dd4:	f003 0302 	and.w	r3, r3, #2
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d0ee      	beq.n	8009dba <HAL_RCC_OscConfig+0x4f6>
 8009ddc:	e014      	b.n	8009e08 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009dde:	f7f9 fe55 	bl	8003a8c <HAL_GetTick>
 8009de2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009de4:	e00a      	b.n	8009dfc <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009de6:	f7f9 fe51 	bl	8003a8c <HAL_GetTick>
 8009dea:	4602      	mov	r2, r0
 8009dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dee:	1ad3      	subs	r3, r2, r3
 8009df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d901      	bls.n	8009dfc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009df8:	2303      	movs	r3, #3
 8009dfa:	e135      	b.n	800a068 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009dfc:	4b62      	ldr	r3, [pc, #392]	; (8009f88 <HAL_RCC_OscConfig+0x6c4>)
 8009dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e00:	f003 0302 	and.w	r3, r3, #2
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d1ee      	bne.n	8009de6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	f000 812a 	beq.w	800a066 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009e12:	4b5d      	ldr	r3, [pc, #372]	; (8009f88 <HAL_RCC_OscConfig+0x6c4>)
 8009e14:	691b      	ldr	r3, [r3, #16]
 8009e16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e1a:	2b18      	cmp	r3, #24
 8009e1c:	f000 80ba 	beq.w	8009f94 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e24:	2b02      	cmp	r3, #2
 8009e26:	f040 8095 	bne.w	8009f54 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e2a:	4b57      	ldr	r3, [pc, #348]	; (8009f88 <HAL_RCC_OscConfig+0x6c4>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4a56      	ldr	r2, [pc, #344]	; (8009f88 <HAL_RCC_OscConfig+0x6c4>)
 8009e30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009e34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e36:	f7f9 fe29 	bl	8003a8c <HAL_GetTick>
 8009e3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e3c:	e008      	b.n	8009e50 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e3e:	f7f9 fe25 	bl	8003a8c <HAL_GetTick>
 8009e42:	4602      	mov	r2, r0
 8009e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e46:	1ad3      	subs	r3, r2, r3
 8009e48:	2b02      	cmp	r3, #2
 8009e4a:	d901      	bls.n	8009e50 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009e4c:	2303      	movs	r3, #3
 8009e4e:	e10b      	b.n	800a068 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e50:	4b4d      	ldr	r3, [pc, #308]	; (8009f88 <HAL_RCC_OscConfig+0x6c4>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d1f0      	bne.n	8009e3e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009e5c:	4b4a      	ldr	r3, [pc, #296]	; (8009f88 <HAL_RCC_OscConfig+0x6c4>)
 8009e5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e60:	4b4a      	ldr	r3, [pc, #296]	; (8009f8c <HAL_RCC_OscConfig+0x6c8>)
 8009e62:	4013      	ands	r3, r2
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009e68:	687a      	ldr	r2, [r7, #4]
 8009e6a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009e6c:	0112      	lsls	r2, r2, #4
 8009e6e:	430a      	orrs	r2, r1
 8009e70:	4945      	ldr	r1, [pc, #276]	; (8009f88 <HAL_RCC_OscConfig+0x6c4>)
 8009e72:	4313      	orrs	r3, r2
 8009e74:	628b      	str	r3, [r1, #40]	; 0x28
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e7a:	3b01      	subs	r3, #1
 8009e7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e84:	3b01      	subs	r3, #1
 8009e86:	025b      	lsls	r3, r3, #9
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	431a      	orrs	r2, r3
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e90:	3b01      	subs	r3, #1
 8009e92:	041b      	lsls	r3, r3, #16
 8009e94:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009e98:	431a      	orrs	r2, r3
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e9e:	3b01      	subs	r3, #1
 8009ea0:	061b      	lsls	r3, r3, #24
 8009ea2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009ea6:	4938      	ldr	r1, [pc, #224]	; (8009f88 <HAL_RCC_OscConfig+0x6c4>)
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009eac:	4b36      	ldr	r3, [pc, #216]	; (8009f88 <HAL_RCC_OscConfig+0x6c4>)
 8009eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb0:	4a35      	ldr	r2, [pc, #212]	; (8009f88 <HAL_RCC_OscConfig+0x6c4>)
 8009eb2:	f023 0301 	bic.w	r3, r3, #1
 8009eb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009eb8:	4b33      	ldr	r3, [pc, #204]	; (8009f88 <HAL_RCC_OscConfig+0x6c4>)
 8009eba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ebc:	4b34      	ldr	r3, [pc, #208]	; (8009f90 <HAL_RCC_OscConfig+0x6cc>)
 8009ebe:	4013      	ands	r3, r2
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009ec4:	00d2      	lsls	r2, r2, #3
 8009ec6:	4930      	ldr	r1, [pc, #192]	; (8009f88 <HAL_RCC_OscConfig+0x6c4>)
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009ecc:	4b2e      	ldr	r3, [pc, #184]	; (8009f88 <HAL_RCC_OscConfig+0x6c4>)
 8009ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed0:	f023 020c 	bic.w	r2, r3, #12
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed8:	492b      	ldr	r1, [pc, #172]	; (8009f88 <HAL_RCC_OscConfig+0x6c4>)
 8009eda:	4313      	orrs	r3, r2
 8009edc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009ede:	4b2a      	ldr	r3, [pc, #168]	; (8009f88 <HAL_RCC_OscConfig+0x6c4>)
 8009ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee2:	f023 0202 	bic.w	r2, r3, #2
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eea:	4927      	ldr	r1, [pc, #156]	; (8009f88 <HAL_RCC_OscConfig+0x6c4>)
 8009eec:	4313      	orrs	r3, r2
 8009eee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009ef0:	4b25      	ldr	r3, [pc, #148]	; (8009f88 <HAL_RCC_OscConfig+0x6c4>)
 8009ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef4:	4a24      	ldr	r2, [pc, #144]	; (8009f88 <HAL_RCC_OscConfig+0x6c4>)
 8009ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009efa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009efc:	4b22      	ldr	r3, [pc, #136]	; (8009f88 <HAL_RCC_OscConfig+0x6c4>)
 8009efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f00:	4a21      	ldr	r2, [pc, #132]	; (8009f88 <HAL_RCC_OscConfig+0x6c4>)
 8009f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009f08:	4b1f      	ldr	r3, [pc, #124]	; (8009f88 <HAL_RCC_OscConfig+0x6c4>)
 8009f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f0c:	4a1e      	ldr	r2, [pc, #120]	; (8009f88 <HAL_RCC_OscConfig+0x6c4>)
 8009f0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009f12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009f14:	4b1c      	ldr	r3, [pc, #112]	; (8009f88 <HAL_RCC_OscConfig+0x6c4>)
 8009f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f18:	4a1b      	ldr	r2, [pc, #108]	; (8009f88 <HAL_RCC_OscConfig+0x6c4>)
 8009f1a:	f043 0301 	orr.w	r3, r3, #1
 8009f1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009f20:	4b19      	ldr	r3, [pc, #100]	; (8009f88 <HAL_RCC_OscConfig+0x6c4>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4a18      	ldr	r2, [pc, #96]	; (8009f88 <HAL_RCC_OscConfig+0x6c4>)
 8009f26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009f2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f2c:	f7f9 fdae 	bl	8003a8c <HAL_GetTick>
 8009f30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009f32:	e008      	b.n	8009f46 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f34:	f7f9 fdaa 	bl	8003a8c <HAL_GetTick>
 8009f38:	4602      	mov	r2, r0
 8009f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3c:	1ad3      	subs	r3, r2, r3
 8009f3e:	2b02      	cmp	r3, #2
 8009f40:	d901      	bls.n	8009f46 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009f42:	2303      	movs	r3, #3
 8009f44:	e090      	b.n	800a068 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009f46:	4b10      	ldr	r3, [pc, #64]	; (8009f88 <HAL_RCC_OscConfig+0x6c4>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d0f0      	beq.n	8009f34 <HAL_RCC_OscConfig+0x670>
 8009f52:	e088      	b.n	800a066 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f54:	4b0c      	ldr	r3, [pc, #48]	; (8009f88 <HAL_RCC_OscConfig+0x6c4>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a0b      	ldr	r2, [pc, #44]	; (8009f88 <HAL_RCC_OscConfig+0x6c4>)
 8009f5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f60:	f7f9 fd94 	bl	8003a8c <HAL_GetTick>
 8009f64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f66:	e008      	b.n	8009f7a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f68:	f7f9 fd90 	bl	8003a8c <HAL_GetTick>
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f70:	1ad3      	subs	r3, r2, r3
 8009f72:	2b02      	cmp	r3, #2
 8009f74:	d901      	bls.n	8009f7a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009f76:	2303      	movs	r3, #3
 8009f78:	e076      	b.n	800a068 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f7a:	4b03      	ldr	r3, [pc, #12]	; (8009f88 <HAL_RCC_OscConfig+0x6c4>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d1f0      	bne.n	8009f68 <HAL_RCC_OscConfig+0x6a4>
 8009f86:	e06e      	b.n	800a066 <HAL_RCC_OscConfig+0x7a2>
 8009f88:	58024400 	.word	0x58024400
 8009f8c:	fffffc0c 	.word	0xfffffc0c
 8009f90:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009f94:	4b36      	ldr	r3, [pc, #216]	; (800a070 <HAL_RCC_OscConfig+0x7ac>)
 8009f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f98:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009f9a:	4b35      	ldr	r3, [pc, #212]	; (800a070 <HAL_RCC_OscConfig+0x7ac>)
 8009f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f9e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d031      	beq.n	800a00c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	f003 0203 	and.w	r2, r3, #3
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d12a      	bne.n	800a00c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	091b      	lsrs	r3, r3, #4
 8009fba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d122      	bne.n	800a00c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fd0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d11a      	bne.n	800a00c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	0a5b      	lsrs	r3, r3, #9
 8009fda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fe2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d111      	bne.n	800a00c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	0c1b      	lsrs	r3, r3, #16
 8009fec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ff4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d108      	bne.n	800a00c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	0e1b      	lsrs	r3, r3, #24
 8009ffe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a006:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a008:	429a      	cmp	r2, r3
 800a00a:	d001      	beq.n	800a010 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800a00c:	2301      	movs	r3, #1
 800a00e:	e02b      	b.n	800a068 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a010:	4b17      	ldr	r3, [pc, #92]	; (800a070 <HAL_RCC_OscConfig+0x7ac>)
 800a012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a014:	08db      	lsrs	r3, r3, #3
 800a016:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a01a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a020:	693a      	ldr	r2, [r7, #16]
 800a022:	429a      	cmp	r2, r3
 800a024:	d01f      	beq.n	800a066 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a026:	4b12      	ldr	r3, [pc, #72]	; (800a070 <HAL_RCC_OscConfig+0x7ac>)
 800a028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a02a:	4a11      	ldr	r2, [pc, #68]	; (800a070 <HAL_RCC_OscConfig+0x7ac>)
 800a02c:	f023 0301 	bic.w	r3, r3, #1
 800a030:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a032:	f7f9 fd2b 	bl	8003a8c <HAL_GetTick>
 800a036:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a038:	bf00      	nop
 800a03a:	f7f9 fd27 	bl	8003a8c <HAL_GetTick>
 800a03e:	4602      	mov	r2, r0
 800a040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a042:	4293      	cmp	r3, r2
 800a044:	d0f9      	beq.n	800a03a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a046:	4b0a      	ldr	r3, [pc, #40]	; (800a070 <HAL_RCC_OscConfig+0x7ac>)
 800a048:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a04a:	4b0a      	ldr	r3, [pc, #40]	; (800a074 <HAL_RCC_OscConfig+0x7b0>)
 800a04c:	4013      	ands	r3, r2
 800a04e:	687a      	ldr	r2, [r7, #4]
 800a050:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a052:	00d2      	lsls	r2, r2, #3
 800a054:	4906      	ldr	r1, [pc, #24]	; (800a070 <HAL_RCC_OscConfig+0x7ac>)
 800a056:	4313      	orrs	r3, r2
 800a058:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a05a:	4b05      	ldr	r3, [pc, #20]	; (800a070 <HAL_RCC_OscConfig+0x7ac>)
 800a05c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a05e:	4a04      	ldr	r2, [pc, #16]	; (800a070 <HAL_RCC_OscConfig+0x7ac>)
 800a060:	f043 0301 	orr.w	r3, r3, #1
 800a064:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a066:	2300      	movs	r3, #0
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3730      	adds	r7, #48	; 0x30
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}
 800a070:	58024400 	.word	0x58024400
 800a074:	ffff0007 	.word	0xffff0007

0800a078 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b086      	sub	sp, #24
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d101      	bne.n	800a08c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a088:	2301      	movs	r3, #1
 800a08a:	e19c      	b.n	800a3c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a08c:	4b8a      	ldr	r3, [pc, #552]	; (800a2b8 <HAL_RCC_ClockConfig+0x240>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f003 030f 	and.w	r3, r3, #15
 800a094:	683a      	ldr	r2, [r7, #0]
 800a096:	429a      	cmp	r2, r3
 800a098:	d910      	bls.n	800a0bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a09a:	4b87      	ldr	r3, [pc, #540]	; (800a2b8 <HAL_RCC_ClockConfig+0x240>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f023 020f 	bic.w	r2, r3, #15
 800a0a2:	4985      	ldr	r1, [pc, #532]	; (800a2b8 <HAL_RCC_ClockConfig+0x240>)
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0aa:	4b83      	ldr	r3, [pc, #524]	; (800a2b8 <HAL_RCC_ClockConfig+0x240>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f003 030f 	and.w	r3, r3, #15
 800a0b2:	683a      	ldr	r2, [r7, #0]
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d001      	beq.n	800a0bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	e184      	b.n	800a3c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f003 0304 	and.w	r3, r3, #4
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d010      	beq.n	800a0ea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	691a      	ldr	r2, [r3, #16]
 800a0cc:	4b7b      	ldr	r3, [pc, #492]	; (800a2bc <HAL_RCC_ClockConfig+0x244>)
 800a0ce:	699b      	ldr	r3, [r3, #24]
 800a0d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d908      	bls.n	800a0ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a0d8:	4b78      	ldr	r3, [pc, #480]	; (800a2bc <HAL_RCC_ClockConfig+0x244>)
 800a0da:	699b      	ldr	r3, [r3, #24]
 800a0dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	691b      	ldr	r3, [r3, #16]
 800a0e4:	4975      	ldr	r1, [pc, #468]	; (800a2bc <HAL_RCC_ClockConfig+0x244>)
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f003 0308 	and.w	r3, r3, #8
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d010      	beq.n	800a118 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	695a      	ldr	r2, [r3, #20]
 800a0fa:	4b70      	ldr	r3, [pc, #448]	; (800a2bc <HAL_RCC_ClockConfig+0x244>)
 800a0fc:	69db      	ldr	r3, [r3, #28]
 800a0fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a102:	429a      	cmp	r2, r3
 800a104:	d908      	bls.n	800a118 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a106:	4b6d      	ldr	r3, [pc, #436]	; (800a2bc <HAL_RCC_ClockConfig+0x244>)
 800a108:	69db      	ldr	r3, [r3, #28]
 800a10a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	695b      	ldr	r3, [r3, #20]
 800a112:	496a      	ldr	r1, [pc, #424]	; (800a2bc <HAL_RCC_ClockConfig+0x244>)
 800a114:	4313      	orrs	r3, r2
 800a116:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f003 0310 	and.w	r3, r3, #16
 800a120:	2b00      	cmp	r3, #0
 800a122:	d010      	beq.n	800a146 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	699a      	ldr	r2, [r3, #24]
 800a128:	4b64      	ldr	r3, [pc, #400]	; (800a2bc <HAL_RCC_ClockConfig+0x244>)
 800a12a:	69db      	ldr	r3, [r3, #28]
 800a12c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a130:	429a      	cmp	r2, r3
 800a132:	d908      	bls.n	800a146 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a134:	4b61      	ldr	r3, [pc, #388]	; (800a2bc <HAL_RCC_ClockConfig+0x244>)
 800a136:	69db      	ldr	r3, [r3, #28]
 800a138:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	699b      	ldr	r3, [r3, #24]
 800a140:	495e      	ldr	r1, [pc, #376]	; (800a2bc <HAL_RCC_ClockConfig+0x244>)
 800a142:	4313      	orrs	r3, r2
 800a144:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f003 0320 	and.w	r3, r3, #32
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d010      	beq.n	800a174 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	69da      	ldr	r2, [r3, #28]
 800a156:	4b59      	ldr	r3, [pc, #356]	; (800a2bc <HAL_RCC_ClockConfig+0x244>)
 800a158:	6a1b      	ldr	r3, [r3, #32]
 800a15a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a15e:	429a      	cmp	r2, r3
 800a160:	d908      	bls.n	800a174 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a162:	4b56      	ldr	r3, [pc, #344]	; (800a2bc <HAL_RCC_ClockConfig+0x244>)
 800a164:	6a1b      	ldr	r3, [r3, #32]
 800a166:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	69db      	ldr	r3, [r3, #28]
 800a16e:	4953      	ldr	r1, [pc, #332]	; (800a2bc <HAL_RCC_ClockConfig+0x244>)
 800a170:	4313      	orrs	r3, r2
 800a172:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f003 0302 	and.w	r3, r3, #2
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d010      	beq.n	800a1a2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	68da      	ldr	r2, [r3, #12]
 800a184:	4b4d      	ldr	r3, [pc, #308]	; (800a2bc <HAL_RCC_ClockConfig+0x244>)
 800a186:	699b      	ldr	r3, [r3, #24]
 800a188:	f003 030f 	and.w	r3, r3, #15
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d908      	bls.n	800a1a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a190:	4b4a      	ldr	r3, [pc, #296]	; (800a2bc <HAL_RCC_ClockConfig+0x244>)
 800a192:	699b      	ldr	r3, [r3, #24]
 800a194:	f023 020f 	bic.w	r2, r3, #15
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	68db      	ldr	r3, [r3, #12]
 800a19c:	4947      	ldr	r1, [pc, #284]	; (800a2bc <HAL_RCC_ClockConfig+0x244>)
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f003 0301 	and.w	r3, r3, #1
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d055      	beq.n	800a25a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a1ae:	4b43      	ldr	r3, [pc, #268]	; (800a2bc <HAL_RCC_ClockConfig+0x244>)
 800a1b0:	699b      	ldr	r3, [r3, #24]
 800a1b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	4940      	ldr	r1, [pc, #256]	; (800a2bc <HAL_RCC_ClockConfig+0x244>)
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	2b02      	cmp	r3, #2
 800a1c6:	d107      	bne.n	800a1d8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a1c8:	4b3c      	ldr	r3, [pc, #240]	; (800a2bc <HAL_RCC_ClockConfig+0x244>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d121      	bne.n	800a218 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	e0f6      	b.n	800a3c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	2b03      	cmp	r3, #3
 800a1de:	d107      	bne.n	800a1f0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a1e0:	4b36      	ldr	r3, [pc, #216]	; (800a2bc <HAL_RCC_ClockConfig+0x244>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d115      	bne.n	800a218 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	e0ea      	b.n	800a3c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d107      	bne.n	800a208 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a1f8:	4b30      	ldr	r3, [pc, #192]	; (800a2bc <HAL_RCC_ClockConfig+0x244>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a200:	2b00      	cmp	r3, #0
 800a202:	d109      	bne.n	800a218 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a204:	2301      	movs	r3, #1
 800a206:	e0de      	b.n	800a3c6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a208:	4b2c      	ldr	r3, [pc, #176]	; (800a2bc <HAL_RCC_ClockConfig+0x244>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f003 0304 	and.w	r3, r3, #4
 800a210:	2b00      	cmp	r3, #0
 800a212:	d101      	bne.n	800a218 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a214:	2301      	movs	r3, #1
 800a216:	e0d6      	b.n	800a3c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a218:	4b28      	ldr	r3, [pc, #160]	; (800a2bc <HAL_RCC_ClockConfig+0x244>)
 800a21a:	691b      	ldr	r3, [r3, #16]
 800a21c:	f023 0207 	bic.w	r2, r3, #7
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	4925      	ldr	r1, [pc, #148]	; (800a2bc <HAL_RCC_ClockConfig+0x244>)
 800a226:	4313      	orrs	r3, r2
 800a228:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a22a:	f7f9 fc2f 	bl	8003a8c <HAL_GetTick>
 800a22e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a230:	e00a      	b.n	800a248 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a232:	f7f9 fc2b 	bl	8003a8c <HAL_GetTick>
 800a236:	4602      	mov	r2, r0
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	1ad3      	subs	r3, r2, r3
 800a23c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a240:	4293      	cmp	r3, r2
 800a242:	d901      	bls.n	800a248 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a244:	2303      	movs	r3, #3
 800a246:	e0be      	b.n	800a3c6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a248:	4b1c      	ldr	r3, [pc, #112]	; (800a2bc <HAL_RCC_ClockConfig+0x244>)
 800a24a:	691b      	ldr	r3, [r3, #16]
 800a24c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	00db      	lsls	r3, r3, #3
 800a256:	429a      	cmp	r2, r3
 800a258:	d1eb      	bne.n	800a232 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f003 0302 	and.w	r3, r3, #2
 800a262:	2b00      	cmp	r3, #0
 800a264:	d010      	beq.n	800a288 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	68da      	ldr	r2, [r3, #12]
 800a26a:	4b14      	ldr	r3, [pc, #80]	; (800a2bc <HAL_RCC_ClockConfig+0x244>)
 800a26c:	699b      	ldr	r3, [r3, #24]
 800a26e:	f003 030f 	and.w	r3, r3, #15
 800a272:	429a      	cmp	r2, r3
 800a274:	d208      	bcs.n	800a288 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a276:	4b11      	ldr	r3, [pc, #68]	; (800a2bc <HAL_RCC_ClockConfig+0x244>)
 800a278:	699b      	ldr	r3, [r3, #24]
 800a27a:	f023 020f 	bic.w	r2, r3, #15
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	68db      	ldr	r3, [r3, #12]
 800a282:	490e      	ldr	r1, [pc, #56]	; (800a2bc <HAL_RCC_ClockConfig+0x244>)
 800a284:	4313      	orrs	r3, r2
 800a286:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a288:	4b0b      	ldr	r3, [pc, #44]	; (800a2b8 <HAL_RCC_ClockConfig+0x240>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f003 030f 	and.w	r3, r3, #15
 800a290:	683a      	ldr	r2, [r7, #0]
 800a292:	429a      	cmp	r2, r3
 800a294:	d214      	bcs.n	800a2c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a296:	4b08      	ldr	r3, [pc, #32]	; (800a2b8 <HAL_RCC_ClockConfig+0x240>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f023 020f 	bic.w	r2, r3, #15
 800a29e:	4906      	ldr	r1, [pc, #24]	; (800a2b8 <HAL_RCC_ClockConfig+0x240>)
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2a6:	4b04      	ldr	r3, [pc, #16]	; (800a2b8 <HAL_RCC_ClockConfig+0x240>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f003 030f 	and.w	r3, r3, #15
 800a2ae:	683a      	ldr	r2, [r7, #0]
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d005      	beq.n	800a2c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	e086      	b.n	800a3c6 <HAL_RCC_ClockConfig+0x34e>
 800a2b8:	52002000 	.word	0x52002000
 800a2bc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f003 0304 	and.w	r3, r3, #4
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d010      	beq.n	800a2ee <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	691a      	ldr	r2, [r3, #16]
 800a2d0:	4b3f      	ldr	r3, [pc, #252]	; (800a3d0 <HAL_RCC_ClockConfig+0x358>)
 800a2d2:	699b      	ldr	r3, [r3, #24]
 800a2d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d208      	bcs.n	800a2ee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a2dc:	4b3c      	ldr	r3, [pc, #240]	; (800a3d0 <HAL_RCC_ClockConfig+0x358>)
 800a2de:	699b      	ldr	r3, [r3, #24]
 800a2e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	691b      	ldr	r3, [r3, #16]
 800a2e8:	4939      	ldr	r1, [pc, #228]	; (800a3d0 <HAL_RCC_ClockConfig+0x358>)
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f003 0308 	and.w	r3, r3, #8
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d010      	beq.n	800a31c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	695a      	ldr	r2, [r3, #20]
 800a2fe:	4b34      	ldr	r3, [pc, #208]	; (800a3d0 <HAL_RCC_ClockConfig+0x358>)
 800a300:	69db      	ldr	r3, [r3, #28]
 800a302:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a306:	429a      	cmp	r2, r3
 800a308:	d208      	bcs.n	800a31c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a30a:	4b31      	ldr	r3, [pc, #196]	; (800a3d0 <HAL_RCC_ClockConfig+0x358>)
 800a30c:	69db      	ldr	r3, [r3, #28]
 800a30e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	695b      	ldr	r3, [r3, #20]
 800a316:	492e      	ldr	r1, [pc, #184]	; (800a3d0 <HAL_RCC_ClockConfig+0x358>)
 800a318:	4313      	orrs	r3, r2
 800a31a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f003 0310 	and.w	r3, r3, #16
 800a324:	2b00      	cmp	r3, #0
 800a326:	d010      	beq.n	800a34a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	699a      	ldr	r2, [r3, #24]
 800a32c:	4b28      	ldr	r3, [pc, #160]	; (800a3d0 <HAL_RCC_ClockConfig+0x358>)
 800a32e:	69db      	ldr	r3, [r3, #28]
 800a330:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a334:	429a      	cmp	r2, r3
 800a336:	d208      	bcs.n	800a34a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a338:	4b25      	ldr	r3, [pc, #148]	; (800a3d0 <HAL_RCC_ClockConfig+0x358>)
 800a33a:	69db      	ldr	r3, [r3, #28]
 800a33c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	699b      	ldr	r3, [r3, #24]
 800a344:	4922      	ldr	r1, [pc, #136]	; (800a3d0 <HAL_RCC_ClockConfig+0x358>)
 800a346:	4313      	orrs	r3, r2
 800a348:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f003 0320 	and.w	r3, r3, #32
 800a352:	2b00      	cmp	r3, #0
 800a354:	d010      	beq.n	800a378 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	69da      	ldr	r2, [r3, #28]
 800a35a:	4b1d      	ldr	r3, [pc, #116]	; (800a3d0 <HAL_RCC_ClockConfig+0x358>)
 800a35c:	6a1b      	ldr	r3, [r3, #32]
 800a35e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a362:	429a      	cmp	r2, r3
 800a364:	d208      	bcs.n	800a378 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a366:	4b1a      	ldr	r3, [pc, #104]	; (800a3d0 <HAL_RCC_ClockConfig+0x358>)
 800a368:	6a1b      	ldr	r3, [r3, #32]
 800a36a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	69db      	ldr	r3, [r3, #28]
 800a372:	4917      	ldr	r1, [pc, #92]	; (800a3d0 <HAL_RCC_ClockConfig+0x358>)
 800a374:	4313      	orrs	r3, r2
 800a376:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a378:	f000 f89e 	bl	800a4b8 <HAL_RCC_GetSysClockFreq>
 800a37c:	4602      	mov	r2, r0
 800a37e:	4b14      	ldr	r3, [pc, #80]	; (800a3d0 <HAL_RCC_ClockConfig+0x358>)
 800a380:	699b      	ldr	r3, [r3, #24]
 800a382:	0a1b      	lsrs	r3, r3, #8
 800a384:	f003 030f 	and.w	r3, r3, #15
 800a388:	4912      	ldr	r1, [pc, #72]	; (800a3d4 <HAL_RCC_ClockConfig+0x35c>)
 800a38a:	5ccb      	ldrb	r3, [r1, r3]
 800a38c:	f003 031f 	and.w	r3, r3, #31
 800a390:	fa22 f303 	lsr.w	r3, r2, r3
 800a394:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a396:	4b0e      	ldr	r3, [pc, #56]	; (800a3d0 <HAL_RCC_ClockConfig+0x358>)
 800a398:	699b      	ldr	r3, [r3, #24]
 800a39a:	f003 030f 	and.w	r3, r3, #15
 800a39e:	4a0d      	ldr	r2, [pc, #52]	; (800a3d4 <HAL_RCC_ClockConfig+0x35c>)
 800a3a0:	5cd3      	ldrb	r3, [r2, r3]
 800a3a2:	f003 031f 	and.w	r3, r3, #31
 800a3a6:	693a      	ldr	r2, [r7, #16]
 800a3a8:	fa22 f303 	lsr.w	r3, r2, r3
 800a3ac:	4a0a      	ldr	r2, [pc, #40]	; (800a3d8 <HAL_RCC_ClockConfig+0x360>)
 800a3ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a3b0:	4a0a      	ldr	r2, [pc, #40]	; (800a3dc <HAL_RCC_ClockConfig+0x364>)
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a3b6:	4b0a      	ldr	r3, [pc, #40]	; (800a3e0 <HAL_RCC_ClockConfig+0x368>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f7f9 fb1c 	bl	80039f8 <HAL_InitTick>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a3c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3718      	adds	r7, #24
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	58024400 	.word	0x58024400
 800a3d4:	080185a0 	.word	0x080185a0
 800a3d8:	24000004 	.word	0x24000004
 800a3dc:	24000000 	.word	0x24000000
 800a3e0:	24000008 	.word	0x24000008

0800a3e4 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b08c      	sub	sp, #48	; 0x30
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	60b9      	str	r1, [r7, #8]
 800a3ee:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d12a      	bne.n	800a44c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a3f6:	4b2d      	ldr	r3, [pc, #180]	; (800a4ac <HAL_RCC_MCOConfig+0xc8>)
 800a3f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a3fc:	4a2b      	ldr	r2, [pc, #172]	; (800a4ac <HAL_RCC_MCOConfig+0xc8>)
 800a3fe:	f043 0301 	orr.w	r3, r3, #1
 800a402:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a406:	4b29      	ldr	r3, [pc, #164]	; (800a4ac <HAL_RCC_MCOConfig+0xc8>)
 800a408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a40c:	f003 0301 	and.w	r3, r3, #1
 800a410:	61bb      	str	r3, [r7, #24]
 800a412:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a414:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a41a:	2302      	movs	r3, #2
 800a41c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a41e:	2303      	movs	r3, #3
 800a420:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a422:	2300      	movs	r3, #0
 800a424:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a426:	2300      	movs	r3, #0
 800a428:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a42a:	f107 031c 	add.w	r3, r7, #28
 800a42e:	4619      	mov	r1, r3
 800a430:	481f      	ldr	r0, [pc, #124]	; (800a4b0 <HAL_RCC_MCOConfig+0xcc>)
 800a432:	f7fd fc29 	bl	8007c88 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a436:	4b1d      	ldr	r3, [pc, #116]	; (800a4ac <HAL_RCC_MCOConfig+0xc8>)
 800a438:	691b      	ldr	r3, [r3, #16]
 800a43a:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800a43e:	68b9      	ldr	r1, [r7, #8]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	430b      	orrs	r3, r1
 800a444:	4919      	ldr	r1, [pc, #100]	; (800a4ac <HAL_RCC_MCOConfig+0xc8>)
 800a446:	4313      	orrs	r3, r2
 800a448:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800a44a:	e02a      	b.n	800a4a2 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800a44c:	4b17      	ldr	r3, [pc, #92]	; (800a4ac <HAL_RCC_MCOConfig+0xc8>)
 800a44e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a452:	4a16      	ldr	r2, [pc, #88]	; (800a4ac <HAL_RCC_MCOConfig+0xc8>)
 800a454:	f043 0304 	orr.w	r3, r3, #4
 800a458:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a45c:	4b13      	ldr	r3, [pc, #76]	; (800a4ac <HAL_RCC_MCOConfig+0xc8>)
 800a45e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a462:	f003 0304 	and.w	r3, r3, #4
 800a466:	617b      	str	r3, [r7, #20]
 800a468:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a46a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a46e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a470:	2302      	movs	r3, #2
 800a472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a474:	2303      	movs	r3, #3
 800a476:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a478:	2300      	movs	r3, #0
 800a47a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a47c:	2300      	movs	r3, #0
 800a47e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a480:	f107 031c 	add.w	r3, r7, #28
 800a484:	4619      	mov	r1, r3
 800a486:	480b      	ldr	r0, [pc, #44]	; (800a4b4 <HAL_RCC_MCOConfig+0xd0>)
 800a488:	f7fd fbfe 	bl	8007c88 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a48c:	4b07      	ldr	r3, [pc, #28]	; (800a4ac <HAL_RCC_MCOConfig+0xc8>)
 800a48e:	691b      	ldr	r3, [r3, #16]
 800a490:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	01d9      	lsls	r1, r3, #7
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	430b      	orrs	r3, r1
 800a49c:	4903      	ldr	r1, [pc, #12]	; (800a4ac <HAL_RCC_MCOConfig+0xc8>)
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	610b      	str	r3, [r1, #16]
}
 800a4a2:	bf00      	nop
 800a4a4:	3730      	adds	r7, #48	; 0x30
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
 800a4aa:	bf00      	nop
 800a4ac:	58024400 	.word	0x58024400
 800a4b0:	58020000 	.word	0x58020000
 800a4b4:	58020800 	.word	0x58020800

0800a4b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b089      	sub	sp, #36	; 0x24
 800a4bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a4be:	4bb3      	ldr	r3, [pc, #716]	; (800a78c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4c0:	691b      	ldr	r3, [r3, #16]
 800a4c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a4c6:	2b18      	cmp	r3, #24
 800a4c8:	f200 8155 	bhi.w	800a776 <HAL_RCC_GetSysClockFreq+0x2be>
 800a4cc:	a201      	add	r2, pc, #4	; (adr r2, 800a4d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a4ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4d2:	bf00      	nop
 800a4d4:	0800a539 	.word	0x0800a539
 800a4d8:	0800a777 	.word	0x0800a777
 800a4dc:	0800a777 	.word	0x0800a777
 800a4e0:	0800a777 	.word	0x0800a777
 800a4e4:	0800a777 	.word	0x0800a777
 800a4e8:	0800a777 	.word	0x0800a777
 800a4ec:	0800a777 	.word	0x0800a777
 800a4f0:	0800a777 	.word	0x0800a777
 800a4f4:	0800a55f 	.word	0x0800a55f
 800a4f8:	0800a777 	.word	0x0800a777
 800a4fc:	0800a777 	.word	0x0800a777
 800a500:	0800a777 	.word	0x0800a777
 800a504:	0800a777 	.word	0x0800a777
 800a508:	0800a777 	.word	0x0800a777
 800a50c:	0800a777 	.word	0x0800a777
 800a510:	0800a777 	.word	0x0800a777
 800a514:	0800a565 	.word	0x0800a565
 800a518:	0800a777 	.word	0x0800a777
 800a51c:	0800a777 	.word	0x0800a777
 800a520:	0800a777 	.word	0x0800a777
 800a524:	0800a777 	.word	0x0800a777
 800a528:	0800a777 	.word	0x0800a777
 800a52c:	0800a777 	.word	0x0800a777
 800a530:	0800a777 	.word	0x0800a777
 800a534:	0800a56b 	.word	0x0800a56b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a538:	4b94      	ldr	r3, [pc, #592]	; (800a78c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f003 0320 	and.w	r3, r3, #32
 800a540:	2b00      	cmp	r3, #0
 800a542:	d009      	beq.n	800a558 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a544:	4b91      	ldr	r3, [pc, #580]	; (800a78c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	08db      	lsrs	r3, r3, #3
 800a54a:	f003 0303 	and.w	r3, r3, #3
 800a54e:	4a90      	ldr	r2, [pc, #576]	; (800a790 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a550:	fa22 f303 	lsr.w	r3, r2, r3
 800a554:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a556:	e111      	b.n	800a77c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a558:	4b8d      	ldr	r3, [pc, #564]	; (800a790 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a55a:	61bb      	str	r3, [r7, #24]
      break;
 800a55c:	e10e      	b.n	800a77c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a55e:	4b8d      	ldr	r3, [pc, #564]	; (800a794 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a560:	61bb      	str	r3, [r7, #24]
      break;
 800a562:	e10b      	b.n	800a77c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a564:	4b8c      	ldr	r3, [pc, #560]	; (800a798 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a566:	61bb      	str	r3, [r7, #24]
      break;
 800a568:	e108      	b.n	800a77c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a56a:	4b88      	ldr	r3, [pc, #544]	; (800a78c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a56c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a56e:	f003 0303 	and.w	r3, r3, #3
 800a572:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a574:	4b85      	ldr	r3, [pc, #532]	; (800a78c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a578:	091b      	lsrs	r3, r3, #4
 800a57a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a57e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a580:	4b82      	ldr	r3, [pc, #520]	; (800a78c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a584:	f003 0301 	and.w	r3, r3, #1
 800a588:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a58a:	4b80      	ldr	r3, [pc, #512]	; (800a78c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a58c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a58e:	08db      	lsrs	r3, r3, #3
 800a590:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a594:	68fa      	ldr	r2, [r7, #12]
 800a596:	fb02 f303 	mul.w	r3, r2, r3
 800a59a:	ee07 3a90 	vmov	s15, r3
 800a59e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5a2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	f000 80e1 	beq.w	800a770 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	2b02      	cmp	r3, #2
 800a5b2:	f000 8083 	beq.w	800a6bc <HAL_RCC_GetSysClockFreq+0x204>
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	2b02      	cmp	r3, #2
 800a5ba:	f200 80a1 	bhi.w	800a700 <HAL_RCC_GetSysClockFreq+0x248>
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d003      	beq.n	800a5cc <HAL_RCC_GetSysClockFreq+0x114>
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	2b01      	cmp	r3, #1
 800a5c8:	d056      	beq.n	800a678 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a5ca:	e099      	b.n	800a700 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a5cc:	4b6f      	ldr	r3, [pc, #444]	; (800a78c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f003 0320 	and.w	r3, r3, #32
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d02d      	beq.n	800a634 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5d8:	4b6c      	ldr	r3, [pc, #432]	; (800a78c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	08db      	lsrs	r3, r3, #3
 800a5de:	f003 0303 	and.w	r3, r3, #3
 800a5e2:	4a6b      	ldr	r2, [pc, #428]	; (800a790 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a5e4:	fa22 f303 	lsr.w	r3, r2, r3
 800a5e8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	ee07 3a90 	vmov	s15, r3
 800a5f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	ee07 3a90 	vmov	s15, r3
 800a5fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a602:	4b62      	ldr	r3, [pc, #392]	; (800a78c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a60a:	ee07 3a90 	vmov	s15, r3
 800a60e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a612:	ed97 6a02 	vldr	s12, [r7, #8]
 800a616:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a79c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a61a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a61e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a62a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a62e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a632:	e087      	b.n	800a744 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	ee07 3a90 	vmov	s15, r3
 800a63a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a63e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a7a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a646:	4b51      	ldr	r3, [pc, #324]	; (800a78c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a64a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a64e:	ee07 3a90 	vmov	s15, r3
 800a652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a656:	ed97 6a02 	vldr	s12, [r7, #8]
 800a65a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a79c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a65e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a66a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a66e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a672:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a676:	e065      	b.n	800a744 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	ee07 3a90 	vmov	s15, r3
 800a67e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a682:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a7a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a68a:	4b40      	ldr	r3, [pc, #256]	; (800a78c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a68c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a68e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a692:	ee07 3a90 	vmov	s15, r3
 800a696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a69a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a69e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a79c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a6a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a6ba:	e043      	b.n	800a744 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	ee07 3a90 	vmov	s15, r3
 800a6c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6c6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a7a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a6ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6ce:	4b2f      	ldr	r3, [pc, #188]	; (800a78c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6d6:	ee07 3a90 	vmov	s15, r3
 800a6da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6de:	ed97 6a02 	vldr	s12, [r7, #8]
 800a6e2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a79c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a6e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a6fe:	e021      	b.n	800a744 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	ee07 3a90 	vmov	s15, r3
 800a706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a70a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a7a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a70e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a712:	4b1e      	ldr	r3, [pc, #120]	; (800a78c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a71a:	ee07 3a90 	vmov	s15, r3
 800a71e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a722:	ed97 6a02 	vldr	s12, [r7, #8]
 800a726:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a79c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a72a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a72e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a73a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a73e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a742:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a744:	4b11      	ldr	r3, [pc, #68]	; (800a78c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a748:	0a5b      	lsrs	r3, r3, #9
 800a74a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a74e:	3301      	adds	r3, #1
 800a750:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	ee07 3a90 	vmov	s15, r3
 800a758:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a75c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a760:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a764:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a768:	ee17 3a90 	vmov	r3, s15
 800a76c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a76e:	e005      	b.n	800a77c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a770:	2300      	movs	r3, #0
 800a772:	61bb      	str	r3, [r7, #24]
      break;
 800a774:	e002      	b.n	800a77c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a776:	4b07      	ldr	r3, [pc, #28]	; (800a794 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a778:	61bb      	str	r3, [r7, #24]
      break;
 800a77a:	bf00      	nop
  }

  return sysclockfreq;
 800a77c:	69bb      	ldr	r3, [r7, #24]
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3724      	adds	r7, #36	; 0x24
 800a782:	46bd      	mov	sp, r7
 800a784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a788:	4770      	bx	lr
 800a78a:	bf00      	nop
 800a78c:	58024400 	.word	0x58024400
 800a790:	03d09000 	.word	0x03d09000
 800a794:	003d0900 	.word	0x003d0900
 800a798:	02faf080 	.word	0x02faf080
 800a79c:	46000000 	.word	0x46000000
 800a7a0:	4c742400 	.word	0x4c742400
 800a7a4:	4a742400 	.word	0x4a742400
 800a7a8:	4c3ebc20 	.word	0x4c3ebc20

0800a7ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b082      	sub	sp, #8
 800a7b0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a7b2:	f7ff fe81 	bl	800a4b8 <HAL_RCC_GetSysClockFreq>
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	4b10      	ldr	r3, [pc, #64]	; (800a7fc <HAL_RCC_GetHCLKFreq+0x50>)
 800a7ba:	699b      	ldr	r3, [r3, #24]
 800a7bc:	0a1b      	lsrs	r3, r3, #8
 800a7be:	f003 030f 	and.w	r3, r3, #15
 800a7c2:	490f      	ldr	r1, [pc, #60]	; (800a800 <HAL_RCC_GetHCLKFreq+0x54>)
 800a7c4:	5ccb      	ldrb	r3, [r1, r3]
 800a7c6:	f003 031f 	and.w	r3, r3, #31
 800a7ca:	fa22 f303 	lsr.w	r3, r2, r3
 800a7ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a7d0:	4b0a      	ldr	r3, [pc, #40]	; (800a7fc <HAL_RCC_GetHCLKFreq+0x50>)
 800a7d2:	699b      	ldr	r3, [r3, #24]
 800a7d4:	f003 030f 	and.w	r3, r3, #15
 800a7d8:	4a09      	ldr	r2, [pc, #36]	; (800a800 <HAL_RCC_GetHCLKFreq+0x54>)
 800a7da:	5cd3      	ldrb	r3, [r2, r3]
 800a7dc:	f003 031f 	and.w	r3, r3, #31
 800a7e0:	687a      	ldr	r2, [r7, #4]
 800a7e2:	fa22 f303 	lsr.w	r3, r2, r3
 800a7e6:	4a07      	ldr	r2, [pc, #28]	; (800a804 <HAL_RCC_GetHCLKFreq+0x58>)
 800a7e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a7ea:	4a07      	ldr	r2, [pc, #28]	; (800a808 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a7f0:	4b04      	ldr	r3, [pc, #16]	; (800a804 <HAL_RCC_GetHCLKFreq+0x58>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3708      	adds	r7, #8
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}
 800a7fc:	58024400 	.word	0x58024400
 800a800:	080185a0 	.word	0x080185a0
 800a804:	24000004 	.word	0x24000004
 800a808:	24000000 	.word	0x24000000

0800a80c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a810:	f7ff ffcc 	bl	800a7ac <HAL_RCC_GetHCLKFreq>
 800a814:	4602      	mov	r2, r0
 800a816:	4b06      	ldr	r3, [pc, #24]	; (800a830 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a818:	69db      	ldr	r3, [r3, #28]
 800a81a:	091b      	lsrs	r3, r3, #4
 800a81c:	f003 0307 	and.w	r3, r3, #7
 800a820:	4904      	ldr	r1, [pc, #16]	; (800a834 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a822:	5ccb      	ldrb	r3, [r1, r3]
 800a824:	f003 031f 	and.w	r3, r3, #31
 800a828:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	bd80      	pop	{r7, pc}
 800a830:	58024400 	.word	0x58024400
 800a834:	080185a0 	.word	0x080185a0

0800a838 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a83c:	f7ff ffb6 	bl	800a7ac <HAL_RCC_GetHCLKFreq>
 800a840:	4602      	mov	r2, r0
 800a842:	4b06      	ldr	r3, [pc, #24]	; (800a85c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a844:	69db      	ldr	r3, [r3, #28]
 800a846:	0a1b      	lsrs	r3, r3, #8
 800a848:	f003 0307 	and.w	r3, r3, #7
 800a84c:	4904      	ldr	r1, [pc, #16]	; (800a860 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a84e:	5ccb      	ldrb	r3, [r1, r3]
 800a850:	f003 031f 	and.w	r3, r3, #31
 800a854:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a858:	4618      	mov	r0, r3
 800a85a:	bd80      	pop	{r7, pc}
 800a85c:	58024400 	.word	0x58024400
 800a860:	080185a0 	.word	0x080185a0

0800a864 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a868:	b0c6      	sub	sp, #280	; 0x118
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a870:	2300      	movs	r3, #0
 800a872:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a876:	2300      	movs	r3, #0
 800a878:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a87c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a884:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a888:	2500      	movs	r5, #0
 800a88a:	ea54 0305 	orrs.w	r3, r4, r5
 800a88e:	d049      	beq.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a890:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a894:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a896:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a89a:	d02f      	beq.n	800a8fc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a89c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a8a0:	d828      	bhi.n	800a8f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a8a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a8a6:	d01a      	beq.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a8a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a8ac:	d822      	bhi.n	800a8f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d003      	beq.n	800a8ba <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a8b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a8b6:	d007      	beq.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a8b8:	e01c      	b.n	800a8f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8ba:	4bab      	ldr	r3, [pc, #684]	; (800ab68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a8bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8be:	4aaa      	ldr	r2, [pc, #680]	; (800ab68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a8c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a8c6:	e01a      	b.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a8c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8cc:	3308      	adds	r3, #8
 800a8ce:	2102      	movs	r1, #2
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f002 fa49 	bl	800cd68 <RCCEx_PLL2_Config>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a8dc:	e00f      	b.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a8de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8e2:	3328      	adds	r3, #40	; 0x28
 800a8e4:	2102      	movs	r1, #2
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f002 faf0 	bl	800cecc <RCCEx_PLL3_Config>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a8f2:	e004      	b.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a8fa:	e000      	b.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a8fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a902:	2b00      	cmp	r3, #0
 800a904:	d10a      	bne.n	800a91c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a906:	4b98      	ldr	r3, [pc, #608]	; (800ab68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a90a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a90e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a912:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a914:	4a94      	ldr	r2, [pc, #592]	; (800ab68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a916:	430b      	orrs	r3, r1
 800a918:	6513      	str	r3, [r2, #80]	; 0x50
 800a91a:	e003      	b.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a91c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a920:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a924:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a930:	f04f 0900 	mov.w	r9, #0
 800a934:	ea58 0309 	orrs.w	r3, r8, r9
 800a938:	d047      	beq.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a93a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a93e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a940:	2b04      	cmp	r3, #4
 800a942:	d82a      	bhi.n	800a99a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a944:	a201      	add	r2, pc, #4	; (adr r2, 800a94c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a94a:	bf00      	nop
 800a94c:	0800a961 	.word	0x0800a961
 800a950:	0800a96f 	.word	0x0800a96f
 800a954:	0800a985 	.word	0x0800a985
 800a958:	0800a9a3 	.word	0x0800a9a3
 800a95c:	0800a9a3 	.word	0x0800a9a3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a960:	4b81      	ldr	r3, [pc, #516]	; (800ab68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a964:	4a80      	ldr	r2, [pc, #512]	; (800ab68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a96a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a96c:	e01a      	b.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a96e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a972:	3308      	adds	r3, #8
 800a974:	2100      	movs	r1, #0
 800a976:	4618      	mov	r0, r3
 800a978:	f002 f9f6 	bl	800cd68 <RCCEx_PLL2_Config>
 800a97c:	4603      	mov	r3, r0
 800a97e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a982:	e00f      	b.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a984:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a988:	3328      	adds	r3, #40	; 0x28
 800a98a:	2100      	movs	r1, #0
 800a98c:	4618      	mov	r0, r3
 800a98e:	f002 fa9d 	bl	800cecc <RCCEx_PLL3_Config>
 800a992:	4603      	mov	r3, r0
 800a994:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a998:	e004      	b.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a99a:	2301      	movs	r3, #1
 800a99c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a9a0:	e000      	b.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a9a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d10a      	bne.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a9ac:	4b6e      	ldr	r3, [pc, #440]	; (800ab68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a9ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9b0:	f023 0107 	bic.w	r1, r3, #7
 800a9b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9ba:	4a6b      	ldr	r2, [pc, #428]	; (800ab68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a9bc:	430b      	orrs	r3, r1
 800a9be:	6513      	str	r3, [r2, #80]	; 0x50
 800a9c0:	e003      	b.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9c6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a9ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d2:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800a9d6:	f04f 0b00 	mov.w	fp, #0
 800a9da:	ea5a 030b 	orrs.w	r3, sl, fp
 800a9de:	d05b      	beq.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a9e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a9e8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a9ec:	d03b      	beq.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a9ee:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a9f2:	d834      	bhi.n	800aa5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a9f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a9f8:	d037      	beq.n	800aa6a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a9fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a9fe:	d82e      	bhi.n	800aa5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800aa00:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aa04:	d033      	beq.n	800aa6e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800aa06:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aa0a:	d828      	bhi.n	800aa5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800aa0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa10:	d01a      	beq.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800aa12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa16:	d822      	bhi.n	800aa5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d003      	beq.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800aa1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa20:	d007      	beq.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800aa22:	e01c      	b.n	800aa5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa24:	4b50      	ldr	r3, [pc, #320]	; (800ab68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa28:	4a4f      	ldr	r2, [pc, #316]	; (800ab68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa30:	e01e      	b.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa36:	3308      	adds	r3, #8
 800aa38:	2100      	movs	r1, #0
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f002 f994 	bl	800cd68 <RCCEx_PLL2_Config>
 800aa40:	4603      	mov	r3, r0
 800aa42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800aa46:	e013      	b.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa4c:	3328      	adds	r3, #40	; 0x28
 800aa4e:	2100      	movs	r1, #0
 800aa50:	4618      	mov	r0, r3
 800aa52:	f002 fa3b 	bl	800cecc <RCCEx_PLL3_Config>
 800aa56:	4603      	mov	r3, r0
 800aa58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa5c:	e008      	b.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800aa5e:	2301      	movs	r3, #1
 800aa60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aa64:	e004      	b.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800aa66:	bf00      	nop
 800aa68:	e002      	b.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800aa6a:	bf00      	nop
 800aa6c:	e000      	b.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800aa6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d10b      	bne.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800aa78:	4b3b      	ldr	r3, [pc, #236]	; (800ab68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa7c:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800aa80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aa88:	4a37      	ldr	r2, [pc, #220]	; (800ab68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa8a:	430b      	orrs	r3, r1
 800aa8c:	6593      	str	r3, [r2, #88]	; 0x58
 800aa8e:	e003      	b.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa94:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800aa98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800aaa4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800aaae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800aab2:	460b      	mov	r3, r1
 800aab4:	4313      	orrs	r3, r2
 800aab6:	d05d      	beq.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800aab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aabc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aac0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800aac4:	d03b      	beq.n	800ab3e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800aac6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800aaca:	d834      	bhi.n	800ab36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aacc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aad0:	d037      	beq.n	800ab42 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800aad2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aad6:	d82e      	bhi.n	800ab36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aad8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aadc:	d033      	beq.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800aade:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aae2:	d828      	bhi.n	800ab36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aae4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aae8:	d01a      	beq.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800aaea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aaee:	d822      	bhi.n	800ab36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d003      	beq.n	800aafc <HAL_RCCEx_PeriphCLKConfig+0x298>
 800aaf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aaf8:	d007      	beq.n	800ab0a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800aafa:	e01c      	b.n	800ab36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aafc:	4b1a      	ldr	r3, [pc, #104]	; (800ab68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aafe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab00:	4a19      	ldr	r2, [pc, #100]	; (800ab68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab08:	e01e      	b.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab0e:	3308      	adds	r3, #8
 800ab10:	2100      	movs	r1, #0
 800ab12:	4618      	mov	r0, r3
 800ab14:	f002 f928 	bl	800cd68 <RCCEx_PLL2_Config>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ab1e:	e013      	b.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab24:	3328      	adds	r3, #40	; 0x28
 800ab26:	2100      	movs	r1, #0
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f002 f9cf 	bl	800cecc <RCCEx_PLL3_Config>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab34:	e008      	b.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ab36:	2301      	movs	r3, #1
 800ab38:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ab3c:	e004      	b.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ab3e:	bf00      	nop
 800ab40:	e002      	b.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ab42:	bf00      	nop
 800ab44:	e000      	b.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ab46:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d10d      	bne.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ab50:	4b05      	ldr	r3, [pc, #20]	; (800ab68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab54:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800ab58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab5c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ab60:	4a01      	ldr	r2, [pc, #4]	; (800ab68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab62:	430b      	orrs	r3, r1
 800ab64:	6593      	str	r3, [r2, #88]	; 0x58
 800ab66:	e005      	b.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800ab68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab70:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800ab74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab7c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800ab80:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ab84:	2300      	movs	r3, #0
 800ab86:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ab8a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800ab8e:	460b      	mov	r3, r1
 800ab90:	4313      	orrs	r3, r2
 800ab92:	d03a      	beq.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800ab94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab9a:	2b30      	cmp	r3, #48	; 0x30
 800ab9c:	d01f      	beq.n	800abde <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800ab9e:	2b30      	cmp	r3, #48	; 0x30
 800aba0:	d819      	bhi.n	800abd6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800aba2:	2b20      	cmp	r3, #32
 800aba4:	d00c      	beq.n	800abc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800aba6:	2b20      	cmp	r3, #32
 800aba8:	d815      	bhi.n	800abd6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d019      	beq.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800abae:	2b10      	cmp	r3, #16
 800abb0:	d111      	bne.n	800abd6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abb2:	4baa      	ldr	r3, [pc, #680]	; (800ae5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800abb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abb6:	4aa9      	ldr	r2, [pc, #676]	; (800ae5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800abb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abbc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800abbe:	e011      	b.n	800abe4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800abc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abc4:	3308      	adds	r3, #8
 800abc6:	2102      	movs	r1, #2
 800abc8:	4618      	mov	r0, r3
 800abca:	f002 f8cd 	bl	800cd68 <RCCEx_PLL2_Config>
 800abce:	4603      	mov	r3, r0
 800abd0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800abd4:	e006      	b.n	800abe4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800abd6:	2301      	movs	r3, #1
 800abd8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800abdc:	e002      	b.n	800abe4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800abde:	bf00      	nop
 800abe0:	e000      	b.n	800abe4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800abe2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abe4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d10a      	bne.n	800ac02 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800abec:	4b9b      	ldr	r3, [pc, #620]	; (800ae5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800abee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abf0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800abf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abfa:	4a98      	ldr	r2, [pc, #608]	; (800ae5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800abfc:	430b      	orrs	r3, r1
 800abfe:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ac00:	e003      	b.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac02:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac06:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ac0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac12:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800ac16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ac20:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800ac24:	460b      	mov	r3, r1
 800ac26:	4313      	orrs	r3, r2
 800ac28:	d051      	beq.n	800acce <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ac2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac34:	d035      	beq.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800ac36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac3a:	d82e      	bhi.n	800ac9a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ac3c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ac40:	d031      	beq.n	800aca6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800ac42:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ac46:	d828      	bhi.n	800ac9a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ac48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac4c:	d01a      	beq.n	800ac84 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800ac4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac52:	d822      	bhi.n	800ac9a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d003      	beq.n	800ac60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800ac58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac5c:	d007      	beq.n	800ac6e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800ac5e:	e01c      	b.n	800ac9a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac60:	4b7e      	ldr	r3, [pc, #504]	; (800ae5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac64:	4a7d      	ldr	r2, [pc, #500]	; (800ae5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ac6c:	e01c      	b.n	800aca8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac72:	3308      	adds	r3, #8
 800ac74:	2100      	movs	r1, #0
 800ac76:	4618      	mov	r0, r3
 800ac78:	f002 f876 	bl	800cd68 <RCCEx_PLL2_Config>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ac82:	e011      	b.n	800aca8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ac84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac88:	3328      	adds	r3, #40	; 0x28
 800ac8a:	2100      	movs	r1, #0
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f002 f91d 	bl	800cecc <RCCEx_PLL3_Config>
 800ac92:	4603      	mov	r3, r0
 800ac94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ac98:	e006      	b.n	800aca8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aca0:	e002      	b.n	800aca8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800aca2:	bf00      	nop
 800aca4:	e000      	b.n	800aca8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800aca6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aca8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800acac:	2b00      	cmp	r3, #0
 800acae:	d10a      	bne.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800acb0:	4b6a      	ldr	r3, [pc, #424]	; (800ae5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800acb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acb4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800acb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acbe:	4a67      	ldr	r2, [pc, #412]	; (800ae5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800acc0:	430b      	orrs	r3, r1
 800acc2:	6513      	str	r3, [r2, #80]	; 0x50
 800acc4:	e003      	b.n	800acce <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acc6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800acca:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800acce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800acda:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800acde:	2300      	movs	r3, #0
 800ace0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ace4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800ace8:	460b      	mov	r3, r1
 800acea:	4313      	orrs	r3, r2
 800acec:	d053      	beq.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800acee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800acf8:	d033      	beq.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800acfa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800acfe:	d82c      	bhi.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ad00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ad04:	d02f      	beq.n	800ad66 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800ad06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ad0a:	d826      	bhi.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ad0c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ad10:	d02b      	beq.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0x506>
 800ad12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ad16:	d820      	bhi.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ad18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad1c:	d012      	beq.n	800ad44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800ad1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad22:	d81a      	bhi.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d022      	beq.n	800ad6e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800ad28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad2c:	d115      	bne.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ad2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad32:	3308      	adds	r3, #8
 800ad34:	2101      	movs	r1, #1
 800ad36:	4618      	mov	r0, r3
 800ad38:	f002 f816 	bl	800cd68 <RCCEx_PLL2_Config>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ad42:	e015      	b.n	800ad70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad48:	3328      	adds	r3, #40	; 0x28
 800ad4a:	2101      	movs	r1, #1
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f002 f8bd 	bl	800cecc <RCCEx_PLL3_Config>
 800ad52:	4603      	mov	r3, r0
 800ad54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ad58:	e00a      	b.n	800ad70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ad60:	e006      	b.n	800ad70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ad62:	bf00      	nop
 800ad64:	e004      	b.n	800ad70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ad66:	bf00      	nop
 800ad68:	e002      	b.n	800ad70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ad6a:	bf00      	nop
 800ad6c:	e000      	b.n	800ad70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ad6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d10a      	bne.n	800ad8e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ad78:	4b38      	ldr	r3, [pc, #224]	; (800ae5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad7c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800ad80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad86:	4a35      	ldr	r2, [pc, #212]	; (800ae5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad88:	430b      	orrs	r3, r1
 800ad8a:	6513      	str	r3, [r2, #80]	; 0x50
 800ad8c:	e003      	b.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad8e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad92:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ad96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800ada2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ada6:	2300      	movs	r3, #0
 800ada8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800adac:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800adb0:	460b      	mov	r3, r1
 800adb2:	4313      	orrs	r3, r2
 800adb4:	d058      	beq.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800adb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800adbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800adc2:	d033      	beq.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800adc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800adc8:	d82c      	bhi.n	800ae24 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800adca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adce:	d02f      	beq.n	800ae30 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800add0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800add4:	d826      	bhi.n	800ae24 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800add6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800adda:	d02b      	beq.n	800ae34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800addc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ade0:	d820      	bhi.n	800ae24 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ade2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ade6:	d012      	beq.n	800ae0e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800ade8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adec:	d81a      	bhi.n	800ae24 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d022      	beq.n	800ae38 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800adf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800adf6:	d115      	bne.n	800ae24 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800adf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adfc:	3308      	adds	r3, #8
 800adfe:	2101      	movs	r1, #1
 800ae00:	4618      	mov	r0, r3
 800ae02:	f001 ffb1 	bl	800cd68 <RCCEx_PLL2_Config>
 800ae06:	4603      	mov	r3, r0
 800ae08:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ae0c:	e015      	b.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ae0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae12:	3328      	adds	r3, #40	; 0x28
 800ae14:	2101      	movs	r1, #1
 800ae16:	4618      	mov	r0, r3
 800ae18:	f002 f858 	bl	800cecc <RCCEx_PLL3_Config>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ae22:	e00a      	b.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ae24:	2301      	movs	r3, #1
 800ae26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae2a:	e006      	b.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ae2c:	bf00      	nop
 800ae2e:	e004      	b.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ae30:	bf00      	nop
 800ae32:	e002      	b.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ae34:	bf00      	nop
 800ae36:	e000      	b.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ae38:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae3a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d10e      	bne.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ae42:	4b06      	ldr	r3, [pc, #24]	; (800ae5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ae44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae46:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800ae4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ae52:	4a02      	ldr	r2, [pc, #8]	; (800ae5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ae54:	430b      	orrs	r3, r1
 800ae56:	6593      	str	r3, [r2, #88]	; 0x58
 800ae58:	e006      	b.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800ae5a:	bf00      	nop
 800ae5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ae68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae70:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800ae74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ae78:	2300      	movs	r3, #0
 800ae7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ae7e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800ae82:	460b      	mov	r3, r1
 800ae84:	4313      	orrs	r3, r2
 800ae86:	d037      	beq.n	800aef8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800ae88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae92:	d00e      	beq.n	800aeb2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800ae94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae98:	d816      	bhi.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d018      	beq.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800ae9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aea2:	d111      	bne.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aea4:	4bc4      	ldr	r3, [pc, #784]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea8:	4ac3      	ldr	r2, [pc, #780]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aeaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aeae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800aeb0:	e00f      	b.n	800aed2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aeb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeb6:	3308      	adds	r3, #8
 800aeb8:	2101      	movs	r1, #1
 800aeba:	4618      	mov	r0, r3
 800aebc:	f001 ff54 	bl	800cd68 <RCCEx_PLL2_Config>
 800aec0:	4603      	mov	r3, r0
 800aec2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800aec6:	e004      	b.n	800aed2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aec8:	2301      	movs	r3, #1
 800aeca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aece:	e000      	b.n	800aed2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800aed0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aed2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d10a      	bne.n	800aef0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800aeda:	4bb7      	ldr	r3, [pc, #732]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aedc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aede:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800aee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aee8:	4ab3      	ldr	r2, [pc, #716]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aeea:	430b      	orrs	r3, r1
 800aeec:	6513      	str	r3, [r2, #80]	; 0x50
 800aeee:	e003      	b.n	800aef8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aef0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aef4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800aef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aefc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af00:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800af04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800af08:	2300      	movs	r3, #0
 800af0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800af0e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800af12:	460b      	mov	r3, r1
 800af14:	4313      	orrs	r3, r2
 800af16:	d039      	beq.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800af18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af1e:	2b03      	cmp	r3, #3
 800af20:	d81c      	bhi.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800af22:	a201      	add	r2, pc, #4	; (adr r2, 800af28 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800af24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af28:	0800af65 	.word	0x0800af65
 800af2c:	0800af39 	.word	0x0800af39
 800af30:	0800af47 	.word	0x0800af47
 800af34:	0800af65 	.word	0x0800af65
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af38:	4b9f      	ldr	r3, [pc, #636]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af3c:	4a9e      	ldr	r2, [pc, #632]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800af44:	e00f      	b.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800af46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af4a:	3308      	adds	r3, #8
 800af4c:	2102      	movs	r1, #2
 800af4e:	4618      	mov	r0, r3
 800af50:	f001 ff0a 	bl	800cd68 <RCCEx_PLL2_Config>
 800af54:	4603      	mov	r3, r0
 800af56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800af5a:	e004      	b.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800af5c:	2301      	movs	r3, #1
 800af5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800af62:	e000      	b.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800af64:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af66:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d10a      	bne.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800af6e:	4b92      	ldr	r3, [pc, #584]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af72:	f023 0103 	bic.w	r1, r3, #3
 800af76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af7c:	4a8e      	ldr	r2, [pc, #568]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af7e:	430b      	orrs	r3, r1
 800af80:	64d3      	str	r3, [r2, #76]	; 0x4c
 800af82:	e003      	b.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af88:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800af8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af94:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800af98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800af9c:	2300      	movs	r3, #0
 800af9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800afa2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800afa6:	460b      	mov	r3, r1
 800afa8:	4313      	orrs	r3, r2
 800afaa:	f000 8099 	beq.w	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800afae:	4b83      	ldr	r3, [pc, #524]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4a82      	ldr	r2, [pc, #520]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800afb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800afb8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800afba:	f7f8 fd67 	bl	8003a8c <HAL_GetTick>
 800afbe:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800afc2:	e00b      	b.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800afc4:	f7f8 fd62 	bl	8003a8c <HAL_GetTick>
 800afc8:	4602      	mov	r2, r0
 800afca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800afce:	1ad3      	subs	r3, r2, r3
 800afd0:	2b64      	cmp	r3, #100	; 0x64
 800afd2:	d903      	bls.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800afd4:	2303      	movs	r3, #3
 800afd6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800afda:	e005      	b.n	800afe8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800afdc:	4b77      	ldr	r3, [pc, #476]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d0ed      	beq.n	800afc4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800afe8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afec:	2b00      	cmp	r3, #0
 800afee:	d173      	bne.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800aff0:	4b71      	ldr	r3, [pc, #452]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aff2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aff8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800affc:	4053      	eors	r3, r2
 800affe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b002:	2b00      	cmp	r3, #0
 800b004:	d015      	beq.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b006:	4b6c      	ldr	r3, [pc, #432]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b00a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b00e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b012:	4b69      	ldr	r3, [pc, #420]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b016:	4a68      	ldr	r2, [pc, #416]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b01c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b01e:	4b66      	ldr	r3, [pc, #408]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b022:	4a65      	ldr	r2, [pc, #404]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b024:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b028:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b02a:	4a63      	ldr	r2, [pc, #396]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b02c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b030:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b032:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b036:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b03a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b03e:	d118      	bne.n	800b072 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b040:	f7f8 fd24 	bl	8003a8c <HAL_GetTick>
 800b044:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b048:	e00d      	b.n	800b066 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b04a:	f7f8 fd1f 	bl	8003a8c <HAL_GetTick>
 800b04e:	4602      	mov	r2, r0
 800b050:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b054:	1ad2      	subs	r2, r2, r3
 800b056:	f241 3388 	movw	r3, #5000	; 0x1388
 800b05a:	429a      	cmp	r2, r3
 800b05c:	d903      	bls.n	800b066 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800b05e:	2303      	movs	r3, #3
 800b060:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800b064:	e005      	b.n	800b072 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b066:	4b54      	ldr	r3, [pc, #336]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b06a:	f003 0302 	and.w	r3, r3, #2
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d0eb      	beq.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800b072:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b076:	2b00      	cmp	r3, #0
 800b078:	d129      	bne.n	800b0ce <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b07a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b07e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b086:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b08a:	d10e      	bne.n	800b0aa <HAL_RCCEx_PeriphCLKConfig+0x846>
 800b08c:	4b4a      	ldr	r3, [pc, #296]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b08e:	691b      	ldr	r3, [r3, #16]
 800b090:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b094:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b098:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b09c:	091a      	lsrs	r2, r3, #4
 800b09e:	4b48      	ldr	r3, [pc, #288]	; (800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800b0a0:	4013      	ands	r3, r2
 800b0a2:	4a45      	ldr	r2, [pc, #276]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0a4:	430b      	orrs	r3, r1
 800b0a6:	6113      	str	r3, [r2, #16]
 800b0a8:	e005      	b.n	800b0b6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800b0aa:	4b43      	ldr	r3, [pc, #268]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0ac:	691b      	ldr	r3, [r3, #16]
 800b0ae:	4a42      	ldr	r2, [pc, #264]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b0b4:	6113      	str	r3, [r2, #16]
 800b0b6:	4b40      	ldr	r3, [pc, #256]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0b8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b0ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b0c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b0c6:	4a3c      	ldr	r2, [pc, #240]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0c8:	430b      	orrs	r3, r1
 800b0ca:	6713      	str	r3, [r2, #112]	; 0x70
 800b0cc:	e008      	b.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b0ce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0d2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800b0d6:	e003      	b.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b0e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e8:	f002 0301 	and.w	r3, r2, #1
 800b0ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b0f6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b0fa:	460b      	mov	r3, r1
 800b0fc:	4313      	orrs	r3, r2
 800b0fe:	f000 808f 	beq.w	800b220 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b102:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b106:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b108:	2b28      	cmp	r3, #40	; 0x28
 800b10a:	d871      	bhi.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b10c:	a201      	add	r2, pc, #4	; (adr r2, 800b114 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800b10e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b112:	bf00      	nop
 800b114:	0800b1f9 	.word	0x0800b1f9
 800b118:	0800b1f1 	.word	0x0800b1f1
 800b11c:	0800b1f1 	.word	0x0800b1f1
 800b120:	0800b1f1 	.word	0x0800b1f1
 800b124:	0800b1f1 	.word	0x0800b1f1
 800b128:	0800b1f1 	.word	0x0800b1f1
 800b12c:	0800b1f1 	.word	0x0800b1f1
 800b130:	0800b1f1 	.word	0x0800b1f1
 800b134:	0800b1c5 	.word	0x0800b1c5
 800b138:	0800b1f1 	.word	0x0800b1f1
 800b13c:	0800b1f1 	.word	0x0800b1f1
 800b140:	0800b1f1 	.word	0x0800b1f1
 800b144:	0800b1f1 	.word	0x0800b1f1
 800b148:	0800b1f1 	.word	0x0800b1f1
 800b14c:	0800b1f1 	.word	0x0800b1f1
 800b150:	0800b1f1 	.word	0x0800b1f1
 800b154:	0800b1db 	.word	0x0800b1db
 800b158:	0800b1f1 	.word	0x0800b1f1
 800b15c:	0800b1f1 	.word	0x0800b1f1
 800b160:	0800b1f1 	.word	0x0800b1f1
 800b164:	0800b1f1 	.word	0x0800b1f1
 800b168:	0800b1f1 	.word	0x0800b1f1
 800b16c:	0800b1f1 	.word	0x0800b1f1
 800b170:	0800b1f1 	.word	0x0800b1f1
 800b174:	0800b1f9 	.word	0x0800b1f9
 800b178:	0800b1f1 	.word	0x0800b1f1
 800b17c:	0800b1f1 	.word	0x0800b1f1
 800b180:	0800b1f1 	.word	0x0800b1f1
 800b184:	0800b1f1 	.word	0x0800b1f1
 800b188:	0800b1f1 	.word	0x0800b1f1
 800b18c:	0800b1f1 	.word	0x0800b1f1
 800b190:	0800b1f1 	.word	0x0800b1f1
 800b194:	0800b1f9 	.word	0x0800b1f9
 800b198:	0800b1f1 	.word	0x0800b1f1
 800b19c:	0800b1f1 	.word	0x0800b1f1
 800b1a0:	0800b1f1 	.word	0x0800b1f1
 800b1a4:	0800b1f1 	.word	0x0800b1f1
 800b1a8:	0800b1f1 	.word	0x0800b1f1
 800b1ac:	0800b1f1 	.word	0x0800b1f1
 800b1b0:	0800b1f1 	.word	0x0800b1f1
 800b1b4:	0800b1f9 	.word	0x0800b1f9
 800b1b8:	58024400 	.word	0x58024400
 800b1bc:	58024800 	.word	0x58024800
 800b1c0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b1c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1c8:	3308      	adds	r3, #8
 800b1ca:	2101      	movs	r1, #1
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f001 fdcb 	bl	800cd68 <RCCEx_PLL2_Config>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b1d8:	e00f      	b.n	800b1fa <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b1da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1de:	3328      	adds	r3, #40	; 0x28
 800b1e0:	2101      	movs	r1, #1
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f001 fe72 	bl	800cecc <RCCEx_PLL3_Config>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b1ee:	e004      	b.n	800b1fa <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b1f6:	e000      	b.n	800b1fa <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b1f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d10a      	bne.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b202:	4bbf      	ldr	r3, [pc, #764]	; (800b500 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b206:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b20a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b20e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b210:	4abb      	ldr	r2, [pc, #748]	; (800b500 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b212:	430b      	orrs	r3, r1
 800b214:	6553      	str	r3, [r2, #84]	; 0x54
 800b216:	e003      	b.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b218:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b21c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b220:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b228:	f002 0302 	and.w	r3, r2, #2
 800b22c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b230:	2300      	movs	r3, #0
 800b232:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b236:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b23a:	460b      	mov	r3, r1
 800b23c:	4313      	orrs	r3, r2
 800b23e:	d041      	beq.n	800b2c4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b246:	2b05      	cmp	r3, #5
 800b248:	d824      	bhi.n	800b294 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800b24a:	a201      	add	r2, pc, #4	; (adr r2, 800b250 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800b24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b250:	0800b29d 	.word	0x0800b29d
 800b254:	0800b269 	.word	0x0800b269
 800b258:	0800b27f 	.word	0x0800b27f
 800b25c:	0800b29d 	.word	0x0800b29d
 800b260:	0800b29d 	.word	0x0800b29d
 800b264:	0800b29d 	.word	0x0800b29d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b268:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b26c:	3308      	adds	r3, #8
 800b26e:	2101      	movs	r1, #1
 800b270:	4618      	mov	r0, r3
 800b272:	f001 fd79 	bl	800cd68 <RCCEx_PLL2_Config>
 800b276:	4603      	mov	r3, r0
 800b278:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b27c:	e00f      	b.n	800b29e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b27e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b282:	3328      	adds	r3, #40	; 0x28
 800b284:	2101      	movs	r1, #1
 800b286:	4618      	mov	r0, r3
 800b288:	f001 fe20 	bl	800cecc <RCCEx_PLL3_Config>
 800b28c:	4603      	mov	r3, r0
 800b28e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b292:	e004      	b.n	800b29e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b294:	2301      	movs	r3, #1
 800b296:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b29a:	e000      	b.n	800b29e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800b29c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b29e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d10a      	bne.n	800b2bc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b2a6:	4b96      	ldr	r3, [pc, #600]	; (800b500 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b2a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2aa:	f023 0107 	bic.w	r1, r3, #7
 800b2ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2b4:	4a92      	ldr	r2, [pc, #584]	; (800b500 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b2b6:	430b      	orrs	r3, r1
 800b2b8:	6553      	str	r3, [r2, #84]	; 0x54
 800b2ba:	e003      	b.n	800b2c4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b2c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2cc:	f002 0304 	and.w	r3, r2, #4
 800b2d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b2da:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b2de:	460b      	mov	r3, r1
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	d044      	beq.n	800b36e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b2e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2ec:	2b05      	cmp	r3, #5
 800b2ee:	d825      	bhi.n	800b33c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800b2f0:	a201      	add	r2, pc, #4	; (adr r2, 800b2f8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800b2f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2f6:	bf00      	nop
 800b2f8:	0800b345 	.word	0x0800b345
 800b2fc:	0800b311 	.word	0x0800b311
 800b300:	0800b327 	.word	0x0800b327
 800b304:	0800b345 	.word	0x0800b345
 800b308:	0800b345 	.word	0x0800b345
 800b30c:	0800b345 	.word	0x0800b345
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b310:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b314:	3308      	adds	r3, #8
 800b316:	2101      	movs	r1, #1
 800b318:	4618      	mov	r0, r3
 800b31a:	f001 fd25 	bl	800cd68 <RCCEx_PLL2_Config>
 800b31e:	4603      	mov	r3, r0
 800b320:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b324:	e00f      	b.n	800b346 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b326:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b32a:	3328      	adds	r3, #40	; 0x28
 800b32c:	2101      	movs	r1, #1
 800b32e:	4618      	mov	r0, r3
 800b330:	f001 fdcc 	bl	800cecc <RCCEx_PLL3_Config>
 800b334:	4603      	mov	r3, r0
 800b336:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b33a:	e004      	b.n	800b346 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b33c:	2301      	movs	r3, #1
 800b33e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b342:	e000      	b.n	800b346 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800b344:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b346:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d10b      	bne.n	800b366 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b34e:	4b6c      	ldr	r3, [pc, #432]	; (800b500 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b352:	f023 0107 	bic.w	r1, r3, #7
 800b356:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b35a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b35e:	4a68      	ldr	r2, [pc, #416]	; (800b500 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b360:	430b      	orrs	r3, r1
 800b362:	6593      	str	r3, [r2, #88]	; 0x58
 800b364:	e003      	b.n	800b36e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b366:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b36a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b36e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b376:	f002 0320 	and.w	r3, r2, #32
 800b37a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b37e:	2300      	movs	r3, #0
 800b380:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b384:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b388:	460b      	mov	r3, r1
 800b38a:	4313      	orrs	r3, r2
 800b38c:	d055      	beq.n	800b43a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b38e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b392:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b396:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b39a:	d033      	beq.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800b39c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b3a0:	d82c      	bhi.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b3a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3a6:	d02f      	beq.n	800b408 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b3a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3ac:	d826      	bhi.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b3ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b3b2:	d02b      	beq.n	800b40c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b3b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b3b8:	d820      	bhi.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b3ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3be:	d012      	beq.n	800b3e6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b3c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3c4:	d81a      	bhi.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d022      	beq.n	800b410 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b3ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3ce:	d115      	bne.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b3d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3d4:	3308      	adds	r3, #8
 800b3d6:	2100      	movs	r1, #0
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f001 fcc5 	bl	800cd68 <RCCEx_PLL2_Config>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b3e4:	e015      	b.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b3e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3ea:	3328      	adds	r3, #40	; 0x28
 800b3ec:	2102      	movs	r1, #2
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f001 fd6c 	bl	800cecc <RCCEx_PLL3_Config>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b3fa:	e00a      	b.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b402:	e006      	b.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b404:	bf00      	nop
 800b406:	e004      	b.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b408:	bf00      	nop
 800b40a:	e002      	b.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b40c:	bf00      	nop
 800b40e:	e000      	b.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b410:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b412:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b416:	2b00      	cmp	r3, #0
 800b418:	d10b      	bne.n	800b432 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b41a:	4b39      	ldr	r3, [pc, #228]	; (800b500 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b41c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b41e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b426:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b42a:	4a35      	ldr	r2, [pc, #212]	; (800b500 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b42c:	430b      	orrs	r3, r1
 800b42e:	6553      	str	r3, [r2, #84]	; 0x54
 800b430:	e003      	b.n	800b43a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b432:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b436:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b43a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b442:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b446:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b44a:	2300      	movs	r3, #0
 800b44c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b450:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b454:	460b      	mov	r3, r1
 800b456:	4313      	orrs	r3, r2
 800b458:	d058      	beq.n	800b50c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b45a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b45e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b462:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b466:	d033      	beq.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b468:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b46c:	d82c      	bhi.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b46e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b472:	d02f      	beq.n	800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b478:	d826      	bhi.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b47a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b47e:	d02b      	beq.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b480:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b484:	d820      	bhi.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b486:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b48a:	d012      	beq.n	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b48c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b490:	d81a      	bhi.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b492:	2b00      	cmp	r3, #0
 800b494:	d022      	beq.n	800b4dc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b49a:	d115      	bne.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b49c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4a0:	3308      	adds	r3, #8
 800b4a2:	2100      	movs	r1, #0
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f001 fc5f 	bl	800cd68 <RCCEx_PLL2_Config>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b4b0:	e015      	b.n	800b4de <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b4b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4b6:	3328      	adds	r3, #40	; 0x28
 800b4b8:	2102      	movs	r1, #2
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f001 fd06 	bl	800cecc <RCCEx_PLL3_Config>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b4c6:	e00a      	b.n	800b4de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b4ce:	e006      	b.n	800b4de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b4d0:	bf00      	nop
 800b4d2:	e004      	b.n	800b4de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b4d4:	bf00      	nop
 800b4d6:	e002      	b.n	800b4de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b4d8:	bf00      	nop
 800b4da:	e000      	b.n	800b4de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b4dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d10e      	bne.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b4e6:	4b06      	ldr	r3, [pc, #24]	; (800b500 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b4e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4ea:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b4ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b4f6:	4a02      	ldr	r2, [pc, #8]	; (800b500 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b4f8:	430b      	orrs	r3, r1
 800b4fa:	6593      	str	r3, [r2, #88]	; 0x58
 800b4fc:	e006      	b.n	800b50c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b4fe:	bf00      	nop
 800b500:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b504:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b508:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b50c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b514:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b518:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b51c:	2300      	movs	r3, #0
 800b51e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b522:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b526:	460b      	mov	r3, r1
 800b528:	4313      	orrs	r3, r2
 800b52a:	d055      	beq.n	800b5d8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b52c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b530:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b534:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b538:	d033      	beq.n	800b5a2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800b53a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b53e:	d82c      	bhi.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b544:	d02f      	beq.n	800b5a6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b546:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b54a:	d826      	bhi.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b54c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b550:	d02b      	beq.n	800b5aa <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b552:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b556:	d820      	bhi.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b558:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b55c:	d012      	beq.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800b55e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b562:	d81a      	bhi.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b564:	2b00      	cmp	r3, #0
 800b566:	d022      	beq.n	800b5ae <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b568:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b56c:	d115      	bne.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b56e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b572:	3308      	adds	r3, #8
 800b574:	2100      	movs	r1, #0
 800b576:	4618      	mov	r0, r3
 800b578:	f001 fbf6 	bl	800cd68 <RCCEx_PLL2_Config>
 800b57c:	4603      	mov	r3, r0
 800b57e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b582:	e015      	b.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b588:	3328      	adds	r3, #40	; 0x28
 800b58a:	2102      	movs	r1, #2
 800b58c:	4618      	mov	r0, r3
 800b58e:	f001 fc9d 	bl	800cecc <RCCEx_PLL3_Config>
 800b592:	4603      	mov	r3, r0
 800b594:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b598:	e00a      	b.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b59a:	2301      	movs	r3, #1
 800b59c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b5a0:	e006      	b.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b5a2:	bf00      	nop
 800b5a4:	e004      	b.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b5a6:	bf00      	nop
 800b5a8:	e002      	b.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b5aa:	bf00      	nop
 800b5ac:	e000      	b.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b5ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d10b      	bne.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b5b8:	4ba0      	ldr	r3, [pc, #640]	; (800b83c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b5ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5bc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b5c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b5c8:	4a9c      	ldr	r2, [pc, #624]	; (800b83c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b5ca:	430b      	orrs	r3, r1
 800b5cc:	6593      	str	r3, [r2, #88]	; 0x58
 800b5ce:	e003      	b.n	800b5d8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5d4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b5d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e0:	f002 0308 	and.w	r3, r2, #8
 800b5e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b5ee:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b5f2:	460b      	mov	r3, r1
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	d01e      	beq.n	800b636 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800b5f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b604:	d10c      	bne.n	800b620 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b606:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b60a:	3328      	adds	r3, #40	; 0x28
 800b60c:	2102      	movs	r1, #2
 800b60e:	4618      	mov	r0, r3
 800b610:	f001 fc5c 	bl	800cecc <RCCEx_PLL3_Config>
 800b614:	4603      	mov	r3, r0
 800b616:	2b00      	cmp	r3, #0
 800b618:	d002      	beq.n	800b620 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800b61a:	2301      	movs	r3, #1
 800b61c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b620:	4b86      	ldr	r3, [pc, #536]	; (800b83c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b624:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b628:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b62c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b630:	4a82      	ldr	r2, [pc, #520]	; (800b83c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b632:	430b      	orrs	r3, r1
 800b634:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b636:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63e:	f002 0310 	and.w	r3, r2, #16
 800b642:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b646:	2300      	movs	r3, #0
 800b648:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b64c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b650:	460b      	mov	r3, r1
 800b652:	4313      	orrs	r3, r2
 800b654:	d01e      	beq.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b656:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b65a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b65e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b662:	d10c      	bne.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b664:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b668:	3328      	adds	r3, #40	; 0x28
 800b66a:	2102      	movs	r1, #2
 800b66c:	4618      	mov	r0, r3
 800b66e:	f001 fc2d 	bl	800cecc <RCCEx_PLL3_Config>
 800b672:	4603      	mov	r3, r0
 800b674:	2b00      	cmp	r3, #0
 800b676:	d002      	beq.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800b678:	2301      	movs	r3, #1
 800b67a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b67e:	4b6f      	ldr	r3, [pc, #444]	; (800b83c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b682:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b68a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b68e:	4a6b      	ldr	r2, [pc, #428]	; (800b83c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b690:	430b      	orrs	r3, r1
 800b692:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b6a0:	67bb      	str	r3, [r7, #120]	; 0x78
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b6a6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b6aa:	460b      	mov	r3, r1
 800b6ac:	4313      	orrs	r3, r2
 800b6ae:	d03e      	beq.n	800b72e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b6b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b6b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6bc:	d022      	beq.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b6be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6c2:	d81b      	bhi.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d003      	beq.n	800b6d0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800b6c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6cc:	d00b      	beq.n	800b6e6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800b6ce:	e015      	b.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b6d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6d4:	3308      	adds	r3, #8
 800b6d6:	2100      	movs	r1, #0
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f001 fb45 	bl	800cd68 <RCCEx_PLL2_Config>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b6e4:	e00f      	b.n	800b706 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b6e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6ea:	3328      	adds	r3, #40	; 0x28
 800b6ec:	2102      	movs	r1, #2
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f001 fbec 	bl	800cecc <RCCEx_PLL3_Config>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b6fa:	e004      	b.n	800b706 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b702:	e000      	b.n	800b706 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800b704:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b706:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d10b      	bne.n	800b726 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b70e:	4b4b      	ldr	r3, [pc, #300]	; (800b83c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b712:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b716:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b71a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b71e:	4a47      	ldr	r2, [pc, #284]	; (800b83c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b720:	430b      	orrs	r3, r1
 800b722:	6593      	str	r3, [r2, #88]	; 0x58
 800b724:	e003      	b.n	800b72e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b726:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b72a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b72e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b736:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b73a:	673b      	str	r3, [r7, #112]	; 0x70
 800b73c:	2300      	movs	r3, #0
 800b73e:	677b      	str	r3, [r7, #116]	; 0x74
 800b740:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b744:	460b      	mov	r3, r1
 800b746:	4313      	orrs	r3, r2
 800b748:	d03b      	beq.n	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b74a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b74e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b752:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b756:	d01f      	beq.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b758:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b75c:	d818      	bhi.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800b75e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b762:	d003      	beq.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800b764:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b768:	d007      	beq.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800b76a:	e011      	b.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b76c:	4b33      	ldr	r3, [pc, #204]	; (800b83c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b76e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b770:	4a32      	ldr	r2, [pc, #200]	; (800b83c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b772:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b776:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b778:	e00f      	b.n	800b79a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b77a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b77e:	3328      	adds	r3, #40	; 0x28
 800b780:	2101      	movs	r1, #1
 800b782:	4618      	mov	r0, r3
 800b784:	f001 fba2 	bl	800cecc <RCCEx_PLL3_Config>
 800b788:	4603      	mov	r3, r0
 800b78a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800b78e:	e004      	b.n	800b79a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b790:	2301      	movs	r3, #1
 800b792:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b796:	e000      	b.n	800b79a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800b798:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b79a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d10b      	bne.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b7a2:	4b26      	ldr	r3, [pc, #152]	; (800b83c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b7a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7a6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b7aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7b2:	4a22      	ldr	r2, [pc, #136]	; (800b83c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b7b4:	430b      	orrs	r3, r1
 800b7b6:	6553      	str	r3, [r2, #84]	; 0x54
 800b7b8:	e003      	b.n	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7be:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b7c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ca:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b7ce:	66bb      	str	r3, [r7, #104]	; 0x68
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b7d4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b7d8:	460b      	mov	r3, r1
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	d034      	beq.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b7de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d003      	beq.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800b7e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7ec:	d007      	beq.n	800b7fe <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800b7ee:	e011      	b.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7f0:	4b12      	ldr	r3, [pc, #72]	; (800b83c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f4:	4a11      	ldr	r2, [pc, #68]	; (800b83c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b7f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b7fc:	e00e      	b.n	800b81c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b7fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b802:	3308      	adds	r3, #8
 800b804:	2102      	movs	r1, #2
 800b806:	4618      	mov	r0, r3
 800b808:	f001 faae 	bl	800cd68 <RCCEx_PLL2_Config>
 800b80c:	4603      	mov	r3, r0
 800b80e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b812:	e003      	b.n	800b81c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800b814:	2301      	movs	r3, #1
 800b816:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b81a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b81c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b820:	2b00      	cmp	r3, #0
 800b822:	d10d      	bne.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b824:	4b05      	ldr	r3, [pc, #20]	; (800b83c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b828:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b82c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b832:	4a02      	ldr	r2, [pc, #8]	; (800b83c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b834:	430b      	orrs	r3, r1
 800b836:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b838:	e006      	b.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800b83a:	bf00      	nop
 800b83c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b840:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b844:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b848:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b850:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b854:	663b      	str	r3, [r7, #96]	; 0x60
 800b856:	2300      	movs	r3, #0
 800b858:	667b      	str	r3, [r7, #100]	; 0x64
 800b85a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b85e:	460b      	mov	r3, r1
 800b860:	4313      	orrs	r3, r2
 800b862:	d00c      	beq.n	800b87e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b864:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b868:	3328      	adds	r3, #40	; 0x28
 800b86a:	2102      	movs	r1, #2
 800b86c:	4618      	mov	r0, r3
 800b86e:	f001 fb2d 	bl	800cecc <RCCEx_PLL3_Config>
 800b872:	4603      	mov	r3, r0
 800b874:	2b00      	cmp	r3, #0
 800b876:	d002      	beq.n	800b87e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800b878:	2301      	movs	r3, #1
 800b87a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b87e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b886:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b88a:	65bb      	str	r3, [r7, #88]	; 0x58
 800b88c:	2300      	movs	r3, #0
 800b88e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b890:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b894:	460b      	mov	r3, r1
 800b896:	4313      	orrs	r3, r2
 800b898:	d036      	beq.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b89a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b89e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b8a4:	d018      	beq.n	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800b8a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b8aa:	d811      	bhi.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b8ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8b0:	d014      	beq.n	800b8dc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800b8b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8b6:	d80b      	bhi.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d011      	beq.n	800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800b8bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8c0:	d106      	bne.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8c2:	4bb7      	ldr	r3, [pc, #732]	; (800bba0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8c6:	4ab6      	ldr	r2, [pc, #728]	; (800bba0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b8ce:	e008      	b.n	800b8e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b8d6:	e004      	b.n	800b8e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b8d8:	bf00      	nop
 800b8da:	e002      	b.n	800b8e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b8dc:	bf00      	nop
 800b8de:	e000      	b.n	800b8e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b8e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d10a      	bne.n	800b900 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b8ea:	4bad      	ldr	r3, [pc, #692]	; (800bba0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b8f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8f8:	4aa9      	ldr	r2, [pc, #676]	; (800bba0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8fa:	430b      	orrs	r3, r1
 800b8fc:	6553      	str	r3, [r2, #84]	; 0x54
 800b8fe:	e003      	b.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b900:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b904:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b908:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b910:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800b914:	653b      	str	r3, [r7, #80]	; 0x50
 800b916:	2300      	movs	r3, #0
 800b918:	657b      	str	r3, [r7, #84]	; 0x54
 800b91a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b91e:	460b      	mov	r3, r1
 800b920:	4313      	orrs	r3, r2
 800b922:	d009      	beq.n	800b938 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b924:	4b9e      	ldr	r3, [pc, #632]	; (800bba0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b928:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b92c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b932:	4a9b      	ldr	r2, [pc, #620]	; (800bba0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b934:	430b      	orrs	r3, r1
 800b936:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b938:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b940:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800b944:	64bb      	str	r3, [r7, #72]	; 0x48
 800b946:	2300      	movs	r3, #0
 800b948:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b94a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800b94e:	460b      	mov	r3, r1
 800b950:	4313      	orrs	r3, r2
 800b952:	d009      	beq.n	800b968 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b954:	4b92      	ldr	r3, [pc, #584]	; (800bba0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b958:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800b95c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b960:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b962:	4a8f      	ldr	r2, [pc, #572]	; (800bba0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b964:	430b      	orrs	r3, r1
 800b966:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b970:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800b974:	643b      	str	r3, [r7, #64]	; 0x40
 800b976:	2300      	movs	r3, #0
 800b978:	647b      	str	r3, [r7, #68]	; 0x44
 800b97a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b97e:	460b      	mov	r3, r1
 800b980:	4313      	orrs	r3, r2
 800b982:	d00e      	beq.n	800b9a2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b984:	4b86      	ldr	r3, [pc, #536]	; (800bba0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b986:	691b      	ldr	r3, [r3, #16]
 800b988:	4a85      	ldr	r2, [pc, #532]	; (800bba0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b98a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b98e:	6113      	str	r3, [r2, #16]
 800b990:	4b83      	ldr	r3, [pc, #524]	; (800bba0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b992:	6919      	ldr	r1, [r3, #16]
 800b994:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b998:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b99c:	4a80      	ldr	r2, [pc, #512]	; (800bba0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b99e:	430b      	orrs	r3, r1
 800b9a0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b9a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9aa:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b9ae:	63bb      	str	r3, [r7, #56]	; 0x38
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9b4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b9b8:	460b      	mov	r3, r1
 800b9ba:	4313      	orrs	r3, r2
 800b9bc:	d009      	beq.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b9be:	4b78      	ldr	r3, [pc, #480]	; (800bba0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9c2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b9c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9cc:	4a74      	ldr	r2, [pc, #464]	; (800bba0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9ce:	430b      	orrs	r3, r1
 800b9d0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b9d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9da:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800b9de:	633b      	str	r3, [r7, #48]	; 0x30
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	637b      	str	r3, [r7, #52]	; 0x34
 800b9e4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b9e8:	460b      	mov	r3, r1
 800b9ea:	4313      	orrs	r3, r2
 800b9ec:	d00a      	beq.n	800ba04 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b9ee:	4b6c      	ldr	r3, [pc, #432]	; (800bba0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9f2:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800b9f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9fe:	4a68      	ldr	r2, [pc, #416]	; (800bba0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba00:	430b      	orrs	r3, r1
 800ba02:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ba04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba0c:	2100      	movs	r1, #0
 800ba0e:	62b9      	str	r1, [r7, #40]	; 0x28
 800ba10:	f003 0301 	and.w	r3, r3, #1
 800ba14:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba16:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800ba1a:	460b      	mov	r3, r1
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	d011      	beq.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba24:	3308      	adds	r3, #8
 800ba26:	2100      	movs	r1, #0
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f001 f99d 	bl	800cd68 <RCCEx_PLL2_Config>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ba34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d003      	beq.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba40:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ba44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4c:	2100      	movs	r1, #0
 800ba4e:	6239      	str	r1, [r7, #32]
 800ba50:	f003 0302 	and.w	r3, r3, #2
 800ba54:	627b      	str	r3, [r7, #36]	; 0x24
 800ba56:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	4313      	orrs	r3, r2
 800ba5e:	d011      	beq.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba64:	3308      	adds	r3, #8
 800ba66:	2101      	movs	r1, #1
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f001 f97d 	bl	800cd68 <RCCEx_PLL2_Config>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ba74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d003      	beq.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba80:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ba84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8c:	2100      	movs	r1, #0
 800ba8e:	61b9      	str	r1, [r7, #24]
 800ba90:	f003 0304 	and.w	r3, r3, #4
 800ba94:	61fb      	str	r3, [r7, #28]
 800ba96:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ba9a:	460b      	mov	r3, r1
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	d011      	beq.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800baa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baa4:	3308      	adds	r3, #8
 800baa6:	2102      	movs	r1, #2
 800baa8:	4618      	mov	r0, r3
 800baaa:	f001 f95d 	bl	800cd68 <RCCEx_PLL2_Config>
 800baae:	4603      	mov	r3, r0
 800bab0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bab4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d003      	beq.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800babc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bac0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bacc:	2100      	movs	r1, #0
 800bace:	6139      	str	r1, [r7, #16]
 800bad0:	f003 0308 	and.w	r3, r3, #8
 800bad4:	617b      	str	r3, [r7, #20]
 800bad6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bada:	460b      	mov	r3, r1
 800badc:	4313      	orrs	r3, r2
 800bade:	d011      	beq.n	800bb04 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bae4:	3328      	adds	r3, #40	; 0x28
 800bae6:	2100      	movs	r1, #0
 800bae8:	4618      	mov	r0, r3
 800baea:	f001 f9ef 	bl	800cecc <RCCEx_PLL3_Config>
 800baee:	4603      	mov	r3, r0
 800baf0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800baf4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d003      	beq.n	800bb04 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bafc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb00:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bb04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb0c:	2100      	movs	r1, #0
 800bb0e:	60b9      	str	r1, [r7, #8]
 800bb10:	f003 0310 	and.w	r3, r3, #16
 800bb14:	60fb      	str	r3, [r7, #12]
 800bb16:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bb1a:	460b      	mov	r3, r1
 800bb1c:	4313      	orrs	r3, r2
 800bb1e:	d011      	beq.n	800bb44 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb24:	3328      	adds	r3, #40	; 0x28
 800bb26:	2101      	movs	r1, #1
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f001 f9cf 	bl	800cecc <RCCEx_PLL3_Config>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bb34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d003      	beq.n	800bb44 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb40:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bb44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb4c:	2100      	movs	r1, #0
 800bb4e:	6039      	str	r1, [r7, #0]
 800bb50:	f003 0320 	and.w	r3, r3, #32
 800bb54:	607b      	str	r3, [r7, #4]
 800bb56:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bb5a:	460b      	mov	r3, r1
 800bb5c:	4313      	orrs	r3, r2
 800bb5e:	d011      	beq.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bb60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb64:	3328      	adds	r3, #40	; 0x28
 800bb66:	2102      	movs	r1, #2
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f001 f9af 	bl	800cecc <RCCEx_PLL3_Config>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bb74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d003      	beq.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb80:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800bb84:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d101      	bne.n	800bb90 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	e000      	b.n	800bb92 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800bb90:	2301      	movs	r3, #1
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bb9e:	bf00      	nop
 800bba0:	58024400 	.word	0x58024400

0800bba4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b090      	sub	sp, #64	; 0x40
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bbae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbb2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bbb6:	430b      	orrs	r3, r1
 800bbb8:	f040 8094 	bne.w	800bce4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800bbbc:	4b9b      	ldr	r3, [pc, #620]	; (800be2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bbbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbc0:	f003 0307 	and.w	r3, r3, #7
 800bbc4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bbc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc8:	2b04      	cmp	r3, #4
 800bbca:	f200 8087 	bhi.w	800bcdc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800bbce:	a201      	add	r2, pc, #4	; (adr r2, 800bbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800bbd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbd4:	0800bbe9 	.word	0x0800bbe9
 800bbd8:	0800bc11 	.word	0x0800bc11
 800bbdc:	0800bc39 	.word	0x0800bc39
 800bbe0:	0800bcd5 	.word	0x0800bcd5
 800bbe4:	0800bc61 	.word	0x0800bc61
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bbe8:	4b90      	ldr	r3, [pc, #576]	; (800be2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bbf0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bbf4:	d108      	bne.n	800bc08 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bbf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f000 ff62 	bl	800cac4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bc00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc04:	f000 bc93 	b.w	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc0c:	f000 bc8f 	b.w	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bc10:	4b86      	ldr	r3, [pc, #536]	; (800be2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc1c:	d108      	bne.n	800bc30 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc1e:	f107 0318 	add.w	r3, r7, #24
 800bc22:	4618      	mov	r0, r3
 800bc24:	f000 fca6 	bl	800c574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bc28:	69bb      	ldr	r3, [r7, #24]
 800bc2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc2c:	f000 bc7f 	b.w	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc30:	2300      	movs	r3, #0
 800bc32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc34:	f000 bc7b 	b.w	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bc38:	4b7c      	ldr	r3, [pc, #496]	; (800be2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc44:	d108      	bne.n	800bc58 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc46:	f107 030c 	add.w	r3, r7, #12
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f000 fde6 	bl	800c81c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc54:	f000 bc6b 	b.w	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc5c:	f000 bc67 	b.w	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bc60:	4b72      	ldr	r3, [pc, #456]	; (800be2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bc68:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bc6a:	4b70      	ldr	r3, [pc, #448]	; (800be2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	f003 0304 	and.w	r3, r3, #4
 800bc72:	2b04      	cmp	r3, #4
 800bc74:	d10c      	bne.n	800bc90 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bc76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d109      	bne.n	800bc90 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc7c:	4b6b      	ldr	r3, [pc, #428]	; (800be2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	08db      	lsrs	r3, r3, #3
 800bc82:	f003 0303 	and.w	r3, r3, #3
 800bc86:	4a6a      	ldr	r2, [pc, #424]	; (800be30 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bc88:	fa22 f303 	lsr.w	r3, r2, r3
 800bc8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc8e:	e01f      	b.n	800bcd0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bc90:	4b66      	ldr	r3, [pc, #408]	; (800be2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc9c:	d106      	bne.n	800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800bc9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bca0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bca4:	d102      	bne.n	800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bca6:	4b63      	ldr	r3, [pc, #396]	; (800be34 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800bca8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcaa:	e011      	b.n	800bcd0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bcac:	4b5f      	ldr	r3, [pc, #380]	; (800be2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bcb8:	d106      	bne.n	800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bcba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcc0:	d102      	bne.n	800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bcc2:	4b5d      	ldr	r3, [pc, #372]	; (800be38 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bcc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcc6:	e003      	b.n	800bcd0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bccc:	f000 bc2f 	b.w	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bcd0:	f000 bc2d 	b.w	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bcd4:	4b59      	ldr	r3, [pc, #356]	; (800be3c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bcd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcd8:	f000 bc29 	b.w	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bce0:	f000 bc25 	b.w	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800bce4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bce8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800bcec:	430b      	orrs	r3, r1
 800bcee:	f040 80a7 	bne.w	800be40 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800bcf2:	4b4e      	ldr	r3, [pc, #312]	; (800be2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bcf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcf6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800bcfa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bcfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcfe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bd02:	d054      	beq.n	800bdae <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800bd04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bd0a:	f200 808b 	bhi.w	800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bd0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd10:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bd14:	f000 8083 	beq.w	800be1e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800bd18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd1a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bd1e:	f200 8081 	bhi.w	800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bd22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd28:	d02f      	beq.n	800bd8a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800bd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd30:	d878      	bhi.n	800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bd32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d004      	beq.n	800bd42 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800bd38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bd3e:	d012      	beq.n	800bd66 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800bd40:	e070      	b.n	800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bd42:	4b3a      	ldr	r3, [pc, #232]	; (800be2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd4e:	d107      	bne.n	800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd54:	4618      	mov	r0, r3
 800bd56:	f000 feb5 	bl	800cac4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd5e:	e3e6      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd60:	2300      	movs	r3, #0
 800bd62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd64:	e3e3      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd66:	4b31      	ldr	r3, [pc, #196]	; (800be2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd72:	d107      	bne.n	800bd84 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd74:	f107 0318 	add.w	r3, r7, #24
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f000 fbfb 	bl	800c574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bd7e:	69bb      	ldr	r3, [r7, #24]
 800bd80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd82:	e3d4      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd84:	2300      	movs	r3, #0
 800bd86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd88:	e3d1      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bd8a:	4b28      	ldr	r3, [pc, #160]	; (800be2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd96:	d107      	bne.n	800bda8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd98:	f107 030c 	add.w	r3, r7, #12
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f000 fd3d 	bl	800c81c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bda6:	e3c2      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdac:	e3bf      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bdae:	4b1f      	ldr	r3, [pc, #124]	; (800be2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bdb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdb2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bdb6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bdb8:	4b1c      	ldr	r3, [pc, #112]	; (800be2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f003 0304 	and.w	r3, r3, #4
 800bdc0:	2b04      	cmp	r3, #4
 800bdc2:	d10c      	bne.n	800bdde <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800bdc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d109      	bne.n	800bdde <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bdca:	4b18      	ldr	r3, [pc, #96]	; (800be2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	08db      	lsrs	r3, r3, #3
 800bdd0:	f003 0303 	and.w	r3, r3, #3
 800bdd4:	4a16      	ldr	r2, [pc, #88]	; (800be30 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bdd6:	fa22 f303 	lsr.w	r3, r2, r3
 800bdda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bddc:	e01e      	b.n	800be1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bdde:	4b13      	ldr	r3, [pc, #76]	; (800be2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bde6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdea:	d106      	bne.n	800bdfa <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800bdec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bdf2:	d102      	bne.n	800bdfa <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bdf4:	4b0f      	ldr	r3, [pc, #60]	; (800be34 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800bdf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdf8:	e010      	b.n	800be1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bdfa:	4b0c      	ldr	r3, [pc, #48]	; (800be2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be06:	d106      	bne.n	800be16 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800be08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be0e:	d102      	bne.n	800be16 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800be10:	4b09      	ldr	r3, [pc, #36]	; (800be38 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be14:	e002      	b.n	800be1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800be16:	2300      	movs	r3, #0
 800be18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800be1a:	e388      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800be1c:	e387      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800be1e:	4b07      	ldr	r3, [pc, #28]	; (800be3c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800be20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be22:	e384      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800be24:	2300      	movs	r3, #0
 800be26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be28:	e381      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800be2a:	bf00      	nop
 800be2c:	58024400 	.word	0x58024400
 800be30:	03d09000 	.word	0x03d09000
 800be34:	003d0900 	.word	0x003d0900
 800be38:	02faf080 	.word	0x02faf080
 800be3c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800be40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be44:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800be48:	430b      	orrs	r3, r1
 800be4a:	f040 809c 	bne.w	800bf86 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800be4e:	4b9e      	ldr	r3, [pc, #632]	; (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be52:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800be56:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800be58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800be5e:	d054      	beq.n	800bf0a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800be60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800be66:	f200 808b 	bhi.w	800bf80 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800be6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800be70:	f000 8083 	beq.w	800bf7a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800be74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be76:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800be7a:	f200 8081 	bhi.w	800bf80 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800be7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be84:	d02f      	beq.n	800bee6 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800be86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be8c:	d878      	bhi.n	800bf80 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800be8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be90:	2b00      	cmp	r3, #0
 800be92:	d004      	beq.n	800be9e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800be94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800be9a:	d012      	beq.n	800bec2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800be9c:	e070      	b.n	800bf80 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800be9e:	4b8a      	ldr	r3, [pc, #552]	; (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bea6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800beaa:	d107      	bne.n	800bebc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800beac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800beb0:	4618      	mov	r0, r3
 800beb2:	f000 fe07 	bl	800cac4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800beb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800beba:	e338      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bebc:	2300      	movs	r3, #0
 800bebe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bec0:	e335      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bec2:	4b81      	ldr	r3, [pc, #516]	; (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800beca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bece:	d107      	bne.n	800bee0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bed0:	f107 0318 	add.w	r3, r7, #24
 800bed4:	4618      	mov	r0, r3
 800bed6:	f000 fb4d 	bl	800c574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800beda:	69bb      	ldr	r3, [r7, #24]
 800bedc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bede:	e326      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bee0:	2300      	movs	r3, #0
 800bee2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bee4:	e323      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bee6:	4b78      	ldr	r3, [pc, #480]	; (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800beee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bef2:	d107      	bne.n	800bf04 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bef4:	f107 030c 	add.w	r3, r7, #12
 800bef8:	4618      	mov	r0, r3
 800befa:	f000 fc8f 	bl	800c81c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf02:	e314      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf04:	2300      	movs	r3, #0
 800bf06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf08:	e311      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bf0a:	4b6f      	ldr	r3, [pc, #444]	; (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bf12:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bf14:	4b6c      	ldr	r3, [pc, #432]	; (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	f003 0304 	and.w	r3, r3, #4
 800bf1c:	2b04      	cmp	r3, #4
 800bf1e:	d10c      	bne.n	800bf3a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800bf20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d109      	bne.n	800bf3a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf26:	4b68      	ldr	r3, [pc, #416]	; (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	08db      	lsrs	r3, r3, #3
 800bf2c:	f003 0303 	and.w	r3, r3, #3
 800bf30:	4a66      	ldr	r2, [pc, #408]	; (800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800bf32:	fa22 f303 	lsr.w	r3, r2, r3
 800bf36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf38:	e01e      	b.n	800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bf3a:	4b63      	ldr	r3, [pc, #396]	; (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf46:	d106      	bne.n	800bf56 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800bf48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf4e:	d102      	bne.n	800bf56 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bf50:	4b5f      	ldr	r3, [pc, #380]	; (800c0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800bf52:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf54:	e010      	b.n	800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bf56:	4b5c      	ldr	r3, [pc, #368]	; (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf62:	d106      	bne.n	800bf72 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800bf64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf6a:	d102      	bne.n	800bf72 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bf6c:	4b59      	ldr	r3, [pc, #356]	; (800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf70:	e002      	b.n	800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bf72:	2300      	movs	r3, #0
 800bf74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bf76:	e2da      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bf78:	e2d9      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bf7a:	4b57      	ldr	r3, [pc, #348]	; (800c0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bf7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf7e:	e2d6      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bf80:	2300      	movs	r3, #0
 800bf82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf84:	e2d3      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800bf86:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf8a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800bf8e:	430b      	orrs	r3, r1
 800bf90:	f040 80a7 	bne.w	800c0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800bf94:	4b4c      	ldr	r3, [pc, #304]	; (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf98:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800bf9c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bf9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bfa4:	d055      	beq.n	800c052 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800bfa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bfac:	f200 8096 	bhi.w	800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bfb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfb2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bfb6:	f000 8084 	beq.w	800c0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800bfba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfbc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bfc0:	f200 808c 	bhi.w	800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bfc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bfca:	d030      	beq.n	800c02e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800bfcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bfd2:	f200 8083 	bhi.w	800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bfd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d004      	beq.n	800bfe6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800bfdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfe2:	d012      	beq.n	800c00a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800bfe4:	e07a      	b.n	800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bfe6:	4b38      	ldr	r3, [pc, #224]	; (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bff2:	d107      	bne.n	800c004 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bff4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bff8:	4618      	mov	r0, r3
 800bffa:	f000 fd63 	bl	800cac4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c000:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c002:	e294      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c004:	2300      	movs	r3, #0
 800c006:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c008:	e291      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c00a:	4b2f      	ldr	r3, [pc, #188]	; (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c012:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c016:	d107      	bne.n	800c028 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c018:	f107 0318 	add.w	r3, r7, #24
 800c01c:	4618      	mov	r0, r3
 800c01e:	f000 faa9 	bl	800c574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c022:	69bb      	ldr	r3, [r7, #24]
 800c024:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c026:	e282      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c028:	2300      	movs	r3, #0
 800c02a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c02c:	e27f      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c02e:	4b26      	ldr	r3, [pc, #152]	; (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c036:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c03a:	d107      	bne.n	800c04c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c03c:	f107 030c 	add.w	r3, r7, #12
 800c040:	4618      	mov	r0, r3
 800c042:	f000 fbeb 	bl	800c81c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c04a:	e270      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c04c:	2300      	movs	r3, #0
 800c04e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c050:	e26d      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c052:	4b1d      	ldr	r3, [pc, #116]	; (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c056:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c05a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c05c:	4b1a      	ldr	r3, [pc, #104]	; (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	f003 0304 	and.w	r3, r3, #4
 800c064:	2b04      	cmp	r3, #4
 800c066:	d10c      	bne.n	800c082 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800c068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d109      	bne.n	800c082 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c06e:	4b16      	ldr	r3, [pc, #88]	; (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	08db      	lsrs	r3, r3, #3
 800c074:	f003 0303 	and.w	r3, r3, #3
 800c078:	4a14      	ldr	r2, [pc, #80]	; (800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c07a:	fa22 f303 	lsr.w	r3, r2, r3
 800c07e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c080:	e01e      	b.n	800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c082:	4b11      	ldr	r3, [pc, #68]	; (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c08a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c08e:	d106      	bne.n	800c09e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800c090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c092:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c096:	d102      	bne.n	800c09e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c098:	4b0d      	ldr	r3, [pc, #52]	; (800c0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c09a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c09c:	e010      	b.n	800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c09e:	4b0a      	ldr	r3, [pc, #40]	; (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0aa:	d106      	bne.n	800c0ba <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800c0ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0b2:	d102      	bne.n	800c0ba <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c0b4:	4b07      	ldr	r3, [pc, #28]	; (800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0b8:	e002      	b.n	800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c0be:	e236      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c0c0:	e235      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c0c2:	4b05      	ldr	r3, [pc, #20]	; (800c0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c0c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0c6:	e232      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c0c8:	58024400 	.word	0x58024400
 800c0cc:	03d09000 	.word	0x03d09000
 800c0d0:	003d0900 	.word	0x003d0900
 800c0d4:	02faf080 	.word	0x02faf080
 800c0d8:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0e0:	e225      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c0e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0e6:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c0ea:	430b      	orrs	r3, r1
 800c0ec:	f040 8085 	bne.w	800c1fa <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c0f0:	4b9c      	ldr	r3, [pc, #624]	; (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c0f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0f4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c0f8:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c100:	d06b      	beq.n	800c1da <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800c102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c104:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c108:	d874      	bhi.n	800c1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c10c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c110:	d056      	beq.n	800c1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800c112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c114:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c118:	d86c      	bhi.n	800c1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c11c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c120:	d03b      	beq.n	800c19a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800c122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c124:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c128:	d864      	bhi.n	800c1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c12c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c130:	d021      	beq.n	800c176 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800c132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c134:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c138:	d85c      	bhi.n	800c1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d004      	beq.n	800c14a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800c140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c146:	d004      	beq.n	800c152 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800c148:	e054      	b.n	800c1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c14a:	f7fe fb5f 	bl	800a80c <HAL_RCC_GetPCLK1Freq>
 800c14e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c150:	e1ed      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c152:	4b84      	ldr	r3, [pc, #528]	; (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c15a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c15e:	d107      	bne.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c160:	f107 0318 	add.w	r3, r7, #24
 800c164:	4618      	mov	r0, r3
 800c166:	f000 fa05 	bl	800c574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c16a:	69fb      	ldr	r3, [r7, #28]
 800c16c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c16e:	e1de      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c170:	2300      	movs	r3, #0
 800c172:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c174:	e1db      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c176:	4b7b      	ldr	r3, [pc, #492]	; (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c17e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c182:	d107      	bne.n	800c194 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c184:	f107 030c 	add.w	r3, r7, #12
 800c188:	4618      	mov	r0, r3
 800c18a:	f000 fb47 	bl	800c81c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c192:	e1cc      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c194:	2300      	movs	r3, #0
 800c196:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c198:	e1c9      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c19a:	4b72      	ldr	r3, [pc, #456]	; (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f003 0304 	and.w	r3, r3, #4
 800c1a2:	2b04      	cmp	r3, #4
 800c1a4:	d109      	bne.n	800c1ba <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c1a6:	4b6f      	ldr	r3, [pc, #444]	; (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	08db      	lsrs	r3, r3, #3
 800c1ac:	f003 0303 	and.w	r3, r3, #3
 800c1b0:	4a6d      	ldr	r2, [pc, #436]	; (800c368 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c1b2:	fa22 f303 	lsr.w	r3, r2, r3
 800c1b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1b8:	e1b9      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1be:	e1b6      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c1c0:	4b68      	ldr	r3, [pc, #416]	; (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1cc:	d102      	bne.n	800c1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800c1ce:	4b67      	ldr	r3, [pc, #412]	; (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c1d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1d2:	e1ac      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1d8:	e1a9      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c1da:	4b62      	ldr	r3, [pc, #392]	; (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1e6:	d102      	bne.n	800c1ee <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800c1e8:	4b61      	ldr	r3, [pc, #388]	; (800c370 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c1ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1ec:	e19f      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1f2:	e19c      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1f8:	e199      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c1fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1fe:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c202:	430b      	orrs	r3, r1
 800c204:	d173      	bne.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c206:	4b57      	ldr	r3, [pc, #348]	; (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c20a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c20e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c212:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c216:	d02f      	beq.n	800c278 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800c218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c21a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c21e:	d863      	bhi.n	800c2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800c220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c222:	2b00      	cmp	r3, #0
 800c224:	d004      	beq.n	800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800c226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c22c:	d012      	beq.n	800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800c22e:	e05b      	b.n	800c2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c230:	4b4c      	ldr	r3, [pc, #304]	; (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c238:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c23c:	d107      	bne.n	800c24e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c23e:	f107 0318 	add.w	r3, r7, #24
 800c242:	4618      	mov	r0, r3
 800c244:	f000 f996 	bl	800c574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c248:	69bb      	ldr	r3, [r7, #24]
 800c24a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c24c:	e16f      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c24e:	2300      	movs	r3, #0
 800c250:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c252:	e16c      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c254:	4b43      	ldr	r3, [pc, #268]	; (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c25c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c260:	d107      	bne.n	800c272 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c262:	f107 030c 	add.w	r3, r7, #12
 800c266:	4618      	mov	r0, r3
 800c268:	f000 fad8 	bl	800c81c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c270:	e15d      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c272:	2300      	movs	r3, #0
 800c274:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c276:	e15a      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c278:	4b3a      	ldr	r3, [pc, #232]	; (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c27a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c27c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c280:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c282:	4b38      	ldr	r3, [pc, #224]	; (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f003 0304 	and.w	r3, r3, #4
 800c28a:	2b04      	cmp	r3, #4
 800c28c:	d10c      	bne.n	800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800c28e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c290:	2b00      	cmp	r3, #0
 800c292:	d109      	bne.n	800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c294:	4b33      	ldr	r3, [pc, #204]	; (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	08db      	lsrs	r3, r3, #3
 800c29a:	f003 0303 	and.w	r3, r3, #3
 800c29e:	4a32      	ldr	r2, [pc, #200]	; (800c368 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c2a0:	fa22 f303 	lsr.w	r3, r2, r3
 800c2a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2a6:	e01e      	b.n	800c2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c2a8:	4b2e      	ldr	r3, [pc, #184]	; (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2b4:	d106      	bne.n	800c2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800c2b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c2bc:	d102      	bne.n	800c2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c2be:	4b2b      	ldr	r3, [pc, #172]	; (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c2c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2c2:	e010      	b.n	800c2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c2c4:	4b27      	ldr	r3, [pc, #156]	; (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c2d0:	d106      	bne.n	800c2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800c2d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2d8:	d102      	bne.n	800c2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c2da:	4b25      	ldr	r3, [pc, #148]	; (800c370 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c2dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2de:	e002      	b.n	800c2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c2e4:	e123      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c2e6:	e122      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2ec:	e11f      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c2ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2f2:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c2f6:	430b      	orrs	r3, r1
 800c2f8:	d13c      	bne.n	800c374 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c2fa:	4b1a      	ldr	r3, [pc, #104]	; (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c2fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c302:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c306:	2b00      	cmp	r3, #0
 800c308:	d004      	beq.n	800c314 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800c30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c30c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c310:	d012      	beq.n	800c338 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800c312:	e023      	b.n	800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c314:	4b13      	ldr	r3, [pc, #76]	; (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c31c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c320:	d107      	bne.n	800c332 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c326:	4618      	mov	r0, r3
 800c328:	f000 fbcc 	bl	800cac4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c32e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c330:	e0fd      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c332:	2300      	movs	r3, #0
 800c334:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c336:	e0fa      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c338:	4b0a      	ldr	r3, [pc, #40]	; (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c340:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c344:	d107      	bne.n	800c356 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c346:	f107 0318 	add.w	r3, r7, #24
 800c34a:	4618      	mov	r0, r3
 800c34c:	f000 f912 	bl	800c574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c350:	6a3b      	ldr	r3, [r7, #32]
 800c352:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c354:	e0eb      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c356:	2300      	movs	r3, #0
 800c358:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c35a:	e0e8      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c35c:	2300      	movs	r3, #0
 800c35e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c360:	e0e5      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c362:	bf00      	nop
 800c364:	58024400 	.word	0x58024400
 800c368:	03d09000 	.word	0x03d09000
 800c36c:	003d0900 	.word	0x003d0900
 800c370:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c374:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c378:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c37c:	430b      	orrs	r3, r1
 800c37e:	f040 8085 	bne.w	800c48c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c382:	4b6d      	ldr	r3, [pc, #436]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c386:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c38a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c38e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c392:	d06b      	beq.n	800c46c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800c394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c396:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c39a:	d874      	bhi.n	800c486 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c39e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3a2:	d056      	beq.n	800c452 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800c3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3aa:	d86c      	bhi.n	800c486 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c3b2:	d03b      	beq.n	800c42c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800c3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c3ba:	d864      	bhi.n	800c486 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3c2:	d021      	beq.n	800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3ca:	d85c      	bhi.n	800c486 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d004      	beq.n	800c3dc <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800c3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c3d8:	d004      	beq.n	800c3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c3da:	e054      	b.n	800c486 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c3dc:	f000 f8b4 	bl	800c548 <HAL_RCCEx_GetD3PCLK1Freq>
 800c3e0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c3e2:	e0a4      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c3e4:	4b54      	ldr	r3, [pc, #336]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c3f0:	d107      	bne.n	800c402 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3f2:	f107 0318 	add.w	r3, r7, #24
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f000 f8bc 	bl	800c574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c3fc:	69fb      	ldr	r3, [r7, #28]
 800c3fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c400:	e095      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c402:	2300      	movs	r3, #0
 800c404:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c406:	e092      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c408:	4b4b      	ldr	r3, [pc, #300]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c410:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c414:	d107      	bne.n	800c426 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c416:	f107 030c 	add.w	r3, r7, #12
 800c41a:	4618      	mov	r0, r3
 800c41c:	f000 f9fe 	bl	800c81c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c420:	693b      	ldr	r3, [r7, #16]
 800c422:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c424:	e083      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c426:	2300      	movs	r3, #0
 800c428:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c42a:	e080      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c42c:	4b42      	ldr	r3, [pc, #264]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f003 0304 	and.w	r3, r3, #4
 800c434:	2b04      	cmp	r3, #4
 800c436:	d109      	bne.n	800c44c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c438:	4b3f      	ldr	r3, [pc, #252]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	08db      	lsrs	r3, r3, #3
 800c43e:	f003 0303 	and.w	r3, r3, #3
 800c442:	4a3e      	ldr	r2, [pc, #248]	; (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c444:	fa22 f303 	lsr.w	r3, r2, r3
 800c448:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c44a:	e070      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c44c:	2300      	movs	r3, #0
 800c44e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c450:	e06d      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c452:	4b39      	ldr	r3, [pc, #228]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c45a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c45e:	d102      	bne.n	800c466 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c460:	4b37      	ldr	r3, [pc, #220]	; (800c540 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c462:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c464:	e063      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c466:	2300      	movs	r3, #0
 800c468:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c46a:	e060      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c46c:	4b32      	ldr	r3, [pc, #200]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c474:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c478:	d102      	bne.n	800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c47a:	4b32      	ldr	r3, [pc, #200]	; (800c544 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c47c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c47e:	e056      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c480:	2300      	movs	r3, #0
 800c482:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c484:	e053      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c486:	2300      	movs	r3, #0
 800c488:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c48a:	e050      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c48c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c490:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c494:	430b      	orrs	r3, r1
 800c496:	d148      	bne.n	800c52a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c498:	4b27      	ldr	r3, [pc, #156]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c49a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c49c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c4a0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4a8:	d02a      	beq.n	800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4b0:	d838      	bhi.n	800c524 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d004      	beq.n	800c4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c4be:	d00d      	beq.n	800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c4c0:	e030      	b.n	800c524 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c4c2:	4b1d      	ldr	r3, [pc, #116]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4ce:	d102      	bne.n	800c4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800c4d0:	4b1c      	ldr	r3, [pc, #112]	; (800c544 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c4d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4d4:	e02b      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4da:	e028      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c4dc:	4b16      	ldr	r3, [pc, #88]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c4e8:	d107      	bne.n	800c4fa <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c4ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f000 fae8 	bl	800cac4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4f8:	e019      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4fe:	e016      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c500:	4b0d      	ldr	r3, [pc, #52]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c508:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c50c:	d107      	bne.n	800c51e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c50e:	f107 0318 	add.w	r3, r7, #24
 800c512:	4618      	mov	r0, r3
 800c514:	f000 f82e 	bl	800c574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c518:	69fb      	ldr	r3, [r7, #28]
 800c51a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c51c:	e007      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c51e:	2300      	movs	r3, #0
 800c520:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c522:	e004      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c524:	2300      	movs	r3, #0
 800c526:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c528:	e001      	b.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800c52a:	2300      	movs	r3, #0
 800c52c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c52e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c530:	4618      	mov	r0, r3
 800c532:	3740      	adds	r7, #64	; 0x40
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}
 800c538:	58024400 	.word	0x58024400
 800c53c:	03d09000 	.word	0x03d09000
 800c540:	003d0900 	.word	0x003d0900
 800c544:	02faf080 	.word	0x02faf080

0800c548 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c54c:	f7fe f92e 	bl	800a7ac <HAL_RCC_GetHCLKFreq>
 800c550:	4602      	mov	r2, r0
 800c552:	4b06      	ldr	r3, [pc, #24]	; (800c56c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c554:	6a1b      	ldr	r3, [r3, #32]
 800c556:	091b      	lsrs	r3, r3, #4
 800c558:	f003 0307 	and.w	r3, r3, #7
 800c55c:	4904      	ldr	r1, [pc, #16]	; (800c570 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c55e:	5ccb      	ldrb	r3, [r1, r3]
 800c560:	f003 031f 	and.w	r3, r3, #31
 800c564:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c568:	4618      	mov	r0, r3
 800c56a:	bd80      	pop	{r7, pc}
 800c56c:	58024400 	.word	0x58024400
 800c570:	080185a0 	.word	0x080185a0

0800c574 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c574:	b480      	push	{r7}
 800c576:	b089      	sub	sp, #36	; 0x24
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c57c:	4ba1      	ldr	r3, [pc, #644]	; (800c804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c57e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c580:	f003 0303 	and.w	r3, r3, #3
 800c584:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c586:	4b9f      	ldr	r3, [pc, #636]	; (800c804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c58a:	0b1b      	lsrs	r3, r3, #12
 800c58c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c590:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c592:	4b9c      	ldr	r3, [pc, #624]	; (800c804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c596:	091b      	lsrs	r3, r3, #4
 800c598:	f003 0301 	and.w	r3, r3, #1
 800c59c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c59e:	4b99      	ldr	r3, [pc, #612]	; (800c804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5a2:	08db      	lsrs	r3, r3, #3
 800c5a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c5a8:	693a      	ldr	r2, [r7, #16]
 800c5aa:	fb02 f303 	mul.w	r3, r2, r3
 800c5ae:	ee07 3a90 	vmov	s15, r3
 800c5b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c5ba:	697b      	ldr	r3, [r7, #20]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	f000 8111 	beq.w	800c7e4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c5c2:	69bb      	ldr	r3, [r7, #24]
 800c5c4:	2b02      	cmp	r3, #2
 800c5c6:	f000 8083 	beq.w	800c6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c5ca:	69bb      	ldr	r3, [r7, #24]
 800c5cc:	2b02      	cmp	r3, #2
 800c5ce:	f200 80a1 	bhi.w	800c714 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c5d2:	69bb      	ldr	r3, [r7, #24]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d003      	beq.n	800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c5d8:	69bb      	ldr	r3, [r7, #24]
 800c5da:	2b01      	cmp	r3, #1
 800c5dc:	d056      	beq.n	800c68c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c5de:	e099      	b.n	800c714 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c5e0:	4b88      	ldr	r3, [pc, #544]	; (800c804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f003 0320 	and.w	r3, r3, #32
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d02d      	beq.n	800c648 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c5ec:	4b85      	ldr	r3, [pc, #532]	; (800c804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	08db      	lsrs	r3, r3, #3
 800c5f2:	f003 0303 	and.w	r3, r3, #3
 800c5f6:	4a84      	ldr	r2, [pc, #528]	; (800c808 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c5f8:	fa22 f303 	lsr.w	r3, r2, r3
 800c5fc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	ee07 3a90 	vmov	s15, r3
 800c604:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	ee07 3a90 	vmov	s15, r3
 800c60e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c616:	4b7b      	ldr	r3, [pc, #492]	; (800c804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c61a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c61e:	ee07 3a90 	vmov	s15, r3
 800c622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c626:	ed97 6a03 	vldr	s12, [r7, #12]
 800c62a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c80c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c62e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c636:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c63a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c63e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c642:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c646:	e087      	b.n	800c758 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	ee07 3a90 	vmov	s15, r3
 800c64e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c652:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c810 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c65a:	4b6a      	ldr	r3, [pc, #424]	; (800c804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c65c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c65e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c662:	ee07 3a90 	vmov	s15, r3
 800c666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c66a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c66e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c80c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c67a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c67e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c682:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c686:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c68a:	e065      	b.n	800c758 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	ee07 3a90 	vmov	s15, r3
 800c692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c696:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c814 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c69a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c69e:	4b59      	ldr	r3, [pc, #356]	; (800c804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6a6:	ee07 3a90 	vmov	s15, r3
 800c6aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6b2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c80c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c6b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c6ce:	e043      	b.n	800c758 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c6d0:	697b      	ldr	r3, [r7, #20]
 800c6d2:	ee07 3a90 	vmov	s15, r3
 800c6d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6da:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c818 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c6de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6e2:	4b48      	ldr	r3, [pc, #288]	; (800c804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6ea:	ee07 3a90 	vmov	s15, r3
 800c6ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6f6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c80c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c6fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c702:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c70a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c70e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c712:	e021      	b.n	800c758 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	ee07 3a90 	vmov	s15, r3
 800c71a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c71e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c814 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c726:	4b37      	ldr	r3, [pc, #220]	; (800c804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c72a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c72e:	ee07 3a90 	vmov	s15, r3
 800c732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c736:	ed97 6a03 	vldr	s12, [r7, #12]
 800c73a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c80c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c73e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c742:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c746:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c74a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c74e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c752:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c756:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c758:	4b2a      	ldr	r3, [pc, #168]	; (800c804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c75a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c75c:	0a5b      	lsrs	r3, r3, #9
 800c75e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c762:	ee07 3a90 	vmov	s15, r3
 800c766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c76a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c76e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c772:	edd7 6a07 	vldr	s13, [r7, #28]
 800c776:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c77a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c77e:	ee17 2a90 	vmov	r2, s15
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c786:	4b1f      	ldr	r3, [pc, #124]	; (800c804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c78a:	0c1b      	lsrs	r3, r3, #16
 800c78c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c790:	ee07 3a90 	vmov	s15, r3
 800c794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c798:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c79c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c7a0:	edd7 6a07 	vldr	s13, [r7, #28]
 800c7a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c7a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7ac:	ee17 2a90 	vmov	r2, s15
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c7b4:	4b13      	ldr	r3, [pc, #76]	; (800c804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7b8:	0e1b      	lsrs	r3, r3, #24
 800c7ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7be:	ee07 3a90 	vmov	s15, r3
 800c7c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c7ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c7ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800c7d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c7d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7da:	ee17 2a90 	vmov	r2, s15
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c7e2:	e008      	b.n	800c7f6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	609a      	str	r2, [r3, #8]
}
 800c7f6:	bf00      	nop
 800c7f8:	3724      	adds	r7, #36	; 0x24
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c800:	4770      	bx	lr
 800c802:	bf00      	nop
 800c804:	58024400 	.word	0x58024400
 800c808:	03d09000 	.word	0x03d09000
 800c80c:	46000000 	.word	0x46000000
 800c810:	4c742400 	.word	0x4c742400
 800c814:	4a742400 	.word	0x4a742400
 800c818:	4c3ebc20 	.word	0x4c3ebc20

0800c81c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c81c:	b480      	push	{r7}
 800c81e:	b089      	sub	sp, #36	; 0x24
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c824:	4ba1      	ldr	r3, [pc, #644]	; (800caac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c828:	f003 0303 	and.w	r3, r3, #3
 800c82c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c82e:	4b9f      	ldr	r3, [pc, #636]	; (800caac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c832:	0d1b      	lsrs	r3, r3, #20
 800c834:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c838:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c83a:	4b9c      	ldr	r3, [pc, #624]	; (800caac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c83c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c83e:	0a1b      	lsrs	r3, r3, #8
 800c840:	f003 0301 	and.w	r3, r3, #1
 800c844:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c846:	4b99      	ldr	r3, [pc, #612]	; (800caac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c84a:	08db      	lsrs	r3, r3, #3
 800c84c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c850:	693a      	ldr	r2, [r7, #16]
 800c852:	fb02 f303 	mul.w	r3, r2, r3
 800c856:	ee07 3a90 	vmov	s15, r3
 800c85a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c85e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	2b00      	cmp	r3, #0
 800c866:	f000 8111 	beq.w	800ca8c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c86a:	69bb      	ldr	r3, [r7, #24]
 800c86c:	2b02      	cmp	r3, #2
 800c86e:	f000 8083 	beq.w	800c978 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c872:	69bb      	ldr	r3, [r7, #24]
 800c874:	2b02      	cmp	r3, #2
 800c876:	f200 80a1 	bhi.w	800c9bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c87a:	69bb      	ldr	r3, [r7, #24]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d003      	beq.n	800c888 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c880:	69bb      	ldr	r3, [r7, #24]
 800c882:	2b01      	cmp	r3, #1
 800c884:	d056      	beq.n	800c934 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c886:	e099      	b.n	800c9bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c888:	4b88      	ldr	r3, [pc, #544]	; (800caac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	f003 0320 	and.w	r3, r3, #32
 800c890:	2b00      	cmp	r3, #0
 800c892:	d02d      	beq.n	800c8f0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c894:	4b85      	ldr	r3, [pc, #532]	; (800caac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	08db      	lsrs	r3, r3, #3
 800c89a:	f003 0303 	and.w	r3, r3, #3
 800c89e:	4a84      	ldr	r2, [pc, #528]	; (800cab0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c8a0:	fa22 f303 	lsr.w	r3, r2, r3
 800c8a4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	ee07 3a90 	vmov	s15, r3
 800c8ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	ee07 3a90 	vmov	s15, r3
 800c8b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8be:	4b7b      	ldr	r3, [pc, #492]	; (800caac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8c6:	ee07 3a90 	vmov	s15, r3
 800c8ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cab4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c8d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c8ee:	e087      	b.n	800ca00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	ee07 3a90 	vmov	s15, r3
 800c8f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cab8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c8fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c902:	4b6a      	ldr	r3, [pc, #424]	; (800caac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c90a:	ee07 3a90 	vmov	s15, r3
 800c90e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c912:	ed97 6a03 	vldr	s12, [r7, #12]
 800c916:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cab4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c91a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c91e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c922:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c92a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c92e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c932:	e065      	b.n	800ca00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	ee07 3a90 	vmov	s15, r3
 800c93a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c93e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cabc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c946:	4b59      	ldr	r3, [pc, #356]	; (800caac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c94a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c94e:	ee07 3a90 	vmov	s15, r3
 800c952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c956:	ed97 6a03 	vldr	s12, [r7, #12]
 800c95a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cab4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c95e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c96a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c96e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c972:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c976:	e043      	b.n	800ca00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	ee07 3a90 	vmov	s15, r3
 800c97e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c982:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cac0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c98a:	4b48      	ldr	r3, [pc, #288]	; (800caac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c98c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c98e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c992:	ee07 3a90 	vmov	s15, r3
 800c996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c99a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c99e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cab4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c9a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9ba:	e021      	b.n	800ca00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	ee07 3a90 	vmov	s15, r3
 800c9c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cabc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c9ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9ce:	4b37      	ldr	r3, [pc, #220]	; (800caac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9d6:	ee07 3a90 	vmov	s15, r3
 800c9da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9de:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cab4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c9e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9fe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ca00:	4b2a      	ldr	r3, [pc, #168]	; (800caac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca04:	0a5b      	lsrs	r3, r3, #9
 800ca06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca0a:	ee07 3a90 	vmov	s15, r3
 800ca0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca16:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca1a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca26:	ee17 2a90 	vmov	r2, s15
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ca2e:	4b1f      	ldr	r3, [pc, #124]	; (800caac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca32:	0c1b      	lsrs	r3, r3, #16
 800ca34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca38:	ee07 3a90 	vmov	s15, r3
 800ca3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca44:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca48:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca54:	ee17 2a90 	vmov	r2, s15
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ca5c:	4b13      	ldr	r3, [pc, #76]	; (800caac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca60:	0e1b      	lsrs	r3, r3, #24
 800ca62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca66:	ee07 3a90 	vmov	s15, r3
 800ca6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca72:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca76:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca82:	ee17 2a90 	vmov	r2, s15
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ca8a:	e008      	b.n	800ca9e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2200      	movs	r2, #0
 800ca90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2200      	movs	r2, #0
 800ca96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	609a      	str	r2, [r3, #8]
}
 800ca9e:	bf00      	nop
 800caa0:	3724      	adds	r7, #36	; 0x24
 800caa2:	46bd      	mov	sp, r7
 800caa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa8:	4770      	bx	lr
 800caaa:	bf00      	nop
 800caac:	58024400 	.word	0x58024400
 800cab0:	03d09000 	.word	0x03d09000
 800cab4:	46000000 	.word	0x46000000
 800cab8:	4c742400 	.word	0x4c742400
 800cabc:	4a742400 	.word	0x4a742400
 800cac0:	4c3ebc20 	.word	0x4c3ebc20

0800cac4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800cac4:	b480      	push	{r7}
 800cac6:	b089      	sub	sp, #36	; 0x24
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cacc:	4ba0      	ldr	r3, [pc, #640]	; (800cd50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cad0:	f003 0303 	and.w	r3, r3, #3
 800cad4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cad6:	4b9e      	ldr	r3, [pc, #632]	; (800cd50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cada:	091b      	lsrs	r3, r3, #4
 800cadc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cae0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cae2:	4b9b      	ldr	r3, [pc, #620]	; (800cd50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cae6:	f003 0301 	and.w	r3, r3, #1
 800caea:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800caec:	4b98      	ldr	r3, [pc, #608]	; (800cd50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800caee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800caf0:	08db      	lsrs	r3, r3, #3
 800caf2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800caf6:	693a      	ldr	r2, [r7, #16]
 800caf8:	fb02 f303 	mul.w	r3, r2, r3
 800cafc:	ee07 3a90 	vmov	s15, r3
 800cb00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb04:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	f000 8111 	beq.w	800cd32 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cb10:	69bb      	ldr	r3, [r7, #24]
 800cb12:	2b02      	cmp	r3, #2
 800cb14:	f000 8083 	beq.w	800cc1e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cb18:	69bb      	ldr	r3, [r7, #24]
 800cb1a:	2b02      	cmp	r3, #2
 800cb1c:	f200 80a1 	bhi.w	800cc62 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cb20:	69bb      	ldr	r3, [r7, #24]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d003      	beq.n	800cb2e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800cb26:	69bb      	ldr	r3, [r7, #24]
 800cb28:	2b01      	cmp	r3, #1
 800cb2a:	d056      	beq.n	800cbda <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800cb2c:	e099      	b.n	800cc62 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb2e:	4b88      	ldr	r3, [pc, #544]	; (800cd50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f003 0320 	and.w	r3, r3, #32
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d02d      	beq.n	800cb96 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb3a:	4b85      	ldr	r3, [pc, #532]	; (800cd50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	08db      	lsrs	r3, r3, #3
 800cb40:	f003 0303 	and.w	r3, r3, #3
 800cb44:	4a83      	ldr	r2, [pc, #524]	; (800cd54 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800cb46:	fa22 f303 	lsr.w	r3, r2, r3
 800cb4a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	ee07 3a90 	vmov	s15, r3
 800cb52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	ee07 3a90 	vmov	s15, r3
 800cb5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb64:	4b7a      	ldr	r3, [pc, #488]	; (800cd50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb6c:	ee07 3a90 	vmov	s15, r3
 800cb70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb74:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb78:	eddf 5a77 	vldr	s11, [pc, #476]	; 800cd58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cb7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb90:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cb94:	e087      	b.n	800cca6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cb96:	697b      	ldr	r3, [r7, #20]
 800cb98:	ee07 3a90 	vmov	s15, r3
 800cb9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cba0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800cd5c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cba4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cba8:	4b69      	ldr	r3, [pc, #420]	; (800cd50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cbaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbb0:	ee07 3a90 	vmov	s15, r3
 800cbb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbb8:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbbc:	eddf 5a66 	vldr	s11, [pc, #408]	; 800cd58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cbc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbd4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cbd8:	e065      	b.n	800cca6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cbda:	697b      	ldr	r3, [r7, #20]
 800cbdc:	ee07 3a90 	vmov	s15, r3
 800cbe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbe4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800cd60 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800cbe8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbec:	4b58      	ldr	r3, [pc, #352]	; (800cd50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cbee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbf4:	ee07 3a90 	vmov	s15, r3
 800cbf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbfc:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc00:	eddf 5a55 	vldr	s11, [pc, #340]	; 800cd58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cc04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc14:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc18:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc1c:	e043      	b.n	800cca6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc1e:	697b      	ldr	r3, [r7, #20]
 800cc20:	ee07 3a90 	vmov	s15, r3
 800cc24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc28:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800cd64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800cc2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc30:	4b47      	ldr	r3, [pc, #284]	; (800cd50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc38:	ee07 3a90 	vmov	s15, r3
 800cc3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc40:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc44:	eddf 5a44 	vldr	s11, [pc, #272]	; 800cd58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cc48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc58:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc5c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc60:	e021      	b.n	800cca6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	ee07 3a90 	vmov	s15, r3
 800cc68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc6c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800cd5c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cc70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc74:	4b36      	ldr	r3, [pc, #216]	; (800cd50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc7c:	ee07 3a90 	vmov	s15, r3
 800cc80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc84:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc88:	eddf 5a33 	vldr	s11, [pc, #204]	; 800cd58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cc8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cca0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cca4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800cca6:	4b2a      	ldr	r3, [pc, #168]	; (800cd50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccaa:	0a5b      	lsrs	r3, r3, #9
 800ccac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccb0:	ee07 3a90 	vmov	s15, r3
 800ccb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ccbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ccc0:	edd7 6a07 	vldr	s13, [r7, #28]
 800ccc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cccc:	ee17 2a90 	vmov	r2, s15
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800ccd4:	4b1e      	ldr	r3, [pc, #120]	; (800cd50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ccd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccd8:	0c1b      	lsrs	r3, r3, #16
 800ccda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccde:	ee07 3a90 	vmov	s15, r3
 800cce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cce6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ccea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ccee:	edd7 6a07 	vldr	s13, [r7, #28]
 800ccf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccfa:	ee17 2a90 	vmov	r2, s15
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800cd02:	4b13      	ldr	r3, [pc, #76]	; (800cd50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd06:	0e1b      	lsrs	r3, r3, #24
 800cd08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd0c:	ee07 3a90 	vmov	s15, r3
 800cd10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd18:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd1c:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd28:	ee17 2a90 	vmov	r2, s15
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800cd30:	e008      	b.n	800cd44 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2200      	movs	r2, #0
 800cd36:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	2200      	movs	r2, #0
 800cd42:	609a      	str	r2, [r3, #8]
}
 800cd44:	bf00      	nop
 800cd46:	3724      	adds	r7, #36	; 0x24
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4e:	4770      	bx	lr
 800cd50:	58024400 	.word	0x58024400
 800cd54:	03d09000 	.word	0x03d09000
 800cd58:	46000000 	.word	0x46000000
 800cd5c:	4c742400 	.word	0x4c742400
 800cd60:	4a742400 	.word	0x4a742400
 800cd64:	4c3ebc20 	.word	0x4c3ebc20

0800cd68 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b084      	sub	sp, #16
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
 800cd70:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cd72:	2300      	movs	r3, #0
 800cd74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cd76:	4b53      	ldr	r3, [pc, #332]	; (800cec4 <RCCEx_PLL2_Config+0x15c>)
 800cd78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd7a:	f003 0303 	and.w	r3, r3, #3
 800cd7e:	2b03      	cmp	r3, #3
 800cd80:	d101      	bne.n	800cd86 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cd82:	2301      	movs	r3, #1
 800cd84:	e099      	b.n	800ceba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cd86:	4b4f      	ldr	r3, [pc, #316]	; (800cec4 <RCCEx_PLL2_Config+0x15c>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	4a4e      	ldr	r2, [pc, #312]	; (800cec4 <RCCEx_PLL2_Config+0x15c>)
 800cd8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cd90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd92:	f7f6 fe7b 	bl	8003a8c <HAL_GetTick>
 800cd96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cd98:	e008      	b.n	800cdac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cd9a:	f7f6 fe77 	bl	8003a8c <HAL_GetTick>
 800cd9e:	4602      	mov	r2, r0
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	1ad3      	subs	r3, r2, r3
 800cda4:	2b02      	cmp	r3, #2
 800cda6:	d901      	bls.n	800cdac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cda8:	2303      	movs	r3, #3
 800cdaa:	e086      	b.n	800ceba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cdac:	4b45      	ldr	r3, [pc, #276]	; (800cec4 <RCCEx_PLL2_Config+0x15c>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d1f0      	bne.n	800cd9a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cdb8:	4b42      	ldr	r3, [pc, #264]	; (800cec4 <RCCEx_PLL2_Config+0x15c>)
 800cdba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdbc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	031b      	lsls	r3, r3, #12
 800cdc6:	493f      	ldr	r1, [pc, #252]	; (800cec4 <RCCEx_PLL2_Config+0x15c>)
 800cdc8:	4313      	orrs	r3, r2
 800cdca:	628b      	str	r3, [r1, #40]	; 0x28
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	685b      	ldr	r3, [r3, #4]
 800cdd0:	3b01      	subs	r3, #1
 800cdd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	689b      	ldr	r3, [r3, #8]
 800cdda:	3b01      	subs	r3, #1
 800cddc:	025b      	lsls	r3, r3, #9
 800cdde:	b29b      	uxth	r3, r3
 800cde0:	431a      	orrs	r2, r3
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	68db      	ldr	r3, [r3, #12]
 800cde6:	3b01      	subs	r3, #1
 800cde8:	041b      	lsls	r3, r3, #16
 800cdea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cdee:	431a      	orrs	r2, r3
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	691b      	ldr	r3, [r3, #16]
 800cdf4:	3b01      	subs	r3, #1
 800cdf6:	061b      	lsls	r3, r3, #24
 800cdf8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cdfc:	4931      	ldr	r1, [pc, #196]	; (800cec4 <RCCEx_PLL2_Config+0x15c>)
 800cdfe:	4313      	orrs	r3, r2
 800ce00:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ce02:	4b30      	ldr	r3, [pc, #192]	; (800cec4 <RCCEx_PLL2_Config+0x15c>)
 800ce04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce06:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	695b      	ldr	r3, [r3, #20]
 800ce0e:	492d      	ldr	r1, [pc, #180]	; (800cec4 <RCCEx_PLL2_Config+0x15c>)
 800ce10:	4313      	orrs	r3, r2
 800ce12:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ce14:	4b2b      	ldr	r3, [pc, #172]	; (800cec4 <RCCEx_PLL2_Config+0x15c>)
 800ce16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce18:	f023 0220 	bic.w	r2, r3, #32
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	699b      	ldr	r3, [r3, #24]
 800ce20:	4928      	ldr	r1, [pc, #160]	; (800cec4 <RCCEx_PLL2_Config+0x15c>)
 800ce22:	4313      	orrs	r3, r2
 800ce24:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ce26:	4b27      	ldr	r3, [pc, #156]	; (800cec4 <RCCEx_PLL2_Config+0x15c>)
 800ce28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce2a:	4a26      	ldr	r2, [pc, #152]	; (800cec4 <RCCEx_PLL2_Config+0x15c>)
 800ce2c:	f023 0310 	bic.w	r3, r3, #16
 800ce30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ce32:	4b24      	ldr	r3, [pc, #144]	; (800cec4 <RCCEx_PLL2_Config+0x15c>)
 800ce34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce36:	4b24      	ldr	r3, [pc, #144]	; (800cec8 <RCCEx_PLL2_Config+0x160>)
 800ce38:	4013      	ands	r3, r2
 800ce3a:	687a      	ldr	r2, [r7, #4]
 800ce3c:	69d2      	ldr	r2, [r2, #28]
 800ce3e:	00d2      	lsls	r2, r2, #3
 800ce40:	4920      	ldr	r1, [pc, #128]	; (800cec4 <RCCEx_PLL2_Config+0x15c>)
 800ce42:	4313      	orrs	r3, r2
 800ce44:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ce46:	4b1f      	ldr	r3, [pc, #124]	; (800cec4 <RCCEx_PLL2_Config+0x15c>)
 800ce48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce4a:	4a1e      	ldr	r2, [pc, #120]	; (800cec4 <RCCEx_PLL2_Config+0x15c>)
 800ce4c:	f043 0310 	orr.w	r3, r3, #16
 800ce50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d106      	bne.n	800ce66 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ce58:	4b1a      	ldr	r3, [pc, #104]	; (800cec4 <RCCEx_PLL2_Config+0x15c>)
 800ce5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce5c:	4a19      	ldr	r2, [pc, #100]	; (800cec4 <RCCEx_PLL2_Config+0x15c>)
 800ce5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ce62:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ce64:	e00f      	b.n	800ce86 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	2b01      	cmp	r3, #1
 800ce6a:	d106      	bne.n	800ce7a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ce6c:	4b15      	ldr	r3, [pc, #84]	; (800cec4 <RCCEx_PLL2_Config+0x15c>)
 800ce6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce70:	4a14      	ldr	r2, [pc, #80]	; (800cec4 <RCCEx_PLL2_Config+0x15c>)
 800ce72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ce76:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ce78:	e005      	b.n	800ce86 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ce7a:	4b12      	ldr	r3, [pc, #72]	; (800cec4 <RCCEx_PLL2_Config+0x15c>)
 800ce7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce7e:	4a11      	ldr	r2, [pc, #68]	; (800cec4 <RCCEx_PLL2_Config+0x15c>)
 800ce80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ce84:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ce86:	4b0f      	ldr	r3, [pc, #60]	; (800cec4 <RCCEx_PLL2_Config+0x15c>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	4a0e      	ldr	r2, [pc, #56]	; (800cec4 <RCCEx_PLL2_Config+0x15c>)
 800ce8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ce90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce92:	f7f6 fdfb 	bl	8003a8c <HAL_GetTick>
 800ce96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ce98:	e008      	b.n	800ceac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ce9a:	f7f6 fdf7 	bl	8003a8c <HAL_GetTick>
 800ce9e:	4602      	mov	r2, r0
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	1ad3      	subs	r3, r2, r3
 800cea4:	2b02      	cmp	r3, #2
 800cea6:	d901      	bls.n	800ceac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cea8:	2303      	movs	r3, #3
 800ceaa:	e006      	b.n	800ceba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ceac:	4b05      	ldr	r3, [pc, #20]	; (800cec4 <RCCEx_PLL2_Config+0x15c>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d0f0      	beq.n	800ce9a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ceb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3710      	adds	r7, #16
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}
 800cec2:	bf00      	nop
 800cec4:	58024400 	.word	0x58024400
 800cec8:	ffff0007 	.word	0xffff0007

0800cecc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b084      	sub	sp, #16
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
 800ced4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ced6:	2300      	movs	r3, #0
 800ced8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ceda:	4b53      	ldr	r3, [pc, #332]	; (800d028 <RCCEx_PLL3_Config+0x15c>)
 800cedc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cede:	f003 0303 	and.w	r3, r3, #3
 800cee2:	2b03      	cmp	r3, #3
 800cee4:	d101      	bne.n	800ceea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cee6:	2301      	movs	r3, #1
 800cee8:	e099      	b.n	800d01e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ceea:	4b4f      	ldr	r3, [pc, #316]	; (800d028 <RCCEx_PLL3_Config+0x15c>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	4a4e      	ldr	r2, [pc, #312]	; (800d028 <RCCEx_PLL3_Config+0x15c>)
 800cef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cef4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cef6:	f7f6 fdc9 	bl	8003a8c <HAL_GetTick>
 800cefa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cefc:	e008      	b.n	800cf10 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cefe:	f7f6 fdc5 	bl	8003a8c <HAL_GetTick>
 800cf02:	4602      	mov	r2, r0
 800cf04:	68bb      	ldr	r3, [r7, #8]
 800cf06:	1ad3      	subs	r3, r2, r3
 800cf08:	2b02      	cmp	r3, #2
 800cf0a:	d901      	bls.n	800cf10 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cf0c:	2303      	movs	r3, #3
 800cf0e:	e086      	b.n	800d01e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cf10:	4b45      	ldr	r3, [pc, #276]	; (800d028 <RCCEx_PLL3_Config+0x15c>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d1f0      	bne.n	800cefe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cf1c:	4b42      	ldr	r3, [pc, #264]	; (800d028 <RCCEx_PLL3_Config+0x15c>)
 800cf1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf20:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	051b      	lsls	r3, r3, #20
 800cf2a:	493f      	ldr	r1, [pc, #252]	; (800d028 <RCCEx_PLL3_Config+0x15c>)
 800cf2c:	4313      	orrs	r3, r2
 800cf2e:	628b      	str	r3, [r1, #40]	; 0x28
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	685b      	ldr	r3, [r3, #4]
 800cf34:	3b01      	subs	r3, #1
 800cf36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	689b      	ldr	r3, [r3, #8]
 800cf3e:	3b01      	subs	r3, #1
 800cf40:	025b      	lsls	r3, r3, #9
 800cf42:	b29b      	uxth	r3, r3
 800cf44:	431a      	orrs	r2, r3
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	68db      	ldr	r3, [r3, #12]
 800cf4a:	3b01      	subs	r3, #1
 800cf4c:	041b      	lsls	r3, r3, #16
 800cf4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cf52:	431a      	orrs	r2, r3
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	691b      	ldr	r3, [r3, #16]
 800cf58:	3b01      	subs	r3, #1
 800cf5a:	061b      	lsls	r3, r3, #24
 800cf5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cf60:	4931      	ldr	r1, [pc, #196]	; (800d028 <RCCEx_PLL3_Config+0x15c>)
 800cf62:	4313      	orrs	r3, r2
 800cf64:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cf66:	4b30      	ldr	r3, [pc, #192]	; (800d028 <RCCEx_PLL3_Config+0x15c>)
 800cf68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	695b      	ldr	r3, [r3, #20]
 800cf72:	492d      	ldr	r1, [pc, #180]	; (800d028 <RCCEx_PLL3_Config+0x15c>)
 800cf74:	4313      	orrs	r3, r2
 800cf76:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cf78:	4b2b      	ldr	r3, [pc, #172]	; (800d028 <RCCEx_PLL3_Config+0x15c>)
 800cf7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf7c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	699b      	ldr	r3, [r3, #24]
 800cf84:	4928      	ldr	r1, [pc, #160]	; (800d028 <RCCEx_PLL3_Config+0x15c>)
 800cf86:	4313      	orrs	r3, r2
 800cf88:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cf8a:	4b27      	ldr	r3, [pc, #156]	; (800d028 <RCCEx_PLL3_Config+0x15c>)
 800cf8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf8e:	4a26      	ldr	r2, [pc, #152]	; (800d028 <RCCEx_PLL3_Config+0x15c>)
 800cf90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cf96:	4b24      	ldr	r3, [pc, #144]	; (800d028 <RCCEx_PLL3_Config+0x15c>)
 800cf98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf9a:	4b24      	ldr	r3, [pc, #144]	; (800d02c <RCCEx_PLL3_Config+0x160>)
 800cf9c:	4013      	ands	r3, r2
 800cf9e:	687a      	ldr	r2, [r7, #4]
 800cfa0:	69d2      	ldr	r2, [r2, #28]
 800cfa2:	00d2      	lsls	r2, r2, #3
 800cfa4:	4920      	ldr	r1, [pc, #128]	; (800d028 <RCCEx_PLL3_Config+0x15c>)
 800cfa6:	4313      	orrs	r3, r2
 800cfa8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cfaa:	4b1f      	ldr	r3, [pc, #124]	; (800d028 <RCCEx_PLL3_Config+0x15c>)
 800cfac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfae:	4a1e      	ldr	r2, [pc, #120]	; (800d028 <RCCEx_PLL3_Config+0x15c>)
 800cfb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cfb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d106      	bne.n	800cfca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cfbc:	4b1a      	ldr	r3, [pc, #104]	; (800d028 <RCCEx_PLL3_Config+0x15c>)
 800cfbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfc0:	4a19      	ldr	r2, [pc, #100]	; (800d028 <RCCEx_PLL3_Config+0x15c>)
 800cfc2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cfc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cfc8:	e00f      	b.n	800cfea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cfca:	683b      	ldr	r3, [r7, #0]
 800cfcc:	2b01      	cmp	r3, #1
 800cfce:	d106      	bne.n	800cfde <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cfd0:	4b15      	ldr	r3, [pc, #84]	; (800d028 <RCCEx_PLL3_Config+0x15c>)
 800cfd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfd4:	4a14      	ldr	r2, [pc, #80]	; (800d028 <RCCEx_PLL3_Config+0x15c>)
 800cfd6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cfda:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cfdc:	e005      	b.n	800cfea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cfde:	4b12      	ldr	r3, [pc, #72]	; (800d028 <RCCEx_PLL3_Config+0x15c>)
 800cfe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfe2:	4a11      	ldr	r2, [pc, #68]	; (800d028 <RCCEx_PLL3_Config+0x15c>)
 800cfe4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cfe8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cfea:	4b0f      	ldr	r3, [pc, #60]	; (800d028 <RCCEx_PLL3_Config+0x15c>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	4a0e      	ldr	r2, [pc, #56]	; (800d028 <RCCEx_PLL3_Config+0x15c>)
 800cff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cff4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cff6:	f7f6 fd49 	bl	8003a8c <HAL_GetTick>
 800cffa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cffc:	e008      	b.n	800d010 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cffe:	f7f6 fd45 	bl	8003a8c <HAL_GetTick>
 800d002:	4602      	mov	r2, r0
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	1ad3      	subs	r3, r2, r3
 800d008:	2b02      	cmp	r3, #2
 800d00a:	d901      	bls.n	800d010 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d00c:	2303      	movs	r3, #3
 800d00e:	e006      	b.n	800d01e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d010:	4b05      	ldr	r3, [pc, #20]	; (800d028 <RCCEx_PLL3_Config+0x15c>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d0f0      	beq.n	800cffe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d01c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3710      	adds	r7, #16
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}
 800d026:	bf00      	nop
 800d028:	58024400 	.word	0x58024400
 800d02c:	ffff0007 	.word	0xffff0007

0800d030 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b08a      	sub	sp, #40	; 0x28
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d101      	bne.n	800d042 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d03e:	2301      	movs	r3, #1
 800d040:	e075      	b.n	800d12e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d048:	b2db      	uxtb	r3, r3
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d105      	bne.n	800d05a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2200      	movs	r2, #0
 800d052:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d054:	6878      	ldr	r0, [r7, #4]
 800d056:	f7f5 fe59 	bl	8002d0c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2204      	movs	r2, #4
 800d05e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f000 f868 	bl	800d138 <HAL_SD_InitCard>
 800d068:	4603      	mov	r3, r0
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d001      	beq.n	800d072 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d06e:	2301      	movs	r3, #1
 800d070:	e05d      	b.n	800d12e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800d072:	f107 0308 	add.w	r3, r7, #8
 800d076:	4619      	mov	r1, r3
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	f000 fdaf 	bl	800dbdc <HAL_SD_GetCardStatus>
 800d07e:	4603      	mov	r3, r0
 800d080:	2b00      	cmp	r3, #0
 800d082:	d001      	beq.n	800d088 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800d084:	2301      	movs	r3, #1
 800d086:	e052      	b.n	800d12e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800d088:	7e3b      	ldrb	r3, [r7, #24]
 800d08a:	b2db      	uxtb	r3, r3
 800d08c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800d08e:	7e7b      	ldrb	r3, [r7, #25]
 800d090:	b2db      	uxtb	r3, r3
 800d092:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d098:	2b01      	cmp	r3, #1
 800d09a:	d10a      	bne.n	800d0b2 <HAL_SD_Init+0x82>
 800d09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d102      	bne.n	800d0a8 <HAL_SD_Init+0x78>
 800d0a2:	6a3b      	ldr	r3, [r7, #32]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d004      	beq.n	800d0b2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d0ae:	659a      	str	r2, [r3, #88]	; 0x58
 800d0b0:	e00b      	b.n	800d0ca <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0b6:	2b01      	cmp	r3, #1
 800d0b8:	d104      	bne.n	800d0c4 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d0c0:	659a      	str	r2, [r3, #88]	; 0x58
 800d0c2:	e002      	b.n	800d0ca <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	68db      	ldr	r3, [r3, #12]
 800d0ce:	4619      	mov	r1, r3
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f000 fe6d 	bl	800ddb0 <HAL_SD_ConfigWideBusOperation>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d001      	beq.n	800d0e0 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800d0dc:	2301      	movs	r3, #1
 800d0de:	e026      	b.n	800d12e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800d0e0:	f7f6 fcd4 	bl	8003a8c <HAL_GetTick>
 800d0e4:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d0e6:	e011      	b.n	800d10c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d0e8:	f7f6 fcd0 	bl	8003a8c <HAL_GetTick>
 800d0ec:	4602      	mov	r2, r0
 800d0ee:	69fb      	ldr	r3, [r7, #28]
 800d0f0:	1ad3      	subs	r3, r2, r3
 800d0f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0f6:	d109      	bne.n	800d10c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d0fe:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2201      	movs	r2, #1
 800d104:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800d108:	2303      	movs	r3, #3
 800d10a:	e010      	b.n	800d12e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	f000 ff61 	bl	800dfd4 <HAL_SD_GetCardState>
 800d112:	4603      	mov	r3, r0
 800d114:	2b04      	cmp	r3, #4
 800d116:	d1e7      	bne.n	800d0e8 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2200      	movs	r2, #0
 800d11c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2200      	movs	r2, #0
 800d122:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2201      	movs	r2, #1
 800d128:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800d12c:	2300      	movs	r3, #0
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3728      	adds	r7, #40	; 0x28
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}
	...

0800d138 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d138:	b590      	push	{r4, r7, lr}
 800d13a:	b08d      	sub	sp, #52	; 0x34
 800d13c:	af02      	add	r7, sp, #8
 800d13e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d140:	2300      	movs	r3, #0
 800d142:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d144:	2300      	movs	r3, #0
 800d146:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d148:	2300      	movs	r3, #0
 800d14a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d14c:	2300      	movs	r3, #0
 800d14e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d150:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d154:	f04f 0100 	mov.w	r1, #0
 800d158:	f7fe fd24 	bl	800bba4 <HAL_RCCEx_GetPeriphCLKFreq>
 800d15c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800d15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d160:	2b00      	cmp	r3, #0
 800d162:	d109      	bne.n	800d178 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2201      	movs	r2, #1
 800d168:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d172:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d174:	2301      	movs	r3, #1
 800d176:	e070      	b.n	800d25a <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d17a:	0a1b      	lsrs	r3, r3, #8
 800d17c:	4a39      	ldr	r2, [pc, #228]	; (800d264 <HAL_SD_InitCard+0x12c>)
 800d17e:	fba2 2303 	umull	r2, r3, r2, r3
 800d182:	091b      	lsrs	r3, r3, #4
 800d184:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681c      	ldr	r4, [r3, #0]
 800d18a:	466a      	mov	r2, sp
 800d18c:	f107 0318 	add.w	r3, r7, #24
 800d190:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d194:	e882 0003 	stmia.w	r2, {r0, r1}
 800d198:	f107 030c 	add.w	r3, r7, #12
 800d19c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d19e:	4620      	mov	r0, r4
 800d1a0:	f004 fec4 	bl	8011f2c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	f004 ff07 	bl	8011fbc <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800d1ae:	69fb      	ldr	r3, [r7, #28]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d005      	beq.n	800d1c0 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800d1b4:	69fb      	ldr	r3, [r7, #28]
 800d1b6:	005b      	lsls	r3, r3, #1
 800d1b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1be:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800d1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d007      	beq.n	800d1d6 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800d1c6:	4a28      	ldr	r2, [pc, #160]	; (800d268 <HAL_SD_InitCard+0x130>)
 800d1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1ce:	3301      	adds	r3, #1
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f7f6 fc67 	bl	8003aa4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f000 ffea 	bl	800e1b0 <SD_PowerON>
 800d1dc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d1de:	6a3b      	ldr	r3, [r7, #32]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d00b      	beq.n	800d1fc <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	2201      	movs	r2, #1
 800d1e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d1f0:	6a3b      	ldr	r3, [r7, #32]
 800d1f2:	431a      	orrs	r2, r3
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d1f8:	2301      	movs	r3, #1
 800d1fa:	e02e      	b.n	800d25a <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f000 ff09 	bl	800e014 <SD_InitCard>
 800d202:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d204:	6a3b      	ldr	r3, [r7, #32]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d00b      	beq.n	800d222 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2201      	movs	r2, #1
 800d20e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d216:	6a3b      	ldr	r3, [r7, #32]
 800d218:	431a      	orrs	r2, r3
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d21e:	2301      	movs	r3, #1
 800d220:	e01b      	b.n	800d25a <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d22a:	4618      	mov	r0, r3
 800d22c:	f004 ff5c 	bl	80120e8 <SDMMC_CmdBlockLength>
 800d230:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d232:	6a3b      	ldr	r3, [r7, #32]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d00f      	beq.n	800d258 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	4a0b      	ldr	r2, [pc, #44]	; (800d26c <HAL_SD_InitCard+0x134>)
 800d23e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d244:	6a3b      	ldr	r3, [r7, #32]
 800d246:	431a      	orrs	r2, r3
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2201      	movs	r2, #1
 800d250:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d254:	2301      	movs	r3, #1
 800d256:	e000      	b.n	800d25a <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800d258:	2300      	movs	r3, #0
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	372c      	adds	r7, #44	; 0x2c
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd90      	pop	{r4, r7, pc}
 800d262:	bf00      	nop
 800d264:	014f8b59 	.word	0x014f8b59
 800d268:	00012110 	.word	0x00012110
 800d26c:	1fe00fff 	.word	0x1fe00fff

0800d270 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b08c      	sub	sp, #48	; 0x30
 800d274:	af00      	add	r7, sp, #0
 800d276:	60f8      	str	r0, [r7, #12]
 800d278:	60b9      	str	r1, [r7, #8]
 800d27a:	607a      	str	r2, [r7, #4]
 800d27c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d282:	68bb      	ldr	r3, [r7, #8]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d107      	bne.n	800d298 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d28c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d294:	2301      	movs	r3, #1
 800d296:	e08d      	b.n	800d3b4 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d29e:	b2db      	uxtb	r3, r3
 800d2a0:	2b01      	cmp	r3, #1
 800d2a2:	f040 8086 	bne.w	800d3b2 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d2ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	441a      	add	r2, r3
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2b6:	429a      	cmp	r2, r3
 800d2b8:	d907      	bls.n	800d2ca <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2be:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	e074      	b.n	800d3b4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	2203      	movs	r2, #3
 800d2ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	68ba      	ldr	r2, [r7, #8]
 800d2de:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	025a      	lsls	r2, r3, #9
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2ec:	2b01      	cmp	r3, #1
 800d2ee:	d002      	beq.n	800d2f6 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f2:	025b      	lsls	r3, r3, #9
 800d2f4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d2f6:	f04f 33ff 	mov.w	r3, #4294967295
 800d2fa:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	025b      	lsls	r3, r3, #9
 800d300:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d302:	2390      	movs	r3, #144	; 0x90
 800d304:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d306:	2302      	movs	r3, #2
 800d308:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d30a:	2300      	movs	r3, #0
 800d30c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d30e:	2300      	movs	r3, #0
 800d310:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	f107 0210 	add.w	r2, r7, #16
 800d31a:	4611      	mov	r1, r2
 800d31c:	4618      	mov	r0, r3
 800d31e:	f004 feb7 	bl	8012090 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	68da      	ldr	r2, [r3, #12]
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d330:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	68ba      	ldr	r2, [r7, #8]
 800d338:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	2201      	movs	r2, #1
 800d340:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	2b01      	cmp	r3, #1
 800d346:	d90a      	bls.n	800d35e <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	2282      	movs	r2, #130	; 0x82
 800d34c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d354:	4618      	mov	r0, r3
 800d356:	f004 ff0d 	bl	8012174 <SDMMC_CmdReadMultiBlock>
 800d35a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d35c:	e009      	b.n	800d372 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	2281      	movs	r2, #129	; 0x81
 800d362:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d36a:	4618      	mov	r0, r3
 800d36c:	f004 fedf 	bl	801212e <SDMMC_CmdReadSingleBlock>
 800d370:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d374:	2b00      	cmp	r3, #0
 800d376:	d012      	beq.n	800d39e <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	4a0f      	ldr	r2, [pc, #60]	; (800d3bc <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d37e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d386:	431a      	orrs	r2, r3
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	2201      	movs	r2, #1
 800d390:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	2200      	movs	r2, #0
 800d398:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d39a:	2301      	movs	r3, #1
 800d39c:	e00a      	b.n	800d3b4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d3ac:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	e000      	b.n	800d3b4 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d3b2:	2302      	movs	r3, #2
  }
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	3730      	adds	r7, #48	; 0x30
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}
 800d3bc:	1fe00fff 	.word	0x1fe00fff

0800d3c0 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b08c      	sub	sp, #48	; 0x30
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	60f8      	str	r0, [r7, #12]
 800d3c8:	60b9      	str	r1, [r7, #8]
 800d3ca:	607a      	str	r2, [r7, #4]
 800d3cc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d107      	bne.n	800d3e8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3dc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	e08d      	b.n	800d504 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d3ee:	b2db      	uxtb	r3, r3
 800d3f0:	2b01      	cmp	r3, #1
 800d3f2:	f040 8086 	bne.w	800d502 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d3fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	441a      	add	r2, r3
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d406:	429a      	cmp	r2, r3
 800d408:	d907      	bls.n	800d41a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d40e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d416:	2301      	movs	r3, #1
 800d418:	e074      	b.n	800d504 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	2203      	movs	r2, #3
 800d41e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	2200      	movs	r2, #0
 800d428:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	68ba      	ldr	r2, [r7, #8]
 800d42e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	025a      	lsls	r2, r3, #9
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d43c:	2b01      	cmp	r3, #1
 800d43e:	d002      	beq.n	800d446 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d442:	025b      	lsls	r3, r3, #9
 800d444:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d446:	f04f 33ff 	mov.w	r3, #4294967295
 800d44a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	025b      	lsls	r3, r3, #9
 800d450:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d452:	2390      	movs	r3, #144	; 0x90
 800d454:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d456:	2300      	movs	r3, #0
 800d458:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d45a:	2300      	movs	r3, #0
 800d45c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d45e:	2300      	movs	r3, #0
 800d460:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	f107 0210 	add.w	r2, r7, #16
 800d46a:	4611      	mov	r1, r2
 800d46c:	4618      	mov	r0, r3
 800d46e:	f004 fe0f 	bl	8012090 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	68da      	ldr	r2, [r3, #12]
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d480:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	68ba      	ldr	r2, [r7, #8]
 800d488:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	2201      	movs	r2, #1
 800d490:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	2b01      	cmp	r3, #1
 800d496:	d90a      	bls.n	800d4ae <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	22a0      	movs	r2, #160	; 0xa0
 800d49c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	f004 feab 	bl	8012200 <SDMMC_CmdWriteMultiBlock>
 800d4aa:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d4ac:	e009      	b.n	800d4c2 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	2290      	movs	r2, #144	; 0x90
 800d4b2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f004 fe7d 	bl	80121ba <SDMMC_CmdWriteSingleBlock>
 800d4c0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d012      	beq.n	800d4ee <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	4a0f      	ldr	r2, [pc, #60]	; (800d50c <HAL_SD_WriteBlocks_DMA+0x14c>)
 800d4ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d6:	431a      	orrs	r2, r3
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	2201      	movs	r2, #1
 800d4e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	e00a      	b.n	800d504 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800d4fc:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d4fe:	2300      	movs	r3, #0
 800d500:	e000      	b.n	800d504 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d502:	2302      	movs	r3, #2
  }
}
 800d504:	4618      	mov	r0, r3
 800d506:	3730      	adds	r7, #48	; 0x30
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}
 800d50c:	1fe00fff 	.word	0x1fe00fff

0800d510 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b084      	sub	sp, #16
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d51c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d524:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d008      	beq.n	800d53e <HAL_SD_IRQHandler+0x2e>
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	f003 0308 	and.w	r3, r3, #8
 800d532:	2b00      	cmp	r3, #0
 800d534:	d003      	beq.n	800d53e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f001 f926 	bl	800e788 <SD_Read_IT>
 800d53c:	e19a      	b.n	800d874 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d548:	2b00      	cmp	r3, #0
 800d54a:	f000 80ac 	beq.w	800d6a6 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d556:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681a      	ldr	r2, [r3, #0]
 800d562:	4b59      	ldr	r3, [pc, #356]	; (800d6c8 <HAL_SD_IRQHandler+0x1b8>)
 800d564:	400b      	ands	r3, r1
 800d566:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d576:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	68da      	ldr	r2, [r3, #12]
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d586:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	f003 0308 	and.w	r3, r3, #8
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d038      	beq.n	800d604 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	f003 0302 	and.w	r3, r3, #2
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d104      	bne.n	800d5a6 <HAL_SD_IRQHandler+0x96>
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	f003 0320 	and.w	r3, r3, #32
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d011      	beq.n	800d5ca <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f004 fe4c 	bl	8012248 <SDMMC_CmdStopTransfer>
 800d5b0:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d008      	beq.n	800d5ca <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	431a      	orrs	r2, r3
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f000 f95b 	bl	800d880 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	4a3f      	ldr	r2, [pc, #252]	; (800d6cc <HAL_SD_IRQHandler+0x1bc>)
 800d5d0:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2201      	movs	r2, #1
 800d5d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2200      	movs	r2, #0
 800d5de:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	f003 0301 	and.w	r3, r3, #1
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d104      	bne.n	800d5f4 <HAL_SD_IRQHandler+0xe4>
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	f003 0302 	and.w	r3, r3, #2
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d003      	beq.n	800d5fc <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d5f4:	6878      	ldr	r0, [r7, #4]
 800d5f6:	f006 fe4d 	bl	8014294 <HAL_SD_RxCpltCallback>
 800d5fa:	e13b      	b.n	800d874 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d5fc:	6878      	ldr	r0, [r7, #4]
 800d5fe:	f006 fe3f 	bl	8014280 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d602:	e137      	b.n	800d874 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	f000 8132 	beq.w	800d874 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	2200      	movs	r2, #0
 800d616:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	2200      	movs	r2, #0
 800d61e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	2200      	movs	r2, #0
 800d626:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	f003 0302 	and.w	r3, r3, #2
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d104      	bne.n	800d63c <HAL_SD_IRQHandler+0x12c>
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	f003 0320 	and.w	r3, r3, #32
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d011      	beq.n	800d660 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	4618      	mov	r0, r3
 800d642:	f004 fe01 	bl	8012248 <SDMMC_CmdStopTransfer>
 800d646:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d008      	beq.n	800d660 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d652:	68bb      	ldr	r3, [r7, #8]
 800d654:	431a      	orrs	r2, r3
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f000 f910 	bl	800d880 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2201      	movs	r2, #1
 800d664:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2200      	movs	r2, #0
 800d66c:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	f003 0310 	and.w	r3, r3, #16
 800d674:	2b00      	cmp	r3, #0
 800d676:	d104      	bne.n	800d682 <HAL_SD_IRQHandler+0x172>
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	f003 0320 	and.w	r3, r3, #32
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d002      	beq.n	800d688 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f006 fdfc 	bl	8014280 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	f003 0301 	and.w	r3, r3, #1
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d105      	bne.n	800d69e <HAL_SD_IRQHandler+0x18e>
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	f003 0302 	and.w	r3, r3, #2
 800d698:	2b00      	cmp	r3, #0
 800d69a:	f000 80eb 	beq.w	800d874 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f006 fdf8 	bl	8014294 <HAL_SD_RxCpltCallback>
}
 800d6a4:	e0e6      	b.n	800d874 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d00d      	beq.n	800d6d0 <HAL_SD_IRQHandler+0x1c0>
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	f003 0308 	and.w	r3, r3, #8
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d008      	beq.n	800d6d0 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f001 f8a8 	bl	800e814 <SD_Write_IT>
 800d6c4:	e0d6      	b.n	800d874 <HAL_SD_IRQHandler+0x364>
 800d6c6:	bf00      	nop
 800d6c8:	ffff3ec5 	.word	0xffff3ec5
 800d6cc:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6d6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	f000 809d 	beq.w	800d81a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6e6:	f003 0302 	and.w	r3, r3, #2
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d005      	beq.n	800d6fa <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6f2:	f043 0202 	orr.w	r2, r3, #2
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d700:	f003 0308 	and.w	r3, r3, #8
 800d704:	2b00      	cmp	r3, #0
 800d706:	d005      	beq.n	800d714 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d70c:	f043 0208 	orr.w	r2, r3, #8
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d71a:	f003 0320 	and.w	r3, r3, #32
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d005      	beq.n	800d72e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d726:	f043 0220 	orr.w	r2, r3, #32
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d734:	f003 0310 	and.w	r3, r3, #16
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d005      	beq.n	800d748 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d740:	f043 0210 	orr.w	r2, r3, #16
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	4a4b      	ldr	r2, [pc, #300]	; (800d87c <HAL_SD_IRQHandler+0x36c>)
 800d74e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d75e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	68da      	ldr	r2, [r3, #12]
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d76e:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d77e:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	68da      	ldr	r2, [r3, #12]
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d78e:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	4618      	mov	r0, r3
 800d796:	f004 fd57 	bl	8012248 <SDMMC_CmdStopTransfer>
 800d79a:	4602      	mov	r2, r0
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7a0:	431a      	orrs	r2, r3
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	68da      	ldr	r2, [r3, #12]
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d7b4:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d7be:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	f003 0308 	and.w	r3, r3, #8
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d00a      	beq.n	800d7e0 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2201      	movs	r2, #1
 800d7ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f000 f851 	bl	800d880 <HAL_SD_ErrorCallback>
}
 800d7de:	e049      	b.n	800d874 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d044      	beq.n	800d874 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d040      	beq.n	800d874 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d800:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	2200      	movs	r2, #0
 800d808:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2201      	movs	r2, #1
 800d80e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f000 f834 	bl	800d880 <HAL_SD_ErrorCallback>
}
 800d818:	e02c      	b.n	800d874 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d824:	2b00      	cmp	r3, #0
 800d826:	d025      	beq.n	800d874 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d830:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d838:	f003 0304 	and.w	r3, r3, #4
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d10c      	bne.n	800d85a <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	f003 0320 	and.w	r3, r3, #32
 800d846:	2b00      	cmp	r3, #0
 800d848:	d003      	beq.n	800d852 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f001 f84a 	bl	800e8e4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800d850:	e010      	b.n	800d874 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	f001 f832 	bl	800e8bc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800d858:	e00c      	b.n	800d874 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	f003 0320 	and.w	r3, r3, #32
 800d860:	2b00      	cmp	r3, #0
 800d862:	d003      	beq.n	800d86c <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f001 f833 	bl	800e8d0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800d86a:	e003      	b.n	800d874 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800d86c:	6878      	ldr	r0, [r7, #4]
 800d86e:	f001 f81b 	bl	800e8a8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800d872:	e7ff      	b.n	800d874 <HAL_SD_IRQHandler+0x364>
 800d874:	bf00      	nop
 800d876:	3710      	adds	r7, #16
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}
 800d87c:	18000f3a 	.word	0x18000f3a

0800d880 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d880:	b480      	push	{r7}
 800d882:	b083      	sub	sp, #12
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d888:	bf00      	nop
 800d88a:	370c      	adds	r7, #12
 800d88c:	46bd      	mov	sp, r7
 800d88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d892:	4770      	bx	lr

0800d894 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d894:	b480      	push	{r7}
 800d896:	b083      	sub	sp, #12
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
 800d89c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8a2:	0f9b      	lsrs	r3, r3, #30
 800d8a4:	b2da      	uxtb	r2, r3
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8ae:	0e9b      	lsrs	r3, r3, #26
 800d8b0:	b2db      	uxtb	r3, r3
 800d8b2:	f003 030f 	and.w	r3, r3, #15
 800d8b6:	b2da      	uxtb	r2, r3
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8c0:	0e1b      	lsrs	r3, r3, #24
 800d8c2:	b2db      	uxtb	r3, r3
 800d8c4:	f003 0303 	and.w	r3, r3, #3
 800d8c8:	b2da      	uxtb	r2, r3
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8d2:	0c1b      	lsrs	r3, r3, #16
 800d8d4:	b2da      	uxtb	r2, r3
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8de:	0a1b      	lsrs	r3, r3, #8
 800d8e0:	b2da      	uxtb	r2, r3
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8ea:	b2da      	uxtb	r2, r3
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8f4:	0d1b      	lsrs	r3, r3, #20
 800d8f6:	b29a      	uxth	r2, r3
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d900:	0c1b      	lsrs	r3, r3, #16
 800d902:	b2db      	uxtb	r3, r3
 800d904:	f003 030f 	and.w	r3, r3, #15
 800d908:	b2da      	uxtb	r2, r3
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d912:	0bdb      	lsrs	r3, r3, #15
 800d914:	b2db      	uxtb	r3, r3
 800d916:	f003 0301 	and.w	r3, r3, #1
 800d91a:	b2da      	uxtb	r2, r3
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d924:	0b9b      	lsrs	r3, r3, #14
 800d926:	b2db      	uxtb	r3, r3
 800d928:	f003 0301 	and.w	r3, r3, #1
 800d92c:	b2da      	uxtb	r2, r3
 800d92e:	683b      	ldr	r3, [r7, #0]
 800d930:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d936:	0b5b      	lsrs	r3, r3, #13
 800d938:	b2db      	uxtb	r3, r3
 800d93a:	f003 0301 	and.w	r3, r3, #1
 800d93e:	b2da      	uxtb	r2, r3
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d948:	0b1b      	lsrs	r3, r3, #12
 800d94a:	b2db      	uxtb	r3, r3
 800d94c:	f003 0301 	and.w	r3, r3, #1
 800d950:	b2da      	uxtb	r2, r3
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	2200      	movs	r2, #0
 800d95a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d960:	2b00      	cmp	r3, #0
 800d962:	d163      	bne.n	800da2c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d968:	009a      	lsls	r2, r3, #2
 800d96a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d96e:	4013      	ands	r3, r2
 800d970:	687a      	ldr	r2, [r7, #4]
 800d972:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800d974:	0f92      	lsrs	r2, r2, #30
 800d976:	431a      	orrs	r2, r3
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d980:	0edb      	lsrs	r3, r3, #27
 800d982:	b2db      	uxtb	r3, r3
 800d984:	f003 0307 	and.w	r3, r3, #7
 800d988:	b2da      	uxtb	r2, r3
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d992:	0e1b      	lsrs	r3, r3, #24
 800d994:	b2db      	uxtb	r3, r3
 800d996:	f003 0307 	and.w	r3, r3, #7
 800d99a:	b2da      	uxtb	r2, r3
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9a4:	0d5b      	lsrs	r3, r3, #21
 800d9a6:	b2db      	uxtb	r3, r3
 800d9a8:	f003 0307 	and.w	r3, r3, #7
 800d9ac:	b2da      	uxtb	r2, r3
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9b6:	0c9b      	lsrs	r3, r3, #18
 800d9b8:	b2db      	uxtb	r3, r3
 800d9ba:	f003 0307 	and.w	r3, r3, #7
 800d9be:	b2da      	uxtb	r2, r3
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9c8:	0bdb      	lsrs	r3, r3, #15
 800d9ca:	b2db      	uxtb	r3, r3
 800d9cc:	f003 0307 	and.w	r3, r3, #7
 800d9d0:	b2da      	uxtb	r2, r3
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d9d6:	683b      	ldr	r3, [r7, #0]
 800d9d8:	691b      	ldr	r3, [r3, #16]
 800d9da:	1c5a      	adds	r2, r3, #1
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	7e1b      	ldrb	r3, [r3, #24]
 800d9e4:	b2db      	uxtb	r3, r3
 800d9e6:	f003 0307 	and.w	r3, r3, #7
 800d9ea:	3302      	adds	r3, #2
 800d9ec:	2201      	movs	r2, #1
 800d9ee:	fa02 f303 	lsl.w	r3, r2, r3
 800d9f2:	687a      	ldr	r2, [r7, #4]
 800d9f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d9f6:	fb03 f202 	mul.w	r2, r3, r2
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	7a1b      	ldrb	r3, [r3, #8]
 800da02:	b2db      	uxtb	r3, r3
 800da04:	f003 030f 	and.w	r3, r3, #15
 800da08:	2201      	movs	r2, #1
 800da0a:	409a      	lsls	r2, r3
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da14:	687a      	ldr	r2, [r7, #4]
 800da16:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800da18:	0a52      	lsrs	r2, r2, #9
 800da1a:	fb03 f202 	mul.w	r2, r3, r2
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da28:	655a      	str	r2, [r3, #84]	; 0x54
 800da2a:	e031      	b.n	800da90 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da30:	2b01      	cmp	r3, #1
 800da32:	d11d      	bne.n	800da70 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800da38:	041b      	lsls	r3, r3, #16
 800da3a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da42:	0c1b      	lsrs	r3, r3, #16
 800da44:	431a      	orrs	r2, r3
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	691b      	ldr	r3, [r3, #16]
 800da4e:	3301      	adds	r3, #1
 800da50:	029a      	lsls	r2, r3, #10
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da64:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	655a      	str	r2, [r3, #84]	; 0x54
 800da6e:	e00f      	b.n	800da90 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	4a58      	ldr	r2, [pc, #352]	; (800dbd8 <HAL_SD_GetCardCSD+0x344>)
 800da76:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da7c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2201      	movs	r2, #1
 800da88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800da8c:	2301      	movs	r3, #1
 800da8e:	e09d      	b.n	800dbcc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da94:	0b9b      	lsrs	r3, r3, #14
 800da96:	b2db      	uxtb	r3, r3
 800da98:	f003 0301 	and.w	r3, r3, #1
 800da9c:	b2da      	uxtb	r2, r3
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800daa6:	09db      	lsrs	r3, r3, #7
 800daa8:	b2db      	uxtb	r3, r3
 800daaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800daae:	b2da      	uxtb	r2, r3
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dab8:	b2db      	uxtb	r3, r3
 800daba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dabe:	b2da      	uxtb	r2, r3
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dac8:	0fdb      	lsrs	r3, r3, #31
 800daca:	b2da      	uxtb	r2, r3
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dad4:	0f5b      	lsrs	r3, r3, #29
 800dad6:	b2db      	uxtb	r3, r3
 800dad8:	f003 0303 	and.w	r3, r3, #3
 800dadc:	b2da      	uxtb	r2, r3
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dae6:	0e9b      	lsrs	r3, r3, #26
 800dae8:	b2db      	uxtb	r3, r3
 800daea:	f003 0307 	and.w	r3, r3, #7
 800daee:	b2da      	uxtb	r2, r3
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800daf8:	0d9b      	lsrs	r3, r3, #22
 800dafa:	b2db      	uxtb	r3, r3
 800dafc:	f003 030f 	and.w	r3, r3, #15
 800db00:	b2da      	uxtb	r2, r3
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db0a:	0d5b      	lsrs	r3, r3, #21
 800db0c:	b2db      	uxtb	r3, r3
 800db0e:	f003 0301 	and.w	r3, r3, #1
 800db12:	b2da      	uxtb	r2, r3
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	2200      	movs	r2, #0
 800db1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db26:	0c1b      	lsrs	r3, r3, #16
 800db28:	b2db      	uxtb	r3, r3
 800db2a:	f003 0301 	and.w	r3, r3, #1
 800db2e:	b2da      	uxtb	r2, r3
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db3a:	0bdb      	lsrs	r3, r3, #15
 800db3c:	b2db      	uxtb	r3, r3
 800db3e:	f003 0301 	and.w	r3, r3, #1
 800db42:	b2da      	uxtb	r2, r3
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db4e:	0b9b      	lsrs	r3, r3, #14
 800db50:	b2db      	uxtb	r3, r3
 800db52:	f003 0301 	and.w	r3, r3, #1
 800db56:	b2da      	uxtb	r2, r3
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db62:	0b5b      	lsrs	r3, r3, #13
 800db64:	b2db      	uxtb	r3, r3
 800db66:	f003 0301 	and.w	r3, r3, #1
 800db6a:	b2da      	uxtb	r2, r3
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db76:	0b1b      	lsrs	r3, r3, #12
 800db78:	b2db      	uxtb	r3, r3
 800db7a:	f003 0301 	and.w	r3, r3, #1
 800db7e:	b2da      	uxtb	r2, r3
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db8a:	0a9b      	lsrs	r3, r3, #10
 800db8c:	b2db      	uxtb	r3, r3
 800db8e:	f003 0303 	and.w	r3, r3, #3
 800db92:	b2da      	uxtb	r2, r3
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db9e:	0a1b      	lsrs	r3, r3, #8
 800dba0:	b2db      	uxtb	r3, r3
 800dba2:	f003 0303 	and.w	r3, r3, #3
 800dba6:	b2da      	uxtb	r2, r3
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dbb2:	085b      	lsrs	r3, r3, #1
 800dbb4:	b2db      	uxtb	r3, r3
 800dbb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbba:	b2da      	uxtb	r2, r3
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	2201      	movs	r2, #1
 800dbc6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800dbca:	2300      	movs	r3, #0
}
 800dbcc:	4618      	mov	r0, r3
 800dbce:	370c      	adds	r7, #12
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd6:	4770      	bx	lr
 800dbd8:	1fe00fff 	.word	0x1fe00fff

0800dbdc <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b094      	sub	sp, #80	; 0x50
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
 800dbe4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dbf2:	b2db      	uxtb	r3, r3
 800dbf4:	2b03      	cmp	r3, #3
 800dbf6:	d101      	bne.n	800dbfc <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	e0a7      	b.n	800dd4c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800dbfc:	f107 0308 	add.w	r3, r7, #8
 800dc00:	4619      	mov	r1, r3
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f000 fb62 	bl	800e2cc <SD_SendSDStatus>
 800dc08:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800dc0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d011      	beq.n	800dc34 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	4a4f      	ldr	r2, [pc, #316]	; (800dd54 <HAL_SD_GetCardStatus+0x178>)
 800dc16:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc1e:	431a      	orrs	r2, r3
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2201      	movs	r2, #1
 800dc28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800dc2c:	2301      	movs	r3, #1
 800dc2e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800dc32:	e070      	b.n	800dd16 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	099b      	lsrs	r3, r3, #6
 800dc38:	b2db      	uxtb	r3, r3
 800dc3a:	f003 0303 	and.w	r3, r3, #3
 800dc3e:	b2da      	uxtb	r2, r3
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	095b      	lsrs	r3, r3, #5
 800dc48:	b2db      	uxtb	r3, r3
 800dc4a:	f003 0301 	and.w	r3, r3, #1
 800dc4e:	b2da      	uxtb	r2, r3
 800dc50:	683b      	ldr	r3, [r7, #0]
 800dc52:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	0a1b      	lsrs	r3, r3, #8
 800dc58:	b29b      	uxth	r3, r3
 800dc5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dc5e:	b29a      	uxth	r2, r3
 800dc60:	68bb      	ldr	r3, [r7, #8]
 800dc62:	0e1b      	lsrs	r3, r3, #24
 800dc64:	b29b      	uxth	r3, r3
 800dc66:	4313      	orrs	r3, r2
 800dc68:	b29a      	uxth	r2, r3
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	061a      	lsls	r2, r3, #24
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	021b      	lsls	r3, r3, #8
 800dc76:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dc7a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	0a1b      	lsrs	r3, r3, #8
 800dc80:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dc84:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	0e1b      	lsrs	r3, r3, #24
 800dc8a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800dc90:	693b      	ldr	r3, [r7, #16]
 800dc92:	b2da      	uxtb	r2, r3
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800dc98:	693b      	ldr	r3, [r7, #16]
 800dc9a:	0a1b      	lsrs	r3, r3, #8
 800dc9c:	b2da      	uxtb	r2, r3
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800dca2:	693b      	ldr	r3, [r7, #16]
 800dca4:	0d1b      	lsrs	r3, r3, #20
 800dca6:	b2db      	uxtb	r3, r3
 800dca8:	f003 030f 	and.w	r3, r3, #15
 800dcac:	b2da      	uxtb	r2, r3
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800dcb2:	693b      	ldr	r3, [r7, #16]
 800dcb4:	0c1b      	lsrs	r3, r3, #16
 800dcb6:	b29b      	uxth	r3, r3
 800dcb8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dcbc:	b29a      	uxth	r2, r3
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	b29b      	uxth	r3, r3
 800dcc2:	b2db      	uxtb	r3, r3
 800dcc4:	b29b      	uxth	r3, r3
 800dcc6:	4313      	orrs	r3, r2
 800dcc8:	b29a      	uxth	r2, r3
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	0a9b      	lsrs	r3, r3, #10
 800dcd2:	b2db      	uxtb	r3, r3
 800dcd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dcd8:	b2da      	uxtb	r2, r3
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800dcde:	697b      	ldr	r3, [r7, #20]
 800dce0:	0a1b      	lsrs	r3, r3, #8
 800dce2:	b2db      	uxtb	r3, r3
 800dce4:	f003 0303 	and.w	r3, r3, #3
 800dce8:	b2da      	uxtb	r2, r3
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	091b      	lsrs	r3, r3, #4
 800dcf2:	b2db      	uxtb	r3, r3
 800dcf4:	f003 030f 	and.w	r3, r3, #15
 800dcf8:	b2da      	uxtb	r2, r3
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	b2db      	uxtb	r3, r3
 800dd02:	f003 030f 	and.w	r3, r3, #15
 800dd06:	b2da      	uxtb	r2, r3
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800dd0c:	69bb      	ldr	r3, [r7, #24]
 800dd0e:	0e1b      	lsrs	r3, r3, #24
 800dd10:	b2da      	uxtb	r2, r3
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f004 f9e2 	bl	80120e8 <SDMMC_CmdBlockLength>
 800dd24:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800dd26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d00d      	beq.n	800dd48 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	4a08      	ldr	r2, [pc, #32]	; (800dd54 <HAL_SD_GetCardStatus+0x178>)
 800dd32:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd38:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2201      	movs	r2, #1
 800dd3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800dd42:	2301      	movs	r3, #1
 800dd44:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800dd48:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	3750      	adds	r7, #80	; 0x50
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd80      	pop	{r7, pc}
 800dd54:	1fe00fff 	.word	0x1fe00fff

0800dd58 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800dd58:	b480      	push	{r7}
 800dd5a:	b083      	sub	sp, #12
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
 800dd60:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dd76:	683b      	ldr	r3, [r7, #0]
 800dd78:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800dda2:	2300      	movs	r3, #0
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	370c      	adds	r7, #12
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddae:	4770      	bx	lr

0800ddb0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ddb0:	b590      	push	{r4, r7, lr}
 800ddb2:	b08d      	sub	sp, #52	; 0x34
 800ddb4:	af02      	add	r7, sp, #8
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800ddba:	2300      	movs	r3, #0
 800ddbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2203      	movs	r2, #3
 800ddc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddcc:	2b03      	cmp	r3, #3
 800ddce:	d02e      	beq.n	800de2e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ddd6:	d106      	bne.n	800dde6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dddc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	635a      	str	r2, [r3, #52]	; 0x34
 800dde4:	e029      	b.n	800de3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ddec:	d10a      	bne.n	800de04 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f000 fb64 	bl	800e4bc <SD_WideBus_Enable>
 800ddf4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ddfa:	6a3b      	ldr	r3, [r7, #32]
 800ddfc:	431a      	orrs	r2, r3
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	635a      	str	r2, [r3, #52]	; 0x34
 800de02:	e01a      	b.n	800de3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d10a      	bne.n	800de20 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f000 fba1 	bl	800e552 <SD_WideBus_Disable>
 800de10:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800de16:	6a3b      	ldr	r3, [r7, #32]
 800de18:	431a      	orrs	r2, r3
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	635a      	str	r2, [r3, #52]	; 0x34
 800de1e:	e00c      	b.n	800de3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de24:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	635a      	str	r2, [r3, #52]	; 0x34
 800de2c:	e005      	b.n	800de3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de32:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d007      	beq.n	800de52 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	4a5f      	ldr	r2, [pc, #380]	; (800dfc4 <HAL_SD_ConfigWideBusOperation+0x214>)
 800de48:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800de4a:	2301      	movs	r3, #1
 800de4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800de50:	e096      	b.n	800df80 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800de52:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800de56:	f04f 0100 	mov.w	r1, #0
 800de5a:	f7fd fea3 	bl	800bba4 <HAL_RCCEx_GetPeriphCLKFreq>
 800de5e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800de60:	69fb      	ldr	r3, [r7, #28]
 800de62:	2b00      	cmp	r3, #0
 800de64:	f000 8083 	beq.w	800df6e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	685b      	ldr	r3, [r3, #4]
 800de6c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	689b      	ldr	r3, [r3, #8]
 800de72:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	691b      	ldr	r3, [r3, #16]
 800de7c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	695a      	ldr	r2, [r3, #20]
 800de82:	69fb      	ldr	r3, [r7, #28]
 800de84:	4950      	ldr	r1, [pc, #320]	; (800dfc8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800de86:	fba1 1303 	umull	r1, r3, r1, r3
 800de8a:	0e1b      	lsrs	r3, r3, #24
 800de8c:	429a      	cmp	r2, r3
 800de8e:	d303      	bcc.n	800de98 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	695b      	ldr	r3, [r3, #20]
 800de94:	61bb      	str	r3, [r7, #24]
 800de96:	e05a      	b.n	800df4e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dea0:	d103      	bne.n	800deaa <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	695b      	ldr	r3, [r3, #20]
 800dea6:	61bb      	str	r3, [r7, #24]
 800dea8:	e051      	b.n	800df4e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800deae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800deb2:	d126      	bne.n	800df02 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	695b      	ldr	r3, [r3, #20]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d10e      	bne.n	800deda <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800debc:	69fb      	ldr	r3, [r7, #28]
 800debe:	4a43      	ldr	r2, [pc, #268]	; (800dfcc <HAL_SD_ConfigWideBusOperation+0x21c>)
 800dec0:	4293      	cmp	r3, r2
 800dec2:	d906      	bls.n	800ded2 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800dec4:	69fb      	ldr	r3, [r7, #28]
 800dec6:	4a40      	ldr	r2, [pc, #256]	; (800dfc8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800dec8:	fba2 2303 	umull	r2, r3, r2, r3
 800decc:	0e5b      	lsrs	r3, r3, #25
 800dece:	61bb      	str	r3, [r7, #24]
 800ded0:	e03d      	b.n	800df4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	695b      	ldr	r3, [r3, #20]
 800ded6:	61bb      	str	r3, [r7, #24]
 800ded8:	e039      	b.n	800df4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	695b      	ldr	r3, [r3, #20]
 800dede:	005b      	lsls	r3, r3, #1
 800dee0:	69fa      	ldr	r2, [r7, #28]
 800dee2:	fbb2 f3f3 	udiv	r3, r2, r3
 800dee6:	4a39      	ldr	r2, [pc, #228]	; (800dfcc <HAL_SD_ConfigWideBusOperation+0x21c>)
 800dee8:	4293      	cmp	r3, r2
 800deea:	d906      	bls.n	800defa <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800deec:	69fb      	ldr	r3, [r7, #28]
 800deee:	4a36      	ldr	r2, [pc, #216]	; (800dfc8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800def0:	fba2 2303 	umull	r2, r3, r2, r3
 800def4:	0e5b      	lsrs	r3, r3, #25
 800def6:	61bb      	str	r3, [r7, #24]
 800def8:	e029      	b.n	800df4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	695b      	ldr	r3, [r3, #20]
 800defe:	61bb      	str	r3, [r7, #24]
 800df00:	e025      	b.n	800df4e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	695b      	ldr	r3, [r3, #20]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d10e      	bne.n	800df28 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800df0a:	69fb      	ldr	r3, [r7, #28]
 800df0c:	4a30      	ldr	r2, [pc, #192]	; (800dfd0 <HAL_SD_ConfigWideBusOperation+0x220>)
 800df0e:	4293      	cmp	r3, r2
 800df10:	d906      	bls.n	800df20 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800df12:	69fb      	ldr	r3, [r7, #28]
 800df14:	4a2c      	ldr	r2, [pc, #176]	; (800dfc8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800df16:	fba2 2303 	umull	r2, r3, r2, r3
 800df1a:	0e1b      	lsrs	r3, r3, #24
 800df1c:	61bb      	str	r3, [r7, #24]
 800df1e:	e016      	b.n	800df4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	695b      	ldr	r3, [r3, #20]
 800df24:	61bb      	str	r3, [r7, #24]
 800df26:	e012      	b.n	800df4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	695b      	ldr	r3, [r3, #20]
 800df2c:	005b      	lsls	r3, r3, #1
 800df2e:	69fa      	ldr	r2, [r7, #28]
 800df30:	fbb2 f3f3 	udiv	r3, r2, r3
 800df34:	4a26      	ldr	r2, [pc, #152]	; (800dfd0 <HAL_SD_ConfigWideBusOperation+0x220>)
 800df36:	4293      	cmp	r3, r2
 800df38:	d906      	bls.n	800df48 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800df3a:	69fb      	ldr	r3, [r7, #28]
 800df3c:	4a22      	ldr	r2, [pc, #136]	; (800dfc8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800df3e:	fba2 2303 	umull	r2, r3, r2, r3
 800df42:	0e1b      	lsrs	r3, r3, #24
 800df44:	61bb      	str	r3, [r7, #24]
 800df46:	e002      	b.n	800df4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	695b      	ldr	r3, [r3, #20]
 800df4c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681c      	ldr	r4, [r3, #0]
 800df52:	466a      	mov	r2, sp
 800df54:	f107 0314 	add.w	r3, r7, #20
 800df58:	e893 0003 	ldmia.w	r3, {r0, r1}
 800df5c:	e882 0003 	stmia.w	r2, {r0, r1}
 800df60:	f107 0308 	add.w	r3, r7, #8
 800df64:	cb0e      	ldmia	r3, {r1, r2, r3}
 800df66:	4620      	mov	r0, r4
 800df68:	f003 ffe0 	bl	8011f2c <SDMMC_Init>
 800df6c:	e008      	b.n	800df80 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df72:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800df7a:	2301      	movs	r3, #1
 800df7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	f44f 7100 	mov.w	r1, #512	; 0x200
 800df88:	4618      	mov	r0, r3
 800df8a:	f004 f8ad 	bl	80120e8 <SDMMC_CmdBlockLength>
 800df8e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800df90:	6a3b      	ldr	r3, [r7, #32]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d00c      	beq.n	800dfb0 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	4a0a      	ldr	r2, [pc, #40]	; (800dfc4 <HAL_SD_ConfigWideBusOperation+0x214>)
 800df9c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dfa2:	6a3b      	ldr	r3, [r7, #32]
 800dfa4:	431a      	orrs	r2, r3
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800dfaa:	2301      	movs	r3, #1
 800dfac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2201      	movs	r2, #1
 800dfb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800dfb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	372c      	adds	r7, #44	; 0x2c
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd90      	pop	{r4, r7, pc}
 800dfc4:	1fe00fff 	.word	0x1fe00fff
 800dfc8:	55e63b89 	.word	0x55e63b89
 800dfcc:	02faf080 	.word	0x02faf080
 800dfd0:	017d7840 	.word	0x017d7840

0800dfd4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b086      	sub	sp, #24
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800dfdc:	2300      	movs	r3, #0
 800dfde:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800dfe0:	f107 030c 	add.w	r3, r7, #12
 800dfe4:	4619      	mov	r1, r3
 800dfe6:	6878      	ldr	r0, [r7, #4]
 800dfe8:	f000 fa40 	bl	800e46c <SD_SendStatus>
 800dfec:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dfee:	697b      	ldr	r3, [r7, #20]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d005      	beq.n	800e000 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dff8:	697b      	ldr	r3, [r7, #20]
 800dffa:	431a      	orrs	r2, r3
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	0a5b      	lsrs	r3, r3, #9
 800e004:	f003 030f 	and.w	r3, r3, #15
 800e008:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e00a:	693b      	ldr	r3, [r7, #16]
}
 800e00c:	4618      	mov	r0, r3
 800e00e:	3718      	adds	r7, #24
 800e010:	46bd      	mov	sp, r7
 800e012:	bd80      	pop	{r7, pc}

0800e014 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b090      	sub	sp, #64	; 0x40
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800e01c:	2300      	movs	r3, #0
 800e01e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800e020:	f7f5 fd34 	bl	8003a8c <HAL_GetTick>
 800e024:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	4618      	mov	r0, r3
 800e02c:	f003 ffd7 	bl	8011fde <SDMMC_GetPowerState>
 800e030:	4603      	mov	r3, r0
 800e032:	2b00      	cmp	r3, #0
 800e034:	d102      	bne.n	800e03c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e036:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e03a:	e0b5      	b.n	800e1a8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e040:	2b03      	cmp	r3, #3
 800e042:	d02e      	beq.n	800e0a2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	4618      	mov	r0, r3
 800e04a:	f004 fa22 	bl	8012492 <SDMMC_CmdSendCID>
 800e04e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e052:	2b00      	cmp	r3, #0
 800e054:	d001      	beq.n	800e05a <SD_InitCard+0x46>
    {
      return errorstate;
 800e056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e058:	e0a6      	b.n	800e1a8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	2100      	movs	r1, #0
 800e060:	4618      	mov	r0, r3
 800e062:	f004 f802 	bl	801206a <SDMMC_GetResponse>
 800e066:	4602      	mov	r2, r0
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	2104      	movs	r1, #4
 800e072:	4618      	mov	r0, r3
 800e074:	f003 fff9 	bl	801206a <SDMMC_GetResponse>
 800e078:	4602      	mov	r2, r0
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	2108      	movs	r1, #8
 800e084:	4618      	mov	r0, r3
 800e086:	f003 fff0 	bl	801206a <SDMMC_GetResponse>
 800e08a:	4602      	mov	r2, r0
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	210c      	movs	r1, #12
 800e096:	4618      	mov	r0, r3
 800e098:	f003 ffe7 	bl	801206a <SDMMC_GetResponse>
 800e09c:	4602      	mov	r2, r0
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0a6:	2b03      	cmp	r3, #3
 800e0a8:	d01d      	beq.n	800e0e6 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800e0aa:	e019      	b.n	800e0e0 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	f107 020a 	add.w	r2, r7, #10
 800e0b4:	4611      	mov	r1, r2
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f004 fa2a 	bl	8012510 <SDMMC_CmdSetRelAdd>
 800e0bc:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800e0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d001      	beq.n	800e0c8 <SD_InitCard+0xb4>
      {
        return errorstate;
 800e0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0c6:	e06f      	b.n	800e1a8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800e0c8:	f7f5 fce0 	bl	8003a8c <HAL_GetTick>
 800e0cc:	4602      	mov	r2, r0
 800e0ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0d0:	1ad3      	subs	r3, r2, r3
 800e0d2:	f241 3287 	movw	r2, #4999	; 0x1387
 800e0d6:	4293      	cmp	r3, r2
 800e0d8:	d902      	bls.n	800e0e0 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800e0da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e0de:	e063      	b.n	800e1a8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800e0e0:	897b      	ldrh	r3, [r7, #10]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d0e2      	beq.n	800e0ac <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0ea:	2b03      	cmp	r3, #3
 800e0ec:	d036      	beq.n	800e15c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e0ee:	897b      	ldrh	r3, [r7, #10]
 800e0f0:	461a      	mov	r2, r3
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681a      	ldr	r2, [r3, #0]
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0fe:	041b      	lsls	r3, r3, #16
 800e100:	4619      	mov	r1, r3
 800e102:	4610      	mov	r0, r2
 800e104:	f004 f9e4 	bl	80124d0 <SDMMC_CmdSendCSD>
 800e108:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d001      	beq.n	800e114 <SD_InitCard+0x100>
    {
      return errorstate;
 800e110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e112:	e049      	b.n	800e1a8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	2100      	movs	r1, #0
 800e11a:	4618      	mov	r0, r3
 800e11c:	f003 ffa5 	bl	801206a <SDMMC_GetResponse>
 800e120:	4602      	mov	r2, r0
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	2104      	movs	r1, #4
 800e12c:	4618      	mov	r0, r3
 800e12e:	f003 ff9c 	bl	801206a <SDMMC_GetResponse>
 800e132:	4602      	mov	r2, r0
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	2108      	movs	r1, #8
 800e13e:	4618      	mov	r0, r3
 800e140:	f003 ff93 	bl	801206a <SDMMC_GetResponse>
 800e144:	4602      	mov	r2, r0
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	210c      	movs	r1, #12
 800e150:	4618      	mov	r0, r3
 800e152:	f003 ff8a 	bl	801206a <SDMMC_GetResponse>
 800e156:	4602      	mov	r2, r0
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	2104      	movs	r1, #4
 800e162:	4618      	mov	r0, r3
 800e164:	f003 ff81 	bl	801206a <SDMMC_GetResponse>
 800e168:	4603      	mov	r3, r0
 800e16a:	0d1a      	lsrs	r2, r3, #20
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e170:	f107 030c 	add.w	r3, r7, #12
 800e174:	4619      	mov	r1, r3
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	f7ff fb8c 	bl	800d894 <HAL_SD_GetCardCSD>
 800e17c:	4603      	mov	r3, r0
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d002      	beq.n	800e188 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e182:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e186:	e00f      	b.n	800e1a8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681a      	ldr	r2, [r3, #0]
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e190:	041b      	lsls	r3, r3, #16
 800e192:	4619      	mov	r1, r3
 800e194:	4610      	mov	r0, r2
 800e196:	f004 f893 	bl	80122c0 <SDMMC_CmdSelDesel>
 800e19a:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800e19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d001      	beq.n	800e1a6 <SD_InitCard+0x192>
  {
    return errorstate;
 800e1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1a4:	e000      	b.n	800e1a8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e1a6:	2300      	movs	r3, #0
}
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	3740      	adds	r7, #64	; 0x40
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}

0800e1b0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b086      	sub	sp, #24
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800e1bc:	2300      	movs	r3, #0
 800e1be:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	f004 f89c 	bl	8012306 <SDMMC_CmdGoIdleState>
 800e1ce:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d001      	beq.n	800e1da <SD_PowerON+0x2a>
  {
    return errorstate;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	e072      	b.n	800e2c0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f004 f8af 	bl	8012342 <SDMMC_CmdOperCond>
 800e1e4:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e1ec:	d10d      	bne.n	800e20a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f004 f884 	bl	8012306 <SDMMC_CmdGoIdleState>
 800e1fe:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d004      	beq.n	800e210 <SD_PowerON+0x60>
    {
      return errorstate;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	e05a      	b.n	800e2c0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	2201      	movs	r2, #1
 800e20e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e214:	2b01      	cmp	r3, #1
 800e216:	d137      	bne.n	800e288 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	2100      	movs	r1, #0
 800e21e:	4618      	mov	r0, r3
 800e220:	f004 f8af 	bl	8012382 <SDMMC_CmdAppCommand>
 800e224:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d02d      	beq.n	800e288 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e22c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e230:	e046      	b.n	800e2c0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	2100      	movs	r1, #0
 800e238:	4618      	mov	r0, r3
 800e23a:	f004 f8a2 	bl	8012382 <SDMMC_CmdAppCommand>
 800e23e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d001      	beq.n	800e24a <SD_PowerON+0x9a>
    {
      return errorstate;
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	e03a      	b.n	800e2c0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	491e      	ldr	r1, [pc, #120]	; (800e2c8 <SD_PowerON+0x118>)
 800e250:	4618      	mov	r0, r3
 800e252:	f004 f8b9 	bl	80123c8 <SDMMC_CmdAppOperCommand>
 800e256:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d002      	beq.n	800e264 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e25e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e262:	e02d      	b.n	800e2c0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	2100      	movs	r1, #0
 800e26a:	4618      	mov	r0, r3
 800e26c:	f003 fefd 	bl	801206a <SDMMC_GetResponse>
 800e270:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e272:	697b      	ldr	r3, [r7, #20]
 800e274:	0fdb      	lsrs	r3, r3, #31
 800e276:	2b01      	cmp	r3, #1
 800e278:	d101      	bne.n	800e27e <SD_PowerON+0xce>
 800e27a:	2301      	movs	r3, #1
 800e27c:	e000      	b.n	800e280 <SD_PowerON+0xd0>
 800e27e:	2300      	movs	r3, #0
 800e280:	613b      	str	r3, [r7, #16]

    count++;
 800e282:	68bb      	ldr	r3, [r7, #8]
 800e284:	3301      	adds	r3, #1
 800e286:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e288:	68bb      	ldr	r3, [r7, #8]
 800e28a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e28e:	4293      	cmp	r3, r2
 800e290:	d802      	bhi.n	800e298 <SD_PowerON+0xe8>
 800e292:	693b      	ldr	r3, [r7, #16]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d0cc      	beq.n	800e232 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e29e:	4293      	cmp	r3, r2
 800e2a0:	d902      	bls.n	800e2a8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e2a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e2a6:	e00b      	b.n	800e2c0 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800e2ae:	697b      	ldr	r3, [r7, #20]
 800e2b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d002      	beq.n	800e2be <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2201      	movs	r2, #1
 800e2bc:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e2be:	2300      	movs	r3, #0
}
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	3718      	adds	r7, #24
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	bd80      	pop	{r7, pc}
 800e2c8:	c1100000 	.word	0xc1100000

0800e2cc <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b08c      	sub	sp, #48	; 0x30
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
 800e2d4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e2d6:	f7f5 fbd9 	bl	8003a8c <HAL_GetTick>
 800e2da:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	2100      	movs	r1, #0
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f003 febf 	bl	801206a <SDMMC_GetResponse>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e2f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e2f6:	d102      	bne.n	800e2fe <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e2f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e2fc:	e0b0      	b.n	800e460 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	2140      	movs	r1, #64	; 0x40
 800e304:	4618      	mov	r0, r3
 800e306:	f003 feef 	bl	80120e8 <SDMMC_CmdBlockLength>
 800e30a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e30c:	6a3b      	ldr	r3, [r7, #32]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d005      	beq.n	800e31e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e31a:	6a3b      	ldr	r3, [r7, #32]
 800e31c:	e0a0      	b.n	800e460 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681a      	ldr	r2, [r3, #0]
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e326:	041b      	lsls	r3, r3, #16
 800e328:	4619      	mov	r1, r3
 800e32a:	4610      	mov	r0, r2
 800e32c:	f004 f829 	bl	8012382 <SDMMC_CmdAppCommand>
 800e330:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e332:	6a3b      	ldr	r3, [r7, #32]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d005      	beq.n	800e344 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e340:	6a3b      	ldr	r3, [r7, #32]
 800e342:	e08d      	b.n	800e460 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e344:	f04f 33ff 	mov.w	r3, #4294967295
 800e348:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e34a:	2340      	movs	r3, #64	; 0x40
 800e34c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e34e:	2360      	movs	r3, #96	; 0x60
 800e350:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e352:	2302      	movs	r3, #2
 800e354:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e356:	2300      	movs	r3, #0
 800e358:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e35a:	2301      	movs	r3, #1
 800e35c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	f107 0208 	add.w	r2, r7, #8
 800e366:	4611      	mov	r1, r2
 800e368:	4618      	mov	r0, r3
 800e36a:	f003 fe91 	bl	8012090 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	4618      	mov	r0, r3
 800e374:	f004 f911 	bl	801259a <SDMMC_CmdStatusRegister>
 800e378:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e37a:	6a3b      	ldr	r3, [r7, #32]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d02b      	beq.n	800e3d8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e388:	6a3b      	ldr	r3, [r7, #32]
 800e38a:	e069      	b.n	800e460 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e392:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e396:	2b00      	cmp	r3, #0
 800e398:	d013      	beq.n	800e3c2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800e39a:	2300      	movs	r3, #0
 800e39c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e39e:	e00d      	b.n	800e3bc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f003 fdeb 	bl	8011f80 <SDMMC_ReadFIFO>
 800e3aa:	4602      	mov	r2, r0
 800e3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ae:	601a      	str	r2, [r3, #0]
        pData++;
 800e3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3b2:	3304      	adds	r3, #4
 800e3b4:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800e3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3b8:	3301      	adds	r3, #1
 800e3ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3be:	2b07      	cmp	r3, #7
 800e3c0:	d9ee      	bls.n	800e3a0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e3c2:	f7f5 fb63 	bl	8003a8c <HAL_GetTick>
 800e3c6:	4602      	mov	r2, r0
 800e3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ca:	1ad3      	subs	r3, r2, r3
 800e3cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3d0:	d102      	bne.n	800e3d8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e3d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e3d6:	e043      	b.n	800e460 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3de:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d0d2      	beq.n	800e38c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3ec:	f003 0308 	and.w	r3, r3, #8
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d001      	beq.n	800e3f8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e3f4:	2308      	movs	r3, #8
 800e3f6:	e033      	b.n	800e460 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3fe:	f003 0302 	and.w	r3, r3, #2
 800e402:	2b00      	cmp	r3, #0
 800e404:	d001      	beq.n	800e40a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e406:	2302      	movs	r3, #2
 800e408:	e02a      	b.n	800e460 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e410:	f003 0320 	and.w	r3, r3, #32
 800e414:	2b00      	cmp	r3, #0
 800e416:	d017      	beq.n	800e448 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e418:	2320      	movs	r3, #32
 800e41a:	e021      	b.n	800e460 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	4618      	mov	r0, r3
 800e422:	f003 fdad 	bl	8011f80 <SDMMC_ReadFIFO>
 800e426:	4602      	mov	r2, r0
 800e428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e42a:	601a      	str	r2, [r3, #0]
    pData++;
 800e42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e42e:	3304      	adds	r3, #4
 800e430:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e432:	f7f5 fb2b 	bl	8003a8c <HAL_GetTick>
 800e436:	4602      	mov	r2, r0
 800e438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e43a:	1ad3      	subs	r3, r2, r3
 800e43c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e440:	d102      	bne.n	800e448 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e442:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e446:	e00b      	b.n	800e460 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e44e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e452:	2b00      	cmp	r3, #0
 800e454:	d1e2      	bne.n	800e41c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	4a03      	ldr	r2, [pc, #12]	; (800e468 <SD_SendSDStatus+0x19c>)
 800e45c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e45e:	2300      	movs	r3, #0
}
 800e460:	4618      	mov	r0, r3
 800e462:	3730      	adds	r7, #48	; 0x30
 800e464:	46bd      	mov	sp, r7
 800e466:	bd80      	pop	{r7, pc}
 800e468:	18000f3a 	.word	0x18000f3a

0800e46c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b084      	sub	sp, #16
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
 800e474:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d102      	bne.n	800e482 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e47c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e480:	e018      	b.n	800e4b4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681a      	ldr	r2, [r3, #0]
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e48a:	041b      	lsls	r3, r3, #16
 800e48c:	4619      	mov	r1, r3
 800e48e:	4610      	mov	r0, r2
 800e490:	f004 f860 	bl	8012554 <SDMMC_CmdSendStatus>
 800e494:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d001      	beq.n	800e4a0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	e009      	b.n	800e4b4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	2100      	movs	r1, #0
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f003 fddf 	bl	801206a <SDMMC_GetResponse>
 800e4ac:	4602      	mov	r2, r0
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e4b2:	2300      	movs	r3, #0
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	3710      	adds	r7, #16
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd80      	pop	{r7, pc}

0800e4bc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b086      	sub	sp, #24
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	60fb      	str	r3, [r7, #12]
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	2100      	movs	r1, #0
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	f003 fdc9 	bl	801206a <SDMMC_GetResponse>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e4de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e4e2:	d102      	bne.n	800e4ea <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e4e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e4e8:	e02f      	b.n	800e54a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e4ea:	f107 030c 	add.w	r3, r7, #12
 800e4ee:	4619      	mov	r1, r3
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	f000 f879 	bl	800e5e8 <SD_FindSCR>
 800e4f6:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e4f8:	697b      	ldr	r3, [r7, #20]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d001      	beq.n	800e502 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e4fe:	697b      	ldr	r3, [r7, #20]
 800e500:	e023      	b.n	800e54a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e502:	693b      	ldr	r3, [r7, #16]
 800e504:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d01c      	beq.n	800e546 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681a      	ldr	r2, [r3, #0]
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e514:	041b      	lsls	r3, r3, #16
 800e516:	4619      	mov	r1, r3
 800e518:	4610      	mov	r0, r2
 800e51a:	f003 ff32 	bl	8012382 <SDMMC_CmdAppCommand>
 800e51e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e520:	697b      	ldr	r3, [r7, #20]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d001      	beq.n	800e52a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e526:	697b      	ldr	r3, [r7, #20]
 800e528:	e00f      	b.n	800e54a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	2102      	movs	r1, #2
 800e530:	4618      	mov	r0, r3
 800e532:	f003 ff69 	bl	8012408 <SDMMC_CmdBusWidth>
 800e536:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e538:	697b      	ldr	r3, [r7, #20]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d001      	beq.n	800e542 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e53e:	697b      	ldr	r3, [r7, #20]
 800e540:	e003      	b.n	800e54a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e542:	2300      	movs	r3, #0
 800e544:	e001      	b.n	800e54a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e546:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e54a:	4618      	mov	r0, r3
 800e54c:	3718      	adds	r7, #24
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd80      	pop	{r7, pc}

0800e552 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e552:	b580      	push	{r7, lr}
 800e554:	b086      	sub	sp, #24
 800e556:	af00      	add	r7, sp, #0
 800e558:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e55a:	2300      	movs	r3, #0
 800e55c:	60fb      	str	r3, [r7, #12]
 800e55e:	2300      	movs	r3, #0
 800e560:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	2100      	movs	r1, #0
 800e568:	4618      	mov	r0, r3
 800e56a:	f003 fd7e 	bl	801206a <SDMMC_GetResponse>
 800e56e:	4603      	mov	r3, r0
 800e570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e574:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e578:	d102      	bne.n	800e580 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e57a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e57e:	e02f      	b.n	800e5e0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e580:	f107 030c 	add.w	r3, r7, #12
 800e584:	4619      	mov	r1, r3
 800e586:	6878      	ldr	r0, [r7, #4]
 800e588:	f000 f82e 	bl	800e5e8 <SD_FindSCR>
 800e58c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e58e:	697b      	ldr	r3, [r7, #20]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d001      	beq.n	800e598 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e594:	697b      	ldr	r3, [r7, #20]
 800e596:	e023      	b.n	800e5e0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e598:	693b      	ldr	r3, [r7, #16]
 800e59a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d01c      	beq.n	800e5dc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681a      	ldr	r2, [r3, #0]
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5aa:	041b      	lsls	r3, r3, #16
 800e5ac:	4619      	mov	r1, r3
 800e5ae:	4610      	mov	r0, r2
 800e5b0:	f003 fee7 	bl	8012382 <SDMMC_CmdAppCommand>
 800e5b4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e5b6:	697b      	ldr	r3, [r7, #20]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d001      	beq.n	800e5c0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e5bc:	697b      	ldr	r3, [r7, #20]
 800e5be:	e00f      	b.n	800e5e0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	2100      	movs	r1, #0
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	f003 ff1e 	bl	8012408 <SDMMC_CmdBusWidth>
 800e5cc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e5ce:	697b      	ldr	r3, [r7, #20]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d001      	beq.n	800e5d8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e5d4:	697b      	ldr	r3, [r7, #20]
 800e5d6:	e003      	b.n	800e5e0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e5d8:	2300      	movs	r3, #0
 800e5da:	e001      	b.n	800e5e0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e5dc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	3718      	adds	r7, #24
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd80      	pop	{r7, pc}

0800e5e8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b08e      	sub	sp, #56	; 0x38
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
 800e5f0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e5f2:	f7f5 fa4b 	bl	8003a8c <HAL_GetTick>
 800e5f6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	60bb      	str	r3, [r7, #8]
 800e600:	2300      	movs	r3, #0
 800e602:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	2108      	movs	r1, #8
 800e60e:	4618      	mov	r0, r3
 800e610:	f003 fd6a 	bl	80120e8 <SDMMC_CmdBlockLength>
 800e614:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d001      	beq.n	800e620 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e61e:	e0ad      	b.n	800e77c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681a      	ldr	r2, [r3, #0]
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e628:	041b      	lsls	r3, r3, #16
 800e62a:	4619      	mov	r1, r3
 800e62c:	4610      	mov	r0, r2
 800e62e:	f003 fea8 	bl	8012382 <SDMMC_CmdAppCommand>
 800e632:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e636:	2b00      	cmp	r3, #0
 800e638:	d001      	beq.n	800e63e <SD_FindSCR+0x56>
  {
    return errorstate;
 800e63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e63c:	e09e      	b.n	800e77c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e63e:	f04f 33ff 	mov.w	r3, #4294967295
 800e642:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e644:	2308      	movs	r3, #8
 800e646:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e648:	2330      	movs	r3, #48	; 0x30
 800e64a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e64c:	2302      	movs	r3, #2
 800e64e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e650:	2300      	movs	r3, #0
 800e652:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e654:	2301      	movs	r3, #1
 800e656:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	f107 0210 	add.w	r2, r7, #16
 800e660:	4611      	mov	r1, r2
 800e662:	4618      	mov	r0, r3
 800e664:	f003 fd14 	bl	8012090 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	4618      	mov	r0, r3
 800e66e:	f003 feee 	bl	801244e <SDMMC_CmdSendSCR>
 800e672:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e676:	2b00      	cmp	r3, #0
 800e678:	d027      	beq.n	800e6ca <SD_FindSCR+0xe2>
  {
    return errorstate;
 800e67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e67c:	e07e      	b.n	800e77c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e684:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d113      	bne.n	800e6b4 <SD_FindSCR+0xcc>
 800e68c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d110      	bne.n	800e6b4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	4618      	mov	r0, r3
 800e698:	f003 fc72 	bl	8011f80 <SDMMC_ReadFIFO>
 800e69c:	4603      	mov	r3, r0
 800e69e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	f003 fc6b 	bl	8011f80 <SDMMC_ReadFIFO>
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	60fb      	str	r3, [r7, #12]
      index++;
 800e6ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6b0:	3301      	adds	r3, #1
 800e6b2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e6b4:	f7f5 f9ea 	bl	8003a8c <HAL_GetTick>
 800e6b8:	4602      	mov	r2, r0
 800e6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6bc:	1ad3      	subs	r3, r2, r3
 800e6be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6c2:	d102      	bne.n	800e6ca <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e6c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e6c8:	e058      	b.n	800e77c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e6d0:	f240 532a 	movw	r3, #1322	; 0x52a
 800e6d4:	4013      	ands	r3, r2
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d0d1      	beq.n	800e67e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6e0:	f003 0308 	and.w	r3, r3, #8
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d005      	beq.n	800e6f4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	2208      	movs	r2, #8
 800e6ee:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e6f0:	2308      	movs	r3, #8
 800e6f2:	e043      	b.n	800e77c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6fa:	f003 0302 	and.w	r3, r3, #2
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d005      	beq.n	800e70e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	2202      	movs	r2, #2
 800e708:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e70a:	2302      	movs	r3, #2
 800e70c:	e036      	b.n	800e77c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e714:	f003 0320 	and.w	r3, r3, #32
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d005      	beq.n	800e728 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	2220      	movs	r2, #32
 800e722:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e724:	2320      	movs	r3, #32
 800e726:	e029      	b.n	800e77c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	4a15      	ldr	r2, [pc, #84]	; (800e784 <SD_FindSCR+0x19c>)
 800e72e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	061a      	lsls	r2, r3, #24
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	021b      	lsls	r3, r3, #8
 800e738:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e73c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	0a1b      	lsrs	r3, r3, #8
 800e742:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e746:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	0e1b      	lsrs	r3, r3, #24
 800e74c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e750:	601a      	str	r2, [r3, #0]
    scr++;
 800e752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e754:	3304      	adds	r3, #4
 800e756:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e758:	68bb      	ldr	r3, [r7, #8]
 800e75a:	061a      	lsls	r2, r3, #24
 800e75c:	68bb      	ldr	r3, [r7, #8]
 800e75e:	021b      	lsls	r3, r3, #8
 800e760:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e764:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e766:	68bb      	ldr	r3, [r7, #8]
 800e768:	0a1b      	lsrs	r3, r3, #8
 800e76a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e76e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	0e1b      	lsrs	r3, r3, #24
 800e774:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e778:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e77a:	2300      	movs	r3, #0
}
 800e77c:	4618      	mov	r0, r3
 800e77e:	3738      	adds	r7, #56	; 0x38
 800e780:	46bd      	mov	sp, r7
 800e782:	bd80      	pop	{r7, pc}
 800e784:	18000f3a 	.word	0x18000f3a

0800e788 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b086      	sub	sp, #24
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e794:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e79a:	2b1f      	cmp	r3, #31
 800e79c:	d936      	bls.n	800e80c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800e79e:	2300      	movs	r3, #0
 800e7a0:	617b      	str	r3, [r7, #20]
 800e7a2:	e027      	b.n	800e7f4 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f003 fbe9 	bl	8011f80 <SDMMC_ReadFIFO>
 800e7ae:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	b2da      	uxtb	r2, r3
 800e7b4:	693b      	ldr	r3, [r7, #16]
 800e7b6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e7b8:	693b      	ldr	r3, [r7, #16]
 800e7ba:	3301      	adds	r3, #1
 800e7bc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	0a1b      	lsrs	r3, r3, #8
 800e7c2:	b2da      	uxtb	r2, r3
 800e7c4:	693b      	ldr	r3, [r7, #16]
 800e7c6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e7c8:	693b      	ldr	r3, [r7, #16]
 800e7ca:	3301      	adds	r3, #1
 800e7cc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	0c1b      	lsrs	r3, r3, #16
 800e7d2:	b2da      	uxtb	r2, r3
 800e7d4:	693b      	ldr	r3, [r7, #16]
 800e7d6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e7d8:	693b      	ldr	r3, [r7, #16]
 800e7da:	3301      	adds	r3, #1
 800e7dc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	0e1b      	lsrs	r3, r3, #24
 800e7e2:	b2da      	uxtb	r2, r3
 800e7e4:	693b      	ldr	r3, [r7, #16]
 800e7e6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e7e8:	693b      	ldr	r3, [r7, #16]
 800e7ea:	3301      	adds	r3, #1
 800e7ec:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800e7ee:	697b      	ldr	r3, [r7, #20]
 800e7f0:	3301      	adds	r3, #1
 800e7f2:	617b      	str	r3, [r7, #20]
 800e7f4:	697b      	ldr	r3, [r7, #20]
 800e7f6:	2b07      	cmp	r3, #7
 800e7f8:	d9d4      	bls.n	800e7a4 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	693a      	ldr	r2, [r7, #16]
 800e7fe:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e804:	f1a3 0220 	sub.w	r2, r3, #32
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800e80c:	bf00      	nop
 800e80e:	3718      	adds	r7, #24
 800e810:	46bd      	mov	sp, r7
 800e812:	bd80      	pop	{r7, pc}

0800e814 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b086      	sub	sp, #24
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	69db      	ldr	r3, [r3, #28]
 800e820:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	6a1b      	ldr	r3, [r3, #32]
 800e826:	2b1f      	cmp	r3, #31
 800e828:	d93a      	bls.n	800e8a0 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800e82a:	2300      	movs	r3, #0
 800e82c:	617b      	str	r3, [r7, #20]
 800e82e:	e02b      	b.n	800e888 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800e830:	693b      	ldr	r3, [r7, #16]
 800e832:	781b      	ldrb	r3, [r3, #0]
 800e834:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e836:	693b      	ldr	r3, [r7, #16]
 800e838:	3301      	adds	r3, #1
 800e83a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e83c:	693b      	ldr	r3, [r7, #16]
 800e83e:	781b      	ldrb	r3, [r3, #0]
 800e840:	021a      	lsls	r2, r3, #8
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	4313      	orrs	r3, r2
 800e846:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e848:	693b      	ldr	r3, [r7, #16]
 800e84a:	3301      	adds	r3, #1
 800e84c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e84e:	693b      	ldr	r3, [r7, #16]
 800e850:	781b      	ldrb	r3, [r3, #0]
 800e852:	041a      	lsls	r2, r3, #16
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	4313      	orrs	r3, r2
 800e858:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e85a:	693b      	ldr	r3, [r7, #16]
 800e85c:	3301      	adds	r3, #1
 800e85e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e860:	693b      	ldr	r3, [r7, #16]
 800e862:	781b      	ldrb	r3, [r3, #0]
 800e864:	061a      	lsls	r2, r3, #24
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	4313      	orrs	r3, r2
 800e86a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e86c:	693b      	ldr	r3, [r7, #16]
 800e86e:	3301      	adds	r3, #1
 800e870:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	f107 020c 	add.w	r2, r7, #12
 800e87a:	4611      	mov	r1, r2
 800e87c:	4618      	mov	r0, r3
 800e87e:	f003 fb8c 	bl	8011f9a <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800e882:	697b      	ldr	r3, [r7, #20]
 800e884:	3301      	adds	r3, #1
 800e886:	617b      	str	r3, [r7, #20]
 800e888:	697b      	ldr	r3, [r7, #20]
 800e88a:	2b07      	cmp	r3, #7
 800e88c:	d9d0      	bls.n	800e830 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	693a      	ldr	r2, [r7, #16]
 800e892:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	6a1b      	ldr	r3, [r3, #32]
 800e898:	f1a3 0220 	sub.w	r2, r3, #32
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	621a      	str	r2, [r3, #32]
  }
}
 800e8a0:	bf00      	nop
 800e8a2:	3718      	adds	r7, #24
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}

0800e8a8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e8a8:	b480      	push	{r7}
 800e8aa:	b083      	sub	sp, #12
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e8b0:	bf00      	nop
 800e8b2:	370c      	adds	r7, #12
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ba:	4770      	bx	lr

0800e8bc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e8bc:	b480      	push	{r7}
 800e8be:	b083      	sub	sp, #12
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e8c4:	bf00      	nop
 800e8c6:	370c      	adds	r7, #12
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ce:	4770      	bx	lr

0800e8d0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e8d0:	b480      	push	{r7}
 800e8d2:	b083      	sub	sp, #12
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e8d8:	bf00      	nop
 800e8da:	370c      	adds	r7, #12
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e2:	4770      	bx	lr

0800e8e4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e8e4:	b480      	push	{r7}
 800e8e6:	b083      	sub	sp, #12
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e8ec:	bf00      	nop
 800e8ee:	370c      	adds	r7, #12
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f6:	4770      	bx	lr

0800e8f8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b084      	sub	sp, #16
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d101      	bne.n	800e90a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e906:	2301      	movs	r3, #1
 800e908:	e10f      	b.n	800eb2a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	2200      	movs	r2, #0
 800e90e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	4a87      	ldr	r2, [pc, #540]	; (800eb34 <HAL_SPI_Init+0x23c>)
 800e916:	4293      	cmp	r3, r2
 800e918:	d00f      	beq.n	800e93a <HAL_SPI_Init+0x42>
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	4a86      	ldr	r2, [pc, #536]	; (800eb38 <HAL_SPI_Init+0x240>)
 800e920:	4293      	cmp	r3, r2
 800e922:	d00a      	beq.n	800e93a <HAL_SPI_Init+0x42>
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	4a84      	ldr	r2, [pc, #528]	; (800eb3c <HAL_SPI_Init+0x244>)
 800e92a:	4293      	cmp	r3, r2
 800e92c:	d005      	beq.n	800e93a <HAL_SPI_Init+0x42>
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	68db      	ldr	r3, [r3, #12]
 800e932:	2b0f      	cmp	r3, #15
 800e934:	d901      	bls.n	800e93a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e936:	2301      	movs	r3, #1
 800e938:	e0f7      	b.n	800eb2a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	f000 fd5a 	bl	800f3f4 <SPI_GetPacketSize>
 800e940:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	4a7b      	ldr	r2, [pc, #492]	; (800eb34 <HAL_SPI_Init+0x23c>)
 800e948:	4293      	cmp	r3, r2
 800e94a:	d00c      	beq.n	800e966 <HAL_SPI_Init+0x6e>
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	4a79      	ldr	r2, [pc, #484]	; (800eb38 <HAL_SPI_Init+0x240>)
 800e952:	4293      	cmp	r3, r2
 800e954:	d007      	beq.n	800e966 <HAL_SPI_Init+0x6e>
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	4a78      	ldr	r2, [pc, #480]	; (800eb3c <HAL_SPI_Init+0x244>)
 800e95c:	4293      	cmp	r3, r2
 800e95e:	d002      	beq.n	800e966 <HAL_SPI_Init+0x6e>
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	2b08      	cmp	r3, #8
 800e964:	d811      	bhi.n	800e98a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e96a:	4a72      	ldr	r2, [pc, #456]	; (800eb34 <HAL_SPI_Init+0x23c>)
 800e96c:	4293      	cmp	r3, r2
 800e96e:	d009      	beq.n	800e984 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	4a70      	ldr	r2, [pc, #448]	; (800eb38 <HAL_SPI_Init+0x240>)
 800e976:	4293      	cmp	r3, r2
 800e978:	d004      	beq.n	800e984 <HAL_SPI_Init+0x8c>
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	4a6f      	ldr	r2, [pc, #444]	; (800eb3c <HAL_SPI_Init+0x244>)
 800e980:	4293      	cmp	r3, r2
 800e982:	d104      	bne.n	800e98e <HAL_SPI_Init+0x96>
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	2b10      	cmp	r3, #16
 800e988:	d901      	bls.n	800e98e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e98a:	2301      	movs	r3, #1
 800e98c:	e0cd      	b.n	800eb2a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e994:	b2db      	uxtb	r3, r3
 800e996:	2b00      	cmp	r3, #0
 800e998:	d106      	bne.n	800e9a8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	2200      	movs	r2, #0
 800e99e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f7f4 fa8a 	bl	8002ebc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2202      	movs	r2, #2
 800e9ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	681a      	ldr	r2, [r3, #0]
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	f022 0201 	bic.w	r2, r2, #1
 800e9be:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	689b      	ldr	r3, [r3, #8]
 800e9c6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e9ca:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	699b      	ldr	r3, [r3, #24]
 800e9d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e9d4:	d119      	bne.n	800ea0a <HAL_SPI_Init+0x112>
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	685b      	ldr	r3, [r3, #4]
 800e9da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e9de:	d103      	bne.n	800e9e8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d008      	beq.n	800e9fa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d10c      	bne.n	800ea0a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e9f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e9f8:	d107      	bne.n	800ea0a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	681a      	ldr	r2, [r3, #0]
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ea08:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	685b      	ldr	r3, [r3, #4]
 800ea0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d00f      	beq.n	800ea36 <HAL_SPI_Init+0x13e>
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	68db      	ldr	r3, [r3, #12]
 800ea1a:	2b06      	cmp	r3, #6
 800ea1c:	d90b      	bls.n	800ea36 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	430a      	orrs	r2, r1
 800ea32:	601a      	str	r2, [r3, #0]
 800ea34:	e007      	b.n	800ea46 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	681a      	ldr	r2, [r3, #0]
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ea44:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	69da      	ldr	r2, [r3, #28]
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea4e:	431a      	orrs	r2, r3
 800ea50:	68bb      	ldr	r3, [r7, #8]
 800ea52:	431a      	orrs	r2, r3
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea58:	ea42 0103 	orr.w	r1, r2, r3
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	68da      	ldr	r2, [r3, #12]
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	430a      	orrs	r2, r1
 800ea66:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea70:	431a      	orrs	r2, r3
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea76:	431a      	orrs	r2, r3
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	699b      	ldr	r3, [r3, #24]
 800ea7c:	431a      	orrs	r2, r3
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	691b      	ldr	r3, [r3, #16]
 800ea82:	431a      	orrs	r2, r3
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	695b      	ldr	r3, [r3, #20]
 800ea88:	431a      	orrs	r2, r3
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6a1b      	ldr	r3, [r3, #32]
 800ea8e:	431a      	orrs	r2, r3
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	685b      	ldr	r3, [r3, #4]
 800ea94:	431a      	orrs	r2, r3
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea9a:	431a      	orrs	r2, r3
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	689b      	ldr	r3, [r3, #8]
 800eaa0:	431a      	orrs	r2, r3
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eaa6:	ea42 0103 	orr.w	r1, r2, r3
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	430a      	orrs	r2, r1
 800eab4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	685b      	ldr	r3, [r3, #4]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d113      	bne.n	800eae6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	689b      	ldr	r3, [r3, #8]
 800eac4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ead0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	689b      	ldr	r3, [r3, #8]
 800ead8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800eae4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	f022 0201 	bic.w	r2, r2, #1
 800eaf4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	685b      	ldr	r3, [r3, #4]
 800eafa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d00a      	beq.n	800eb18 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	68db      	ldr	r3, [r3, #12]
 800eb08:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	430a      	orrs	r2, r1
 800eb16:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2201      	movs	r2, #1
 800eb24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800eb28:	2300      	movs	r3, #0
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	3710      	adds	r7, #16
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}
 800eb32:	bf00      	nop
 800eb34:	40013000 	.word	0x40013000
 800eb38:	40003800 	.word	0x40003800
 800eb3c:	40003c00 	.word	0x40003c00

0800eb40 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b08a      	sub	sp, #40	; 0x28
 800eb44:	af02      	add	r7, sp, #8
 800eb46:	60f8      	str	r0, [r7, #12]
 800eb48:	60b9      	str	r1, [r7, #8]
 800eb4a:	603b      	str	r3, [r7, #0]
 800eb4c:	4613      	mov	r3, r2
 800eb4e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	3320      	adds	r3, #32
 800eb56:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800eb58:	2300      	movs	r3, #0
 800eb5a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eb62:	2b01      	cmp	r3, #1
 800eb64:	d101      	bne.n	800eb6a <HAL_SPI_Transmit+0x2a>
 800eb66:	2302      	movs	r3, #2
 800eb68:	e1e1      	b.n	800ef2e <HAL_SPI_Transmit+0x3ee>
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	2201      	movs	r2, #1
 800eb6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800eb72:	f7f4 ff8b 	bl	8003a8c <HAL_GetTick>
 800eb76:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800eb7e:	b2db      	uxtb	r3, r3
 800eb80:	2b01      	cmp	r3, #1
 800eb82:	d007      	beq.n	800eb94 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800eb84:	2302      	movs	r3, #2
 800eb86:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800eb90:	7efb      	ldrb	r3, [r7, #27]
 800eb92:	e1cc      	b.n	800ef2e <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800eb94:	68bb      	ldr	r3, [r7, #8]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d002      	beq.n	800eba0 <HAL_SPI_Transmit+0x60>
 800eb9a:	88fb      	ldrh	r3, [r7, #6]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d107      	bne.n	800ebb0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800eba0:	2301      	movs	r3, #1
 800eba2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	2200      	movs	r2, #0
 800eba8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ebac:	7efb      	ldrb	r3, [r7, #27]
 800ebae:	e1be      	b.n	800ef2e <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	2203      	movs	r2, #3
 800ebb4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	2200      	movs	r2, #0
 800ebbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	68ba      	ldr	r2, [r7, #8]
 800ebc4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	88fa      	ldrh	r2, [r7, #6]
 800ebca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	88fa      	ldrh	r2, [r7, #6]
 800ebd2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	2200      	movs	r2, #0
 800ebda:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	2200      	movs	r2, #0
 800ebe0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	2200      	movs	r2, #0
 800ebf0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	689b      	ldr	r3, [r3, #8]
 800ebfc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ec00:	d108      	bne.n	800ec14 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	681a      	ldr	r2, [r3, #0]
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ec10:	601a      	str	r2, [r3, #0]
 800ec12:	e009      	b.n	800ec28 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	68db      	ldr	r3, [r3, #12]
 800ec1a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ec26:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	685a      	ldr	r2, [r3, #4]
 800ec2e:	4b96      	ldr	r3, [pc, #600]	; (800ee88 <HAL_SPI_Transmit+0x348>)
 800ec30:	4013      	ands	r3, r2
 800ec32:	88f9      	ldrh	r1, [r7, #6]
 800ec34:	68fa      	ldr	r2, [r7, #12]
 800ec36:	6812      	ldr	r2, [r2, #0]
 800ec38:	430b      	orrs	r3, r1
 800ec3a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	681a      	ldr	r2, [r3, #0]
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	f042 0201 	orr.w	r2, r2, #1
 800ec4a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	685b      	ldr	r3, [r3, #4]
 800ec50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ec54:	d107      	bne.n	800ec66 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	681a      	ldr	r2, [r3, #0]
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ec64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	68db      	ldr	r3, [r3, #12]
 800ec6a:	2b0f      	cmp	r3, #15
 800ec6c:	d947      	bls.n	800ecfe <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ec6e:	e03f      	b.n	800ecf0 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	695b      	ldr	r3, [r3, #20]
 800ec76:	f003 0302 	and.w	r3, r3, #2
 800ec7a:	2b02      	cmp	r3, #2
 800ec7c:	d114      	bne.n	800eca8 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	6812      	ldr	r2, [r2, #0]
 800ec88:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec8e:	1d1a      	adds	r2, r3, #4
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec9a:	b29b      	uxth	r3, r3
 800ec9c:	3b01      	subs	r3, #1
 800ec9e:	b29a      	uxth	r2, r3
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800eca6:	e023      	b.n	800ecf0 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eca8:	f7f4 fef0 	bl	8003a8c <HAL_GetTick>
 800ecac:	4602      	mov	r2, r0
 800ecae:	697b      	ldr	r3, [r7, #20]
 800ecb0:	1ad3      	subs	r3, r2, r3
 800ecb2:	683a      	ldr	r2, [r7, #0]
 800ecb4:	429a      	cmp	r2, r3
 800ecb6:	d803      	bhi.n	800ecc0 <HAL_SPI_Transmit+0x180>
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecbe:	d102      	bne.n	800ecc6 <HAL_SPI_Transmit+0x186>
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d114      	bne.n	800ecf0 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ecc6:	68f8      	ldr	r0, [r7, #12]
 800ecc8:	f000 fac6 	bl	800f258 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	2200      	movs	r2, #0
 800ecd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ecda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	2201      	movs	r2, #1
 800ece8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ecec:	2303      	movs	r3, #3
 800ecee:	e11e      	b.n	800ef2e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ecf6:	b29b      	uxth	r3, r3
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d1b9      	bne.n	800ec70 <HAL_SPI_Transmit+0x130>
 800ecfc:	e0f1      	b.n	800eee2 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	68db      	ldr	r3, [r3, #12]
 800ed02:	2b07      	cmp	r3, #7
 800ed04:	f240 80e6 	bls.w	800eed4 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ed08:	e05d      	b.n	800edc6 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	695b      	ldr	r3, [r3, #20]
 800ed10:	f003 0302 	and.w	r3, r3, #2
 800ed14:	2b02      	cmp	r3, #2
 800ed16:	d132      	bne.n	800ed7e <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed1e:	b29b      	uxth	r3, r3
 800ed20:	2b01      	cmp	r3, #1
 800ed22:	d918      	bls.n	800ed56 <HAL_SPI_Transmit+0x216>
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d014      	beq.n	800ed56 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	6812      	ldr	r2, [r2, #0]
 800ed36:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed3c:	1d1a      	adds	r2, r3, #4
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed48:	b29b      	uxth	r3, r3
 800ed4a:	3b02      	subs	r3, #2
 800ed4c:	b29a      	uxth	r2, r3
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ed54:	e037      	b.n	800edc6 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed5a:	881a      	ldrh	r2, [r3, #0]
 800ed5c:	69fb      	ldr	r3, [r7, #28]
 800ed5e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed64:	1c9a      	adds	r2, r3, #2
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed70:	b29b      	uxth	r3, r3
 800ed72:	3b01      	subs	r3, #1
 800ed74:	b29a      	uxth	r2, r3
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ed7c:	e023      	b.n	800edc6 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ed7e:	f7f4 fe85 	bl	8003a8c <HAL_GetTick>
 800ed82:	4602      	mov	r2, r0
 800ed84:	697b      	ldr	r3, [r7, #20]
 800ed86:	1ad3      	subs	r3, r2, r3
 800ed88:	683a      	ldr	r2, [r7, #0]
 800ed8a:	429a      	cmp	r2, r3
 800ed8c:	d803      	bhi.n	800ed96 <HAL_SPI_Transmit+0x256>
 800ed8e:	683b      	ldr	r3, [r7, #0]
 800ed90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed94:	d102      	bne.n	800ed9c <HAL_SPI_Transmit+0x25c>
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d114      	bne.n	800edc6 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ed9c:	68f8      	ldr	r0, [r7, #12]
 800ed9e:	f000 fa5b 	bl	800f258 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	2200      	movs	r2, #0
 800eda6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800edb0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	2201      	movs	r2, #1
 800edbe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800edc2:	2303      	movs	r3, #3
 800edc4:	e0b3      	b.n	800ef2e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800edcc:	b29b      	uxth	r3, r3
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d19b      	bne.n	800ed0a <HAL_SPI_Transmit+0x1ca>
 800edd2:	e086      	b.n	800eee2 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	695b      	ldr	r3, [r3, #20]
 800edda:	f003 0302 	and.w	r3, r3, #2
 800edde:	2b02      	cmp	r3, #2
 800ede0:	d154      	bne.n	800ee8c <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ede8:	b29b      	uxth	r3, r3
 800edea:	2b03      	cmp	r3, #3
 800edec:	d918      	bls.n	800ee20 <HAL_SPI_Transmit+0x2e0>
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edf2:	2b40      	cmp	r3, #64	; 0x40
 800edf4:	d914      	bls.n	800ee20 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	6812      	ldr	r2, [r2, #0]
 800ee00:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee06:	1d1a      	adds	r2, r3, #4
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee12:	b29b      	uxth	r3, r3
 800ee14:	3b04      	subs	r3, #4
 800ee16:	b29a      	uxth	r2, r3
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ee1e:	e059      	b.n	800eed4 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee26:	b29b      	uxth	r3, r3
 800ee28:	2b01      	cmp	r3, #1
 800ee2a:	d917      	bls.n	800ee5c <HAL_SPI_Transmit+0x31c>
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d013      	beq.n	800ee5c <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee38:	881a      	ldrh	r2, [r3, #0]
 800ee3a:	69fb      	ldr	r3, [r7, #28]
 800ee3c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee42:	1c9a      	adds	r2, r3, #2
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee4e:	b29b      	uxth	r3, r3
 800ee50:	3b02      	subs	r3, #2
 800ee52:	b29a      	uxth	r2, r3
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ee5a:	e03b      	b.n	800eed4 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	3320      	adds	r3, #32
 800ee66:	7812      	ldrb	r2, [r2, #0]
 800ee68:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee6e:	1c5a      	adds	r2, r3, #1
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee7a:	b29b      	uxth	r3, r3
 800ee7c:	3b01      	subs	r3, #1
 800ee7e:	b29a      	uxth	r2, r3
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ee86:	e025      	b.n	800eed4 <HAL_SPI_Transmit+0x394>
 800ee88:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ee8c:	f7f4 fdfe 	bl	8003a8c <HAL_GetTick>
 800ee90:	4602      	mov	r2, r0
 800ee92:	697b      	ldr	r3, [r7, #20]
 800ee94:	1ad3      	subs	r3, r2, r3
 800ee96:	683a      	ldr	r2, [r7, #0]
 800ee98:	429a      	cmp	r2, r3
 800ee9a:	d803      	bhi.n	800eea4 <HAL_SPI_Transmit+0x364>
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eea2:	d102      	bne.n	800eeaa <HAL_SPI_Transmit+0x36a>
 800eea4:	683b      	ldr	r3, [r7, #0]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d114      	bne.n	800eed4 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800eeaa:	68f8      	ldr	r0, [r7, #12]
 800eeac:	f000 f9d4 	bl	800f258 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eebe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	2201      	movs	r2, #1
 800eecc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800eed0:	2303      	movs	r3, #3
 800eed2:	e02c      	b.n	800ef2e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eeda:	b29b      	uxth	r3, r3
 800eedc:	2b00      	cmp	r3, #0
 800eede:	f47f af79 	bne.w	800edd4 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800eee2:	697b      	ldr	r3, [r7, #20]
 800eee4:	9300      	str	r3, [sp, #0]
 800eee6:	683b      	ldr	r3, [r7, #0]
 800eee8:	2200      	movs	r2, #0
 800eeea:	2108      	movs	r1, #8
 800eeec:	68f8      	ldr	r0, [r7, #12]
 800eeee:	f000 fa53 	bl	800f398 <SPI_WaitOnFlagUntilTimeout>
 800eef2:	4603      	mov	r3, r0
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d007      	beq.n	800ef08 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eefe:	f043 0220 	orr.w	r2, r3, #32
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ef08:	68f8      	ldr	r0, [r7, #12]
 800ef0a:	f000 f9a5 	bl	800f258 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	2200      	movs	r2, #0
 800ef12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	2201      	movs	r2, #1
 800ef1a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d001      	beq.n	800ef2c <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800ef28:	2301      	movs	r3, #1
 800ef2a:	e000      	b.n	800ef2e <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800ef2c:	7efb      	ldrb	r3, [r7, #27]
}
 800ef2e:	4618      	mov	r0, r3
 800ef30:	3720      	adds	r7, #32
 800ef32:	46bd      	mov	sp, r7
 800ef34:	bd80      	pop	{r7, pc}
 800ef36:	bf00      	nop

0800ef38 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b088      	sub	sp, #32
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	60f8      	str	r0, [r7, #12]
 800ef40:	60b9      	str	r1, [r7, #8]
 800ef42:	603b      	str	r3, [r7, #0]
 800ef44:	4613      	mov	r3, r2
 800ef46:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ef48:	2300      	movs	r3, #0
 800ef4a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	3330      	adds	r3, #48	; 0x30
 800ef52:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ef5a:	2b01      	cmp	r3, #1
 800ef5c:	d101      	bne.n	800ef62 <HAL_SPI_Receive+0x2a>
 800ef5e:	2302      	movs	r3, #2
 800ef60:	e173      	b.n	800f24a <HAL_SPI_Receive+0x312>
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	2201      	movs	r2, #1
 800ef66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ef6a:	f7f4 fd8f 	bl	8003a8c <HAL_GetTick>
 800ef6e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ef76:	b2db      	uxtb	r3, r3
 800ef78:	2b01      	cmp	r3, #1
 800ef7a:	d007      	beq.n	800ef8c <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800ef7c:	2302      	movs	r3, #2
 800ef7e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	2200      	movs	r2, #0
 800ef84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ef88:	7ffb      	ldrb	r3, [r7, #31]
 800ef8a:	e15e      	b.n	800f24a <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d002      	beq.n	800ef98 <HAL_SPI_Receive+0x60>
 800ef92:	88fb      	ldrh	r3, [r7, #6]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d107      	bne.n	800efa8 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800ef98:	2301      	movs	r3, #1
 800ef9a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	2200      	movs	r2, #0
 800efa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800efa4:	7ffb      	ldrb	r3, [r7, #31]
 800efa6:	e150      	b.n	800f24a <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	2204      	movs	r2, #4
 800efac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	2200      	movs	r2, #0
 800efb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	68ba      	ldr	r2, [r7, #8]
 800efbc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	88fa      	ldrh	r2, [r7, #6]
 800efc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	88fa      	ldrh	r2, [r7, #6]
 800efca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	2200      	movs	r2, #0
 800efd2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	2200      	movs	r2, #0
 800efd8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	2200      	movs	r2, #0
 800efe0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	2200      	movs	r2, #0
 800efe8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	2200      	movs	r2, #0
 800efee:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	689b      	ldr	r3, [r3, #8]
 800eff4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800eff8:	d108      	bne.n	800f00c <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	681a      	ldr	r2, [r3, #0]
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f008:	601a      	str	r2, [r3, #0]
 800f00a:	e009      	b.n	800f020 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	68db      	ldr	r3, [r3, #12]
 800f012:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800f01e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	685a      	ldr	r2, [r3, #4]
 800f026:	4b8b      	ldr	r3, [pc, #556]	; (800f254 <HAL_SPI_Receive+0x31c>)
 800f028:	4013      	ands	r3, r2
 800f02a:	88f9      	ldrh	r1, [r7, #6]
 800f02c:	68fa      	ldr	r2, [r7, #12]
 800f02e:	6812      	ldr	r2, [r2, #0]
 800f030:	430b      	orrs	r3, r1
 800f032:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	681a      	ldr	r2, [r3, #0]
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	f042 0201 	orr.w	r2, r2, #1
 800f042:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	685b      	ldr	r3, [r3, #4]
 800f048:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f04c:	d107      	bne.n	800f05e <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	681a      	ldr	r2, [r3, #0]
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f05c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	68db      	ldr	r3, [r3, #12]
 800f062:	2b0f      	cmp	r3, #15
 800f064:	d948      	bls.n	800f0f8 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f066:	e040      	b.n	800f0ea <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	695a      	ldr	r2, [r3, #20]
 800f06e:	f248 0308 	movw	r3, #32776	; 0x8008
 800f072:	4013      	ands	r3, r2
 800f074:	2b00      	cmp	r3, #0
 800f076:	d014      	beq.n	800f0a2 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	681a      	ldr	r2, [r3, #0]
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f080:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f082:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f088:	1d1a      	adds	r2, r3, #4
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f094:	b29b      	uxth	r3, r3
 800f096:	3b01      	subs	r3, #1
 800f098:	b29a      	uxth	r2, r3
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f0a0:	e023      	b.n	800f0ea <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f0a2:	f7f4 fcf3 	bl	8003a8c <HAL_GetTick>
 800f0a6:	4602      	mov	r2, r0
 800f0a8:	697b      	ldr	r3, [r7, #20]
 800f0aa:	1ad3      	subs	r3, r2, r3
 800f0ac:	683a      	ldr	r2, [r7, #0]
 800f0ae:	429a      	cmp	r2, r3
 800f0b0:	d803      	bhi.n	800f0ba <HAL_SPI_Receive+0x182>
 800f0b2:	683b      	ldr	r3, [r7, #0]
 800f0b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0b8:	d102      	bne.n	800f0c0 <HAL_SPI_Receive+0x188>
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d114      	bne.n	800f0ea <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f0c0:	68f8      	ldr	r0, [r7, #12]
 800f0c2:	f000 f8c9 	bl	800f258 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f0d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	2201      	movs	r2, #1
 800f0e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f0e6:	2303      	movs	r3, #3
 800f0e8:	e0af      	b.n	800f24a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f0f0:	b29b      	uxth	r3, r3
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d1b8      	bne.n	800f068 <HAL_SPI_Receive+0x130>
 800f0f6:	e095      	b.n	800f224 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	68db      	ldr	r3, [r3, #12]
 800f0fc:	2b07      	cmp	r3, #7
 800f0fe:	f240 808b 	bls.w	800f218 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f102:	e03f      	b.n	800f184 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	695b      	ldr	r3, [r3, #20]
 800f10a:	f003 0301 	and.w	r3, r3, #1
 800f10e:	2b01      	cmp	r3, #1
 800f110:	d114      	bne.n	800f13c <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f116:	69ba      	ldr	r2, [r7, #24]
 800f118:	8812      	ldrh	r2, [r2, #0]
 800f11a:	b292      	uxth	r2, r2
 800f11c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f122:	1c9a      	adds	r2, r3, #2
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f12e:	b29b      	uxth	r3, r3
 800f130:	3b01      	subs	r3, #1
 800f132:	b29a      	uxth	r2, r3
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f13a:	e023      	b.n	800f184 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f13c:	f7f4 fca6 	bl	8003a8c <HAL_GetTick>
 800f140:	4602      	mov	r2, r0
 800f142:	697b      	ldr	r3, [r7, #20]
 800f144:	1ad3      	subs	r3, r2, r3
 800f146:	683a      	ldr	r2, [r7, #0]
 800f148:	429a      	cmp	r2, r3
 800f14a:	d803      	bhi.n	800f154 <HAL_SPI_Receive+0x21c>
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f152:	d102      	bne.n	800f15a <HAL_SPI_Receive+0x222>
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d114      	bne.n	800f184 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f15a:	68f8      	ldr	r0, [r7, #12]
 800f15c:	f000 f87c 	bl	800f258 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	2200      	movs	r2, #0
 800f164:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f16e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	2201      	movs	r2, #1
 800f17c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f180:	2303      	movs	r3, #3
 800f182:	e062      	b.n	800f24a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f18a:	b29b      	uxth	r3, r3
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d1b9      	bne.n	800f104 <HAL_SPI_Receive+0x1cc>
 800f190:	e048      	b.n	800f224 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	695b      	ldr	r3, [r3, #20]
 800f198:	f003 0301 	and.w	r3, r3, #1
 800f19c:	2b01      	cmp	r3, #1
 800f19e:	d117      	bne.n	800f1d0 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f1ac:	7812      	ldrb	r2, [r2, #0]
 800f1ae:	b2d2      	uxtb	r2, r2
 800f1b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f1b6:	1c5a      	adds	r2, r3, #1
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f1c2:	b29b      	uxth	r3, r3
 800f1c4:	3b01      	subs	r3, #1
 800f1c6:	b29a      	uxth	r2, r3
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f1ce:	e023      	b.n	800f218 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f1d0:	f7f4 fc5c 	bl	8003a8c <HAL_GetTick>
 800f1d4:	4602      	mov	r2, r0
 800f1d6:	697b      	ldr	r3, [r7, #20]
 800f1d8:	1ad3      	subs	r3, r2, r3
 800f1da:	683a      	ldr	r2, [r7, #0]
 800f1dc:	429a      	cmp	r2, r3
 800f1de:	d803      	bhi.n	800f1e8 <HAL_SPI_Receive+0x2b0>
 800f1e0:	683b      	ldr	r3, [r7, #0]
 800f1e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1e6:	d102      	bne.n	800f1ee <HAL_SPI_Receive+0x2b6>
 800f1e8:	683b      	ldr	r3, [r7, #0]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d114      	bne.n	800f218 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f1ee:	68f8      	ldr	r0, [r7, #12]
 800f1f0:	f000 f832 	bl	800f258 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f202:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	2201      	movs	r2, #1
 800f210:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f214:	2303      	movs	r3, #3
 800f216:	e018      	b.n	800f24a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f21e:	b29b      	uxth	r3, r3
 800f220:	2b00      	cmp	r3, #0
 800f222:	d1b6      	bne.n	800f192 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f224:	68f8      	ldr	r0, [r7, #12]
 800f226:	f000 f817 	bl	800f258 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	2200      	movs	r2, #0
 800f22e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	2201      	movs	r2, #1
 800f236:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f240:	2b00      	cmp	r3, #0
 800f242:	d001      	beq.n	800f248 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800f244:	2301      	movs	r3, #1
 800f246:	e000      	b.n	800f24a <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800f248:	7ffb      	ldrb	r3, [r7, #31]
}
 800f24a:	4618      	mov	r0, r3
 800f24c:	3720      	adds	r7, #32
 800f24e:	46bd      	mov	sp, r7
 800f250:	bd80      	pop	{r7, pc}
 800f252:	bf00      	nop
 800f254:	ffff0000 	.word	0xffff0000

0800f258 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f258:	b480      	push	{r7}
 800f25a:	b085      	sub	sp, #20
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	695b      	ldr	r3, [r3, #20]
 800f266:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	699a      	ldr	r2, [r3, #24]
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	f042 0208 	orr.w	r2, r2, #8
 800f276:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	699a      	ldr	r2, [r3, #24]
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	f042 0210 	orr.w	r2, r2, #16
 800f286:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	681a      	ldr	r2, [r3, #0]
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	f022 0201 	bic.w	r2, r2, #1
 800f296:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	6919      	ldr	r1, [r3, #16]
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681a      	ldr	r2, [r3, #0]
 800f2a2:	4b3c      	ldr	r3, [pc, #240]	; (800f394 <SPI_CloseTransfer+0x13c>)
 800f2a4:	400b      	ands	r3, r1
 800f2a6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	689a      	ldr	r2, [r3, #8]
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f2b6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f2be:	b2db      	uxtb	r3, r3
 800f2c0:	2b04      	cmp	r3, #4
 800f2c2:	d014      	beq.n	800f2ee <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	f003 0320 	and.w	r3, r3, #32
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d00f      	beq.n	800f2ee <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	699a      	ldr	r2, [r3, #24]
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	f042 0220 	orr.w	r2, r2, #32
 800f2ec:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f2f4:	b2db      	uxtb	r3, r3
 800f2f6:	2b03      	cmp	r3, #3
 800f2f8:	d014      	beq.n	800f324 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f300:	2b00      	cmp	r3, #0
 800f302:	d00f      	beq.n	800f324 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f30a:	f043 0204 	orr.w	r2, r3, #4
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	699a      	ldr	r2, [r3, #24]
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f322:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d00f      	beq.n	800f34e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f334:	f043 0201 	orr.w	r2, r3, #1
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	699a      	ldr	r2, [r3, #24]
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f34c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f354:	2b00      	cmp	r3, #0
 800f356:	d00f      	beq.n	800f378 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f35e:	f043 0208 	orr.w	r2, r3, #8
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	699a      	ldr	r2, [r3, #24]
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f376:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2200      	movs	r2, #0
 800f37c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2200      	movs	r2, #0
 800f384:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800f388:	bf00      	nop
 800f38a:	3714      	adds	r7, #20
 800f38c:	46bd      	mov	sp, r7
 800f38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f392:	4770      	bx	lr
 800f394:	fffffc90 	.word	0xfffffc90

0800f398 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b084      	sub	sp, #16
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	60f8      	str	r0, [r7, #12]
 800f3a0:	60b9      	str	r1, [r7, #8]
 800f3a2:	603b      	str	r3, [r7, #0]
 800f3a4:	4613      	mov	r3, r2
 800f3a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f3a8:	e010      	b.n	800f3cc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f3aa:	f7f4 fb6f 	bl	8003a8c <HAL_GetTick>
 800f3ae:	4602      	mov	r2, r0
 800f3b0:	69bb      	ldr	r3, [r7, #24]
 800f3b2:	1ad3      	subs	r3, r2, r3
 800f3b4:	683a      	ldr	r2, [r7, #0]
 800f3b6:	429a      	cmp	r2, r3
 800f3b8:	d803      	bhi.n	800f3c2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f3ba:	683b      	ldr	r3, [r7, #0]
 800f3bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3c0:	d102      	bne.n	800f3c8 <SPI_WaitOnFlagUntilTimeout+0x30>
 800f3c2:	683b      	ldr	r3, [r7, #0]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d101      	bne.n	800f3cc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f3c8:	2303      	movs	r3, #3
 800f3ca:	e00f      	b.n	800f3ec <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	695a      	ldr	r2, [r3, #20]
 800f3d2:	68bb      	ldr	r3, [r7, #8]
 800f3d4:	4013      	ands	r3, r2
 800f3d6:	68ba      	ldr	r2, [r7, #8]
 800f3d8:	429a      	cmp	r2, r3
 800f3da:	bf0c      	ite	eq
 800f3dc:	2301      	moveq	r3, #1
 800f3de:	2300      	movne	r3, #0
 800f3e0:	b2db      	uxtb	r3, r3
 800f3e2:	461a      	mov	r2, r3
 800f3e4:	79fb      	ldrb	r3, [r7, #7]
 800f3e6:	429a      	cmp	r2, r3
 800f3e8:	d0df      	beq.n	800f3aa <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f3ea:	2300      	movs	r3, #0
}
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	3710      	adds	r7, #16
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	bd80      	pop	{r7, pc}

0800f3f4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f3f4:	b480      	push	{r7}
 800f3f6:	b085      	sub	sp, #20
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f400:	095b      	lsrs	r3, r3, #5
 800f402:	3301      	adds	r3, #1
 800f404:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	68db      	ldr	r3, [r3, #12]
 800f40a:	3301      	adds	r3, #1
 800f40c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f40e:	68bb      	ldr	r3, [r7, #8]
 800f410:	3307      	adds	r3, #7
 800f412:	08db      	lsrs	r3, r3, #3
 800f414:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f416:	68bb      	ldr	r3, [r7, #8]
 800f418:	68fa      	ldr	r2, [r7, #12]
 800f41a:	fb02 f303 	mul.w	r3, r2, r3
}
 800f41e:	4618      	mov	r0, r3
 800f420:	3714      	adds	r7, #20
 800f422:	46bd      	mov	sp, r7
 800f424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f428:	4770      	bx	lr

0800f42a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f42a:	b580      	push	{r7, lr}
 800f42c:	b082      	sub	sp, #8
 800f42e:	af00      	add	r7, sp, #0
 800f430:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d101      	bne.n	800f43c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f438:	2301      	movs	r3, #1
 800f43a:	e049      	b.n	800f4d0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f442:	b2db      	uxtb	r3, r3
 800f444:	2b00      	cmp	r3, #0
 800f446:	d106      	bne.n	800f456 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	2200      	movs	r2, #0
 800f44c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f450:	6878      	ldr	r0, [r7, #4]
 800f452:	f7f3 ff85 	bl	8003360 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	2202      	movs	r2, #2
 800f45a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	681a      	ldr	r2, [r3, #0]
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	3304      	adds	r3, #4
 800f466:	4619      	mov	r1, r3
 800f468:	4610      	mov	r0, r2
 800f46a:	f000 ff29 	bl	80102c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	2201      	movs	r2, #1
 800f472:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	2201      	movs	r2, #1
 800f47a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	2201      	movs	r2, #1
 800f482:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	2201      	movs	r2, #1
 800f48a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	2201      	movs	r2, #1
 800f492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	2201      	movs	r2, #1
 800f49a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	2201      	movs	r2, #1
 800f4a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	2201      	movs	r2, #1
 800f4aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	2201      	movs	r2, #1
 800f4b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	2201      	movs	r2, #1
 800f4ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	2201      	movs	r2, #1
 800f4c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	2201      	movs	r2, #1
 800f4ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f4ce:	2300      	movs	r3, #0
}
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	3708      	adds	r7, #8
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}

0800f4d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b082      	sub	sp, #8
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d101      	bne.n	800f4ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f4e6:	2301      	movs	r3, #1
 800f4e8:	e049      	b.n	800f57e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f4f0:	b2db      	uxtb	r3, r3
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d106      	bne.n	800f504 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f4fe:	6878      	ldr	r0, [r7, #4]
 800f500:	f7f3 fd98 	bl	8003034 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	2202      	movs	r2, #2
 800f508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681a      	ldr	r2, [r3, #0]
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	3304      	adds	r3, #4
 800f514:	4619      	mov	r1, r3
 800f516:	4610      	mov	r0, r2
 800f518:	f000 fed2 	bl	80102c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2201      	movs	r2, #1
 800f520:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	2201      	movs	r2, #1
 800f528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	2201      	movs	r2, #1
 800f530:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2201      	movs	r2, #1
 800f538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	2201      	movs	r2, #1
 800f540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	2201      	movs	r2, #1
 800f548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2201      	movs	r2, #1
 800f550:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	2201      	movs	r2, #1
 800f558:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	2201      	movs	r2, #1
 800f560:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	2201      	movs	r2, #1
 800f568:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	2201      	movs	r2, #1
 800f570:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2201      	movs	r2, #1
 800f578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f57c:	2300      	movs	r3, #0
}
 800f57e:	4618      	mov	r0, r3
 800f580:	3708      	adds	r7, #8
 800f582:	46bd      	mov	sp, r7
 800f584:	bd80      	pop	{r7, pc}
	...

0800f588 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b084      	sub	sp, #16
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
 800f590:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f592:	683b      	ldr	r3, [r7, #0]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d109      	bne.n	800f5ac <HAL_TIM_PWM_Start+0x24>
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f59e:	b2db      	uxtb	r3, r3
 800f5a0:	2b01      	cmp	r3, #1
 800f5a2:	bf14      	ite	ne
 800f5a4:	2301      	movne	r3, #1
 800f5a6:	2300      	moveq	r3, #0
 800f5a8:	b2db      	uxtb	r3, r3
 800f5aa:	e03c      	b.n	800f626 <HAL_TIM_PWM_Start+0x9e>
 800f5ac:	683b      	ldr	r3, [r7, #0]
 800f5ae:	2b04      	cmp	r3, #4
 800f5b0:	d109      	bne.n	800f5c6 <HAL_TIM_PWM_Start+0x3e>
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f5b8:	b2db      	uxtb	r3, r3
 800f5ba:	2b01      	cmp	r3, #1
 800f5bc:	bf14      	ite	ne
 800f5be:	2301      	movne	r3, #1
 800f5c0:	2300      	moveq	r3, #0
 800f5c2:	b2db      	uxtb	r3, r3
 800f5c4:	e02f      	b.n	800f626 <HAL_TIM_PWM_Start+0x9e>
 800f5c6:	683b      	ldr	r3, [r7, #0]
 800f5c8:	2b08      	cmp	r3, #8
 800f5ca:	d109      	bne.n	800f5e0 <HAL_TIM_PWM_Start+0x58>
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f5d2:	b2db      	uxtb	r3, r3
 800f5d4:	2b01      	cmp	r3, #1
 800f5d6:	bf14      	ite	ne
 800f5d8:	2301      	movne	r3, #1
 800f5da:	2300      	moveq	r3, #0
 800f5dc:	b2db      	uxtb	r3, r3
 800f5de:	e022      	b.n	800f626 <HAL_TIM_PWM_Start+0x9e>
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	2b0c      	cmp	r3, #12
 800f5e4:	d109      	bne.n	800f5fa <HAL_TIM_PWM_Start+0x72>
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f5ec:	b2db      	uxtb	r3, r3
 800f5ee:	2b01      	cmp	r3, #1
 800f5f0:	bf14      	ite	ne
 800f5f2:	2301      	movne	r3, #1
 800f5f4:	2300      	moveq	r3, #0
 800f5f6:	b2db      	uxtb	r3, r3
 800f5f8:	e015      	b.n	800f626 <HAL_TIM_PWM_Start+0x9e>
 800f5fa:	683b      	ldr	r3, [r7, #0]
 800f5fc:	2b10      	cmp	r3, #16
 800f5fe:	d109      	bne.n	800f614 <HAL_TIM_PWM_Start+0x8c>
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f606:	b2db      	uxtb	r3, r3
 800f608:	2b01      	cmp	r3, #1
 800f60a:	bf14      	ite	ne
 800f60c:	2301      	movne	r3, #1
 800f60e:	2300      	moveq	r3, #0
 800f610:	b2db      	uxtb	r3, r3
 800f612:	e008      	b.n	800f626 <HAL_TIM_PWM_Start+0x9e>
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f61a:	b2db      	uxtb	r3, r3
 800f61c:	2b01      	cmp	r3, #1
 800f61e:	bf14      	ite	ne
 800f620:	2301      	movne	r3, #1
 800f622:	2300      	moveq	r3, #0
 800f624:	b2db      	uxtb	r3, r3
 800f626:	2b00      	cmp	r3, #0
 800f628:	d001      	beq.n	800f62e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800f62a:	2301      	movs	r3, #1
 800f62c:	e0ab      	b.n	800f786 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f62e:	683b      	ldr	r3, [r7, #0]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d104      	bne.n	800f63e <HAL_TIM_PWM_Start+0xb6>
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2202      	movs	r2, #2
 800f638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f63c:	e023      	b.n	800f686 <HAL_TIM_PWM_Start+0xfe>
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	2b04      	cmp	r3, #4
 800f642:	d104      	bne.n	800f64e <HAL_TIM_PWM_Start+0xc6>
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	2202      	movs	r2, #2
 800f648:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f64c:	e01b      	b.n	800f686 <HAL_TIM_PWM_Start+0xfe>
 800f64e:	683b      	ldr	r3, [r7, #0]
 800f650:	2b08      	cmp	r3, #8
 800f652:	d104      	bne.n	800f65e <HAL_TIM_PWM_Start+0xd6>
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	2202      	movs	r2, #2
 800f658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f65c:	e013      	b.n	800f686 <HAL_TIM_PWM_Start+0xfe>
 800f65e:	683b      	ldr	r3, [r7, #0]
 800f660:	2b0c      	cmp	r3, #12
 800f662:	d104      	bne.n	800f66e <HAL_TIM_PWM_Start+0xe6>
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	2202      	movs	r2, #2
 800f668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f66c:	e00b      	b.n	800f686 <HAL_TIM_PWM_Start+0xfe>
 800f66e:	683b      	ldr	r3, [r7, #0]
 800f670:	2b10      	cmp	r3, #16
 800f672:	d104      	bne.n	800f67e <HAL_TIM_PWM_Start+0xf6>
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	2202      	movs	r2, #2
 800f678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f67c:	e003      	b.n	800f686 <HAL_TIM_PWM_Start+0xfe>
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	2202      	movs	r2, #2
 800f682:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	2201      	movs	r2, #1
 800f68c:	6839      	ldr	r1, [r7, #0]
 800f68e:	4618      	mov	r0, r3
 800f690:	f001 f992 	bl	80109b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	4a3d      	ldr	r2, [pc, #244]	; (800f790 <HAL_TIM_PWM_Start+0x208>)
 800f69a:	4293      	cmp	r3, r2
 800f69c:	d013      	beq.n	800f6c6 <HAL_TIM_PWM_Start+0x13e>
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	4a3c      	ldr	r2, [pc, #240]	; (800f794 <HAL_TIM_PWM_Start+0x20c>)
 800f6a4:	4293      	cmp	r3, r2
 800f6a6:	d00e      	beq.n	800f6c6 <HAL_TIM_PWM_Start+0x13e>
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	4a3a      	ldr	r2, [pc, #232]	; (800f798 <HAL_TIM_PWM_Start+0x210>)
 800f6ae:	4293      	cmp	r3, r2
 800f6b0:	d009      	beq.n	800f6c6 <HAL_TIM_PWM_Start+0x13e>
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	4a39      	ldr	r2, [pc, #228]	; (800f79c <HAL_TIM_PWM_Start+0x214>)
 800f6b8:	4293      	cmp	r3, r2
 800f6ba:	d004      	beq.n	800f6c6 <HAL_TIM_PWM_Start+0x13e>
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	4a37      	ldr	r2, [pc, #220]	; (800f7a0 <HAL_TIM_PWM_Start+0x218>)
 800f6c2:	4293      	cmp	r3, r2
 800f6c4:	d101      	bne.n	800f6ca <HAL_TIM_PWM_Start+0x142>
 800f6c6:	2301      	movs	r3, #1
 800f6c8:	e000      	b.n	800f6cc <HAL_TIM_PWM_Start+0x144>
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d007      	beq.n	800f6e0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f6de:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	4a2a      	ldr	r2, [pc, #168]	; (800f790 <HAL_TIM_PWM_Start+0x208>)
 800f6e6:	4293      	cmp	r3, r2
 800f6e8:	d02c      	beq.n	800f744 <HAL_TIM_PWM_Start+0x1bc>
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f6f2:	d027      	beq.n	800f744 <HAL_TIM_PWM_Start+0x1bc>
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	4a2a      	ldr	r2, [pc, #168]	; (800f7a4 <HAL_TIM_PWM_Start+0x21c>)
 800f6fa:	4293      	cmp	r3, r2
 800f6fc:	d022      	beq.n	800f744 <HAL_TIM_PWM_Start+0x1bc>
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	4a29      	ldr	r2, [pc, #164]	; (800f7a8 <HAL_TIM_PWM_Start+0x220>)
 800f704:	4293      	cmp	r3, r2
 800f706:	d01d      	beq.n	800f744 <HAL_TIM_PWM_Start+0x1bc>
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	4a27      	ldr	r2, [pc, #156]	; (800f7ac <HAL_TIM_PWM_Start+0x224>)
 800f70e:	4293      	cmp	r3, r2
 800f710:	d018      	beq.n	800f744 <HAL_TIM_PWM_Start+0x1bc>
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	4a1f      	ldr	r2, [pc, #124]	; (800f794 <HAL_TIM_PWM_Start+0x20c>)
 800f718:	4293      	cmp	r3, r2
 800f71a:	d013      	beq.n	800f744 <HAL_TIM_PWM_Start+0x1bc>
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	4a23      	ldr	r2, [pc, #140]	; (800f7b0 <HAL_TIM_PWM_Start+0x228>)
 800f722:	4293      	cmp	r3, r2
 800f724:	d00e      	beq.n	800f744 <HAL_TIM_PWM_Start+0x1bc>
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	4a1b      	ldr	r2, [pc, #108]	; (800f798 <HAL_TIM_PWM_Start+0x210>)
 800f72c:	4293      	cmp	r3, r2
 800f72e:	d009      	beq.n	800f744 <HAL_TIM_PWM_Start+0x1bc>
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	4a1f      	ldr	r2, [pc, #124]	; (800f7b4 <HAL_TIM_PWM_Start+0x22c>)
 800f736:	4293      	cmp	r3, r2
 800f738:	d004      	beq.n	800f744 <HAL_TIM_PWM_Start+0x1bc>
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	4a1e      	ldr	r2, [pc, #120]	; (800f7b8 <HAL_TIM_PWM_Start+0x230>)
 800f740:	4293      	cmp	r3, r2
 800f742:	d115      	bne.n	800f770 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	689a      	ldr	r2, [r3, #8]
 800f74a:	4b1c      	ldr	r3, [pc, #112]	; (800f7bc <HAL_TIM_PWM_Start+0x234>)
 800f74c:	4013      	ands	r3, r2
 800f74e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	2b06      	cmp	r3, #6
 800f754:	d015      	beq.n	800f782 <HAL_TIM_PWM_Start+0x1fa>
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f75c:	d011      	beq.n	800f782 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	681a      	ldr	r2, [r3, #0]
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	f042 0201 	orr.w	r2, r2, #1
 800f76c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f76e:	e008      	b.n	800f782 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	681a      	ldr	r2, [r3, #0]
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	f042 0201 	orr.w	r2, r2, #1
 800f77e:	601a      	str	r2, [r3, #0]
 800f780:	e000      	b.n	800f784 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f782:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f784:	2300      	movs	r3, #0
}
 800f786:	4618      	mov	r0, r3
 800f788:	3710      	adds	r7, #16
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bd80      	pop	{r7, pc}
 800f78e:	bf00      	nop
 800f790:	40010000 	.word	0x40010000
 800f794:	40010400 	.word	0x40010400
 800f798:	40014000 	.word	0x40014000
 800f79c:	40014400 	.word	0x40014400
 800f7a0:	40014800 	.word	0x40014800
 800f7a4:	40000400 	.word	0x40000400
 800f7a8:	40000800 	.word	0x40000800
 800f7ac:	40000c00 	.word	0x40000c00
 800f7b0:	40001800 	.word	0x40001800
 800f7b4:	4000e000 	.word	0x4000e000
 800f7b8:	4000e400 	.word	0x4000e400
 800f7bc:	00010007 	.word	0x00010007

0800f7c0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b086      	sub	sp, #24
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	60f8      	str	r0, [r7, #12]
 800f7c8:	60b9      	str	r1, [r7, #8]
 800f7ca:	607a      	str	r2, [r7, #4]
 800f7cc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800f7d2:	68bb      	ldr	r3, [r7, #8]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d109      	bne.n	800f7ec <HAL_TIM_PWM_Start_DMA+0x2c>
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f7de:	b2db      	uxtb	r3, r3
 800f7e0:	2b02      	cmp	r3, #2
 800f7e2:	bf0c      	ite	eq
 800f7e4:	2301      	moveq	r3, #1
 800f7e6:	2300      	movne	r3, #0
 800f7e8:	b2db      	uxtb	r3, r3
 800f7ea:	e03c      	b.n	800f866 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f7ec:	68bb      	ldr	r3, [r7, #8]
 800f7ee:	2b04      	cmp	r3, #4
 800f7f0:	d109      	bne.n	800f806 <HAL_TIM_PWM_Start_DMA+0x46>
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f7f8:	b2db      	uxtb	r3, r3
 800f7fa:	2b02      	cmp	r3, #2
 800f7fc:	bf0c      	ite	eq
 800f7fe:	2301      	moveq	r3, #1
 800f800:	2300      	movne	r3, #0
 800f802:	b2db      	uxtb	r3, r3
 800f804:	e02f      	b.n	800f866 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f806:	68bb      	ldr	r3, [r7, #8]
 800f808:	2b08      	cmp	r3, #8
 800f80a:	d109      	bne.n	800f820 <HAL_TIM_PWM_Start_DMA+0x60>
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f812:	b2db      	uxtb	r3, r3
 800f814:	2b02      	cmp	r3, #2
 800f816:	bf0c      	ite	eq
 800f818:	2301      	moveq	r3, #1
 800f81a:	2300      	movne	r3, #0
 800f81c:	b2db      	uxtb	r3, r3
 800f81e:	e022      	b.n	800f866 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f820:	68bb      	ldr	r3, [r7, #8]
 800f822:	2b0c      	cmp	r3, #12
 800f824:	d109      	bne.n	800f83a <HAL_TIM_PWM_Start_DMA+0x7a>
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f82c:	b2db      	uxtb	r3, r3
 800f82e:	2b02      	cmp	r3, #2
 800f830:	bf0c      	ite	eq
 800f832:	2301      	moveq	r3, #1
 800f834:	2300      	movne	r3, #0
 800f836:	b2db      	uxtb	r3, r3
 800f838:	e015      	b.n	800f866 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f83a:	68bb      	ldr	r3, [r7, #8]
 800f83c:	2b10      	cmp	r3, #16
 800f83e:	d109      	bne.n	800f854 <HAL_TIM_PWM_Start_DMA+0x94>
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f846:	b2db      	uxtb	r3, r3
 800f848:	2b02      	cmp	r3, #2
 800f84a:	bf0c      	ite	eq
 800f84c:	2301      	moveq	r3, #1
 800f84e:	2300      	movne	r3, #0
 800f850:	b2db      	uxtb	r3, r3
 800f852:	e008      	b.n	800f866 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f85a:	b2db      	uxtb	r3, r3
 800f85c:	2b02      	cmp	r3, #2
 800f85e:	bf0c      	ite	eq
 800f860:	2301      	moveq	r3, #1
 800f862:	2300      	movne	r3, #0
 800f864:	b2db      	uxtb	r3, r3
 800f866:	2b00      	cmp	r3, #0
 800f868:	d001      	beq.n	800f86e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800f86a:	2302      	movs	r3, #2
 800f86c:	e1ba      	b.n	800fbe4 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800f86e:	68bb      	ldr	r3, [r7, #8]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d109      	bne.n	800f888 <HAL_TIM_PWM_Start_DMA+0xc8>
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f87a:	b2db      	uxtb	r3, r3
 800f87c:	2b01      	cmp	r3, #1
 800f87e:	bf0c      	ite	eq
 800f880:	2301      	moveq	r3, #1
 800f882:	2300      	movne	r3, #0
 800f884:	b2db      	uxtb	r3, r3
 800f886:	e03c      	b.n	800f902 <HAL_TIM_PWM_Start_DMA+0x142>
 800f888:	68bb      	ldr	r3, [r7, #8]
 800f88a:	2b04      	cmp	r3, #4
 800f88c:	d109      	bne.n	800f8a2 <HAL_TIM_PWM_Start_DMA+0xe2>
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f894:	b2db      	uxtb	r3, r3
 800f896:	2b01      	cmp	r3, #1
 800f898:	bf0c      	ite	eq
 800f89a:	2301      	moveq	r3, #1
 800f89c:	2300      	movne	r3, #0
 800f89e:	b2db      	uxtb	r3, r3
 800f8a0:	e02f      	b.n	800f902 <HAL_TIM_PWM_Start_DMA+0x142>
 800f8a2:	68bb      	ldr	r3, [r7, #8]
 800f8a4:	2b08      	cmp	r3, #8
 800f8a6:	d109      	bne.n	800f8bc <HAL_TIM_PWM_Start_DMA+0xfc>
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f8ae:	b2db      	uxtb	r3, r3
 800f8b0:	2b01      	cmp	r3, #1
 800f8b2:	bf0c      	ite	eq
 800f8b4:	2301      	moveq	r3, #1
 800f8b6:	2300      	movne	r3, #0
 800f8b8:	b2db      	uxtb	r3, r3
 800f8ba:	e022      	b.n	800f902 <HAL_TIM_PWM_Start_DMA+0x142>
 800f8bc:	68bb      	ldr	r3, [r7, #8]
 800f8be:	2b0c      	cmp	r3, #12
 800f8c0:	d109      	bne.n	800f8d6 <HAL_TIM_PWM_Start_DMA+0x116>
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f8c8:	b2db      	uxtb	r3, r3
 800f8ca:	2b01      	cmp	r3, #1
 800f8cc:	bf0c      	ite	eq
 800f8ce:	2301      	moveq	r3, #1
 800f8d0:	2300      	movne	r3, #0
 800f8d2:	b2db      	uxtb	r3, r3
 800f8d4:	e015      	b.n	800f902 <HAL_TIM_PWM_Start_DMA+0x142>
 800f8d6:	68bb      	ldr	r3, [r7, #8]
 800f8d8:	2b10      	cmp	r3, #16
 800f8da:	d109      	bne.n	800f8f0 <HAL_TIM_PWM_Start_DMA+0x130>
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f8e2:	b2db      	uxtb	r3, r3
 800f8e4:	2b01      	cmp	r3, #1
 800f8e6:	bf0c      	ite	eq
 800f8e8:	2301      	moveq	r3, #1
 800f8ea:	2300      	movne	r3, #0
 800f8ec:	b2db      	uxtb	r3, r3
 800f8ee:	e008      	b.n	800f902 <HAL_TIM_PWM_Start_DMA+0x142>
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f8f6:	b2db      	uxtb	r3, r3
 800f8f8:	2b01      	cmp	r3, #1
 800f8fa:	bf0c      	ite	eq
 800f8fc:	2301      	moveq	r3, #1
 800f8fe:	2300      	movne	r3, #0
 800f900:	b2db      	uxtb	r3, r3
 800f902:	2b00      	cmp	r3, #0
 800f904:	d034      	beq.n	800f970 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d002      	beq.n	800f912 <HAL_TIM_PWM_Start_DMA+0x152>
 800f90c:	887b      	ldrh	r3, [r7, #2]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d101      	bne.n	800f916 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800f912:	2301      	movs	r3, #1
 800f914:	e166      	b.n	800fbe4 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f916:	68bb      	ldr	r3, [r7, #8]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d104      	bne.n	800f926 <HAL_TIM_PWM_Start_DMA+0x166>
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	2202      	movs	r2, #2
 800f920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f924:	e026      	b.n	800f974 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f926:	68bb      	ldr	r3, [r7, #8]
 800f928:	2b04      	cmp	r3, #4
 800f92a:	d104      	bne.n	800f936 <HAL_TIM_PWM_Start_DMA+0x176>
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	2202      	movs	r2, #2
 800f930:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f934:	e01e      	b.n	800f974 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f936:	68bb      	ldr	r3, [r7, #8]
 800f938:	2b08      	cmp	r3, #8
 800f93a:	d104      	bne.n	800f946 <HAL_TIM_PWM_Start_DMA+0x186>
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	2202      	movs	r2, #2
 800f940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f944:	e016      	b.n	800f974 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f946:	68bb      	ldr	r3, [r7, #8]
 800f948:	2b0c      	cmp	r3, #12
 800f94a:	d104      	bne.n	800f956 <HAL_TIM_PWM_Start_DMA+0x196>
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	2202      	movs	r2, #2
 800f950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f954:	e00e      	b.n	800f974 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f956:	68bb      	ldr	r3, [r7, #8]
 800f958:	2b10      	cmp	r3, #16
 800f95a:	d104      	bne.n	800f966 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	2202      	movs	r2, #2
 800f960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f964:	e006      	b.n	800f974 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	2202      	movs	r2, #2
 800f96a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f96e:	e001      	b.n	800f974 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800f970:	2301      	movs	r3, #1
 800f972:	e137      	b.n	800fbe4 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800f974:	68bb      	ldr	r3, [r7, #8]
 800f976:	2b0c      	cmp	r3, #12
 800f978:	f200 80ae 	bhi.w	800fad8 <HAL_TIM_PWM_Start_DMA+0x318>
 800f97c:	a201      	add	r2, pc, #4	; (adr r2, 800f984 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800f97e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f982:	bf00      	nop
 800f984:	0800f9b9 	.word	0x0800f9b9
 800f988:	0800fad9 	.word	0x0800fad9
 800f98c:	0800fad9 	.word	0x0800fad9
 800f990:	0800fad9 	.word	0x0800fad9
 800f994:	0800fa01 	.word	0x0800fa01
 800f998:	0800fad9 	.word	0x0800fad9
 800f99c:	0800fad9 	.word	0x0800fad9
 800f9a0:	0800fad9 	.word	0x0800fad9
 800f9a4:	0800fa49 	.word	0x0800fa49
 800f9a8:	0800fad9 	.word	0x0800fad9
 800f9ac:	0800fad9 	.word	0x0800fad9
 800f9b0:	0800fad9 	.word	0x0800fad9
 800f9b4:	0800fa91 	.word	0x0800fa91
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9bc:	4a8b      	ldr	r2, [pc, #556]	; (800fbec <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f9be:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9c4:	4a8a      	ldr	r2, [pc, #552]	; (800fbf0 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f9c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9cc:	4a89      	ldr	r2, [pc, #548]	; (800fbf4 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f9ce:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f9d4:	6879      	ldr	r1, [r7, #4]
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	3334      	adds	r3, #52	; 0x34
 800f9dc:	461a      	mov	r2, r3
 800f9de:	887b      	ldrh	r3, [r7, #2]
 800f9e0:	f7f6 f872 	bl	8005ac8 <HAL_DMA_Start_IT>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d001      	beq.n	800f9ee <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f9ea:	2301      	movs	r3, #1
 800f9ec:	e0fa      	b.n	800fbe4 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	68da      	ldr	r2, [r3, #12]
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f9fc:	60da      	str	r2, [r3, #12]
      break;
 800f9fe:	e06e      	b.n	800fade <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa04:	4a79      	ldr	r2, [pc, #484]	; (800fbec <HAL_TIM_PWM_Start_DMA+0x42c>)
 800fa06:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa0c:	4a78      	ldr	r2, [pc, #480]	; (800fbf0 <HAL_TIM_PWM_Start_DMA+0x430>)
 800fa0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa14:	4a77      	ldr	r2, [pc, #476]	; (800fbf4 <HAL_TIM_PWM_Start_DMA+0x434>)
 800fa16:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800fa1c:	6879      	ldr	r1, [r7, #4]
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	3338      	adds	r3, #56	; 0x38
 800fa24:	461a      	mov	r2, r3
 800fa26:	887b      	ldrh	r3, [r7, #2]
 800fa28:	f7f6 f84e 	bl	8005ac8 <HAL_DMA_Start_IT>
 800fa2c:	4603      	mov	r3, r0
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d001      	beq.n	800fa36 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800fa32:	2301      	movs	r3, #1
 800fa34:	e0d6      	b.n	800fbe4 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	68da      	ldr	r2, [r3, #12]
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fa44:	60da      	str	r2, [r3, #12]
      break;
 800fa46:	e04a      	b.n	800fade <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa4c:	4a67      	ldr	r2, [pc, #412]	; (800fbec <HAL_TIM_PWM_Start_DMA+0x42c>)
 800fa4e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa54:	4a66      	ldr	r2, [pc, #408]	; (800fbf0 <HAL_TIM_PWM_Start_DMA+0x430>)
 800fa56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa5c:	4a65      	ldr	r2, [pc, #404]	; (800fbf4 <HAL_TIM_PWM_Start_DMA+0x434>)
 800fa5e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800fa64:	6879      	ldr	r1, [r7, #4]
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	333c      	adds	r3, #60	; 0x3c
 800fa6c:	461a      	mov	r2, r3
 800fa6e:	887b      	ldrh	r3, [r7, #2]
 800fa70:	f7f6 f82a 	bl	8005ac8 <HAL_DMA_Start_IT>
 800fa74:	4603      	mov	r3, r0
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d001      	beq.n	800fa7e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800fa7a:	2301      	movs	r3, #1
 800fa7c:	e0b2      	b.n	800fbe4 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	68da      	ldr	r2, [r3, #12]
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fa8c:	60da      	str	r2, [r3, #12]
      break;
 800fa8e:	e026      	b.n	800fade <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa94:	4a55      	ldr	r2, [pc, #340]	; (800fbec <HAL_TIM_PWM_Start_DMA+0x42c>)
 800fa96:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa9c:	4a54      	ldr	r2, [pc, #336]	; (800fbf0 <HAL_TIM_PWM_Start_DMA+0x430>)
 800fa9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800faa4:	4a53      	ldr	r2, [pc, #332]	; (800fbf4 <HAL_TIM_PWM_Start_DMA+0x434>)
 800faa6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800faac:	6879      	ldr	r1, [r7, #4]
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	3340      	adds	r3, #64	; 0x40
 800fab4:	461a      	mov	r2, r3
 800fab6:	887b      	ldrh	r3, [r7, #2]
 800fab8:	f7f6 f806 	bl	8005ac8 <HAL_DMA_Start_IT>
 800fabc:	4603      	mov	r3, r0
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d001      	beq.n	800fac6 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800fac2:	2301      	movs	r3, #1
 800fac4:	e08e      	b.n	800fbe4 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	68da      	ldr	r2, [r3, #12]
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fad4:	60da      	str	r2, [r3, #12]
      break;
 800fad6:	e002      	b.n	800fade <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800fad8:	2301      	movs	r3, #1
 800fada:	75fb      	strb	r3, [r7, #23]
      break;
 800fadc:	bf00      	nop
  }

  if (status == HAL_OK)
 800fade:	7dfb      	ldrb	r3, [r7, #23]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d17e      	bne.n	800fbe2 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	2201      	movs	r2, #1
 800faea:	68b9      	ldr	r1, [r7, #8]
 800faec:	4618      	mov	r0, r3
 800faee:	f000 ff63 	bl	80109b8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	4a40      	ldr	r2, [pc, #256]	; (800fbf8 <HAL_TIM_PWM_Start_DMA+0x438>)
 800faf8:	4293      	cmp	r3, r2
 800fafa:	d013      	beq.n	800fb24 <HAL_TIM_PWM_Start_DMA+0x364>
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	4a3e      	ldr	r2, [pc, #248]	; (800fbfc <HAL_TIM_PWM_Start_DMA+0x43c>)
 800fb02:	4293      	cmp	r3, r2
 800fb04:	d00e      	beq.n	800fb24 <HAL_TIM_PWM_Start_DMA+0x364>
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	4a3d      	ldr	r2, [pc, #244]	; (800fc00 <HAL_TIM_PWM_Start_DMA+0x440>)
 800fb0c:	4293      	cmp	r3, r2
 800fb0e:	d009      	beq.n	800fb24 <HAL_TIM_PWM_Start_DMA+0x364>
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	4a3b      	ldr	r2, [pc, #236]	; (800fc04 <HAL_TIM_PWM_Start_DMA+0x444>)
 800fb16:	4293      	cmp	r3, r2
 800fb18:	d004      	beq.n	800fb24 <HAL_TIM_PWM_Start_DMA+0x364>
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	4a3a      	ldr	r2, [pc, #232]	; (800fc08 <HAL_TIM_PWM_Start_DMA+0x448>)
 800fb20:	4293      	cmp	r3, r2
 800fb22:	d101      	bne.n	800fb28 <HAL_TIM_PWM_Start_DMA+0x368>
 800fb24:	2301      	movs	r3, #1
 800fb26:	e000      	b.n	800fb2a <HAL_TIM_PWM_Start_DMA+0x36a>
 800fb28:	2300      	movs	r3, #0
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d007      	beq.n	800fb3e <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fb3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	4a2d      	ldr	r2, [pc, #180]	; (800fbf8 <HAL_TIM_PWM_Start_DMA+0x438>)
 800fb44:	4293      	cmp	r3, r2
 800fb46:	d02c      	beq.n	800fba2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fb50:	d027      	beq.n	800fba2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	4a2d      	ldr	r2, [pc, #180]	; (800fc0c <HAL_TIM_PWM_Start_DMA+0x44c>)
 800fb58:	4293      	cmp	r3, r2
 800fb5a:	d022      	beq.n	800fba2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	4a2b      	ldr	r2, [pc, #172]	; (800fc10 <HAL_TIM_PWM_Start_DMA+0x450>)
 800fb62:	4293      	cmp	r3, r2
 800fb64:	d01d      	beq.n	800fba2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	4a2a      	ldr	r2, [pc, #168]	; (800fc14 <HAL_TIM_PWM_Start_DMA+0x454>)
 800fb6c:	4293      	cmp	r3, r2
 800fb6e:	d018      	beq.n	800fba2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	4a21      	ldr	r2, [pc, #132]	; (800fbfc <HAL_TIM_PWM_Start_DMA+0x43c>)
 800fb76:	4293      	cmp	r3, r2
 800fb78:	d013      	beq.n	800fba2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	4a26      	ldr	r2, [pc, #152]	; (800fc18 <HAL_TIM_PWM_Start_DMA+0x458>)
 800fb80:	4293      	cmp	r3, r2
 800fb82:	d00e      	beq.n	800fba2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	4a1d      	ldr	r2, [pc, #116]	; (800fc00 <HAL_TIM_PWM_Start_DMA+0x440>)
 800fb8a:	4293      	cmp	r3, r2
 800fb8c:	d009      	beq.n	800fba2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	4a22      	ldr	r2, [pc, #136]	; (800fc1c <HAL_TIM_PWM_Start_DMA+0x45c>)
 800fb94:	4293      	cmp	r3, r2
 800fb96:	d004      	beq.n	800fba2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	4a20      	ldr	r2, [pc, #128]	; (800fc20 <HAL_TIM_PWM_Start_DMA+0x460>)
 800fb9e:	4293      	cmp	r3, r2
 800fba0:	d115      	bne.n	800fbce <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	689a      	ldr	r2, [r3, #8]
 800fba8:	4b1e      	ldr	r3, [pc, #120]	; (800fc24 <HAL_TIM_PWM_Start_DMA+0x464>)
 800fbaa:	4013      	ands	r3, r2
 800fbac:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fbae:	693b      	ldr	r3, [r7, #16]
 800fbb0:	2b06      	cmp	r3, #6
 800fbb2:	d015      	beq.n	800fbe0 <HAL_TIM_PWM_Start_DMA+0x420>
 800fbb4:	693b      	ldr	r3, [r7, #16]
 800fbb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fbba:	d011      	beq.n	800fbe0 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	681a      	ldr	r2, [r3, #0]
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	f042 0201 	orr.w	r2, r2, #1
 800fbca:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fbcc:	e008      	b.n	800fbe0 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	681a      	ldr	r2, [r3, #0]
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	f042 0201 	orr.w	r2, r2, #1
 800fbdc:	601a      	str	r2, [r3, #0]
 800fbde:	e000      	b.n	800fbe2 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fbe0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800fbe2:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	3718      	adds	r7, #24
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}
 800fbec:	080101af 	.word	0x080101af
 800fbf0:	08010257 	.word	0x08010257
 800fbf4:	0801011d 	.word	0x0801011d
 800fbf8:	40010000 	.word	0x40010000
 800fbfc:	40010400 	.word	0x40010400
 800fc00:	40014000 	.word	0x40014000
 800fc04:	40014400 	.word	0x40014400
 800fc08:	40014800 	.word	0x40014800
 800fc0c:	40000400 	.word	0x40000400
 800fc10:	40000800 	.word	0x40000800
 800fc14:	40000c00 	.word	0x40000c00
 800fc18:	40001800 	.word	0x40001800
 800fc1c:	4000e000 	.word	0x4000e000
 800fc20:	4000e400 	.word	0x4000e400
 800fc24:	00010007 	.word	0x00010007

0800fc28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b082      	sub	sp, #8
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	691b      	ldr	r3, [r3, #16]
 800fc36:	f003 0302 	and.w	r3, r3, #2
 800fc3a:	2b02      	cmp	r3, #2
 800fc3c:	d122      	bne.n	800fc84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	68db      	ldr	r3, [r3, #12]
 800fc44:	f003 0302 	and.w	r3, r3, #2
 800fc48:	2b02      	cmp	r3, #2
 800fc4a:	d11b      	bne.n	800fc84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	f06f 0202 	mvn.w	r2, #2
 800fc54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	2201      	movs	r2, #1
 800fc5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	699b      	ldr	r3, [r3, #24]
 800fc62:	f003 0303 	and.w	r3, r3, #3
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d003      	beq.n	800fc72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fc6a:	6878      	ldr	r0, [r7, #4]
 800fc6c:	f000 fa24 	bl	80100b8 <HAL_TIM_IC_CaptureCallback>
 800fc70:	e005      	b.n	800fc7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc72:	6878      	ldr	r0, [r7, #4]
 800fc74:	f000 fa16 	bl	80100a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc78:	6878      	ldr	r0, [r7, #4]
 800fc7a:	f000 fa27 	bl	80100cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	2200      	movs	r2, #0
 800fc82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	691b      	ldr	r3, [r3, #16]
 800fc8a:	f003 0304 	and.w	r3, r3, #4
 800fc8e:	2b04      	cmp	r3, #4
 800fc90:	d122      	bne.n	800fcd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	68db      	ldr	r3, [r3, #12]
 800fc98:	f003 0304 	and.w	r3, r3, #4
 800fc9c:	2b04      	cmp	r3, #4
 800fc9e:	d11b      	bne.n	800fcd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	f06f 0204 	mvn.w	r2, #4
 800fca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	2202      	movs	r2, #2
 800fcae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	699b      	ldr	r3, [r3, #24]
 800fcb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d003      	beq.n	800fcc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fcbe:	6878      	ldr	r0, [r7, #4]
 800fcc0:	f000 f9fa 	bl	80100b8 <HAL_TIM_IC_CaptureCallback>
 800fcc4:	e005      	b.n	800fcd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fcc6:	6878      	ldr	r0, [r7, #4]
 800fcc8:	f000 f9ec 	bl	80100a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	f000 f9fd 	bl	80100cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	691b      	ldr	r3, [r3, #16]
 800fcde:	f003 0308 	and.w	r3, r3, #8
 800fce2:	2b08      	cmp	r3, #8
 800fce4:	d122      	bne.n	800fd2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	68db      	ldr	r3, [r3, #12]
 800fcec:	f003 0308 	and.w	r3, r3, #8
 800fcf0:	2b08      	cmp	r3, #8
 800fcf2:	d11b      	bne.n	800fd2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	f06f 0208 	mvn.w	r2, #8
 800fcfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	2204      	movs	r2, #4
 800fd02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	69db      	ldr	r3, [r3, #28]
 800fd0a:	f003 0303 	and.w	r3, r3, #3
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d003      	beq.n	800fd1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fd12:	6878      	ldr	r0, [r7, #4]
 800fd14:	f000 f9d0 	bl	80100b8 <HAL_TIM_IC_CaptureCallback>
 800fd18:	e005      	b.n	800fd26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fd1a:	6878      	ldr	r0, [r7, #4]
 800fd1c:	f000 f9c2 	bl	80100a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fd20:	6878      	ldr	r0, [r7, #4]
 800fd22:	f000 f9d3 	bl	80100cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	2200      	movs	r2, #0
 800fd2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	691b      	ldr	r3, [r3, #16]
 800fd32:	f003 0310 	and.w	r3, r3, #16
 800fd36:	2b10      	cmp	r3, #16
 800fd38:	d122      	bne.n	800fd80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	68db      	ldr	r3, [r3, #12]
 800fd40:	f003 0310 	and.w	r3, r3, #16
 800fd44:	2b10      	cmp	r3, #16
 800fd46:	d11b      	bne.n	800fd80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	f06f 0210 	mvn.w	r2, #16
 800fd50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	2208      	movs	r2, #8
 800fd56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	69db      	ldr	r3, [r3, #28]
 800fd5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d003      	beq.n	800fd6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fd66:	6878      	ldr	r0, [r7, #4]
 800fd68:	f000 f9a6 	bl	80100b8 <HAL_TIM_IC_CaptureCallback>
 800fd6c:	e005      	b.n	800fd7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fd6e:	6878      	ldr	r0, [r7, #4]
 800fd70:	f000 f998 	bl	80100a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fd74:	6878      	ldr	r0, [r7, #4]
 800fd76:	f000 f9a9 	bl	80100cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	691b      	ldr	r3, [r3, #16]
 800fd86:	f003 0301 	and.w	r3, r3, #1
 800fd8a:	2b01      	cmp	r3, #1
 800fd8c:	d10e      	bne.n	800fdac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	68db      	ldr	r3, [r3, #12]
 800fd94:	f003 0301 	and.w	r3, r3, #1
 800fd98:	2b01      	cmp	r3, #1
 800fd9a:	d107      	bne.n	800fdac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	f06f 0201 	mvn.w	r2, #1
 800fda4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fda6:	6878      	ldr	r0, [r7, #4]
 800fda8:	f000 f972 	bl	8010090 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	691b      	ldr	r3, [r3, #16]
 800fdb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fdb6:	2b80      	cmp	r3, #128	; 0x80
 800fdb8:	d10e      	bne.n	800fdd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	68db      	ldr	r3, [r3, #12]
 800fdc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fdc4:	2b80      	cmp	r3, #128	; 0x80
 800fdc6:	d107      	bne.n	800fdd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fdd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fdd2:	6878      	ldr	r0, [r7, #4]
 800fdd4:	f000 febc 	bl	8010b50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	691b      	ldr	r3, [r3, #16]
 800fdde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fde2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fde6:	d10e      	bne.n	800fe06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	68db      	ldr	r3, [r3, #12]
 800fdee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fdf2:	2b80      	cmp	r3, #128	; 0x80
 800fdf4:	d107      	bne.n	800fe06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800fdfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800fe00:	6878      	ldr	r0, [r7, #4]
 800fe02:	f000 feaf 	bl	8010b64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	691b      	ldr	r3, [r3, #16]
 800fe0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe10:	2b40      	cmp	r3, #64	; 0x40
 800fe12:	d10e      	bne.n	800fe32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	68db      	ldr	r3, [r3, #12]
 800fe1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe1e:	2b40      	cmp	r3, #64	; 0x40
 800fe20:	d107      	bne.n	800fe32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fe2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f000 f961 	bl	80100f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	691b      	ldr	r3, [r3, #16]
 800fe38:	f003 0320 	and.w	r3, r3, #32
 800fe3c:	2b20      	cmp	r3, #32
 800fe3e:	d10e      	bne.n	800fe5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	68db      	ldr	r3, [r3, #12]
 800fe46:	f003 0320 	and.w	r3, r3, #32
 800fe4a:	2b20      	cmp	r3, #32
 800fe4c:	d107      	bne.n	800fe5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	f06f 0220 	mvn.w	r2, #32
 800fe56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fe58:	6878      	ldr	r0, [r7, #4]
 800fe5a:	f000 fe6f 	bl	8010b3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fe5e:	bf00      	nop
 800fe60:	3708      	adds	r7, #8
 800fe62:	46bd      	mov	sp, r7
 800fe64:	bd80      	pop	{r7, pc}
	...

0800fe68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b086      	sub	sp, #24
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	60f8      	str	r0, [r7, #12]
 800fe70:	60b9      	str	r1, [r7, #8]
 800fe72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fe74:	2300      	movs	r3, #0
 800fe76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe7e:	2b01      	cmp	r3, #1
 800fe80:	d101      	bne.n	800fe86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800fe82:	2302      	movs	r3, #2
 800fe84:	e0ff      	b.n	8010086 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	2201      	movs	r2, #1
 800fe8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	2b14      	cmp	r3, #20
 800fe92:	f200 80f0 	bhi.w	8010076 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800fe96:	a201      	add	r2, pc, #4	; (adr r2, 800fe9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fe98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe9c:	0800fef1 	.word	0x0800fef1
 800fea0:	08010077 	.word	0x08010077
 800fea4:	08010077 	.word	0x08010077
 800fea8:	08010077 	.word	0x08010077
 800feac:	0800ff31 	.word	0x0800ff31
 800feb0:	08010077 	.word	0x08010077
 800feb4:	08010077 	.word	0x08010077
 800feb8:	08010077 	.word	0x08010077
 800febc:	0800ff73 	.word	0x0800ff73
 800fec0:	08010077 	.word	0x08010077
 800fec4:	08010077 	.word	0x08010077
 800fec8:	08010077 	.word	0x08010077
 800fecc:	0800ffb3 	.word	0x0800ffb3
 800fed0:	08010077 	.word	0x08010077
 800fed4:	08010077 	.word	0x08010077
 800fed8:	08010077 	.word	0x08010077
 800fedc:	0800fff5 	.word	0x0800fff5
 800fee0:	08010077 	.word	0x08010077
 800fee4:	08010077 	.word	0x08010077
 800fee8:	08010077 	.word	0x08010077
 800feec:	08010035 	.word	0x08010035
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	68b9      	ldr	r1, [r7, #8]
 800fef6:	4618      	mov	r0, r3
 800fef8:	f000 fa88 	bl	801040c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	699a      	ldr	r2, [r3, #24]
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	f042 0208 	orr.w	r2, r2, #8
 800ff0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	699a      	ldr	r2, [r3, #24]
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	f022 0204 	bic.w	r2, r2, #4
 800ff1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	6999      	ldr	r1, [r3, #24]
 800ff22:	68bb      	ldr	r3, [r7, #8]
 800ff24:	691a      	ldr	r2, [r3, #16]
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	430a      	orrs	r2, r1
 800ff2c:	619a      	str	r2, [r3, #24]
      break;
 800ff2e:	e0a5      	b.n	801007c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	68b9      	ldr	r1, [r7, #8]
 800ff36:	4618      	mov	r0, r3
 800ff38:	f000 faf8 	bl	801052c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	699a      	ldr	r2, [r3, #24]
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ff4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	699a      	ldr	r2, [r3, #24]
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ff5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	6999      	ldr	r1, [r3, #24]
 800ff62:	68bb      	ldr	r3, [r7, #8]
 800ff64:	691b      	ldr	r3, [r3, #16]
 800ff66:	021a      	lsls	r2, r3, #8
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	430a      	orrs	r2, r1
 800ff6e:	619a      	str	r2, [r3, #24]
      break;
 800ff70:	e084      	b.n	801007c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	68b9      	ldr	r1, [r7, #8]
 800ff78:	4618      	mov	r0, r3
 800ff7a:	f000 fb61 	bl	8010640 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	69da      	ldr	r2, [r3, #28]
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	f042 0208 	orr.w	r2, r2, #8
 800ff8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	69da      	ldr	r2, [r3, #28]
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	f022 0204 	bic.w	r2, r2, #4
 800ff9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	69d9      	ldr	r1, [r3, #28]
 800ffa4:	68bb      	ldr	r3, [r7, #8]
 800ffa6:	691a      	ldr	r2, [r3, #16]
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	430a      	orrs	r2, r1
 800ffae:	61da      	str	r2, [r3, #28]
      break;
 800ffb0:	e064      	b.n	801007c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	68b9      	ldr	r1, [r7, #8]
 800ffb8:	4618      	mov	r0, r3
 800ffba:	f000 fbc9 	bl	8010750 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	69da      	ldr	r2, [r3, #28]
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ffcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	69da      	ldr	r2, [r3, #28]
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ffdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	69d9      	ldr	r1, [r3, #28]
 800ffe4:	68bb      	ldr	r3, [r7, #8]
 800ffe6:	691b      	ldr	r3, [r3, #16]
 800ffe8:	021a      	lsls	r2, r3, #8
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	430a      	orrs	r2, r1
 800fff0:	61da      	str	r2, [r3, #28]
      break;
 800fff2:	e043      	b.n	801007c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	68b9      	ldr	r1, [r7, #8]
 800fffa:	4618      	mov	r0, r3
 800fffc:	f000 fc12 	bl	8010824 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	f042 0208 	orr.w	r2, r2, #8
 801000e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	f022 0204 	bic.w	r2, r2, #4
 801001e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010026:	68bb      	ldr	r3, [r7, #8]
 8010028:	691a      	ldr	r2, [r3, #16]
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	430a      	orrs	r2, r1
 8010030:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010032:	e023      	b.n	801007c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	68b9      	ldr	r1, [r7, #8]
 801003a:	4618      	mov	r0, r3
 801003c:	f000 fc56 	bl	80108ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801004e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801005e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010066:	68bb      	ldr	r3, [r7, #8]
 8010068:	691b      	ldr	r3, [r3, #16]
 801006a:	021a      	lsls	r2, r3, #8
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	430a      	orrs	r2, r1
 8010072:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010074:	e002      	b.n	801007c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8010076:	2301      	movs	r3, #1
 8010078:	75fb      	strb	r3, [r7, #23]
      break;
 801007a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	2200      	movs	r2, #0
 8010080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010084:	7dfb      	ldrb	r3, [r7, #23]
}
 8010086:	4618      	mov	r0, r3
 8010088:	3718      	adds	r7, #24
 801008a:	46bd      	mov	sp, r7
 801008c:	bd80      	pop	{r7, pc}
 801008e:	bf00      	nop

08010090 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010090:	b480      	push	{r7}
 8010092:	b083      	sub	sp, #12
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8010098:	bf00      	nop
 801009a:	370c      	adds	r7, #12
 801009c:	46bd      	mov	sp, r7
 801009e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a2:	4770      	bx	lr

080100a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80100a4:	b480      	push	{r7}
 80100a6:	b083      	sub	sp, #12
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80100ac:	bf00      	nop
 80100ae:	370c      	adds	r7, #12
 80100b0:	46bd      	mov	sp, r7
 80100b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b6:	4770      	bx	lr

080100b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80100b8:	b480      	push	{r7}
 80100ba:	b083      	sub	sp, #12
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80100c0:	bf00      	nop
 80100c2:	370c      	adds	r7, #12
 80100c4:	46bd      	mov	sp, r7
 80100c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ca:	4770      	bx	lr

080100cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80100cc:	b480      	push	{r7}
 80100ce:	b083      	sub	sp, #12
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80100d4:	bf00      	nop
 80100d6:	370c      	adds	r7, #12
 80100d8:	46bd      	mov	sp, r7
 80100da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100de:	4770      	bx	lr

080100e0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80100e0:	b480      	push	{r7}
 80100e2:	b083      	sub	sp, #12
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80100e8:	bf00      	nop
 80100ea:	370c      	adds	r7, #12
 80100ec:	46bd      	mov	sp, r7
 80100ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f2:	4770      	bx	lr

080100f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80100f4:	b480      	push	{r7}
 80100f6:	b083      	sub	sp, #12
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80100fc:	bf00      	nop
 80100fe:	370c      	adds	r7, #12
 8010100:	46bd      	mov	sp, r7
 8010102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010106:	4770      	bx	lr

08010108 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8010108:	b480      	push	{r7}
 801010a:	b083      	sub	sp, #12
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8010110:	bf00      	nop
 8010112:	370c      	adds	r7, #12
 8010114:	46bd      	mov	sp, r7
 8010116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011a:	4770      	bx	lr

0801011c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b084      	sub	sp, #16
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010128:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801012e:	687a      	ldr	r2, [r7, #4]
 8010130:	429a      	cmp	r2, r3
 8010132:	d107      	bne.n	8010144 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	2201      	movs	r2, #1
 8010138:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	2201      	movs	r2, #1
 801013e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010142:	e02a      	b.n	801019a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010148:	687a      	ldr	r2, [r7, #4]
 801014a:	429a      	cmp	r2, r3
 801014c:	d107      	bne.n	801015e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	2202      	movs	r2, #2
 8010152:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	2201      	movs	r2, #1
 8010158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801015c:	e01d      	b.n	801019a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010162:	687a      	ldr	r2, [r7, #4]
 8010164:	429a      	cmp	r2, r3
 8010166:	d107      	bne.n	8010178 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	2204      	movs	r2, #4
 801016c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	2201      	movs	r2, #1
 8010172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010176:	e010      	b.n	801019a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801017c:	687a      	ldr	r2, [r7, #4]
 801017e:	429a      	cmp	r2, r3
 8010180:	d107      	bne.n	8010192 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	2208      	movs	r2, #8
 8010186:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	2201      	movs	r2, #1
 801018c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010190:	e003      	b.n	801019a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	2201      	movs	r2, #1
 8010196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 801019a:	68f8      	ldr	r0, [r7, #12]
 801019c:	f7ff ffb4 	bl	8010108 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	2200      	movs	r2, #0
 80101a4:	771a      	strb	r2, [r3, #28]
}
 80101a6:	bf00      	nop
 80101a8:	3710      	adds	r7, #16
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd80      	pop	{r7, pc}

080101ae <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80101ae:	b580      	push	{r7, lr}
 80101b0:	b084      	sub	sp, #16
 80101b2:	af00      	add	r7, sp, #0
 80101b4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101ba:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101c0:	687a      	ldr	r2, [r7, #4]
 80101c2:	429a      	cmp	r2, r3
 80101c4:	d10b      	bne.n	80101de <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	2201      	movs	r2, #1
 80101ca:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	69db      	ldr	r3, [r3, #28]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d136      	bne.n	8010242 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	2201      	movs	r2, #1
 80101d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80101dc:	e031      	b.n	8010242 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101e2:	687a      	ldr	r2, [r7, #4]
 80101e4:	429a      	cmp	r2, r3
 80101e6:	d10b      	bne.n	8010200 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	2202      	movs	r2, #2
 80101ec:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	69db      	ldr	r3, [r3, #28]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d125      	bne.n	8010242 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	2201      	movs	r2, #1
 80101fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80101fe:	e020      	b.n	8010242 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010204:	687a      	ldr	r2, [r7, #4]
 8010206:	429a      	cmp	r2, r3
 8010208:	d10b      	bne.n	8010222 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	2204      	movs	r2, #4
 801020e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	69db      	ldr	r3, [r3, #28]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d114      	bne.n	8010242 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	2201      	movs	r2, #1
 801021c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010220:	e00f      	b.n	8010242 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010226:	687a      	ldr	r2, [r7, #4]
 8010228:	429a      	cmp	r2, r3
 801022a:	d10a      	bne.n	8010242 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	2208      	movs	r2, #8
 8010230:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	69db      	ldr	r3, [r3, #28]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d103      	bne.n	8010242 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	2201      	movs	r2, #1
 801023e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010242:	68f8      	ldr	r0, [r7, #12]
 8010244:	f7ff ff42 	bl	80100cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	2200      	movs	r2, #0
 801024c:	771a      	strb	r2, [r3, #28]
}
 801024e:	bf00      	nop
 8010250:	3710      	adds	r7, #16
 8010252:	46bd      	mov	sp, r7
 8010254:	bd80      	pop	{r7, pc}

08010256 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010256:	b580      	push	{r7, lr}
 8010258:	b084      	sub	sp, #16
 801025a:	af00      	add	r7, sp, #0
 801025c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010262:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010268:	687a      	ldr	r2, [r7, #4]
 801026a:	429a      	cmp	r2, r3
 801026c:	d103      	bne.n	8010276 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	2201      	movs	r2, #1
 8010272:	771a      	strb	r2, [r3, #28]
 8010274:	e019      	b.n	80102aa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801027a:	687a      	ldr	r2, [r7, #4]
 801027c:	429a      	cmp	r2, r3
 801027e:	d103      	bne.n	8010288 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	2202      	movs	r2, #2
 8010284:	771a      	strb	r2, [r3, #28]
 8010286:	e010      	b.n	80102aa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801028c:	687a      	ldr	r2, [r7, #4]
 801028e:	429a      	cmp	r2, r3
 8010290:	d103      	bne.n	801029a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	2204      	movs	r2, #4
 8010296:	771a      	strb	r2, [r3, #28]
 8010298:	e007      	b.n	80102aa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801029e:	687a      	ldr	r2, [r7, #4]
 80102a0:	429a      	cmp	r2, r3
 80102a2:	d102      	bne.n	80102aa <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	2208      	movs	r2, #8
 80102a8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80102aa:	68f8      	ldr	r0, [r7, #12]
 80102ac:	f7ff ff18 	bl	80100e0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	2200      	movs	r2, #0
 80102b4:	771a      	strb	r2, [r3, #28]
}
 80102b6:	bf00      	nop
 80102b8:	3710      	adds	r7, #16
 80102ba:	46bd      	mov	sp, r7
 80102bc:	bd80      	pop	{r7, pc}
	...

080102c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80102c0:	b480      	push	{r7}
 80102c2:	b085      	sub	sp, #20
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
 80102c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	4a44      	ldr	r2, [pc, #272]	; (80103e4 <TIM_Base_SetConfig+0x124>)
 80102d4:	4293      	cmp	r3, r2
 80102d6:	d013      	beq.n	8010300 <TIM_Base_SetConfig+0x40>
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80102de:	d00f      	beq.n	8010300 <TIM_Base_SetConfig+0x40>
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	4a41      	ldr	r2, [pc, #260]	; (80103e8 <TIM_Base_SetConfig+0x128>)
 80102e4:	4293      	cmp	r3, r2
 80102e6:	d00b      	beq.n	8010300 <TIM_Base_SetConfig+0x40>
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	4a40      	ldr	r2, [pc, #256]	; (80103ec <TIM_Base_SetConfig+0x12c>)
 80102ec:	4293      	cmp	r3, r2
 80102ee:	d007      	beq.n	8010300 <TIM_Base_SetConfig+0x40>
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	4a3f      	ldr	r2, [pc, #252]	; (80103f0 <TIM_Base_SetConfig+0x130>)
 80102f4:	4293      	cmp	r3, r2
 80102f6:	d003      	beq.n	8010300 <TIM_Base_SetConfig+0x40>
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	4a3e      	ldr	r2, [pc, #248]	; (80103f4 <TIM_Base_SetConfig+0x134>)
 80102fc:	4293      	cmp	r3, r2
 80102fe:	d108      	bne.n	8010312 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010306:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010308:	683b      	ldr	r3, [r7, #0]
 801030a:	685b      	ldr	r3, [r3, #4]
 801030c:	68fa      	ldr	r2, [r7, #12]
 801030e:	4313      	orrs	r3, r2
 8010310:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	4a33      	ldr	r2, [pc, #204]	; (80103e4 <TIM_Base_SetConfig+0x124>)
 8010316:	4293      	cmp	r3, r2
 8010318:	d027      	beq.n	801036a <TIM_Base_SetConfig+0xaa>
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010320:	d023      	beq.n	801036a <TIM_Base_SetConfig+0xaa>
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	4a30      	ldr	r2, [pc, #192]	; (80103e8 <TIM_Base_SetConfig+0x128>)
 8010326:	4293      	cmp	r3, r2
 8010328:	d01f      	beq.n	801036a <TIM_Base_SetConfig+0xaa>
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	4a2f      	ldr	r2, [pc, #188]	; (80103ec <TIM_Base_SetConfig+0x12c>)
 801032e:	4293      	cmp	r3, r2
 8010330:	d01b      	beq.n	801036a <TIM_Base_SetConfig+0xaa>
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	4a2e      	ldr	r2, [pc, #184]	; (80103f0 <TIM_Base_SetConfig+0x130>)
 8010336:	4293      	cmp	r3, r2
 8010338:	d017      	beq.n	801036a <TIM_Base_SetConfig+0xaa>
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	4a2d      	ldr	r2, [pc, #180]	; (80103f4 <TIM_Base_SetConfig+0x134>)
 801033e:	4293      	cmp	r3, r2
 8010340:	d013      	beq.n	801036a <TIM_Base_SetConfig+0xaa>
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	4a2c      	ldr	r2, [pc, #176]	; (80103f8 <TIM_Base_SetConfig+0x138>)
 8010346:	4293      	cmp	r3, r2
 8010348:	d00f      	beq.n	801036a <TIM_Base_SetConfig+0xaa>
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	4a2b      	ldr	r2, [pc, #172]	; (80103fc <TIM_Base_SetConfig+0x13c>)
 801034e:	4293      	cmp	r3, r2
 8010350:	d00b      	beq.n	801036a <TIM_Base_SetConfig+0xaa>
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	4a2a      	ldr	r2, [pc, #168]	; (8010400 <TIM_Base_SetConfig+0x140>)
 8010356:	4293      	cmp	r3, r2
 8010358:	d007      	beq.n	801036a <TIM_Base_SetConfig+0xaa>
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	4a29      	ldr	r2, [pc, #164]	; (8010404 <TIM_Base_SetConfig+0x144>)
 801035e:	4293      	cmp	r3, r2
 8010360:	d003      	beq.n	801036a <TIM_Base_SetConfig+0xaa>
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	4a28      	ldr	r2, [pc, #160]	; (8010408 <TIM_Base_SetConfig+0x148>)
 8010366:	4293      	cmp	r3, r2
 8010368:	d108      	bne.n	801037c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010370:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010372:	683b      	ldr	r3, [r7, #0]
 8010374:	68db      	ldr	r3, [r3, #12]
 8010376:	68fa      	ldr	r2, [r7, #12]
 8010378:	4313      	orrs	r3, r2
 801037a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010382:	683b      	ldr	r3, [r7, #0]
 8010384:	695b      	ldr	r3, [r3, #20]
 8010386:	4313      	orrs	r3, r2
 8010388:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	68fa      	ldr	r2, [r7, #12]
 801038e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010390:	683b      	ldr	r3, [r7, #0]
 8010392:	689a      	ldr	r2, [r3, #8]
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010398:	683b      	ldr	r3, [r7, #0]
 801039a:	681a      	ldr	r2, [r3, #0]
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	4a10      	ldr	r2, [pc, #64]	; (80103e4 <TIM_Base_SetConfig+0x124>)
 80103a4:	4293      	cmp	r3, r2
 80103a6:	d00f      	beq.n	80103c8 <TIM_Base_SetConfig+0x108>
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	4a12      	ldr	r2, [pc, #72]	; (80103f4 <TIM_Base_SetConfig+0x134>)
 80103ac:	4293      	cmp	r3, r2
 80103ae:	d00b      	beq.n	80103c8 <TIM_Base_SetConfig+0x108>
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	4a11      	ldr	r2, [pc, #68]	; (80103f8 <TIM_Base_SetConfig+0x138>)
 80103b4:	4293      	cmp	r3, r2
 80103b6:	d007      	beq.n	80103c8 <TIM_Base_SetConfig+0x108>
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	4a10      	ldr	r2, [pc, #64]	; (80103fc <TIM_Base_SetConfig+0x13c>)
 80103bc:	4293      	cmp	r3, r2
 80103be:	d003      	beq.n	80103c8 <TIM_Base_SetConfig+0x108>
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	4a0f      	ldr	r2, [pc, #60]	; (8010400 <TIM_Base_SetConfig+0x140>)
 80103c4:	4293      	cmp	r3, r2
 80103c6:	d103      	bne.n	80103d0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80103c8:	683b      	ldr	r3, [r7, #0]
 80103ca:	691a      	ldr	r2, [r3, #16]
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	2201      	movs	r2, #1
 80103d4:	615a      	str	r2, [r3, #20]
}
 80103d6:	bf00      	nop
 80103d8:	3714      	adds	r7, #20
 80103da:	46bd      	mov	sp, r7
 80103dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e0:	4770      	bx	lr
 80103e2:	bf00      	nop
 80103e4:	40010000 	.word	0x40010000
 80103e8:	40000400 	.word	0x40000400
 80103ec:	40000800 	.word	0x40000800
 80103f0:	40000c00 	.word	0x40000c00
 80103f4:	40010400 	.word	0x40010400
 80103f8:	40014000 	.word	0x40014000
 80103fc:	40014400 	.word	0x40014400
 8010400:	40014800 	.word	0x40014800
 8010404:	4000e000 	.word	0x4000e000
 8010408:	4000e400 	.word	0x4000e400

0801040c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801040c:	b480      	push	{r7}
 801040e:	b087      	sub	sp, #28
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
 8010414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	6a1b      	ldr	r3, [r3, #32]
 801041a:	f023 0201 	bic.w	r2, r3, #1
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	6a1b      	ldr	r3, [r3, #32]
 8010426:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	685b      	ldr	r3, [r3, #4]
 801042c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	699b      	ldr	r3, [r3, #24]
 8010432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010434:	68fa      	ldr	r2, [r7, #12]
 8010436:	4b37      	ldr	r3, [pc, #220]	; (8010514 <TIM_OC1_SetConfig+0x108>)
 8010438:	4013      	ands	r3, r2
 801043a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	f023 0303 	bic.w	r3, r3, #3
 8010442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010444:	683b      	ldr	r3, [r7, #0]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	68fa      	ldr	r2, [r7, #12]
 801044a:	4313      	orrs	r3, r2
 801044c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801044e:	697b      	ldr	r3, [r7, #20]
 8010450:	f023 0302 	bic.w	r3, r3, #2
 8010454:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010456:	683b      	ldr	r3, [r7, #0]
 8010458:	689b      	ldr	r3, [r3, #8]
 801045a:	697a      	ldr	r2, [r7, #20]
 801045c:	4313      	orrs	r3, r2
 801045e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	4a2d      	ldr	r2, [pc, #180]	; (8010518 <TIM_OC1_SetConfig+0x10c>)
 8010464:	4293      	cmp	r3, r2
 8010466:	d00f      	beq.n	8010488 <TIM_OC1_SetConfig+0x7c>
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	4a2c      	ldr	r2, [pc, #176]	; (801051c <TIM_OC1_SetConfig+0x110>)
 801046c:	4293      	cmp	r3, r2
 801046e:	d00b      	beq.n	8010488 <TIM_OC1_SetConfig+0x7c>
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	4a2b      	ldr	r2, [pc, #172]	; (8010520 <TIM_OC1_SetConfig+0x114>)
 8010474:	4293      	cmp	r3, r2
 8010476:	d007      	beq.n	8010488 <TIM_OC1_SetConfig+0x7c>
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	4a2a      	ldr	r2, [pc, #168]	; (8010524 <TIM_OC1_SetConfig+0x118>)
 801047c:	4293      	cmp	r3, r2
 801047e:	d003      	beq.n	8010488 <TIM_OC1_SetConfig+0x7c>
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	4a29      	ldr	r2, [pc, #164]	; (8010528 <TIM_OC1_SetConfig+0x11c>)
 8010484:	4293      	cmp	r3, r2
 8010486:	d10c      	bne.n	80104a2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010488:	697b      	ldr	r3, [r7, #20]
 801048a:	f023 0308 	bic.w	r3, r3, #8
 801048e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010490:	683b      	ldr	r3, [r7, #0]
 8010492:	68db      	ldr	r3, [r3, #12]
 8010494:	697a      	ldr	r2, [r7, #20]
 8010496:	4313      	orrs	r3, r2
 8010498:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801049a:	697b      	ldr	r3, [r7, #20]
 801049c:	f023 0304 	bic.w	r3, r3, #4
 80104a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	4a1c      	ldr	r2, [pc, #112]	; (8010518 <TIM_OC1_SetConfig+0x10c>)
 80104a6:	4293      	cmp	r3, r2
 80104a8:	d00f      	beq.n	80104ca <TIM_OC1_SetConfig+0xbe>
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	4a1b      	ldr	r2, [pc, #108]	; (801051c <TIM_OC1_SetConfig+0x110>)
 80104ae:	4293      	cmp	r3, r2
 80104b0:	d00b      	beq.n	80104ca <TIM_OC1_SetConfig+0xbe>
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	4a1a      	ldr	r2, [pc, #104]	; (8010520 <TIM_OC1_SetConfig+0x114>)
 80104b6:	4293      	cmp	r3, r2
 80104b8:	d007      	beq.n	80104ca <TIM_OC1_SetConfig+0xbe>
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	4a19      	ldr	r2, [pc, #100]	; (8010524 <TIM_OC1_SetConfig+0x118>)
 80104be:	4293      	cmp	r3, r2
 80104c0:	d003      	beq.n	80104ca <TIM_OC1_SetConfig+0xbe>
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	4a18      	ldr	r2, [pc, #96]	; (8010528 <TIM_OC1_SetConfig+0x11c>)
 80104c6:	4293      	cmp	r3, r2
 80104c8:	d111      	bne.n	80104ee <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80104ca:	693b      	ldr	r3, [r7, #16]
 80104cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80104d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80104d2:	693b      	ldr	r3, [r7, #16]
 80104d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80104d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80104da:	683b      	ldr	r3, [r7, #0]
 80104dc:	695b      	ldr	r3, [r3, #20]
 80104de:	693a      	ldr	r2, [r7, #16]
 80104e0:	4313      	orrs	r3, r2
 80104e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80104e4:	683b      	ldr	r3, [r7, #0]
 80104e6:	699b      	ldr	r3, [r3, #24]
 80104e8:	693a      	ldr	r2, [r7, #16]
 80104ea:	4313      	orrs	r3, r2
 80104ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	693a      	ldr	r2, [r7, #16]
 80104f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	68fa      	ldr	r2, [r7, #12]
 80104f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80104fa:	683b      	ldr	r3, [r7, #0]
 80104fc:	685a      	ldr	r2, [r3, #4]
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	697a      	ldr	r2, [r7, #20]
 8010506:	621a      	str	r2, [r3, #32]
}
 8010508:	bf00      	nop
 801050a:	371c      	adds	r7, #28
 801050c:	46bd      	mov	sp, r7
 801050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010512:	4770      	bx	lr
 8010514:	fffeff8f 	.word	0xfffeff8f
 8010518:	40010000 	.word	0x40010000
 801051c:	40010400 	.word	0x40010400
 8010520:	40014000 	.word	0x40014000
 8010524:	40014400 	.word	0x40014400
 8010528:	40014800 	.word	0x40014800

0801052c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801052c:	b480      	push	{r7}
 801052e:	b087      	sub	sp, #28
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
 8010534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	6a1b      	ldr	r3, [r3, #32]
 801053a:	f023 0210 	bic.w	r2, r3, #16
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	6a1b      	ldr	r3, [r3, #32]
 8010546:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	685b      	ldr	r3, [r3, #4]
 801054c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	699b      	ldr	r3, [r3, #24]
 8010552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010554:	68fa      	ldr	r2, [r7, #12]
 8010556:	4b34      	ldr	r3, [pc, #208]	; (8010628 <TIM_OC2_SetConfig+0xfc>)
 8010558:	4013      	ands	r3, r2
 801055a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010562:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010564:	683b      	ldr	r3, [r7, #0]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	021b      	lsls	r3, r3, #8
 801056a:	68fa      	ldr	r2, [r7, #12]
 801056c:	4313      	orrs	r3, r2
 801056e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010570:	697b      	ldr	r3, [r7, #20]
 8010572:	f023 0320 	bic.w	r3, r3, #32
 8010576:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010578:	683b      	ldr	r3, [r7, #0]
 801057a:	689b      	ldr	r3, [r3, #8]
 801057c:	011b      	lsls	r3, r3, #4
 801057e:	697a      	ldr	r2, [r7, #20]
 8010580:	4313      	orrs	r3, r2
 8010582:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	4a29      	ldr	r2, [pc, #164]	; (801062c <TIM_OC2_SetConfig+0x100>)
 8010588:	4293      	cmp	r3, r2
 801058a:	d003      	beq.n	8010594 <TIM_OC2_SetConfig+0x68>
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	4a28      	ldr	r2, [pc, #160]	; (8010630 <TIM_OC2_SetConfig+0x104>)
 8010590:	4293      	cmp	r3, r2
 8010592:	d10d      	bne.n	80105b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010594:	697b      	ldr	r3, [r7, #20]
 8010596:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801059a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801059c:	683b      	ldr	r3, [r7, #0]
 801059e:	68db      	ldr	r3, [r3, #12]
 80105a0:	011b      	lsls	r3, r3, #4
 80105a2:	697a      	ldr	r2, [r7, #20]
 80105a4:	4313      	orrs	r3, r2
 80105a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80105a8:	697b      	ldr	r3, [r7, #20]
 80105aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80105ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	4a1e      	ldr	r2, [pc, #120]	; (801062c <TIM_OC2_SetConfig+0x100>)
 80105b4:	4293      	cmp	r3, r2
 80105b6:	d00f      	beq.n	80105d8 <TIM_OC2_SetConfig+0xac>
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	4a1d      	ldr	r2, [pc, #116]	; (8010630 <TIM_OC2_SetConfig+0x104>)
 80105bc:	4293      	cmp	r3, r2
 80105be:	d00b      	beq.n	80105d8 <TIM_OC2_SetConfig+0xac>
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	4a1c      	ldr	r2, [pc, #112]	; (8010634 <TIM_OC2_SetConfig+0x108>)
 80105c4:	4293      	cmp	r3, r2
 80105c6:	d007      	beq.n	80105d8 <TIM_OC2_SetConfig+0xac>
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	4a1b      	ldr	r2, [pc, #108]	; (8010638 <TIM_OC2_SetConfig+0x10c>)
 80105cc:	4293      	cmp	r3, r2
 80105ce:	d003      	beq.n	80105d8 <TIM_OC2_SetConfig+0xac>
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	4a1a      	ldr	r2, [pc, #104]	; (801063c <TIM_OC2_SetConfig+0x110>)
 80105d4:	4293      	cmp	r3, r2
 80105d6:	d113      	bne.n	8010600 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80105d8:	693b      	ldr	r3, [r7, #16]
 80105da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80105de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80105e0:	693b      	ldr	r3, [r7, #16]
 80105e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80105e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80105e8:	683b      	ldr	r3, [r7, #0]
 80105ea:	695b      	ldr	r3, [r3, #20]
 80105ec:	009b      	lsls	r3, r3, #2
 80105ee:	693a      	ldr	r2, [r7, #16]
 80105f0:	4313      	orrs	r3, r2
 80105f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80105f4:	683b      	ldr	r3, [r7, #0]
 80105f6:	699b      	ldr	r3, [r3, #24]
 80105f8:	009b      	lsls	r3, r3, #2
 80105fa:	693a      	ldr	r2, [r7, #16]
 80105fc:	4313      	orrs	r3, r2
 80105fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	693a      	ldr	r2, [r7, #16]
 8010604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	68fa      	ldr	r2, [r7, #12]
 801060a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801060c:	683b      	ldr	r3, [r7, #0]
 801060e:	685a      	ldr	r2, [r3, #4]
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	697a      	ldr	r2, [r7, #20]
 8010618:	621a      	str	r2, [r3, #32]
}
 801061a:	bf00      	nop
 801061c:	371c      	adds	r7, #28
 801061e:	46bd      	mov	sp, r7
 8010620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010624:	4770      	bx	lr
 8010626:	bf00      	nop
 8010628:	feff8fff 	.word	0xfeff8fff
 801062c:	40010000 	.word	0x40010000
 8010630:	40010400 	.word	0x40010400
 8010634:	40014000 	.word	0x40014000
 8010638:	40014400 	.word	0x40014400
 801063c:	40014800 	.word	0x40014800

08010640 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010640:	b480      	push	{r7}
 8010642:	b087      	sub	sp, #28
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
 8010648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	6a1b      	ldr	r3, [r3, #32]
 801064e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	6a1b      	ldr	r3, [r3, #32]
 801065a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	685b      	ldr	r3, [r3, #4]
 8010660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	69db      	ldr	r3, [r3, #28]
 8010666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010668:	68fa      	ldr	r2, [r7, #12]
 801066a:	4b33      	ldr	r3, [pc, #204]	; (8010738 <TIM_OC3_SetConfig+0xf8>)
 801066c:	4013      	ands	r3, r2
 801066e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	f023 0303 	bic.w	r3, r3, #3
 8010676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010678:	683b      	ldr	r3, [r7, #0]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	68fa      	ldr	r2, [r7, #12]
 801067e:	4313      	orrs	r3, r2
 8010680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010682:	697b      	ldr	r3, [r7, #20]
 8010684:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010688:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801068a:	683b      	ldr	r3, [r7, #0]
 801068c:	689b      	ldr	r3, [r3, #8]
 801068e:	021b      	lsls	r3, r3, #8
 8010690:	697a      	ldr	r2, [r7, #20]
 8010692:	4313      	orrs	r3, r2
 8010694:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	4a28      	ldr	r2, [pc, #160]	; (801073c <TIM_OC3_SetConfig+0xfc>)
 801069a:	4293      	cmp	r3, r2
 801069c:	d003      	beq.n	80106a6 <TIM_OC3_SetConfig+0x66>
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	4a27      	ldr	r2, [pc, #156]	; (8010740 <TIM_OC3_SetConfig+0x100>)
 80106a2:	4293      	cmp	r3, r2
 80106a4:	d10d      	bne.n	80106c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80106a6:	697b      	ldr	r3, [r7, #20]
 80106a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80106ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80106ae:	683b      	ldr	r3, [r7, #0]
 80106b0:	68db      	ldr	r3, [r3, #12]
 80106b2:	021b      	lsls	r3, r3, #8
 80106b4:	697a      	ldr	r2, [r7, #20]
 80106b6:	4313      	orrs	r3, r2
 80106b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80106ba:	697b      	ldr	r3, [r7, #20]
 80106bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80106c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	4a1d      	ldr	r2, [pc, #116]	; (801073c <TIM_OC3_SetConfig+0xfc>)
 80106c6:	4293      	cmp	r3, r2
 80106c8:	d00f      	beq.n	80106ea <TIM_OC3_SetConfig+0xaa>
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	4a1c      	ldr	r2, [pc, #112]	; (8010740 <TIM_OC3_SetConfig+0x100>)
 80106ce:	4293      	cmp	r3, r2
 80106d0:	d00b      	beq.n	80106ea <TIM_OC3_SetConfig+0xaa>
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	4a1b      	ldr	r2, [pc, #108]	; (8010744 <TIM_OC3_SetConfig+0x104>)
 80106d6:	4293      	cmp	r3, r2
 80106d8:	d007      	beq.n	80106ea <TIM_OC3_SetConfig+0xaa>
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	4a1a      	ldr	r2, [pc, #104]	; (8010748 <TIM_OC3_SetConfig+0x108>)
 80106de:	4293      	cmp	r3, r2
 80106e0:	d003      	beq.n	80106ea <TIM_OC3_SetConfig+0xaa>
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	4a19      	ldr	r2, [pc, #100]	; (801074c <TIM_OC3_SetConfig+0x10c>)
 80106e6:	4293      	cmp	r3, r2
 80106e8:	d113      	bne.n	8010712 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80106ea:	693b      	ldr	r3, [r7, #16]
 80106ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80106f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80106f2:	693b      	ldr	r3, [r7, #16]
 80106f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80106f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80106fa:	683b      	ldr	r3, [r7, #0]
 80106fc:	695b      	ldr	r3, [r3, #20]
 80106fe:	011b      	lsls	r3, r3, #4
 8010700:	693a      	ldr	r2, [r7, #16]
 8010702:	4313      	orrs	r3, r2
 8010704:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010706:	683b      	ldr	r3, [r7, #0]
 8010708:	699b      	ldr	r3, [r3, #24]
 801070a:	011b      	lsls	r3, r3, #4
 801070c:	693a      	ldr	r2, [r7, #16]
 801070e:	4313      	orrs	r3, r2
 8010710:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	693a      	ldr	r2, [r7, #16]
 8010716:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	68fa      	ldr	r2, [r7, #12]
 801071c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801071e:	683b      	ldr	r3, [r7, #0]
 8010720:	685a      	ldr	r2, [r3, #4]
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	697a      	ldr	r2, [r7, #20]
 801072a:	621a      	str	r2, [r3, #32]
}
 801072c:	bf00      	nop
 801072e:	371c      	adds	r7, #28
 8010730:	46bd      	mov	sp, r7
 8010732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010736:	4770      	bx	lr
 8010738:	fffeff8f 	.word	0xfffeff8f
 801073c:	40010000 	.word	0x40010000
 8010740:	40010400 	.word	0x40010400
 8010744:	40014000 	.word	0x40014000
 8010748:	40014400 	.word	0x40014400
 801074c:	40014800 	.word	0x40014800

08010750 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010750:	b480      	push	{r7}
 8010752:	b087      	sub	sp, #28
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
 8010758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	6a1b      	ldr	r3, [r3, #32]
 801075e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	6a1b      	ldr	r3, [r3, #32]
 801076a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	685b      	ldr	r3, [r3, #4]
 8010770:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	69db      	ldr	r3, [r3, #28]
 8010776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010778:	68fa      	ldr	r2, [r7, #12]
 801077a:	4b24      	ldr	r3, [pc, #144]	; (801080c <TIM_OC4_SetConfig+0xbc>)
 801077c:	4013      	ands	r3, r2
 801077e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010786:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010788:	683b      	ldr	r3, [r7, #0]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	021b      	lsls	r3, r3, #8
 801078e:	68fa      	ldr	r2, [r7, #12]
 8010790:	4313      	orrs	r3, r2
 8010792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010794:	693b      	ldr	r3, [r7, #16]
 8010796:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801079a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801079c:	683b      	ldr	r3, [r7, #0]
 801079e:	689b      	ldr	r3, [r3, #8]
 80107a0:	031b      	lsls	r3, r3, #12
 80107a2:	693a      	ldr	r2, [r7, #16]
 80107a4:	4313      	orrs	r3, r2
 80107a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	4a19      	ldr	r2, [pc, #100]	; (8010810 <TIM_OC4_SetConfig+0xc0>)
 80107ac:	4293      	cmp	r3, r2
 80107ae:	d00f      	beq.n	80107d0 <TIM_OC4_SetConfig+0x80>
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	4a18      	ldr	r2, [pc, #96]	; (8010814 <TIM_OC4_SetConfig+0xc4>)
 80107b4:	4293      	cmp	r3, r2
 80107b6:	d00b      	beq.n	80107d0 <TIM_OC4_SetConfig+0x80>
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	4a17      	ldr	r2, [pc, #92]	; (8010818 <TIM_OC4_SetConfig+0xc8>)
 80107bc:	4293      	cmp	r3, r2
 80107be:	d007      	beq.n	80107d0 <TIM_OC4_SetConfig+0x80>
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	4a16      	ldr	r2, [pc, #88]	; (801081c <TIM_OC4_SetConfig+0xcc>)
 80107c4:	4293      	cmp	r3, r2
 80107c6:	d003      	beq.n	80107d0 <TIM_OC4_SetConfig+0x80>
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	4a15      	ldr	r2, [pc, #84]	; (8010820 <TIM_OC4_SetConfig+0xd0>)
 80107cc:	4293      	cmp	r3, r2
 80107ce:	d109      	bne.n	80107e4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80107d0:	697b      	ldr	r3, [r7, #20]
 80107d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80107d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80107d8:	683b      	ldr	r3, [r7, #0]
 80107da:	695b      	ldr	r3, [r3, #20]
 80107dc:	019b      	lsls	r3, r3, #6
 80107de:	697a      	ldr	r2, [r7, #20]
 80107e0:	4313      	orrs	r3, r2
 80107e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	697a      	ldr	r2, [r7, #20]
 80107e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	68fa      	ldr	r2, [r7, #12]
 80107ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80107f0:	683b      	ldr	r3, [r7, #0]
 80107f2:	685a      	ldr	r2, [r3, #4]
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	693a      	ldr	r2, [r7, #16]
 80107fc:	621a      	str	r2, [r3, #32]
}
 80107fe:	bf00      	nop
 8010800:	371c      	adds	r7, #28
 8010802:	46bd      	mov	sp, r7
 8010804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010808:	4770      	bx	lr
 801080a:	bf00      	nop
 801080c:	feff8fff 	.word	0xfeff8fff
 8010810:	40010000 	.word	0x40010000
 8010814:	40010400 	.word	0x40010400
 8010818:	40014000 	.word	0x40014000
 801081c:	40014400 	.word	0x40014400
 8010820:	40014800 	.word	0x40014800

08010824 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010824:	b480      	push	{r7}
 8010826:	b087      	sub	sp, #28
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
 801082c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	6a1b      	ldr	r3, [r3, #32]
 8010832:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	6a1b      	ldr	r3, [r3, #32]
 801083e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	685b      	ldr	r3, [r3, #4]
 8010844:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801084a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801084c:	68fa      	ldr	r2, [r7, #12]
 801084e:	4b21      	ldr	r3, [pc, #132]	; (80108d4 <TIM_OC5_SetConfig+0xb0>)
 8010850:	4013      	ands	r3, r2
 8010852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010854:	683b      	ldr	r3, [r7, #0]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	68fa      	ldr	r2, [r7, #12]
 801085a:	4313      	orrs	r3, r2
 801085c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801085e:	693b      	ldr	r3, [r7, #16]
 8010860:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010864:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010866:	683b      	ldr	r3, [r7, #0]
 8010868:	689b      	ldr	r3, [r3, #8]
 801086a:	041b      	lsls	r3, r3, #16
 801086c:	693a      	ldr	r2, [r7, #16]
 801086e:	4313      	orrs	r3, r2
 8010870:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	4a18      	ldr	r2, [pc, #96]	; (80108d8 <TIM_OC5_SetConfig+0xb4>)
 8010876:	4293      	cmp	r3, r2
 8010878:	d00f      	beq.n	801089a <TIM_OC5_SetConfig+0x76>
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	4a17      	ldr	r2, [pc, #92]	; (80108dc <TIM_OC5_SetConfig+0xb8>)
 801087e:	4293      	cmp	r3, r2
 8010880:	d00b      	beq.n	801089a <TIM_OC5_SetConfig+0x76>
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	4a16      	ldr	r2, [pc, #88]	; (80108e0 <TIM_OC5_SetConfig+0xbc>)
 8010886:	4293      	cmp	r3, r2
 8010888:	d007      	beq.n	801089a <TIM_OC5_SetConfig+0x76>
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	4a15      	ldr	r2, [pc, #84]	; (80108e4 <TIM_OC5_SetConfig+0xc0>)
 801088e:	4293      	cmp	r3, r2
 8010890:	d003      	beq.n	801089a <TIM_OC5_SetConfig+0x76>
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	4a14      	ldr	r2, [pc, #80]	; (80108e8 <TIM_OC5_SetConfig+0xc4>)
 8010896:	4293      	cmp	r3, r2
 8010898:	d109      	bne.n	80108ae <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801089a:	697b      	ldr	r3, [r7, #20]
 801089c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80108a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80108a2:	683b      	ldr	r3, [r7, #0]
 80108a4:	695b      	ldr	r3, [r3, #20]
 80108a6:	021b      	lsls	r3, r3, #8
 80108a8:	697a      	ldr	r2, [r7, #20]
 80108aa:	4313      	orrs	r3, r2
 80108ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	697a      	ldr	r2, [r7, #20]
 80108b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	68fa      	ldr	r2, [r7, #12]
 80108b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80108ba:	683b      	ldr	r3, [r7, #0]
 80108bc:	685a      	ldr	r2, [r3, #4]
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	693a      	ldr	r2, [r7, #16]
 80108c6:	621a      	str	r2, [r3, #32]
}
 80108c8:	bf00      	nop
 80108ca:	371c      	adds	r7, #28
 80108cc:	46bd      	mov	sp, r7
 80108ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d2:	4770      	bx	lr
 80108d4:	fffeff8f 	.word	0xfffeff8f
 80108d8:	40010000 	.word	0x40010000
 80108dc:	40010400 	.word	0x40010400
 80108e0:	40014000 	.word	0x40014000
 80108e4:	40014400 	.word	0x40014400
 80108e8:	40014800 	.word	0x40014800

080108ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80108ec:	b480      	push	{r7}
 80108ee:	b087      	sub	sp, #28
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
 80108f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	6a1b      	ldr	r3, [r3, #32]
 80108fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	6a1b      	ldr	r3, [r3, #32]
 8010906:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	685b      	ldr	r3, [r3, #4]
 801090c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010914:	68fa      	ldr	r2, [r7, #12]
 8010916:	4b22      	ldr	r3, [pc, #136]	; (80109a0 <TIM_OC6_SetConfig+0xb4>)
 8010918:	4013      	ands	r3, r2
 801091a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801091c:	683b      	ldr	r3, [r7, #0]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	021b      	lsls	r3, r3, #8
 8010922:	68fa      	ldr	r2, [r7, #12]
 8010924:	4313      	orrs	r3, r2
 8010926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010928:	693b      	ldr	r3, [r7, #16]
 801092a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801092e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010930:	683b      	ldr	r3, [r7, #0]
 8010932:	689b      	ldr	r3, [r3, #8]
 8010934:	051b      	lsls	r3, r3, #20
 8010936:	693a      	ldr	r2, [r7, #16]
 8010938:	4313      	orrs	r3, r2
 801093a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	4a19      	ldr	r2, [pc, #100]	; (80109a4 <TIM_OC6_SetConfig+0xb8>)
 8010940:	4293      	cmp	r3, r2
 8010942:	d00f      	beq.n	8010964 <TIM_OC6_SetConfig+0x78>
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	4a18      	ldr	r2, [pc, #96]	; (80109a8 <TIM_OC6_SetConfig+0xbc>)
 8010948:	4293      	cmp	r3, r2
 801094a:	d00b      	beq.n	8010964 <TIM_OC6_SetConfig+0x78>
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	4a17      	ldr	r2, [pc, #92]	; (80109ac <TIM_OC6_SetConfig+0xc0>)
 8010950:	4293      	cmp	r3, r2
 8010952:	d007      	beq.n	8010964 <TIM_OC6_SetConfig+0x78>
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	4a16      	ldr	r2, [pc, #88]	; (80109b0 <TIM_OC6_SetConfig+0xc4>)
 8010958:	4293      	cmp	r3, r2
 801095a:	d003      	beq.n	8010964 <TIM_OC6_SetConfig+0x78>
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	4a15      	ldr	r2, [pc, #84]	; (80109b4 <TIM_OC6_SetConfig+0xc8>)
 8010960:	4293      	cmp	r3, r2
 8010962:	d109      	bne.n	8010978 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010964:	697b      	ldr	r3, [r7, #20]
 8010966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801096a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801096c:	683b      	ldr	r3, [r7, #0]
 801096e:	695b      	ldr	r3, [r3, #20]
 8010970:	029b      	lsls	r3, r3, #10
 8010972:	697a      	ldr	r2, [r7, #20]
 8010974:	4313      	orrs	r3, r2
 8010976:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	697a      	ldr	r2, [r7, #20]
 801097c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	68fa      	ldr	r2, [r7, #12]
 8010982:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010984:	683b      	ldr	r3, [r7, #0]
 8010986:	685a      	ldr	r2, [r3, #4]
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	693a      	ldr	r2, [r7, #16]
 8010990:	621a      	str	r2, [r3, #32]
}
 8010992:	bf00      	nop
 8010994:	371c      	adds	r7, #28
 8010996:	46bd      	mov	sp, r7
 8010998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099c:	4770      	bx	lr
 801099e:	bf00      	nop
 80109a0:	feff8fff 	.word	0xfeff8fff
 80109a4:	40010000 	.word	0x40010000
 80109a8:	40010400 	.word	0x40010400
 80109ac:	40014000 	.word	0x40014000
 80109b0:	40014400 	.word	0x40014400
 80109b4:	40014800 	.word	0x40014800

080109b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80109b8:	b480      	push	{r7}
 80109ba:	b087      	sub	sp, #28
 80109bc:	af00      	add	r7, sp, #0
 80109be:	60f8      	str	r0, [r7, #12]
 80109c0:	60b9      	str	r1, [r7, #8]
 80109c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80109c4:	68bb      	ldr	r3, [r7, #8]
 80109c6:	f003 031f 	and.w	r3, r3, #31
 80109ca:	2201      	movs	r2, #1
 80109cc:	fa02 f303 	lsl.w	r3, r2, r3
 80109d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	6a1a      	ldr	r2, [r3, #32]
 80109d6:	697b      	ldr	r3, [r7, #20]
 80109d8:	43db      	mvns	r3, r3
 80109da:	401a      	ands	r2, r3
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	6a1a      	ldr	r2, [r3, #32]
 80109e4:	68bb      	ldr	r3, [r7, #8]
 80109e6:	f003 031f 	and.w	r3, r3, #31
 80109ea:	6879      	ldr	r1, [r7, #4]
 80109ec:	fa01 f303 	lsl.w	r3, r1, r3
 80109f0:	431a      	orrs	r2, r3
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	621a      	str	r2, [r3, #32]
}
 80109f6:	bf00      	nop
 80109f8:	371c      	adds	r7, #28
 80109fa:	46bd      	mov	sp, r7
 80109fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a00:	4770      	bx	lr
	...

08010a04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010a04:	b480      	push	{r7}
 8010a06:	b085      	sub	sp, #20
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	6078      	str	r0, [r7, #4]
 8010a0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010a14:	2b01      	cmp	r3, #1
 8010a16:	d101      	bne.n	8010a1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010a18:	2302      	movs	r3, #2
 8010a1a:	e077      	b.n	8010b0c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	2201      	movs	r2, #1
 8010a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	2202      	movs	r2, #2
 8010a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	685b      	ldr	r3, [r3, #4]
 8010a32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	689b      	ldr	r3, [r3, #8]
 8010a3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	4a35      	ldr	r2, [pc, #212]	; (8010b18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010a42:	4293      	cmp	r3, r2
 8010a44:	d004      	beq.n	8010a50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	4a34      	ldr	r2, [pc, #208]	; (8010b1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010a4c:	4293      	cmp	r3, r2
 8010a4e:	d108      	bne.n	8010a62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010a56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010a58:	683b      	ldr	r3, [r7, #0]
 8010a5a:	685b      	ldr	r3, [r3, #4]
 8010a5c:	68fa      	ldr	r2, [r7, #12]
 8010a5e:	4313      	orrs	r3, r2
 8010a60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010a68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010a6a:	683b      	ldr	r3, [r7, #0]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	68fa      	ldr	r2, [r7, #12]
 8010a70:	4313      	orrs	r3, r2
 8010a72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	68fa      	ldr	r2, [r7, #12]
 8010a7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	4a25      	ldr	r2, [pc, #148]	; (8010b18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010a82:	4293      	cmp	r3, r2
 8010a84:	d02c      	beq.n	8010ae0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010a8e:	d027      	beq.n	8010ae0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	4a22      	ldr	r2, [pc, #136]	; (8010b20 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8010a96:	4293      	cmp	r3, r2
 8010a98:	d022      	beq.n	8010ae0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	4a21      	ldr	r2, [pc, #132]	; (8010b24 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8010aa0:	4293      	cmp	r3, r2
 8010aa2:	d01d      	beq.n	8010ae0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	4a1f      	ldr	r2, [pc, #124]	; (8010b28 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8010aaa:	4293      	cmp	r3, r2
 8010aac:	d018      	beq.n	8010ae0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	4a1a      	ldr	r2, [pc, #104]	; (8010b1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010ab4:	4293      	cmp	r3, r2
 8010ab6:	d013      	beq.n	8010ae0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	4a1b      	ldr	r2, [pc, #108]	; (8010b2c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8010abe:	4293      	cmp	r3, r2
 8010ac0:	d00e      	beq.n	8010ae0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	4a1a      	ldr	r2, [pc, #104]	; (8010b30 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8010ac8:	4293      	cmp	r3, r2
 8010aca:	d009      	beq.n	8010ae0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	4a18      	ldr	r2, [pc, #96]	; (8010b34 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8010ad2:	4293      	cmp	r3, r2
 8010ad4:	d004      	beq.n	8010ae0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	4a17      	ldr	r2, [pc, #92]	; (8010b38 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8010adc:	4293      	cmp	r3, r2
 8010ade:	d10c      	bne.n	8010afa <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010ae0:	68bb      	ldr	r3, [r7, #8]
 8010ae2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010ae6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010ae8:	683b      	ldr	r3, [r7, #0]
 8010aea:	689b      	ldr	r3, [r3, #8]
 8010aec:	68ba      	ldr	r2, [r7, #8]
 8010aee:	4313      	orrs	r3, r2
 8010af0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	68ba      	ldr	r2, [r7, #8]
 8010af8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	2201      	movs	r2, #1
 8010afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	2200      	movs	r2, #0
 8010b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010b0a:	2300      	movs	r3, #0
}
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	3714      	adds	r7, #20
 8010b10:	46bd      	mov	sp, r7
 8010b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b16:	4770      	bx	lr
 8010b18:	40010000 	.word	0x40010000
 8010b1c:	40010400 	.word	0x40010400
 8010b20:	40000400 	.word	0x40000400
 8010b24:	40000800 	.word	0x40000800
 8010b28:	40000c00 	.word	0x40000c00
 8010b2c:	40001800 	.word	0x40001800
 8010b30:	40014000 	.word	0x40014000
 8010b34:	4000e000 	.word	0x4000e000
 8010b38:	4000e400 	.word	0x4000e400

08010b3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010b3c:	b480      	push	{r7}
 8010b3e:	b083      	sub	sp, #12
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010b44:	bf00      	nop
 8010b46:	370c      	adds	r7, #12
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b4e:	4770      	bx	lr

08010b50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010b50:	b480      	push	{r7}
 8010b52:	b083      	sub	sp, #12
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010b58:	bf00      	nop
 8010b5a:	370c      	adds	r7, #12
 8010b5c:	46bd      	mov	sp, r7
 8010b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b62:	4770      	bx	lr

08010b64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010b64:	b480      	push	{r7}
 8010b66:	b083      	sub	sp, #12
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010b6c:	bf00      	nop
 8010b6e:	370c      	adds	r7, #12
 8010b70:	46bd      	mov	sp, r7
 8010b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b76:	4770      	bx	lr

08010b78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b082      	sub	sp, #8
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d101      	bne.n	8010b8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010b86:	2301      	movs	r3, #1
 8010b88:	e042      	b.n	8010c10 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d106      	bne.n	8010ba2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	2200      	movs	r2, #0
 8010b98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010b9c:	6878      	ldr	r0, [r7, #4]
 8010b9e:	f7f2 fcc5 	bl	800352c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	2224      	movs	r2, #36	; 0x24
 8010ba6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	681a      	ldr	r2, [r3, #0]
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	f022 0201 	bic.w	r2, r2, #1
 8010bb8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010bba:	6878      	ldr	r0, [r7, #4]
 8010bbc:	f000 f82c 	bl	8010c18 <UART_SetConfig>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	2b01      	cmp	r3, #1
 8010bc4:	d101      	bne.n	8010bca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010bc6:	2301      	movs	r3, #1
 8010bc8:	e022      	b.n	8010c10 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d002      	beq.n	8010bd8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8010bd2:	6878      	ldr	r0, [r7, #4]
 8010bd4:	f000 fe8c 	bl	80118f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	685a      	ldr	r2, [r3, #4]
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010be6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	689a      	ldr	r2, [r3, #8]
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010bf6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	681a      	ldr	r2, [r3, #0]
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	f042 0201 	orr.w	r2, r2, #1
 8010c06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010c08:	6878      	ldr	r0, [r7, #4]
 8010c0a:	f000 ff13 	bl	8011a34 <UART_CheckIdleState>
 8010c0e:	4603      	mov	r3, r0
}
 8010c10:	4618      	mov	r0, r3
 8010c12:	3708      	adds	r7, #8
 8010c14:	46bd      	mov	sp, r7
 8010c16:	bd80      	pop	{r7, pc}

08010c18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010c1c:	b092      	sub	sp, #72	; 0x48
 8010c1e:	af00      	add	r7, sp, #0
 8010c20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010c22:	2300      	movs	r3, #0
 8010c24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010c28:	697b      	ldr	r3, [r7, #20]
 8010c2a:	689a      	ldr	r2, [r3, #8]
 8010c2c:	697b      	ldr	r3, [r7, #20]
 8010c2e:	691b      	ldr	r3, [r3, #16]
 8010c30:	431a      	orrs	r2, r3
 8010c32:	697b      	ldr	r3, [r7, #20]
 8010c34:	695b      	ldr	r3, [r3, #20]
 8010c36:	431a      	orrs	r2, r3
 8010c38:	697b      	ldr	r3, [r7, #20]
 8010c3a:	69db      	ldr	r3, [r3, #28]
 8010c3c:	4313      	orrs	r3, r2
 8010c3e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010c40:	697b      	ldr	r3, [r7, #20]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	681a      	ldr	r2, [r3, #0]
 8010c46:	4bbe      	ldr	r3, [pc, #760]	; (8010f40 <UART_SetConfig+0x328>)
 8010c48:	4013      	ands	r3, r2
 8010c4a:	697a      	ldr	r2, [r7, #20]
 8010c4c:	6812      	ldr	r2, [r2, #0]
 8010c4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010c50:	430b      	orrs	r3, r1
 8010c52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010c54:	697b      	ldr	r3, [r7, #20]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	685b      	ldr	r3, [r3, #4]
 8010c5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010c5e:	697b      	ldr	r3, [r7, #20]
 8010c60:	68da      	ldr	r2, [r3, #12]
 8010c62:	697b      	ldr	r3, [r7, #20]
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	430a      	orrs	r2, r1
 8010c68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010c6a:	697b      	ldr	r3, [r7, #20]
 8010c6c:	699b      	ldr	r3, [r3, #24]
 8010c6e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010c70:	697b      	ldr	r3, [r7, #20]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	4ab3      	ldr	r2, [pc, #716]	; (8010f44 <UART_SetConfig+0x32c>)
 8010c76:	4293      	cmp	r3, r2
 8010c78:	d004      	beq.n	8010c84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010c7a:	697b      	ldr	r3, [r7, #20]
 8010c7c:	6a1b      	ldr	r3, [r3, #32]
 8010c7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010c80:	4313      	orrs	r3, r2
 8010c82:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010c84:	697b      	ldr	r3, [r7, #20]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	689a      	ldr	r2, [r3, #8]
 8010c8a:	4baf      	ldr	r3, [pc, #700]	; (8010f48 <UART_SetConfig+0x330>)
 8010c8c:	4013      	ands	r3, r2
 8010c8e:	697a      	ldr	r2, [r7, #20]
 8010c90:	6812      	ldr	r2, [r2, #0]
 8010c92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010c94:	430b      	orrs	r3, r1
 8010c96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010c98:	697b      	ldr	r3, [r7, #20]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c9e:	f023 010f 	bic.w	r1, r3, #15
 8010ca2:	697b      	ldr	r3, [r7, #20]
 8010ca4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ca6:	697b      	ldr	r3, [r7, #20]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	430a      	orrs	r2, r1
 8010cac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010cae:	697b      	ldr	r3, [r7, #20]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	4aa6      	ldr	r2, [pc, #664]	; (8010f4c <UART_SetConfig+0x334>)
 8010cb4:	4293      	cmp	r3, r2
 8010cb6:	d177      	bne.n	8010da8 <UART_SetConfig+0x190>
 8010cb8:	4ba5      	ldr	r3, [pc, #660]	; (8010f50 <UART_SetConfig+0x338>)
 8010cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010cbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010cc0:	2b28      	cmp	r3, #40	; 0x28
 8010cc2:	d86d      	bhi.n	8010da0 <UART_SetConfig+0x188>
 8010cc4:	a201      	add	r2, pc, #4	; (adr r2, 8010ccc <UART_SetConfig+0xb4>)
 8010cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cca:	bf00      	nop
 8010ccc:	08010d71 	.word	0x08010d71
 8010cd0:	08010da1 	.word	0x08010da1
 8010cd4:	08010da1 	.word	0x08010da1
 8010cd8:	08010da1 	.word	0x08010da1
 8010cdc:	08010da1 	.word	0x08010da1
 8010ce0:	08010da1 	.word	0x08010da1
 8010ce4:	08010da1 	.word	0x08010da1
 8010ce8:	08010da1 	.word	0x08010da1
 8010cec:	08010d79 	.word	0x08010d79
 8010cf0:	08010da1 	.word	0x08010da1
 8010cf4:	08010da1 	.word	0x08010da1
 8010cf8:	08010da1 	.word	0x08010da1
 8010cfc:	08010da1 	.word	0x08010da1
 8010d00:	08010da1 	.word	0x08010da1
 8010d04:	08010da1 	.word	0x08010da1
 8010d08:	08010da1 	.word	0x08010da1
 8010d0c:	08010d81 	.word	0x08010d81
 8010d10:	08010da1 	.word	0x08010da1
 8010d14:	08010da1 	.word	0x08010da1
 8010d18:	08010da1 	.word	0x08010da1
 8010d1c:	08010da1 	.word	0x08010da1
 8010d20:	08010da1 	.word	0x08010da1
 8010d24:	08010da1 	.word	0x08010da1
 8010d28:	08010da1 	.word	0x08010da1
 8010d2c:	08010d89 	.word	0x08010d89
 8010d30:	08010da1 	.word	0x08010da1
 8010d34:	08010da1 	.word	0x08010da1
 8010d38:	08010da1 	.word	0x08010da1
 8010d3c:	08010da1 	.word	0x08010da1
 8010d40:	08010da1 	.word	0x08010da1
 8010d44:	08010da1 	.word	0x08010da1
 8010d48:	08010da1 	.word	0x08010da1
 8010d4c:	08010d91 	.word	0x08010d91
 8010d50:	08010da1 	.word	0x08010da1
 8010d54:	08010da1 	.word	0x08010da1
 8010d58:	08010da1 	.word	0x08010da1
 8010d5c:	08010da1 	.word	0x08010da1
 8010d60:	08010da1 	.word	0x08010da1
 8010d64:	08010da1 	.word	0x08010da1
 8010d68:	08010da1 	.word	0x08010da1
 8010d6c:	08010d99 	.word	0x08010d99
 8010d70:	2301      	movs	r3, #1
 8010d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d76:	e326      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8010d78:	2304      	movs	r3, #4
 8010d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d7e:	e322      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8010d80:	2308      	movs	r3, #8
 8010d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d86:	e31e      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8010d88:	2310      	movs	r3, #16
 8010d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d8e:	e31a      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8010d90:	2320      	movs	r3, #32
 8010d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d96:	e316      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8010d98:	2340      	movs	r3, #64	; 0x40
 8010d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d9e:	e312      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8010da0:	2380      	movs	r3, #128	; 0x80
 8010da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010da6:	e30e      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8010da8:	697b      	ldr	r3, [r7, #20]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	4a69      	ldr	r2, [pc, #420]	; (8010f54 <UART_SetConfig+0x33c>)
 8010dae:	4293      	cmp	r3, r2
 8010db0:	d130      	bne.n	8010e14 <UART_SetConfig+0x1fc>
 8010db2:	4b67      	ldr	r3, [pc, #412]	; (8010f50 <UART_SetConfig+0x338>)
 8010db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010db6:	f003 0307 	and.w	r3, r3, #7
 8010dba:	2b05      	cmp	r3, #5
 8010dbc:	d826      	bhi.n	8010e0c <UART_SetConfig+0x1f4>
 8010dbe:	a201      	add	r2, pc, #4	; (adr r2, 8010dc4 <UART_SetConfig+0x1ac>)
 8010dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dc4:	08010ddd 	.word	0x08010ddd
 8010dc8:	08010de5 	.word	0x08010de5
 8010dcc:	08010ded 	.word	0x08010ded
 8010dd0:	08010df5 	.word	0x08010df5
 8010dd4:	08010dfd 	.word	0x08010dfd
 8010dd8:	08010e05 	.word	0x08010e05
 8010ddc:	2300      	movs	r3, #0
 8010dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010de2:	e2f0      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8010de4:	2304      	movs	r3, #4
 8010de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dea:	e2ec      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8010dec:	2308      	movs	r3, #8
 8010dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010df2:	e2e8      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8010df4:	2310      	movs	r3, #16
 8010df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dfa:	e2e4      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8010dfc:	2320      	movs	r3, #32
 8010dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e02:	e2e0      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8010e04:	2340      	movs	r3, #64	; 0x40
 8010e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e0a:	e2dc      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8010e0c:	2380      	movs	r3, #128	; 0x80
 8010e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e12:	e2d8      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8010e14:	697b      	ldr	r3, [r7, #20]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	4a4f      	ldr	r2, [pc, #316]	; (8010f58 <UART_SetConfig+0x340>)
 8010e1a:	4293      	cmp	r3, r2
 8010e1c:	d130      	bne.n	8010e80 <UART_SetConfig+0x268>
 8010e1e:	4b4c      	ldr	r3, [pc, #304]	; (8010f50 <UART_SetConfig+0x338>)
 8010e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e22:	f003 0307 	and.w	r3, r3, #7
 8010e26:	2b05      	cmp	r3, #5
 8010e28:	d826      	bhi.n	8010e78 <UART_SetConfig+0x260>
 8010e2a:	a201      	add	r2, pc, #4	; (adr r2, 8010e30 <UART_SetConfig+0x218>)
 8010e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e30:	08010e49 	.word	0x08010e49
 8010e34:	08010e51 	.word	0x08010e51
 8010e38:	08010e59 	.word	0x08010e59
 8010e3c:	08010e61 	.word	0x08010e61
 8010e40:	08010e69 	.word	0x08010e69
 8010e44:	08010e71 	.word	0x08010e71
 8010e48:	2300      	movs	r3, #0
 8010e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e4e:	e2ba      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8010e50:	2304      	movs	r3, #4
 8010e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e56:	e2b6      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8010e58:	2308      	movs	r3, #8
 8010e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e5e:	e2b2      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8010e60:	2310      	movs	r3, #16
 8010e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e66:	e2ae      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8010e68:	2320      	movs	r3, #32
 8010e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e6e:	e2aa      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8010e70:	2340      	movs	r3, #64	; 0x40
 8010e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e76:	e2a6      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8010e78:	2380      	movs	r3, #128	; 0x80
 8010e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e7e:	e2a2      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8010e80:	697b      	ldr	r3, [r7, #20]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	4a35      	ldr	r2, [pc, #212]	; (8010f5c <UART_SetConfig+0x344>)
 8010e86:	4293      	cmp	r3, r2
 8010e88:	d130      	bne.n	8010eec <UART_SetConfig+0x2d4>
 8010e8a:	4b31      	ldr	r3, [pc, #196]	; (8010f50 <UART_SetConfig+0x338>)
 8010e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e8e:	f003 0307 	and.w	r3, r3, #7
 8010e92:	2b05      	cmp	r3, #5
 8010e94:	d826      	bhi.n	8010ee4 <UART_SetConfig+0x2cc>
 8010e96:	a201      	add	r2, pc, #4	; (adr r2, 8010e9c <UART_SetConfig+0x284>)
 8010e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e9c:	08010eb5 	.word	0x08010eb5
 8010ea0:	08010ebd 	.word	0x08010ebd
 8010ea4:	08010ec5 	.word	0x08010ec5
 8010ea8:	08010ecd 	.word	0x08010ecd
 8010eac:	08010ed5 	.word	0x08010ed5
 8010eb0:	08010edd 	.word	0x08010edd
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eba:	e284      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8010ebc:	2304      	movs	r3, #4
 8010ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ec2:	e280      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8010ec4:	2308      	movs	r3, #8
 8010ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eca:	e27c      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8010ecc:	2310      	movs	r3, #16
 8010ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ed2:	e278      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8010ed4:	2320      	movs	r3, #32
 8010ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eda:	e274      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8010edc:	2340      	movs	r3, #64	; 0x40
 8010ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ee2:	e270      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8010ee4:	2380      	movs	r3, #128	; 0x80
 8010ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eea:	e26c      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8010eec:	697b      	ldr	r3, [r7, #20]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	4a1b      	ldr	r2, [pc, #108]	; (8010f60 <UART_SetConfig+0x348>)
 8010ef2:	4293      	cmp	r3, r2
 8010ef4:	d142      	bne.n	8010f7c <UART_SetConfig+0x364>
 8010ef6:	4b16      	ldr	r3, [pc, #88]	; (8010f50 <UART_SetConfig+0x338>)
 8010ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010efa:	f003 0307 	and.w	r3, r3, #7
 8010efe:	2b05      	cmp	r3, #5
 8010f00:	d838      	bhi.n	8010f74 <UART_SetConfig+0x35c>
 8010f02:	a201      	add	r2, pc, #4	; (adr r2, 8010f08 <UART_SetConfig+0x2f0>)
 8010f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f08:	08010f21 	.word	0x08010f21
 8010f0c:	08010f29 	.word	0x08010f29
 8010f10:	08010f31 	.word	0x08010f31
 8010f14:	08010f39 	.word	0x08010f39
 8010f18:	08010f65 	.word	0x08010f65
 8010f1c:	08010f6d 	.word	0x08010f6d
 8010f20:	2300      	movs	r3, #0
 8010f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f26:	e24e      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8010f28:	2304      	movs	r3, #4
 8010f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f2e:	e24a      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8010f30:	2308      	movs	r3, #8
 8010f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f36:	e246      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8010f38:	2310      	movs	r3, #16
 8010f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f3e:	e242      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8010f40:	cfff69f3 	.word	0xcfff69f3
 8010f44:	58000c00 	.word	0x58000c00
 8010f48:	11fff4ff 	.word	0x11fff4ff
 8010f4c:	40011000 	.word	0x40011000
 8010f50:	58024400 	.word	0x58024400
 8010f54:	40004400 	.word	0x40004400
 8010f58:	40004800 	.word	0x40004800
 8010f5c:	40004c00 	.word	0x40004c00
 8010f60:	40005000 	.word	0x40005000
 8010f64:	2320      	movs	r3, #32
 8010f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f6a:	e22c      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8010f6c:	2340      	movs	r3, #64	; 0x40
 8010f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f72:	e228      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8010f74:	2380      	movs	r3, #128	; 0x80
 8010f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f7a:	e224      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8010f7c:	697b      	ldr	r3, [r7, #20]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	4ab1      	ldr	r2, [pc, #708]	; (8011248 <UART_SetConfig+0x630>)
 8010f82:	4293      	cmp	r3, r2
 8010f84:	d176      	bne.n	8011074 <UART_SetConfig+0x45c>
 8010f86:	4bb1      	ldr	r3, [pc, #708]	; (801124c <UART_SetConfig+0x634>)
 8010f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010f8e:	2b28      	cmp	r3, #40	; 0x28
 8010f90:	d86c      	bhi.n	801106c <UART_SetConfig+0x454>
 8010f92:	a201      	add	r2, pc, #4	; (adr r2, 8010f98 <UART_SetConfig+0x380>)
 8010f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f98:	0801103d 	.word	0x0801103d
 8010f9c:	0801106d 	.word	0x0801106d
 8010fa0:	0801106d 	.word	0x0801106d
 8010fa4:	0801106d 	.word	0x0801106d
 8010fa8:	0801106d 	.word	0x0801106d
 8010fac:	0801106d 	.word	0x0801106d
 8010fb0:	0801106d 	.word	0x0801106d
 8010fb4:	0801106d 	.word	0x0801106d
 8010fb8:	08011045 	.word	0x08011045
 8010fbc:	0801106d 	.word	0x0801106d
 8010fc0:	0801106d 	.word	0x0801106d
 8010fc4:	0801106d 	.word	0x0801106d
 8010fc8:	0801106d 	.word	0x0801106d
 8010fcc:	0801106d 	.word	0x0801106d
 8010fd0:	0801106d 	.word	0x0801106d
 8010fd4:	0801106d 	.word	0x0801106d
 8010fd8:	0801104d 	.word	0x0801104d
 8010fdc:	0801106d 	.word	0x0801106d
 8010fe0:	0801106d 	.word	0x0801106d
 8010fe4:	0801106d 	.word	0x0801106d
 8010fe8:	0801106d 	.word	0x0801106d
 8010fec:	0801106d 	.word	0x0801106d
 8010ff0:	0801106d 	.word	0x0801106d
 8010ff4:	0801106d 	.word	0x0801106d
 8010ff8:	08011055 	.word	0x08011055
 8010ffc:	0801106d 	.word	0x0801106d
 8011000:	0801106d 	.word	0x0801106d
 8011004:	0801106d 	.word	0x0801106d
 8011008:	0801106d 	.word	0x0801106d
 801100c:	0801106d 	.word	0x0801106d
 8011010:	0801106d 	.word	0x0801106d
 8011014:	0801106d 	.word	0x0801106d
 8011018:	0801105d 	.word	0x0801105d
 801101c:	0801106d 	.word	0x0801106d
 8011020:	0801106d 	.word	0x0801106d
 8011024:	0801106d 	.word	0x0801106d
 8011028:	0801106d 	.word	0x0801106d
 801102c:	0801106d 	.word	0x0801106d
 8011030:	0801106d 	.word	0x0801106d
 8011034:	0801106d 	.word	0x0801106d
 8011038:	08011065 	.word	0x08011065
 801103c:	2301      	movs	r3, #1
 801103e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011042:	e1c0      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8011044:	2304      	movs	r3, #4
 8011046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801104a:	e1bc      	b.n	80113c6 <UART_SetConfig+0x7ae>
 801104c:	2308      	movs	r3, #8
 801104e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011052:	e1b8      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8011054:	2310      	movs	r3, #16
 8011056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801105a:	e1b4      	b.n	80113c6 <UART_SetConfig+0x7ae>
 801105c:	2320      	movs	r3, #32
 801105e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011062:	e1b0      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8011064:	2340      	movs	r3, #64	; 0x40
 8011066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801106a:	e1ac      	b.n	80113c6 <UART_SetConfig+0x7ae>
 801106c:	2380      	movs	r3, #128	; 0x80
 801106e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011072:	e1a8      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8011074:	697b      	ldr	r3, [r7, #20]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	4a75      	ldr	r2, [pc, #468]	; (8011250 <UART_SetConfig+0x638>)
 801107a:	4293      	cmp	r3, r2
 801107c:	d130      	bne.n	80110e0 <UART_SetConfig+0x4c8>
 801107e:	4b73      	ldr	r3, [pc, #460]	; (801124c <UART_SetConfig+0x634>)
 8011080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011082:	f003 0307 	and.w	r3, r3, #7
 8011086:	2b05      	cmp	r3, #5
 8011088:	d826      	bhi.n	80110d8 <UART_SetConfig+0x4c0>
 801108a:	a201      	add	r2, pc, #4	; (adr r2, 8011090 <UART_SetConfig+0x478>)
 801108c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011090:	080110a9 	.word	0x080110a9
 8011094:	080110b1 	.word	0x080110b1
 8011098:	080110b9 	.word	0x080110b9
 801109c:	080110c1 	.word	0x080110c1
 80110a0:	080110c9 	.word	0x080110c9
 80110a4:	080110d1 	.word	0x080110d1
 80110a8:	2300      	movs	r3, #0
 80110aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110ae:	e18a      	b.n	80113c6 <UART_SetConfig+0x7ae>
 80110b0:	2304      	movs	r3, #4
 80110b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110b6:	e186      	b.n	80113c6 <UART_SetConfig+0x7ae>
 80110b8:	2308      	movs	r3, #8
 80110ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110be:	e182      	b.n	80113c6 <UART_SetConfig+0x7ae>
 80110c0:	2310      	movs	r3, #16
 80110c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110c6:	e17e      	b.n	80113c6 <UART_SetConfig+0x7ae>
 80110c8:	2320      	movs	r3, #32
 80110ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110ce:	e17a      	b.n	80113c6 <UART_SetConfig+0x7ae>
 80110d0:	2340      	movs	r3, #64	; 0x40
 80110d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110d6:	e176      	b.n	80113c6 <UART_SetConfig+0x7ae>
 80110d8:	2380      	movs	r3, #128	; 0x80
 80110da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110de:	e172      	b.n	80113c6 <UART_SetConfig+0x7ae>
 80110e0:	697b      	ldr	r3, [r7, #20]
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	4a5b      	ldr	r2, [pc, #364]	; (8011254 <UART_SetConfig+0x63c>)
 80110e6:	4293      	cmp	r3, r2
 80110e8:	d130      	bne.n	801114c <UART_SetConfig+0x534>
 80110ea:	4b58      	ldr	r3, [pc, #352]	; (801124c <UART_SetConfig+0x634>)
 80110ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110ee:	f003 0307 	and.w	r3, r3, #7
 80110f2:	2b05      	cmp	r3, #5
 80110f4:	d826      	bhi.n	8011144 <UART_SetConfig+0x52c>
 80110f6:	a201      	add	r2, pc, #4	; (adr r2, 80110fc <UART_SetConfig+0x4e4>)
 80110f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110fc:	08011115 	.word	0x08011115
 8011100:	0801111d 	.word	0x0801111d
 8011104:	08011125 	.word	0x08011125
 8011108:	0801112d 	.word	0x0801112d
 801110c:	08011135 	.word	0x08011135
 8011110:	0801113d 	.word	0x0801113d
 8011114:	2300      	movs	r3, #0
 8011116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801111a:	e154      	b.n	80113c6 <UART_SetConfig+0x7ae>
 801111c:	2304      	movs	r3, #4
 801111e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011122:	e150      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8011124:	2308      	movs	r3, #8
 8011126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801112a:	e14c      	b.n	80113c6 <UART_SetConfig+0x7ae>
 801112c:	2310      	movs	r3, #16
 801112e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011132:	e148      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8011134:	2320      	movs	r3, #32
 8011136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801113a:	e144      	b.n	80113c6 <UART_SetConfig+0x7ae>
 801113c:	2340      	movs	r3, #64	; 0x40
 801113e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011142:	e140      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8011144:	2380      	movs	r3, #128	; 0x80
 8011146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801114a:	e13c      	b.n	80113c6 <UART_SetConfig+0x7ae>
 801114c:	697b      	ldr	r3, [r7, #20]
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	4a41      	ldr	r2, [pc, #260]	; (8011258 <UART_SetConfig+0x640>)
 8011152:	4293      	cmp	r3, r2
 8011154:	f040 8082 	bne.w	801125c <UART_SetConfig+0x644>
 8011158:	4b3c      	ldr	r3, [pc, #240]	; (801124c <UART_SetConfig+0x634>)
 801115a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801115c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011160:	2b28      	cmp	r3, #40	; 0x28
 8011162:	d86d      	bhi.n	8011240 <UART_SetConfig+0x628>
 8011164:	a201      	add	r2, pc, #4	; (adr r2, 801116c <UART_SetConfig+0x554>)
 8011166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801116a:	bf00      	nop
 801116c:	08011211 	.word	0x08011211
 8011170:	08011241 	.word	0x08011241
 8011174:	08011241 	.word	0x08011241
 8011178:	08011241 	.word	0x08011241
 801117c:	08011241 	.word	0x08011241
 8011180:	08011241 	.word	0x08011241
 8011184:	08011241 	.word	0x08011241
 8011188:	08011241 	.word	0x08011241
 801118c:	08011219 	.word	0x08011219
 8011190:	08011241 	.word	0x08011241
 8011194:	08011241 	.word	0x08011241
 8011198:	08011241 	.word	0x08011241
 801119c:	08011241 	.word	0x08011241
 80111a0:	08011241 	.word	0x08011241
 80111a4:	08011241 	.word	0x08011241
 80111a8:	08011241 	.word	0x08011241
 80111ac:	08011221 	.word	0x08011221
 80111b0:	08011241 	.word	0x08011241
 80111b4:	08011241 	.word	0x08011241
 80111b8:	08011241 	.word	0x08011241
 80111bc:	08011241 	.word	0x08011241
 80111c0:	08011241 	.word	0x08011241
 80111c4:	08011241 	.word	0x08011241
 80111c8:	08011241 	.word	0x08011241
 80111cc:	08011229 	.word	0x08011229
 80111d0:	08011241 	.word	0x08011241
 80111d4:	08011241 	.word	0x08011241
 80111d8:	08011241 	.word	0x08011241
 80111dc:	08011241 	.word	0x08011241
 80111e0:	08011241 	.word	0x08011241
 80111e4:	08011241 	.word	0x08011241
 80111e8:	08011241 	.word	0x08011241
 80111ec:	08011231 	.word	0x08011231
 80111f0:	08011241 	.word	0x08011241
 80111f4:	08011241 	.word	0x08011241
 80111f8:	08011241 	.word	0x08011241
 80111fc:	08011241 	.word	0x08011241
 8011200:	08011241 	.word	0x08011241
 8011204:	08011241 	.word	0x08011241
 8011208:	08011241 	.word	0x08011241
 801120c:	08011239 	.word	0x08011239
 8011210:	2301      	movs	r3, #1
 8011212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011216:	e0d6      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8011218:	2304      	movs	r3, #4
 801121a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801121e:	e0d2      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8011220:	2308      	movs	r3, #8
 8011222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011226:	e0ce      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8011228:	2310      	movs	r3, #16
 801122a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801122e:	e0ca      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8011230:	2320      	movs	r3, #32
 8011232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011236:	e0c6      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8011238:	2340      	movs	r3, #64	; 0x40
 801123a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801123e:	e0c2      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8011240:	2380      	movs	r3, #128	; 0x80
 8011242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011246:	e0be      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8011248:	40011400 	.word	0x40011400
 801124c:	58024400 	.word	0x58024400
 8011250:	40007800 	.word	0x40007800
 8011254:	40007c00 	.word	0x40007c00
 8011258:	40011800 	.word	0x40011800
 801125c:	697b      	ldr	r3, [r7, #20]
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	4aad      	ldr	r2, [pc, #692]	; (8011518 <UART_SetConfig+0x900>)
 8011262:	4293      	cmp	r3, r2
 8011264:	d176      	bne.n	8011354 <UART_SetConfig+0x73c>
 8011266:	4bad      	ldr	r3, [pc, #692]	; (801151c <UART_SetConfig+0x904>)
 8011268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801126a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801126e:	2b28      	cmp	r3, #40	; 0x28
 8011270:	d86c      	bhi.n	801134c <UART_SetConfig+0x734>
 8011272:	a201      	add	r2, pc, #4	; (adr r2, 8011278 <UART_SetConfig+0x660>)
 8011274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011278:	0801131d 	.word	0x0801131d
 801127c:	0801134d 	.word	0x0801134d
 8011280:	0801134d 	.word	0x0801134d
 8011284:	0801134d 	.word	0x0801134d
 8011288:	0801134d 	.word	0x0801134d
 801128c:	0801134d 	.word	0x0801134d
 8011290:	0801134d 	.word	0x0801134d
 8011294:	0801134d 	.word	0x0801134d
 8011298:	08011325 	.word	0x08011325
 801129c:	0801134d 	.word	0x0801134d
 80112a0:	0801134d 	.word	0x0801134d
 80112a4:	0801134d 	.word	0x0801134d
 80112a8:	0801134d 	.word	0x0801134d
 80112ac:	0801134d 	.word	0x0801134d
 80112b0:	0801134d 	.word	0x0801134d
 80112b4:	0801134d 	.word	0x0801134d
 80112b8:	0801132d 	.word	0x0801132d
 80112bc:	0801134d 	.word	0x0801134d
 80112c0:	0801134d 	.word	0x0801134d
 80112c4:	0801134d 	.word	0x0801134d
 80112c8:	0801134d 	.word	0x0801134d
 80112cc:	0801134d 	.word	0x0801134d
 80112d0:	0801134d 	.word	0x0801134d
 80112d4:	0801134d 	.word	0x0801134d
 80112d8:	08011335 	.word	0x08011335
 80112dc:	0801134d 	.word	0x0801134d
 80112e0:	0801134d 	.word	0x0801134d
 80112e4:	0801134d 	.word	0x0801134d
 80112e8:	0801134d 	.word	0x0801134d
 80112ec:	0801134d 	.word	0x0801134d
 80112f0:	0801134d 	.word	0x0801134d
 80112f4:	0801134d 	.word	0x0801134d
 80112f8:	0801133d 	.word	0x0801133d
 80112fc:	0801134d 	.word	0x0801134d
 8011300:	0801134d 	.word	0x0801134d
 8011304:	0801134d 	.word	0x0801134d
 8011308:	0801134d 	.word	0x0801134d
 801130c:	0801134d 	.word	0x0801134d
 8011310:	0801134d 	.word	0x0801134d
 8011314:	0801134d 	.word	0x0801134d
 8011318:	08011345 	.word	0x08011345
 801131c:	2301      	movs	r3, #1
 801131e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011322:	e050      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8011324:	2304      	movs	r3, #4
 8011326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801132a:	e04c      	b.n	80113c6 <UART_SetConfig+0x7ae>
 801132c:	2308      	movs	r3, #8
 801132e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011332:	e048      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8011334:	2310      	movs	r3, #16
 8011336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801133a:	e044      	b.n	80113c6 <UART_SetConfig+0x7ae>
 801133c:	2320      	movs	r3, #32
 801133e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011342:	e040      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8011344:	2340      	movs	r3, #64	; 0x40
 8011346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801134a:	e03c      	b.n	80113c6 <UART_SetConfig+0x7ae>
 801134c:	2380      	movs	r3, #128	; 0x80
 801134e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011352:	e038      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8011354:	697b      	ldr	r3, [r7, #20]
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	4a71      	ldr	r2, [pc, #452]	; (8011520 <UART_SetConfig+0x908>)
 801135a:	4293      	cmp	r3, r2
 801135c:	d130      	bne.n	80113c0 <UART_SetConfig+0x7a8>
 801135e:	4b6f      	ldr	r3, [pc, #444]	; (801151c <UART_SetConfig+0x904>)
 8011360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011362:	f003 0307 	and.w	r3, r3, #7
 8011366:	2b05      	cmp	r3, #5
 8011368:	d826      	bhi.n	80113b8 <UART_SetConfig+0x7a0>
 801136a:	a201      	add	r2, pc, #4	; (adr r2, 8011370 <UART_SetConfig+0x758>)
 801136c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011370:	08011389 	.word	0x08011389
 8011374:	08011391 	.word	0x08011391
 8011378:	08011399 	.word	0x08011399
 801137c:	080113a1 	.word	0x080113a1
 8011380:	080113a9 	.word	0x080113a9
 8011384:	080113b1 	.word	0x080113b1
 8011388:	2302      	movs	r3, #2
 801138a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801138e:	e01a      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8011390:	2304      	movs	r3, #4
 8011392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011396:	e016      	b.n	80113c6 <UART_SetConfig+0x7ae>
 8011398:	2308      	movs	r3, #8
 801139a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801139e:	e012      	b.n	80113c6 <UART_SetConfig+0x7ae>
 80113a0:	2310      	movs	r3, #16
 80113a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113a6:	e00e      	b.n	80113c6 <UART_SetConfig+0x7ae>
 80113a8:	2320      	movs	r3, #32
 80113aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113ae:	e00a      	b.n	80113c6 <UART_SetConfig+0x7ae>
 80113b0:	2340      	movs	r3, #64	; 0x40
 80113b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113b6:	e006      	b.n	80113c6 <UART_SetConfig+0x7ae>
 80113b8:	2380      	movs	r3, #128	; 0x80
 80113ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113be:	e002      	b.n	80113c6 <UART_SetConfig+0x7ae>
 80113c0:	2380      	movs	r3, #128	; 0x80
 80113c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80113c6:	697b      	ldr	r3, [r7, #20]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	4a55      	ldr	r2, [pc, #340]	; (8011520 <UART_SetConfig+0x908>)
 80113cc:	4293      	cmp	r3, r2
 80113ce:	f040 80f8 	bne.w	80115c2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80113d2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80113d6:	2b20      	cmp	r3, #32
 80113d8:	dc46      	bgt.n	8011468 <UART_SetConfig+0x850>
 80113da:	2b02      	cmp	r3, #2
 80113dc:	db75      	blt.n	80114ca <UART_SetConfig+0x8b2>
 80113de:	3b02      	subs	r3, #2
 80113e0:	2b1e      	cmp	r3, #30
 80113e2:	d872      	bhi.n	80114ca <UART_SetConfig+0x8b2>
 80113e4:	a201      	add	r2, pc, #4	; (adr r2, 80113ec <UART_SetConfig+0x7d4>)
 80113e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113ea:	bf00      	nop
 80113ec:	0801146f 	.word	0x0801146f
 80113f0:	080114cb 	.word	0x080114cb
 80113f4:	08011477 	.word	0x08011477
 80113f8:	080114cb 	.word	0x080114cb
 80113fc:	080114cb 	.word	0x080114cb
 8011400:	080114cb 	.word	0x080114cb
 8011404:	08011487 	.word	0x08011487
 8011408:	080114cb 	.word	0x080114cb
 801140c:	080114cb 	.word	0x080114cb
 8011410:	080114cb 	.word	0x080114cb
 8011414:	080114cb 	.word	0x080114cb
 8011418:	080114cb 	.word	0x080114cb
 801141c:	080114cb 	.word	0x080114cb
 8011420:	080114cb 	.word	0x080114cb
 8011424:	08011497 	.word	0x08011497
 8011428:	080114cb 	.word	0x080114cb
 801142c:	080114cb 	.word	0x080114cb
 8011430:	080114cb 	.word	0x080114cb
 8011434:	080114cb 	.word	0x080114cb
 8011438:	080114cb 	.word	0x080114cb
 801143c:	080114cb 	.word	0x080114cb
 8011440:	080114cb 	.word	0x080114cb
 8011444:	080114cb 	.word	0x080114cb
 8011448:	080114cb 	.word	0x080114cb
 801144c:	080114cb 	.word	0x080114cb
 8011450:	080114cb 	.word	0x080114cb
 8011454:	080114cb 	.word	0x080114cb
 8011458:	080114cb 	.word	0x080114cb
 801145c:	080114cb 	.word	0x080114cb
 8011460:	080114cb 	.word	0x080114cb
 8011464:	080114bd 	.word	0x080114bd
 8011468:	2b40      	cmp	r3, #64	; 0x40
 801146a:	d02a      	beq.n	80114c2 <UART_SetConfig+0x8aa>
 801146c:	e02d      	b.n	80114ca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801146e:	f7fb f86b 	bl	800c548 <HAL_RCCEx_GetD3PCLK1Freq>
 8011472:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011474:	e02f      	b.n	80114d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801147a:	4618      	mov	r0, r3
 801147c:	f7fb f87a 	bl	800c574 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011482:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011484:	e027      	b.n	80114d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011486:	f107 0318 	add.w	r3, r7, #24
 801148a:	4618      	mov	r0, r3
 801148c:	f7fb f9c6 	bl	800c81c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011490:	69fb      	ldr	r3, [r7, #28]
 8011492:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011494:	e01f      	b.n	80114d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011496:	4b21      	ldr	r3, [pc, #132]	; (801151c <UART_SetConfig+0x904>)
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	f003 0320 	and.w	r3, r3, #32
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d009      	beq.n	80114b6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80114a2:	4b1e      	ldr	r3, [pc, #120]	; (801151c <UART_SetConfig+0x904>)
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	08db      	lsrs	r3, r3, #3
 80114a8:	f003 0303 	and.w	r3, r3, #3
 80114ac:	4a1d      	ldr	r2, [pc, #116]	; (8011524 <UART_SetConfig+0x90c>)
 80114ae:	fa22 f303 	lsr.w	r3, r2, r3
 80114b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80114b4:	e00f      	b.n	80114d6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80114b6:	4b1b      	ldr	r3, [pc, #108]	; (8011524 <UART_SetConfig+0x90c>)
 80114b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114ba:	e00c      	b.n	80114d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80114bc:	4b1a      	ldr	r3, [pc, #104]	; (8011528 <UART_SetConfig+0x910>)
 80114be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114c0:	e009      	b.n	80114d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80114c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80114c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114c8:	e005      	b.n	80114d6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80114ca:	2300      	movs	r3, #0
 80114cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80114ce:	2301      	movs	r3, #1
 80114d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80114d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80114d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114d8:	2b00      	cmp	r3, #0
 80114da:	f000 81ee 	beq.w	80118ba <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80114de:	697b      	ldr	r3, [r7, #20]
 80114e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114e2:	4a12      	ldr	r2, [pc, #72]	; (801152c <UART_SetConfig+0x914>)
 80114e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80114e8:	461a      	mov	r2, r3
 80114ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80114f0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80114f2:	697b      	ldr	r3, [r7, #20]
 80114f4:	685a      	ldr	r2, [r3, #4]
 80114f6:	4613      	mov	r3, r2
 80114f8:	005b      	lsls	r3, r3, #1
 80114fa:	4413      	add	r3, r2
 80114fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114fe:	429a      	cmp	r2, r3
 8011500:	d305      	bcc.n	801150e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011502:	697b      	ldr	r3, [r7, #20]
 8011504:	685b      	ldr	r3, [r3, #4]
 8011506:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801150a:	429a      	cmp	r2, r3
 801150c:	d910      	bls.n	8011530 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 801150e:	2301      	movs	r3, #1
 8011510:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011514:	e1d1      	b.n	80118ba <UART_SetConfig+0xca2>
 8011516:	bf00      	nop
 8011518:	40011c00 	.word	0x40011c00
 801151c:	58024400 	.word	0x58024400
 8011520:	58000c00 	.word	0x58000c00
 8011524:	03d09000 	.word	0x03d09000
 8011528:	003d0900 	.word	0x003d0900
 801152c:	080185b8 	.word	0x080185b8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011532:	2200      	movs	r2, #0
 8011534:	60bb      	str	r3, [r7, #8]
 8011536:	60fa      	str	r2, [r7, #12]
 8011538:	697b      	ldr	r3, [r7, #20]
 801153a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801153c:	4ac0      	ldr	r2, [pc, #768]	; (8011840 <UART_SetConfig+0xc28>)
 801153e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011542:	b29b      	uxth	r3, r3
 8011544:	2200      	movs	r2, #0
 8011546:	603b      	str	r3, [r7, #0]
 8011548:	607a      	str	r2, [r7, #4]
 801154a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801154e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011552:	f7ee ff45 	bl	80003e0 <__aeabi_uldivmod>
 8011556:	4602      	mov	r2, r0
 8011558:	460b      	mov	r3, r1
 801155a:	4610      	mov	r0, r2
 801155c:	4619      	mov	r1, r3
 801155e:	f04f 0200 	mov.w	r2, #0
 8011562:	f04f 0300 	mov.w	r3, #0
 8011566:	020b      	lsls	r3, r1, #8
 8011568:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801156c:	0202      	lsls	r2, r0, #8
 801156e:	6979      	ldr	r1, [r7, #20]
 8011570:	6849      	ldr	r1, [r1, #4]
 8011572:	0849      	lsrs	r1, r1, #1
 8011574:	2000      	movs	r0, #0
 8011576:	460c      	mov	r4, r1
 8011578:	4605      	mov	r5, r0
 801157a:	eb12 0804 	adds.w	r8, r2, r4
 801157e:	eb43 0905 	adc.w	r9, r3, r5
 8011582:	697b      	ldr	r3, [r7, #20]
 8011584:	685b      	ldr	r3, [r3, #4]
 8011586:	2200      	movs	r2, #0
 8011588:	469a      	mov	sl, r3
 801158a:	4693      	mov	fp, r2
 801158c:	4652      	mov	r2, sl
 801158e:	465b      	mov	r3, fp
 8011590:	4640      	mov	r0, r8
 8011592:	4649      	mov	r1, r9
 8011594:	f7ee ff24 	bl	80003e0 <__aeabi_uldivmod>
 8011598:	4602      	mov	r2, r0
 801159a:	460b      	mov	r3, r1
 801159c:	4613      	mov	r3, r2
 801159e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80115a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80115a6:	d308      	bcc.n	80115ba <UART_SetConfig+0x9a2>
 80115a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80115ae:	d204      	bcs.n	80115ba <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80115b0:	697b      	ldr	r3, [r7, #20]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80115b6:	60da      	str	r2, [r3, #12]
 80115b8:	e17f      	b.n	80118ba <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80115ba:	2301      	movs	r3, #1
 80115bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80115c0:	e17b      	b.n	80118ba <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80115c2:	697b      	ldr	r3, [r7, #20]
 80115c4:	69db      	ldr	r3, [r3, #28]
 80115c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80115ca:	f040 80bd 	bne.w	8011748 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80115ce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80115d2:	2b20      	cmp	r3, #32
 80115d4:	dc48      	bgt.n	8011668 <UART_SetConfig+0xa50>
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	db7b      	blt.n	80116d2 <UART_SetConfig+0xaba>
 80115da:	2b20      	cmp	r3, #32
 80115dc:	d879      	bhi.n	80116d2 <UART_SetConfig+0xaba>
 80115de:	a201      	add	r2, pc, #4	; (adr r2, 80115e4 <UART_SetConfig+0x9cc>)
 80115e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115e4:	0801166f 	.word	0x0801166f
 80115e8:	08011677 	.word	0x08011677
 80115ec:	080116d3 	.word	0x080116d3
 80115f0:	080116d3 	.word	0x080116d3
 80115f4:	0801167f 	.word	0x0801167f
 80115f8:	080116d3 	.word	0x080116d3
 80115fc:	080116d3 	.word	0x080116d3
 8011600:	080116d3 	.word	0x080116d3
 8011604:	0801168f 	.word	0x0801168f
 8011608:	080116d3 	.word	0x080116d3
 801160c:	080116d3 	.word	0x080116d3
 8011610:	080116d3 	.word	0x080116d3
 8011614:	080116d3 	.word	0x080116d3
 8011618:	080116d3 	.word	0x080116d3
 801161c:	080116d3 	.word	0x080116d3
 8011620:	080116d3 	.word	0x080116d3
 8011624:	0801169f 	.word	0x0801169f
 8011628:	080116d3 	.word	0x080116d3
 801162c:	080116d3 	.word	0x080116d3
 8011630:	080116d3 	.word	0x080116d3
 8011634:	080116d3 	.word	0x080116d3
 8011638:	080116d3 	.word	0x080116d3
 801163c:	080116d3 	.word	0x080116d3
 8011640:	080116d3 	.word	0x080116d3
 8011644:	080116d3 	.word	0x080116d3
 8011648:	080116d3 	.word	0x080116d3
 801164c:	080116d3 	.word	0x080116d3
 8011650:	080116d3 	.word	0x080116d3
 8011654:	080116d3 	.word	0x080116d3
 8011658:	080116d3 	.word	0x080116d3
 801165c:	080116d3 	.word	0x080116d3
 8011660:	080116d3 	.word	0x080116d3
 8011664:	080116c5 	.word	0x080116c5
 8011668:	2b40      	cmp	r3, #64	; 0x40
 801166a:	d02e      	beq.n	80116ca <UART_SetConfig+0xab2>
 801166c:	e031      	b.n	80116d2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801166e:	f7f9 f8cd 	bl	800a80c <HAL_RCC_GetPCLK1Freq>
 8011672:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011674:	e033      	b.n	80116de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011676:	f7f9 f8df 	bl	800a838 <HAL_RCC_GetPCLK2Freq>
 801167a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801167c:	e02f      	b.n	80116de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801167e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011682:	4618      	mov	r0, r3
 8011684:	f7fa ff76 	bl	800c574 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801168a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801168c:	e027      	b.n	80116de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801168e:	f107 0318 	add.w	r3, r7, #24
 8011692:	4618      	mov	r0, r3
 8011694:	f7fb f8c2 	bl	800c81c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011698:	69fb      	ldr	r3, [r7, #28]
 801169a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801169c:	e01f      	b.n	80116de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801169e:	4b69      	ldr	r3, [pc, #420]	; (8011844 <UART_SetConfig+0xc2c>)
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	f003 0320 	and.w	r3, r3, #32
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d009      	beq.n	80116be <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80116aa:	4b66      	ldr	r3, [pc, #408]	; (8011844 <UART_SetConfig+0xc2c>)
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	08db      	lsrs	r3, r3, #3
 80116b0:	f003 0303 	and.w	r3, r3, #3
 80116b4:	4a64      	ldr	r2, [pc, #400]	; (8011848 <UART_SetConfig+0xc30>)
 80116b6:	fa22 f303 	lsr.w	r3, r2, r3
 80116ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80116bc:	e00f      	b.n	80116de <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80116be:	4b62      	ldr	r3, [pc, #392]	; (8011848 <UART_SetConfig+0xc30>)
 80116c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116c2:	e00c      	b.n	80116de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80116c4:	4b61      	ldr	r3, [pc, #388]	; (801184c <UART_SetConfig+0xc34>)
 80116c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116c8:	e009      	b.n	80116de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80116ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80116ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116d0:	e005      	b.n	80116de <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80116d2:	2300      	movs	r3, #0
 80116d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80116d6:	2301      	movs	r3, #1
 80116d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80116dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80116de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	f000 80ea 	beq.w	80118ba <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80116e6:	697b      	ldr	r3, [r7, #20]
 80116e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116ea:	4a55      	ldr	r2, [pc, #340]	; (8011840 <UART_SetConfig+0xc28>)
 80116ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80116f0:	461a      	mov	r2, r3
 80116f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80116f8:	005a      	lsls	r2, r3, #1
 80116fa:	697b      	ldr	r3, [r7, #20]
 80116fc:	685b      	ldr	r3, [r3, #4]
 80116fe:	085b      	lsrs	r3, r3, #1
 8011700:	441a      	add	r2, r3
 8011702:	697b      	ldr	r3, [r7, #20]
 8011704:	685b      	ldr	r3, [r3, #4]
 8011706:	fbb2 f3f3 	udiv	r3, r2, r3
 801170a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801170c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801170e:	2b0f      	cmp	r3, #15
 8011710:	d916      	bls.n	8011740 <UART_SetConfig+0xb28>
 8011712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011718:	d212      	bcs.n	8011740 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801171a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801171c:	b29b      	uxth	r3, r3
 801171e:	f023 030f 	bic.w	r3, r3, #15
 8011722:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011726:	085b      	lsrs	r3, r3, #1
 8011728:	b29b      	uxth	r3, r3
 801172a:	f003 0307 	and.w	r3, r3, #7
 801172e:	b29a      	uxth	r2, r3
 8011730:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011732:	4313      	orrs	r3, r2
 8011734:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011736:	697b      	ldr	r3, [r7, #20]
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801173c:	60da      	str	r2, [r3, #12]
 801173e:	e0bc      	b.n	80118ba <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011740:	2301      	movs	r3, #1
 8011742:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011746:	e0b8      	b.n	80118ba <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011748:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801174c:	2b20      	cmp	r3, #32
 801174e:	dc4b      	bgt.n	80117e8 <UART_SetConfig+0xbd0>
 8011750:	2b00      	cmp	r3, #0
 8011752:	f2c0 8087 	blt.w	8011864 <UART_SetConfig+0xc4c>
 8011756:	2b20      	cmp	r3, #32
 8011758:	f200 8084 	bhi.w	8011864 <UART_SetConfig+0xc4c>
 801175c:	a201      	add	r2, pc, #4	; (adr r2, 8011764 <UART_SetConfig+0xb4c>)
 801175e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011762:	bf00      	nop
 8011764:	080117ef 	.word	0x080117ef
 8011768:	080117f7 	.word	0x080117f7
 801176c:	08011865 	.word	0x08011865
 8011770:	08011865 	.word	0x08011865
 8011774:	080117ff 	.word	0x080117ff
 8011778:	08011865 	.word	0x08011865
 801177c:	08011865 	.word	0x08011865
 8011780:	08011865 	.word	0x08011865
 8011784:	0801180f 	.word	0x0801180f
 8011788:	08011865 	.word	0x08011865
 801178c:	08011865 	.word	0x08011865
 8011790:	08011865 	.word	0x08011865
 8011794:	08011865 	.word	0x08011865
 8011798:	08011865 	.word	0x08011865
 801179c:	08011865 	.word	0x08011865
 80117a0:	08011865 	.word	0x08011865
 80117a4:	0801181f 	.word	0x0801181f
 80117a8:	08011865 	.word	0x08011865
 80117ac:	08011865 	.word	0x08011865
 80117b0:	08011865 	.word	0x08011865
 80117b4:	08011865 	.word	0x08011865
 80117b8:	08011865 	.word	0x08011865
 80117bc:	08011865 	.word	0x08011865
 80117c0:	08011865 	.word	0x08011865
 80117c4:	08011865 	.word	0x08011865
 80117c8:	08011865 	.word	0x08011865
 80117cc:	08011865 	.word	0x08011865
 80117d0:	08011865 	.word	0x08011865
 80117d4:	08011865 	.word	0x08011865
 80117d8:	08011865 	.word	0x08011865
 80117dc:	08011865 	.word	0x08011865
 80117e0:	08011865 	.word	0x08011865
 80117e4:	08011857 	.word	0x08011857
 80117e8:	2b40      	cmp	r3, #64	; 0x40
 80117ea:	d037      	beq.n	801185c <UART_SetConfig+0xc44>
 80117ec:	e03a      	b.n	8011864 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80117ee:	f7f9 f80d 	bl	800a80c <HAL_RCC_GetPCLK1Freq>
 80117f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80117f4:	e03c      	b.n	8011870 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80117f6:	f7f9 f81f 	bl	800a838 <HAL_RCC_GetPCLK2Freq>
 80117fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80117fc:	e038      	b.n	8011870 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80117fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011802:	4618      	mov	r0, r3
 8011804:	f7fa feb6 	bl	800c574 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801180a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801180c:	e030      	b.n	8011870 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801180e:	f107 0318 	add.w	r3, r7, #24
 8011812:	4618      	mov	r0, r3
 8011814:	f7fb f802 	bl	800c81c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011818:	69fb      	ldr	r3, [r7, #28]
 801181a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801181c:	e028      	b.n	8011870 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801181e:	4b09      	ldr	r3, [pc, #36]	; (8011844 <UART_SetConfig+0xc2c>)
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	f003 0320 	and.w	r3, r3, #32
 8011826:	2b00      	cmp	r3, #0
 8011828:	d012      	beq.n	8011850 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801182a:	4b06      	ldr	r3, [pc, #24]	; (8011844 <UART_SetConfig+0xc2c>)
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	08db      	lsrs	r3, r3, #3
 8011830:	f003 0303 	and.w	r3, r3, #3
 8011834:	4a04      	ldr	r2, [pc, #16]	; (8011848 <UART_SetConfig+0xc30>)
 8011836:	fa22 f303 	lsr.w	r3, r2, r3
 801183a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801183c:	e018      	b.n	8011870 <UART_SetConfig+0xc58>
 801183e:	bf00      	nop
 8011840:	080185b8 	.word	0x080185b8
 8011844:	58024400 	.word	0x58024400
 8011848:	03d09000 	.word	0x03d09000
 801184c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8011850:	4b24      	ldr	r3, [pc, #144]	; (80118e4 <UART_SetConfig+0xccc>)
 8011852:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011854:	e00c      	b.n	8011870 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011856:	4b24      	ldr	r3, [pc, #144]	; (80118e8 <UART_SetConfig+0xcd0>)
 8011858:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801185a:	e009      	b.n	8011870 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801185c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011860:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011862:	e005      	b.n	8011870 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8011864:	2300      	movs	r3, #0
 8011866:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011868:	2301      	movs	r3, #1
 801186a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801186e:	bf00      	nop
    }

    if (pclk != 0U)
 8011870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011872:	2b00      	cmp	r3, #0
 8011874:	d021      	beq.n	80118ba <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011876:	697b      	ldr	r3, [r7, #20]
 8011878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801187a:	4a1c      	ldr	r2, [pc, #112]	; (80118ec <UART_SetConfig+0xcd4>)
 801187c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011880:	461a      	mov	r2, r3
 8011882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011884:	fbb3 f2f2 	udiv	r2, r3, r2
 8011888:	697b      	ldr	r3, [r7, #20]
 801188a:	685b      	ldr	r3, [r3, #4]
 801188c:	085b      	lsrs	r3, r3, #1
 801188e:	441a      	add	r2, r3
 8011890:	697b      	ldr	r3, [r7, #20]
 8011892:	685b      	ldr	r3, [r3, #4]
 8011894:	fbb2 f3f3 	udiv	r3, r2, r3
 8011898:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801189a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801189c:	2b0f      	cmp	r3, #15
 801189e:	d909      	bls.n	80118b4 <UART_SetConfig+0xc9c>
 80118a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80118a6:	d205      	bcs.n	80118b4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80118a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118aa:	b29a      	uxth	r2, r3
 80118ac:	697b      	ldr	r3, [r7, #20]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	60da      	str	r2, [r3, #12]
 80118b2:	e002      	b.n	80118ba <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80118b4:	2301      	movs	r3, #1
 80118b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80118ba:	697b      	ldr	r3, [r7, #20]
 80118bc:	2201      	movs	r2, #1
 80118be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80118c2:	697b      	ldr	r3, [r7, #20]
 80118c4:	2201      	movs	r2, #1
 80118c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80118ca:	697b      	ldr	r3, [r7, #20]
 80118cc:	2200      	movs	r2, #0
 80118ce:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80118d0:	697b      	ldr	r3, [r7, #20]
 80118d2:	2200      	movs	r2, #0
 80118d4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80118d6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80118da:	4618      	mov	r0, r3
 80118dc:	3748      	adds	r7, #72	; 0x48
 80118de:	46bd      	mov	sp, r7
 80118e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80118e4:	03d09000 	.word	0x03d09000
 80118e8:	003d0900 	.word	0x003d0900
 80118ec:	080185b8 	.word	0x080185b8

080118f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80118f0:	b480      	push	{r7}
 80118f2:	b083      	sub	sp, #12
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118fc:	f003 0301 	and.w	r3, r3, #1
 8011900:	2b00      	cmp	r3, #0
 8011902:	d00a      	beq.n	801191a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	685b      	ldr	r3, [r3, #4]
 801190a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	430a      	orrs	r2, r1
 8011918:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801191e:	f003 0302 	and.w	r3, r3, #2
 8011922:	2b00      	cmp	r3, #0
 8011924:	d00a      	beq.n	801193c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	685b      	ldr	r3, [r3, #4]
 801192c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	430a      	orrs	r2, r1
 801193a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011940:	f003 0304 	and.w	r3, r3, #4
 8011944:	2b00      	cmp	r3, #0
 8011946:	d00a      	beq.n	801195e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	685b      	ldr	r3, [r3, #4]
 801194e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	430a      	orrs	r2, r1
 801195c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011962:	f003 0308 	and.w	r3, r3, #8
 8011966:	2b00      	cmp	r3, #0
 8011968:	d00a      	beq.n	8011980 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	685b      	ldr	r3, [r3, #4]
 8011970:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	430a      	orrs	r2, r1
 801197e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011984:	f003 0310 	and.w	r3, r3, #16
 8011988:	2b00      	cmp	r3, #0
 801198a:	d00a      	beq.n	80119a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	689b      	ldr	r3, [r3, #8]
 8011992:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	430a      	orrs	r2, r1
 80119a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119a6:	f003 0320 	and.w	r3, r3, #32
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d00a      	beq.n	80119c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	689b      	ldr	r3, [r3, #8]
 80119b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	430a      	orrs	r2, r1
 80119c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d01a      	beq.n	8011a06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	685b      	ldr	r3, [r3, #4]
 80119d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	430a      	orrs	r2, r1
 80119e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80119ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80119ee:	d10a      	bne.n	8011a06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	685b      	ldr	r3, [r3, #4]
 80119f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	430a      	orrs	r2, r1
 8011a04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d00a      	beq.n	8011a28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	685b      	ldr	r3, [r3, #4]
 8011a18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	430a      	orrs	r2, r1
 8011a26:	605a      	str	r2, [r3, #4]
  }
}
 8011a28:	bf00      	nop
 8011a2a:	370c      	adds	r7, #12
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a32:	4770      	bx	lr

08011a34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011a34:	b580      	push	{r7, lr}
 8011a36:	b098      	sub	sp, #96	; 0x60
 8011a38:	af02      	add	r7, sp, #8
 8011a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	2200      	movs	r2, #0
 8011a40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011a44:	f7f2 f822 	bl	8003a8c <HAL_GetTick>
 8011a48:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	f003 0308 	and.w	r3, r3, #8
 8011a54:	2b08      	cmp	r3, #8
 8011a56:	d12f      	bne.n	8011ab8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011a58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011a5c:	9300      	str	r3, [sp, #0]
 8011a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a60:	2200      	movs	r2, #0
 8011a62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011a66:	6878      	ldr	r0, [r7, #4]
 8011a68:	f000 f88e 	bl	8011b88 <UART_WaitOnFlagUntilTimeout>
 8011a6c:	4603      	mov	r3, r0
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d022      	beq.n	8011ab8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a7a:	e853 3f00 	ldrex	r3, [r3]
 8011a7e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011a86:	653b      	str	r3, [r7, #80]	; 0x50
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	461a      	mov	r2, r3
 8011a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a90:	647b      	str	r3, [r7, #68]	; 0x44
 8011a92:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011a96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011a98:	e841 2300 	strex	r3, r2, [r1]
 8011a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d1e6      	bne.n	8011a72 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	2220      	movs	r2, #32
 8011aa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	2200      	movs	r2, #0
 8011ab0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011ab4:	2303      	movs	r3, #3
 8011ab6:	e063      	b.n	8011b80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	f003 0304 	and.w	r3, r3, #4
 8011ac2:	2b04      	cmp	r3, #4
 8011ac4:	d149      	bne.n	8011b5a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011ac6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011aca:	9300      	str	r3, [sp, #0]
 8011acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ace:	2200      	movs	r2, #0
 8011ad0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011ad4:	6878      	ldr	r0, [r7, #4]
 8011ad6:	f000 f857 	bl	8011b88 <UART_WaitOnFlagUntilTimeout>
 8011ada:	4603      	mov	r3, r0
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d03c      	beq.n	8011b5a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ae8:	e853 3f00 	ldrex	r3, [r3]
 8011aec:	623b      	str	r3, [r7, #32]
   return(result);
 8011aee:	6a3b      	ldr	r3, [r7, #32]
 8011af0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011af4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	461a      	mov	r2, r3
 8011afc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011afe:	633b      	str	r3, [r7, #48]	; 0x30
 8011b00:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011b04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b06:	e841 2300 	strex	r3, r2, [r1]
 8011b0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d1e6      	bne.n	8011ae0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	3308      	adds	r3, #8
 8011b18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b1a:	693b      	ldr	r3, [r7, #16]
 8011b1c:	e853 3f00 	ldrex	r3, [r3]
 8011b20:	60fb      	str	r3, [r7, #12]
   return(result);
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	f023 0301 	bic.w	r3, r3, #1
 8011b28:	64bb      	str	r3, [r7, #72]	; 0x48
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	3308      	adds	r3, #8
 8011b30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011b32:	61fa      	str	r2, [r7, #28]
 8011b34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b36:	69b9      	ldr	r1, [r7, #24]
 8011b38:	69fa      	ldr	r2, [r7, #28]
 8011b3a:	e841 2300 	strex	r3, r2, [r1]
 8011b3e:	617b      	str	r3, [r7, #20]
   return(result);
 8011b40:	697b      	ldr	r3, [r7, #20]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d1e5      	bne.n	8011b12 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	2220      	movs	r2, #32
 8011b4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	2200      	movs	r2, #0
 8011b52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011b56:	2303      	movs	r3, #3
 8011b58:	e012      	b.n	8011b80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	2220      	movs	r2, #32
 8011b5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	2220      	movs	r2, #32
 8011b66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	2200      	movs	r2, #0
 8011b6e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	2200      	movs	r2, #0
 8011b74:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	2200      	movs	r2, #0
 8011b7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011b7e:	2300      	movs	r3, #0
}
 8011b80:	4618      	mov	r0, r3
 8011b82:	3758      	adds	r7, #88	; 0x58
 8011b84:	46bd      	mov	sp, r7
 8011b86:	bd80      	pop	{r7, pc}

08011b88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b084      	sub	sp, #16
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	60f8      	str	r0, [r7, #12]
 8011b90:	60b9      	str	r1, [r7, #8]
 8011b92:	603b      	str	r3, [r7, #0]
 8011b94:	4613      	mov	r3, r2
 8011b96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011b98:	e049      	b.n	8011c2e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011b9a:	69bb      	ldr	r3, [r7, #24]
 8011b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ba0:	d045      	beq.n	8011c2e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011ba2:	f7f1 ff73 	bl	8003a8c <HAL_GetTick>
 8011ba6:	4602      	mov	r2, r0
 8011ba8:	683b      	ldr	r3, [r7, #0]
 8011baa:	1ad3      	subs	r3, r2, r3
 8011bac:	69ba      	ldr	r2, [r7, #24]
 8011bae:	429a      	cmp	r2, r3
 8011bb0:	d302      	bcc.n	8011bb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8011bb2:	69bb      	ldr	r3, [r7, #24]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d101      	bne.n	8011bbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011bb8:	2303      	movs	r3, #3
 8011bba:	e048      	b.n	8011c4e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	f003 0304 	and.w	r3, r3, #4
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d031      	beq.n	8011c2e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	69db      	ldr	r3, [r3, #28]
 8011bd0:	f003 0308 	and.w	r3, r3, #8
 8011bd4:	2b08      	cmp	r3, #8
 8011bd6:	d110      	bne.n	8011bfa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	2208      	movs	r2, #8
 8011bde:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8011be0:	68f8      	ldr	r0, [r7, #12]
 8011be2:	f000 f839 	bl	8011c58 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	2208      	movs	r2, #8
 8011bea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	2200      	movs	r2, #0
 8011bf2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8011bf6:	2301      	movs	r3, #1
 8011bf8:	e029      	b.n	8011c4e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	69db      	ldr	r3, [r3, #28]
 8011c00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011c04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011c08:	d111      	bne.n	8011c2e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011c12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011c14:	68f8      	ldr	r0, [r7, #12]
 8011c16:	f000 f81f 	bl	8011c58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	2220      	movs	r2, #32
 8011c1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	2200      	movs	r2, #0
 8011c26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011c2a:	2303      	movs	r3, #3
 8011c2c:	e00f      	b.n	8011c4e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	69da      	ldr	r2, [r3, #28]
 8011c34:	68bb      	ldr	r3, [r7, #8]
 8011c36:	4013      	ands	r3, r2
 8011c38:	68ba      	ldr	r2, [r7, #8]
 8011c3a:	429a      	cmp	r2, r3
 8011c3c:	bf0c      	ite	eq
 8011c3e:	2301      	moveq	r3, #1
 8011c40:	2300      	movne	r3, #0
 8011c42:	b2db      	uxtb	r3, r3
 8011c44:	461a      	mov	r2, r3
 8011c46:	79fb      	ldrb	r3, [r7, #7]
 8011c48:	429a      	cmp	r2, r3
 8011c4a:	d0a6      	beq.n	8011b9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011c4c:	2300      	movs	r3, #0
}
 8011c4e:	4618      	mov	r0, r3
 8011c50:	3710      	adds	r7, #16
 8011c52:	46bd      	mov	sp, r7
 8011c54:	bd80      	pop	{r7, pc}
	...

08011c58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011c58:	b480      	push	{r7}
 8011c5a:	b095      	sub	sp, #84	; 0x54
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c68:	e853 3f00 	ldrex	r3, [r3]
 8011c6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011c74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	461a      	mov	r2, r3
 8011c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c7e:	643b      	str	r3, [r7, #64]	; 0x40
 8011c80:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011c84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011c86:	e841 2300 	strex	r3, r2, [r1]
 8011c8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d1e6      	bne.n	8011c60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	3308      	adds	r3, #8
 8011c98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c9a:	6a3b      	ldr	r3, [r7, #32]
 8011c9c:	e853 3f00 	ldrex	r3, [r3]
 8011ca0:	61fb      	str	r3, [r7, #28]
   return(result);
 8011ca2:	69fa      	ldr	r2, [r7, #28]
 8011ca4:	4b1e      	ldr	r3, [pc, #120]	; (8011d20 <UART_EndRxTransfer+0xc8>)
 8011ca6:	4013      	ands	r3, r2
 8011ca8:	64bb      	str	r3, [r7, #72]	; 0x48
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	3308      	adds	r3, #8
 8011cb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011cb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011cb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011cba:	e841 2300 	strex	r3, r2, [r1]
 8011cbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d1e5      	bne.n	8011c92 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cca:	2b01      	cmp	r3, #1
 8011ccc:	d118      	bne.n	8011d00 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	e853 3f00 	ldrex	r3, [r3]
 8011cda:	60bb      	str	r3, [r7, #8]
   return(result);
 8011cdc:	68bb      	ldr	r3, [r7, #8]
 8011cde:	f023 0310 	bic.w	r3, r3, #16
 8011ce2:	647b      	str	r3, [r7, #68]	; 0x44
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	461a      	mov	r2, r3
 8011cea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011cec:	61bb      	str	r3, [r7, #24]
 8011cee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cf0:	6979      	ldr	r1, [r7, #20]
 8011cf2:	69ba      	ldr	r2, [r7, #24]
 8011cf4:	e841 2300 	strex	r3, r2, [r1]
 8011cf8:	613b      	str	r3, [r7, #16]
   return(result);
 8011cfa:	693b      	ldr	r3, [r7, #16]
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d1e6      	bne.n	8011cce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	2220      	movs	r2, #32
 8011d04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	2200      	movs	r2, #0
 8011d12:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011d14:	bf00      	nop
 8011d16:	3754      	adds	r7, #84	; 0x54
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d1e:	4770      	bx	lr
 8011d20:	effffffe 	.word	0xeffffffe

08011d24 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011d24:	b480      	push	{r7}
 8011d26:	b085      	sub	sp, #20
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011d32:	2b01      	cmp	r3, #1
 8011d34:	d101      	bne.n	8011d3a <HAL_UARTEx_DisableFifoMode+0x16>
 8011d36:	2302      	movs	r3, #2
 8011d38:	e027      	b.n	8011d8a <HAL_UARTEx_DisableFifoMode+0x66>
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	2201      	movs	r2, #1
 8011d3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	2224      	movs	r2, #36	; 0x24
 8011d46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	681a      	ldr	r2, [r3, #0]
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	f022 0201 	bic.w	r2, r2, #1
 8011d60:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011d68:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	2200      	movs	r2, #0
 8011d6e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	68fa      	ldr	r2, [r7, #12]
 8011d76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	2220      	movs	r2, #32
 8011d7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	2200      	movs	r2, #0
 8011d84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011d88:	2300      	movs	r3, #0
}
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	3714      	adds	r7, #20
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d94:	4770      	bx	lr

08011d96 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011d96:	b580      	push	{r7, lr}
 8011d98:	b084      	sub	sp, #16
 8011d9a:	af00      	add	r7, sp, #0
 8011d9c:	6078      	str	r0, [r7, #4]
 8011d9e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011da6:	2b01      	cmp	r3, #1
 8011da8:	d101      	bne.n	8011dae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011daa:	2302      	movs	r3, #2
 8011dac:	e02d      	b.n	8011e0a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	2201      	movs	r2, #1
 8011db2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	2224      	movs	r2, #36	; 0x24
 8011dba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	681a      	ldr	r2, [r3, #0]
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	f022 0201 	bic.w	r2, r2, #1
 8011dd4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	689b      	ldr	r3, [r3, #8]
 8011ddc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	683a      	ldr	r2, [r7, #0]
 8011de6:	430a      	orrs	r2, r1
 8011de8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011dea:	6878      	ldr	r0, [r7, #4]
 8011dec:	f000 f850 	bl	8011e90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	68fa      	ldr	r2, [r7, #12]
 8011df6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	2220      	movs	r2, #32
 8011dfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	2200      	movs	r2, #0
 8011e04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011e08:	2300      	movs	r3, #0
}
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	3710      	adds	r7, #16
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	bd80      	pop	{r7, pc}

08011e12 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011e12:	b580      	push	{r7, lr}
 8011e14:	b084      	sub	sp, #16
 8011e16:	af00      	add	r7, sp, #0
 8011e18:	6078      	str	r0, [r7, #4]
 8011e1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011e22:	2b01      	cmp	r3, #1
 8011e24:	d101      	bne.n	8011e2a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011e26:	2302      	movs	r3, #2
 8011e28:	e02d      	b.n	8011e86 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	2201      	movs	r2, #1
 8011e2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	2224      	movs	r2, #36	; 0x24
 8011e36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	681a      	ldr	r2, [r3, #0]
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	f022 0201 	bic.w	r2, r2, #1
 8011e50:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	689b      	ldr	r3, [r3, #8]
 8011e58:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	683a      	ldr	r2, [r7, #0]
 8011e62:	430a      	orrs	r2, r1
 8011e64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011e66:	6878      	ldr	r0, [r7, #4]
 8011e68:	f000 f812 	bl	8011e90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	68fa      	ldr	r2, [r7, #12]
 8011e72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	2220      	movs	r2, #32
 8011e78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	2200      	movs	r2, #0
 8011e80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011e84:	2300      	movs	r3, #0
}
 8011e86:	4618      	mov	r0, r3
 8011e88:	3710      	adds	r7, #16
 8011e8a:	46bd      	mov	sp, r7
 8011e8c:	bd80      	pop	{r7, pc}
	...

08011e90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011e90:	b480      	push	{r7}
 8011e92:	b085      	sub	sp, #20
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d108      	bne.n	8011eb2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	2201      	movs	r2, #1
 8011ea4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	2201      	movs	r2, #1
 8011eac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011eb0:	e031      	b.n	8011f16 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011eb2:	2310      	movs	r3, #16
 8011eb4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011eb6:	2310      	movs	r3, #16
 8011eb8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	689b      	ldr	r3, [r3, #8]
 8011ec0:	0e5b      	lsrs	r3, r3, #25
 8011ec2:	b2db      	uxtb	r3, r3
 8011ec4:	f003 0307 	and.w	r3, r3, #7
 8011ec8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	689b      	ldr	r3, [r3, #8]
 8011ed0:	0f5b      	lsrs	r3, r3, #29
 8011ed2:	b2db      	uxtb	r3, r3
 8011ed4:	f003 0307 	and.w	r3, r3, #7
 8011ed8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011eda:	7bbb      	ldrb	r3, [r7, #14]
 8011edc:	7b3a      	ldrb	r2, [r7, #12]
 8011ede:	4911      	ldr	r1, [pc, #68]	; (8011f24 <UARTEx_SetNbDataToProcess+0x94>)
 8011ee0:	5c8a      	ldrb	r2, [r1, r2]
 8011ee2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011ee6:	7b3a      	ldrb	r2, [r7, #12]
 8011ee8:	490f      	ldr	r1, [pc, #60]	; (8011f28 <UARTEx_SetNbDataToProcess+0x98>)
 8011eea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011eec:	fb93 f3f2 	sdiv	r3, r3, r2
 8011ef0:	b29a      	uxth	r2, r3
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011ef8:	7bfb      	ldrb	r3, [r7, #15]
 8011efa:	7b7a      	ldrb	r2, [r7, #13]
 8011efc:	4909      	ldr	r1, [pc, #36]	; (8011f24 <UARTEx_SetNbDataToProcess+0x94>)
 8011efe:	5c8a      	ldrb	r2, [r1, r2]
 8011f00:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011f04:	7b7a      	ldrb	r2, [r7, #13]
 8011f06:	4908      	ldr	r1, [pc, #32]	; (8011f28 <UARTEx_SetNbDataToProcess+0x98>)
 8011f08:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011f0a:	fb93 f3f2 	sdiv	r3, r3, r2
 8011f0e:	b29a      	uxth	r2, r3
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011f16:	bf00      	nop
 8011f18:	3714      	adds	r7, #20
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f20:	4770      	bx	lr
 8011f22:	bf00      	nop
 8011f24:	080185d0 	.word	0x080185d0
 8011f28:	080185d8 	.word	0x080185d8

08011f2c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8011f2c:	b084      	sub	sp, #16
 8011f2e:	b480      	push	{r7}
 8011f30:	b085      	sub	sp, #20
 8011f32:	af00      	add	r7, sp, #0
 8011f34:	6078      	str	r0, [r7, #4]
 8011f36:	f107 001c 	add.w	r0, r7, #28
 8011f3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011f3e:	2300      	movs	r3, #0
 8011f40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8011f42:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8011f44:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8011f46:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8011f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8011f4a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8011f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8011f4e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8011f52:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8011f54:	68fa      	ldr	r2, [r7, #12]
 8011f56:	4313      	orrs	r3, r2
 8011f58:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	685a      	ldr	r2, [r3, #4]
 8011f5e:	4b07      	ldr	r3, [pc, #28]	; (8011f7c <SDMMC_Init+0x50>)
 8011f60:	4013      	ands	r3, r2
 8011f62:	68fa      	ldr	r2, [r7, #12]
 8011f64:	431a      	orrs	r2, r3
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011f6a:	2300      	movs	r3, #0
}
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	3714      	adds	r7, #20
 8011f70:	46bd      	mov	sp, r7
 8011f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f76:	b004      	add	sp, #16
 8011f78:	4770      	bx	lr
 8011f7a:	bf00      	nop
 8011f7c:	ffc02c00 	.word	0xffc02c00

08011f80 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8011f80:	b480      	push	{r7}
 8011f82:	b083      	sub	sp, #12
 8011f84:	af00      	add	r7, sp, #0
 8011f86:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011f8e:	4618      	mov	r0, r3
 8011f90:	370c      	adds	r7, #12
 8011f92:	46bd      	mov	sp, r7
 8011f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f98:	4770      	bx	lr

08011f9a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8011f9a:	b480      	push	{r7}
 8011f9c:	b083      	sub	sp, #12
 8011f9e:	af00      	add	r7, sp, #0
 8011fa0:	6078      	str	r0, [r7, #4]
 8011fa2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8011fa4:	683b      	ldr	r3, [r7, #0]
 8011fa6:	681a      	ldr	r2, [r3, #0]
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011fae:	2300      	movs	r3, #0
}
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	370c      	adds	r7, #12
 8011fb4:	46bd      	mov	sp, r7
 8011fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fba:	4770      	bx	lr

08011fbc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8011fbc:	b480      	push	{r7}
 8011fbe:	b083      	sub	sp, #12
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	f043 0203 	orr.w	r2, r3, #3
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8011fd0:	2300      	movs	r3, #0
}
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	370c      	adds	r7, #12
 8011fd6:	46bd      	mov	sp, r7
 8011fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fdc:	4770      	bx	lr

08011fde <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8011fde:	b480      	push	{r7}
 8011fe0:	b083      	sub	sp, #12
 8011fe2:	af00      	add	r7, sp, #0
 8011fe4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	f003 0303 	and.w	r3, r3, #3
}
 8011fee:	4618      	mov	r0, r3
 8011ff0:	370c      	adds	r7, #12
 8011ff2:	46bd      	mov	sp, r7
 8011ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff8:	4770      	bx	lr
	...

08011ffc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8011ffc:	b480      	push	{r7}
 8011ffe:	b085      	sub	sp, #20
 8012000:	af00      	add	r7, sp, #0
 8012002:	6078      	str	r0, [r7, #4]
 8012004:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012006:	2300      	movs	r3, #0
 8012008:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801200a:	683b      	ldr	r3, [r7, #0]
 801200c:	681a      	ldr	r2, [r3, #0]
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012012:	683b      	ldr	r3, [r7, #0]
 8012014:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8012016:	683b      	ldr	r3, [r7, #0]
 8012018:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801201a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 801201c:	683b      	ldr	r3, [r7, #0]
 801201e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8012020:	431a      	orrs	r2, r3
                       Command->CPSM);
 8012022:	683b      	ldr	r3, [r7, #0]
 8012024:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8012026:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012028:	68fa      	ldr	r2, [r7, #12]
 801202a:	4313      	orrs	r3, r2
 801202c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	68da      	ldr	r2, [r3, #12]
 8012032:	4b06      	ldr	r3, [pc, #24]	; (801204c <SDMMC_SendCommand+0x50>)
 8012034:	4013      	ands	r3, r2
 8012036:	68fa      	ldr	r2, [r7, #12]
 8012038:	431a      	orrs	r2, r3
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801203e:	2300      	movs	r3, #0
}
 8012040:	4618      	mov	r0, r3
 8012042:	3714      	adds	r7, #20
 8012044:	46bd      	mov	sp, r7
 8012046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801204a:	4770      	bx	lr
 801204c:	fffee0c0 	.word	0xfffee0c0

08012050 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8012050:	b480      	push	{r7}
 8012052:	b083      	sub	sp, #12
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	691b      	ldr	r3, [r3, #16]
 801205c:	b2db      	uxtb	r3, r3
}
 801205e:	4618      	mov	r0, r3
 8012060:	370c      	adds	r7, #12
 8012062:	46bd      	mov	sp, r7
 8012064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012068:	4770      	bx	lr

0801206a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 801206a:	b480      	push	{r7}
 801206c:	b085      	sub	sp, #20
 801206e:	af00      	add	r7, sp, #0
 8012070:	6078      	str	r0, [r7, #4]
 8012072:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	3314      	adds	r3, #20
 8012078:	461a      	mov	r2, r3
 801207a:	683b      	ldr	r3, [r7, #0]
 801207c:	4413      	add	r3, r2
 801207e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	681b      	ldr	r3, [r3, #0]
}
 8012084:	4618      	mov	r0, r3
 8012086:	3714      	adds	r7, #20
 8012088:	46bd      	mov	sp, r7
 801208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801208e:	4770      	bx	lr

08012090 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8012090:	b480      	push	{r7}
 8012092:	b085      	sub	sp, #20
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]
 8012098:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801209a:	2300      	movs	r3, #0
 801209c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 801209e:	683b      	ldr	r3, [r7, #0]
 80120a0:	681a      	ldr	r2, [r3, #0]
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80120a6:	683b      	ldr	r3, [r7, #0]
 80120a8:	685a      	ldr	r2, [r3, #4]
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80120ae:	683b      	ldr	r3, [r7, #0]
 80120b0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80120b2:	683b      	ldr	r3, [r7, #0]
 80120b4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80120b6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80120b8:	683b      	ldr	r3, [r7, #0]
 80120ba:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80120bc:	431a      	orrs	r2, r3
                       Data->DPSM);
 80120be:	683b      	ldr	r3, [r7, #0]
 80120c0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80120c2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80120c4:	68fa      	ldr	r2, [r7, #12]
 80120c6:	4313      	orrs	r3, r2
 80120c8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	431a      	orrs	r2, r3
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80120da:	2300      	movs	r3, #0

}
 80120dc:	4618      	mov	r0, r3
 80120de:	3714      	adds	r7, #20
 80120e0:	46bd      	mov	sp, r7
 80120e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e6:	4770      	bx	lr

080120e8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80120e8:	b580      	push	{r7, lr}
 80120ea:	b088      	sub	sp, #32
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	6078      	str	r0, [r7, #4]
 80120f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80120f2:	683b      	ldr	r3, [r7, #0]
 80120f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80120f6:	2310      	movs	r3, #16
 80120f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80120fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80120fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012100:	2300      	movs	r3, #0
 8012102:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012104:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012108:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801210a:	f107 0308 	add.w	r3, r7, #8
 801210e:	4619      	mov	r1, r3
 8012110:	6878      	ldr	r0, [r7, #4]
 8012112:	f7ff ff73 	bl	8011ffc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8012116:	f241 3288 	movw	r2, #5000	; 0x1388
 801211a:	2110      	movs	r1, #16
 801211c:	6878      	ldr	r0, [r7, #4]
 801211e:	f000 fa5f 	bl	80125e0 <SDMMC_GetCmdResp1>
 8012122:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012124:	69fb      	ldr	r3, [r7, #28]
}
 8012126:	4618      	mov	r0, r3
 8012128:	3720      	adds	r7, #32
 801212a:	46bd      	mov	sp, r7
 801212c:	bd80      	pop	{r7, pc}

0801212e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801212e:	b580      	push	{r7, lr}
 8012130:	b088      	sub	sp, #32
 8012132:	af00      	add	r7, sp, #0
 8012134:	6078      	str	r0, [r7, #4]
 8012136:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012138:	683b      	ldr	r3, [r7, #0]
 801213a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801213c:	2311      	movs	r3, #17
 801213e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012140:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012144:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012146:	2300      	movs	r3, #0
 8012148:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801214a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801214e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012150:	f107 0308 	add.w	r3, r7, #8
 8012154:	4619      	mov	r1, r3
 8012156:	6878      	ldr	r0, [r7, #4]
 8012158:	f7ff ff50 	bl	8011ffc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801215c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012160:	2111      	movs	r1, #17
 8012162:	6878      	ldr	r0, [r7, #4]
 8012164:	f000 fa3c 	bl	80125e0 <SDMMC_GetCmdResp1>
 8012168:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801216a:	69fb      	ldr	r3, [r7, #28]
}
 801216c:	4618      	mov	r0, r3
 801216e:	3720      	adds	r7, #32
 8012170:	46bd      	mov	sp, r7
 8012172:	bd80      	pop	{r7, pc}

08012174 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b088      	sub	sp, #32
 8012178:	af00      	add	r7, sp, #0
 801217a:	6078      	str	r0, [r7, #4]
 801217c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801217e:	683b      	ldr	r3, [r7, #0]
 8012180:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8012182:	2312      	movs	r3, #18
 8012184:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012186:	f44f 7380 	mov.w	r3, #256	; 0x100
 801218a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801218c:	2300      	movs	r3, #0
 801218e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012190:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012194:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012196:	f107 0308 	add.w	r3, r7, #8
 801219a:	4619      	mov	r1, r3
 801219c:	6878      	ldr	r0, [r7, #4]
 801219e:	f7ff ff2d 	bl	8011ffc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80121a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80121a6:	2112      	movs	r1, #18
 80121a8:	6878      	ldr	r0, [r7, #4]
 80121aa:	f000 fa19 	bl	80125e0 <SDMMC_GetCmdResp1>
 80121ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80121b0:	69fb      	ldr	r3, [r7, #28]
}
 80121b2:	4618      	mov	r0, r3
 80121b4:	3720      	adds	r7, #32
 80121b6:	46bd      	mov	sp, r7
 80121b8:	bd80      	pop	{r7, pc}

080121ba <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80121ba:	b580      	push	{r7, lr}
 80121bc:	b088      	sub	sp, #32
 80121be:	af00      	add	r7, sp, #0
 80121c0:	6078      	str	r0, [r7, #4]
 80121c2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80121c4:	683b      	ldr	r3, [r7, #0]
 80121c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80121c8:	2318      	movs	r3, #24
 80121ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80121cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80121d2:	2300      	movs	r3, #0
 80121d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80121d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80121da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80121dc:	f107 0308 	add.w	r3, r7, #8
 80121e0:	4619      	mov	r1, r3
 80121e2:	6878      	ldr	r0, [r7, #4]
 80121e4:	f7ff ff0a 	bl	8011ffc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80121e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80121ec:	2118      	movs	r1, #24
 80121ee:	6878      	ldr	r0, [r7, #4]
 80121f0:	f000 f9f6 	bl	80125e0 <SDMMC_GetCmdResp1>
 80121f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80121f6:	69fb      	ldr	r3, [r7, #28]
}
 80121f8:	4618      	mov	r0, r3
 80121fa:	3720      	adds	r7, #32
 80121fc:	46bd      	mov	sp, r7
 80121fe:	bd80      	pop	{r7, pc}

08012200 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012200:	b580      	push	{r7, lr}
 8012202:	b088      	sub	sp, #32
 8012204:	af00      	add	r7, sp, #0
 8012206:	6078      	str	r0, [r7, #4]
 8012208:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801220a:	683b      	ldr	r3, [r7, #0]
 801220c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801220e:	2319      	movs	r3, #25
 8012210:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012212:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012216:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012218:	2300      	movs	r3, #0
 801221a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801221c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012220:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012222:	f107 0308 	add.w	r3, r7, #8
 8012226:	4619      	mov	r1, r3
 8012228:	6878      	ldr	r0, [r7, #4]
 801222a:	f7ff fee7 	bl	8011ffc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801222e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012232:	2119      	movs	r1, #25
 8012234:	6878      	ldr	r0, [r7, #4]
 8012236:	f000 f9d3 	bl	80125e0 <SDMMC_GetCmdResp1>
 801223a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801223c:	69fb      	ldr	r3, [r7, #28]
}
 801223e:	4618      	mov	r0, r3
 8012240:	3720      	adds	r7, #32
 8012242:	46bd      	mov	sp, r7
 8012244:	bd80      	pop	{r7, pc}
	...

08012248 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b088      	sub	sp, #32
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8012250:	2300      	movs	r3, #0
 8012252:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8012254:	230c      	movs	r3, #12
 8012256:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012258:	f44f 7380 	mov.w	r3, #256	; 0x100
 801225c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801225e:	2300      	movs	r3, #0
 8012260:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012262:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012266:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	68db      	ldr	r3, [r3, #12]
 801226c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	68db      	ldr	r3, [r3, #12]
 8012278:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012280:	f107 0308 	add.w	r3, r7, #8
 8012284:	4619      	mov	r1, r3
 8012286:	6878      	ldr	r0, [r7, #4]
 8012288:	f7ff feb8 	bl	8011ffc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 801228c:	4a0b      	ldr	r2, [pc, #44]	; (80122bc <SDMMC_CmdStopTransfer+0x74>)
 801228e:	210c      	movs	r1, #12
 8012290:	6878      	ldr	r0, [r7, #4]
 8012292:	f000 f9a5 	bl	80125e0 <SDMMC_GetCmdResp1>
 8012296:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	68db      	ldr	r3, [r3, #12]
 801229c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80122a4:	69fb      	ldr	r3, [r7, #28]
 80122a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80122aa:	d101      	bne.n	80122b0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80122ac:	2300      	movs	r3, #0
 80122ae:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80122b0:	69fb      	ldr	r3, [r7, #28]
}
 80122b2:	4618      	mov	r0, r3
 80122b4:	3720      	adds	r7, #32
 80122b6:	46bd      	mov	sp, r7
 80122b8:	bd80      	pop	{r7, pc}
 80122ba:	bf00      	nop
 80122bc:	05f5e100 	.word	0x05f5e100

080122c0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80122c0:	b580      	push	{r7, lr}
 80122c2:	b088      	sub	sp, #32
 80122c4:	af00      	add	r7, sp, #0
 80122c6:	6078      	str	r0, [r7, #4]
 80122c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80122ca:	683b      	ldr	r3, [r7, #0]
 80122cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80122ce:	2307      	movs	r3, #7
 80122d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80122d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80122d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80122d8:	2300      	movs	r3, #0
 80122da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80122dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80122e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80122e2:	f107 0308 	add.w	r3, r7, #8
 80122e6:	4619      	mov	r1, r3
 80122e8:	6878      	ldr	r0, [r7, #4]
 80122ea:	f7ff fe87 	bl	8011ffc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80122ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80122f2:	2107      	movs	r1, #7
 80122f4:	6878      	ldr	r0, [r7, #4]
 80122f6:	f000 f973 	bl	80125e0 <SDMMC_GetCmdResp1>
 80122fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80122fc:	69fb      	ldr	r3, [r7, #28]
}
 80122fe:	4618      	mov	r0, r3
 8012300:	3720      	adds	r7, #32
 8012302:	46bd      	mov	sp, r7
 8012304:	bd80      	pop	{r7, pc}

08012306 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8012306:	b580      	push	{r7, lr}
 8012308:	b088      	sub	sp, #32
 801230a:	af00      	add	r7, sp, #0
 801230c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801230e:	2300      	movs	r3, #0
 8012310:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8012312:	2300      	movs	r3, #0
 8012314:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8012316:	2300      	movs	r3, #0
 8012318:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801231a:	2300      	movs	r3, #0
 801231c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801231e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012322:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012324:	f107 0308 	add.w	r3, r7, #8
 8012328:	4619      	mov	r1, r3
 801232a:	6878      	ldr	r0, [r7, #4]
 801232c:	f7ff fe66 	bl	8011ffc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8012330:	6878      	ldr	r0, [r7, #4]
 8012332:	f000 fb97 	bl	8012a64 <SDMMC_GetCmdError>
 8012336:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012338:	69fb      	ldr	r3, [r7, #28]
}
 801233a:	4618      	mov	r0, r3
 801233c:	3720      	adds	r7, #32
 801233e:	46bd      	mov	sp, r7
 8012340:	bd80      	pop	{r7, pc}

08012342 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8012342:	b580      	push	{r7, lr}
 8012344:	b088      	sub	sp, #32
 8012346:	af00      	add	r7, sp, #0
 8012348:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801234a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801234e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8012350:	2308      	movs	r3, #8
 8012352:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012354:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012358:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801235a:	2300      	movs	r3, #0
 801235c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801235e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012362:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012364:	f107 0308 	add.w	r3, r7, #8
 8012368:	4619      	mov	r1, r3
 801236a:	6878      	ldr	r0, [r7, #4]
 801236c:	f7ff fe46 	bl	8011ffc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8012370:	6878      	ldr	r0, [r7, #4]
 8012372:	f000 fb29 	bl	80129c8 <SDMMC_GetCmdResp7>
 8012376:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012378:	69fb      	ldr	r3, [r7, #28]
}
 801237a:	4618      	mov	r0, r3
 801237c:	3720      	adds	r7, #32
 801237e:	46bd      	mov	sp, r7
 8012380:	bd80      	pop	{r7, pc}

08012382 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012382:	b580      	push	{r7, lr}
 8012384:	b088      	sub	sp, #32
 8012386:	af00      	add	r7, sp, #0
 8012388:	6078      	str	r0, [r7, #4]
 801238a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801238c:	683b      	ldr	r3, [r7, #0]
 801238e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8012390:	2337      	movs	r3, #55	; 0x37
 8012392:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012394:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012398:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801239a:	2300      	movs	r3, #0
 801239c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801239e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80123a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80123a4:	f107 0308 	add.w	r3, r7, #8
 80123a8:	4619      	mov	r1, r3
 80123aa:	6878      	ldr	r0, [r7, #4]
 80123ac:	f7ff fe26 	bl	8011ffc <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80123b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80123b4:	2137      	movs	r1, #55	; 0x37
 80123b6:	6878      	ldr	r0, [r7, #4]
 80123b8:	f000 f912 	bl	80125e0 <SDMMC_GetCmdResp1>
 80123bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80123be:	69fb      	ldr	r3, [r7, #28]
}
 80123c0:	4618      	mov	r0, r3
 80123c2:	3720      	adds	r7, #32
 80123c4:	46bd      	mov	sp, r7
 80123c6:	bd80      	pop	{r7, pc}

080123c8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80123c8:	b580      	push	{r7, lr}
 80123ca:	b088      	sub	sp, #32
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	6078      	str	r0, [r7, #4]
 80123d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80123d2:	683b      	ldr	r3, [r7, #0]
 80123d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80123d6:	2329      	movs	r3, #41	; 0x29
 80123d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80123da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80123de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80123e0:	2300      	movs	r3, #0
 80123e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80123e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80123e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80123ea:	f107 0308 	add.w	r3, r7, #8
 80123ee:	4619      	mov	r1, r3
 80123f0:	6878      	ldr	r0, [r7, #4]
 80123f2:	f7ff fe03 	bl	8011ffc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80123f6:	6878      	ldr	r0, [r7, #4]
 80123f8:	f000 fa2e 	bl	8012858 <SDMMC_GetCmdResp3>
 80123fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80123fe:	69fb      	ldr	r3, [r7, #28]
}
 8012400:	4618      	mov	r0, r3
 8012402:	3720      	adds	r7, #32
 8012404:	46bd      	mov	sp, r7
 8012406:	bd80      	pop	{r7, pc}

08012408 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8012408:	b580      	push	{r7, lr}
 801240a:	b088      	sub	sp, #32
 801240c:	af00      	add	r7, sp, #0
 801240e:	6078      	str	r0, [r7, #4]
 8012410:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8012412:	683b      	ldr	r3, [r7, #0]
 8012414:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8012416:	2306      	movs	r3, #6
 8012418:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801241a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801241e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012420:	2300      	movs	r3, #0
 8012422:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012424:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012428:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801242a:	f107 0308 	add.w	r3, r7, #8
 801242e:	4619      	mov	r1, r3
 8012430:	6878      	ldr	r0, [r7, #4]
 8012432:	f7ff fde3 	bl	8011ffc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8012436:	f241 3288 	movw	r2, #5000	; 0x1388
 801243a:	2106      	movs	r1, #6
 801243c:	6878      	ldr	r0, [r7, #4]
 801243e:	f000 f8cf 	bl	80125e0 <SDMMC_GetCmdResp1>
 8012442:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012444:	69fb      	ldr	r3, [r7, #28]
}
 8012446:	4618      	mov	r0, r3
 8012448:	3720      	adds	r7, #32
 801244a:	46bd      	mov	sp, r7
 801244c:	bd80      	pop	{r7, pc}

0801244e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801244e:	b580      	push	{r7, lr}
 8012450:	b088      	sub	sp, #32
 8012452:	af00      	add	r7, sp, #0
 8012454:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8012456:	2300      	movs	r3, #0
 8012458:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801245a:	2333      	movs	r3, #51	; 0x33
 801245c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801245e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012462:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012464:	2300      	movs	r3, #0
 8012466:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801246c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801246e:	f107 0308 	add.w	r3, r7, #8
 8012472:	4619      	mov	r1, r3
 8012474:	6878      	ldr	r0, [r7, #4]
 8012476:	f7ff fdc1 	bl	8011ffc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801247a:	f241 3288 	movw	r2, #5000	; 0x1388
 801247e:	2133      	movs	r1, #51	; 0x33
 8012480:	6878      	ldr	r0, [r7, #4]
 8012482:	f000 f8ad 	bl	80125e0 <SDMMC_GetCmdResp1>
 8012486:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012488:	69fb      	ldr	r3, [r7, #28]
}
 801248a:	4618      	mov	r0, r3
 801248c:	3720      	adds	r7, #32
 801248e:	46bd      	mov	sp, r7
 8012490:	bd80      	pop	{r7, pc}

08012492 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8012492:	b580      	push	{r7, lr}
 8012494:	b088      	sub	sp, #32
 8012496:	af00      	add	r7, sp, #0
 8012498:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801249a:	2300      	movs	r3, #0
 801249c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801249e:	2302      	movs	r3, #2
 80124a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80124a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80124a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80124a8:	2300      	movs	r3, #0
 80124aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80124ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80124b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80124b2:	f107 0308 	add.w	r3, r7, #8
 80124b6:	4619      	mov	r1, r3
 80124b8:	6878      	ldr	r0, [r7, #4]
 80124ba:	f7ff fd9f 	bl	8011ffc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80124be:	6878      	ldr	r0, [r7, #4]
 80124c0:	f000 f980 	bl	80127c4 <SDMMC_GetCmdResp2>
 80124c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80124c6:	69fb      	ldr	r3, [r7, #28]
}
 80124c8:	4618      	mov	r0, r3
 80124ca:	3720      	adds	r7, #32
 80124cc:	46bd      	mov	sp, r7
 80124ce:	bd80      	pop	{r7, pc}

080124d0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80124d0:	b580      	push	{r7, lr}
 80124d2:	b088      	sub	sp, #32
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	6078      	str	r0, [r7, #4]
 80124d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80124da:	683b      	ldr	r3, [r7, #0]
 80124dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80124de:	2309      	movs	r3, #9
 80124e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80124e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80124e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80124e8:	2300      	movs	r3, #0
 80124ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80124ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80124f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80124f2:	f107 0308 	add.w	r3, r7, #8
 80124f6:	4619      	mov	r1, r3
 80124f8:	6878      	ldr	r0, [r7, #4]
 80124fa:	f7ff fd7f 	bl	8011ffc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80124fe:	6878      	ldr	r0, [r7, #4]
 8012500:	f000 f960 	bl	80127c4 <SDMMC_GetCmdResp2>
 8012504:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012506:	69fb      	ldr	r3, [r7, #28]
}
 8012508:	4618      	mov	r0, r3
 801250a:	3720      	adds	r7, #32
 801250c:	46bd      	mov	sp, r7
 801250e:	bd80      	pop	{r7, pc}

08012510 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8012510:	b580      	push	{r7, lr}
 8012512:	b088      	sub	sp, #32
 8012514:	af00      	add	r7, sp, #0
 8012516:	6078      	str	r0, [r7, #4]
 8012518:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801251a:	2300      	movs	r3, #0
 801251c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801251e:	2303      	movs	r3, #3
 8012520:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012522:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012526:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012528:	2300      	movs	r3, #0
 801252a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801252c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012530:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012532:	f107 0308 	add.w	r3, r7, #8
 8012536:	4619      	mov	r1, r3
 8012538:	6878      	ldr	r0, [r7, #4]
 801253a:	f7ff fd5f 	bl	8011ffc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801253e:	683a      	ldr	r2, [r7, #0]
 8012540:	2103      	movs	r1, #3
 8012542:	6878      	ldr	r0, [r7, #4]
 8012544:	f000 f9c8 	bl	80128d8 <SDMMC_GetCmdResp6>
 8012548:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801254a:	69fb      	ldr	r3, [r7, #28]
}
 801254c:	4618      	mov	r0, r3
 801254e:	3720      	adds	r7, #32
 8012550:	46bd      	mov	sp, r7
 8012552:	bd80      	pop	{r7, pc}

08012554 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012554:	b580      	push	{r7, lr}
 8012556:	b088      	sub	sp, #32
 8012558:	af00      	add	r7, sp, #0
 801255a:	6078      	str	r0, [r7, #4]
 801255c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801255e:	683b      	ldr	r3, [r7, #0]
 8012560:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8012562:	230d      	movs	r3, #13
 8012564:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012566:	f44f 7380 	mov.w	r3, #256	; 0x100
 801256a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801256c:	2300      	movs	r3, #0
 801256e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012574:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012576:	f107 0308 	add.w	r3, r7, #8
 801257a:	4619      	mov	r1, r3
 801257c:	6878      	ldr	r0, [r7, #4]
 801257e:	f7ff fd3d 	bl	8011ffc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8012582:	f241 3288 	movw	r2, #5000	; 0x1388
 8012586:	210d      	movs	r1, #13
 8012588:	6878      	ldr	r0, [r7, #4]
 801258a:	f000 f829 	bl	80125e0 <SDMMC_GetCmdResp1>
 801258e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012590:	69fb      	ldr	r3, [r7, #28]
}
 8012592:	4618      	mov	r0, r3
 8012594:	3720      	adds	r7, #32
 8012596:	46bd      	mov	sp, r7
 8012598:	bd80      	pop	{r7, pc}

0801259a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 801259a:	b580      	push	{r7, lr}
 801259c:	b088      	sub	sp, #32
 801259e:	af00      	add	r7, sp, #0
 80125a0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80125a2:	2300      	movs	r3, #0
 80125a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80125a6:	230d      	movs	r3, #13
 80125a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80125aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80125ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80125b0:	2300      	movs	r3, #0
 80125b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80125b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80125b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80125ba:	f107 0308 	add.w	r3, r7, #8
 80125be:	4619      	mov	r1, r3
 80125c0:	6878      	ldr	r0, [r7, #4]
 80125c2:	f7ff fd1b 	bl	8011ffc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80125c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80125ca:	210d      	movs	r1, #13
 80125cc:	6878      	ldr	r0, [r7, #4]
 80125ce:	f000 f807 	bl	80125e0 <SDMMC_GetCmdResp1>
 80125d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80125d4:	69fb      	ldr	r3, [r7, #28]
}
 80125d6:	4618      	mov	r0, r3
 80125d8:	3720      	adds	r7, #32
 80125da:	46bd      	mov	sp, r7
 80125dc:	bd80      	pop	{r7, pc}
	...

080125e0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b088      	sub	sp, #32
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	60f8      	str	r0, [r7, #12]
 80125e8:	460b      	mov	r3, r1
 80125ea:	607a      	str	r2, [r7, #4]
 80125ec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80125ee:	4b70      	ldr	r3, [pc, #448]	; (80127b0 <SDMMC_GetCmdResp1+0x1d0>)
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	4a70      	ldr	r2, [pc, #448]	; (80127b4 <SDMMC_GetCmdResp1+0x1d4>)
 80125f4:	fba2 2303 	umull	r2, r3, r2, r3
 80125f8:	0a5a      	lsrs	r2, r3, #9
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	fb02 f303 	mul.w	r3, r2, r3
 8012600:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012602:	69fb      	ldr	r3, [r7, #28]
 8012604:	1e5a      	subs	r2, r3, #1
 8012606:	61fa      	str	r2, [r7, #28]
 8012608:	2b00      	cmp	r3, #0
 801260a:	d102      	bne.n	8012612 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 801260c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012610:	e0c9      	b.n	80127a6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012616:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8012618:	69ba      	ldr	r2, [r7, #24]
 801261a:	4b67      	ldr	r3, [pc, #412]	; (80127b8 <SDMMC_GetCmdResp1+0x1d8>)
 801261c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801261e:	2b00      	cmp	r3, #0
 8012620:	d0ef      	beq.n	8012602 <SDMMC_GetCmdResp1+0x22>
 8012622:	69bb      	ldr	r3, [r7, #24]
 8012624:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012628:	2b00      	cmp	r3, #0
 801262a:	d1ea      	bne.n	8012602 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012630:	f003 0304 	and.w	r3, r3, #4
 8012634:	2b00      	cmp	r3, #0
 8012636:	d004      	beq.n	8012642 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	2204      	movs	r2, #4
 801263c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801263e:	2304      	movs	r3, #4
 8012640:	e0b1      	b.n	80127a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012646:	f003 0301 	and.w	r3, r3, #1
 801264a:	2b00      	cmp	r3, #0
 801264c:	d004      	beq.n	8012658 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	2201      	movs	r2, #1
 8012652:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012654:	2301      	movs	r3, #1
 8012656:	e0a6      	b.n	80127a6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	4a58      	ldr	r2, [pc, #352]	; (80127bc <SDMMC_GetCmdResp1+0x1dc>)
 801265c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801265e:	68f8      	ldr	r0, [r7, #12]
 8012660:	f7ff fcf6 	bl	8012050 <SDMMC_GetCommandResponse>
 8012664:	4603      	mov	r3, r0
 8012666:	461a      	mov	r2, r3
 8012668:	7afb      	ldrb	r3, [r7, #11]
 801266a:	4293      	cmp	r3, r2
 801266c:	d001      	beq.n	8012672 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801266e:	2301      	movs	r3, #1
 8012670:	e099      	b.n	80127a6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012672:	2100      	movs	r1, #0
 8012674:	68f8      	ldr	r0, [r7, #12]
 8012676:	f7ff fcf8 	bl	801206a <SDMMC_GetResponse>
 801267a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801267c:	697a      	ldr	r2, [r7, #20]
 801267e:	4b50      	ldr	r3, [pc, #320]	; (80127c0 <SDMMC_GetCmdResp1+0x1e0>)
 8012680:	4013      	ands	r3, r2
 8012682:	2b00      	cmp	r3, #0
 8012684:	d101      	bne.n	801268a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8012686:	2300      	movs	r3, #0
 8012688:	e08d      	b.n	80127a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801268a:	697b      	ldr	r3, [r7, #20]
 801268c:	2b00      	cmp	r3, #0
 801268e:	da02      	bge.n	8012696 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012690:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012694:	e087      	b.n	80127a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8012696:	697b      	ldr	r3, [r7, #20]
 8012698:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801269c:	2b00      	cmp	r3, #0
 801269e:	d001      	beq.n	80126a4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80126a0:	2340      	movs	r3, #64	; 0x40
 80126a2:	e080      	b.n	80127a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80126a4:	697b      	ldr	r3, [r7, #20]
 80126a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d001      	beq.n	80126b2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80126ae:	2380      	movs	r3, #128	; 0x80
 80126b0:	e079      	b.n	80127a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80126b2:	697b      	ldr	r3, [r7, #20]
 80126b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d002      	beq.n	80126c2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80126bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80126c0:	e071      	b.n	80127a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80126c2:	697b      	ldr	r3, [r7, #20]
 80126c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d002      	beq.n	80126d2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80126cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80126d0:	e069      	b.n	80127a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80126d2:	697b      	ldr	r3, [r7, #20]
 80126d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d002      	beq.n	80126e2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80126dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80126e0:	e061      	b.n	80127a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80126e2:	697b      	ldr	r3, [r7, #20]
 80126e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d002      	beq.n	80126f2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80126ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80126f0:	e059      	b.n	80127a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80126f2:	697b      	ldr	r3, [r7, #20]
 80126f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d002      	beq.n	8012702 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80126fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012700:	e051      	b.n	80127a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012702:	697b      	ldr	r3, [r7, #20]
 8012704:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012708:	2b00      	cmp	r3, #0
 801270a:	d002      	beq.n	8012712 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801270c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012710:	e049      	b.n	80127a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012712:	697b      	ldr	r3, [r7, #20]
 8012714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012718:	2b00      	cmp	r3, #0
 801271a:	d002      	beq.n	8012722 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801271c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012720:	e041      	b.n	80127a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012722:	697b      	ldr	r3, [r7, #20]
 8012724:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012728:	2b00      	cmp	r3, #0
 801272a:	d002      	beq.n	8012732 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 801272c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012730:	e039      	b.n	80127a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012732:	697b      	ldr	r3, [r7, #20]
 8012734:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012738:	2b00      	cmp	r3, #0
 801273a:	d002      	beq.n	8012742 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801273c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012740:	e031      	b.n	80127a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012742:	697b      	ldr	r3, [r7, #20]
 8012744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012748:	2b00      	cmp	r3, #0
 801274a:	d002      	beq.n	8012752 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801274c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012750:	e029      	b.n	80127a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8012752:	697b      	ldr	r3, [r7, #20]
 8012754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012758:	2b00      	cmp	r3, #0
 801275a:	d002      	beq.n	8012762 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801275c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012760:	e021      	b.n	80127a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012762:	697b      	ldr	r3, [r7, #20]
 8012764:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012768:	2b00      	cmp	r3, #0
 801276a:	d002      	beq.n	8012772 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801276c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012770:	e019      	b.n	80127a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8012772:	697b      	ldr	r3, [r7, #20]
 8012774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012778:	2b00      	cmp	r3, #0
 801277a:	d002      	beq.n	8012782 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801277c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012780:	e011      	b.n	80127a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012782:	697b      	ldr	r3, [r7, #20]
 8012784:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012788:	2b00      	cmp	r3, #0
 801278a:	d002      	beq.n	8012792 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 801278c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012790:	e009      	b.n	80127a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8012792:	697b      	ldr	r3, [r7, #20]
 8012794:	f003 0308 	and.w	r3, r3, #8
 8012798:	2b00      	cmp	r3, #0
 801279a:	d002      	beq.n	80127a2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 801279c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80127a0:	e001      	b.n	80127a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80127a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80127a6:	4618      	mov	r0, r3
 80127a8:	3720      	adds	r7, #32
 80127aa:	46bd      	mov	sp, r7
 80127ac:	bd80      	pop	{r7, pc}
 80127ae:	bf00      	nop
 80127b0:	24000000 	.word	0x24000000
 80127b4:	10624dd3 	.word	0x10624dd3
 80127b8:	00200045 	.word	0x00200045
 80127bc:	002000c5 	.word	0x002000c5
 80127c0:	fdffe008 	.word	0xfdffe008

080127c4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80127c4:	b480      	push	{r7}
 80127c6:	b085      	sub	sp, #20
 80127c8:	af00      	add	r7, sp, #0
 80127ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80127cc:	4b1f      	ldr	r3, [pc, #124]	; (801284c <SDMMC_GetCmdResp2+0x88>)
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	4a1f      	ldr	r2, [pc, #124]	; (8012850 <SDMMC_GetCmdResp2+0x8c>)
 80127d2:	fba2 2303 	umull	r2, r3, r2, r3
 80127d6:	0a5b      	lsrs	r3, r3, #9
 80127d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80127dc:	fb02 f303 	mul.w	r3, r2, r3
 80127e0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	1e5a      	subs	r2, r3, #1
 80127e6:	60fa      	str	r2, [r7, #12]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d102      	bne.n	80127f2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80127ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80127f0:	e026      	b.n	8012840 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127f6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80127f8:	68bb      	ldr	r3, [r7, #8]
 80127fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d0ef      	beq.n	80127e2 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012802:	68bb      	ldr	r3, [r7, #8]
 8012804:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012808:	2b00      	cmp	r3, #0
 801280a:	d1ea      	bne.n	80127e2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012810:	f003 0304 	and.w	r3, r3, #4
 8012814:	2b00      	cmp	r3, #0
 8012816:	d004      	beq.n	8012822 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	2204      	movs	r2, #4
 801281c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801281e:	2304      	movs	r3, #4
 8012820:	e00e      	b.n	8012840 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012826:	f003 0301 	and.w	r3, r3, #1
 801282a:	2b00      	cmp	r3, #0
 801282c:	d004      	beq.n	8012838 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	2201      	movs	r2, #1
 8012832:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012834:	2301      	movs	r3, #1
 8012836:	e003      	b.n	8012840 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	4a06      	ldr	r2, [pc, #24]	; (8012854 <SDMMC_GetCmdResp2+0x90>)
 801283c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801283e:	2300      	movs	r3, #0
}
 8012840:	4618      	mov	r0, r3
 8012842:	3714      	adds	r7, #20
 8012844:	46bd      	mov	sp, r7
 8012846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284a:	4770      	bx	lr
 801284c:	24000000 	.word	0x24000000
 8012850:	10624dd3 	.word	0x10624dd3
 8012854:	002000c5 	.word	0x002000c5

08012858 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8012858:	b480      	push	{r7}
 801285a:	b085      	sub	sp, #20
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012860:	4b1a      	ldr	r3, [pc, #104]	; (80128cc <SDMMC_GetCmdResp3+0x74>)
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	4a1a      	ldr	r2, [pc, #104]	; (80128d0 <SDMMC_GetCmdResp3+0x78>)
 8012866:	fba2 2303 	umull	r2, r3, r2, r3
 801286a:	0a5b      	lsrs	r3, r3, #9
 801286c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012870:	fb02 f303 	mul.w	r3, r2, r3
 8012874:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	1e5a      	subs	r2, r3, #1
 801287a:	60fa      	str	r2, [r7, #12]
 801287c:	2b00      	cmp	r3, #0
 801287e:	d102      	bne.n	8012886 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012880:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012884:	e01b      	b.n	80128be <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801288a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801288c:	68bb      	ldr	r3, [r7, #8]
 801288e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012892:	2b00      	cmp	r3, #0
 8012894:	d0ef      	beq.n	8012876 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012896:	68bb      	ldr	r3, [r7, #8]
 8012898:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801289c:	2b00      	cmp	r3, #0
 801289e:	d1ea      	bne.n	8012876 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128a4:	f003 0304 	and.w	r3, r3, #4
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d004      	beq.n	80128b6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	2204      	movs	r2, #4
 80128b0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80128b2:	2304      	movs	r3, #4
 80128b4:	e003      	b.n	80128be <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	4a06      	ldr	r2, [pc, #24]	; (80128d4 <SDMMC_GetCmdResp3+0x7c>)
 80128ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80128bc:	2300      	movs	r3, #0
}
 80128be:	4618      	mov	r0, r3
 80128c0:	3714      	adds	r7, #20
 80128c2:	46bd      	mov	sp, r7
 80128c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c8:	4770      	bx	lr
 80128ca:	bf00      	nop
 80128cc:	24000000 	.word	0x24000000
 80128d0:	10624dd3 	.word	0x10624dd3
 80128d4:	002000c5 	.word	0x002000c5

080128d8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80128d8:	b580      	push	{r7, lr}
 80128da:	b088      	sub	sp, #32
 80128dc:	af00      	add	r7, sp, #0
 80128de:	60f8      	str	r0, [r7, #12]
 80128e0:	460b      	mov	r3, r1
 80128e2:	607a      	str	r2, [r7, #4]
 80128e4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80128e6:	4b35      	ldr	r3, [pc, #212]	; (80129bc <SDMMC_GetCmdResp6+0xe4>)
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	4a35      	ldr	r2, [pc, #212]	; (80129c0 <SDMMC_GetCmdResp6+0xe8>)
 80128ec:	fba2 2303 	umull	r2, r3, r2, r3
 80128f0:	0a5b      	lsrs	r3, r3, #9
 80128f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80128f6:	fb02 f303 	mul.w	r3, r2, r3
 80128fa:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80128fc:	69fb      	ldr	r3, [r7, #28]
 80128fe:	1e5a      	subs	r2, r3, #1
 8012900:	61fa      	str	r2, [r7, #28]
 8012902:	2b00      	cmp	r3, #0
 8012904:	d102      	bne.n	801290c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012906:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801290a:	e052      	b.n	80129b2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012910:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012912:	69bb      	ldr	r3, [r7, #24]
 8012914:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012918:	2b00      	cmp	r3, #0
 801291a:	d0ef      	beq.n	80128fc <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801291c:	69bb      	ldr	r3, [r7, #24]
 801291e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012922:	2b00      	cmp	r3, #0
 8012924:	d1ea      	bne.n	80128fc <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801292a:	f003 0304 	and.w	r3, r3, #4
 801292e:	2b00      	cmp	r3, #0
 8012930:	d004      	beq.n	801293c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	2204      	movs	r2, #4
 8012936:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012938:	2304      	movs	r3, #4
 801293a:	e03a      	b.n	80129b2 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012940:	f003 0301 	and.w	r3, r3, #1
 8012944:	2b00      	cmp	r3, #0
 8012946:	d004      	beq.n	8012952 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	2201      	movs	r2, #1
 801294c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801294e:	2301      	movs	r3, #1
 8012950:	e02f      	b.n	80129b2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012952:	68f8      	ldr	r0, [r7, #12]
 8012954:	f7ff fb7c 	bl	8012050 <SDMMC_GetCommandResponse>
 8012958:	4603      	mov	r3, r0
 801295a:	461a      	mov	r2, r3
 801295c:	7afb      	ldrb	r3, [r7, #11]
 801295e:	4293      	cmp	r3, r2
 8012960:	d001      	beq.n	8012966 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012962:	2301      	movs	r3, #1
 8012964:	e025      	b.n	80129b2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	4a16      	ldr	r2, [pc, #88]	; (80129c4 <SDMMC_GetCmdResp6+0xec>)
 801296a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801296c:	2100      	movs	r1, #0
 801296e:	68f8      	ldr	r0, [r7, #12]
 8012970:	f7ff fb7b 	bl	801206a <SDMMC_GetResponse>
 8012974:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8012976:	697b      	ldr	r3, [r7, #20]
 8012978:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 801297c:	2b00      	cmp	r3, #0
 801297e:	d106      	bne.n	801298e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8012980:	697b      	ldr	r3, [r7, #20]
 8012982:	0c1b      	lsrs	r3, r3, #16
 8012984:	b29a      	uxth	r2, r3
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 801298a:	2300      	movs	r3, #0
 801298c:	e011      	b.n	80129b2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801298e:	697b      	ldr	r3, [r7, #20]
 8012990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012994:	2b00      	cmp	r3, #0
 8012996:	d002      	beq.n	801299e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012998:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801299c:	e009      	b.n	80129b2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801299e:	697b      	ldr	r3, [r7, #20]
 80129a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d002      	beq.n	80129ae <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80129a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80129ac:	e001      	b.n	80129b2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80129ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80129b2:	4618      	mov	r0, r3
 80129b4:	3720      	adds	r7, #32
 80129b6:	46bd      	mov	sp, r7
 80129b8:	bd80      	pop	{r7, pc}
 80129ba:	bf00      	nop
 80129bc:	24000000 	.word	0x24000000
 80129c0:	10624dd3 	.word	0x10624dd3
 80129c4:	002000c5 	.word	0x002000c5

080129c8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80129c8:	b480      	push	{r7}
 80129ca:	b085      	sub	sp, #20
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80129d0:	4b22      	ldr	r3, [pc, #136]	; (8012a5c <SDMMC_GetCmdResp7+0x94>)
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	4a22      	ldr	r2, [pc, #136]	; (8012a60 <SDMMC_GetCmdResp7+0x98>)
 80129d6:	fba2 2303 	umull	r2, r3, r2, r3
 80129da:	0a5b      	lsrs	r3, r3, #9
 80129dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80129e0:	fb02 f303 	mul.w	r3, r2, r3
 80129e4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	1e5a      	subs	r2, r3, #1
 80129ea:	60fa      	str	r2, [r7, #12]
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d102      	bne.n	80129f6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80129f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80129f4:	e02c      	b.n	8012a50 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129fa:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80129fc:	68bb      	ldr	r3, [r7, #8]
 80129fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d0ef      	beq.n	80129e6 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012a06:	68bb      	ldr	r3, [r7, #8]
 8012a08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d1ea      	bne.n	80129e6 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a14:	f003 0304 	and.w	r3, r3, #4
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d004      	beq.n	8012a26 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	2204      	movs	r2, #4
 8012a20:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012a22:	2304      	movs	r3, #4
 8012a24:	e014      	b.n	8012a50 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a2a:	f003 0301 	and.w	r3, r3, #1
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d004      	beq.n	8012a3c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	2201      	movs	r2, #1
 8012a36:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012a38:	2301      	movs	r3, #1
 8012a3a:	e009      	b.n	8012a50 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d002      	beq.n	8012a4e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	2240      	movs	r2, #64	; 0x40
 8012a4c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012a4e:	2300      	movs	r3, #0

}
 8012a50:	4618      	mov	r0, r3
 8012a52:	3714      	adds	r7, #20
 8012a54:	46bd      	mov	sp, r7
 8012a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a5a:	4770      	bx	lr
 8012a5c:	24000000 	.word	0x24000000
 8012a60:	10624dd3 	.word	0x10624dd3

08012a64 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8012a64:	b480      	push	{r7}
 8012a66:	b085      	sub	sp, #20
 8012a68:	af00      	add	r7, sp, #0
 8012a6a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012a6c:	4b11      	ldr	r3, [pc, #68]	; (8012ab4 <SDMMC_GetCmdError+0x50>)
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	4a11      	ldr	r2, [pc, #68]	; (8012ab8 <SDMMC_GetCmdError+0x54>)
 8012a72:	fba2 2303 	umull	r2, r3, r2, r3
 8012a76:	0a5b      	lsrs	r3, r3, #9
 8012a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a7c:	fb02 f303 	mul.w	r3, r2, r3
 8012a80:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	1e5a      	subs	r2, r3, #1
 8012a86:	60fa      	str	r2, [r7, #12]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d102      	bne.n	8012a92 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012a8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012a90:	e009      	b.n	8012aa6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d0f1      	beq.n	8012a82 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	4a06      	ldr	r2, [pc, #24]	; (8012abc <SDMMC_GetCmdError+0x58>)
 8012aa2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8012aa4:	2300      	movs	r3, #0
}
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	3714      	adds	r7, #20
 8012aaa:	46bd      	mov	sp, r7
 8012aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab0:	4770      	bx	lr
 8012ab2:	bf00      	nop
 8012ab4:	24000000 	.word	0x24000000
 8012ab8:	10624dd3 	.word	0x10624dd3
 8012abc:	002000c5 	.word	0x002000c5

08012ac0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012ac0:	b084      	sub	sp, #16
 8012ac2:	b580      	push	{r7, lr}
 8012ac4:	b084      	sub	sp, #16
 8012ac6:	af00      	add	r7, sp, #0
 8012ac8:	6078      	str	r0, [r7, #4]
 8012aca:	f107 001c 	add.w	r0, r7, #28
 8012ace:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ad4:	2b01      	cmp	r3, #1
 8012ad6:	d120      	bne.n	8012b1a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012adc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	68da      	ldr	r2, [r3, #12]
 8012ae8:	4b2a      	ldr	r3, [pc, #168]	; (8012b94 <USB_CoreInit+0xd4>)
 8012aea:	4013      	ands	r3, r2
 8012aec:	687a      	ldr	r2, [r7, #4]
 8012aee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	68db      	ldr	r3, [r3, #12]
 8012af4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012afc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012afe:	2b01      	cmp	r3, #1
 8012b00:	d105      	bne.n	8012b0e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	68db      	ldr	r3, [r3, #12]
 8012b06:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012b0e:	6878      	ldr	r0, [r7, #4]
 8012b10:	f001 faf8 	bl	8014104 <USB_CoreReset>
 8012b14:	4603      	mov	r3, r0
 8012b16:	73fb      	strb	r3, [r7, #15]
 8012b18:	e01a      	b.n	8012b50 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	68db      	ldr	r3, [r3, #12]
 8012b1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012b26:	6878      	ldr	r0, [r7, #4]
 8012b28:	f001 faec 	bl	8014104 <USB_CoreReset>
 8012b2c:	4603      	mov	r3, r0
 8012b2e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012b30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d106      	bne.n	8012b44 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	639a      	str	r2, [r3, #56]	; 0x38
 8012b42:	e005      	b.n	8012b50 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8012b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b52:	2b01      	cmp	r3, #1
 8012b54:	d116      	bne.n	8012b84 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012b5a:	b29a      	uxth	r2, r3
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012b64:	4b0c      	ldr	r3, [pc, #48]	; (8012b98 <USB_CoreInit+0xd8>)
 8012b66:	4313      	orrs	r3, r2
 8012b68:	687a      	ldr	r2, [r7, #4]
 8012b6a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	689b      	ldr	r3, [r3, #8]
 8012b70:	f043 0206 	orr.w	r2, r3, #6
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	689b      	ldr	r3, [r3, #8]
 8012b7c:	f043 0220 	orr.w	r2, r3, #32
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b86:	4618      	mov	r0, r3
 8012b88:	3710      	adds	r7, #16
 8012b8a:	46bd      	mov	sp, r7
 8012b8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012b90:	b004      	add	sp, #16
 8012b92:	4770      	bx	lr
 8012b94:	ffbdffbf 	.word	0xffbdffbf
 8012b98:	03ee0000 	.word	0x03ee0000

08012b9c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012b9c:	b480      	push	{r7}
 8012b9e:	b087      	sub	sp, #28
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	60f8      	str	r0, [r7, #12]
 8012ba4:	60b9      	str	r1, [r7, #8]
 8012ba6:	4613      	mov	r3, r2
 8012ba8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8012baa:	79fb      	ldrb	r3, [r7, #7]
 8012bac:	2b02      	cmp	r3, #2
 8012bae:	d165      	bne.n	8012c7c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012bb0:	68bb      	ldr	r3, [r7, #8]
 8012bb2:	4a41      	ldr	r2, [pc, #260]	; (8012cb8 <USB_SetTurnaroundTime+0x11c>)
 8012bb4:	4293      	cmp	r3, r2
 8012bb6:	d906      	bls.n	8012bc6 <USB_SetTurnaroundTime+0x2a>
 8012bb8:	68bb      	ldr	r3, [r7, #8]
 8012bba:	4a40      	ldr	r2, [pc, #256]	; (8012cbc <USB_SetTurnaroundTime+0x120>)
 8012bbc:	4293      	cmp	r3, r2
 8012bbe:	d202      	bcs.n	8012bc6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012bc0:	230f      	movs	r3, #15
 8012bc2:	617b      	str	r3, [r7, #20]
 8012bc4:	e062      	b.n	8012c8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8012bc6:	68bb      	ldr	r3, [r7, #8]
 8012bc8:	4a3c      	ldr	r2, [pc, #240]	; (8012cbc <USB_SetTurnaroundTime+0x120>)
 8012bca:	4293      	cmp	r3, r2
 8012bcc:	d306      	bcc.n	8012bdc <USB_SetTurnaroundTime+0x40>
 8012bce:	68bb      	ldr	r3, [r7, #8]
 8012bd0:	4a3b      	ldr	r2, [pc, #236]	; (8012cc0 <USB_SetTurnaroundTime+0x124>)
 8012bd2:	4293      	cmp	r3, r2
 8012bd4:	d202      	bcs.n	8012bdc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8012bd6:	230e      	movs	r3, #14
 8012bd8:	617b      	str	r3, [r7, #20]
 8012bda:	e057      	b.n	8012c8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8012bdc:	68bb      	ldr	r3, [r7, #8]
 8012bde:	4a38      	ldr	r2, [pc, #224]	; (8012cc0 <USB_SetTurnaroundTime+0x124>)
 8012be0:	4293      	cmp	r3, r2
 8012be2:	d306      	bcc.n	8012bf2 <USB_SetTurnaroundTime+0x56>
 8012be4:	68bb      	ldr	r3, [r7, #8]
 8012be6:	4a37      	ldr	r2, [pc, #220]	; (8012cc4 <USB_SetTurnaroundTime+0x128>)
 8012be8:	4293      	cmp	r3, r2
 8012bea:	d202      	bcs.n	8012bf2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8012bec:	230d      	movs	r3, #13
 8012bee:	617b      	str	r3, [r7, #20]
 8012bf0:	e04c      	b.n	8012c8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8012bf2:	68bb      	ldr	r3, [r7, #8]
 8012bf4:	4a33      	ldr	r2, [pc, #204]	; (8012cc4 <USB_SetTurnaroundTime+0x128>)
 8012bf6:	4293      	cmp	r3, r2
 8012bf8:	d306      	bcc.n	8012c08 <USB_SetTurnaroundTime+0x6c>
 8012bfa:	68bb      	ldr	r3, [r7, #8]
 8012bfc:	4a32      	ldr	r2, [pc, #200]	; (8012cc8 <USB_SetTurnaroundTime+0x12c>)
 8012bfe:	4293      	cmp	r3, r2
 8012c00:	d802      	bhi.n	8012c08 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8012c02:	230c      	movs	r3, #12
 8012c04:	617b      	str	r3, [r7, #20]
 8012c06:	e041      	b.n	8012c8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012c08:	68bb      	ldr	r3, [r7, #8]
 8012c0a:	4a2f      	ldr	r2, [pc, #188]	; (8012cc8 <USB_SetTurnaroundTime+0x12c>)
 8012c0c:	4293      	cmp	r3, r2
 8012c0e:	d906      	bls.n	8012c1e <USB_SetTurnaroundTime+0x82>
 8012c10:	68bb      	ldr	r3, [r7, #8]
 8012c12:	4a2e      	ldr	r2, [pc, #184]	; (8012ccc <USB_SetTurnaroundTime+0x130>)
 8012c14:	4293      	cmp	r3, r2
 8012c16:	d802      	bhi.n	8012c1e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012c18:	230b      	movs	r3, #11
 8012c1a:	617b      	str	r3, [r7, #20]
 8012c1c:	e036      	b.n	8012c8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8012c1e:	68bb      	ldr	r3, [r7, #8]
 8012c20:	4a2a      	ldr	r2, [pc, #168]	; (8012ccc <USB_SetTurnaroundTime+0x130>)
 8012c22:	4293      	cmp	r3, r2
 8012c24:	d906      	bls.n	8012c34 <USB_SetTurnaroundTime+0x98>
 8012c26:	68bb      	ldr	r3, [r7, #8]
 8012c28:	4a29      	ldr	r2, [pc, #164]	; (8012cd0 <USB_SetTurnaroundTime+0x134>)
 8012c2a:	4293      	cmp	r3, r2
 8012c2c:	d802      	bhi.n	8012c34 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8012c2e:	230a      	movs	r3, #10
 8012c30:	617b      	str	r3, [r7, #20]
 8012c32:	e02b      	b.n	8012c8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012c34:	68bb      	ldr	r3, [r7, #8]
 8012c36:	4a26      	ldr	r2, [pc, #152]	; (8012cd0 <USB_SetTurnaroundTime+0x134>)
 8012c38:	4293      	cmp	r3, r2
 8012c3a:	d906      	bls.n	8012c4a <USB_SetTurnaroundTime+0xae>
 8012c3c:	68bb      	ldr	r3, [r7, #8]
 8012c3e:	4a25      	ldr	r2, [pc, #148]	; (8012cd4 <USB_SetTurnaroundTime+0x138>)
 8012c40:	4293      	cmp	r3, r2
 8012c42:	d202      	bcs.n	8012c4a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012c44:	2309      	movs	r3, #9
 8012c46:	617b      	str	r3, [r7, #20]
 8012c48:	e020      	b.n	8012c8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8012c4a:	68bb      	ldr	r3, [r7, #8]
 8012c4c:	4a21      	ldr	r2, [pc, #132]	; (8012cd4 <USB_SetTurnaroundTime+0x138>)
 8012c4e:	4293      	cmp	r3, r2
 8012c50:	d306      	bcc.n	8012c60 <USB_SetTurnaroundTime+0xc4>
 8012c52:	68bb      	ldr	r3, [r7, #8]
 8012c54:	4a20      	ldr	r2, [pc, #128]	; (8012cd8 <USB_SetTurnaroundTime+0x13c>)
 8012c56:	4293      	cmp	r3, r2
 8012c58:	d802      	bhi.n	8012c60 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8012c5a:	2308      	movs	r3, #8
 8012c5c:	617b      	str	r3, [r7, #20]
 8012c5e:	e015      	b.n	8012c8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012c60:	68bb      	ldr	r3, [r7, #8]
 8012c62:	4a1d      	ldr	r2, [pc, #116]	; (8012cd8 <USB_SetTurnaroundTime+0x13c>)
 8012c64:	4293      	cmp	r3, r2
 8012c66:	d906      	bls.n	8012c76 <USB_SetTurnaroundTime+0xda>
 8012c68:	68bb      	ldr	r3, [r7, #8]
 8012c6a:	4a1c      	ldr	r2, [pc, #112]	; (8012cdc <USB_SetTurnaroundTime+0x140>)
 8012c6c:	4293      	cmp	r3, r2
 8012c6e:	d202      	bcs.n	8012c76 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8012c70:	2307      	movs	r3, #7
 8012c72:	617b      	str	r3, [r7, #20]
 8012c74:	e00a      	b.n	8012c8c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8012c76:	2306      	movs	r3, #6
 8012c78:	617b      	str	r3, [r7, #20]
 8012c7a:	e007      	b.n	8012c8c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012c7c:	79fb      	ldrb	r3, [r7, #7]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d102      	bne.n	8012c88 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8012c82:	2309      	movs	r3, #9
 8012c84:	617b      	str	r3, [r7, #20]
 8012c86:	e001      	b.n	8012c8c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8012c88:	2309      	movs	r3, #9
 8012c8a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	68db      	ldr	r3, [r3, #12]
 8012c90:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	68da      	ldr	r2, [r3, #12]
 8012c9c:	697b      	ldr	r3, [r7, #20]
 8012c9e:	029b      	lsls	r3, r3, #10
 8012ca0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8012ca4:	431a      	orrs	r2, r3
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012caa:	2300      	movs	r3, #0
}
 8012cac:	4618      	mov	r0, r3
 8012cae:	371c      	adds	r7, #28
 8012cb0:	46bd      	mov	sp, r7
 8012cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb6:	4770      	bx	lr
 8012cb8:	00d8acbf 	.word	0x00d8acbf
 8012cbc:	00e4e1c0 	.word	0x00e4e1c0
 8012cc0:	00f42400 	.word	0x00f42400
 8012cc4:	01067380 	.word	0x01067380
 8012cc8:	011a499f 	.word	0x011a499f
 8012ccc:	01312cff 	.word	0x01312cff
 8012cd0:	014ca43f 	.word	0x014ca43f
 8012cd4:	016e3600 	.word	0x016e3600
 8012cd8:	01a6ab1f 	.word	0x01a6ab1f
 8012cdc:	01e84800 	.word	0x01e84800

08012ce0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012ce0:	b480      	push	{r7}
 8012ce2:	b083      	sub	sp, #12
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	689b      	ldr	r3, [r3, #8]
 8012cec:	f043 0201 	orr.w	r2, r3, #1
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012cf4:	2300      	movs	r3, #0
}
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	370c      	adds	r7, #12
 8012cfa:	46bd      	mov	sp, r7
 8012cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d00:	4770      	bx	lr

08012d02 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012d02:	b480      	push	{r7}
 8012d04:	b083      	sub	sp, #12
 8012d06:	af00      	add	r7, sp, #0
 8012d08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	689b      	ldr	r3, [r3, #8]
 8012d0e:	f023 0201 	bic.w	r2, r3, #1
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012d16:	2300      	movs	r3, #0
}
 8012d18:	4618      	mov	r0, r3
 8012d1a:	370c      	adds	r7, #12
 8012d1c:	46bd      	mov	sp, r7
 8012d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d22:	4770      	bx	lr

08012d24 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012d24:	b580      	push	{r7, lr}
 8012d26:	b084      	sub	sp, #16
 8012d28:	af00      	add	r7, sp, #0
 8012d2a:	6078      	str	r0, [r7, #4]
 8012d2c:	460b      	mov	r3, r1
 8012d2e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8012d30:	2300      	movs	r3, #0
 8012d32:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	68db      	ldr	r3, [r3, #12]
 8012d38:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012d40:	78fb      	ldrb	r3, [r7, #3]
 8012d42:	2b01      	cmp	r3, #1
 8012d44:	d115      	bne.n	8012d72 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	68db      	ldr	r3, [r3, #12]
 8012d4a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012d52:	2001      	movs	r0, #1
 8012d54:	f7f0 fea6 	bl	8003aa4 <HAL_Delay>
      ms++;
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	3301      	adds	r3, #1
 8012d5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8012d5e:	6878      	ldr	r0, [r7, #4]
 8012d60:	f001 f93f 	bl	8013fe2 <USB_GetMode>
 8012d64:	4603      	mov	r3, r0
 8012d66:	2b01      	cmp	r3, #1
 8012d68:	d01e      	beq.n	8012da8 <USB_SetCurrentMode+0x84>
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	2b31      	cmp	r3, #49	; 0x31
 8012d6e:	d9f0      	bls.n	8012d52 <USB_SetCurrentMode+0x2e>
 8012d70:	e01a      	b.n	8012da8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8012d72:	78fb      	ldrb	r3, [r7, #3]
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d115      	bne.n	8012da4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	68db      	ldr	r3, [r3, #12]
 8012d7c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012d84:	2001      	movs	r0, #1
 8012d86:	f7f0 fe8d 	bl	8003aa4 <HAL_Delay>
      ms++;
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	3301      	adds	r3, #1
 8012d8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8012d90:	6878      	ldr	r0, [r7, #4]
 8012d92:	f001 f926 	bl	8013fe2 <USB_GetMode>
 8012d96:	4603      	mov	r3, r0
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d005      	beq.n	8012da8 <USB_SetCurrentMode+0x84>
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	2b31      	cmp	r3, #49	; 0x31
 8012da0:	d9f0      	bls.n	8012d84 <USB_SetCurrentMode+0x60>
 8012da2:	e001      	b.n	8012da8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8012da4:	2301      	movs	r3, #1
 8012da6:	e005      	b.n	8012db4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	2b32      	cmp	r3, #50	; 0x32
 8012dac:	d101      	bne.n	8012db2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8012dae:	2301      	movs	r3, #1
 8012db0:	e000      	b.n	8012db4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8012db2:	2300      	movs	r3, #0
}
 8012db4:	4618      	mov	r0, r3
 8012db6:	3710      	adds	r7, #16
 8012db8:	46bd      	mov	sp, r7
 8012dba:	bd80      	pop	{r7, pc}

08012dbc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012dbc:	b084      	sub	sp, #16
 8012dbe:	b580      	push	{r7, lr}
 8012dc0:	b086      	sub	sp, #24
 8012dc2:	af00      	add	r7, sp, #0
 8012dc4:	6078      	str	r0, [r7, #4]
 8012dc6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8012dca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8012dce:	2300      	movs	r3, #0
 8012dd0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8012dd6:	2300      	movs	r3, #0
 8012dd8:	613b      	str	r3, [r7, #16]
 8012dda:	e009      	b.n	8012df0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8012ddc:	687a      	ldr	r2, [r7, #4]
 8012dde:	693b      	ldr	r3, [r7, #16]
 8012de0:	3340      	adds	r3, #64	; 0x40
 8012de2:	009b      	lsls	r3, r3, #2
 8012de4:	4413      	add	r3, r2
 8012de6:	2200      	movs	r2, #0
 8012de8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8012dea:	693b      	ldr	r3, [r7, #16]
 8012dec:	3301      	adds	r3, #1
 8012dee:	613b      	str	r3, [r7, #16]
 8012df0:	693b      	ldr	r3, [r7, #16]
 8012df2:	2b0e      	cmp	r3, #14
 8012df4:	d9f2      	bls.n	8012ddc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8012df6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d11c      	bne.n	8012e36 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e02:	685b      	ldr	r3, [r3, #4]
 8012e04:	68fa      	ldr	r2, [r7, #12]
 8012e06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012e0a:	f043 0302 	orr.w	r3, r3, #2
 8012e0e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e14:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	601a      	str	r2, [r3, #0]
 8012e34:	e005      	b.n	8012e42 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e3a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012e48:	461a      	mov	r2, r3
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e54:	4619      	mov	r1, r3
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e5c:	461a      	mov	r2, r3
 8012e5e:	680b      	ldr	r3, [r1, #0]
 8012e60:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e64:	2b01      	cmp	r3, #1
 8012e66:	d10c      	bne.n	8012e82 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8012e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d104      	bne.n	8012e78 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8012e6e:	2100      	movs	r1, #0
 8012e70:	6878      	ldr	r0, [r7, #4]
 8012e72:	f000 f965 	bl	8013140 <USB_SetDevSpeed>
 8012e76:	e008      	b.n	8012e8a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8012e78:	2101      	movs	r1, #1
 8012e7a:	6878      	ldr	r0, [r7, #4]
 8012e7c:	f000 f960 	bl	8013140 <USB_SetDevSpeed>
 8012e80:	e003      	b.n	8012e8a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012e82:	2103      	movs	r1, #3
 8012e84:	6878      	ldr	r0, [r7, #4]
 8012e86:	f000 f95b 	bl	8013140 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012e8a:	2110      	movs	r1, #16
 8012e8c:	6878      	ldr	r0, [r7, #4]
 8012e8e:	f000 f8f3 	bl	8013078 <USB_FlushTxFifo>
 8012e92:	4603      	mov	r3, r0
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d001      	beq.n	8012e9c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8012e98:	2301      	movs	r3, #1
 8012e9a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012e9c:	6878      	ldr	r0, [r7, #4]
 8012e9e:	f000 f91f 	bl	80130e0 <USB_FlushRxFifo>
 8012ea2:	4603      	mov	r3, r0
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d001      	beq.n	8012eac <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8012ea8:	2301      	movs	r3, #1
 8012eaa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012eb2:	461a      	mov	r2, r3
 8012eb4:	2300      	movs	r3, #0
 8012eb6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ebe:	461a      	mov	r2, r3
 8012ec0:	2300      	movs	r3, #0
 8012ec2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012eca:	461a      	mov	r2, r3
 8012ecc:	2300      	movs	r3, #0
 8012ece:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	613b      	str	r3, [r7, #16]
 8012ed4:	e043      	b.n	8012f5e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012ed6:	693b      	ldr	r3, [r7, #16]
 8012ed8:	015a      	lsls	r2, r3, #5
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	4413      	add	r3, r2
 8012ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012ee8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012eec:	d118      	bne.n	8012f20 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8012eee:	693b      	ldr	r3, [r7, #16]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d10a      	bne.n	8012f0a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012ef4:	693b      	ldr	r3, [r7, #16]
 8012ef6:	015a      	lsls	r2, r3, #5
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	4413      	add	r3, r2
 8012efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f00:	461a      	mov	r2, r3
 8012f02:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012f06:	6013      	str	r3, [r2, #0]
 8012f08:	e013      	b.n	8012f32 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012f0a:	693b      	ldr	r3, [r7, #16]
 8012f0c:	015a      	lsls	r2, r3, #5
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	4413      	add	r3, r2
 8012f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f16:	461a      	mov	r2, r3
 8012f18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012f1c:	6013      	str	r3, [r2, #0]
 8012f1e:	e008      	b.n	8012f32 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012f20:	693b      	ldr	r3, [r7, #16]
 8012f22:	015a      	lsls	r2, r3, #5
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	4413      	add	r3, r2
 8012f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f2c:	461a      	mov	r2, r3
 8012f2e:	2300      	movs	r3, #0
 8012f30:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012f32:	693b      	ldr	r3, [r7, #16]
 8012f34:	015a      	lsls	r2, r3, #5
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	4413      	add	r3, r2
 8012f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f3e:	461a      	mov	r2, r3
 8012f40:	2300      	movs	r3, #0
 8012f42:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012f44:	693b      	ldr	r3, [r7, #16]
 8012f46:	015a      	lsls	r2, r3, #5
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	4413      	add	r3, r2
 8012f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f50:	461a      	mov	r2, r3
 8012f52:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012f56:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012f58:	693b      	ldr	r3, [r7, #16]
 8012f5a:	3301      	adds	r3, #1
 8012f5c:	613b      	str	r3, [r7, #16]
 8012f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f60:	693a      	ldr	r2, [r7, #16]
 8012f62:	429a      	cmp	r2, r3
 8012f64:	d3b7      	bcc.n	8012ed6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012f66:	2300      	movs	r3, #0
 8012f68:	613b      	str	r3, [r7, #16]
 8012f6a:	e043      	b.n	8012ff4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012f6c:	693b      	ldr	r3, [r7, #16]
 8012f6e:	015a      	lsls	r2, r3, #5
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	4413      	add	r3, r2
 8012f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012f7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012f82:	d118      	bne.n	8012fb6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8012f84:	693b      	ldr	r3, [r7, #16]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d10a      	bne.n	8012fa0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012f8a:	693b      	ldr	r3, [r7, #16]
 8012f8c:	015a      	lsls	r2, r3, #5
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	4413      	add	r3, r2
 8012f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f96:	461a      	mov	r2, r3
 8012f98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012f9c:	6013      	str	r3, [r2, #0]
 8012f9e:	e013      	b.n	8012fc8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012fa0:	693b      	ldr	r3, [r7, #16]
 8012fa2:	015a      	lsls	r2, r3, #5
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	4413      	add	r3, r2
 8012fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fac:	461a      	mov	r2, r3
 8012fae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012fb2:	6013      	str	r3, [r2, #0]
 8012fb4:	e008      	b.n	8012fc8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012fb6:	693b      	ldr	r3, [r7, #16]
 8012fb8:	015a      	lsls	r2, r3, #5
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	4413      	add	r3, r2
 8012fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fc2:	461a      	mov	r2, r3
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012fc8:	693b      	ldr	r3, [r7, #16]
 8012fca:	015a      	lsls	r2, r3, #5
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	4413      	add	r3, r2
 8012fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fd4:	461a      	mov	r2, r3
 8012fd6:	2300      	movs	r3, #0
 8012fd8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012fda:	693b      	ldr	r3, [r7, #16]
 8012fdc:	015a      	lsls	r2, r3, #5
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	4413      	add	r3, r2
 8012fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fe6:	461a      	mov	r2, r3
 8012fe8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012fec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012fee:	693b      	ldr	r3, [r7, #16]
 8012ff0:	3301      	adds	r3, #1
 8012ff2:	613b      	str	r3, [r7, #16]
 8012ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ff6:	693a      	ldr	r2, [r7, #16]
 8012ff8:	429a      	cmp	r2, r3
 8012ffa:	d3b7      	bcc.n	8012f6c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013002:	691b      	ldr	r3, [r3, #16]
 8013004:	68fa      	ldr	r2, [r7, #12]
 8013006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801300a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801300e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	2200      	movs	r2, #0
 8013014:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801301c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801301e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013020:	2b00      	cmp	r3, #0
 8013022:	d105      	bne.n	8013030 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	699b      	ldr	r3, [r3, #24]
 8013028:	f043 0210 	orr.w	r2, r3, #16
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	699a      	ldr	r2, [r3, #24]
 8013034:	4b0e      	ldr	r3, [pc, #56]	; (8013070 <USB_DevInit+0x2b4>)
 8013036:	4313      	orrs	r3, r2
 8013038:	687a      	ldr	r2, [r7, #4]
 801303a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801303c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801303e:	2b00      	cmp	r3, #0
 8013040:	d005      	beq.n	801304e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	699b      	ldr	r3, [r3, #24]
 8013046:	f043 0208 	orr.w	r2, r3, #8
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801304e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013050:	2b01      	cmp	r3, #1
 8013052:	d105      	bne.n	8013060 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	699a      	ldr	r2, [r3, #24]
 8013058:	4b06      	ldr	r3, [pc, #24]	; (8013074 <USB_DevInit+0x2b8>)
 801305a:	4313      	orrs	r3, r2
 801305c:	687a      	ldr	r2, [r7, #4]
 801305e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8013060:	7dfb      	ldrb	r3, [r7, #23]
}
 8013062:	4618      	mov	r0, r3
 8013064:	3718      	adds	r7, #24
 8013066:	46bd      	mov	sp, r7
 8013068:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801306c:	b004      	add	sp, #16
 801306e:	4770      	bx	lr
 8013070:	803c3800 	.word	0x803c3800
 8013074:	40000004 	.word	0x40000004

08013078 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8013078:	b480      	push	{r7}
 801307a:	b085      	sub	sp, #20
 801307c:	af00      	add	r7, sp, #0
 801307e:	6078      	str	r0, [r7, #4]
 8013080:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013082:	2300      	movs	r3, #0
 8013084:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	3301      	adds	r3, #1
 801308a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	4a13      	ldr	r2, [pc, #76]	; (80130dc <USB_FlushTxFifo+0x64>)
 8013090:	4293      	cmp	r3, r2
 8013092:	d901      	bls.n	8013098 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8013094:	2303      	movs	r3, #3
 8013096:	e01b      	b.n	80130d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	691b      	ldr	r3, [r3, #16]
 801309c:	2b00      	cmp	r3, #0
 801309e:	daf2      	bge.n	8013086 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80130a0:	2300      	movs	r3, #0
 80130a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80130a4:	683b      	ldr	r3, [r7, #0]
 80130a6:	019b      	lsls	r3, r3, #6
 80130a8:	f043 0220 	orr.w	r2, r3, #32
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	3301      	adds	r3, #1
 80130b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	4a08      	ldr	r2, [pc, #32]	; (80130dc <USB_FlushTxFifo+0x64>)
 80130ba:	4293      	cmp	r3, r2
 80130bc:	d901      	bls.n	80130c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80130be:	2303      	movs	r3, #3
 80130c0:	e006      	b.n	80130d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	691b      	ldr	r3, [r3, #16]
 80130c6:	f003 0320 	and.w	r3, r3, #32
 80130ca:	2b20      	cmp	r3, #32
 80130cc:	d0f0      	beq.n	80130b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80130ce:	2300      	movs	r3, #0
}
 80130d0:	4618      	mov	r0, r3
 80130d2:	3714      	adds	r7, #20
 80130d4:	46bd      	mov	sp, r7
 80130d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130da:	4770      	bx	lr
 80130dc:	00030d40 	.word	0x00030d40

080130e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80130e0:	b480      	push	{r7}
 80130e2:	b085      	sub	sp, #20
 80130e4:	af00      	add	r7, sp, #0
 80130e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80130e8:	2300      	movs	r3, #0
 80130ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	3301      	adds	r3, #1
 80130f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	4a11      	ldr	r2, [pc, #68]	; (801313c <USB_FlushRxFifo+0x5c>)
 80130f6:	4293      	cmp	r3, r2
 80130f8:	d901      	bls.n	80130fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80130fa:	2303      	movs	r3, #3
 80130fc:	e018      	b.n	8013130 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	691b      	ldr	r3, [r3, #16]
 8013102:	2b00      	cmp	r3, #0
 8013104:	daf2      	bge.n	80130ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8013106:	2300      	movs	r3, #0
 8013108:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	2210      	movs	r2, #16
 801310e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	3301      	adds	r3, #1
 8013114:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	4a08      	ldr	r2, [pc, #32]	; (801313c <USB_FlushRxFifo+0x5c>)
 801311a:	4293      	cmp	r3, r2
 801311c:	d901      	bls.n	8013122 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801311e:	2303      	movs	r3, #3
 8013120:	e006      	b.n	8013130 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	691b      	ldr	r3, [r3, #16]
 8013126:	f003 0310 	and.w	r3, r3, #16
 801312a:	2b10      	cmp	r3, #16
 801312c:	d0f0      	beq.n	8013110 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801312e:	2300      	movs	r3, #0
}
 8013130:	4618      	mov	r0, r3
 8013132:	3714      	adds	r7, #20
 8013134:	46bd      	mov	sp, r7
 8013136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801313a:	4770      	bx	lr
 801313c:	00030d40 	.word	0x00030d40

08013140 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013140:	b480      	push	{r7}
 8013142:	b085      	sub	sp, #20
 8013144:	af00      	add	r7, sp, #0
 8013146:	6078      	str	r0, [r7, #4]
 8013148:	460b      	mov	r3, r1
 801314a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013156:	681a      	ldr	r2, [r3, #0]
 8013158:	78fb      	ldrb	r3, [r7, #3]
 801315a:	68f9      	ldr	r1, [r7, #12]
 801315c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013160:	4313      	orrs	r3, r2
 8013162:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8013164:	2300      	movs	r3, #0
}
 8013166:	4618      	mov	r0, r3
 8013168:	3714      	adds	r7, #20
 801316a:	46bd      	mov	sp, r7
 801316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013170:	4770      	bx	lr

08013172 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8013172:	b480      	push	{r7}
 8013174:	b087      	sub	sp, #28
 8013176:	af00      	add	r7, sp, #0
 8013178:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801317e:	693b      	ldr	r3, [r7, #16]
 8013180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013184:	689b      	ldr	r3, [r3, #8]
 8013186:	f003 0306 	and.w	r3, r3, #6
 801318a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d102      	bne.n	8013198 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8013192:	2300      	movs	r3, #0
 8013194:	75fb      	strb	r3, [r7, #23]
 8013196:	e00a      	b.n	80131ae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	2b02      	cmp	r3, #2
 801319c:	d002      	beq.n	80131a4 <USB_GetDevSpeed+0x32>
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	2b06      	cmp	r3, #6
 80131a2:	d102      	bne.n	80131aa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80131a4:	2302      	movs	r3, #2
 80131a6:	75fb      	strb	r3, [r7, #23]
 80131a8:	e001      	b.n	80131ae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80131aa:	230f      	movs	r3, #15
 80131ac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80131ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80131b0:	4618      	mov	r0, r3
 80131b2:	371c      	adds	r7, #28
 80131b4:	46bd      	mov	sp, r7
 80131b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ba:	4770      	bx	lr

080131bc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80131bc:	b480      	push	{r7}
 80131be:	b085      	sub	sp, #20
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	6078      	str	r0, [r7, #4]
 80131c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80131ca:	683b      	ldr	r3, [r7, #0]
 80131cc:	781b      	ldrb	r3, [r3, #0]
 80131ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80131d0:	683b      	ldr	r3, [r7, #0]
 80131d2:	785b      	ldrb	r3, [r3, #1]
 80131d4:	2b01      	cmp	r3, #1
 80131d6:	d139      	bne.n	801324c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80131de:	69da      	ldr	r2, [r3, #28]
 80131e0:	683b      	ldr	r3, [r7, #0]
 80131e2:	781b      	ldrb	r3, [r3, #0]
 80131e4:	f003 030f 	and.w	r3, r3, #15
 80131e8:	2101      	movs	r1, #1
 80131ea:	fa01 f303 	lsl.w	r3, r1, r3
 80131ee:	b29b      	uxth	r3, r3
 80131f0:	68f9      	ldr	r1, [r7, #12]
 80131f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80131f6:	4313      	orrs	r3, r2
 80131f8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80131fa:	68bb      	ldr	r3, [r7, #8]
 80131fc:	015a      	lsls	r2, r3, #5
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	4413      	add	r3, r2
 8013202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801320c:	2b00      	cmp	r3, #0
 801320e:	d153      	bne.n	80132b8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013210:	68bb      	ldr	r3, [r7, #8]
 8013212:	015a      	lsls	r2, r3, #5
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	4413      	add	r3, r2
 8013218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801321c:	681a      	ldr	r2, [r3, #0]
 801321e:	683b      	ldr	r3, [r7, #0]
 8013220:	689b      	ldr	r3, [r3, #8]
 8013222:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013226:	683b      	ldr	r3, [r7, #0]
 8013228:	791b      	ldrb	r3, [r3, #4]
 801322a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801322c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801322e:	68bb      	ldr	r3, [r7, #8]
 8013230:	059b      	lsls	r3, r3, #22
 8013232:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013234:	431a      	orrs	r2, r3
 8013236:	68bb      	ldr	r3, [r7, #8]
 8013238:	0159      	lsls	r1, r3, #5
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	440b      	add	r3, r1
 801323e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013242:	4619      	mov	r1, r3
 8013244:	4b20      	ldr	r3, [pc, #128]	; (80132c8 <USB_ActivateEndpoint+0x10c>)
 8013246:	4313      	orrs	r3, r2
 8013248:	600b      	str	r3, [r1, #0]
 801324a:	e035      	b.n	80132b8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013252:	69da      	ldr	r2, [r3, #28]
 8013254:	683b      	ldr	r3, [r7, #0]
 8013256:	781b      	ldrb	r3, [r3, #0]
 8013258:	f003 030f 	and.w	r3, r3, #15
 801325c:	2101      	movs	r1, #1
 801325e:	fa01 f303 	lsl.w	r3, r1, r3
 8013262:	041b      	lsls	r3, r3, #16
 8013264:	68f9      	ldr	r1, [r7, #12]
 8013266:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801326a:	4313      	orrs	r3, r2
 801326c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801326e:	68bb      	ldr	r3, [r7, #8]
 8013270:	015a      	lsls	r2, r3, #5
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	4413      	add	r3, r2
 8013276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013280:	2b00      	cmp	r3, #0
 8013282:	d119      	bne.n	80132b8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013284:	68bb      	ldr	r3, [r7, #8]
 8013286:	015a      	lsls	r2, r3, #5
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	4413      	add	r3, r2
 801328c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013290:	681a      	ldr	r2, [r3, #0]
 8013292:	683b      	ldr	r3, [r7, #0]
 8013294:	689b      	ldr	r3, [r3, #8]
 8013296:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801329a:	683b      	ldr	r3, [r7, #0]
 801329c:	791b      	ldrb	r3, [r3, #4]
 801329e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80132a0:	430b      	orrs	r3, r1
 80132a2:	431a      	orrs	r2, r3
 80132a4:	68bb      	ldr	r3, [r7, #8]
 80132a6:	0159      	lsls	r1, r3, #5
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	440b      	add	r3, r1
 80132ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132b0:	4619      	mov	r1, r3
 80132b2:	4b05      	ldr	r3, [pc, #20]	; (80132c8 <USB_ActivateEndpoint+0x10c>)
 80132b4:	4313      	orrs	r3, r2
 80132b6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80132b8:	2300      	movs	r3, #0
}
 80132ba:	4618      	mov	r0, r3
 80132bc:	3714      	adds	r7, #20
 80132be:	46bd      	mov	sp, r7
 80132c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c4:	4770      	bx	lr
 80132c6:	bf00      	nop
 80132c8:	10008000 	.word	0x10008000

080132cc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80132cc:	b480      	push	{r7}
 80132ce:	b085      	sub	sp, #20
 80132d0:	af00      	add	r7, sp, #0
 80132d2:	6078      	str	r0, [r7, #4]
 80132d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80132da:	683b      	ldr	r3, [r7, #0]
 80132dc:	781b      	ldrb	r3, [r3, #0]
 80132de:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80132e0:	683b      	ldr	r3, [r7, #0]
 80132e2:	785b      	ldrb	r3, [r3, #1]
 80132e4:	2b01      	cmp	r3, #1
 80132e6:	d161      	bne.n	80133ac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80132e8:	68bb      	ldr	r3, [r7, #8]
 80132ea:	015a      	lsls	r2, r3, #5
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	4413      	add	r3, r2
 80132f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80132fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80132fe:	d11f      	bne.n	8013340 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8013300:	68bb      	ldr	r3, [r7, #8]
 8013302:	015a      	lsls	r2, r3, #5
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	4413      	add	r3, r2
 8013308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	68ba      	ldr	r2, [r7, #8]
 8013310:	0151      	lsls	r1, r2, #5
 8013312:	68fa      	ldr	r2, [r7, #12]
 8013314:	440a      	add	r2, r1
 8013316:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801331a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801331e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8013320:	68bb      	ldr	r3, [r7, #8]
 8013322:	015a      	lsls	r2, r3, #5
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	4413      	add	r3, r2
 8013328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	68ba      	ldr	r2, [r7, #8]
 8013330:	0151      	lsls	r1, r2, #5
 8013332:	68fa      	ldr	r2, [r7, #12]
 8013334:	440a      	add	r2, r1
 8013336:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801333a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801333e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013346:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013348:	683b      	ldr	r3, [r7, #0]
 801334a:	781b      	ldrb	r3, [r3, #0]
 801334c:	f003 030f 	and.w	r3, r3, #15
 8013350:	2101      	movs	r1, #1
 8013352:	fa01 f303 	lsl.w	r3, r1, r3
 8013356:	b29b      	uxth	r3, r3
 8013358:	43db      	mvns	r3, r3
 801335a:	68f9      	ldr	r1, [r7, #12]
 801335c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013360:	4013      	ands	r3, r2
 8013362:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801336a:	69da      	ldr	r2, [r3, #28]
 801336c:	683b      	ldr	r3, [r7, #0]
 801336e:	781b      	ldrb	r3, [r3, #0]
 8013370:	f003 030f 	and.w	r3, r3, #15
 8013374:	2101      	movs	r1, #1
 8013376:	fa01 f303 	lsl.w	r3, r1, r3
 801337a:	b29b      	uxth	r3, r3
 801337c:	43db      	mvns	r3, r3
 801337e:	68f9      	ldr	r1, [r7, #12]
 8013380:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013384:	4013      	ands	r3, r2
 8013386:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8013388:	68bb      	ldr	r3, [r7, #8]
 801338a:	015a      	lsls	r2, r3, #5
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	4413      	add	r3, r2
 8013390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013394:	681a      	ldr	r2, [r3, #0]
 8013396:	68bb      	ldr	r3, [r7, #8]
 8013398:	0159      	lsls	r1, r3, #5
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	440b      	add	r3, r1
 801339e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80133a2:	4619      	mov	r1, r3
 80133a4:	4b35      	ldr	r3, [pc, #212]	; (801347c <USB_DeactivateEndpoint+0x1b0>)
 80133a6:	4013      	ands	r3, r2
 80133a8:	600b      	str	r3, [r1, #0]
 80133aa:	e060      	b.n	801346e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80133ac:	68bb      	ldr	r3, [r7, #8]
 80133ae:	015a      	lsls	r2, r3, #5
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	4413      	add	r3, r2
 80133b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80133be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80133c2:	d11f      	bne.n	8013404 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80133c4:	68bb      	ldr	r3, [r7, #8]
 80133c6:	015a      	lsls	r2, r3, #5
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	4413      	add	r3, r2
 80133cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	68ba      	ldr	r2, [r7, #8]
 80133d4:	0151      	lsls	r1, r2, #5
 80133d6:	68fa      	ldr	r2, [r7, #12]
 80133d8:	440a      	add	r2, r1
 80133da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80133de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80133e2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80133e4:	68bb      	ldr	r3, [r7, #8]
 80133e6:	015a      	lsls	r2, r3, #5
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	4413      	add	r3, r2
 80133ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	68ba      	ldr	r2, [r7, #8]
 80133f4:	0151      	lsls	r1, r2, #5
 80133f6:	68fa      	ldr	r2, [r7, #12]
 80133f8:	440a      	add	r2, r1
 80133fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80133fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013402:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801340a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801340c:	683b      	ldr	r3, [r7, #0]
 801340e:	781b      	ldrb	r3, [r3, #0]
 8013410:	f003 030f 	and.w	r3, r3, #15
 8013414:	2101      	movs	r1, #1
 8013416:	fa01 f303 	lsl.w	r3, r1, r3
 801341a:	041b      	lsls	r3, r3, #16
 801341c:	43db      	mvns	r3, r3
 801341e:	68f9      	ldr	r1, [r7, #12]
 8013420:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013424:	4013      	ands	r3, r2
 8013426:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801342e:	69da      	ldr	r2, [r3, #28]
 8013430:	683b      	ldr	r3, [r7, #0]
 8013432:	781b      	ldrb	r3, [r3, #0]
 8013434:	f003 030f 	and.w	r3, r3, #15
 8013438:	2101      	movs	r1, #1
 801343a:	fa01 f303 	lsl.w	r3, r1, r3
 801343e:	041b      	lsls	r3, r3, #16
 8013440:	43db      	mvns	r3, r3
 8013442:	68f9      	ldr	r1, [r7, #12]
 8013444:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013448:	4013      	ands	r3, r2
 801344a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801344c:	68bb      	ldr	r3, [r7, #8]
 801344e:	015a      	lsls	r2, r3, #5
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	4413      	add	r3, r2
 8013454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013458:	681a      	ldr	r2, [r3, #0]
 801345a:	68bb      	ldr	r3, [r7, #8]
 801345c:	0159      	lsls	r1, r3, #5
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	440b      	add	r3, r1
 8013462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013466:	4619      	mov	r1, r3
 8013468:	4b05      	ldr	r3, [pc, #20]	; (8013480 <USB_DeactivateEndpoint+0x1b4>)
 801346a:	4013      	ands	r3, r2
 801346c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801346e:	2300      	movs	r3, #0
}
 8013470:	4618      	mov	r0, r3
 8013472:	3714      	adds	r7, #20
 8013474:	46bd      	mov	sp, r7
 8013476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801347a:	4770      	bx	lr
 801347c:	ec337800 	.word	0xec337800
 8013480:	eff37800 	.word	0xeff37800

08013484 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8013484:	b580      	push	{r7, lr}
 8013486:	b08a      	sub	sp, #40	; 0x28
 8013488:	af02      	add	r7, sp, #8
 801348a:	60f8      	str	r0, [r7, #12]
 801348c:	60b9      	str	r1, [r7, #8]
 801348e:	4613      	mov	r3, r2
 8013490:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8013496:	68bb      	ldr	r3, [r7, #8]
 8013498:	781b      	ldrb	r3, [r3, #0]
 801349a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801349c:	68bb      	ldr	r3, [r7, #8]
 801349e:	785b      	ldrb	r3, [r3, #1]
 80134a0:	2b01      	cmp	r3, #1
 80134a2:	f040 8181 	bne.w	80137a8 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80134a6:	68bb      	ldr	r3, [r7, #8]
 80134a8:	691b      	ldr	r3, [r3, #16]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d132      	bne.n	8013514 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80134ae:	69bb      	ldr	r3, [r7, #24]
 80134b0:	015a      	lsls	r2, r3, #5
 80134b2:	69fb      	ldr	r3, [r7, #28]
 80134b4:	4413      	add	r3, r2
 80134b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134ba:	691a      	ldr	r2, [r3, #16]
 80134bc:	69bb      	ldr	r3, [r7, #24]
 80134be:	0159      	lsls	r1, r3, #5
 80134c0:	69fb      	ldr	r3, [r7, #28]
 80134c2:	440b      	add	r3, r1
 80134c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134c8:	4619      	mov	r1, r3
 80134ca:	4ba5      	ldr	r3, [pc, #660]	; (8013760 <USB_EPStartXfer+0x2dc>)
 80134cc:	4013      	ands	r3, r2
 80134ce:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80134d0:	69bb      	ldr	r3, [r7, #24]
 80134d2:	015a      	lsls	r2, r3, #5
 80134d4:	69fb      	ldr	r3, [r7, #28]
 80134d6:	4413      	add	r3, r2
 80134d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134dc:	691b      	ldr	r3, [r3, #16]
 80134de:	69ba      	ldr	r2, [r7, #24]
 80134e0:	0151      	lsls	r1, r2, #5
 80134e2:	69fa      	ldr	r2, [r7, #28]
 80134e4:	440a      	add	r2, r1
 80134e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80134ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80134ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80134f0:	69bb      	ldr	r3, [r7, #24]
 80134f2:	015a      	lsls	r2, r3, #5
 80134f4:	69fb      	ldr	r3, [r7, #28]
 80134f6:	4413      	add	r3, r2
 80134f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134fc:	691a      	ldr	r2, [r3, #16]
 80134fe:	69bb      	ldr	r3, [r7, #24]
 8013500:	0159      	lsls	r1, r3, #5
 8013502:	69fb      	ldr	r3, [r7, #28]
 8013504:	440b      	add	r3, r1
 8013506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801350a:	4619      	mov	r1, r3
 801350c:	4b95      	ldr	r3, [pc, #596]	; (8013764 <USB_EPStartXfer+0x2e0>)
 801350e:	4013      	ands	r3, r2
 8013510:	610b      	str	r3, [r1, #16]
 8013512:	e092      	b.n	801363a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013514:	69bb      	ldr	r3, [r7, #24]
 8013516:	015a      	lsls	r2, r3, #5
 8013518:	69fb      	ldr	r3, [r7, #28]
 801351a:	4413      	add	r3, r2
 801351c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013520:	691a      	ldr	r2, [r3, #16]
 8013522:	69bb      	ldr	r3, [r7, #24]
 8013524:	0159      	lsls	r1, r3, #5
 8013526:	69fb      	ldr	r3, [r7, #28]
 8013528:	440b      	add	r3, r1
 801352a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801352e:	4619      	mov	r1, r3
 8013530:	4b8c      	ldr	r3, [pc, #560]	; (8013764 <USB_EPStartXfer+0x2e0>)
 8013532:	4013      	ands	r3, r2
 8013534:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013536:	69bb      	ldr	r3, [r7, #24]
 8013538:	015a      	lsls	r2, r3, #5
 801353a:	69fb      	ldr	r3, [r7, #28]
 801353c:	4413      	add	r3, r2
 801353e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013542:	691a      	ldr	r2, [r3, #16]
 8013544:	69bb      	ldr	r3, [r7, #24]
 8013546:	0159      	lsls	r1, r3, #5
 8013548:	69fb      	ldr	r3, [r7, #28]
 801354a:	440b      	add	r3, r1
 801354c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013550:	4619      	mov	r1, r3
 8013552:	4b83      	ldr	r3, [pc, #524]	; (8013760 <USB_EPStartXfer+0x2dc>)
 8013554:	4013      	ands	r3, r2
 8013556:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8013558:	69bb      	ldr	r3, [r7, #24]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d11a      	bne.n	8013594 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 801355e:	68bb      	ldr	r3, [r7, #8]
 8013560:	691a      	ldr	r2, [r3, #16]
 8013562:	68bb      	ldr	r3, [r7, #8]
 8013564:	689b      	ldr	r3, [r3, #8]
 8013566:	429a      	cmp	r2, r3
 8013568:	d903      	bls.n	8013572 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 801356a:	68bb      	ldr	r3, [r7, #8]
 801356c:	689a      	ldr	r2, [r3, #8]
 801356e:	68bb      	ldr	r3, [r7, #8]
 8013570:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013572:	69bb      	ldr	r3, [r7, #24]
 8013574:	015a      	lsls	r2, r3, #5
 8013576:	69fb      	ldr	r3, [r7, #28]
 8013578:	4413      	add	r3, r2
 801357a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801357e:	691b      	ldr	r3, [r3, #16]
 8013580:	69ba      	ldr	r2, [r7, #24]
 8013582:	0151      	lsls	r1, r2, #5
 8013584:	69fa      	ldr	r2, [r7, #28]
 8013586:	440a      	add	r2, r1
 8013588:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801358c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013590:	6113      	str	r3, [r2, #16]
 8013592:	e01b      	b.n	80135cc <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013594:	69bb      	ldr	r3, [r7, #24]
 8013596:	015a      	lsls	r2, r3, #5
 8013598:	69fb      	ldr	r3, [r7, #28]
 801359a:	4413      	add	r3, r2
 801359c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135a0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80135a2:	68bb      	ldr	r3, [r7, #8]
 80135a4:	6919      	ldr	r1, [r3, #16]
 80135a6:	68bb      	ldr	r3, [r7, #8]
 80135a8:	689b      	ldr	r3, [r3, #8]
 80135aa:	440b      	add	r3, r1
 80135ac:	1e59      	subs	r1, r3, #1
 80135ae:	68bb      	ldr	r3, [r7, #8]
 80135b0:	689b      	ldr	r3, [r3, #8]
 80135b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80135b6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80135b8:	4b6b      	ldr	r3, [pc, #428]	; (8013768 <USB_EPStartXfer+0x2e4>)
 80135ba:	400b      	ands	r3, r1
 80135bc:	69b9      	ldr	r1, [r7, #24]
 80135be:	0148      	lsls	r0, r1, #5
 80135c0:	69f9      	ldr	r1, [r7, #28]
 80135c2:	4401      	add	r1, r0
 80135c4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80135c8:	4313      	orrs	r3, r2
 80135ca:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80135cc:	69bb      	ldr	r3, [r7, #24]
 80135ce:	015a      	lsls	r2, r3, #5
 80135d0:	69fb      	ldr	r3, [r7, #28]
 80135d2:	4413      	add	r3, r2
 80135d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135d8:	691a      	ldr	r2, [r3, #16]
 80135da:	68bb      	ldr	r3, [r7, #8]
 80135dc:	691b      	ldr	r3, [r3, #16]
 80135de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80135e2:	69b9      	ldr	r1, [r7, #24]
 80135e4:	0148      	lsls	r0, r1, #5
 80135e6:	69f9      	ldr	r1, [r7, #28]
 80135e8:	4401      	add	r1, r0
 80135ea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80135ee:	4313      	orrs	r3, r2
 80135f0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80135f2:	68bb      	ldr	r3, [r7, #8]
 80135f4:	791b      	ldrb	r3, [r3, #4]
 80135f6:	2b01      	cmp	r3, #1
 80135f8:	d11f      	bne.n	801363a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80135fa:	69bb      	ldr	r3, [r7, #24]
 80135fc:	015a      	lsls	r2, r3, #5
 80135fe:	69fb      	ldr	r3, [r7, #28]
 8013600:	4413      	add	r3, r2
 8013602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013606:	691b      	ldr	r3, [r3, #16]
 8013608:	69ba      	ldr	r2, [r7, #24]
 801360a:	0151      	lsls	r1, r2, #5
 801360c:	69fa      	ldr	r2, [r7, #28]
 801360e:	440a      	add	r2, r1
 8013610:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013614:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8013618:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801361a:	69bb      	ldr	r3, [r7, #24]
 801361c:	015a      	lsls	r2, r3, #5
 801361e:	69fb      	ldr	r3, [r7, #28]
 8013620:	4413      	add	r3, r2
 8013622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013626:	691b      	ldr	r3, [r3, #16]
 8013628:	69ba      	ldr	r2, [r7, #24]
 801362a:	0151      	lsls	r1, r2, #5
 801362c:	69fa      	ldr	r2, [r7, #28]
 801362e:	440a      	add	r2, r1
 8013630:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013634:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013638:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801363a:	79fb      	ldrb	r3, [r7, #7]
 801363c:	2b01      	cmp	r3, #1
 801363e:	d14b      	bne.n	80136d8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8013640:	68bb      	ldr	r3, [r7, #8]
 8013642:	69db      	ldr	r3, [r3, #28]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d009      	beq.n	801365c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013648:	69bb      	ldr	r3, [r7, #24]
 801364a:	015a      	lsls	r2, r3, #5
 801364c:	69fb      	ldr	r3, [r7, #28]
 801364e:	4413      	add	r3, r2
 8013650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013654:	461a      	mov	r2, r3
 8013656:	68bb      	ldr	r3, [r7, #8]
 8013658:	69db      	ldr	r3, [r3, #28]
 801365a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801365c:	68bb      	ldr	r3, [r7, #8]
 801365e:	791b      	ldrb	r3, [r3, #4]
 8013660:	2b01      	cmp	r3, #1
 8013662:	d128      	bne.n	80136b6 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013664:	69fb      	ldr	r3, [r7, #28]
 8013666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801366a:	689b      	ldr	r3, [r3, #8]
 801366c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013670:	2b00      	cmp	r3, #0
 8013672:	d110      	bne.n	8013696 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013674:	69bb      	ldr	r3, [r7, #24]
 8013676:	015a      	lsls	r2, r3, #5
 8013678:	69fb      	ldr	r3, [r7, #28]
 801367a:	4413      	add	r3, r2
 801367c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	69ba      	ldr	r2, [r7, #24]
 8013684:	0151      	lsls	r1, r2, #5
 8013686:	69fa      	ldr	r2, [r7, #28]
 8013688:	440a      	add	r2, r1
 801368a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801368e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013692:	6013      	str	r3, [r2, #0]
 8013694:	e00f      	b.n	80136b6 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013696:	69bb      	ldr	r3, [r7, #24]
 8013698:	015a      	lsls	r2, r3, #5
 801369a:	69fb      	ldr	r3, [r7, #28]
 801369c:	4413      	add	r3, r2
 801369e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	69ba      	ldr	r2, [r7, #24]
 80136a6:	0151      	lsls	r1, r2, #5
 80136a8:	69fa      	ldr	r2, [r7, #28]
 80136aa:	440a      	add	r2, r1
 80136ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80136b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80136b4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80136b6:	69bb      	ldr	r3, [r7, #24]
 80136b8:	015a      	lsls	r2, r3, #5
 80136ba:	69fb      	ldr	r3, [r7, #28]
 80136bc:	4413      	add	r3, r2
 80136be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	69ba      	ldr	r2, [r7, #24]
 80136c6:	0151      	lsls	r1, r2, #5
 80136c8:	69fa      	ldr	r2, [r7, #28]
 80136ca:	440a      	add	r2, r1
 80136cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80136d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80136d4:	6013      	str	r3, [r2, #0]
 80136d6:	e16a      	b.n	80139ae <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80136d8:	69bb      	ldr	r3, [r7, #24]
 80136da:	015a      	lsls	r2, r3, #5
 80136dc:	69fb      	ldr	r3, [r7, #28]
 80136de:	4413      	add	r3, r2
 80136e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	69ba      	ldr	r2, [r7, #24]
 80136e8:	0151      	lsls	r1, r2, #5
 80136ea:	69fa      	ldr	r2, [r7, #28]
 80136ec:	440a      	add	r2, r1
 80136ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80136f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80136f6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80136f8:	68bb      	ldr	r3, [r7, #8]
 80136fa:	791b      	ldrb	r3, [r3, #4]
 80136fc:	2b01      	cmp	r3, #1
 80136fe:	d015      	beq.n	801372c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8013700:	68bb      	ldr	r3, [r7, #8]
 8013702:	691b      	ldr	r3, [r3, #16]
 8013704:	2b00      	cmp	r3, #0
 8013706:	f000 8152 	beq.w	80139ae <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801370a:	69fb      	ldr	r3, [r7, #28]
 801370c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013710:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013712:	68bb      	ldr	r3, [r7, #8]
 8013714:	781b      	ldrb	r3, [r3, #0]
 8013716:	f003 030f 	and.w	r3, r3, #15
 801371a:	2101      	movs	r1, #1
 801371c:	fa01 f303 	lsl.w	r3, r1, r3
 8013720:	69f9      	ldr	r1, [r7, #28]
 8013722:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013726:	4313      	orrs	r3, r2
 8013728:	634b      	str	r3, [r1, #52]	; 0x34
 801372a:	e140      	b.n	80139ae <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801372c:	69fb      	ldr	r3, [r7, #28]
 801372e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013732:	689b      	ldr	r3, [r3, #8]
 8013734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013738:	2b00      	cmp	r3, #0
 801373a:	d117      	bne.n	801376c <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801373c:	69bb      	ldr	r3, [r7, #24]
 801373e:	015a      	lsls	r2, r3, #5
 8013740:	69fb      	ldr	r3, [r7, #28]
 8013742:	4413      	add	r3, r2
 8013744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	69ba      	ldr	r2, [r7, #24]
 801374c:	0151      	lsls	r1, r2, #5
 801374e:	69fa      	ldr	r2, [r7, #28]
 8013750:	440a      	add	r2, r1
 8013752:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013756:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801375a:	6013      	str	r3, [r2, #0]
 801375c:	e016      	b.n	801378c <USB_EPStartXfer+0x308>
 801375e:	bf00      	nop
 8013760:	e007ffff 	.word	0xe007ffff
 8013764:	fff80000 	.word	0xfff80000
 8013768:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801376c:	69bb      	ldr	r3, [r7, #24]
 801376e:	015a      	lsls	r2, r3, #5
 8013770:	69fb      	ldr	r3, [r7, #28]
 8013772:	4413      	add	r3, r2
 8013774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	69ba      	ldr	r2, [r7, #24]
 801377c:	0151      	lsls	r1, r2, #5
 801377e:	69fa      	ldr	r2, [r7, #28]
 8013780:	440a      	add	r2, r1
 8013782:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801378a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801378c:	68bb      	ldr	r3, [r7, #8]
 801378e:	68d9      	ldr	r1, [r3, #12]
 8013790:	68bb      	ldr	r3, [r7, #8]
 8013792:	781a      	ldrb	r2, [r3, #0]
 8013794:	68bb      	ldr	r3, [r7, #8]
 8013796:	691b      	ldr	r3, [r3, #16]
 8013798:	b298      	uxth	r0, r3
 801379a:	79fb      	ldrb	r3, [r7, #7]
 801379c:	9300      	str	r3, [sp, #0]
 801379e:	4603      	mov	r3, r0
 80137a0:	68f8      	ldr	r0, [r7, #12]
 80137a2:	f000 f9b9 	bl	8013b18 <USB_WritePacket>
 80137a6:	e102      	b.n	80139ae <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80137a8:	69bb      	ldr	r3, [r7, #24]
 80137aa:	015a      	lsls	r2, r3, #5
 80137ac:	69fb      	ldr	r3, [r7, #28]
 80137ae:	4413      	add	r3, r2
 80137b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137b4:	691a      	ldr	r2, [r3, #16]
 80137b6:	69bb      	ldr	r3, [r7, #24]
 80137b8:	0159      	lsls	r1, r3, #5
 80137ba:	69fb      	ldr	r3, [r7, #28]
 80137bc:	440b      	add	r3, r1
 80137be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137c2:	4619      	mov	r1, r3
 80137c4:	4b7c      	ldr	r3, [pc, #496]	; (80139b8 <USB_EPStartXfer+0x534>)
 80137c6:	4013      	ands	r3, r2
 80137c8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80137ca:	69bb      	ldr	r3, [r7, #24]
 80137cc:	015a      	lsls	r2, r3, #5
 80137ce:	69fb      	ldr	r3, [r7, #28]
 80137d0:	4413      	add	r3, r2
 80137d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137d6:	691a      	ldr	r2, [r3, #16]
 80137d8:	69bb      	ldr	r3, [r7, #24]
 80137da:	0159      	lsls	r1, r3, #5
 80137dc:	69fb      	ldr	r3, [r7, #28]
 80137de:	440b      	add	r3, r1
 80137e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137e4:	4619      	mov	r1, r3
 80137e6:	4b75      	ldr	r3, [pc, #468]	; (80139bc <USB_EPStartXfer+0x538>)
 80137e8:	4013      	ands	r3, r2
 80137ea:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80137ec:	69bb      	ldr	r3, [r7, #24]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d12f      	bne.n	8013852 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80137f2:	68bb      	ldr	r3, [r7, #8]
 80137f4:	691b      	ldr	r3, [r3, #16]
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d003      	beq.n	8013802 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80137fa:	68bb      	ldr	r3, [r7, #8]
 80137fc:	689a      	ldr	r2, [r3, #8]
 80137fe:	68bb      	ldr	r3, [r7, #8]
 8013800:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8013802:	68bb      	ldr	r3, [r7, #8]
 8013804:	689a      	ldr	r2, [r3, #8]
 8013806:	68bb      	ldr	r3, [r7, #8]
 8013808:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801380a:	69bb      	ldr	r3, [r7, #24]
 801380c:	015a      	lsls	r2, r3, #5
 801380e:	69fb      	ldr	r3, [r7, #28]
 8013810:	4413      	add	r3, r2
 8013812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013816:	691a      	ldr	r2, [r3, #16]
 8013818:	68bb      	ldr	r3, [r7, #8]
 801381a:	6a1b      	ldr	r3, [r3, #32]
 801381c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013820:	69b9      	ldr	r1, [r7, #24]
 8013822:	0148      	lsls	r0, r1, #5
 8013824:	69f9      	ldr	r1, [r7, #28]
 8013826:	4401      	add	r1, r0
 8013828:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801382c:	4313      	orrs	r3, r2
 801382e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013830:	69bb      	ldr	r3, [r7, #24]
 8013832:	015a      	lsls	r2, r3, #5
 8013834:	69fb      	ldr	r3, [r7, #28]
 8013836:	4413      	add	r3, r2
 8013838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801383c:	691b      	ldr	r3, [r3, #16]
 801383e:	69ba      	ldr	r2, [r7, #24]
 8013840:	0151      	lsls	r1, r2, #5
 8013842:	69fa      	ldr	r2, [r7, #28]
 8013844:	440a      	add	r2, r1
 8013846:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801384a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801384e:	6113      	str	r3, [r2, #16]
 8013850:	e05f      	b.n	8013912 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8013852:	68bb      	ldr	r3, [r7, #8]
 8013854:	691b      	ldr	r3, [r3, #16]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d123      	bne.n	80138a2 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801385a:	69bb      	ldr	r3, [r7, #24]
 801385c:	015a      	lsls	r2, r3, #5
 801385e:	69fb      	ldr	r3, [r7, #28]
 8013860:	4413      	add	r3, r2
 8013862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013866:	691a      	ldr	r2, [r3, #16]
 8013868:	68bb      	ldr	r3, [r7, #8]
 801386a:	689b      	ldr	r3, [r3, #8]
 801386c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013870:	69b9      	ldr	r1, [r7, #24]
 8013872:	0148      	lsls	r0, r1, #5
 8013874:	69f9      	ldr	r1, [r7, #28]
 8013876:	4401      	add	r1, r0
 8013878:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801387c:	4313      	orrs	r3, r2
 801387e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013880:	69bb      	ldr	r3, [r7, #24]
 8013882:	015a      	lsls	r2, r3, #5
 8013884:	69fb      	ldr	r3, [r7, #28]
 8013886:	4413      	add	r3, r2
 8013888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801388c:	691b      	ldr	r3, [r3, #16]
 801388e:	69ba      	ldr	r2, [r7, #24]
 8013890:	0151      	lsls	r1, r2, #5
 8013892:	69fa      	ldr	r2, [r7, #28]
 8013894:	440a      	add	r2, r1
 8013896:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801389a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801389e:	6113      	str	r3, [r2, #16]
 80138a0:	e037      	b.n	8013912 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80138a2:	68bb      	ldr	r3, [r7, #8]
 80138a4:	691a      	ldr	r2, [r3, #16]
 80138a6:	68bb      	ldr	r3, [r7, #8]
 80138a8:	689b      	ldr	r3, [r3, #8]
 80138aa:	4413      	add	r3, r2
 80138ac:	1e5a      	subs	r2, r3, #1
 80138ae:	68bb      	ldr	r3, [r7, #8]
 80138b0:	689b      	ldr	r3, [r3, #8]
 80138b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80138b6:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80138b8:	68bb      	ldr	r3, [r7, #8]
 80138ba:	689b      	ldr	r3, [r3, #8]
 80138bc:	8afa      	ldrh	r2, [r7, #22]
 80138be:	fb03 f202 	mul.w	r2, r3, r2
 80138c2:	68bb      	ldr	r3, [r7, #8]
 80138c4:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80138c6:	69bb      	ldr	r3, [r7, #24]
 80138c8:	015a      	lsls	r2, r3, #5
 80138ca:	69fb      	ldr	r3, [r7, #28]
 80138cc:	4413      	add	r3, r2
 80138ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138d2:	691a      	ldr	r2, [r3, #16]
 80138d4:	8afb      	ldrh	r3, [r7, #22]
 80138d6:	04d9      	lsls	r1, r3, #19
 80138d8:	4b39      	ldr	r3, [pc, #228]	; (80139c0 <USB_EPStartXfer+0x53c>)
 80138da:	400b      	ands	r3, r1
 80138dc:	69b9      	ldr	r1, [r7, #24]
 80138de:	0148      	lsls	r0, r1, #5
 80138e0:	69f9      	ldr	r1, [r7, #28]
 80138e2:	4401      	add	r1, r0
 80138e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80138e8:	4313      	orrs	r3, r2
 80138ea:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80138ec:	69bb      	ldr	r3, [r7, #24]
 80138ee:	015a      	lsls	r2, r3, #5
 80138f0:	69fb      	ldr	r3, [r7, #28]
 80138f2:	4413      	add	r3, r2
 80138f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138f8:	691a      	ldr	r2, [r3, #16]
 80138fa:	68bb      	ldr	r3, [r7, #8]
 80138fc:	6a1b      	ldr	r3, [r3, #32]
 80138fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013902:	69b9      	ldr	r1, [r7, #24]
 8013904:	0148      	lsls	r0, r1, #5
 8013906:	69f9      	ldr	r1, [r7, #28]
 8013908:	4401      	add	r1, r0
 801390a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801390e:	4313      	orrs	r3, r2
 8013910:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8013912:	79fb      	ldrb	r3, [r7, #7]
 8013914:	2b01      	cmp	r3, #1
 8013916:	d10d      	bne.n	8013934 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8013918:	68bb      	ldr	r3, [r7, #8]
 801391a:	68db      	ldr	r3, [r3, #12]
 801391c:	2b00      	cmp	r3, #0
 801391e:	d009      	beq.n	8013934 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013920:	68bb      	ldr	r3, [r7, #8]
 8013922:	68d9      	ldr	r1, [r3, #12]
 8013924:	69bb      	ldr	r3, [r7, #24]
 8013926:	015a      	lsls	r2, r3, #5
 8013928:	69fb      	ldr	r3, [r7, #28]
 801392a:	4413      	add	r3, r2
 801392c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013930:	460a      	mov	r2, r1
 8013932:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013934:	68bb      	ldr	r3, [r7, #8]
 8013936:	791b      	ldrb	r3, [r3, #4]
 8013938:	2b01      	cmp	r3, #1
 801393a:	d128      	bne.n	801398e <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801393c:	69fb      	ldr	r3, [r7, #28]
 801393e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013942:	689b      	ldr	r3, [r3, #8]
 8013944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013948:	2b00      	cmp	r3, #0
 801394a:	d110      	bne.n	801396e <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801394c:	69bb      	ldr	r3, [r7, #24]
 801394e:	015a      	lsls	r2, r3, #5
 8013950:	69fb      	ldr	r3, [r7, #28]
 8013952:	4413      	add	r3, r2
 8013954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	69ba      	ldr	r2, [r7, #24]
 801395c:	0151      	lsls	r1, r2, #5
 801395e:	69fa      	ldr	r2, [r7, #28]
 8013960:	440a      	add	r2, r1
 8013962:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013966:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801396a:	6013      	str	r3, [r2, #0]
 801396c:	e00f      	b.n	801398e <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801396e:	69bb      	ldr	r3, [r7, #24]
 8013970:	015a      	lsls	r2, r3, #5
 8013972:	69fb      	ldr	r3, [r7, #28]
 8013974:	4413      	add	r3, r2
 8013976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	69ba      	ldr	r2, [r7, #24]
 801397e:	0151      	lsls	r1, r2, #5
 8013980:	69fa      	ldr	r2, [r7, #28]
 8013982:	440a      	add	r2, r1
 8013984:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801398c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801398e:	69bb      	ldr	r3, [r7, #24]
 8013990:	015a      	lsls	r2, r3, #5
 8013992:	69fb      	ldr	r3, [r7, #28]
 8013994:	4413      	add	r3, r2
 8013996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	69ba      	ldr	r2, [r7, #24]
 801399e:	0151      	lsls	r1, r2, #5
 80139a0:	69fa      	ldr	r2, [r7, #28]
 80139a2:	440a      	add	r2, r1
 80139a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80139a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80139ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80139ae:	2300      	movs	r3, #0
}
 80139b0:	4618      	mov	r0, r3
 80139b2:	3720      	adds	r7, #32
 80139b4:	46bd      	mov	sp, r7
 80139b6:	bd80      	pop	{r7, pc}
 80139b8:	fff80000 	.word	0xfff80000
 80139bc:	e007ffff 	.word	0xe007ffff
 80139c0:	1ff80000 	.word	0x1ff80000

080139c4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80139c4:	b480      	push	{r7}
 80139c6:	b087      	sub	sp, #28
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	6078      	str	r0, [r7, #4]
 80139cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80139ce:	2300      	movs	r3, #0
 80139d0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80139d2:	2300      	movs	r3, #0
 80139d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80139da:	683b      	ldr	r3, [r7, #0]
 80139dc:	785b      	ldrb	r3, [r3, #1]
 80139de:	2b01      	cmp	r3, #1
 80139e0:	d14a      	bne.n	8013a78 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80139e2:	683b      	ldr	r3, [r7, #0]
 80139e4:	781b      	ldrb	r3, [r3, #0]
 80139e6:	015a      	lsls	r2, r3, #5
 80139e8:	693b      	ldr	r3, [r7, #16]
 80139ea:	4413      	add	r3, r2
 80139ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139f0:	681b      	ldr	r3, [r3, #0]
 80139f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80139f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80139fa:	f040 8086 	bne.w	8013b0a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80139fe:	683b      	ldr	r3, [r7, #0]
 8013a00:	781b      	ldrb	r3, [r3, #0]
 8013a02:	015a      	lsls	r2, r3, #5
 8013a04:	693b      	ldr	r3, [r7, #16]
 8013a06:	4413      	add	r3, r2
 8013a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a0c:	681b      	ldr	r3, [r3, #0]
 8013a0e:	683a      	ldr	r2, [r7, #0]
 8013a10:	7812      	ldrb	r2, [r2, #0]
 8013a12:	0151      	lsls	r1, r2, #5
 8013a14:	693a      	ldr	r2, [r7, #16]
 8013a16:	440a      	add	r2, r1
 8013a18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013a1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013a20:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8013a22:	683b      	ldr	r3, [r7, #0]
 8013a24:	781b      	ldrb	r3, [r3, #0]
 8013a26:	015a      	lsls	r2, r3, #5
 8013a28:	693b      	ldr	r3, [r7, #16]
 8013a2a:	4413      	add	r3, r2
 8013a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	683a      	ldr	r2, [r7, #0]
 8013a34:	7812      	ldrb	r2, [r2, #0]
 8013a36:	0151      	lsls	r1, r2, #5
 8013a38:	693a      	ldr	r2, [r7, #16]
 8013a3a:	440a      	add	r2, r1
 8013a3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013a40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013a44:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	3301      	adds	r3, #1
 8013a4a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	f242 7210 	movw	r2, #10000	; 0x2710
 8013a52:	4293      	cmp	r3, r2
 8013a54:	d902      	bls.n	8013a5c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8013a56:	2301      	movs	r3, #1
 8013a58:	75fb      	strb	r3, [r7, #23]
          break;
 8013a5a:	e056      	b.n	8013b0a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8013a5c:	683b      	ldr	r3, [r7, #0]
 8013a5e:	781b      	ldrb	r3, [r3, #0]
 8013a60:	015a      	lsls	r2, r3, #5
 8013a62:	693b      	ldr	r3, [r7, #16]
 8013a64:	4413      	add	r3, r2
 8013a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013a70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013a74:	d0e7      	beq.n	8013a46 <USB_EPStopXfer+0x82>
 8013a76:	e048      	b.n	8013b0a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013a78:	683b      	ldr	r3, [r7, #0]
 8013a7a:	781b      	ldrb	r3, [r3, #0]
 8013a7c:	015a      	lsls	r2, r3, #5
 8013a7e:	693b      	ldr	r3, [r7, #16]
 8013a80:	4413      	add	r3, r2
 8013a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013a8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013a90:	d13b      	bne.n	8013b0a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8013a92:	683b      	ldr	r3, [r7, #0]
 8013a94:	781b      	ldrb	r3, [r3, #0]
 8013a96:	015a      	lsls	r2, r3, #5
 8013a98:	693b      	ldr	r3, [r7, #16]
 8013a9a:	4413      	add	r3, r2
 8013a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	683a      	ldr	r2, [r7, #0]
 8013aa4:	7812      	ldrb	r2, [r2, #0]
 8013aa6:	0151      	lsls	r1, r2, #5
 8013aa8:	693a      	ldr	r2, [r7, #16]
 8013aaa:	440a      	add	r2, r1
 8013aac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013ab0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013ab4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8013ab6:	683b      	ldr	r3, [r7, #0]
 8013ab8:	781b      	ldrb	r3, [r3, #0]
 8013aba:	015a      	lsls	r2, r3, #5
 8013abc:	693b      	ldr	r3, [r7, #16]
 8013abe:	4413      	add	r3, r2
 8013ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	683a      	ldr	r2, [r7, #0]
 8013ac8:	7812      	ldrb	r2, [r2, #0]
 8013aca:	0151      	lsls	r1, r2, #5
 8013acc:	693a      	ldr	r2, [r7, #16]
 8013ace:	440a      	add	r2, r1
 8013ad0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013ad4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013ad8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	3301      	adds	r3, #1
 8013ade:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	f242 7210 	movw	r2, #10000	; 0x2710
 8013ae6:	4293      	cmp	r3, r2
 8013ae8:	d902      	bls.n	8013af0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8013aea:	2301      	movs	r3, #1
 8013aec:	75fb      	strb	r3, [r7, #23]
          break;
 8013aee:	e00c      	b.n	8013b0a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8013af0:	683b      	ldr	r3, [r7, #0]
 8013af2:	781b      	ldrb	r3, [r3, #0]
 8013af4:	015a      	lsls	r2, r3, #5
 8013af6:	693b      	ldr	r3, [r7, #16]
 8013af8:	4413      	add	r3, r2
 8013afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013b04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013b08:	d0e7      	beq.n	8013ada <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8013b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	371c      	adds	r7, #28
 8013b10:	46bd      	mov	sp, r7
 8013b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b16:	4770      	bx	lr

08013b18 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013b18:	b480      	push	{r7}
 8013b1a:	b089      	sub	sp, #36	; 0x24
 8013b1c:	af00      	add	r7, sp, #0
 8013b1e:	60f8      	str	r0, [r7, #12]
 8013b20:	60b9      	str	r1, [r7, #8]
 8013b22:	4611      	mov	r1, r2
 8013b24:	461a      	mov	r2, r3
 8013b26:	460b      	mov	r3, r1
 8013b28:	71fb      	strb	r3, [r7, #7]
 8013b2a:	4613      	mov	r3, r2
 8013b2c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8013b32:	68bb      	ldr	r3, [r7, #8]
 8013b34:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8013b36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d123      	bne.n	8013b86 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8013b3e:	88bb      	ldrh	r3, [r7, #4]
 8013b40:	3303      	adds	r3, #3
 8013b42:	089b      	lsrs	r3, r3, #2
 8013b44:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8013b46:	2300      	movs	r3, #0
 8013b48:	61bb      	str	r3, [r7, #24]
 8013b4a:	e018      	b.n	8013b7e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013b4c:	79fb      	ldrb	r3, [r7, #7]
 8013b4e:	031a      	lsls	r2, r3, #12
 8013b50:	697b      	ldr	r3, [r7, #20]
 8013b52:	4413      	add	r3, r2
 8013b54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013b58:	461a      	mov	r2, r3
 8013b5a:	69fb      	ldr	r3, [r7, #28]
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8013b60:	69fb      	ldr	r3, [r7, #28]
 8013b62:	3301      	adds	r3, #1
 8013b64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013b66:	69fb      	ldr	r3, [r7, #28]
 8013b68:	3301      	adds	r3, #1
 8013b6a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013b6c:	69fb      	ldr	r3, [r7, #28]
 8013b6e:	3301      	adds	r3, #1
 8013b70:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013b72:	69fb      	ldr	r3, [r7, #28]
 8013b74:	3301      	adds	r3, #1
 8013b76:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8013b78:	69bb      	ldr	r3, [r7, #24]
 8013b7a:	3301      	adds	r3, #1
 8013b7c:	61bb      	str	r3, [r7, #24]
 8013b7e:	69ba      	ldr	r2, [r7, #24]
 8013b80:	693b      	ldr	r3, [r7, #16]
 8013b82:	429a      	cmp	r2, r3
 8013b84:	d3e2      	bcc.n	8013b4c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8013b86:	2300      	movs	r3, #0
}
 8013b88:	4618      	mov	r0, r3
 8013b8a:	3724      	adds	r7, #36	; 0x24
 8013b8c:	46bd      	mov	sp, r7
 8013b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b92:	4770      	bx	lr

08013b94 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013b94:	b480      	push	{r7}
 8013b96:	b08b      	sub	sp, #44	; 0x2c
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	60f8      	str	r0, [r7, #12]
 8013b9c:	60b9      	str	r1, [r7, #8]
 8013b9e:	4613      	mov	r3, r2
 8013ba0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8013ba6:	68bb      	ldr	r3, [r7, #8]
 8013ba8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8013baa:	88fb      	ldrh	r3, [r7, #6]
 8013bac:	089b      	lsrs	r3, r3, #2
 8013bae:	b29b      	uxth	r3, r3
 8013bb0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8013bb2:	88fb      	ldrh	r3, [r7, #6]
 8013bb4:	f003 0303 	and.w	r3, r3, #3
 8013bb8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8013bba:	2300      	movs	r3, #0
 8013bbc:	623b      	str	r3, [r7, #32]
 8013bbe:	e014      	b.n	8013bea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013bc0:	69bb      	ldr	r3, [r7, #24]
 8013bc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013bc6:	681a      	ldr	r2, [r3, #0]
 8013bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bca:	601a      	str	r2, [r3, #0]
    pDest++;
 8013bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bce:	3301      	adds	r3, #1
 8013bd0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bd4:	3301      	adds	r3, #1
 8013bd6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bda:	3301      	adds	r3, #1
 8013bdc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013be0:	3301      	adds	r3, #1
 8013be2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8013be4:	6a3b      	ldr	r3, [r7, #32]
 8013be6:	3301      	adds	r3, #1
 8013be8:	623b      	str	r3, [r7, #32]
 8013bea:	6a3a      	ldr	r2, [r7, #32]
 8013bec:	697b      	ldr	r3, [r7, #20]
 8013bee:	429a      	cmp	r2, r3
 8013bf0:	d3e6      	bcc.n	8013bc0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8013bf2:	8bfb      	ldrh	r3, [r7, #30]
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d01e      	beq.n	8013c36 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013bf8:	2300      	movs	r3, #0
 8013bfa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013bfc:	69bb      	ldr	r3, [r7, #24]
 8013bfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013c02:	461a      	mov	r2, r3
 8013c04:	f107 0310 	add.w	r3, r7, #16
 8013c08:	6812      	ldr	r2, [r2, #0]
 8013c0a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013c0c:	693a      	ldr	r2, [r7, #16]
 8013c0e:	6a3b      	ldr	r3, [r7, #32]
 8013c10:	b2db      	uxtb	r3, r3
 8013c12:	00db      	lsls	r3, r3, #3
 8013c14:	fa22 f303 	lsr.w	r3, r2, r3
 8013c18:	b2da      	uxtb	r2, r3
 8013c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c1c:	701a      	strb	r2, [r3, #0]
      i++;
 8013c1e:	6a3b      	ldr	r3, [r7, #32]
 8013c20:	3301      	adds	r3, #1
 8013c22:	623b      	str	r3, [r7, #32]
      pDest++;
 8013c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c26:	3301      	adds	r3, #1
 8013c28:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8013c2a:	8bfb      	ldrh	r3, [r7, #30]
 8013c2c:	3b01      	subs	r3, #1
 8013c2e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8013c30:	8bfb      	ldrh	r3, [r7, #30]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d1ea      	bne.n	8013c0c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8013c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013c38:	4618      	mov	r0, r3
 8013c3a:	372c      	adds	r7, #44	; 0x2c
 8013c3c:	46bd      	mov	sp, r7
 8013c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c42:	4770      	bx	lr

08013c44 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013c44:	b480      	push	{r7}
 8013c46:	b085      	sub	sp, #20
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	6078      	str	r0, [r7, #4]
 8013c4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013c52:	683b      	ldr	r3, [r7, #0]
 8013c54:	781b      	ldrb	r3, [r3, #0]
 8013c56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013c58:	683b      	ldr	r3, [r7, #0]
 8013c5a:	785b      	ldrb	r3, [r3, #1]
 8013c5c:	2b01      	cmp	r3, #1
 8013c5e:	d12c      	bne.n	8013cba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013c60:	68bb      	ldr	r3, [r7, #8]
 8013c62:	015a      	lsls	r2, r3, #5
 8013c64:	68fb      	ldr	r3, [r7, #12]
 8013c66:	4413      	add	r3, r2
 8013c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	db12      	blt.n	8013c98 <USB_EPSetStall+0x54>
 8013c72:	68bb      	ldr	r3, [r7, #8]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d00f      	beq.n	8013c98 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013c78:	68bb      	ldr	r3, [r7, #8]
 8013c7a:	015a      	lsls	r2, r3, #5
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	4413      	add	r3, r2
 8013c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	68ba      	ldr	r2, [r7, #8]
 8013c88:	0151      	lsls	r1, r2, #5
 8013c8a:	68fa      	ldr	r2, [r7, #12]
 8013c8c:	440a      	add	r2, r1
 8013c8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013c96:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013c98:	68bb      	ldr	r3, [r7, #8]
 8013c9a:	015a      	lsls	r2, r3, #5
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	4413      	add	r3, r2
 8013ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ca4:	681b      	ldr	r3, [r3, #0]
 8013ca6:	68ba      	ldr	r2, [r7, #8]
 8013ca8:	0151      	lsls	r1, r2, #5
 8013caa:	68fa      	ldr	r2, [r7, #12]
 8013cac:	440a      	add	r2, r1
 8013cae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013cb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013cb6:	6013      	str	r3, [r2, #0]
 8013cb8:	e02b      	b.n	8013d12 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013cba:	68bb      	ldr	r3, [r7, #8]
 8013cbc:	015a      	lsls	r2, r3, #5
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	4413      	add	r3, r2
 8013cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	db12      	blt.n	8013cf2 <USB_EPSetStall+0xae>
 8013ccc:	68bb      	ldr	r3, [r7, #8]
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d00f      	beq.n	8013cf2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013cd2:	68bb      	ldr	r3, [r7, #8]
 8013cd4:	015a      	lsls	r2, r3, #5
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	4413      	add	r3, r2
 8013cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	68ba      	ldr	r2, [r7, #8]
 8013ce2:	0151      	lsls	r1, r2, #5
 8013ce4:	68fa      	ldr	r2, [r7, #12]
 8013ce6:	440a      	add	r2, r1
 8013ce8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013cec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013cf0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013cf2:	68bb      	ldr	r3, [r7, #8]
 8013cf4:	015a      	lsls	r2, r3, #5
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	4413      	add	r3, r2
 8013cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	68ba      	ldr	r2, [r7, #8]
 8013d02:	0151      	lsls	r1, r2, #5
 8013d04:	68fa      	ldr	r2, [r7, #12]
 8013d06:	440a      	add	r2, r1
 8013d08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013d0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013d10:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013d12:	2300      	movs	r3, #0
}
 8013d14:	4618      	mov	r0, r3
 8013d16:	3714      	adds	r7, #20
 8013d18:	46bd      	mov	sp, r7
 8013d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d1e:	4770      	bx	lr

08013d20 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013d20:	b480      	push	{r7}
 8013d22:	b085      	sub	sp, #20
 8013d24:	af00      	add	r7, sp, #0
 8013d26:	6078      	str	r0, [r7, #4]
 8013d28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013d2e:	683b      	ldr	r3, [r7, #0]
 8013d30:	781b      	ldrb	r3, [r3, #0]
 8013d32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013d34:	683b      	ldr	r3, [r7, #0]
 8013d36:	785b      	ldrb	r3, [r3, #1]
 8013d38:	2b01      	cmp	r3, #1
 8013d3a:	d128      	bne.n	8013d8e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013d3c:	68bb      	ldr	r3, [r7, #8]
 8013d3e:	015a      	lsls	r2, r3, #5
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	4413      	add	r3, r2
 8013d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	68ba      	ldr	r2, [r7, #8]
 8013d4c:	0151      	lsls	r1, r2, #5
 8013d4e:	68fa      	ldr	r2, [r7, #12]
 8013d50:	440a      	add	r2, r1
 8013d52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013d5a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013d5c:	683b      	ldr	r3, [r7, #0]
 8013d5e:	791b      	ldrb	r3, [r3, #4]
 8013d60:	2b03      	cmp	r3, #3
 8013d62:	d003      	beq.n	8013d6c <USB_EPClearStall+0x4c>
 8013d64:	683b      	ldr	r3, [r7, #0]
 8013d66:	791b      	ldrb	r3, [r3, #4]
 8013d68:	2b02      	cmp	r3, #2
 8013d6a:	d138      	bne.n	8013dde <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013d6c:	68bb      	ldr	r3, [r7, #8]
 8013d6e:	015a      	lsls	r2, r3, #5
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	4413      	add	r3, r2
 8013d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	68ba      	ldr	r2, [r7, #8]
 8013d7c:	0151      	lsls	r1, r2, #5
 8013d7e:	68fa      	ldr	r2, [r7, #12]
 8013d80:	440a      	add	r2, r1
 8013d82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013d8a:	6013      	str	r3, [r2, #0]
 8013d8c:	e027      	b.n	8013dde <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013d8e:	68bb      	ldr	r3, [r7, #8]
 8013d90:	015a      	lsls	r2, r3, #5
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	4413      	add	r3, r2
 8013d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	68ba      	ldr	r2, [r7, #8]
 8013d9e:	0151      	lsls	r1, r2, #5
 8013da0:	68fa      	ldr	r2, [r7, #12]
 8013da2:	440a      	add	r2, r1
 8013da4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013da8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013dac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013dae:	683b      	ldr	r3, [r7, #0]
 8013db0:	791b      	ldrb	r3, [r3, #4]
 8013db2:	2b03      	cmp	r3, #3
 8013db4:	d003      	beq.n	8013dbe <USB_EPClearStall+0x9e>
 8013db6:	683b      	ldr	r3, [r7, #0]
 8013db8:	791b      	ldrb	r3, [r3, #4]
 8013dba:	2b02      	cmp	r3, #2
 8013dbc:	d10f      	bne.n	8013dde <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013dbe:	68bb      	ldr	r3, [r7, #8]
 8013dc0:	015a      	lsls	r2, r3, #5
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	4413      	add	r3, r2
 8013dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	68ba      	ldr	r2, [r7, #8]
 8013dce:	0151      	lsls	r1, r2, #5
 8013dd0:	68fa      	ldr	r2, [r7, #12]
 8013dd2:	440a      	add	r2, r1
 8013dd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013ddc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8013dde:	2300      	movs	r3, #0
}
 8013de0:	4618      	mov	r0, r3
 8013de2:	3714      	adds	r7, #20
 8013de4:	46bd      	mov	sp, r7
 8013de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dea:	4770      	bx	lr

08013dec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8013dec:	b480      	push	{r7}
 8013dee:	b085      	sub	sp, #20
 8013df0:	af00      	add	r7, sp, #0
 8013df2:	6078      	str	r0, [r7, #4]
 8013df4:	460b      	mov	r3, r1
 8013df6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	68fa      	ldr	r2, [r7, #12]
 8013e06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013e0a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8013e0e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e16:	681a      	ldr	r2, [r3, #0]
 8013e18:	78fb      	ldrb	r3, [r7, #3]
 8013e1a:	011b      	lsls	r3, r3, #4
 8013e1c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8013e20:	68f9      	ldr	r1, [r7, #12]
 8013e22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013e26:	4313      	orrs	r3, r2
 8013e28:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8013e2a:	2300      	movs	r3, #0
}
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	3714      	adds	r7, #20
 8013e30:	46bd      	mov	sp, r7
 8013e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e36:	4770      	bx	lr

08013e38 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013e38:	b480      	push	{r7}
 8013e3a:	b085      	sub	sp, #20
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	68fa      	ldr	r2, [r7, #12]
 8013e4e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013e52:	f023 0303 	bic.w	r3, r3, #3
 8013e56:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e5e:	685b      	ldr	r3, [r3, #4]
 8013e60:	68fa      	ldr	r2, [r7, #12]
 8013e62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013e66:	f023 0302 	bic.w	r3, r3, #2
 8013e6a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013e6c:	2300      	movs	r3, #0
}
 8013e6e:	4618      	mov	r0, r3
 8013e70:	3714      	adds	r7, #20
 8013e72:	46bd      	mov	sp, r7
 8013e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e78:	4770      	bx	lr

08013e7a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013e7a:	b480      	push	{r7}
 8013e7c:	b085      	sub	sp, #20
 8013e7e:	af00      	add	r7, sp, #0
 8013e80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	68fa      	ldr	r2, [r7, #12]
 8013e90:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013e94:	f023 0303 	bic.w	r3, r3, #3
 8013e98:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ea0:	685b      	ldr	r3, [r3, #4]
 8013ea2:	68fa      	ldr	r2, [r7, #12]
 8013ea4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013ea8:	f043 0302 	orr.w	r3, r3, #2
 8013eac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013eae:	2300      	movs	r3, #0
}
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	3714      	adds	r7, #20
 8013eb4:	46bd      	mov	sp, r7
 8013eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eba:	4770      	bx	lr

08013ebc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013ebc:	b480      	push	{r7}
 8013ebe:	b085      	sub	sp, #20
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	695b      	ldr	r3, [r3, #20]
 8013ec8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	699b      	ldr	r3, [r3, #24]
 8013ece:	68fa      	ldr	r2, [r7, #12]
 8013ed0:	4013      	ands	r3, r2
 8013ed2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013ed4:	68fb      	ldr	r3, [r7, #12]
}
 8013ed6:	4618      	mov	r0, r3
 8013ed8:	3714      	adds	r7, #20
 8013eda:	46bd      	mov	sp, r7
 8013edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ee0:	4770      	bx	lr

08013ee2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013ee2:	b480      	push	{r7}
 8013ee4:	b085      	sub	sp, #20
 8013ee6:	af00      	add	r7, sp, #0
 8013ee8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ef4:	699b      	ldr	r3, [r3, #24]
 8013ef6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013efe:	69db      	ldr	r3, [r3, #28]
 8013f00:	68ba      	ldr	r2, [r7, #8]
 8013f02:	4013      	ands	r3, r2
 8013f04:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8013f06:	68bb      	ldr	r3, [r7, #8]
 8013f08:	0c1b      	lsrs	r3, r3, #16
}
 8013f0a:	4618      	mov	r0, r3
 8013f0c:	3714      	adds	r7, #20
 8013f0e:	46bd      	mov	sp, r7
 8013f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f14:	4770      	bx	lr

08013f16 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013f16:	b480      	push	{r7}
 8013f18:	b085      	sub	sp, #20
 8013f1a:	af00      	add	r7, sp, #0
 8013f1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f28:	699b      	ldr	r3, [r3, #24]
 8013f2a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f32:	69db      	ldr	r3, [r3, #28]
 8013f34:	68ba      	ldr	r2, [r7, #8]
 8013f36:	4013      	ands	r3, r2
 8013f38:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8013f3a:	68bb      	ldr	r3, [r7, #8]
 8013f3c:	b29b      	uxth	r3, r3
}
 8013f3e:	4618      	mov	r0, r3
 8013f40:	3714      	adds	r7, #20
 8013f42:	46bd      	mov	sp, r7
 8013f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f48:	4770      	bx	lr

08013f4a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013f4a:	b480      	push	{r7}
 8013f4c:	b085      	sub	sp, #20
 8013f4e:	af00      	add	r7, sp, #0
 8013f50:	6078      	str	r0, [r7, #4]
 8013f52:	460b      	mov	r3, r1
 8013f54:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013f5a:	78fb      	ldrb	r3, [r7, #3]
 8013f5c:	015a      	lsls	r2, r3, #5
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	4413      	add	r3, r2
 8013f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f66:	689b      	ldr	r3, [r3, #8]
 8013f68:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f70:	695b      	ldr	r3, [r3, #20]
 8013f72:	68ba      	ldr	r2, [r7, #8]
 8013f74:	4013      	ands	r3, r2
 8013f76:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013f78:	68bb      	ldr	r3, [r7, #8]
}
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	3714      	adds	r7, #20
 8013f7e:	46bd      	mov	sp, r7
 8013f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f84:	4770      	bx	lr

08013f86 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013f86:	b480      	push	{r7}
 8013f88:	b087      	sub	sp, #28
 8013f8a:	af00      	add	r7, sp, #0
 8013f8c:	6078      	str	r0, [r7, #4]
 8013f8e:	460b      	mov	r3, r1
 8013f90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8013f96:	697b      	ldr	r3, [r7, #20]
 8013f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f9c:	691b      	ldr	r3, [r3, #16]
 8013f9e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013fa0:	697b      	ldr	r3, [r7, #20]
 8013fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013fa8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013faa:	78fb      	ldrb	r3, [r7, #3]
 8013fac:	f003 030f 	and.w	r3, r3, #15
 8013fb0:	68fa      	ldr	r2, [r7, #12]
 8013fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8013fb6:	01db      	lsls	r3, r3, #7
 8013fb8:	b2db      	uxtb	r3, r3
 8013fba:	693a      	ldr	r2, [r7, #16]
 8013fbc:	4313      	orrs	r3, r2
 8013fbe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013fc0:	78fb      	ldrb	r3, [r7, #3]
 8013fc2:	015a      	lsls	r2, r3, #5
 8013fc4:	697b      	ldr	r3, [r7, #20]
 8013fc6:	4413      	add	r3, r2
 8013fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fcc:	689b      	ldr	r3, [r3, #8]
 8013fce:	693a      	ldr	r2, [r7, #16]
 8013fd0:	4013      	ands	r3, r2
 8013fd2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013fd4:	68bb      	ldr	r3, [r7, #8]
}
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	371c      	adds	r7, #28
 8013fda:	46bd      	mov	sp, r7
 8013fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fe0:	4770      	bx	lr

08013fe2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013fe2:	b480      	push	{r7}
 8013fe4:	b083      	sub	sp, #12
 8013fe6:	af00      	add	r7, sp, #0
 8013fe8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	695b      	ldr	r3, [r3, #20]
 8013fee:	f003 0301 	and.w	r3, r3, #1
}
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	370c      	adds	r7, #12
 8013ff6:	46bd      	mov	sp, r7
 8013ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ffc:	4770      	bx	lr
	...

08014000 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8014000:	b480      	push	{r7}
 8014002:	b085      	sub	sp, #20
 8014004:	af00      	add	r7, sp, #0
 8014006:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014012:	681a      	ldr	r2, [r3, #0]
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801401a:	4619      	mov	r1, r3
 801401c:	4b09      	ldr	r3, [pc, #36]	; (8014044 <USB_ActivateSetup+0x44>)
 801401e:	4013      	ands	r3, r2
 8014020:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014028:	685b      	ldr	r3, [r3, #4]
 801402a:	68fa      	ldr	r2, [r7, #12]
 801402c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014034:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014036:	2300      	movs	r3, #0
}
 8014038:	4618      	mov	r0, r3
 801403a:	3714      	adds	r7, #20
 801403c:	46bd      	mov	sp, r7
 801403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014042:	4770      	bx	lr
 8014044:	fffff800 	.word	0xfffff800

08014048 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8014048:	b480      	push	{r7}
 801404a:	b087      	sub	sp, #28
 801404c:	af00      	add	r7, sp, #0
 801404e:	60f8      	str	r0, [r7, #12]
 8014050:	460b      	mov	r3, r1
 8014052:	607a      	str	r2, [r7, #4]
 8014054:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014056:	68fb      	ldr	r3, [r7, #12]
 8014058:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	333c      	adds	r3, #60	; 0x3c
 801405e:	3304      	adds	r3, #4
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8014064:	693b      	ldr	r3, [r7, #16]
 8014066:	4a26      	ldr	r2, [pc, #152]	; (8014100 <USB_EP0_OutStart+0xb8>)
 8014068:	4293      	cmp	r3, r2
 801406a:	d90a      	bls.n	8014082 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801406c:	697b      	ldr	r3, [r7, #20]
 801406e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014078:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801407c:	d101      	bne.n	8014082 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801407e:	2300      	movs	r3, #0
 8014080:	e037      	b.n	80140f2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8014082:	697b      	ldr	r3, [r7, #20]
 8014084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014088:	461a      	mov	r2, r3
 801408a:	2300      	movs	r3, #0
 801408c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801408e:	697b      	ldr	r3, [r7, #20]
 8014090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014094:	691b      	ldr	r3, [r3, #16]
 8014096:	697a      	ldr	r2, [r7, #20]
 8014098:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801409c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80140a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80140a2:	697b      	ldr	r3, [r7, #20]
 80140a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140a8:	691b      	ldr	r3, [r3, #16]
 80140aa:	697a      	ldr	r2, [r7, #20]
 80140ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80140b0:	f043 0318 	orr.w	r3, r3, #24
 80140b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80140b6:	697b      	ldr	r3, [r7, #20]
 80140b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140bc:	691b      	ldr	r3, [r3, #16]
 80140be:	697a      	ldr	r2, [r7, #20]
 80140c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80140c4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80140c8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80140ca:	7afb      	ldrb	r3, [r7, #11]
 80140cc:	2b01      	cmp	r3, #1
 80140ce:	d10f      	bne.n	80140f0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80140d0:	697b      	ldr	r3, [r7, #20]
 80140d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140d6:	461a      	mov	r2, r3
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80140dc:	697b      	ldr	r3, [r7, #20]
 80140de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	697a      	ldr	r2, [r7, #20]
 80140e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80140ea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80140ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80140f0:	2300      	movs	r3, #0
}
 80140f2:	4618      	mov	r0, r3
 80140f4:	371c      	adds	r7, #28
 80140f6:	46bd      	mov	sp, r7
 80140f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140fc:	4770      	bx	lr
 80140fe:	bf00      	nop
 8014100:	4f54300a 	.word	0x4f54300a

08014104 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8014104:	b480      	push	{r7}
 8014106:	b085      	sub	sp, #20
 8014108:	af00      	add	r7, sp, #0
 801410a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801410c:	2300      	movs	r3, #0
 801410e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	3301      	adds	r3, #1
 8014114:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	4a13      	ldr	r2, [pc, #76]	; (8014168 <USB_CoreReset+0x64>)
 801411a:	4293      	cmp	r3, r2
 801411c:	d901      	bls.n	8014122 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801411e:	2303      	movs	r3, #3
 8014120:	e01b      	b.n	801415a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	691b      	ldr	r3, [r3, #16]
 8014126:	2b00      	cmp	r3, #0
 8014128:	daf2      	bge.n	8014110 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801412a:	2300      	movs	r3, #0
 801412c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	691b      	ldr	r3, [r3, #16]
 8014132:	f043 0201 	orr.w	r2, r3, #1
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	3301      	adds	r3, #1
 801413e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	4a09      	ldr	r2, [pc, #36]	; (8014168 <USB_CoreReset+0x64>)
 8014144:	4293      	cmp	r3, r2
 8014146:	d901      	bls.n	801414c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014148:	2303      	movs	r3, #3
 801414a:	e006      	b.n	801415a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	691b      	ldr	r3, [r3, #16]
 8014150:	f003 0301 	and.w	r3, r3, #1
 8014154:	2b01      	cmp	r3, #1
 8014156:	d0f0      	beq.n	801413a <USB_CoreReset+0x36>

  return HAL_OK;
 8014158:	2300      	movs	r3, #0
}
 801415a:	4618      	mov	r0, r3
 801415c:	3714      	adds	r7, #20
 801415e:	46bd      	mov	sp, r7
 8014160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014164:	4770      	bx	lr
 8014166:	bf00      	nop
 8014168:	00030d40 	.word	0x00030d40

0801416c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801416c:	b580      	push	{r7, lr}
 801416e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8014170:	4904      	ldr	r1, [pc, #16]	; (8014184 <MX_FATFS_Init+0x18>)
 8014172:	4805      	ldr	r0, [pc, #20]	; (8014188 <MX_FATFS_Init+0x1c>)
 8014174:	f002 fa56 	bl	8016624 <FATFS_LinkDriver>
 8014178:	4603      	mov	r3, r0
 801417a:	461a      	mov	r2, r3
 801417c:	4b03      	ldr	r3, [pc, #12]	; (801418c <MX_FATFS_Init+0x20>)
 801417e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8014180:	bf00      	nop
 8014182:	bd80      	pop	{r7, pc}
 8014184:	240015d8 	.word	0x240015d8
 8014188:	080185e0 	.word	0x080185e0
 801418c:	240015d4 	.word	0x240015d4

08014190 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8014190:	b580      	push	{r7, lr}
 8014192:	b082      	sub	sp, #8
 8014194:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8014196:	2300      	movs	r3, #0
 8014198:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801419a:	f000 f885 	bl	80142a8 <BSP_SD_IsDetected>
 801419e:	4603      	mov	r3, r0
 80141a0:	2b01      	cmp	r3, #1
 80141a2:	d001      	beq.n	80141a8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80141a4:	2302      	movs	r3, #2
 80141a6:	e012      	b.n	80141ce <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 80141a8:	480b      	ldr	r0, [pc, #44]	; (80141d8 <BSP_SD_Init+0x48>)
 80141aa:	f7f8 ff41 	bl	800d030 <HAL_SD_Init>
 80141ae:	4603      	mov	r3, r0
 80141b0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80141b2:	79fb      	ldrb	r3, [r7, #7]
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d109      	bne.n	80141cc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80141b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80141bc:	4806      	ldr	r0, [pc, #24]	; (80141d8 <BSP_SD_Init+0x48>)
 80141be:	f7f9 fdf7 	bl	800ddb0 <HAL_SD_ConfigWideBusOperation>
 80141c2:	4603      	mov	r3, r0
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d001      	beq.n	80141cc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80141c8:	2301      	movs	r3, #1
 80141ca:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80141cc:	79fb      	ldrb	r3, [r7, #7]
}
 80141ce:	4618      	mov	r0, r3
 80141d0:	3708      	adds	r7, #8
 80141d2:	46bd      	mov	sp, r7
 80141d4:	bd80      	pop	{r7, pc}
 80141d6:	bf00      	nop
 80141d8:	24000ebc 	.word	0x24000ebc

080141dc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80141dc:	b580      	push	{r7, lr}
 80141de:	b086      	sub	sp, #24
 80141e0:	af00      	add	r7, sp, #0
 80141e2:	60f8      	str	r0, [r7, #12]
 80141e4:	60b9      	str	r1, [r7, #8]
 80141e6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80141e8:	2300      	movs	r3, #0
 80141ea:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	68ba      	ldr	r2, [r7, #8]
 80141f0:	68f9      	ldr	r1, [r7, #12]
 80141f2:	4806      	ldr	r0, [pc, #24]	; (801420c <BSP_SD_ReadBlocks_DMA+0x30>)
 80141f4:	f7f9 f83c 	bl	800d270 <HAL_SD_ReadBlocks_DMA>
 80141f8:	4603      	mov	r3, r0
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d001      	beq.n	8014202 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80141fe:	2301      	movs	r3, #1
 8014200:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014202:	7dfb      	ldrb	r3, [r7, #23]
}
 8014204:	4618      	mov	r0, r3
 8014206:	3718      	adds	r7, #24
 8014208:	46bd      	mov	sp, r7
 801420a:	bd80      	pop	{r7, pc}
 801420c:	24000ebc 	.word	0x24000ebc

08014210 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8014210:	b580      	push	{r7, lr}
 8014212:	b086      	sub	sp, #24
 8014214:	af00      	add	r7, sp, #0
 8014216:	60f8      	str	r0, [r7, #12]
 8014218:	60b9      	str	r1, [r7, #8]
 801421a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801421c:	2300      	movs	r3, #0
 801421e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	68ba      	ldr	r2, [r7, #8]
 8014224:	68f9      	ldr	r1, [r7, #12]
 8014226:	4806      	ldr	r0, [pc, #24]	; (8014240 <BSP_SD_WriteBlocks_DMA+0x30>)
 8014228:	f7f9 f8ca 	bl	800d3c0 <HAL_SD_WriteBlocks_DMA>
 801422c:	4603      	mov	r3, r0
 801422e:	2b00      	cmp	r3, #0
 8014230:	d001      	beq.n	8014236 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014232:	2301      	movs	r3, #1
 8014234:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014236:	7dfb      	ldrb	r3, [r7, #23]
}
 8014238:	4618      	mov	r0, r3
 801423a:	3718      	adds	r7, #24
 801423c:	46bd      	mov	sp, r7
 801423e:	bd80      	pop	{r7, pc}
 8014240:	24000ebc 	.word	0x24000ebc

08014244 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8014244:	b580      	push	{r7, lr}
 8014246:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8014248:	4805      	ldr	r0, [pc, #20]	; (8014260 <BSP_SD_GetCardState+0x1c>)
 801424a:	f7f9 fec3 	bl	800dfd4 <HAL_SD_GetCardState>
 801424e:	4603      	mov	r3, r0
 8014250:	2b04      	cmp	r3, #4
 8014252:	bf14      	ite	ne
 8014254:	2301      	movne	r3, #1
 8014256:	2300      	moveq	r3, #0
 8014258:	b2db      	uxtb	r3, r3
}
 801425a:	4618      	mov	r0, r3
 801425c:	bd80      	pop	{r7, pc}
 801425e:	bf00      	nop
 8014260:	24000ebc 	.word	0x24000ebc

08014264 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8014264:	b580      	push	{r7, lr}
 8014266:	b082      	sub	sp, #8
 8014268:	af00      	add	r7, sp, #0
 801426a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 801426c:	6879      	ldr	r1, [r7, #4]
 801426e:	4803      	ldr	r0, [pc, #12]	; (801427c <BSP_SD_GetCardInfo+0x18>)
 8014270:	f7f9 fd72 	bl	800dd58 <HAL_SD_GetCardInfo>
}
 8014274:	bf00      	nop
 8014276:	3708      	adds	r7, #8
 8014278:	46bd      	mov	sp, r7
 801427a:	bd80      	pop	{r7, pc}
 801427c:	24000ebc 	.word	0x24000ebc

08014280 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8014280:	b580      	push	{r7, lr}
 8014282:	b082      	sub	sp, #8
 8014284:	af00      	add	r7, sp, #0
 8014286:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8014288:	f000 f9a0 	bl	80145cc <BSP_SD_WriteCpltCallback>
}
 801428c:	bf00      	nop
 801428e:	3708      	adds	r7, #8
 8014290:	46bd      	mov	sp, r7
 8014292:	bd80      	pop	{r7, pc}

08014294 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8014294:	b580      	push	{r7, lr}
 8014296:	b082      	sub	sp, #8
 8014298:	af00      	add	r7, sp, #0
 801429a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 801429c:	f000 f9a2 	bl	80145e4 <BSP_SD_ReadCpltCallback>
}
 80142a0:	bf00      	nop
 80142a2:	3708      	adds	r7, #8
 80142a4:	46bd      	mov	sp, r7
 80142a6:	bd80      	pop	{r7, pc}

080142a8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80142a8:	b580      	push	{r7, lr}
 80142aa:	b082      	sub	sp, #8
 80142ac:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80142ae:	2301      	movs	r3, #1
 80142b0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80142b2:	f000 f80b 	bl	80142cc <BSP_PlatformIsDetected>
 80142b6:	4603      	mov	r3, r0
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d101      	bne.n	80142c0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80142bc:	2300      	movs	r3, #0
 80142be:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80142c0:	79fb      	ldrb	r3, [r7, #7]
 80142c2:	b2db      	uxtb	r3, r3
}
 80142c4:	4618      	mov	r0, r3
 80142c6:	3708      	adds	r7, #8
 80142c8:	46bd      	mov	sp, r7
 80142ca:	bd80      	pop	{r7, pc}

080142cc <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80142cc:	b580      	push	{r7, lr}
 80142ce:	b082      	sub	sp, #8
 80142d0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80142d2:	2301      	movs	r3, #1
 80142d4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80142d6:	2104      	movs	r1, #4
 80142d8:	4806      	ldr	r0, [pc, #24]	; (80142f4 <BSP_PlatformIsDetected+0x28>)
 80142da:	f7f3 fe7d 	bl	8007fd8 <HAL_GPIO_ReadPin>
 80142de:	4603      	mov	r3, r0
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d001      	beq.n	80142e8 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80142e4:	2300      	movs	r3, #0
 80142e6:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80142e8:	79fb      	ldrb	r3, [r7, #7]
}
 80142ea:	4618      	mov	r0, r3
 80142ec:	3708      	adds	r7, #8
 80142ee:	46bd      	mov	sp, r7
 80142f0:	bd80      	pop	{r7, pc}
 80142f2:	bf00      	nop
 80142f4:	58020400 	.word	0x58020400

080142f8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80142f8:	b580      	push	{r7, lr}
 80142fa:	b084      	sub	sp, #16
 80142fc:	af00      	add	r7, sp, #0
 80142fe:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8014300:	f7ef fbc4 	bl	8003a8c <HAL_GetTick>
 8014304:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8014306:	e006      	b.n	8014316 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014308:	f7ff ff9c 	bl	8014244 <BSP_SD_GetCardState>
 801430c:	4603      	mov	r3, r0
 801430e:	2b00      	cmp	r3, #0
 8014310:	d101      	bne.n	8014316 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8014312:	2300      	movs	r3, #0
 8014314:	e009      	b.n	801432a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8014316:	f7ef fbb9 	bl	8003a8c <HAL_GetTick>
 801431a:	4602      	mov	r2, r0
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	1ad3      	subs	r3, r2, r3
 8014320:	687a      	ldr	r2, [r7, #4]
 8014322:	429a      	cmp	r2, r3
 8014324:	d8f0      	bhi.n	8014308 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8014326:	f04f 33ff 	mov.w	r3, #4294967295
}
 801432a:	4618      	mov	r0, r3
 801432c:	3710      	adds	r7, #16
 801432e:	46bd      	mov	sp, r7
 8014330:	bd80      	pop	{r7, pc}
	...

08014334 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8014334:	b580      	push	{r7, lr}
 8014336:	b082      	sub	sp, #8
 8014338:	af00      	add	r7, sp, #0
 801433a:	4603      	mov	r3, r0
 801433c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801433e:	4b0b      	ldr	r3, [pc, #44]	; (801436c <SD_CheckStatus+0x38>)
 8014340:	2201      	movs	r2, #1
 8014342:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8014344:	f7ff ff7e 	bl	8014244 <BSP_SD_GetCardState>
 8014348:	4603      	mov	r3, r0
 801434a:	2b00      	cmp	r3, #0
 801434c:	d107      	bne.n	801435e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801434e:	4b07      	ldr	r3, [pc, #28]	; (801436c <SD_CheckStatus+0x38>)
 8014350:	781b      	ldrb	r3, [r3, #0]
 8014352:	b2db      	uxtb	r3, r3
 8014354:	f023 0301 	bic.w	r3, r3, #1
 8014358:	b2da      	uxtb	r2, r3
 801435a:	4b04      	ldr	r3, [pc, #16]	; (801436c <SD_CheckStatus+0x38>)
 801435c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801435e:	4b03      	ldr	r3, [pc, #12]	; (801436c <SD_CheckStatus+0x38>)
 8014360:	781b      	ldrb	r3, [r3, #0]
 8014362:	b2db      	uxtb	r3, r3
}
 8014364:	4618      	mov	r0, r3
 8014366:	3708      	adds	r7, #8
 8014368:	46bd      	mov	sp, r7
 801436a:	bd80      	pop	{r7, pc}
 801436c:	2400000d 	.word	0x2400000d

08014370 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8014370:	b580      	push	{r7, lr}
 8014372:	b082      	sub	sp, #8
 8014374:	af00      	add	r7, sp, #0
 8014376:	4603      	mov	r3, r0
 8014378:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801437a:	f7ff ff09 	bl	8014190 <BSP_SD_Init>
 801437e:	4603      	mov	r3, r0
 8014380:	2b00      	cmp	r3, #0
 8014382:	d107      	bne.n	8014394 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8014384:	79fb      	ldrb	r3, [r7, #7]
 8014386:	4618      	mov	r0, r3
 8014388:	f7ff ffd4 	bl	8014334 <SD_CheckStatus>
 801438c:	4603      	mov	r3, r0
 801438e:	461a      	mov	r2, r3
 8014390:	4b04      	ldr	r3, [pc, #16]	; (80143a4 <SD_initialize+0x34>)
 8014392:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8014394:	4b03      	ldr	r3, [pc, #12]	; (80143a4 <SD_initialize+0x34>)
 8014396:	781b      	ldrb	r3, [r3, #0]
 8014398:	b2db      	uxtb	r3, r3
}
 801439a:	4618      	mov	r0, r3
 801439c:	3708      	adds	r7, #8
 801439e:	46bd      	mov	sp, r7
 80143a0:	bd80      	pop	{r7, pc}
 80143a2:	bf00      	nop
 80143a4:	2400000d 	.word	0x2400000d

080143a8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80143a8:	b580      	push	{r7, lr}
 80143aa:	b082      	sub	sp, #8
 80143ac:	af00      	add	r7, sp, #0
 80143ae:	4603      	mov	r3, r0
 80143b0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80143b2:	79fb      	ldrb	r3, [r7, #7]
 80143b4:	4618      	mov	r0, r3
 80143b6:	f7ff ffbd 	bl	8014334 <SD_CheckStatus>
 80143ba:	4603      	mov	r3, r0
}
 80143bc:	4618      	mov	r0, r3
 80143be:	3708      	adds	r7, #8
 80143c0:	46bd      	mov	sp, r7
 80143c2:	bd80      	pop	{r7, pc}

080143c4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80143c4:	b580      	push	{r7, lr}
 80143c6:	b086      	sub	sp, #24
 80143c8:	af00      	add	r7, sp, #0
 80143ca:	60b9      	str	r1, [r7, #8]
 80143cc:	607a      	str	r2, [r7, #4]
 80143ce:	603b      	str	r3, [r7, #0]
 80143d0:	4603      	mov	r3, r0
 80143d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80143d4:	2301      	movs	r3, #1
 80143d6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80143d8:	f247 5030 	movw	r0, #30000	; 0x7530
 80143dc:	f7ff ff8c 	bl	80142f8 <SD_CheckStatusWithTimeout>
 80143e0:	4603      	mov	r3, r0
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	da01      	bge.n	80143ea <SD_read+0x26>
  {
    return res;
 80143e6:	7dfb      	ldrb	r3, [r7, #23]
 80143e8:	e03b      	b.n	8014462 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80143ea:	683a      	ldr	r2, [r7, #0]
 80143ec:	6879      	ldr	r1, [r7, #4]
 80143ee:	68b8      	ldr	r0, [r7, #8]
 80143f0:	f7ff fef4 	bl	80141dc <BSP_SD_ReadBlocks_DMA>
 80143f4:	4603      	mov	r3, r0
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d132      	bne.n	8014460 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80143fa:	4b1c      	ldr	r3, [pc, #112]	; (801446c <SD_read+0xa8>)
 80143fc:	2200      	movs	r2, #0
 80143fe:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8014400:	f7ef fb44 	bl	8003a8c <HAL_GetTick>
 8014404:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8014406:	bf00      	nop
 8014408:	4b18      	ldr	r3, [pc, #96]	; (801446c <SD_read+0xa8>)
 801440a:	681b      	ldr	r3, [r3, #0]
 801440c:	2b00      	cmp	r3, #0
 801440e:	d108      	bne.n	8014422 <SD_read+0x5e>
 8014410:	f7ef fb3c 	bl	8003a8c <HAL_GetTick>
 8014414:	4602      	mov	r2, r0
 8014416:	693b      	ldr	r3, [r7, #16]
 8014418:	1ad3      	subs	r3, r2, r3
 801441a:	f247 522f 	movw	r2, #29999	; 0x752f
 801441e:	4293      	cmp	r3, r2
 8014420:	d9f2      	bls.n	8014408 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8014422:	4b12      	ldr	r3, [pc, #72]	; (801446c <SD_read+0xa8>)
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	2b00      	cmp	r3, #0
 8014428:	d102      	bne.n	8014430 <SD_read+0x6c>
      {
        res = RES_ERROR;
 801442a:	2301      	movs	r3, #1
 801442c:	75fb      	strb	r3, [r7, #23]
 801442e:	e017      	b.n	8014460 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8014430:	4b0e      	ldr	r3, [pc, #56]	; (801446c <SD_read+0xa8>)
 8014432:	2200      	movs	r2, #0
 8014434:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014436:	f7ef fb29 	bl	8003a8c <HAL_GetTick>
 801443a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801443c:	e007      	b.n	801444e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801443e:	f7ff ff01 	bl	8014244 <BSP_SD_GetCardState>
 8014442:	4603      	mov	r3, r0
 8014444:	2b00      	cmp	r3, #0
 8014446:	d102      	bne.n	801444e <SD_read+0x8a>
          {
            res = RES_OK;
 8014448:	2300      	movs	r3, #0
 801444a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 801444c:	e008      	b.n	8014460 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801444e:	f7ef fb1d 	bl	8003a8c <HAL_GetTick>
 8014452:	4602      	mov	r2, r0
 8014454:	693b      	ldr	r3, [r7, #16]
 8014456:	1ad3      	subs	r3, r2, r3
 8014458:	f247 522f 	movw	r2, #29999	; 0x752f
 801445c:	4293      	cmp	r3, r2
 801445e:	d9ee      	bls.n	801443e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8014460:	7dfb      	ldrb	r3, [r7, #23]
}
 8014462:	4618      	mov	r0, r3
 8014464:	3718      	adds	r7, #24
 8014466:	46bd      	mov	sp, r7
 8014468:	bd80      	pop	{r7, pc}
 801446a:	bf00      	nop
 801446c:	240015e0 	.word	0x240015e0

08014470 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8014470:	b580      	push	{r7, lr}
 8014472:	b086      	sub	sp, #24
 8014474:	af00      	add	r7, sp, #0
 8014476:	60b9      	str	r1, [r7, #8]
 8014478:	607a      	str	r2, [r7, #4]
 801447a:	603b      	str	r3, [r7, #0]
 801447c:	4603      	mov	r3, r0
 801447e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014480:	2301      	movs	r3, #1
 8014482:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8014484:	4b24      	ldr	r3, [pc, #144]	; (8014518 <SD_write+0xa8>)
 8014486:	2200      	movs	r2, #0
 8014488:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801448a:	f247 5030 	movw	r0, #30000	; 0x7530
 801448e:	f7ff ff33 	bl	80142f8 <SD_CheckStatusWithTimeout>
 8014492:	4603      	mov	r3, r0
 8014494:	2b00      	cmp	r3, #0
 8014496:	da01      	bge.n	801449c <SD_write+0x2c>
  {
    return res;
 8014498:	7dfb      	ldrb	r3, [r7, #23]
 801449a:	e038      	b.n	801450e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801449c:	683a      	ldr	r2, [r7, #0]
 801449e:	6879      	ldr	r1, [r7, #4]
 80144a0:	68b8      	ldr	r0, [r7, #8]
 80144a2:	f7ff feb5 	bl	8014210 <BSP_SD_WriteBlocks_DMA>
 80144a6:	4603      	mov	r3, r0
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d12f      	bne.n	801450c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80144ac:	f7ef faee 	bl	8003a8c <HAL_GetTick>
 80144b0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80144b2:	bf00      	nop
 80144b4:	4b18      	ldr	r3, [pc, #96]	; (8014518 <SD_write+0xa8>)
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d108      	bne.n	80144ce <SD_write+0x5e>
 80144bc:	f7ef fae6 	bl	8003a8c <HAL_GetTick>
 80144c0:	4602      	mov	r2, r0
 80144c2:	693b      	ldr	r3, [r7, #16]
 80144c4:	1ad3      	subs	r3, r2, r3
 80144c6:	f247 522f 	movw	r2, #29999	; 0x752f
 80144ca:	4293      	cmp	r3, r2
 80144cc:	d9f2      	bls.n	80144b4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80144ce:	4b12      	ldr	r3, [pc, #72]	; (8014518 <SD_write+0xa8>)
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d102      	bne.n	80144dc <SD_write+0x6c>
      {
        res = RES_ERROR;
 80144d6:	2301      	movs	r3, #1
 80144d8:	75fb      	strb	r3, [r7, #23]
 80144da:	e017      	b.n	801450c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80144dc:	4b0e      	ldr	r3, [pc, #56]	; (8014518 <SD_write+0xa8>)
 80144de:	2200      	movs	r2, #0
 80144e0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80144e2:	f7ef fad3 	bl	8003a8c <HAL_GetTick>
 80144e6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80144e8:	e007      	b.n	80144fa <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80144ea:	f7ff feab 	bl	8014244 <BSP_SD_GetCardState>
 80144ee:	4603      	mov	r3, r0
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d102      	bne.n	80144fa <SD_write+0x8a>
          {
            res = RES_OK;
 80144f4:	2300      	movs	r3, #0
 80144f6:	75fb      	strb	r3, [r7, #23]
            break;
 80144f8:	e008      	b.n	801450c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80144fa:	f7ef fac7 	bl	8003a8c <HAL_GetTick>
 80144fe:	4602      	mov	r2, r0
 8014500:	693b      	ldr	r3, [r7, #16]
 8014502:	1ad3      	subs	r3, r2, r3
 8014504:	f247 522f 	movw	r2, #29999	; 0x752f
 8014508:	4293      	cmp	r3, r2
 801450a:	d9ee      	bls.n	80144ea <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 801450c:	7dfb      	ldrb	r3, [r7, #23]
}
 801450e:	4618      	mov	r0, r3
 8014510:	3718      	adds	r7, #24
 8014512:	46bd      	mov	sp, r7
 8014514:	bd80      	pop	{r7, pc}
 8014516:	bf00      	nop
 8014518:	240015dc 	.word	0x240015dc

0801451c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801451c:	b580      	push	{r7, lr}
 801451e:	b08c      	sub	sp, #48	; 0x30
 8014520:	af00      	add	r7, sp, #0
 8014522:	4603      	mov	r3, r0
 8014524:	603a      	str	r2, [r7, #0]
 8014526:	71fb      	strb	r3, [r7, #7]
 8014528:	460b      	mov	r3, r1
 801452a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801452c:	2301      	movs	r3, #1
 801452e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8014532:	4b25      	ldr	r3, [pc, #148]	; (80145c8 <SD_ioctl+0xac>)
 8014534:	781b      	ldrb	r3, [r3, #0]
 8014536:	b2db      	uxtb	r3, r3
 8014538:	f003 0301 	and.w	r3, r3, #1
 801453c:	2b00      	cmp	r3, #0
 801453e:	d001      	beq.n	8014544 <SD_ioctl+0x28>
 8014540:	2303      	movs	r3, #3
 8014542:	e03c      	b.n	80145be <SD_ioctl+0xa2>

  switch (cmd)
 8014544:	79bb      	ldrb	r3, [r7, #6]
 8014546:	2b03      	cmp	r3, #3
 8014548:	d834      	bhi.n	80145b4 <SD_ioctl+0x98>
 801454a:	a201      	add	r2, pc, #4	; (adr r2, 8014550 <SD_ioctl+0x34>)
 801454c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014550:	08014561 	.word	0x08014561
 8014554:	08014569 	.word	0x08014569
 8014558:	08014581 	.word	0x08014581
 801455c:	0801459b 	.word	0x0801459b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8014560:	2300      	movs	r3, #0
 8014562:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014566:	e028      	b.n	80145ba <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8014568:	f107 0308 	add.w	r3, r7, #8
 801456c:	4618      	mov	r0, r3
 801456e:	f7ff fe79 	bl	8014264 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8014572:	6a3a      	ldr	r2, [r7, #32]
 8014574:	683b      	ldr	r3, [r7, #0]
 8014576:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014578:	2300      	movs	r3, #0
 801457a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801457e:	e01c      	b.n	80145ba <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014580:	f107 0308 	add.w	r3, r7, #8
 8014584:	4618      	mov	r0, r3
 8014586:	f7ff fe6d 	bl	8014264 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801458c:	b29a      	uxth	r2, r3
 801458e:	683b      	ldr	r3, [r7, #0]
 8014590:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8014592:	2300      	movs	r3, #0
 8014594:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014598:	e00f      	b.n	80145ba <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801459a:	f107 0308 	add.w	r3, r7, #8
 801459e:	4618      	mov	r0, r3
 80145a0:	f7ff fe60 	bl	8014264 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80145a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145a6:	0a5a      	lsrs	r2, r3, #9
 80145a8:	683b      	ldr	r3, [r7, #0]
 80145aa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80145ac:	2300      	movs	r3, #0
 80145ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80145b2:	e002      	b.n	80145ba <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80145b4:	2304      	movs	r3, #4
 80145b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80145ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80145be:	4618      	mov	r0, r3
 80145c0:	3730      	adds	r7, #48	; 0x30
 80145c2:	46bd      	mov	sp, r7
 80145c4:	bd80      	pop	{r7, pc}
 80145c6:	bf00      	nop
 80145c8:	2400000d 	.word	0x2400000d

080145cc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80145cc:	b480      	push	{r7}
 80145ce:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80145d0:	4b03      	ldr	r3, [pc, #12]	; (80145e0 <BSP_SD_WriteCpltCallback+0x14>)
 80145d2:	2201      	movs	r2, #1
 80145d4:	601a      	str	r2, [r3, #0]
}
 80145d6:	bf00      	nop
 80145d8:	46bd      	mov	sp, r7
 80145da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145de:	4770      	bx	lr
 80145e0:	240015dc 	.word	0x240015dc

080145e4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80145e4:	b480      	push	{r7}
 80145e6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80145e8:	4b03      	ldr	r3, [pc, #12]	; (80145f8 <BSP_SD_ReadCpltCallback+0x14>)
 80145ea:	2201      	movs	r2, #1
 80145ec:	601a      	str	r2, [r3, #0]
}
 80145ee:	bf00      	nop
 80145f0:	46bd      	mov	sp, r7
 80145f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145f6:	4770      	bx	lr
 80145f8:	240015e0 	.word	0x240015e0

080145fc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80145fc:	b580      	push	{r7, lr}
 80145fe:	b084      	sub	sp, #16
 8014600:	af00      	add	r7, sp, #0
 8014602:	6078      	str	r0, [r7, #4]
 8014604:	460b      	mov	r3, r1
 8014606:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014608:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801460c:	f002 fd00 	bl	8017010 <USBD_static_malloc>
 8014610:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	2b00      	cmp	r3, #0
 8014616:	d109      	bne.n	801462c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	32b0      	adds	r2, #176	; 0xb0
 8014622:	2100      	movs	r1, #0
 8014624:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8014628:	2302      	movs	r3, #2
 801462a:	e0d4      	b.n	80147d6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 801462c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8014630:	2100      	movs	r1, #0
 8014632:	68f8      	ldr	r0, [r7, #12]
 8014634:	f002 fd7e 	bl	8017134 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	32b0      	adds	r2, #176	; 0xb0
 8014642:	68f9      	ldr	r1, [r7, #12]
 8014644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	32b0      	adds	r2, #176	; 0xb0
 8014652:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	7c1b      	ldrb	r3, [r3, #16]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d138      	bne.n	80146d6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014664:	4b5e      	ldr	r3, [pc, #376]	; (80147e0 <USBD_CDC_Init+0x1e4>)
 8014666:	7819      	ldrb	r1, [r3, #0]
 8014668:	f44f 7300 	mov.w	r3, #512	; 0x200
 801466c:	2202      	movs	r2, #2
 801466e:	6878      	ldr	r0, [r7, #4]
 8014670:	f002 fbab 	bl	8016dca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014674:	4b5a      	ldr	r3, [pc, #360]	; (80147e0 <USBD_CDC_Init+0x1e4>)
 8014676:	781b      	ldrb	r3, [r3, #0]
 8014678:	f003 020f 	and.w	r2, r3, #15
 801467c:	6879      	ldr	r1, [r7, #4]
 801467e:	4613      	mov	r3, r2
 8014680:	009b      	lsls	r3, r3, #2
 8014682:	4413      	add	r3, r2
 8014684:	009b      	lsls	r3, r3, #2
 8014686:	440b      	add	r3, r1
 8014688:	3324      	adds	r3, #36	; 0x24
 801468a:	2201      	movs	r2, #1
 801468c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801468e:	4b55      	ldr	r3, [pc, #340]	; (80147e4 <USBD_CDC_Init+0x1e8>)
 8014690:	7819      	ldrb	r1, [r3, #0]
 8014692:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014696:	2202      	movs	r2, #2
 8014698:	6878      	ldr	r0, [r7, #4]
 801469a:	f002 fb96 	bl	8016dca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801469e:	4b51      	ldr	r3, [pc, #324]	; (80147e4 <USBD_CDC_Init+0x1e8>)
 80146a0:	781b      	ldrb	r3, [r3, #0]
 80146a2:	f003 020f 	and.w	r2, r3, #15
 80146a6:	6879      	ldr	r1, [r7, #4]
 80146a8:	4613      	mov	r3, r2
 80146aa:	009b      	lsls	r3, r3, #2
 80146ac:	4413      	add	r3, r2
 80146ae:	009b      	lsls	r3, r3, #2
 80146b0:	440b      	add	r3, r1
 80146b2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80146b6:	2201      	movs	r2, #1
 80146b8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80146ba:	4b4b      	ldr	r3, [pc, #300]	; (80147e8 <USBD_CDC_Init+0x1ec>)
 80146bc:	781b      	ldrb	r3, [r3, #0]
 80146be:	f003 020f 	and.w	r2, r3, #15
 80146c2:	6879      	ldr	r1, [r7, #4]
 80146c4:	4613      	mov	r3, r2
 80146c6:	009b      	lsls	r3, r3, #2
 80146c8:	4413      	add	r3, r2
 80146ca:	009b      	lsls	r3, r3, #2
 80146cc:	440b      	add	r3, r1
 80146ce:	3326      	adds	r3, #38	; 0x26
 80146d0:	2210      	movs	r2, #16
 80146d2:	801a      	strh	r2, [r3, #0]
 80146d4:	e035      	b.n	8014742 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80146d6:	4b42      	ldr	r3, [pc, #264]	; (80147e0 <USBD_CDC_Init+0x1e4>)
 80146d8:	7819      	ldrb	r1, [r3, #0]
 80146da:	2340      	movs	r3, #64	; 0x40
 80146dc:	2202      	movs	r2, #2
 80146de:	6878      	ldr	r0, [r7, #4]
 80146e0:	f002 fb73 	bl	8016dca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80146e4:	4b3e      	ldr	r3, [pc, #248]	; (80147e0 <USBD_CDC_Init+0x1e4>)
 80146e6:	781b      	ldrb	r3, [r3, #0]
 80146e8:	f003 020f 	and.w	r2, r3, #15
 80146ec:	6879      	ldr	r1, [r7, #4]
 80146ee:	4613      	mov	r3, r2
 80146f0:	009b      	lsls	r3, r3, #2
 80146f2:	4413      	add	r3, r2
 80146f4:	009b      	lsls	r3, r3, #2
 80146f6:	440b      	add	r3, r1
 80146f8:	3324      	adds	r3, #36	; 0x24
 80146fa:	2201      	movs	r2, #1
 80146fc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80146fe:	4b39      	ldr	r3, [pc, #228]	; (80147e4 <USBD_CDC_Init+0x1e8>)
 8014700:	7819      	ldrb	r1, [r3, #0]
 8014702:	2340      	movs	r3, #64	; 0x40
 8014704:	2202      	movs	r2, #2
 8014706:	6878      	ldr	r0, [r7, #4]
 8014708:	f002 fb5f 	bl	8016dca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801470c:	4b35      	ldr	r3, [pc, #212]	; (80147e4 <USBD_CDC_Init+0x1e8>)
 801470e:	781b      	ldrb	r3, [r3, #0]
 8014710:	f003 020f 	and.w	r2, r3, #15
 8014714:	6879      	ldr	r1, [r7, #4]
 8014716:	4613      	mov	r3, r2
 8014718:	009b      	lsls	r3, r3, #2
 801471a:	4413      	add	r3, r2
 801471c:	009b      	lsls	r3, r3, #2
 801471e:	440b      	add	r3, r1
 8014720:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014724:	2201      	movs	r2, #1
 8014726:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014728:	4b2f      	ldr	r3, [pc, #188]	; (80147e8 <USBD_CDC_Init+0x1ec>)
 801472a:	781b      	ldrb	r3, [r3, #0]
 801472c:	f003 020f 	and.w	r2, r3, #15
 8014730:	6879      	ldr	r1, [r7, #4]
 8014732:	4613      	mov	r3, r2
 8014734:	009b      	lsls	r3, r3, #2
 8014736:	4413      	add	r3, r2
 8014738:	009b      	lsls	r3, r3, #2
 801473a:	440b      	add	r3, r1
 801473c:	3326      	adds	r3, #38	; 0x26
 801473e:	2210      	movs	r2, #16
 8014740:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014742:	4b29      	ldr	r3, [pc, #164]	; (80147e8 <USBD_CDC_Init+0x1ec>)
 8014744:	7819      	ldrb	r1, [r3, #0]
 8014746:	2308      	movs	r3, #8
 8014748:	2203      	movs	r2, #3
 801474a:	6878      	ldr	r0, [r7, #4]
 801474c:	f002 fb3d 	bl	8016dca <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8014750:	4b25      	ldr	r3, [pc, #148]	; (80147e8 <USBD_CDC_Init+0x1ec>)
 8014752:	781b      	ldrb	r3, [r3, #0]
 8014754:	f003 020f 	and.w	r2, r3, #15
 8014758:	6879      	ldr	r1, [r7, #4]
 801475a:	4613      	mov	r3, r2
 801475c:	009b      	lsls	r3, r3, #2
 801475e:	4413      	add	r3, r2
 8014760:	009b      	lsls	r3, r3, #2
 8014762:	440b      	add	r3, r1
 8014764:	3324      	adds	r3, #36	; 0x24
 8014766:	2201      	movs	r2, #1
 8014768:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	2200      	movs	r2, #0
 801476e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014778:	687a      	ldr	r2, [r7, #4]
 801477a:	33b0      	adds	r3, #176	; 0xb0
 801477c:	009b      	lsls	r3, r3, #2
 801477e:	4413      	add	r3, r2
 8014780:	685b      	ldr	r3, [r3, #4]
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	2200      	movs	r2, #0
 801478a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801478e:	68fb      	ldr	r3, [r7, #12]
 8014790:	2200      	movs	r2, #0
 8014792:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 801479c:	2b00      	cmp	r3, #0
 801479e:	d101      	bne.n	80147a4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80147a0:	2302      	movs	r3, #2
 80147a2:	e018      	b.n	80147d6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	7c1b      	ldrb	r3, [r3, #16]
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d10a      	bne.n	80147c2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80147ac:	4b0d      	ldr	r3, [pc, #52]	; (80147e4 <USBD_CDC_Init+0x1e8>)
 80147ae:	7819      	ldrb	r1, [r3, #0]
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80147b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80147ba:	6878      	ldr	r0, [r7, #4]
 80147bc:	f002 fbf4 	bl	8016fa8 <USBD_LL_PrepareReceive>
 80147c0:	e008      	b.n	80147d4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80147c2:	4b08      	ldr	r3, [pc, #32]	; (80147e4 <USBD_CDC_Init+0x1e8>)
 80147c4:	7819      	ldrb	r1, [r3, #0]
 80147c6:	68fb      	ldr	r3, [r7, #12]
 80147c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80147cc:	2340      	movs	r3, #64	; 0x40
 80147ce:	6878      	ldr	r0, [r7, #4]
 80147d0:	f002 fbea 	bl	8016fa8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80147d4:	2300      	movs	r3, #0
}
 80147d6:	4618      	mov	r0, r3
 80147d8:	3710      	adds	r7, #16
 80147da:	46bd      	mov	sp, r7
 80147dc:	bd80      	pop	{r7, pc}
 80147de:	bf00      	nop
 80147e0:	24000097 	.word	0x24000097
 80147e4:	24000098 	.word	0x24000098
 80147e8:	24000099 	.word	0x24000099

080147ec <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80147ec:	b580      	push	{r7, lr}
 80147ee:	b082      	sub	sp, #8
 80147f0:	af00      	add	r7, sp, #0
 80147f2:	6078      	str	r0, [r7, #4]
 80147f4:	460b      	mov	r3, r1
 80147f6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80147f8:	4b3a      	ldr	r3, [pc, #232]	; (80148e4 <USBD_CDC_DeInit+0xf8>)
 80147fa:	781b      	ldrb	r3, [r3, #0]
 80147fc:	4619      	mov	r1, r3
 80147fe:	6878      	ldr	r0, [r7, #4]
 8014800:	f002 fb09 	bl	8016e16 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8014804:	4b37      	ldr	r3, [pc, #220]	; (80148e4 <USBD_CDC_DeInit+0xf8>)
 8014806:	781b      	ldrb	r3, [r3, #0]
 8014808:	f003 020f 	and.w	r2, r3, #15
 801480c:	6879      	ldr	r1, [r7, #4]
 801480e:	4613      	mov	r3, r2
 8014810:	009b      	lsls	r3, r3, #2
 8014812:	4413      	add	r3, r2
 8014814:	009b      	lsls	r3, r3, #2
 8014816:	440b      	add	r3, r1
 8014818:	3324      	adds	r3, #36	; 0x24
 801481a:	2200      	movs	r2, #0
 801481c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801481e:	4b32      	ldr	r3, [pc, #200]	; (80148e8 <USBD_CDC_DeInit+0xfc>)
 8014820:	781b      	ldrb	r3, [r3, #0]
 8014822:	4619      	mov	r1, r3
 8014824:	6878      	ldr	r0, [r7, #4]
 8014826:	f002 faf6 	bl	8016e16 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801482a:	4b2f      	ldr	r3, [pc, #188]	; (80148e8 <USBD_CDC_DeInit+0xfc>)
 801482c:	781b      	ldrb	r3, [r3, #0]
 801482e:	f003 020f 	and.w	r2, r3, #15
 8014832:	6879      	ldr	r1, [r7, #4]
 8014834:	4613      	mov	r3, r2
 8014836:	009b      	lsls	r3, r3, #2
 8014838:	4413      	add	r3, r2
 801483a:	009b      	lsls	r3, r3, #2
 801483c:	440b      	add	r3, r1
 801483e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014842:	2200      	movs	r2, #0
 8014844:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8014846:	4b29      	ldr	r3, [pc, #164]	; (80148ec <USBD_CDC_DeInit+0x100>)
 8014848:	781b      	ldrb	r3, [r3, #0]
 801484a:	4619      	mov	r1, r3
 801484c:	6878      	ldr	r0, [r7, #4]
 801484e:	f002 fae2 	bl	8016e16 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8014852:	4b26      	ldr	r3, [pc, #152]	; (80148ec <USBD_CDC_DeInit+0x100>)
 8014854:	781b      	ldrb	r3, [r3, #0]
 8014856:	f003 020f 	and.w	r2, r3, #15
 801485a:	6879      	ldr	r1, [r7, #4]
 801485c:	4613      	mov	r3, r2
 801485e:	009b      	lsls	r3, r3, #2
 8014860:	4413      	add	r3, r2
 8014862:	009b      	lsls	r3, r3, #2
 8014864:	440b      	add	r3, r1
 8014866:	3324      	adds	r3, #36	; 0x24
 8014868:	2200      	movs	r2, #0
 801486a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 801486c:	4b1f      	ldr	r3, [pc, #124]	; (80148ec <USBD_CDC_DeInit+0x100>)
 801486e:	781b      	ldrb	r3, [r3, #0]
 8014870:	f003 020f 	and.w	r2, r3, #15
 8014874:	6879      	ldr	r1, [r7, #4]
 8014876:	4613      	mov	r3, r2
 8014878:	009b      	lsls	r3, r3, #2
 801487a:	4413      	add	r3, r2
 801487c:	009b      	lsls	r3, r3, #2
 801487e:	440b      	add	r3, r1
 8014880:	3326      	adds	r3, #38	; 0x26
 8014882:	2200      	movs	r2, #0
 8014884:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	32b0      	adds	r2, #176	; 0xb0
 8014890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014894:	2b00      	cmp	r3, #0
 8014896:	d01f      	beq.n	80148d8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801489e:	687a      	ldr	r2, [r7, #4]
 80148a0:	33b0      	adds	r3, #176	; 0xb0
 80148a2:	009b      	lsls	r3, r3, #2
 80148a4:	4413      	add	r3, r2
 80148a6:	685b      	ldr	r3, [r3, #4]
 80148a8:	685b      	ldr	r3, [r3, #4]
 80148aa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	32b0      	adds	r2, #176	; 0xb0
 80148b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148ba:	4618      	mov	r0, r3
 80148bc:	f002 fbb6 	bl	801702c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	32b0      	adds	r2, #176	; 0xb0
 80148ca:	2100      	movs	r1, #0
 80148cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	2200      	movs	r2, #0
 80148d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80148d8:	2300      	movs	r3, #0
}
 80148da:	4618      	mov	r0, r3
 80148dc:	3708      	adds	r7, #8
 80148de:	46bd      	mov	sp, r7
 80148e0:	bd80      	pop	{r7, pc}
 80148e2:	bf00      	nop
 80148e4:	24000097 	.word	0x24000097
 80148e8:	24000098 	.word	0x24000098
 80148ec:	24000099 	.word	0x24000099

080148f0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80148f0:	b580      	push	{r7, lr}
 80148f2:	b086      	sub	sp, #24
 80148f4:	af00      	add	r7, sp, #0
 80148f6:	6078      	str	r0, [r7, #4]
 80148f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	32b0      	adds	r2, #176	; 0xb0
 8014904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014908:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801490a:	2300      	movs	r3, #0
 801490c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801490e:	2300      	movs	r3, #0
 8014910:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8014912:	2300      	movs	r3, #0
 8014914:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014916:	693b      	ldr	r3, [r7, #16]
 8014918:	2b00      	cmp	r3, #0
 801491a:	d101      	bne.n	8014920 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 801491c:	2303      	movs	r3, #3
 801491e:	e0bf      	b.n	8014aa0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014920:	683b      	ldr	r3, [r7, #0]
 8014922:	781b      	ldrb	r3, [r3, #0]
 8014924:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014928:	2b00      	cmp	r3, #0
 801492a:	d050      	beq.n	80149ce <USBD_CDC_Setup+0xde>
 801492c:	2b20      	cmp	r3, #32
 801492e:	f040 80af 	bne.w	8014a90 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8014932:	683b      	ldr	r3, [r7, #0]
 8014934:	88db      	ldrh	r3, [r3, #6]
 8014936:	2b00      	cmp	r3, #0
 8014938:	d03a      	beq.n	80149b0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801493a:	683b      	ldr	r3, [r7, #0]
 801493c:	781b      	ldrb	r3, [r3, #0]
 801493e:	b25b      	sxtb	r3, r3
 8014940:	2b00      	cmp	r3, #0
 8014942:	da1b      	bge.n	801497c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801494a:	687a      	ldr	r2, [r7, #4]
 801494c:	33b0      	adds	r3, #176	; 0xb0
 801494e:	009b      	lsls	r3, r3, #2
 8014950:	4413      	add	r3, r2
 8014952:	685b      	ldr	r3, [r3, #4]
 8014954:	689b      	ldr	r3, [r3, #8]
 8014956:	683a      	ldr	r2, [r7, #0]
 8014958:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801495a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801495c:	683a      	ldr	r2, [r7, #0]
 801495e:	88d2      	ldrh	r2, [r2, #6]
 8014960:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8014962:	683b      	ldr	r3, [r7, #0]
 8014964:	88db      	ldrh	r3, [r3, #6]
 8014966:	2b07      	cmp	r3, #7
 8014968:	bf28      	it	cs
 801496a:	2307      	movcs	r3, #7
 801496c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801496e:	693b      	ldr	r3, [r7, #16]
 8014970:	89fa      	ldrh	r2, [r7, #14]
 8014972:	4619      	mov	r1, r3
 8014974:	6878      	ldr	r0, [r7, #4]
 8014976:	f001 fd89 	bl	801648c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801497a:	e090      	b.n	8014a9e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 801497c:	683b      	ldr	r3, [r7, #0]
 801497e:	785a      	ldrb	r2, [r3, #1]
 8014980:	693b      	ldr	r3, [r7, #16]
 8014982:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8014986:	683b      	ldr	r3, [r7, #0]
 8014988:	88db      	ldrh	r3, [r3, #6]
 801498a:	2b3f      	cmp	r3, #63	; 0x3f
 801498c:	d803      	bhi.n	8014996 <USBD_CDC_Setup+0xa6>
 801498e:	683b      	ldr	r3, [r7, #0]
 8014990:	88db      	ldrh	r3, [r3, #6]
 8014992:	b2da      	uxtb	r2, r3
 8014994:	e000      	b.n	8014998 <USBD_CDC_Setup+0xa8>
 8014996:	2240      	movs	r2, #64	; 0x40
 8014998:	693b      	ldr	r3, [r7, #16]
 801499a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801499e:	6939      	ldr	r1, [r7, #16]
 80149a0:	693b      	ldr	r3, [r7, #16]
 80149a2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80149a6:	461a      	mov	r2, r3
 80149a8:	6878      	ldr	r0, [r7, #4]
 80149aa:	f001 fd9b 	bl	80164e4 <USBD_CtlPrepareRx>
      break;
 80149ae:	e076      	b.n	8014a9e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80149b6:	687a      	ldr	r2, [r7, #4]
 80149b8:	33b0      	adds	r3, #176	; 0xb0
 80149ba:	009b      	lsls	r3, r3, #2
 80149bc:	4413      	add	r3, r2
 80149be:	685b      	ldr	r3, [r3, #4]
 80149c0:	689b      	ldr	r3, [r3, #8]
 80149c2:	683a      	ldr	r2, [r7, #0]
 80149c4:	7850      	ldrb	r0, [r2, #1]
 80149c6:	2200      	movs	r2, #0
 80149c8:	6839      	ldr	r1, [r7, #0]
 80149ca:	4798      	blx	r3
      break;
 80149cc:	e067      	b.n	8014a9e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80149ce:	683b      	ldr	r3, [r7, #0]
 80149d0:	785b      	ldrb	r3, [r3, #1]
 80149d2:	2b0b      	cmp	r3, #11
 80149d4:	d851      	bhi.n	8014a7a <USBD_CDC_Setup+0x18a>
 80149d6:	a201      	add	r2, pc, #4	; (adr r2, 80149dc <USBD_CDC_Setup+0xec>)
 80149d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149dc:	08014a0d 	.word	0x08014a0d
 80149e0:	08014a89 	.word	0x08014a89
 80149e4:	08014a7b 	.word	0x08014a7b
 80149e8:	08014a7b 	.word	0x08014a7b
 80149ec:	08014a7b 	.word	0x08014a7b
 80149f0:	08014a7b 	.word	0x08014a7b
 80149f4:	08014a7b 	.word	0x08014a7b
 80149f8:	08014a7b 	.word	0x08014a7b
 80149fc:	08014a7b 	.word	0x08014a7b
 8014a00:	08014a7b 	.word	0x08014a7b
 8014a04:	08014a37 	.word	0x08014a37
 8014a08:	08014a61 	.word	0x08014a61
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a12:	b2db      	uxtb	r3, r3
 8014a14:	2b03      	cmp	r3, #3
 8014a16:	d107      	bne.n	8014a28 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014a18:	f107 030a 	add.w	r3, r7, #10
 8014a1c:	2202      	movs	r2, #2
 8014a1e:	4619      	mov	r1, r3
 8014a20:	6878      	ldr	r0, [r7, #4]
 8014a22:	f001 fd33 	bl	801648c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014a26:	e032      	b.n	8014a8e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014a28:	6839      	ldr	r1, [r7, #0]
 8014a2a:	6878      	ldr	r0, [r7, #4]
 8014a2c:	f001 fcbd 	bl	80163aa <USBD_CtlError>
            ret = USBD_FAIL;
 8014a30:	2303      	movs	r3, #3
 8014a32:	75fb      	strb	r3, [r7, #23]
          break;
 8014a34:	e02b      	b.n	8014a8e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a3c:	b2db      	uxtb	r3, r3
 8014a3e:	2b03      	cmp	r3, #3
 8014a40:	d107      	bne.n	8014a52 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014a42:	f107 030d 	add.w	r3, r7, #13
 8014a46:	2201      	movs	r2, #1
 8014a48:	4619      	mov	r1, r3
 8014a4a:	6878      	ldr	r0, [r7, #4]
 8014a4c:	f001 fd1e 	bl	801648c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014a50:	e01d      	b.n	8014a8e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014a52:	6839      	ldr	r1, [r7, #0]
 8014a54:	6878      	ldr	r0, [r7, #4]
 8014a56:	f001 fca8 	bl	80163aa <USBD_CtlError>
            ret = USBD_FAIL;
 8014a5a:	2303      	movs	r3, #3
 8014a5c:	75fb      	strb	r3, [r7, #23]
          break;
 8014a5e:	e016      	b.n	8014a8e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a66:	b2db      	uxtb	r3, r3
 8014a68:	2b03      	cmp	r3, #3
 8014a6a:	d00f      	beq.n	8014a8c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8014a6c:	6839      	ldr	r1, [r7, #0]
 8014a6e:	6878      	ldr	r0, [r7, #4]
 8014a70:	f001 fc9b 	bl	80163aa <USBD_CtlError>
            ret = USBD_FAIL;
 8014a74:	2303      	movs	r3, #3
 8014a76:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014a78:	e008      	b.n	8014a8c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8014a7a:	6839      	ldr	r1, [r7, #0]
 8014a7c:	6878      	ldr	r0, [r7, #4]
 8014a7e:	f001 fc94 	bl	80163aa <USBD_CtlError>
          ret = USBD_FAIL;
 8014a82:	2303      	movs	r3, #3
 8014a84:	75fb      	strb	r3, [r7, #23]
          break;
 8014a86:	e002      	b.n	8014a8e <USBD_CDC_Setup+0x19e>
          break;
 8014a88:	bf00      	nop
 8014a8a:	e008      	b.n	8014a9e <USBD_CDC_Setup+0x1ae>
          break;
 8014a8c:	bf00      	nop
      }
      break;
 8014a8e:	e006      	b.n	8014a9e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8014a90:	6839      	ldr	r1, [r7, #0]
 8014a92:	6878      	ldr	r0, [r7, #4]
 8014a94:	f001 fc89 	bl	80163aa <USBD_CtlError>
      ret = USBD_FAIL;
 8014a98:	2303      	movs	r3, #3
 8014a9a:	75fb      	strb	r3, [r7, #23]
      break;
 8014a9c:	bf00      	nop
  }

  return (uint8_t)ret;
 8014a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014aa0:	4618      	mov	r0, r3
 8014aa2:	3718      	adds	r7, #24
 8014aa4:	46bd      	mov	sp, r7
 8014aa6:	bd80      	pop	{r7, pc}

08014aa8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014aa8:	b580      	push	{r7, lr}
 8014aaa:	b084      	sub	sp, #16
 8014aac:	af00      	add	r7, sp, #0
 8014aae:	6078      	str	r0, [r7, #4]
 8014ab0:	460b      	mov	r3, r1
 8014ab2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014aba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	32b0      	adds	r2, #176	; 0xb0
 8014ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d101      	bne.n	8014ad2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8014ace:	2303      	movs	r3, #3
 8014ad0:	e065      	b.n	8014b9e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	32b0      	adds	r2, #176	; 0xb0
 8014adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ae0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014ae2:	78fb      	ldrb	r3, [r7, #3]
 8014ae4:	f003 020f 	and.w	r2, r3, #15
 8014ae8:	6879      	ldr	r1, [r7, #4]
 8014aea:	4613      	mov	r3, r2
 8014aec:	009b      	lsls	r3, r3, #2
 8014aee:	4413      	add	r3, r2
 8014af0:	009b      	lsls	r3, r3, #2
 8014af2:	440b      	add	r3, r1
 8014af4:	3318      	adds	r3, #24
 8014af6:	681b      	ldr	r3, [r3, #0]
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d02f      	beq.n	8014b5c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8014afc:	78fb      	ldrb	r3, [r7, #3]
 8014afe:	f003 020f 	and.w	r2, r3, #15
 8014b02:	6879      	ldr	r1, [r7, #4]
 8014b04:	4613      	mov	r3, r2
 8014b06:	009b      	lsls	r3, r3, #2
 8014b08:	4413      	add	r3, r2
 8014b0a:	009b      	lsls	r3, r3, #2
 8014b0c:	440b      	add	r3, r1
 8014b0e:	3318      	adds	r3, #24
 8014b10:	681a      	ldr	r2, [r3, #0]
 8014b12:	78fb      	ldrb	r3, [r7, #3]
 8014b14:	f003 010f 	and.w	r1, r3, #15
 8014b18:	68f8      	ldr	r0, [r7, #12]
 8014b1a:	460b      	mov	r3, r1
 8014b1c:	00db      	lsls	r3, r3, #3
 8014b1e:	440b      	add	r3, r1
 8014b20:	009b      	lsls	r3, r3, #2
 8014b22:	4403      	add	r3, r0
 8014b24:	3344      	adds	r3, #68	; 0x44
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	fbb2 f1f3 	udiv	r1, r2, r3
 8014b2c:	fb01 f303 	mul.w	r3, r1, r3
 8014b30:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d112      	bne.n	8014b5c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8014b36:	78fb      	ldrb	r3, [r7, #3]
 8014b38:	f003 020f 	and.w	r2, r3, #15
 8014b3c:	6879      	ldr	r1, [r7, #4]
 8014b3e:	4613      	mov	r3, r2
 8014b40:	009b      	lsls	r3, r3, #2
 8014b42:	4413      	add	r3, r2
 8014b44:	009b      	lsls	r3, r3, #2
 8014b46:	440b      	add	r3, r1
 8014b48:	3318      	adds	r3, #24
 8014b4a:	2200      	movs	r2, #0
 8014b4c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8014b4e:	78f9      	ldrb	r1, [r7, #3]
 8014b50:	2300      	movs	r3, #0
 8014b52:	2200      	movs	r2, #0
 8014b54:	6878      	ldr	r0, [r7, #4]
 8014b56:	f002 fa06 	bl	8016f66 <USBD_LL_Transmit>
 8014b5a:	e01f      	b.n	8014b9c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8014b5c:	68bb      	ldr	r3, [r7, #8]
 8014b5e:	2200      	movs	r2, #0
 8014b60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014b6a:	687a      	ldr	r2, [r7, #4]
 8014b6c:	33b0      	adds	r3, #176	; 0xb0
 8014b6e:	009b      	lsls	r3, r3, #2
 8014b70:	4413      	add	r3, r2
 8014b72:	685b      	ldr	r3, [r3, #4]
 8014b74:	691b      	ldr	r3, [r3, #16]
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d010      	beq.n	8014b9c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014b80:	687a      	ldr	r2, [r7, #4]
 8014b82:	33b0      	adds	r3, #176	; 0xb0
 8014b84:	009b      	lsls	r3, r3, #2
 8014b86:	4413      	add	r3, r2
 8014b88:	685b      	ldr	r3, [r3, #4]
 8014b8a:	691b      	ldr	r3, [r3, #16]
 8014b8c:	68ba      	ldr	r2, [r7, #8]
 8014b8e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8014b92:	68ba      	ldr	r2, [r7, #8]
 8014b94:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8014b98:	78fa      	ldrb	r2, [r7, #3]
 8014b9a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014b9c:	2300      	movs	r3, #0
}
 8014b9e:	4618      	mov	r0, r3
 8014ba0:	3710      	adds	r7, #16
 8014ba2:	46bd      	mov	sp, r7
 8014ba4:	bd80      	pop	{r7, pc}

08014ba6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014ba6:	b580      	push	{r7, lr}
 8014ba8:	b084      	sub	sp, #16
 8014baa:	af00      	add	r7, sp, #0
 8014bac:	6078      	str	r0, [r7, #4]
 8014bae:	460b      	mov	r3, r1
 8014bb0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	32b0      	adds	r2, #176	; 0xb0
 8014bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014bc0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	32b0      	adds	r2, #176	; 0xb0
 8014bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d101      	bne.n	8014bd8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8014bd4:	2303      	movs	r3, #3
 8014bd6:	e01a      	b.n	8014c0e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014bd8:	78fb      	ldrb	r3, [r7, #3]
 8014bda:	4619      	mov	r1, r3
 8014bdc:	6878      	ldr	r0, [r7, #4]
 8014bde:	f002 fa04 	bl	8016fea <USBD_LL_GetRxDataSize>
 8014be2:	4602      	mov	r2, r0
 8014be4:	68fb      	ldr	r3, [r7, #12]
 8014be6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014bf0:	687a      	ldr	r2, [r7, #4]
 8014bf2:	33b0      	adds	r3, #176	; 0xb0
 8014bf4:	009b      	lsls	r3, r3, #2
 8014bf6:	4413      	add	r3, r2
 8014bf8:	685b      	ldr	r3, [r3, #4]
 8014bfa:	68db      	ldr	r3, [r3, #12]
 8014bfc:	68fa      	ldr	r2, [r7, #12]
 8014bfe:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8014c02:	68fa      	ldr	r2, [r7, #12]
 8014c04:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8014c08:	4611      	mov	r1, r2
 8014c0a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014c0c:	2300      	movs	r3, #0
}
 8014c0e:	4618      	mov	r0, r3
 8014c10:	3710      	adds	r7, #16
 8014c12:	46bd      	mov	sp, r7
 8014c14:	bd80      	pop	{r7, pc}

08014c16 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014c16:	b580      	push	{r7, lr}
 8014c18:	b084      	sub	sp, #16
 8014c1a:	af00      	add	r7, sp, #0
 8014c1c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	32b0      	adds	r2, #176	; 0xb0
 8014c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c2c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d101      	bne.n	8014c38 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014c34:	2303      	movs	r3, #3
 8014c36:	e025      	b.n	8014c84 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014c3e:	687a      	ldr	r2, [r7, #4]
 8014c40:	33b0      	adds	r3, #176	; 0xb0
 8014c42:	009b      	lsls	r3, r3, #2
 8014c44:	4413      	add	r3, r2
 8014c46:	685b      	ldr	r3, [r3, #4]
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d01a      	beq.n	8014c82 <USBD_CDC_EP0_RxReady+0x6c>
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8014c52:	2bff      	cmp	r3, #255	; 0xff
 8014c54:	d015      	beq.n	8014c82 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014c5c:	687a      	ldr	r2, [r7, #4]
 8014c5e:	33b0      	adds	r3, #176	; 0xb0
 8014c60:	009b      	lsls	r3, r3, #2
 8014c62:	4413      	add	r3, r2
 8014c64:	685b      	ldr	r3, [r3, #4]
 8014c66:	689b      	ldr	r3, [r3, #8]
 8014c68:	68fa      	ldr	r2, [r7, #12]
 8014c6a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8014c6e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8014c70:	68fa      	ldr	r2, [r7, #12]
 8014c72:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014c76:	b292      	uxth	r2, r2
 8014c78:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	22ff      	movs	r2, #255	; 0xff
 8014c7e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8014c82:	2300      	movs	r3, #0
}
 8014c84:	4618      	mov	r0, r3
 8014c86:	3710      	adds	r7, #16
 8014c88:	46bd      	mov	sp, r7
 8014c8a:	bd80      	pop	{r7, pc}

08014c8c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014c8c:	b580      	push	{r7, lr}
 8014c8e:	b086      	sub	sp, #24
 8014c90:	af00      	add	r7, sp, #0
 8014c92:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014c94:	2182      	movs	r1, #130	; 0x82
 8014c96:	4818      	ldr	r0, [pc, #96]	; (8014cf8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014c98:	f000 fd4f 	bl	801573a <USBD_GetEpDesc>
 8014c9c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014c9e:	2101      	movs	r1, #1
 8014ca0:	4815      	ldr	r0, [pc, #84]	; (8014cf8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014ca2:	f000 fd4a 	bl	801573a <USBD_GetEpDesc>
 8014ca6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014ca8:	2181      	movs	r1, #129	; 0x81
 8014caa:	4813      	ldr	r0, [pc, #76]	; (8014cf8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014cac:	f000 fd45 	bl	801573a <USBD_GetEpDesc>
 8014cb0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014cb2:	697b      	ldr	r3, [r7, #20]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d002      	beq.n	8014cbe <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014cb8:	697b      	ldr	r3, [r7, #20]
 8014cba:	2210      	movs	r2, #16
 8014cbc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014cbe:	693b      	ldr	r3, [r7, #16]
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d006      	beq.n	8014cd2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014cc4:	693b      	ldr	r3, [r7, #16]
 8014cc6:	2200      	movs	r2, #0
 8014cc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014ccc:	711a      	strb	r2, [r3, #4]
 8014cce:	2200      	movs	r2, #0
 8014cd0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d006      	beq.n	8014ce6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	2200      	movs	r2, #0
 8014cdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014ce0:	711a      	strb	r2, [r3, #4]
 8014ce2:	2200      	movs	r2, #0
 8014ce4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	2243      	movs	r2, #67	; 0x43
 8014cea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014cec:	4b02      	ldr	r3, [pc, #8]	; (8014cf8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8014cee:	4618      	mov	r0, r3
 8014cf0:	3718      	adds	r7, #24
 8014cf2:	46bd      	mov	sp, r7
 8014cf4:	bd80      	pop	{r7, pc}
 8014cf6:	bf00      	nop
 8014cf8:	24000054 	.word	0x24000054

08014cfc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014cfc:	b580      	push	{r7, lr}
 8014cfe:	b086      	sub	sp, #24
 8014d00:	af00      	add	r7, sp, #0
 8014d02:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014d04:	2182      	movs	r1, #130	; 0x82
 8014d06:	4818      	ldr	r0, [pc, #96]	; (8014d68 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014d08:	f000 fd17 	bl	801573a <USBD_GetEpDesc>
 8014d0c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014d0e:	2101      	movs	r1, #1
 8014d10:	4815      	ldr	r0, [pc, #84]	; (8014d68 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014d12:	f000 fd12 	bl	801573a <USBD_GetEpDesc>
 8014d16:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014d18:	2181      	movs	r1, #129	; 0x81
 8014d1a:	4813      	ldr	r0, [pc, #76]	; (8014d68 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014d1c:	f000 fd0d 	bl	801573a <USBD_GetEpDesc>
 8014d20:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014d22:	697b      	ldr	r3, [r7, #20]
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d002      	beq.n	8014d2e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8014d28:	697b      	ldr	r3, [r7, #20]
 8014d2a:	2210      	movs	r2, #16
 8014d2c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014d2e:	693b      	ldr	r3, [r7, #16]
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d006      	beq.n	8014d42 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014d34:	693b      	ldr	r3, [r7, #16]
 8014d36:	2200      	movs	r2, #0
 8014d38:	711a      	strb	r2, [r3, #4]
 8014d3a:	2200      	movs	r2, #0
 8014d3c:	f042 0202 	orr.w	r2, r2, #2
 8014d40:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d006      	beq.n	8014d56 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014d48:	68fb      	ldr	r3, [r7, #12]
 8014d4a:	2200      	movs	r2, #0
 8014d4c:	711a      	strb	r2, [r3, #4]
 8014d4e:	2200      	movs	r2, #0
 8014d50:	f042 0202 	orr.w	r2, r2, #2
 8014d54:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	2243      	movs	r2, #67	; 0x43
 8014d5a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014d5c:	4b02      	ldr	r3, [pc, #8]	; (8014d68 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8014d5e:	4618      	mov	r0, r3
 8014d60:	3718      	adds	r7, #24
 8014d62:	46bd      	mov	sp, r7
 8014d64:	bd80      	pop	{r7, pc}
 8014d66:	bf00      	nop
 8014d68:	24000054 	.word	0x24000054

08014d6c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014d6c:	b580      	push	{r7, lr}
 8014d6e:	b086      	sub	sp, #24
 8014d70:	af00      	add	r7, sp, #0
 8014d72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014d74:	2182      	movs	r1, #130	; 0x82
 8014d76:	4818      	ldr	r0, [pc, #96]	; (8014dd8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014d78:	f000 fcdf 	bl	801573a <USBD_GetEpDesc>
 8014d7c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014d7e:	2101      	movs	r1, #1
 8014d80:	4815      	ldr	r0, [pc, #84]	; (8014dd8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014d82:	f000 fcda 	bl	801573a <USBD_GetEpDesc>
 8014d86:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014d88:	2181      	movs	r1, #129	; 0x81
 8014d8a:	4813      	ldr	r0, [pc, #76]	; (8014dd8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014d8c:	f000 fcd5 	bl	801573a <USBD_GetEpDesc>
 8014d90:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014d92:	697b      	ldr	r3, [r7, #20]
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d002      	beq.n	8014d9e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014d98:	697b      	ldr	r3, [r7, #20]
 8014d9a:	2210      	movs	r2, #16
 8014d9c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014d9e:	693b      	ldr	r3, [r7, #16]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d006      	beq.n	8014db2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014da4:	693b      	ldr	r3, [r7, #16]
 8014da6:	2200      	movs	r2, #0
 8014da8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014dac:	711a      	strb	r2, [r3, #4]
 8014dae:	2200      	movs	r2, #0
 8014db0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d006      	beq.n	8014dc6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014db8:	68fb      	ldr	r3, [r7, #12]
 8014dba:	2200      	movs	r2, #0
 8014dbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014dc0:	711a      	strb	r2, [r3, #4]
 8014dc2:	2200      	movs	r2, #0
 8014dc4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	2243      	movs	r2, #67	; 0x43
 8014dca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014dcc:	4b02      	ldr	r3, [pc, #8]	; (8014dd8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8014dce:	4618      	mov	r0, r3
 8014dd0:	3718      	adds	r7, #24
 8014dd2:	46bd      	mov	sp, r7
 8014dd4:	bd80      	pop	{r7, pc}
 8014dd6:	bf00      	nop
 8014dd8:	24000054 	.word	0x24000054

08014ddc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014ddc:	b480      	push	{r7}
 8014dde:	b083      	sub	sp, #12
 8014de0:	af00      	add	r7, sp, #0
 8014de2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	220a      	movs	r2, #10
 8014de8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014dea:	4b03      	ldr	r3, [pc, #12]	; (8014df8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014dec:	4618      	mov	r0, r3
 8014dee:	370c      	adds	r7, #12
 8014df0:	46bd      	mov	sp, r7
 8014df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014df6:	4770      	bx	lr
 8014df8:	24000010 	.word	0x24000010

08014dfc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014dfc:	b480      	push	{r7}
 8014dfe:	b083      	sub	sp, #12
 8014e00:	af00      	add	r7, sp, #0
 8014e02:	6078      	str	r0, [r7, #4]
 8014e04:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014e06:	683b      	ldr	r3, [r7, #0]
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d101      	bne.n	8014e10 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014e0c:	2303      	movs	r3, #3
 8014e0e:	e009      	b.n	8014e24 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014e16:	687a      	ldr	r2, [r7, #4]
 8014e18:	33b0      	adds	r3, #176	; 0xb0
 8014e1a:	009b      	lsls	r3, r3, #2
 8014e1c:	4413      	add	r3, r2
 8014e1e:	683a      	ldr	r2, [r7, #0]
 8014e20:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8014e22:	2300      	movs	r3, #0
}
 8014e24:	4618      	mov	r0, r3
 8014e26:	370c      	adds	r7, #12
 8014e28:	46bd      	mov	sp, r7
 8014e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e2e:	4770      	bx	lr

08014e30 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014e30:	b480      	push	{r7}
 8014e32:	b087      	sub	sp, #28
 8014e34:	af00      	add	r7, sp, #0
 8014e36:	60f8      	str	r0, [r7, #12]
 8014e38:	60b9      	str	r1, [r7, #8]
 8014e3a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	32b0      	adds	r2, #176	; 0xb0
 8014e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e4a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014e4c:	697b      	ldr	r3, [r7, #20]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d101      	bne.n	8014e56 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014e52:	2303      	movs	r3, #3
 8014e54:	e008      	b.n	8014e68 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8014e56:	697b      	ldr	r3, [r7, #20]
 8014e58:	68ba      	ldr	r2, [r7, #8]
 8014e5a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8014e5e:	697b      	ldr	r3, [r7, #20]
 8014e60:	687a      	ldr	r2, [r7, #4]
 8014e62:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8014e66:	2300      	movs	r3, #0
}
 8014e68:	4618      	mov	r0, r3
 8014e6a:	371c      	adds	r7, #28
 8014e6c:	46bd      	mov	sp, r7
 8014e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e72:	4770      	bx	lr

08014e74 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014e74:	b480      	push	{r7}
 8014e76:	b085      	sub	sp, #20
 8014e78:	af00      	add	r7, sp, #0
 8014e7a:	6078      	str	r0, [r7, #4]
 8014e7c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	32b0      	adds	r2, #176	; 0xb0
 8014e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e8c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d101      	bne.n	8014e98 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8014e94:	2303      	movs	r3, #3
 8014e96:	e004      	b.n	8014ea2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8014e98:	68fb      	ldr	r3, [r7, #12]
 8014e9a:	683a      	ldr	r2, [r7, #0]
 8014e9c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8014ea0:	2300      	movs	r3, #0
}
 8014ea2:	4618      	mov	r0, r3
 8014ea4:	3714      	adds	r7, #20
 8014ea6:	46bd      	mov	sp, r7
 8014ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eac:	4770      	bx	lr
	...

08014eb0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8014eb0:	b580      	push	{r7, lr}
 8014eb2:	b084      	sub	sp, #16
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	32b0      	adds	r2, #176	; 0xb0
 8014ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ec6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8014ec8:	2301      	movs	r3, #1
 8014eca:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014ecc:	68bb      	ldr	r3, [r7, #8]
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d101      	bne.n	8014ed6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014ed2:	2303      	movs	r3, #3
 8014ed4:	e025      	b.n	8014f22 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8014ed6:	68bb      	ldr	r3, [r7, #8]
 8014ed8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d11f      	bne.n	8014f20 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014ee0:	68bb      	ldr	r3, [r7, #8]
 8014ee2:	2201      	movs	r2, #1
 8014ee4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8014ee8:	4b10      	ldr	r3, [pc, #64]	; (8014f2c <USBD_CDC_TransmitPacket+0x7c>)
 8014eea:	781b      	ldrb	r3, [r3, #0]
 8014eec:	f003 020f 	and.w	r2, r3, #15
 8014ef0:	68bb      	ldr	r3, [r7, #8]
 8014ef2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8014ef6:	6878      	ldr	r0, [r7, #4]
 8014ef8:	4613      	mov	r3, r2
 8014efa:	009b      	lsls	r3, r3, #2
 8014efc:	4413      	add	r3, r2
 8014efe:	009b      	lsls	r3, r3, #2
 8014f00:	4403      	add	r3, r0
 8014f02:	3318      	adds	r3, #24
 8014f04:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8014f06:	4b09      	ldr	r3, [pc, #36]	; (8014f2c <USBD_CDC_TransmitPacket+0x7c>)
 8014f08:	7819      	ldrb	r1, [r3, #0]
 8014f0a:	68bb      	ldr	r3, [r7, #8]
 8014f0c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014f10:	68bb      	ldr	r3, [r7, #8]
 8014f12:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014f16:	6878      	ldr	r0, [r7, #4]
 8014f18:	f002 f825 	bl	8016f66 <USBD_LL_Transmit>

    ret = USBD_OK;
 8014f1c:	2300      	movs	r3, #0
 8014f1e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8014f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f22:	4618      	mov	r0, r3
 8014f24:	3710      	adds	r7, #16
 8014f26:	46bd      	mov	sp, r7
 8014f28:	bd80      	pop	{r7, pc}
 8014f2a:	bf00      	nop
 8014f2c:	24000097 	.word	0x24000097

08014f30 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014f30:	b580      	push	{r7, lr}
 8014f32:	b084      	sub	sp, #16
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	32b0      	adds	r2, #176	; 0xb0
 8014f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f46:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	32b0      	adds	r2, #176	; 0xb0
 8014f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d101      	bne.n	8014f5e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8014f5a:	2303      	movs	r3, #3
 8014f5c:	e018      	b.n	8014f90 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	7c1b      	ldrb	r3, [r3, #16]
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d10a      	bne.n	8014f7c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014f66:	4b0c      	ldr	r3, [pc, #48]	; (8014f98 <USBD_CDC_ReceivePacket+0x68>)
 8014f68:	7819      	ldrb	r1, [r3, #0]
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014f70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014f74:	6878      	ldr	r0, [r7, #4]
 8014f76:	f002 f817 	bl	8016fa8 <USBD_LL_PrepareReceive>
 8014f7a:	e008      	b.n	8014f8e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014f7c:	4b06      	ldr	r3, [pc, #24]	; (8014f98 <USBD_CDC_ReceivePacket+0x68>)
 8014f7e:	7819      	ldrb	r1, [r3, #0]
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014f86:	2340      	movs	r3, #64	; 0x40
 8014f88:	6878      	ldr	r0, [r7, #4]
 8014f8a:	f002 f80d 	bl	8016fa8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014f8e:	2300      	movs	r3, #0
}
 8014f90:	4618      	mov	r0, r3
 8014f92:	3710      	adds	r7, #16
 8014f94:	46bd      	mov	sp, r7
 8014f96:	bd80      	pop	{r7, pc}
 8014f98:	24000098 	.word	0x24000098

08014f9c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014f9c:	b580      	push	{r7, lr}
 8014f9e:	b086      	sub	sp, #24
 8014fa0:	af00      	add	r7, sp, #0
 8014fa2:	60f8      	str	r0, [r7, #12]
 8014fa4:	60b9      	str	r1, [r7, #8]
 8014fa6:	4613      	mov	r3, r2
 8014fa8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d101      	bne.n	8014fb4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014fb0:	2303      	movs	r3, #3
 8014fb2:	e01f      	b.n	8014ff4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	2200      	movs	r2, #0
 8014fb8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	2200      	movs	r2, #0
 8014fc0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	2200      	movs	r2, #0
 8014fc8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014fcc:	68bb      	ldr	r3, [r7, #8]
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d003      	beq.n	8014fda <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014fd2:	68fb      	ldr	r3, [r7, #12]
 8014fd4:	68ba      	ldr	r2, [r7, #8]
 8014fd6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	2201      	movs	r2, #1
 8014fde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8014fe2:	68fb      	ldr	r3, [r7, #12]
 8014fe4:	79fa      	ldrb	r2, [r7, #7]
 8014fe6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014fe8:	68f8      	ldr	r0, [r7, #12]
 8014fea:	f001 fe81 	bl	8016cf0 <USBD_LL_Init>
 8014fee:	4603      	mov	r3, r0
 8014ff0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8014ff4:	4618      	mov	r0, r3
 8014ff6:	3718      	adds	r7, #24
 8014ff8:	46bd      	mov	sp, r7
 8014ffa:	bd80      	pop	{r7, pc}

08014ffc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014ffc:	b580      	push	{r7, lr}
 8014ffe:	b084      	sub	sp, #16
 8015000:	af00      	add	r7, sp, #0
 8015002:	6078      	str	r0, [r7, #4]
 8015004:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015006:	2300      	movs	r3, #0
 8015008:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801500a:	683b      	ldr	r3, [r7, #0]
 801500c:	2b00      	cmp	r3, #0
 801500e:	d101      	bne.n	8015014 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015010:	2303      	movs	r3, #3
 8015012:	e025      	b.n	8015060 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	683a      	ldr	r2, [r7, #0]
 8015018:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	32ae      	adds	r2, #174	; 0xae
 8015026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801502a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801502c:	2b00      	cmp	r3, #0
 801502e:	d00f      	beq.n	8015050 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	32ae      	adds	r2, #174	; 0xae
 801503a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801503e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015040:	f107 020e 	add.w	r2, r7, #14
 8015044:	4610      	mov	r0, r2
 8015046:	4798      	blx	r3
 8015048:	4602      	mov	r2, r0
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015056:	1c5a      	adds	r2, r3, #1
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 801505e:	2300      	movs	r3, #0
}
 8015060:	4618      	mov	r0, r3
 8015062:	3710      	adds	r7, #16
 8015064:	46bd      	mov	sp, r7
 8015066:	bd80      	pop	{r7, pc}

08015068 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8015068:	b580      	push	{r7, lr}
 801506a:	b082      	sub	sp, #8
 801506c:	af00      	add	r7, sp, #0
 801506e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015070:	6878      	ldr	r0, [r7, #4]
 8015072:	f001 fe8f 	bl	8016d94 <USBD_LL_Start>
 8015076:	4603      	mov	r3, r0
}
 8015078:	4618      	mov	r0, r3
 801507a:	3708      	adds	r7, #8
 801507c:	46bd      	mov	sp, r7
 801507e:	bd80      	pop	{r7, pc}

08015080 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8015080:	b480      	push	{r7}
 8015082:	b083      	sub	sp, #12
 8015084:	af00      	add	r7, sp, #0
 8015086:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015088:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801508a:	4618      	mov	r0, r3
 801508c:	370c      	adds	r7, #12
 801508e:	46bd      	mov	sp, r7
 8015090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015094:	4770      	bx	lr

08015096 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015096:	b580      	push	{r7, lr}
 8015098:	b084      	sub	sp, #16
 801509a:	af00      	add	r7, sp, #0
 801509c:	6078      	str	r0, [r7, #4]
 801509e:	460b      	mov	r3, r1
 80150a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80150a2:	2300      	movs	r3, #0
 80150a4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d009      	beq.n	80150c4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80150b6:	681b      	ldr	r3, [r3, #0]
 80150b8:	78fa      	ldrb	r2, [r7, #3]
 80150ba:	4611      	mov	r1, r2
 80150bc:	6878      	ldr	r0, [r7, #4]
 80150be:	4798      	blx	r3
 80150c0:	4603      	mov	r3, r0
 80150c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80150c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80150c6:	4618      	mov	r0, r3
 80150c8:	3710      	adds	r7, #16
 80150ca:	46bd      	mov	sp, r7
 80150cc:	bd80      	pop	{r7, pc}

080150ce <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80150ce:	b580      	push	{r7, lr}
 80150d0:	b084      	sub	sp, #16
 80150d2:	af00      	add	r7, sp, #0
 80150d4:	6078      	str	r0, [r7, #4]
 80150d6:	460b      	mov	r3, r1
 80150d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80150da:	2300      	movs	r3, #0
 80150dc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80150e4:	685b      	ldr	r3, [r3, #4]
 80150e6:	78fa      	ldrb	r2, [r7, #3]
 80150e8:	4611      	mov	r1, r2
 80150ea:	6878      	ldr	r0, [r7, #4]
 80150ec:	4798      	blx	r3
 80150ee:	4603      	mov	r3, r0
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d001      	beq.n	80150f8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80150f4:	2303      	movs	r3, #3
 80150f6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80150f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80150fa:	4618      	mov	r0, r3
 80150fc:	3710      	adds	r7, #16
 80150fe:	46bd      	mov	sp, r7
 8015100:	bd80      	pop	{r7, pc}

08015102 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015102:	b580      	push	{r7, lr}
 8015104:	b084      	sub	sp, #16
 8015106:	af00      	add	r7, sp, #0
 8015108:	6078      	str	r0, [r7, #4]
 801510a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015112:	6839      	ldr	r1, [r7, #0]
 8015114:	4618      	mov	r0, r3
 8015116:	f001 f90e 	bl	8016336 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	2201      	movs	r2, #1
 801511e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015128:	461a      	mov	r2, r3
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015136:	f003 031f 	and.w	r3, r3, #31
 801513a:	2b02      	cmp	r3, #2
 801513c:	d01a      	beq.n	8015174 <USBD_LL_SetupStage+0x72>
 801513e:	2b02      	cmp	r3, #2
 8015140:	d822      	bhi.n	8015188 <USBD_LL_SetupStage+0x86>
 8015142:	2b00      	cmp	r3, #0
 8015144:	d002      	beq.n	801514c <USBD_LL_SetupStage+0x4a>
 8015146:	2b01      	cmp	r3, #1
 8015148:	d00a      	beq.n	8015160 <USBD_LL_SetupStage+0x5e>
 801514a:	e01d      	b.n	8015188 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015152:	4619      	mov	r1, r3
 8015154:	6878      	ldr	r0, [r7, #4]
 8015156:	f000 fb65 	bl	8015824 <USBD_StdDevReq>
 801515a:	4603      	mov	r3, r0
 801515c:	73fb      	strb	r3, [r7, #15]
      break;
 801515e:	e020      	b.n	80151a2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015166:	4619      	mov	r1, r3
 8015168:	6878      	ldr	r0, [r7, #4]
 801516a:	f000 fbcd 	bl	8015908 <USBD_StdItfReq>
 801516e:	4603      	mov	r3, r0
 8015170:	73fb      	strb	r3, [r7, #15]
      break;
 8015172:	e016      	b.n	80151a2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801517a:	4619      	mov	r1, r3
 801517c:	6878      	ldr	r0, [r7, #4]
 801517e:	f000 fc2f 	bl	80159e0 <USBD_StdEPReq>
 8015182:	4603      	mov	r3, r0
 8015184:	73fb      	strb	r3, [r7, #15]
      break;
 8015186:	e00c      	b.n	80151a2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801518e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015192:	b2db      	uxtb	r3, r3
 8015194:	4619      	mov	r1, r3
 8015196:	6878      	ldr	r0, [r7, #4]
 8015198:	f001 fe5c 	bl	8016e54 <USBD_LL_StallEP>
 801519c:	4603      	mov	r3, r0
 801519e:	73fb      	strb	r3, [r7, #15]
      break;
 80151a0:	bf00      	nop
  }

  return ret;
 80151a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80151a4:	4618      	mov	r0, r3
 80151a6:	3710      	adds	r7, #16
 80151a8:	46bd      	mov	sp, r7
 80151aa:	bd80      	pop	{r7, pc}

080151ac <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80151ac:	b580      	push	{r7, lr}
 80151ae:	b086      	sub	sp, #24
 80151b0:	af00      	add	r7, sp, #0
 80151b2:	60f8      	str	r0, [r7, #12]
 80151b4:	460b      	mov	r3, r1
 80151b6:	607a      	str	r2, [r7, #4]
 80151b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80151ba:	2300      	movs	r3, #0
 80151bc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80151be:	7afb      	ldrb	r3, [r7, #11]
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	d16e      	bne.n	80152a2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80151ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80151d2:	2b03      	cmp	r3, #3
 80151d4:	f040 8098 	bne.w	8015308 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80151d8:	693b      	ldr	r3, [r7, #16]
 80151da:	689a      	ldr	r2, [r3, #8]
 80151dc:	693b      	ldr	r3, [r7, #16]
 80151de:	68db      	ldr	r3, [r3, #12]
 80151e0:	429a      	cmp	r2, r3
 80151e2:	d913      	bls.n	801520c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80151e4:	693b      	ldr	r3, [r7, #16]
 80151e6:	689a      	ldr	r2, [r3, #8]
 80151e8:	693b      	ldr	r3, [r7, #16]
 80151ea:	68db      	ldr	r3, [r3, #12]
 80151ec:	1ad2      	subs	r2, r2, r3
 80151ee:	693b      	ldr	r3, [r7, #16]
 80151f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80151f2:	693b      	ldr	r3, [r7, #16]
 80151f4:	68da      	ldr	r2, [r3, #12]
 80151f6:	693b      	ldr	r3, [r7, #16]
 80151f8:	689b      	ldr	r3, [r3, #8]
 80151fa:	4293      	cmp	r3, r2
 80151fc:	bf28      	it	cs
 80151fe:	4613      	movcs	r3, r2
 8015200:	461a      	mov	r2, r3
 8015202:	6879      	ldr	r1, [r7, #4]
 8015204:	68f8      	ldr	r0, [r7, #12]
 8015206:	f001 f98a 	bl	801651e <USBD_CtlContinueRx>
 801520a:	e07d      	b.n	8015308 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015212:	f003 031f 	and.w	r3, r3, #31
 8015216:	2b02      	cmp	r3, #2
 8015218:	d014      	beq.n	8015244 <USBD_LL_DataOutStage+0x98>
 801521a:	2b02      	cmp	r3, #2
 801521c:	d81d      	bhi.n	801525a <USBD_LL_DataOutStage+0xae>
 801521e:	2b00      	cmp	r3, #0
 8015220:	d002      	beq.n	8015228 <USBD_LL_DataOutStage+0x7c>
 8015222:	2b01      	cmp	r3, #1
 8015224:	d003      	beq.n	801522e <USBD_LL_DataOutStage+0x82>
 8015226:	e018      	b.n	801525a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8015228:	2300      	movs	r3, #0
 801522a:	75bb      	strb	r3, [r7, #22]
            break;
 801522c:	e018      	b.n	8015260 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015234:	b2db      	uxtb	r3, r3
 8015236:	4619      	mov	r1, r3
 8015238:	68f8      	ldr	r0, [r7, #12]
 801523a:	f000 fa64 	bl	8015706 <USBD_CoreFindIF>
 801523e:	4603      	mov	r3, r0
 8015240:	75bb      	strb	r3, [r7, #22]
            break;
 8015242:	e00d      	b.n	8015260 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801524a:	b2db      	uxtb	r3, r3
 801524c:	4619      	mov	r1, r3
 801524e:	68f8      	ldr	r0, [r7, #12]
 8015250:	f000 fa66 	bl	8015720 <USBD_CoreFindEP>
 8015254:	4603      	mov	r3, r0
 8015256:	75bb      	strb	r3, [r7, #22]
            break;
 8015258:	e002      	b.n	8015260 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801525a:	2300      	movs	r3, #0
 801525c:	75bb      	strb	r3, [r7, #22]
            break;
 801525e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8015260:	7dbb      	ldrb	r3, [r7, #22]
 8015262:	2b00      	cmp	r3, #0
 8015264:	d119      	bne.n	801529a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801526c:	b2db      	uxtb	r3, r3
 801526e:	2b03      	cmp	r3, #3
 8015270:	d113      	bne.n	801529a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8015272:	7dba      	ldrb	r2, [r7, #22]
 8015274:	68fb      	ldr	r3, [r7, #12]
 8015276:	32ae      	adds	r2, #174	; 0xae
 8015278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801527c:	691b      	ldr	r3, [r3, #16]
 801527e:	2b00      	cmp	r3, #0
 8015280:	d00b      	beq.n	801529a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8015282:	7dba      	ldrb	r2, [r7, #22]
 8015284:	68fb      	ldr	r3, [r7, #12]
 8015286:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801528a:	7dba      	ldrb	r2, [r7, #22]
 801528c:	68fb      	ldr	r3, [r7, #12]
 801528e:	32ae      	adds	r2, #174	; 0xae
 8015290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015294:	691b      	ldr	r3, [r3, #16]
 8015296:	68f8      	ldr	r0, [r7, #12]
 8015298:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801529a:	68f8      	ldr	r0, [r7, #12]
 801529c:	f001 f950 	bl	8016540 <USBD_CtlSendStatus>
 80152a0:	e032      	b.n	8015308 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80152a2:	7afb      	ldrb	r3, [r7, #11]
 80152a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80152a8:	b2db      	uxtb	r3, r3
 80152aa:	4619      	mov	r1, r3
 80152ac:	68f8      	ldr	r0, [r7, #12]
 80152ae:	f000 fa37 	bl	8015720 <USBD_CoreFindEP>
 80152b2:	4603      	mov	r3, r0
 80152b4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80152b6:	7dbb      	ldrb	r3, [r7, #22]
 80152b8:	2bff      	cmp	r3, #255	; 0xff
 80152ba:	d025      	beq.n	8015308 <USBD_LL_DataOutStage+0x15c>
 80152bc:	7dbb      	ldrb	r3, [r7, #22]
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d122      	bne.n	8015308 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80152c8:	b2db      	uxtb	r3, r3
 80152ca:	2b03      	cmp	r3, #3
 80152cc:	d117      	bne.n	80152fe <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80152ce:	7dba      	ldrb	r2, [r7, #22]
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	32ae      	adds	r2, #174	; 0xae
 80152d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152d8:	699b      	ldr	r3, [r3, #24]
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d00f      	beq.n	80152fe <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80152de:	7dba      	ldrb	r2, [r7, #22]
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80152e6:	7dba      	ldrb	r2, [r7, #22]
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	32ae      	adds	r2, #174	; 0xae
 80152ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152f0:	699b      	ldr	r3, [r3, #24]
 80152f2:	7afa      	ldrb	r2, [r7, #11]
 80152f4:	4611      	mov	r1, r2
 80152f6:	68f8      	ldr	r0, [r7, #12]
 80152f8:	4798      	blx	r3
 80152fa:	4603      	mov	r3, r0
 80152fc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80152fe:	7dfb      	ldrb	r3, [r7, #23]
 8015300:	2b00      	cmp	r3, #0
 8015302:	d001      	beq.n	8015308 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8015304:	7dfb      	ldrb	r3, [r7, #23]
 8015306:	e000      	b.n	801530a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8015308:	2300      	movs	r3, #0
}
 801530a:	4618      	mov	r0, r3
 801530c:	3718      	adds	r7, #24
 801530e:	46bd      	mov	sp, r7
 8015310:	bd80      	pop	{r7, pc}

08015312 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015312:	b580      	push	{r7, lr}
 8015314:	b086      	sub	sp, #24
 8015316:	af00      	add	r7, sp, #0
 8015318:	60f8      	str	r0, [r7, #12]
 801531a:	460b      	mov	r3, r1
 801531c:	607a      	str	r2, [r7, #4]
 801531e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8015320:	7afb      	ldrb	r3, [r7, #11]
 8015322:	2b00      	cmp	r3, #0
 8015324:	d16f      	bne.n	8015406 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8015326:	68fb      	ldr	r3, [r7, #12]
 8015328:	3314      	adds	r3, #20
 801532a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015332:	2b02      	cmp	r3, #2
 8015334:	d15a      	bne.n	80153ec <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8015336:	693b      	ldr	r3, [r7, #16]
 8015338:	689a      	ldr	r2, [r3, #8]
 801533a:	693b      	ldr	r3, [r7, #16]
 801533c:	68db      	ldr	r3, [r3, #12]
 801533e:	429a      	cmp	r2, r3
 8015340:	d914      	bls.n	801536c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015342:	693b      	ldr	r3, [r7, #16]
 8015344:	689a      	ldr	r2, [r3, #8]
 8015346:	693b      	ldr	r3, [r7, #16]
 8015348:	68db      	ldr	r3, [r3, #12]
 801534a:	1ad2      	subs	r2, r2, r3
 801534c:	693b      	ldr	r3, [r7, #16]
 801534e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015350:	693b      	ldr	r3, [r7, #16]
 8015352:	689b      	ldr	r3, [r3, #8]
 8015354:	461a      	mov	r2, r3
 8015356:	6879      	ldr	r1, [r7, #4]
 8015358:	68f8      	ldr	r0, [r7, #12]
 801535a:	f001 f8b2 	bl	80164c2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801535e:	2300      	movs	r3, #0
 8015360:	2200      	movs	r2, #0
 8015362:	2100      	movs	r1, #0
 8015364:	68f8      	ldr	r0, [r7, #12]
 8015366:	f001 fe1f 	bl	8016fa8 <USBD_LL_PrepareReceive>
 801536a:	e03f      	b.n	80153ec <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801536c:	693b      	ldr	r3, [r7, #16]
 801536e:	68da      	ldr	r2, [r3, #12]
 8015370:	693b      	ldr	r3, [r7, #16]
 8015372:	689b      	ldr	r3, [r3, #8]
 8015374:	429a      	cmp	r2, r3
 8015376:	d11c      	bne.n	80153b2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8015378:	693b      	ldr	r3, [r7, #16]
 801537a:	685a      	ldr	r2, [r3, #4]
 801537c:	693b      	ldr	r3, [r7, #16]
 801537e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015380:	429a      	cmp	r2, r3
 8015382:	d316      	bcc.n	80153b2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015384:	693b      	ldr	r3, [r7, #16]
 8015386:	685a      	ldr	r2, [r3, #4]
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801538e:	429a      	cmp	r2, r3
 8015390:	d20f      	bcs.n	80153b2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015392:	2200      	movs	r2, #0
 8015394:	2100      	movs	r1, #0
 8015396:	68f8      	ldr	r0, [r7, #12]
 8015398:	f001 f893 	bl	80164c2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	2200      	movs	r2, #0
 80153a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80153a4:	2300      	movs	r3, #0
 80153a6:	2200      	movs	r2, #0
 80153a8:	2100      	movs	r1, #0
 80153aa:	68f8      	ldr	r0, [r7, #12]
 80153ac:	f001 fdfc 	bl	8016fa8 <USBD_LL_PrepareReceive>
 80153b0:	e01c      	b.n	80153ec <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80153b8:	b2db      	uxtb	r3, r3
 80153ba:	2b03      	cmp	r3, #3
 80153bc:	d10f      	bne.n	80153de <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80153be:	68fb      	ldr	r3, [r7, #12]
 80153c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153c4:	68db      	ldr	r3, [r3, #12]
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d009      	beq.n	80153de <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	2200      	movs	r2, #0
 80153ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80153d2:	68fb      	ldr	r3, [r7, #12]
 80153d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153d8:	68db      	ldr	r3, [r3, #12]
 80153da:	68f8      	ldr	r0, [r7, #12]
 80153dc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80153de:	2180      	movs	r1, #128	; 0x80
 80153e0:	68f8      	ldr	r0, [r7, #12]
 80153e2:	f001 fd37 	bl	8016e54 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80153e6:	68f8      	ldr	r0, [r7, #12]
 80153e8:	f001 f8bd 	bl	8016566 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80153ec:	68fb      	ldr	r3, [r7, #12]
 80153ee:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d03a      	beq.n	801546c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80153f6:	68f8      	ldr	r0, [r7, #12]
 80153f8:	f7ff fe42 	bl	8015080 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	2200      	movs	r2, #0
 8015400:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015404:	e032      	b.n	801546c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8015406:	7afb      	ldrb	r3, [r7, #11]
 8015408:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801540c:	b2db      	uxtb	r3, r3
 801540e:	4619      	mov	r1, r3
 8015410:	68f8      	ldr	r0, [r7, #12]
 8015412:	f000 f985 	bl	8015720 <USBD_CoreFindEP>
 8015416:	4603      	mov	r3, r0
 8015418:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801541a:	7dfb      	ldrb	r3, [r7, #23]
 801541c:	2bff      	cmp	r3, #255	; 0xff
 801541e:	d025      	beq.n	801546c <USBD_LL_DataInStage+0x15a>
 8015420:	7dfb      	ldrb	r3, [r7, #23]
 8015422:	2b00      	cmp	r3, #0
 8015424:	d122      	bne.n	801546c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015426:	68fb      	ldr	r3, [r7, #12]
 8015428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801542c:	b2db      	uxtb	r3, r3
 801542e:	2b03      	cmp	r3, #3
 8015430:	d11c      	bne.n	801546c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8015432:	7dfa      	ldrb	r2, [r7, #23]
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	32ae      	adds	r2, #174	; 0xae
 8015438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801543c:	695b      	ldr	r3, [r3, #20]
 801543e:	2b00      	cmp	r3, #0
 8015440:	d014      	beq.n	801546c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8015442:	7dfa      	ldrb	r2, [r7, #23]
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801544a:	7dfa      	ldrb	r2, [r7, #23]
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	32ae      	adds	r2, #174	; 0xae
 8015450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015454:	695b      	ldr	r3, [r3, #20]
 8015456:	7afa      	ldrb	r2, [r7, #11]
 8015458:	4611      	mov	r1, r2
 801545a:	68f8      	ldr	r0, [r7, #12]
 801545c:	4798      	blx	r3
 801545e:	4603      	mov	r3, r0
 8015460:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8015462:	7dbb      	ldrb	r3, [r7, #22]
 8015464:	2b00      	cmp	r3, #0
 8015466:	d001      	beq.n	801546c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8015468:	7dbb      	ldrb	r3, [r7, #22]
 801546a:	e000      	b.n	801546e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801546c:	2300      	movs	r3, #0
}
 801546e:	4618      	mov	r0, r3
 8015470:	3718      	adds	r7, #24
 8015472:	46bd      	mov	sp, r7
 8015474:	bd80      	pop	{r7, pc}

08015476 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015476:	b580      	push	{r7, lr}
 8015478:	b084      	sub	sp, #16
 801547a:	af00      	add	r7, sp, #0
 801547c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801547e:	2300      	movs	r3, #0
 8015480:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	2201      	movs	r2, #1
 8015486:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	2200      	movs	r2, #0
 801548e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	2200      	movs	r2, #0
 8015496:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	2200      	movs	r2, #0
 801549c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	2200      	movs	r2, #0
 80154a4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d014      	beq.n	80154dc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154b8:	685b      	ldr	r3, [r3, #4]
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d00e      	beq.n	80154dc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154c4:	685b      	ldr	r3, [r3, #4]
 80154c6:	687a      	ldr	r2, [r7, #4]
 80154c8:	6852      	ldr	r2, [r2, #4]
 80154ca:	b2d2      	uxtb	r2, r2
 80154cc:	4611      	mov	r1, r2
 80154ce:	6878      	ldr	r0, [r7, #4]
 80154d0:	4798      	blx	r3
 80154d2:	4603      	mov	r3, r0
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d001      	beq.n	80154dc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80154d8:	2303      	movs	r3, #3
 80154da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80154dc:	2340      	movs	r3, #64	; 0x40
 80154de:	2200      	movs	r2, #0
 80154e0:	2100      	movs	r1, #0
 80154e2:	6878      	ldr	r0, [r7, #4]
 80154e4:	f001 fc71 	bl	8016dca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	2201      	movs	r2, #1
 80154ec:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	2240      	movs	r2, #64	; 0x40
 80154f4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80154f8:	2340      	movs	r3, #64	; 0x40
 80154fa:	2200      	movs	r2, #0
 80154fc:	2180      	movs	r1, #128	; 0x80
 80154fe:	6878      	ldr	r0, [r7, #4]
 8015500:	f001 fc63 	bl	8016dca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	2201      	movs	r2, #1
 8015508:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	2240      	movs	r2, #64	; 0x40
 801550e:	621a      	str	r2, [r3, #32]

  return ret;
 8015510:	7bfb      	ldrb	r3, [r7, #15]
}
 8015512:	4618      	mov	r0, r3
 8015514:	3710      	adds	r7, #16
 8015516:	46bd      	mov	sp, r7
 8015518:	bd80      	pop	{r7, pc}

0801551a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801551a:	b480      	push	{r7}
 801551c:	b083      	sub	sp, #12
 801551e:	af00      	add	r7, sp, #0
 8015520:	6078      	str	r0, [r7, #4]
 8015522:	460b      	mov	r3, r1
 8015524:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	78fa      	ldrb	r2, [r7, #3]
 801552a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801552c:	2300      	movs	r3, #0
}
 801552e:	4618      	mov	r0, r3
 8015530:	370c      	adds	r7, #12
 8015532:	46bd      	mov	sp, r7
 8015534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015538:	4770      	bx	lr

0801553a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801553a:	b480      	push	{r7}
 801553c:	b083      	sub	sp, #12
 801553e:	af00      	add	r7, sp, #0
 8015540:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015548:	b2db      	uxtb	r3, r3
 801554a:	2b04      	cmp	r3, #4
 801554c:	d006      	beq.n	801555c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015554:	b2da      	uxtb	r2, r3
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	2204      	movs	r2, #4
 8015560:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015564:	2300      	movs	r3, #0
}
 8015566:	4618      	mov	r0, r3
 8015568:	370c      	adds	r7, #12
 801556a:	46bd      	mov	sp, r7
 801556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015570:	4770      	bx	lr

08015572 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015572:	b480      	push	{r7}
 8015574:	b083      	sub	sp, #12
 8015576:	af00      	add	r7, sp, #0
 8015578:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015580:	b2db      	uxtb	r3, r3
 8015582:	2b04      	cmp	r3, #4
 8015584:	d106      	bne.n	8015594 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801558c:	b2da      	uxtb	r2, r3
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8015594:	2300      	movs	r3, #0
}
 8015596:	4618      	mov	r0, r3
 8015598:	370c      	adds	r7, #12
 801559a:	46bd      	mov	sp, r7
 801559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a0:	4770      	bx	lr

080155a2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80155a2:	b580      	push	{r7, lr}
 80155a4:	b082      	sub	sp, #8
 80155a6:	af00      	add	r7, sp, #0
 80155a8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80155b0:	b2db      	uxtb	r3, r3
 80155b2:	2b03      	cmp	r3, #3
 80155b4:	d110      	bne.n	80155d8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d00b      	beq.n	80155d8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155c6:	69db      	ldr	r3, [r3, #28]
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	d005      	beq.n	80155d8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155d2:	69db      	ldr	r3, [r3, #28]
 80155d4:	6878      	ldr	r0, [r7, #4]
 80155d6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80155d8:	2300      	movs	r3, #0
}
 80155da:	4618      	mov	r0, r3
 80155dc:	3708      	adds	r7, #8
 80155de:	46bd      	mov	sp, r7
 80155e0:	bd80      	pop	{r7, pc}

080155e2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80155e2:	b580      	push	{r7, lr}
 80155e4:	b082      	sub	sp, #8
 80155e6:	af00      	add	r7, sp, #0
 80155e8:	6078      	str	r0, [r7, #4]
 80155ea:	460b      	mov	r3, r1
 80155ec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	32ae      	adds	r2, #174	; 0xae
 80155f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d101      	bne.n	8015604 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8015600:	2303      	movs	r3, #3
 8015602:	e01c      	b.n	801563e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801560a:	b2db      	uxtb	r3, r3
 801560c:	2b03      	cmp	r3, #3
 801560e:	d115      	bne.n	801563c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	32ae      	adds	r2, #174	; 0xae
 801561a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801561e:	6a1b      	ldr	r3, [r3, #32]
 8015620:	2b00      	cmp	r3, #0
 8015622:	d00b      	beq.n	801563c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	32ae      	adds	r2, #174	; 0xae
 801562e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015632:	6a1b      	ldr	r3, [r3, #32]
 8015634:	78fa      	ldrb	r2, [r7, #3]
 8015636:	4611      	mov	r1, r2
 8015638:	6878      	ldr	r0, [r7, #4]
 801563a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801563c:	2300      	movs	r3, #0
}
 801563e:	4618      	mov	r0, r3
 8015640:	3708      	adds	r7, #8
 8015642:	46bd      	mov	sp, r7
 8015644:	bd80      	pop	{r7, pc}

08015646 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015646:	b580      	push	{r7, lr}
 8015648:	b082      	sub	sp, #8
 801564a:	af00      	add	r7, sp, #0
 801564c:	6078      	str	r0, [r7, #4]
 801564e:	460b      	mov	r3, r1
 8015650:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	32ae      	adds	r2, #174	; 0xae
 801565c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015660:	2b00      	cmp	r3, #0
 8015662:	d101      	bne.n	8015668 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015664:	2303      	movs	r3, #3
 8015666:	e01c      	b.n	80156a2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801566e:	b2db      	uxtb	r3, r3
 8015670:	2b03      	cmp	r3, #3
 8015672:	d115      	bne.n	80156a0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	32ae      	adds	r2, #174	; 0xae
 801567e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015684:	2b00      	cmp	r3, #0
 8015686:	d00b      	beq.n	80156a0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	32ae      	adds	r2, #174	; 0xae
 8015692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015698:	78fa      	ldrb	r2, [r7, #3]
 801569a:	4611      	mov	r1, r2
 801569c:	6878      	ldr	r0, [r7, #4]
 801569e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80156a0:	2300      	movs	r3, #0
}
 80156a2:	4618      	mov	r0, r3
 80156a4:	3708      	adds	r7, #8
 80156a6:	46bd      	mov	sp, r7
 80156a8:	bd80      	pop	{r7, pc}

080156aa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80156aa:	b480      	push	{r7}
 80156ac:	b083      	sub	sp, #12
 80156ae:	af00      	add	r7, sp, #0
 80156b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80156b2:	2300      	movs	r3, #0
}
 80156b4:	4618      	mov	r0, r3
 80156b6:	370c      	adds	r7, #12
 80156b8:	46bd      	mov	sp, r7
 80156ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156be:	4770      	bx	lr

080156c0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80156c0:	b580      	push	{r7, lr}
 80156c2:	b084      	sub	sp, #16
 80156c4:	af00      	add	r7, sp, #0
 80156c6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80156c8:	2300      	movs	r3, #0
 80156ca:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	2201      	movs	r2, #1
 80156d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d00e      	beq.n	80156fc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80156e4:	685b      	ldr	r3, [r3, #4]
 80156e6:	687a      	ldr	r2, [r7, #4]
 80156e8:	6852      	ldr	r2, [r2, #4]
 80156ea:	b2d2      	uxtb	r2, r2
 80156ec:	4611      	mov	r1, r2
 80156ee:	6878      	ldr	r0, [r7, #4]
 80156f0:	4798      	blx	r3
 80156f2:	4603      	mov	r3, r0
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d001      	beq.n	80156fc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80156f8:	2303      	movs	r3, #3
 80156fa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80156fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80156fe:	4618      	mov	r0, r3
 8015700:	3710      	adds	r7, #16
 8015702:	46bd      	mov	sp, r7
 8015704:	bd80      	pop	{r7, pc}

08015706 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015706:	b480      	push	{r7}
 8015708:	b083      	sub	sp, #12
 801570a:	af00      	add	r7, sp, #0
 801570c:	6078      	str	r0, [r7, #4]
 801570e:	460b      	mov	r3, r1
 8015710:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015712:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015714:	4618      	mov	r0, r3
 8015716:	370c      	adds	r7, #12
 8015718:	46bd      	mov	sp, r7
 801571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801571e:	4770      	bx	lr

08015720 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015720:	b480      	push	{r7}
 8015722:	b083      	sub	sp, #12
 8015724:	af00      	add	r7, sp, #0
 8015726:	6078      	str	r0, [r7, #4]
 8015728:	460b      	mov	r3, r1
 801572a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801572c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801572e:	4618      	mov	r0, r3
 8015730:	370c      	adds	r7, #12
 8015732:	46bd      	mov	sp, r7
 8015734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015738:	4770      	bx	lr

0801573a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801573a:	b580      	push	{r7, lr}
 801573c:	b086      	sub	sp, #24
 801573e:	af00      	add	r7, sp, #0
 8015740:	6078      	str	r0, [r7, #4]
 8015742:	460b      	mov	r3, r1
 8015744:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801574e:	2300      	movs	r3, #0
 8015750:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	885b      	ldrh	r3, [r3, #2]
 8015756:	b29a      	uxth	r2, r3
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	781b      	ldrb	r3, [r3, #0]
 801575c:	b29b      	uxth	r3, r3
 801575e:	429a      	cmp	r2, r3
 8015760:	d920      	bls.n	80157a4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	781b      	ldrb	r3, [r3, #0]
 8015766:	b29b      	uxth	r3, r3
 8015768:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801576a:	e013      	b.n	8015794 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801576c:	f107 030a 	add.w	r3, r7, #10
 8015770:	4619      	mov	r1, r3
 8015772:	6978      	ldr	r0, [r7, #20]
 8015774:	f000 f81b 	bl	80157ae <USBD_GetNextDesc>
 8015778:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801577a:	697b      	ldr	r3, [r7, #20]
 801577c:	785b      	ldrb	r3, [r3, #1]
 801577e:	2b05      	cmp	r3, #5
 8015780:	d108      	bne.n	8015794 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8015782:	697b      	ldr	r3, [r7, #20]
 8015784:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8015786:	693b      	ldr	r3, [r7, #16]
 8015788:	789b      	ldrb	r3, [r3, #2]
 801578a:	78fa      	ldrb	r2, [r7, #3]
 801578c:	429a      	cmp	r2, r3
 801578e:	d008      	beq.n	80157a2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8015790:	2300      	movs	r3, #0
 8015792:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	885b      	ldrh	r3, [r3, #2]
 8015798:	b29a      	uxth	r2, r3
 801579a:	897b      	ldrh	r3, [r7, #10]
 801579c:	429a      	cmp	r2, r3
 801579e:	d8e5      	bhi.n	801576c <USBD_GetEpDesc+0x32>
 80157a0:	e000      	b.n	80157a4 <USBD_GetEpDesc+0x6a>
          break;
 80157a2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80157a4:	693b      	ldr	r3, [r7, #16]
}
 80157a6:	4618      	mov	r0, r3
 80157a8:	3718      	adds	r7, #24
 80157aa:	46bd      	mov	sp, r7
 80157ac:	bd80      	pop	{r7, pc}

080157ae <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80157ae:	b480      	push	{r7}
 80157b0:	b085      	sub	sp, #20
 80157b2:	af00      	add	r7, sp, #0
 80157b4:	6078      	str	r0, [r7, #4]
 80157b6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80157bc:	683b      	ldr	r3, [r7, #0]
 80157be:	881a      	ldrh	r2, [r3, #0]
 80157c0:	68fb      	ldr	r3, [r7, #12]
 80157c2:	781b      	ldrb	r3, [r3, #0]
 80157c4:	b29b      	uxth	r3, r3
 80157c6:	4413      	add	r3, r2
 80157c8:	b29a      	uxth	r2, r3
 80157ca:	683b      	ldr	r3, [r7, #0]
 80157cc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	781b      	ldrb	r3, [r3, #0]
 80157d2:	461a      	mov	r2, r3
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	4413      	add	r3, r2
 80157d8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80157da:	68fb      	ldr	r3, [r7, #12]
}
 80157dc:	4618      	mov	r0, r3
 80157de:	3714      	adds	r7, #20
 80157e0:	46bd      	mov	sp, r7
 80157e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157e6:	4770      	bx	lr

080157e8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80157e8:	b480      	push	{r7}
 80157ea:	b087      	sub	sp, #28
 80157ec:	af00      	add	r7, sp, #0
 80157ee:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80157f4:	697b      	ldr	r3, [r7, #20]
 80157f6:	781b      	ldrb	r3, [r3, #0]
 80157f8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80157fa:	697b      	ldr	r3, [r7, #20]
 80157fc:	3301      	adds	r3, #1
 80157fe:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015800:	697b      	ldr	r3, [r7, #20]
 8015802:	781b      	ldrb	r3, [r3, #0]
 8015804:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015806:	8a3b      	ldrh	r3, [r7, #16]
 8015808:	021b      	lsls	r3, r3, #8
 801580a:	b21a      	sxth	r2, r3
 801580c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015810:	4313      	orrs	r3, r2
 8015812:	b21b      	sxth	r3, r3
 8015814:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015816:	89fb      	ldrh	r3, [r7, #14]
}
 8015818:	4618      	mov	r0, r3
 801581a:	371c      	adds	r7, #28
 801581c:	46bd      	mov	sp, r7
 801581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015822:	4770      	bx	lr

08015824 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015824:	b580      	push	{r7, lr}
 8015826:	b084      	sub	sp, #16
 8015828:	af00      	add	r7, sp, #0
 801582a:	6078      	str	r0, [r7, #4]
 801582c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801582e:	2300      	movs	r3, #0
 8015830:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015832:	683b      	ldr	r3, [r7, #0]
 8015834:	781b      	ldrb	r3, [r3, #0]
 8015836:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801583a:	2b40      	cmp	r3, #64	; 0x40
 801583c:	d005      	beq.n	801584a <USBD_StdDevReq+0x26>
 801583e:	2b40      	cmp	r3, #64	; 0x40
 8015840:	d857      	bhi.n	80158f2 <USBD_StdDevReq+0xce>
 8015842:	2b00      	cmp	r3, #0
 8015844:	d00f      	beq.n	8015866 <USBD_StdDevReq+0x42>
 8015846:	2b20      	cmp	r3, #32
 8015848:	d153      	bne.n	80158f2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	32ae      	adds	r2, #174	; 0xae
 8015854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015858:	689b      	ldr	r3, [r3, #8]
 801585a:	6839      	ldr	r1, [r7, #0]
 801585c:	6878      	ldr	r0, [r7, #4]
 801585e:	4798      	blx	r3
 8015860:	4603      	mov	r3, r0
 8015862:	73fb      	strb	r3, [r7, #15]
      break;
 8015864:	e04a      	b.n	80158fc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015866:	683b      	ldr	r3, [r7, #0]
 8015868:	785b      	ldrb	r3, [r3, #1]
 801586a:	2b09      	cmp	r3, #9
 801586c:	d83b      	bhi.n	80158e6 <USBD_StdDevReq+0xc2>
 801586e:	a201      	add	r2, pc, #4	; (adr r2, 8015874 <USBD_StdDevReq+0x50>)
 8015870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015874:	080158c9 	.word	0x080158c9
 8015878:	080158dd 	.word	0x080158dd
 801587c:	080158e7 	.word	0x080158e7
 8015880:	080158d3 	.word	0x080158d3
 8015884:	080158e7 	.word	0x080158e7
 8015888:	080158a7 	.word	0x080158a7
 801588c:	0801589d 	.word	0x0801589d
 8015890:	080158e7 	.word	0x080158e7
 8015894:	080158bf 	.word	0x080158bf
 8015898:	080158b1 	.word	0x080158b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801589c:	6839      	ldr	r1, [r7, #0]
 801589e:	6878      	ldr	r0, [r7, #4]
 80158a0:	f000 fa3c 	bl	8015d1c <USBD_GetDescriptor>
          break;
 80158a4:	e024      	b.n	80158f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80158a6:	6839      	ldr	r1, [r7, #0]
 80158a8:	6878      	ldr	r0, [r7, #4]
 80158aa:	f000 fba1 	bl	8015ff0 <USBD_SetAddress>
          break;
 80158ae:	e01f      	b.n	80158f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80158b0:	6839      	ldr	r1, [r7, #0]
 80158b2:	6878      	ldr	r0, [r7, #4]
 80158b4:	f000 fbe0 	bl	8016078 <USBD_SetConfig>
 80158b8:	4603      	mov	r3, r0
 80158ba:	73fb      	strb	r3, [r7, #15]
          break;
 80158bc:	e018      	b.n	80158f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80158be:	6839      	ldr	r1, [r7, #0]
 80158c0:	6878      	ldr	r0, [r7, #4]
 80158c2:	f000 fc83 	bl	80161cc <USBD_GetConfig>
          break;
 80158c6:	e013      	b.n	80158f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80158c8:	6839      	ldr	r1, [r7, #0]
 80158ca:	6878      	ldr	r0, [r7, #4]
 80158cc:	f000 fcb4 	bl	8016238 <USBD_GetStatus>
          break;
 80158d0:	e00e      	b.n	80158f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80158d2:	6839      	ldr	r1, [r7, #0]
 80158d4:	6878      	ldr	r0, [r7, #4]
 80158d6:	f000 fce3 	bl	80162a0 <USBD_SetFeature>
          break;
 80158da:	e009      	b.n	80158f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80158dc:	6839      	ldr	r1, [r7, #0]
 80158de:	6878      	ldr	r0, [r7, #4]
 80158e0:	f000 fd07 	bl	80162f2 <USBD_ClrFeature>
          break;
 80158e4:	e004      	b.n	80158f0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80158e6:	6839      	ldr	r1, [r7, #0]
 80158e8:	6878      	ldr	r0, [r7, #4]
 80158ea:	f000 fd5e 	bl	80163aa <USBD_CtlError>
          break;
 80158ee:	bf00      	nop
      }
      break;
 80158f0:	e004      	b.n	80158fc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80158f2:	6839      	ldr	r1, [r7, #0]
 80158f4:	6878      	ldr	r0, [r7, #4]
 80158f6:	f000 fd58 	bl	80163aa <USBD_CtlError>
      break;
 80158fa:	bf00      	nop
  }

  return ret;
 80158fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80158fe:	4618      	mov	r0, r3
 8015900:	3710      	adds	r7, #16
 8015902:	46bd      	mov	sp, r7
 8015904:	bd80      	pop	{r7, pc}
 8015906:	bf00      	nop

08015908 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015908:	b580      	push	{r7, lr}
 801590a:	b084      	sub	sp, #16
 801590c:	af00      	add	r7, sp, #0
 801590e:	6078      	str	r0, [r7, #4]
 8015910:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015912:	2300      	movs	r3, #0
 8015914:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015916:	683b      	ldr	r3, [r7, #0]
 8015918:	781b      	ldrb	r3, [r3, #0]
 801591a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801591e:	2b40      	cmp	r3, #64	; 0x40
 8015920:	d005      	beq.n	801592e <USBD_StdItfReq+0x26>
 8015922:	2b40      	cmp	r3, #64	; 0x40
 8015924:	d852      	bhi.n	80159cc <USBD_StdItfReq+0xc4>
 8015926:	2b00      	cmp	r3, #0
 8015928:	d001      	beq.n	801592e <USBD_StdItfReq+0x26>
 801592a:	2b20      	cmp	r3, #32
 801592c:	d14e      	bne.n	80159cc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015934:	b2db      	uxtb	r3, r3
 8015936:	3b01      	subs	r3, #1
 8015938:	2b02      	cmp	r3, #2
 801593a:	d840      	bhi.n	80159be <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801593c:	683b      	ldr	r3, [r7, #0]
 801593e:	889b      	ldrh	r3, [r3, #4]
 8015940:	b2db      	uxtb	r3, r3
 8015942:	2b01      	cmp	r3, #1
 8015944:	d836      	bhi.n	80159b4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015946:	683b      	ldr	r3, [r7, #0]
 8015948:	889b      	ldrh	r3, [r3, #4]
 801594a:	b2db      	uxtb	r3, r3
 801594c:	4619      	mov	r1, r3
 801594e:	6878      	ldr	r0, [r7, #4]
 8015950:	f7ff fed9 	bl	8015706 <USBD_CoreFindIF>
 8015954:	4603      	mov	r3, r0
 8015956:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015958:	7bbb      	ldrb	r3, [r7, #14]
 801595a:	2bff      	cmp	r3, #255	; 0xff
 801595c:	d01d      	beq.n	801599a <USBD_StdItfReq+0x92>
 801595e:	7bbb      	ldrb	r3, [r7, #14]
 8015960:	2b00      	cmp	r3, #0
 8015962:	d11a      	bne.n	801599a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015964:	7bba      	ldrb	r2, [r7, #14]
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	32ae      	adds	r2, #174	; 0xae
 801596a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801596e:	689b      	ldr	r3, [r3, #8]
 8015970:	2b00      	cmp	r3, #0
 8015972:	d00f      	beq.n	8015994 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8015974:	7bba      	ldrb	r2, [r7, #14]
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801597c:	7bba      	ldrb	r2, [r7, #14]
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	32ae      	adds	r2, #174	; 0xae
 8015982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015986:	689b      	ldr	r3, [r3, #8]
 8015988:	6839      	ldr	r1, [r7, #0]
 801598a:	6878      	ldr	r0, [r7, #4]
 801598c:	4798      	blx	r3
 801598e:	4603      	mov	r3, r0
 8015990:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015992:	e004      	b.n	801599e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8015994:	2303      	movs	r3, #3
 8015996:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015998:	e001      	b.n	801599e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801599a:	2303      	movs	r3, #3
 801599c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801599e:	683b      	ldr	r3, [r7, #0]
 80159a0:	88db      	ldrh	r3, [r3, #6]
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d110      	bne.n	80159c8 <USBD_StdItfReq+0xc0>
 80159a6:	7bfb      	ldrb	r3, [r7, #15]
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d10d      	bne.n	80159c8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80159ac:	6878      	ldr	r0, [r7, #4]
 80159ae:	f000 fdc7 	bl	8016540 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80159b2:	e009      	b.n	80159c8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80159b4:	6839      	ldr	r1, [r7, #0]
 80159b6:	6878      	ldr	r0, [r7, #4]
 80159b8:	f000 fcf7 	bl	80163aa <USBD_CtlError>
          break;
 80159bc:	e004      	b.n	80159c8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80159be:	6839      	ldr	r1, [r7, #0]
 80159c0:	6878      	ldr	r0, [r7, #4]
 80159c2:	f000 fcf2 	bl	80163aa <USBD_CtlError>
          break;
 80159c6:	e000      	b.n	80159ca <USBD_StdItfReq+0xc2>
          break;
 80159c8:	bf00      	nop
      }
      break;
 80159ca:	e004      	b.n	80159d6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80159cc:	6839      	ldr	r1, [r7, #0]
 80159ce:	6878      	ldr	r0, [r7, #4]
 80159d0:	f000 fceb 	bl	80163aa <USBD_CtlError>
      break;
 80159d4:	bf00      	nop
  }

  return ret;
 80159d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80159d8:	4618      	mov	r0, r3
 80159da:	3710      	adds	r7, #16
 80159dc:	46bd      	mov	sp, r7
 80159de:	bd80      	pop	{r7, pc}

080159e0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80159e0:	b580      	push	{r7, lr}
 80159e2:	b084      	sub	sp, #16
 80159e4:	af00      	add	r7, sp, #0
 80159e6:	6078      	str	r0, [r7, #4]
 80159e8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80159ea:	2300      	movs	r3, #0
 80159ec:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80159ee:	683b      	ldr	r3, [r7, #0]
 80159f0:	889b      	ldrh	r3, [r3, #4]
 80159f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80159f4:	683b      	ldr	r3, [r7, #0]
 80159f6:	781b      	ldrb	r3, [r3, #0]
 80159f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80159fc:	2b40      	cmp	r3, #64	; 0x40
 80159fe:	d007      	beq.n	8015a10 <USBD_StdEPReq+0x30>
 8015a00:	2b40      	cmp	r3, #64	; 0x40
 8015a02:	f200 817f 	bhi.w	8015d04 <USBD_StdEPReq+0x324>
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d02a      	beq.n	8015a60 <USBD_StdEPReq+0x80>
 8015a0a:	2b20      	cmp	r3, #32
 8015a0c:	f040 817a 	bne.w	8015d04 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8015a10:	7bbb      	ldrb	r3, [r7, #14]
 8015a12:	4619      	mov	r1, r3
 8015a14:	6878      	ldr	r0, [r7, #4]
 8015a16:	f7ff fe83 	bl	8015720 <USBD_CoreFindEP>
 8015a1a:	4603      	mov	r3, r0
 8015a1c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015a1e:	7b7b      	ldrb	r3, [r7, #13]
 8015a20:	2bff      	cmp	r3, #255	; 0xff
 8015a22:	f000 8174 	beq.w	8015d0e <USBD_StdEPReq+0x32e>
 8015a26:	7b7b      	ldrb	r3, [r7, #13]
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	f040 8170 	bne.w	8015d0e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8015a2e:	7b7a      	ldrb	r2, [r7, #13]
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8015a36:	7b7a      	ldrb	r2, [r7, #13]
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	32ae      	adds	r2, #174	; 0xae
 8015a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a40:	689b      	ldr	r3, [r3, #8]
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	f000 8163 	beq.w	8015d0e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015a48:	7b7a      	ldrb	r2, [r7, #13]
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	32ae      	adds	r2, #174	; 0xae
 8015a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a52:	689b      	ldr	r3, [r3, #8]
 8015a54:	6839      	ldr	r1, [r7, #0]
 8015a56:	6878      	ldr	r0, [r7, #4]
 8015a58:	4798      	blx	r3
 8015a5a:	4603      	mov	r3, r0
 8015a5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8015a5e:	e156      	b.n	8015d0e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015a60:	683b      	ldr	r3, [r7, #0]
 8015a62:	785b      	ldrb	r3, [r3, #1]
 8015a64:	2b03      	cmp	r3, #3
 8015a66:	d008      	beq.n	8015a7a <USBD_StdEPReq+0x9a>
 8015a68:	2b03      	cmp	r3, #3
 8015a6a:	f300 8145 	bgt.w	8015cf8 <USBD_StdEPReq+0x318>
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	f000 809b 	beq.w	8015baa <USBD_StdEPReq+0x1ca>
 8015a74:	2b01      	cmp	r3, #1
 8015a76:	d03c      	beq.n	8015af2 <USBD_StdEPReq+0x112>
 8015a78:	e13e      	b.n	8015cf8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a80:	b2db      	uxtb	r3, r3
 8015a82:	2b02      	cmp	r3, #2
 8015a84:	d002      	beq.n	8015a8c <USBD_StdEPReq+0xac>
 8015a86:	2b03      	cmp	r3, #3
 8015a88:	d016      	beq.n	8015ab8 <USBD_StdEPReq+0xd8>
 8015a8a:	e02c      	b.n	8015ae6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015a8c:	7bbb      	ldrb	r3, [r7, #14]
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d00d      	beq.n	8015aae <USBD_StdEPReq+0xce>
 8015a92:	7bbb      	ldrb	r3, [r7, #14]
 8015a94:	2b80      	cmp	r3, #128	; 0x80
 8015a96:	d00a      	beq.n	8015aae <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015a98:	7bbb      	ldrb	r3, [r7, #14]
 8015a9a:	4619      	mov	r1, r3
 8015a9c:	6878      	ldr	r0, [r7, #4]
 8015a9e:	f001 f9d9 	bl	8016e54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015aa2:	2180      	movs	r1, #128	; 0x80
 8015aa4:	6878      	ldr	r0, [r7, #4]
 8015aa6:	f001 f9d5 	bl	8016e54 <USBD_LL_StallEP>
 8015aaa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015aac:	e020      	b.n	8015af0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8015aae:	6839      	ldr	r1, [r7, #0]
 8015ab0:	6878      	ldr	r0, [r7, #4]
 8015ab2:	f000 fc7a 	bl	80163aa <USBD_CtlError>
              break;
 8015ab6:	e01b      	b.n	8015af0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015ab8:	683b      	ldr	r3, [r7, #0]
 8015aba:	885b      	ldrh	r3, [r3, #2]
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d10e      	bne.n	8015ade <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015ac0:	7bbb      	ldrb	r3, [r7, #14]
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d00b      	beq.n	8015ade <USBD_StdEPReq+0xfe>
 8015ac6:	7bbb      	ldrb	r3, [r7, #14]
 8015ac8:	2b80      	cmp	r3, #128	; 0x80
 8015aca:	d008      	beq.n	8015ade <USBD_StdEPReq+0xfe>
 8015acc:	683b      	ldr	r3, [r7, #0]
 8015ace:	88db      	ldrh	r3, [r3, #6]
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	d104      	bne.n	8015ade <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015ad4:	7bbb      	ldrb	r3, [r7, #14]
 8015ad6:	4619      	mov	r1, r3
 8015ad8:	6878      	ldr	r0, [r7, #4]
 8015ada:	f001 f9bb 	bl	8016e54 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8015ade:	6878      	ldr	r0, [r7, #4]
 8015ae0:	f000 fd2e 	bl	8016540 <USBD_CtlSendStatus>

              break;
 8015ae4:	e004      	b.n	8015af0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015ae6:	6839      	ldr	r1, [r7, #0]
 8015ae8:	6878      	ldr	r0, [r7, #4]
 8015aea:	f000 fc5e 	bl	80163aa <USBD_CtlError>
              break;
 8015aee:	bf00      	nop
          }
          break;
 8015af0:	e107      	b.n	8015d02 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015af8:	b2db      	uxtb	r3, r3
 8015afa:	2b02      	cmp	r3, #2
 8015afc:	d002      	beq.n	8015b04 <USBD_StdEPReq+0x124>
 8015afe:	2b03      	cmp	r3, #3
 8015b00:	d016      	beq.n	8015b30 <USBD_StdEPReq+0x150>
 8015b02:	e04b      	b.n	8015b9c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015b04:	7bbb      	ldrb	r3, [r7, #14]
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d00d      	beq.n	8015b26 <USBD_StdEPReq+0x146>
 8015b0a:	7bbb      	ldrb	r3, [r7, #14]
 8015b0c:	2b80      	cmp	r3, #128	; 0x80
 8015b0e:	d00a      	beq.n	8015b26 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015b10:	7bbb      	ldrb	r3, [r7, #14]
 8015b12:	4619      	mov	r1, r3
 8015b14:	6878      	ldr	r0, [r7, #4]
 8015b16:	f001 f99d 	bl	8016e54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015b1a:	2180      	movs	r1, #128	; 0x80
 8015b1c:	6878      	ldr	r0, [r7, #4]
 8015b1e:	f001 f999 	bl	8016e54 <USBD_LL_StallEP>
 8015b22:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015b24:	e040      	b.n	8015ba8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015b26:	6839      	ldr	r1, [r7, #0]
 8015b28:	6878      	ldr	r0, [r7, #4]
 8015b2a:	f000 fc3e 	bl	80163aa <USBD_CtlError>
              break;
 8015b2e:	e03b      	b.n	8015ba8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015b30:	683b      	ldr	r3, [r7, #0]
 8015b32:	885b      	ldrh	r3, [r3, #2]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d136      	bne.n	8015ba6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015b38:	7bbb      	ldrb	r3, [r7, #14]
 8015b3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d004      	beq.n	8015b4c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015b42:	7bbb      	ldrb	r3, [r7, #14]
 8015b44:	4619      	mov	r1, r3
 8015b46:	6878      	ldr	r0, [r7, #4]
 8015b48:	f001 f9a3 	bl	8016e92 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015b4c:	6878      	ldr	r0, [r7, #4]
 8015b4e:	f000 fcf7 	bl	8016540 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8015b52:	7bbb      	ldrb	r3, [r7, #14]
 8015b54:	4619      	mov	r1, r3
 8015b56:	6878      	ldr	r0, [r7, #4]
 8015b58:	f7ff fde2 	bl	8015720 <USBD_CoreFindEP>
 8015b5c:	4603      	mov	r3, r0
 8015b5e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015b60:	7b7b      	ldrb	r3, [r7, #13]
 8015b62:	2bff      	cmp	r3, #255	; 0xff
 8015b64:	d01f      	beq.n	8015ba6 <USBD_StdEPReq+0x1c6>
 8015b66:	7b7b      	ldrb	r3, [r7, #13]
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	d11c      	bne.n	8015ba6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8015b6c:	7b7a      	ldrb	r2, [r7, #13]
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8015b74:	7b7a      	ldrb	r2, [r7, #13]
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	32ae      	adds	r2, #174	; 0xae
 8015b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b7e:	689b      	ldr	r3, [r3, #8]
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d010      	beq.n	8015ba6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015b84:	7b7a      	ldrb	r2, [r7, #13]
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	32ae      	adds	r2, #174	; 0xae
 8015b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b8e:	689b      	ldr	r3, [r3, #8]
 8015b90:	6839      	ldr	r1, [r7, #0]
 8015b92:	6878      	ldr	r0, [r7, #4]
 8015b94:	4798      	blx	r3
 8015b96:	4603      	mov	r3, r0
 8015b98:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8015b9a:	e004      	b.n	8015ba6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8015b9c:	6839      	ldr	r1, [r7, #0]
 8015b9e:	6878      	ldr	r0, [r7, #4]
 8015ba0:	f000 fc03 	bl	80163aa <USBD_CtlError>
              break;
 8015ba4:	e000      	b.n	8015ba8 <USBD_StdEPReq+0x1c8>
              break;
 8015ba6:	bf00      	nop
          }
          break;
 8015ba8:	e0ab      	b.n	8015d02 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015bb0:	b2db      	uxtb	r3, r3
 8015bb2:	2b02      	cmp	r3, #2
 8015bb4:	d002      	beq.n	8015bbc <USBD_StdEPReq+0x1dc>
 8015bb6:	2b03      	cmp	r3, #3
 8015bb8:	d032      	beq.n	8015c20 <USBD_StdEPReq+0x240>
 8015bba:	e097      	b.n	8015cec <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015bbc:	7bbb      	ldrb	r3, [r7, #14]
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d007      	beq.n	8015bd2 <USBD_StdEPReq+0x1f2>
 8015bc2:	7bbb      	ldrb	r3, [r7, #14]
 8015bc4:	2b80      	cmp	r3, #128	; 0x80
 8015bc6:	d004      	beq.n	8015bd2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015bc8:	6839      	ldr	r1, [r7, #0]
 8015bca:	6878      	ldr	r0, [r7, #4]
 8015bcc:	f000 fbed 	bl	80163aa <USBD_CtlError>
                break;
 8015bd0:	e091      	b.n	8015cf6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015bd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	da0b      	bge.n	8015bf2 <USBD_StdEPReq+0x212>
 8015bda:	7bbb      	ldrb	r3, [r7, #14]
 8015bdc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015be0:	4613      	mov	r3, r2
 8015be2:	009b      	lsls	r3, r3, #2
 8015be4:	4413      	add	r3, r2
 8015be6:	009b      	lsls	r3, r3, #2
 8015be8:	3310      	adds	r3, #16
 8015bea:	687a      	ldr	r2, [r7, #4]
 8015bec:	4413      	add	r3, r2
 8015bee:	3304      	adds	r3, #4
 8015bf0:	e00b      	b.n	8015c0a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015bf2:	7bbb      	ldrb	r3, [r7, #14]
 8015bf4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015bf8:	4613      	mov	r3, r2
 8015bfa:	009b      	lsls	r3, r3, #2
 8015bfc:	4413      	add	r3, r2
 8015bfe:	009b      	lsls	r3, r3, #2
 8015c00:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015c04:	687a      	ldr	r2, [r7, #4]
 8015c06:	4413      	add	r3, r2
 8015c08:	3304      	adds	r3, #4
 8015c0a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015c0c:	68bb      	ldr	r3, [r7, #8]
 8015c0e:	2200      	movs	r2, #0
 8015c10:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015c12:	68bb      	ldr	r3, [r7, #8]
 8015c14:	2202      	movs	r2, #2
 8015c16:	4619      	mov	r1, r3
 8015c18:	6878      	ldr	r0, [r7, #4]
 8015c1a:	f000 fc37 	bl	801648c <USBD_CtlSendData>
              break;
 8015c1e:	e06a      	b.n	8015cf6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015c20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	da11      	bge.n	8015c4c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015c28:	7bbb      	ldrb	r3, [r7, #14]
 8015c2a:	f003 020f 	and.w	r2, r3, #15
 8015c2e:	6879      	ldr	r1, [r7, #4]
 8015c30:	4613      	mov	r3, r2
 8015c32:	009b      	lsls	r3, r3, #2
 8015c34:	4413      	add	r3, r2
 8015c36:	009b      	lsls	r3, r3, #2
 8015c38:	440b      	add	r3, r1
 8015c3a:	3324      	adds	r3, #36	; 0x24
 8015c3c:	881b      	ldrh	r3, [r3, #0]
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d117      	bne.n	8015c72 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015c42:	6839      	ldr	r1, [r7, #0]
 8015c44:	6878      	ldr	r0, [r7, #4]
 8015c46:	f000 fbb0 	bl	80163aa <USBD_CtlError>
                  break;
 8015c4a:	e054      	b.n	8015cf6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015c4c:	7bbb      	ldrb	r3, [r7, #14]
 8015c4e:	f003 020f 	and.w	r2, r3, #15
 8015c52:	6879      	ldr	r1, [r7, #4]
 8015c54:	4613      	mov	r3, r2
 8015c56:	009b      	lsls	r3, r3, #2
 8015c58:	4413      	add	r3, r2
 8015c5a:	009b      	lsls	r3, r3, #2
 8015c5c:	440b      	add	r3, r1
 8015c5e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015c62:	881b      	ldrh	r3, [r3, #0]
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d104      	bne.n	8015c72 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015c68:	6839      	ldr	r1, [r7, #0]
 8015c6a:	6878      	ldr	r0, [r7, #4]
 8015c6c:	f000 fb9d 	bl	80163aa <USBD_CtlError>
                  break;
 8015c70:	e041      	b.n	8015cf6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015c72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	da0b      	bge.n	8015c92 <USBD_StdEPReq+0x2b2>
 8015c7a:	7bbb      	ldrb	r3, [r7, #14]
 8015c7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015c80:	4613      	mov	r3, r2
 8015c82:	009b      	lsls	r3, r3, #2
 8015c84:	4413      	add	r3, r2
 8015c86:	009b      	lsls	r3, r3, #2
 8015c88:	3310      	adds	r3, #16
 8015c8a:	687a      	ldr	r2, [r7, #4]
 8015c8c:	4413      	add	r3, r2
 8015c8e:	3304      	adds	r3, #4
 8015c90:	e00b      	b.n	8015caa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015c92:	7bbb      	ldrb	r3, [r7, #14]
 8015c94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015c98:	4613      	mov	r3, r2
 8015c9a:	009b      	lsls	r3, r3, #2
 8015c9c:	4413      	add	r3, r2
 8015c9e:	009b      	lsls	r3, r3, #2
 8015ca0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015ca4:	687a      	ldr	r2, [r7, #4]
 8015ca6:	4413      	add	r3, r2
 8015ca8:	3304      	adds	r3, #4
 8015caa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015cac:	7bbb      	ldrb	r3, [r7, #14]
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d002      	beq.n	8015cb8 <USBD_StdEPReq+0x2d8>
 8015cb2:	7bbb      	ldrb	r3, [r7, #14]
 8015cb4:	2b80      	cmp	r3, #128	; 0x80
 8015cb6:	d103      	bne.n	8015cc0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015cb8:	68bb      	ldr	r3, [r7, #8]
 8015cba:	2200      	movs	r2, #0
 8015cbc:	601a      	str	r2, [r3, #0]
 8015cbe:	e00e      	b.n	8015cde <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015cc0:	7bbb      	ldrb	r3, [r7, #14]
 8015cc2:	4619      	mov	r1, r3
 8015cc4:	6878      	ldr	r0, [r7, #4]
 8015cc6:	f001 f903 	bl	8016ed0 <USBD_LL_IsStallEP>
 8015cca:	4603      	mov	r3, r0
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d003      	beq.n	8015cd8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8015cd0:	68bb      	ldr	r3, [r7, #8]
 8015cd2:	2201      	movs	r2, #1
 8015cd4:	601a      	str	r2, [r3, #0]
 8015cd6:	e002      	b.n	8015cde <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015cd8:	68bb      	ldr	r3, [r7, #8]
 8015cda:	2200      	movs	r2, #0
 8015cdc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015cde:	68bb      	ldr	r3, [r7, #8]
 8015ce0:	2202      	movs	r2, #2
 8015ce2:	4619      	mov	r1, r3
 8015ce4:	6878      	ldr	r0, [r7, #4]
 8015ce6:	f000 fbd1 	bl	801648c <USBD_CtlSendData>
              break;
 8015cea:	e004      	b.n	8015cf6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8015cec:	6839      	ldr	r1, [r7, #0]
 8015cee:	6878      	ldr	r0, [r7, #4]
 8015cf0:	f000 fb5b 	bl	80163aa <USBD_CtlError>
              break;
 8015cf4:	bf00      	nop
          }
          break;
 8015cf6:	e004      	b.n	8015d02 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015cf8:	6839      	ldr	r1, [r7, #0]
 8015cfa:	6878      	ldr	r0, [r7, #4]
 8015cfc:	f000 fb55 	bl	80163aa <USBD_CtlError>
          break;
 8015d00:	bf00      	nop
      }
      break;
 8015d02:	e005      	b.n	8015d10 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015d04:	6839      	ldr	r1, [r7, #0]
 8015d06:	6878      	ldr	r0, [r7, #4]
 8015d08:	f000 fb4f 	bl	80163aa <USBD_CtlError>
      break;
 8015d0c:	e000      	b.n	8015d10 <USBD_StdEPReq+0x330>
      break;
 8015d0e:	bf00      	nop
  }

  return ret;
 8015d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d12:	4618      	mov	r0, r3
 8015d14:	3710      	adds	r7, #16
 8015d16:	46bd      	mov	sp, r7
 8015d18:	bd80      	pop	{r7, pc}
	...

08015d1c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015d1c:	b580      	push	{r7, lr}
 8015d1e:	b084      	sub	sp, #16
 8015d20:	af00      	add	r7, sp, #0
 8015d22:	6078      	str	r0, [r7, #4]
 8015d24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015d26:	2300      	movs	r3, #0
 8015d28:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015d2a:	2300      	movs	r3, #0
 8015d2c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015d2e:	2300      	movs	r3, #0
 8015d30:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015d32:	683b      	ldr	r3, [r7, #0]
 8015d34:	885b      	ldrh	r3, [r3, #2]
 8015d36:	0a1b      	lsrs	r3, r3, #8
 8015d38:	b29b      	uxth	r3, r3
 8015d3a:	3b01      	subs	r3, #1
 8015d3c:	2b06      	cmp	r3, #6
 8015d3e:	f200 8128 	bhi.w	8015f92 <USBD_GetDescriptor+0x276>
 8015d42:	a201      	add	r2, pc, #4	; (adr r2, 8015d48 <USBD_GetDescriptor+0x2c>)
 8015d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d48:	08015d65 	.word	0x08015d65
 8015d4c:	08015d7d 	.word	0x08015d7d
 8015d50:	08015dbd 	.word	0x08015dbd
 8015d54:	08015f93 	.word	0x08015f93
 8015d58:	08015f93 	.word	0x08015f93
 8015d5c:	08015f33 	.word	0x08015f33
 8015d60:	08015f5f 	.word	0x08015f5f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d6a:	681b      	ldr	r3, [r3, #0]
 8015d6c:	687a      	ldr	r2, [r7, #4]
 8015d6e:	7c12      	ldrb	r2, [r2, #16]
 8015d70:	f107 0108 	add.w	r1, r7, #8
 8015d74:	4610      	mov	r0, r2
 8015d76:	4798      	blx	r3
 8015d78:	60f8      	str	r0, [r7, #12]
      break;
 8015d7a:	e112      	b.n	8015fa2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	7c1b      	ldrb	r3, [r3, #16]
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d10d      	bne.n	8015da0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d8c:	f107 0208 	add.w	r2, r7, #8
 8015d90:	4610      	mov	r0, r2
 8015d92:	4798      	blx	r3
 8015d94:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015d96:	68fb      	ldr	r3, [r7, #12]
 8015d98:	3301      	adds	r3, #1
 8015d9a:	2202      	movs	r2, #2
 8015d9c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015d9e:	e100      	b.n	8015fa2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015da8:	f107 0208 	add.w	r2, r7, #8
 8015dac:	4610      	mov	r0, r2
 8015dae:	4798      	blx	r3
 8015db0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015db2:	68fb      	ldr	r3, [r7, #12]
 8015db4:	3301      	adds	r3, #1
 8015db6:	2202      	movs	r2, #2
 8015db8:	701a      	strb	r2, [r3, #0]
      break;
 8015dba:	e0f2      	b.n	8015fa2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015dbc:	683b      	ldr	r3, [r7, #0]
 8015dbe:	885b      	ldrh	r3, [r3, #2]
 8015dc0:	b2db      	uxtb	r3, r3
 8015dc2:	2b05      	cmp	r3, #5
 8015dc4:	f200 80ac 	bhi.w	8015f20 <USBD_GetDescriptor+0x204>
 8015dc8:	a201      	add	r2, pc, #4	; (adr r2, 8015dd0 <USBD_GetDescriptor+0xb4>)
 8015dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015dce:	bf00      	nop
 8015dd0:	08015de9 	.word	0x08015de9
 8015dd4:	08015e1d 	.word	0x08015e1d
 8015dd8:	08015e51 	.word	0x08015e51
 8015ddc:	08015e85 	.word	0x08015e85
 8015de0:	08015eb9 	.word	0x08015eb9
 8015de4:	08015eed 	.word	0x08015eed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015dee:	685b      	ldr	r3, [r3, #4]
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d00b      	beq.n	8015e0c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015dfa:	685b      	ldr	r3, [r3, #4]
 8015dfc:	687a      	ldr	r2, [r7, #4]
 8015dfe:	7c12      	ldrb	r2, [r2, #16]
 8015e00:	f107 0108 	add.w	r1, r7, #8
 8015e04:	4610      	mov	r0, r2
 8015e06:	4798      	blx	r3
 8015e08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e0a:	e091      	b.n	8015f30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015e0c:	6839      	ldr	r1, [r7, #0]
 8015e0e:	6878      	ldr	r0, [r7, #4]
 8015e10:	f000 facb 	bl	80163aa <USBD_CtlError>
            err++;
 8015e14:	7afb      	ldrb	r3, [r7, #11]
 8015e16:	3301      	adds	r3, #1
 8015e18:	72fb      	strb	r3, [r7, #11]
          break;
 8015e1a:	e089      	b.n	8015f30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e22:	689b      	ldr	r3, [r3, #8]
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d00b      	beq.n	8015e40 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e2e:	689b      	ldr	r3, [r3, #8]
 8015e30:	687a      	ldr	r2, [r7, #4]
 8015e32:	7c12      	ldrb	r2, [r2, #16]
 8015e34:	f107 0108 	add.w	r1, r7, #8
 8015e38:	4610      	mov	r0, r2
 8015e3a:	4798      	blx	r3
 8015e3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e3e:	e077      	b.n	8015f30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015e40:	6839      	ldr	r1, [r7, #0]
 8015e42:	6878      	ldr	r0, [r7, #4]
 8015e44:	f000 fab1 	bl	80163aa <USBD_CtlError>
            err++;
 8015e48:	7afb      	ldrb	r3, [r7, #11]
 8015e4a:	3301      	adds	r3, #1
 8015e4c:	72fb      	strb	r3, [r7, #11]
          break;
 8015e4e:	e06f      	b.n	8015f30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e56:	68db      	ldr	r3, [r3, #12]
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d00b      	beq.n	8015e74 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e62:	68db      	ldr	r3, [r3, #12]
 8015e64:	687a      	ldr	r2, [r7, #4]
 8015e66:	7c12      	ldrb	r2, [r2, #16]
 8015e68:	f107 0108 	add.w	r1, r7, #8
 8015e6c:	4610      	mov	r0, r2
 8015e6e:	4798      	blx	r3
 8015e70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e72:	e05d      	b.n	8015f30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015e74:	6839      	ldr	r1, [r7, #0]
 8015e76:	6878      	ldr	r0, [r7, #4]
 8015e78:	f000 fa97 	bl	80163aa <USBD_CtlError>
            err++;
 8015e7c:	7afb      	ldrb	r3, [r7, #11]
 8015e7e:	3301      	adds	r3, #1
 8015e80:	72fb      	strb	r3, [r7, #11]
          break;
 8015e82:	e055      	b.n	8015f30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e8a:	691b      	ldr	r3, [r3, #16]
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d00b      	beq.n	8015ea8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e96:	691b      	ldr	r3, [r3, #16]
 8015e98:	687a      	ldr	r2, [r7, #4]
 8015e9a:	7c12      	ldrb	r2, [r2, #16]
 8015e9c:	f107 0108 	add.w	r1, r7, #8
 8015ea0:	4610      	mov	r0, r2
 8015ea2:	4798      	blx	r3
 8015ea4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015ea6:	e043      	b.n	8015f30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015ea8:	6839      	ldr	r1, [r7, #0]
 8015eaa:	6878      	ldr	r0, [r7, #4]
 8015eac:	f000 fa7d 	bl	80163aa <USBD_CtlError>
            err++;
 8015eb0:	7afb      	ldrb	r3, [r7, #11]
 8015eb2:	3301      	adds	r3, #1
 8015eb4:	72fb      	strb	r3, [r7, #11]
          break;
 8015eb6:	e03b      	b.n	8015f30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ebe:	695b      	ldr	r3, [r3, #20]
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d00b      	beq.n	8015edc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015eca:	695b      	ldr	r3, [r3, #20]
 8015ecc:	687a      	ldr	r2, [r7, #4]
 8015ece:	7c12      	ldrb	r2, [r2, #16]
 8015ed0:	f107 0108 	add.w	r1, r7, #8
 8015ed4:	4610      	mov	r0, r2
 8015ed6:	4798      	blx	r3
 8015ed8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015eda:	e029      	b.n	8015f30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015edc:	6839      	ldr	r1, [r7, #0]
 8015ede:	6878      	ldr	r0, [r7, #4]
 8015ee0:	f000 fa63 	bl	80163aa <USBD_CtlError>
            err++;
 8015ee4:	7afb      	ldrb	r3, [r7, #11]
 8015ee6:	3301      	adds	r3, #1
 8015ee8:	72fb      	strb	r3, [r7, #11]
          break;
 8015eea:	e021      	b.n	8015f30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ef2:	699b      	ldr	r3, [r3, #24]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d00b      	beq.n	8015f10 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015efe:	699b      	ldr	r3, [r3, #24]
 8015f00:	687a      	ldr	r2, [r7, #4]
 8015f02:	7c12      	ldrb	r2, [r2, #16]
 8015f04:	f107 0108 	add.w	r1, r7, #8
 8015f08:	4610      	mov	r0, r2
 8015f0a:	4798      	blx	r3
 8015f0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015f0e:	e00f      	b.n	8015f30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015f10:	6839      	ldr	r1, [r7, #0]
 8015f12:	6878      	ldr	r0, [r7, #4]
 8015f14:	f000 fa49 	bl	80163aa <USBD_CtlError>
            err++;
 8015f18:	7afb      	ldrb	r3, [r7, #11]
 8015f1a:	3301      	adds	r3, #1
 8015f1c:	72fb      	strb	r3, [r7, #11]
          break;
 8015f1e:	e007      	b.n	8015f30 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015f20:	6839      	ldr	r1, [r7, #0]
 8015f22:	6878      	ldr	r0, [r7, #4]
 8015f24:	f000 fa41 	bl	80163aa <USBD_CtlError>
          err++;
 8015f28:	7afb      	ldrb	r3, [r7, #11]
 8015f2a:	3301      	adds	r3, #1
 8015f2c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8015f2e:	bf00      	nop
      }
      break;
 8015f30:	e037      	b.n	8015fa2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	7c1b      	ldrb	r3, [r3, #16]
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d109      	bne.n	8015f4e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015f42:	f107 0208 	add.w	r2, r7, #8
 8015f46:	4610      	mov	r0, r2
 8015f48:	4798      	blx	r3
 8015f4a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015f4c:	e029      	b.n	8015fa2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015f4e:	6839      	ldr	r1, [r7, #0]
 8015f50:	6878      	ldr	r0, [r7, #4]
 8015f52:	f000 fa2a 	bl	80163aa <USBD_CtlError>
        err++;
 8015f56:	7afb      	ldrb	r3, [r7, #11]
 8015f58:	3301      	adds	r3, #1
 8015f5a:	72fb      	strb	r3, [r7, #11]
      break;
 8015f5c:	e021      	b.n	8015fa2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	7c1b      	ldrb	r3, [r3, #16]
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	d10d      	bne.n	8015f82 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f6e:	f107 0208 	add.w	r2, r7, #8
 8015f72:	4610      	mov	r0, r2
 8015f74:	4798      	blx	r3
 8015f76:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015f78:	68fb      	ldr	r3, [r7, #12]
 8015f7a:	3301      	adds	r3, #1
 8015f7c:	2207      	movs	r2, #7
 8015f7e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015f80:	e00f      	b.n	8015fa2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015f82:	6839      	ldr	r1, [r7, #0]
 8015f84:	6878      	ldr	r0, [r7, #4]
 8015f86:	f000 fa10 	bl	80163aa <USBD_CtlError>
        err++;
 8015f8a:	7afb      	ldrb	r3, [r7, #11]
 8015f8c:	3301      	adds	r3, #1
 8015f8e:	72fb      	strb	r3, [r7, #11]
      break;
 8015f90:	e007      	b.n	8015fa2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8015f92:	6839      	ldr	r1, [r7, #0]
 8015f94:	6878      	ldr	r0, [r7, #4]
 8015f96:	f000 fa08 	bl	80163aa <USBD_CtlError>
      err++;
 8015f9a:	7afb      	ldrb	r3, [r7, #11]
 8015f9c:	3301      	adds	r3, #1
 8015f9e:	72fb      	strb	r3, [r7, #11]
      break;
 8015fa0:	bf00      	nop
  }

  if (err != 0U)
 8015fa2:	7afb      	ldrb	r3, [r7, #11]
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d11e      	bne.n	8015fe6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8015fa8:	683b      	ldr	r3, [r7, #0]
 8015faa:	88db      	ldrh	r3, [r3, #6]
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d016      	beq.n	8015fde <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8015fb0:	893b      	ldrh	r3, [r7, #8]
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	d00e      	beq.n	8015fd4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8015fb6:	683b      	ldr	r3, [r7, #0]
 8015fb8:	88da      	ldrh	r2, [r3, #6]
 8015fba:	893b      	ldrh	r3, [r7, #8]
 8015fbc:	4293      	cmp	r3, r2
 8015fbe:	bf28      	it	cs
 8015fc0:	4613      	movcs	r3, r2
 8015fc2:	b29b      	uxth	r3, r3
 8015fc4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015fc6:	893b      	ldrh	r3, [r7, #8]
 8015fc8:	461a      	mov	r2, r3
 8015fca:	68f9      	ldr	r1, [r7, #12]
 8015fcc:	6878      	ldr	r0, [r7, #4]
 8015fce:	f000 fa5d 	bl	801648c <USBD_CtlSendData>
 8015fd2:	e009      	b.n	8015fe8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015fd4:	6839      	ldr	r1, [r7, #0]
 8015fd6:	6878      	ldr	r0, [r7, #4]
 8015fd8:	f000 f9e7 	bl	80163aa <USBD_CtlError>
 8015fdc:	e004      	b.n	8015fe8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015fde:	6878      	ldr	r0, [r7, #4]
 8015fe0:	f000 faae 	bl	8016540 <USBD_CtlSendStatus>
 8015fe4:	e000      	b.n	8015fe8 <USBD_GetDescriptor+0x2cc>
    return;
 8015fe6:	bf00      	nop
  }
}
 8015fe8:	3710      	adds	r7, #16
 8015fea:	46bd      	mov	sp, r7
 8015fec:	bd80      	pop	{r7, pc}
 8015fee:	bf00      	nop

08015ff0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015ff0:	b580      	push	{r7, lr}
 8015ff2:	b084      	sub	sp, #16
 8015ff4:	af00      	add	r7, sp, #0
 8015ff6:	6078      	str	r0, [r7, #4]
 8015ff8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015ffa:	683b      	ldr	r3, [r7, #0]
 8015ffc:	889b      	ldrh	r3, [r3, #4]
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d131      	bne.n	8016066 <USBD_SetAddress+0x76>
 8016002:	683b      	ldr	r3, [r7, #0]
 8016004:	88db      	ldrh	r3, [r3, #6]
 8016006:	2b00      	cmp	r3, #0
 8016008:	d12d      	bne.n	8016066 <USBD_SetAddress+0x76>
 801600a:	683b      	ldr	r3, [r7, #0]
 801600c:	885b      	ldrh	r3, [r3, #2]
 801600e:	2b7f      	cmp	r3, #127	; 0x7f
 8016010:	d829      	bhi.n	8016066 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8016012:	683b      	ldr	r3, [r7, #0]
 8016014:	885b      	ldrh	r3, [r3, #2]
 8016016:	b2db      	uxtb	r3, r3
 8016018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801601c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016024:	b2db      	uxtb	r3, r3
 8016026:	2b03      	cmp	r3, #3
 8016028:	d104      	bne.n	8016034 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801602a:	6839      	ldr	r1, [r7, #0]
 801602c:	6878      	ldr	r0, [r7, #4]
 801602e:	f000 f9bc 	bl	80163aa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016032:	e01d      	b.n	8016070 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	7bfa      	ldrb	r2, [r7, #15]
 8016038:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801603c:	7bfb      	ldrb	r3, [r7, #15]
 801603e:	4619      	mov	r1, r3
 8016040:	6878      	ldr	r0, [r7, #4]
 8016042:	f000 ff71 	bl	8016f28 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8016046:	6878      	ldr	r0, [r7, #4]
 8016048:	f000 fa7a 	bl	8016540 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801604c:	7bfb      	ldrb	r3, [r7, #15]
 801604e:	2b00      	cmp	r3, #0
 8016050:	d004      	beq.n	801605c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	2202      	movs	r2, #2
 8016056:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801605a:	e009      	b.n	8016070 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	2201      	movs	r2, #1
 8016060:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016064:	e004      	b.n	8016070 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8016066:	6839      	ldr	r1, [r7, #0]
 8016068:	6878      	ldr	r0, [r7, #4]
 801606a:	f000 f99e 	bl	80163aa <USBD_CtlError>
  }
}
 801606e:	bf00      	nop
 8016070:	bf00      	nop
 8016072:	3710      	adds	r7, #16
 8016074:	46bd      	mov	sp, r7
 8016076:	bd80      	pop	{r7, pc}

08016078 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016078:	b580      	push	{r7, lr}
 801607a:	b084      	sub	sp, #16
 801607c:	af00      	add	r7, sp, #0
 801607e:	6078      	str	r0, [r7, #4]
 8016080:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016082:	2300      	movs	r3, #0
 8016084:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8016086:	683b      	ldr	r3, [r7, #0]
 8016088:	885b      	ldrh	r3, [r3, #2]
 801608a:	b2da      	uxtb	r2, r3
 801608c:	4b4e      	ldr	r3, [pc, #312]	; (80161c8 <USBD_SetConfig+0x150>)
 801608e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016090:	4b4d      	ldr	r3, [pc, #308]	; (80161c8 <USBD_SetConfig+0x150>)
 8016092:	781b      	ldrb	r3, [r3, #0]
 8016094:	2b01      	cmp	r3, #1
 8016096:	d905      	bls.n	80160a4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8016098:	6839      	ldr	r1, [r7, #0]
 801609a:	6878      	ldr	r0, [r7, #4]
 801609c:	f000 f985 	bl	80163aa <USBD_CtlError>
    return USBD_FAIL;
 80160a0:	2303      	movs	r3, #3
 80160a2:	e08c      	b.n	80161be <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80160aa:	b2db      	uxtb	r3, r3
 80160ac:	2b02      	cmp	r3, #2
 80160ae:	d002      	beq.n	80160b6 <USBD_SetConfig+0x3e>
 80160b0:	2b03      	cmp	r3, #3
 80160b2:	d029      	beq.n	8016108 <USBD_SetConfig+0x90>
 80160b4:	e075      	b.n	80161a2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80160b6:	4b44      	ldr	r3, [pc, #272]	; (80161c8 <USBD_SetConfig+0x150>)
 80160b8:	781b      	ldrb	r3, [r3, #0]
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d020      	beq.n	8016100 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80160be:	4b42      	ldr	r3, [pc, #264]	; (80161c8 <USBD_SetConfig+0x150>)
 80160c0:	781b      	ldrb	r3, [r3, #0]
 80160c2:	461a      	mov	r2, r3
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80160c8:	4b3f      	ldr	r3, [pc, #252]	; (80161c8 <USBD_SetConfig+0x150>)
 80160ca:	781b      	ldrb	r3, [r3, #0]
 80160cc:	4619      	mov	r1, r3
 80160ce:	6878      	ldr	r0, [r7, #4]
 80160d0:	f7fe ffe1 	bl	8015096 <USBD_SetClassConfig>
 80160d4:	4603      	mov	r3, r0
 80160d6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80160d8:	7bfb      	ldrb	r3, [r7, #15]
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d008      	beq.n	80160f0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80160de:	6839      	ldr	r1, [r7, #0]
 80160e0:	6878      	ldr	r0, [r7, #4]
 80160e2:	f000 f962 	bl	80163aa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	2202      	movs	r2, #2
 80160ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80160ee:	e065      	b.n	80161bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80160f0:	6878      	ldr	r0, [r7, #4]
 80160f2:	f000 fa25 	bl	8016540 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	2203      	movs	r2, #3
 80160fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80160fe:	e05d      	b.n	80161bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016100:	6878      	ldr	r0, [r7, #4]
 8016102:	f000 fa1d 	bl	8016540 <USBD_CtlSendStatus>
      break;
 8016106:	e059      	b.n	80161bc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8016108:	4b2f      	ldr	r3, [pc, #188]	; (80161c8 <USBD_SetConfig+0x150>)
 801610a:	781b      	ldrb	r3, [r3, #0]
 801610c:	2b00      	cmp	r3, #0
 801610e:	d112      	bne.n	8016136 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	2202      	movs	r2, #2
 8016114:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8016118:	4b2b      	ldr	r3, [pc, #172]	; (80161c8 <USBD_SetConfig+0x150>)
 801611a:	781b      	ldrb	r3, [r3, #0]
 801611c:	461a      	mov	r2, r3
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016122:	4b29      	ldr	r3, [pc, #164]	; (80161c8 <USBD_SetConfig+0x150>)
 8016124:	781b      	ldrb	r3, [r3, #0]
 8016126:	4619      	mov	r1, r3
 8016128:	6878      	ldr	r0, [r7, #4]
 801612a:	f7fe ffd0 	bl	80150ce <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801612e:	6878      	ldr	r0, [r7, #4]
 8016130:	f000 fa06 	bl	8016540 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016134:	e042      	b.n	80161bc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8016136:	4b24      	ldr	r3, [pc, #144]	; (80161c8 <USBD_SetConfig+0x150>)
 8016138:	781b      	ldrb	r3, [r3, #0]
 801613a:	461a      	mov	r2, r3
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	685b      	ldr	r3, [r3, #4]
 8016140:	429a      	cmp	r2, r3
 8016142:	d02a      	beq.n	801619a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	685b      	ldr	r3, [r3, #4]
 8016148:	b2db      	uxtb	r3, r3
 801614a:	4619      	mov	r1, r3
 801614c:	6878      	ldr	r0, [r7, #4]
 801614e:	f7fe ffbe 	bl	80150ce <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8016152:	4b1d      	ldr	r3, [pc, #116]	; (80161c8 <USBD_SetConfig+0x150>)
 8016154:	781b      	ldrb	r3, [r3, #0]
 8016156:	461a      	mov	r2, r3
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801615c:	4b1a      	ldr	r3, [pc, #104]	; (80161c8 <USBD_SetConfig+0x150>)
 801615e:	781b      	ldrb	r3, [r3, #0]
 8016160:	4619      	mov	r1, r3
 8016162:	6878      	ldr	r0, [r7, #4]
 8016164:	f7fe ff97 	bl	8015096 <USBD_SetClassConfig>
 8016168:	4603      	mov	r3, r0
 801616a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801616c:	7bfb      	ldrb	r3, [r7, #15]
 801616e:	2b00      	cmp	r3, #0
 8016170:	d00f      	beq.n	8016192 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8016172:	6839      	ldr	r1, [r7, #0]
 8016174:	6878      	ldr	r0, [r7, #4]
 8016176:	f000 f918 	bl	80163aa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	685b      	ldr	r3, [r3, #4]
 801617e:	b2db      	uxtb	r3, r3
 8016180:	4619      	mov	r1, r3
 8016182:	6878      	ldr	r0, [r7, #4]
 8016184:	f7fe ffa3 	bl	80150ce <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	2202      	movs	r2, #2
 801618c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016190:	e014      	b.n	80161bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016192:	6878      	ldr	r0, [r7, #4]
 8016194:	f000 f9d4 	bl	8016540 <USBD_CtlSendStatus>
      break;
 8016198:	e010      	b.n	80161bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801619a:	6878      	ldr	r0, [r7, #4]
 801619c:	f000 f9d0 	bl	8016540 <USBD_CtlSendStatus>
      break;
 80161a0:	e00c      	b.n	80161bc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80161a2:	6839      	ldr	r1, [r7, #0]
 80161a4:	6878      	ldr	r0, [r7, #4]
 80161a6:	f000 f900 	bl	80163aa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80161aa:	4b07      	ldr	r3, [pc, #28]	; (80161c8 <USBD_SetConfig+0x150>)
 80161ac:	781b      	ldrb	r3, [r3, #0]
 80161ae:	4619      	mov	r1, r3
 80161b0:	6878      	ldr	r0, [r7, #4]
 80161b2:	f7fe ff8c 	bl	80150ce <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80161b6:	2303      	movs	r3, #3
 80161b8:	73fb      	strb	r3, [r7, #15]
      break;
 80161ba:	bf00      	nop
  }

  return ret;
 80161bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80161be:	4618      	mov	r0, r3
 80161c0:	3710      	adds	r7, #16
 80161c2:	46bd      	mov	sp, r7
 80161c4:	bd80      	pop	{r7, pc}
 80161c6:	bf00      	nop
 80161c8:	240015e4 	.word	0x240015e4

080161cc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80161cc:	b580      	push	{r7, lr}
 80161ce:	b082      	sub	sp, #8
 80161d0:	af00      	add	r7, sp, #0
 80161d2:	6078      	str	r0, [r7, #4]
 80161d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80161d6:	683b      	ldr	r3, [r7, #0]
 80161d8:	88db      	ldrh	r3, [r3, #6]
 80161da:	2b01      	cmp	r3, #1
 80161dc:	d004      	beq.n	80161e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80161de:	6839      	ldr	r1, [r7, #0]
 80161e0:	6878      	ldr	r0, [r7, #4]
 80161e2:	f000 f8e2 	bl	80163aa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80161e6:	e023      	b.n	8016230 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80161ee:	b2db      	uxtb	r3, r3
 80161f0:	2b02      	cmp	r3, #2
 80161f2:	dc02      	bgt.n	80161fa <USBD_GetConfig+0x2e>
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	dc03      	bgt.n	8016200 <USBD_GetConfig+0x34>
 80161f8:	e015      	b.n	8016226 <USBD_GetConfig+0x5a>
 80161fa:	2b03      	cmp	r3, #3
 80161fc:	d00b      	beq.n	8016216 <USBD_GetConfig+0x4a>
 80161fe:	e012      	b.n	8016226 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	2200      	movs	r2, #0
 8016204:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	3308      	adds	r3, #8
 801620a:	2201      	movs	r2, #1
 801620c:	4619      	mov	r1, r3
 801620e:	6878      	ldr	r0, [r7, #4]
 8016210:	f000 f93c 	bl	801648c <USBD_CtlSendData>
        break;
 8016214:	e00c      	b.n	8016230 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	3304      	adds	r3, #4
 801621a:	2201      	movs	r2, #1
 801621c:	4619      	mov	r1, r3
 801621e:	6878      	ldr	r0, [r7, #4]
 8016220:	f000 f934 	bl	801648c <USBD_CtlSendData>
        break;
 8016224:	e004      	b.n	8016230 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8016226:	6839      	ldr	r1, [r7, #0]
 8016228:	6878      	ldr	r0, [r7, #4]
 801622a:	f000 f8be 	bl	80163aa <USBD_CtlError>
        break;
 801622e:	bf00      	nop
}
 8016230:	bf00      	nop
 8016232:	3708      	adds	r7, #8
 8016234:	46bd      	mov	sp, r7
 8016236:	bd80      	pop	{r7, pc}

08016238 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016238:	b580      	push	{r7, lr}
 801623a:	b082      	sub	sp, #8
 801623c:	af00      	add	r7, sp, #0
 801623e:	6078      	str	r0, [r7, #4]
 8016240:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016248:	b2db      	uxtb	r3, r3
 801624a:	3b01      	subs	r3, #1
 801624c:	2b02      	cmp	r3, #2
 801624e:	d81e      	bhi.n	801628e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8016250:	683b      	ldr	r3, [r7, #0]
 8016252:	88db      	ldrh	r3, [r3, #6]
 8016254:	2b02      	cmp	r3, #2
 8016256:	d004      	beq.n	8016262 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8016258:	6839      	ldr	r1, [r7, #0]
 801625a:	6878      	ldr	r0, [r7, #4]
 801625c:	f000 f8a5 	bl	80163aa <USBD_CtlError>
        break;
 8016260:	e01a      	b.n	8016298 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	2201      	movs	r2, #1
 8016266:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801626e:	2b00      	cmp	r3, #0
 8016270:	d005      	beq.n	801627e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	68db      	ldr	r3, [r3, #12]
 8016276:	f043 0202 	orr.w	r2, r3, #2
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	330c      	adds	r3, #12
 8016282:	2202      	movs	r2, #2
 8016284:	4619      	mov	r1, r3
 8016286:	6878      	ldr	r0, [r7, #4]
 8016288:	f000 f900 	bl	801648c <USBD_CtlSendData>
      break;
 801628c:	e004      	b.n	8016298 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801628e:	6839      	ldr	r1, [r7, #0]
 8016290:	6878      	ldr	r0, [r7, #4]
 8016292:	f000 f88a 	bl	80163aa <USBD_CtlError>
      break;
 8016296:	bf00      	nop
  }
}
 8016298:	bf00      	nop
 801629a:	3708      	adds	r7, #8
 801629c:	46bd      	mov	sp, r7
 801629e:	bd80      	pop	{r7, pc}

080162a0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80162a0:	b580      	push	{r7, lr}
 80162a2:	b082      	sub	sp, #8
 80162a4:	af00      	add	r7, sp, #0
 80162a6:	6078      	str	r0, [r7, #4]
 80162a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80162aa:	683b      	ldr	r3, [r7, #0]
 80162ac:	885b      	ldrh	r3, [r3, #2]
 80162ae:	2b01      	cmp	r3, #1
 80162b0:	d107      	bne.n	80162c2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	2201      	movs	r2, #1
 80162b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80162ba:	6878      	ldr	r0, [r7, #4]
 80162bc:	f000 f940 	bl	8016540 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80162c0:	e013      	b.n	80162ea <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80162c2:	683b      	ldr	r3, [r7, #0]
 80162c4:	885b      	ldrh	r3, [r3, #2]
 80162c6:	2b02      	cmp	r3, #2
 80162c8:	d10b      	bne.n	80162e2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80162ca:	683b      	ldr	r3, [r7, #0]
 80162cc:	889b      	ldrh	r3, [r3, #4]
 80162ce:	0a1b      	lsrs	r3, r3, #8
 80162d0:	b29b      	uxth	r3, r3
 80162d2:	b2da      	uxtb	r2, r3
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80162da:	6878      	ldr	r0, [r7, #4]
 80162dc:	f000 f930 	bl	8016540 <USBD_CtlSendStatus>
}
 80162e0:	e003      	b.n	80162ea <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80162e2:	6839      	ldr	r1, [r7, #0]
 80162e4:	6878      	ldr	r0, [r7, #4]
 80162e6:	f000 f860 	bl	80163aa <USBD_CtlError>
}
 80162ea:	bf00      	nop
 80162ec:	3708      	adds	r7, #8
 80162ee:	46bd      	mov	sp, r7
 80162f0:	bd80      	pop	{r7, pc}

080162f2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80162f2:	b580      	push	{r7, lr}
 80162f4:	b082      	sub	sp, #8
 80162f6:	af00      	add	r7, sp, #0
 80162f8:	6078      	str	r0, [r7, #4]
 80162fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016302:	b2db      	uxtb	r3, r3
 8016304:	3b01      	subs	r3, #1
 8016306:	2b02      	cmp	r3, #2
 8016308:	d80b      	bhi.n	8016322 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801630a:	683b      	ldr	r3, [r7, #0]
 801630c:	885b      	ldrh	r3, [r3, #2]
 801630e:	2b01      	cmp	r3, #1
 8016310:	d10c      	bne.n	801632c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	2200      	movs	r2, #0
 8016316:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801631a:	6878      	ldr	r0, [r7, #4]
 801631c:	f000 f910 	bl	8016540 <USBD_CtlSendStatus>
      }
      break;
 8016320:	e004      	b.n	801632c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8016322:	6839      	ldr	r1, [r7, #0]
 8016324:	6878      	ldr	r0, [r7, #4]
 8016326:	f000 f840 	bl	80163aa <USBD_CtlError>
      break;
 801632a:	e000      	b.n	801632e <USBD_ClrFeature+0x3c>
      break;
 801632c:	bf00      	nop
  }
}
 801632e:	bf00      	nop
 8016330:	3708      	adds	r7, #8
 8016332:	46bd      	mov	sp, r7
 8016334:	bd80      	pop	{r7, pc}

08016336 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016336:	b580      	push	{r7, lr}
 8016338:	b084      	sub	sp, #16
 801633a:	af00      	add	r7, sp, #0
 801633c:	6078      	str	r0, [r7, #4]
 801633e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8016340:	683b      	ldr	r3, [r7, #0]
 8016342:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016344:	68fb      	ldr	r3, [r7, #12]
 8016346:	781a      	ldrb	r2, [r3, #0]
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	3301      	adds	r3, #1
 8016350:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	781a      	ldrb	r2, [r3, #0]
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	3301      	adds	r3, #1
 801635e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8016360:	68f8      	ldr	r0, [r7, #12]
 8016362:	f7ff fa41 	bl	80157e8 <SWAPBYTE>
 8016366:	4603      	mov	r3, r0
 8016368:	461a      	mov	r2, r3
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801636e:	68fb      	ldr	r3, [r7, #12]
 8016370:	3301      	adds	r3, #1
 8016372:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016374:	68fb      	ldr	r3, [r7, #12]
 8016376:	3301      	adds	r3, #1
 8016378:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801637a:	68f8      	ldr	r0, [r7, #12]
 801637c:	f7ff fa34 	bl	80157e8 <SWAPBYTE>
 8016380:	4603      	mov	r3, r0
 8016382:	461a      	mov	r2, r3
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016388:	68fb      	ldr	r3, [r7, #12]
 801638a:	3301      	adds	r3, #1
 801638c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801638e:	68fb      	ldr	r3, [r7, #12]
 8016390:	3301      	adds	r3, #1
 8016392:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016394:	68f8      	ldr	r0, [r7, #12]
 8016396:	f7ff fa27 	bl	80157e8 <SWAPBYTE>
 801639a:	4603      	mov	r3, r0
 801639c:	461a      	mov	r2, r3
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	80da      	strh	r2, [r3, #6]
}
 80163a2:	bf00      	nop
 80163a4:	3710      	adds	r7, #16
 80163a6:	46bd      	mov	sp, r7
 80163a8:	bd80      	pop	{r7, pc}

080163aa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80163aa:	b580      	push	{r7, lr}
 80163ac:	b082      	sub	sp, #8
 80163ae:	af00      	add	r7, sp, #0
 80163b0:	6078      	str	r0, [r7, #4]
 80163b2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80163b4:	2180      	movs	r1, #128	; 0x80
 80163b6:	6878      	ldr	r0, [r7, #4]
 80163b8:	f000 fd4c 	bl	8016e54 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80163bc:	2100      	movs	r1, #0
 80163be:	6878      	ldr	r0, [r7, #4]
 80163c0:	f000 fd48 	bl	8016e54 <USBD_LL_StallEP>
}
 80163c4:	bf00      	nop
 80163c6:	3708      	adds	r7, #8
 80163c8:	46bd      	mov	sp, r7
 80163ca:	bd80      	pop	{r7, pc}

080163cc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80163cc:	b580      	push	{r7, lr}
 80163ce:	b086      	sub	sp, #24
 80163d0:	af00      	add	r7, sp, #0
 80163d2:	60f8      	str	r0, [r7, #12]
 80163d4:	60b9      	str	r1, [r7, #8]
 80163d6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80163d8:	2300      	movs	r3, #0
 80163da:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80163dc:	68fb      	ldr	r3, [r7, #12]
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d036      	beq.n	8016450 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80163e2:	68fb      	ldr	r3, [r7, #12]
 80163e4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80163e6:	6938      	ldr	r0, [r7, #16]
 80163e8:	f000 f836 	bl	8016458 <USBD_GetLen>
 80163ec:	4603      	mov	r3, r0
 80163ee:	3301      	adds	r3, #1
 80163f0:	b29b      	uxth	r3, r3
 80163f2:	005b      	lsls	r3, r3, #1
 80163f4:	b29a      	uxth	r2, r3
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80163fa:	7dfb      	ldrb	r3, [r7, #23]
 80163fc:	68ba      	ldr	r2, [r7, #8]
 80163fe:	4413      	add	r3, r2
 8016400:	687a      	ldr	r2, [r7, #4]
 8016402:	7812      	ldrb	r2, [r2, #0]
 8016404:	701a      	strb	r2, [r3, #0]
  idx++;
 8016406:	7dfb      	ldrb	r3, [r7, #23]
 8016408:	3301      	adds	r3, #1
 801640a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801640c:	7dfb      	ldrb	r3, [r7, #23]
 801640e:	68ba      	ldr	r2, [r7, #8]
 8016410:	4413      	add	r3, r2
 8016412:	2203      	movs	r2, #3
 8016414:	701a      	strb	r2, [r3, #0]
  idx++;
 8016416:	7dfb      	ldrb	r3, [r7, #23]
 8016418:	3301      	adds	r3, #1
 801641a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801641c:	e013      	b.n	8016446 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801641e:	7dfb      	ldrb	r3, [r7, #23]
 8016420:	68ba      	ldr	r2, [r7, #8]
 8016422:	4413      	add	r3, r2
 8016424:	693a      	ldr	r2, [r7, #16]
 8016426:	7812      	ldrb	r2, [r2, #0]
 8016428:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801642a:	693b      	ldr	r3, [r7, #16]
 801642c:	3301      	adds	r3, #1
 801642e:	613b      	str	r3, [r7, #16]
    idx++;
 8016430:	7dfb      	ldrb	r3, [r7, #23]
 8016432:	3301      	adds	r3, #1
 8016434:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016436:	7dfb      	ldrb	r3, [r7, #23]
 8016438:	68ba      	ldr	r2, [r7, #8]
 801643a:	4413      	add	r3, r2
 801643c:	2200      	movs	r2, #0
 801643e:	701a      	strb	r2, [r3, #0]
    idx++;
 8016440:	7dfb      	ldrb	r3, [r7, #23]
 8016442:	3301      	adds	r3, #1
 8016444:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016446:	693b      	ldr	r3, [r7, #16]
 8016448:	781b      	ldrb	r3, [r3, #0]
 801644a:	2b00      	cmp	r3, #0
 801644c:	d1e7      	bne.n	801641e <USBD_GetString+0x52>
 801644e:	e000      	b.n	8016452 <USBD_GetString+0x86>
    return;
 8016450:	bf00      	nop
  }
}
 8016452:	3718      	adds	r7, #24
 8016454:	46bd      	mov	sp, r7
 8016456:	bd80      	pop	{r7, pc}

08016458 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016458:	b480      	push	{r7}
 801645a:	b085      	sub	sp, #20
 801645c:	af00      	add	r7, sp, #0
 801645e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016460:	2300      	movs	r3, #0
 8016462:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016468:	e005      	b.n	8016476 <USBD_GetLen+0x1e>
  {
    len++;
 801646a:	7bfb      	ldrb	r3, [r7, #15]
 801646c:	3301      	adds	r3, #1
 801646e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8016470:	68bb      	ldr	r3, [r7, #8]
 8016472:	3301      	adds	r3, #1
 8016474:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016476:	68bb      	ldr	r3, [r7, #8]
 8016478:	781b      	ldrb	r3, [r3, #0]
 801647a:	2b00      	cmp	r3, #0
 801647c:	d1f5      	bne.n	801646a <USBD_GetLen+0x12>
  }

  return len;
 801647e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016480:	4618      	mov	r0, r3
 8016482:	3714      	adds	r7, #20
 8016484:	46bd      	mov	sp, r7
 8016486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801648a:	4770      	bx	lr

0801648c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801648c:	b580      	push	{r7, lr}
 801648e:	b084      	sub	sp, #16
 8016490:	af00      	add	r7, sp, #0
 8016492:	60f8      	str	r0, [r7, #12]
 8016494:	60b9      	str	r1, [r7, #8]
 8016496:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	2202      	movs	r2, #2
 801649c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	687a      	ldr	r2, [r7, #4]
 80164a4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	687a      	ldr	r2, [r7, #4]
 80164aa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	68ba      	ldr	r2, [r7, #8]
 80164b0:	2100      	movs	r1, #0
 80164b2:	68f8      	ldr	r0, [r7, #12]
 80164b4:	f000 fd57 	bl	8016f66 <USBD_LL_Transmit>

  return USBD_OK;
 80164b8:	2300      	movs	r3, #0
}
 80164ba:	4618      	mov	r0, r3
 80164bc:	3710      	adds	r7, #16
 80164be:	46bd      	mov	sp, r7
 80164c0:	bd80      	pop	{r7, pc}

080164c2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80164c2:	b580      	push	{r7, lr}
 80164c4:	b084      	sub	sp, #16
 80164c6:	af00      	add	r7, sp, #0
 80164c8:	60f8      	str	r0, [r7, #12]
 80164ca:	60b9      	str	r1, [r7, #8]
 80164cc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	68ba      	ldr	r2, [r7, #8]
 80164d2:	2100      	movs	r1, #0
 80164d4:	68f8      	ldr	r0, [r7, #12]
 80164d6:	f000 fd46 	bl	8016f66 <USBD_LL_Transmit>

  return USBD_OK;
 80164da:	2300      	movs	r3, #0
}
 80164dc:	4618      	mov	r0, r3
 80164de:	3710      	adds	r7, #16
 80164e0:	46bd      	mov	sp, r7
 80164e2:	bd80      	pop	{r7, pc}

080164e4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80164e4:	b580      	push	{r7, lr}
 80164e6:	b084      	sub	sp, #16
 80164e8:	af00      	add	r7, sp, #0
 80164ea:	60f8      	str	r0, [r7, #12]
 80164ec:	60b9      	str	r1, [r7, #8]
 80164ee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80164f0:	68fb      	ldr	r3, [r7, #12]
 80164f2:	2203      	movs	r2, #3
 80164f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80164f8:	68fb      	ldr	r3, [r7, #12]
 80164fa:	687a      	ldr	r2, [r7, #4]
 80164fc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8016500:	68fb      	ldr	r3, [r7, #12]
 8016502:	687a      	ldr	r2, [r7, #4]
 8016504:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	68ba      	ldr	r2, [r7, #8]
 801650c:	2100      	movs	r1, #0
 801650e:	68f8      	ldr	r0, [r7, #12]
 8016510:	f000 fd4a 	bl	8016fa8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016514:	2300      	movs	r3, #0
}
 8016516:	4618      	mov	r0, r3
 8016518:	3710      	adds	r7, #16
 801651a:	46bd      	mov	sp, r7
 801651c:	bd80      	pop	{r7, pc}

0801651e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801651e:	b580      	push	{r7, lr}
 8016520:	b084      	sub	sp, #16
 8016522:	af00      	add	r7, sp, #0
 8016524:	60f8      	str	r0, [r7, #12]
 8016526:	60b9      	str	r1, [r7, #8]
 8016528:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	68ba      	ldr	r2, [r7, #8]
 801652e:	2100      	movs	r1, #0
 8016530:	68f8      	ldr	r0, [r7, #12]
 8016532:	f000 fd39 	bl	8016fa8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016536:	2300      	movs	r3, #0
}
 8016538:	4618      	mov	r0, r3
 801653a:	3710      	adds	r7, #16
 801653c:	46bd      	mov	sp, r7
 801653e:	bd80      	pop	{r7, pc}

08016540 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016540:	b580      	push	{r7, lr}
 8016542:	b082      	sub	sp, #8
 8016544:	af00      	add	r7, sp, #0
 8016546:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	2204      	movs	r2, #4
 801654c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016550:	2300      	movs	r3, #0
 8016552:	2200      	movs	r2, #0
 8016554:	2100      	movs	r1, #0
 8016556:	6878      	ldr	r0, [r7, #4]
 8016558:	f000 fd05 	bl	8016f66 <USBD_LL_Transmit>

  return USBD_OK;
 801655c:	2300      	movs	r3, #0
}
 801655e:	4618      	mov	r0, r3
 8016560:	3708      	adds	r7, #8
 8016562:	46bd      	mov	sp, r7
 8016564:	bd80      	pop	{r7, pc}

08016566 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016566:	b580      	push	{r7, lr}
 8016568:	b082      	sub	sp, #8
 801656a:	af00      	add	r7, sp, #0
 801656c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	2205      	movs	r2, #5
 8016572:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016576:	2300      	movs	r3, #0
 8016578:	2200      	movs	r2, #0
 801657a:	2100      	movs	r1, #0
 801657c:	6878      	ldr	r0, [r7, #4]
 801657e:	f000 fd13 	bl	8016fa8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016582:	2300      	movs	r3, #0
}
 8016584:	4618      	mov	r0, r3
 8016586:	3708      	adds	r7, #8
 8016588:	46bd      	mov	sp, r7
 801658a:	bd80      	pop	{r7, pc}

0801658c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801658c:	b480      	push	{r7}
 801658e:	b087      	sub	sp, #28
 8016590:	af00      	add	r7, sp, #0
 8016592:	60f8      	str	r0, [r7, #12]
 8016594:	60b9      	str	r1, [r7, #8]
 8016596:	4613      	mov	r3, r2
 8016598:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801659a:	2301      	movs	r3, #1
 801659c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801659e:	2300      	movs	r3, #0
 80165a0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80165a2:	4b1f      	ldr	r3, [pc, #124]	; (8016620 <FATFS_LinkDriverEx+0x94>)
 80165a4:	7a5b      	ldrb	r3, [r3, #9]
 80165a6:	b2db      	uxtb	r3, r3
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d131      	bne.n	8016610 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80165ac:	4b1c      	ldr	r3, [pc, #112]	; (8016620 <FATFS_LinkDriverEx+0x94>)
 80165ae:	7a5b      	ldrb	r3, [r3, #9]
 80165b0:	b2db      	uxtb	r3, r3
 80165b2:	461a      	mov	r2, r3
 80165b4:	4b1a      	ldr	r3, [pc, #104]	; (8016620 <FATFS_LinkDriverEx+0x94>)
 80165b6:	2100      	movs	r1, #0
 80165b8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80165ba:	4b19      	ldr	r3, [pc, #100]	; (8016620 <FATFS_LinkDriverEx+0x94>)
 80165bc:	7a5b      	ldrb	r3, [r3, #9]
 80165be:	b2db      	uxtb	r3, r3
 80165c0:	4a17      	ldr	r2, [pc, #92]	; (8016620 <FATFS_LinkDriverEx+0x94>)
 80165c2:	009b      	lsls	r3, r3, #2
 80165c4:	4413      	add	r3, r2
 80165c6:	68fa      	ldr	r2, [r7, #12]
 80165c8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80165ca:	4b15      	ldr	r3, [pc, #84]	; (8016620 <FATFS_LinkDriverEx+0x94>)
 80165cc:	7a5b      	ldrb	r3, [r3, #9]
 80165ce:	b2db      	uxtb	r3, r3
 80165d0:	461a      	mov	r2, r3
 80165d2:	4b13      	ldr	r3, [pc, #76]	; (8016620 <FATFS_LinkDriverEx+0x94>)
 80165d4:	4413      	add	r3, r2
 80165d6:	79fa      	ldrb	r2, [r7, #7]
 80165d8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80165da:	4b11      	ldr	r3, [pc, #68]	; (8016620 <FATFS_LinkDriverEx+0x94>)
 80165dc:	7a5b      	ldrb	r3, [r3, #9]
 80165de:	b2db      	uxtb	r3, r3
 80165e0:	1c5a      	adds	r2, r3, #1
 80165e2:	b2d1      	uxtb	r1, r2
 80165e4:	4a0e      	ldr	r2, [pc, #56]	; (8016620 <FATFS_LinkDriverEx+0x94>)
 80165e6:	7251      	strb	r1, [r2, #9]
 80165e8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80165ea:	7dbb      	ldrb	r3, [r7, #22]
 80165ec:	3330      	adds	r3, #48	; 0x30
 80165ee:	b2da      	uxtb	r2, r3
 80165f0:	68bb      	ldr	r3, [r7, #8]
 80165f2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80165f4:	68bb      	ldr	r3, [r7, #8]
 80165f6:	3301      	adds	r3, #1
 80165f8:	223a      	movs	r2, #58	; 0x3a
 80165fa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80165fc:	68bb      	ldr	r3, [r7, #8]
 80165fe:	3302      	adds	r3, #2
 8016600:	222f      	movs	r2, #47	; 0x2f
 8016602:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016604:	68bb      	ldr	r3, [r7, #8]
 8016606:	3303      	adds	r3, #3
 8016608:	2200      	movs	r2, #0
 801660a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801660c:	2300      	movs	r3, #0
 801660e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8016610:	7dfb      	ldrb	r3, [r7, #23]
}
 8016612:	4618      	mov	r0, r3
 8016614:	371c      	adds	r7, #28
 8016616:	46bd      	mov	sp, r7
 8016618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801661c:	4770      	bx	lr
 801661e:	bf00      	nop
 8016620:	240015e8 	.word	0x240015e8

08016624 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016624:	b580      	push	{r7, lr}
 8016626:	b082      	sub	sp, #8
 8016628:	af00      	add	r7, sp, #0
 801662a:	6078      	str	r0, [r7, #4]
 801662c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801662e:	2200      	movs	r2, #0
 8016630:	6839      	ldr	r1, [r7, #0]
 8016632:	6878      	ldr	r0, [r7, #4]
 8016634:	f7ff ffaa 	bl	801658c <FATFS_LinkDriverEx>
 8016638:	4603      	mov	r3, r0
}
 801663a:	4618      	mov	r0, r3
 801663c:	3708      	adds	r7, #8
 801663e:	46bd      	mov	sp, r7
 8016640:	bd80      	pop	{r7, pc}
	...

08016644 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016644:	b580      	push	{r7, lr}
 8016646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8016648:	2201      	movs	r2, #1
 801664a:	4913      	ldr	r1, [pc, #76]	; (8016698 <MX_USB_DEVICE_Init+0x54>)
 801664c:	4813      	ldr	r0, [pc, #76]	; (801669c <MX_USB_DEVICE_Init+0x58>)
 801664e:	f7fe fca5 	bl	8014f9c <USBD_Init>
 8016652:	4603      	mov	r3, r0
 8016654:	2b00      	cmp	r3, #0
 8016656:	d001      	beq.n	801665c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016658:	f7ec f986 	bl	8002968 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 801665c:	4910      	ldr	r1, [pc, #64]	; (80166a0 <MX_USB_DEVICE_Init+0x5c>)
 801665e:	480f      	ldr	r0, [pc, #60]	; (801669c <MX_USB_DEVICE_Init+0x58>)
 8016660:	f7fe fccc 	bl	8014ffc <USBD_RegisterClass>
 8016664:	4603      	mov	r3, r0
 8016666:	2b00      	cmp	r3, #0
 8016668:	d001      	beq.n	801666e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801666a:	f7ec f97d 	bl	8002968 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 801666e:	490d      	ldr	r1, [pc, #52]	; (80166a4 <MX_USB_DEVICE_Init+0x60>)
 8016670:	480a      	ldr	r0, [pc, #40]	; (801669c <MX_USB_DEVICE_Init+0x58>)
 8016672:	f7fe fbc3 	bl	8014dfc <USBD_CDC_RegisterInterface>
 8016676:	4603      	mov	r3, r0
 8016678:	2b00      	cmp	r3, #0
 801667a:	d001      	beq.n	8016680 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801667c:	f7ec f974 	bl	8002968 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8016680:	4806      	ldr	r0, [pc, #24]	; (801669c <MX_USB_DEVICE_Init+0x58>)
 8016682:	f7fe fcf1 	bl	8015068 <USBD_Start>
 8016686:	4603      	mov	r3, r0
 8016688:	2b00      	cmp	r3, #0
 801668a:	d001      	beq.n	8016690 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801668c:	f7ec f96c 	bl	8002968 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8016690:	f7f3 f908 	bl	80098a4 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016694:	bf00      	nop
 8016696:	bd80      	pop	{r7, pc}
 8016698:	240000b0 	.word	0x240000b0
 801669c:	240015f4 	.word	0x240015f4
 80166a0:	2400001c 	.word	0x2400001c
 80166a4:	2400009c 	.word	0x2400009c

080166a8 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80166a8:	b580      	push	{r7, lr}
 80166aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80166ac:	2200      	movs	r2, #0
 80166ae:	4905      	ldr	r1, [pc, #20]	; (80166c4 <CDC_Init_HS+0x1c>)
 80166b0:	4805      	ldr	r0, [pc, #20]	; (80166c8 <CDC_Init_HS+0x20>)
 80166b2:	f7fe fbbd 	bl	8014e30 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80166b6:	4905      	ldr	r1, [pc, #20]	; (80166cc <CDC_Init_HS+0x24>)
 80166b8:	4803      	ldr	r0, [pc, #12]	; (80166c8 <CDC_Init_HS+0x20>)
 80166ba:	f7fe fbdb 	bl	8014e74 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80166be:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80166c0:	4618      	mov	r0, r3
 80166c2:	bd80      	pop	{r7, pc}
 80166c4:	240020d0 	.word	0x240020d0
 80166c8:	240015f4 	.word	0x240015f4
 80166cc:	240018d0 	.word	0x240018d0

080166d0 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80166d0:	b480      	push	{r7}
 80166d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 80166d4:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80166d6:	4618      	mov	r0, r3
 80166d8:	46bd      	mov	sp, r7
 80166da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166de:	4770      	bx	lr

080166e0 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80166e0:	b480      	push	{r7}
 80166e2:	b083      	sub	sp, #12
 80166e4:	af00      	add	r7, sp, #0
 80166e6:	4603      	mov	r3, r0
 80166e8:	6039      	str	r1, [r7, #0]
 80166ea:	71fb      	strb	r3, [r7, #7]
 80166ec:	4613      	mov	r3, r2
 80166ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 80166f0:	79fb      	ldrb	r3, [r7, #7]
 80166f2:	2b23      	cmp	r3, #35	; 0x23
 80166f4:	d84a      	bhi.n	801678c <CDC_Control_HS+0xac>
 80166f6:	a201      	add	r2, pc, #4	; (adr r2, 80166fc <CDC_Control_HS+0x1c>)
 80166f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80166fc:	0801678d 	.word	0x0801678d
 8016700:	0801678d 	.word	0x0801678d
 8016704:	0801678d 	.word	0x0801678d
 8016708:	0801678d 	.word	0x0801678d
 801670c:	0801678d 	.word	0x0801678d
 8016710:	0801678d 	.word	0x0801678d
 8016714:	0801678d 	.word	0x0801678d
 8016718:	0801678d 	.word	0x0801678d
 801671c:	0801678d 	.word	0x0801678d
 8016720:	0801678d 	.word	0x0801678d
 8016724:	0801678d 	.word	0x0801678d
 8016728:	0801678d 	.word	0x0801678d
 801672c:	0801678d 	.word	0x0801678d
 8016730:	0801678d 	.word	0x0801678d
 8016734:	0801678d 	.word	0x0801678d
 8016738:	0801678d 	.word	0x0801678d
 801673c:	0801678d 	.word	0x0801678d
 8016740:	0801678d 	.word	0x0801678d
 8016744:	0801678d 	.word	0x0801678d
 8016748:	0801678d 	.word	0x0801678d
 801674c:	0801678d 	.word	0x0801678d
 8016750:	0801678d 	.word	0x0801678d
 8016754:	0801678d 	.word	0x0801678d
 8016758:	0801678d 	.word	0x0801678d
 801675c:	0801678d 	.word	0x0801678d
 8016760:	0801678d 	.word	0x0801678d
 8016764:	0801678d 	.word	0x0801678d
 8016768:	0801678d 	.word	0x0801678d
 801676c:	0801678d 	.word	0x0801678d
 8016770:	0801678d 	.word	0x0801678d
 8016774:	0801678d 	.word	0x0801678d
 8016778:	0801678d 	.word	0x0801678d
 801677c:	0801678d 	.word	0x0801678d
 8016780:	0801678d 	.word	0x0801678d
 8016784:	0801678d 	.word	0x0801678d
 8016788:	0801678d 	.word	0x0801678d
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 801678c:	bf00      	nop
  }

  return (USBD_OK);
 801678e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8016790:	4618      	mov	r0, r3
 8016792:	370c      	adds	r7, #12
 8016794:	46bd      	mov	sp, r7
 8016796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801679a:	4770      	bx	lr

0801679c <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 801679c:	b580      	push	{r7, lr}
 801679e:	b084      	sub	sp, #16
 80167a0:	af00      	add	r7, sp, #0
 80167a2:	6078      	str	r0, [r7, #4]
 80167a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80167a6:	6879      	ldr	r1, [r7, #4]
 80167a8:	480e      	ldr	r0, [pc, #56]	; (80167e4 <CDC_Receive_HS+0x48>)
 80167aa:	f7fe fb63 	bl	8014e74 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80167ae:	480d      	ldr	r0, [pc, #52]	; (80167e4 <CDC_Receive_HS+0x48>)
 80167b0:	f7fe fbbe 	bl	8014f30 <USBD_CDC_ReceivePacket>

  extern uint8_t usbDataBuffer[usbBufferLen];
  extern uint32_t usbBytesReady;

  uint32_t cpyLen = *Len;
 80167b4:	683b      	ldr	r3, [r7, #0]
 80167b6:	681b      	ldr	r3, [r3, #0]
 80167b8:	60fb      	str	r3, [r7, #12]
  /*char debug[250];
  sprintf(debug, "cpyLen: %d\n", cpyLen);
  CDC_Transmit_HS(debug, strlen(debug));*/

  memcpy(usbDataBuffer + usbBytesReady, Buf, cpyLen);
 80167ba:	4b0b      	ldr	r3, [pc, #44]	; (80167e8 <CDC_Receive_HS+0x4c>)
 80167bc:	681b      	ldr	r3, [r3, #0]
 80167be:	4a0b      	ldr	r2, [pc, #44]	; (80167ec <CDC_Receive_HS+0x50>)
 80167c0:	4413      	add	r3, r2
 80167c2:	68fa      	ldr	r2, [r7, #12]
 80167c4:	6879      	ldr	r1, [r7, #4]
 80167c6:	4618      	mov	r0, r3
 80167c8:	f000 fcf0 	bl	80171ac <memcpy>
  usbBytesReady += cpyLen;
 80167cc:	4b06      	ldr	r3, [pc, #24]	; (80167e8 <CDC_Receive_HS+0x4c>)
 80167ce:	681a      	ldr	r2, [r3, #0]
 80167d0:	68fb      	ldr	r3, [r7, #12]
 80167d2:	4413      	add	r3, r2
 80167d4:	4a04      	ldr	r2, [pc, #16]	; (80167e8 <CDC_Receive_HS+0x4c>)
 80167d6:	6013      	str	r3, [r2, #0]
  
  return (USBD_OK);
 80167d8:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80167da:	4618      	mov	r0, r3
 80167dc:	3710      	adds	r7, #16
 80167de:	46bd      	mov	sp, r7
 80167e0:	bd80      	pop	{r7, pc}
 80167e2:	bf00      	nop
 80167e4:	240015f4 	.word	0x240015f4
 80167e8:	2400026c 	.word	0x2400026c
 80167ec:	2400016c 	.word	0x2400016c

080167f0 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 80167f0:	b580      	push	{r7, lr}
 80167f2:	b084      	sub	sp, #16
 80167f4:	af00      	add	r7, sp, #0
 80167f6:	6078      	str	r0, [r7, #4]
 80167f8:	460b      	mov	r3, r1
 80167fa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80167fc:	2300      	movs	r3, #0
 80167fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8016800:	4b0d      	ldr	r3, [pc, #52]	; (8016838 <CDC_Transmit_HS+0x48>)
 8016802:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016806:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016808:	68bb      	ldr	r3, [r7, #8]
 801680a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801680e:	2b00      	cmp	r3, #0
 8016810:	d001      	beq.n	8016816 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8016812:	2301      	movs	r3, #1
 8016814:	e00b      	b.n	801682e <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8016816:	887b      	ldrh	r3, [r7, #2]
 8016818:	461a      	mov	r2, r3
 801681a:	6879      	ldr	r1, [r7, #4]
 801681c:	4806      	ldr	r0, [pc, #24]	; (8016838 <CDC_Transmit_HS+0x48>)
 801681e:	f7fe fb07 	bl	8014e30 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8016822:	4805      	ldr	r0, [pc, #20]	; (8016838 <CDC_Transmit_HS+0x48>)
 8016824:	f7fe fb44 	bl	8014eb0 <USBD_CDC_TransmitPacket>
 8016828:	4603      	mov	r3, r0
 801682a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 801682c:	7bfb      	ldrb	r3, [r7, #15]
}
 801682e:	4618      	mov	r0, r3
 8016830:	3710      	adds	r7, #16
 8016832:	46bd      	mov	sp, r7
 8016834:	bd80      	pop	{r7, pc}
 8016836:	bf00      	nop
 8016838:	240015f4 	.word	0x240015f4

0801683c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801683c:	b480      	push	{r7}
 801683e:	b087      	sub	sp, #28
 8016840:	af00      	add	r7, sp, #0
 8016842:	60f8      	str	r0, [r7, #12]
 8016844:	60b9      	str	r1, [r7, #8]
 8016846:	4613      	mov	r3, r2
 8016848:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801684a:	2300      	movs	r3, #0
 801684c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801684e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016852:	4618      	mov	r0, r3
 8016854:	371c      	adds	r7, #28
 8016856:	46bd      	mov	sp, r7
 8016858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801685c:	4770      	bx	lr
	...

08016860 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016860:	b480      	push	{r7}
 8016862:	b083      	sub	sp, #12
 8016864:	af00      	add	r7, sp, #0
 8016866:	4603      	mov	r3, r0
 8016868:	6039      	str	r1, [r7, #0]
 801686a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 801686c:	683b      	ldr	r3, [r7, #0]
 801686e:	2212      	movs	r2, #18
 8016870:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8016872:	4b03      	ldr	r3, [pc, #12]	; (8016880 <USBD_HS_DeviceDescriptor+0x20>)
}
 8016874:	4618      	mov	r0, r3
 8016876:	370c      	adds	r7, #12
 8016878:	46bd      	mov	sp, r7
 801687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801687e:	4770      	bx	lr
 8016880:	240000cc 	.word	0x240000cc

08016884 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016884:	b480      	push	{r7}
 8016886:	b083      	sub	sp, #12
 8016888:	af00      	add	r7, sp, #0
 801688a:	4603      	mov	r3, r0
 801688c:	6039      	str	r1, [r7, #0]
 801688e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016890:	683b      	ldr	r3, [r7, #0]
 8016892:	2204      	movs	r2, #4
 8016894:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016896:	4b03      	ldr	r3, [pc, #12]	; (80168a4 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8016898:	4618      	mov	r0, r3
 801689a:	370c      	adds	r7, #12
 801689c:	46bd      	mov	sp, r7
 801689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168a2:	4770      	bx	lr
 80168a4:	240000e0 	.word	0x240000e0

080168a8 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80168a8:	b580      	push	{r7, lr}
 80168aa:	b082      	sub	sp, #8
 80168ac:	af00      	add	r7, sp, #0
 80168ae:	4603      	mov	r3, r0
 80168b0:	6039      	str	r1, [r7, #0]
 80168b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80168b4:	79fb      	ldrb	r3, [r7, #7]
 80168b6:	2b00      	cmp	r3, #0
 80168b8:	d105      	bne.n	80168c6 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80168ba:	683a      	ldr	r2, [r7, #0]
 80168bc:	4907      	ldr	r1, [pc, #28]	; (80168dc <USBD_HS_ProductStrDescriptor+0x34>)
 80168be:	4808      	ldr	r0, [pc, #32]	; (80168e0 <USBD_HS_ProductStrDescriptor+0x38>)
 80168c0:	f7ff fd84 	bl	80163cc <USBD_GetString>
 80168c4:	e004      	b.n	80168d0 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80168c6:	683a      	ldr	r2, [r7, #0]
 80168c8:	4904      	ldr	r1, [pc, #16]	; (80168dc <USBD_HS_ProductStrDescriptor+0x34>)
 80168ca:	4805      	ldr	r0, [pc, #20]	; (80168e0 <USBD_HS_ProductStrDescriptor+0x38>)
 80168cc:	f7ff fd7e 	bl	80163cc <USBD_GetString>
  }
  return USBD_StrDesc;
 80168d0:	4b02      	ldr	r3, [pc, #8]	; (80168dc <USBD_HS_ProductStrDescriptor+0x34>)
}
 80168d2:	4618      	mov	r0, r3
 80168d4:	3708      	adds	r7, #8
 80168d6:	46bd      	mov	sp, r7
 80168d8:	bd80      	pop	{r7, pc}
 80168da:	bf00      	nop
 80168dc:	240028d0 	.word	0x240028d0
 80168e0:	080184e8 	.word	0x080184e8

080168e4 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80168e4:	b580      	push	{r7, lr}
 80168e6:	b082      	sub	sp, #8
 80168e8:	af00      	add	r7, sp, #0
 80168ea:	4603      	mov	r3, r0
 80168ec:	6039      	str	r1, [r7, #0]
 80168ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80168f0:	683a      	ldr	r2, [r7, #0]
 80168f2:	4904      	ldr	r1, [pc, #16]	; (8016904 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80168f4:	4804      	ldr	r0, [pc, #16]	; (8016908 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80168f6:	f7ff fd69 	bl	80163cc <USBD_GetString>
  return USBD_StrDesc;
 80168fa:	4b02      	ldr	r3, [pc, #8]	; (8016904 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80168fc:	4618      	mov	r0, r3
 80168fe:	3708      	adds	r7, #8
 8016900:	46bd      	mov	sp, r7
 8016902:	bd80      	pop	{r7, pc}
 8016904:	240028d0 	.word	0x240028d0
 8016908:	08018504 	.word	0x08018504

0801690c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801690c:	b580      	push	{r7, lr}
 801690e:	b082      	sub	sp, #8
 8016910:	af00      	add	r7, sp, #0
 8016912:	4603      	mov	r3, r0
 8016914:	6039      	str	r1, [r7, #0]
 8016916:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016918:	683b      	ldr	r3, [r7, #0]
 801691a:	221a      	movs	r2, #26
 801691c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801691e:	f000 f843 	bl	80169a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8016922:	4b02      	ldr	r3, [pc, #8]	; (801692c <USBD_HS_SerialStrDescriptor+0x20>)
}
 8016924:	4618      	mov	r0, r3
 8016926:	3708      	adds	r7, #8
 8016928:	46bd      	mov	sp, r7
 801692a:	bd80      	pop	{r7, pc}
 801692c:	240000e4 	.word	0x240000e4

08016930 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016930:	b580      	push	{r7, lr}
 8016932:	b082      	sub	sp, #8
 8016934:	af00      	add	r7, sp, #0
 8016936:	4603      	mov	r3, r0
 8016938:	6039      	str	r1, [r7, #0]
 801693a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801693c:	79fb      	ldrb	r3, [r7, #7]
 801693e:	2b00      	cmp	r3, #0
 8016940:	d105      	bne.n	801694e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8016942:	683a      	ldr	r2, [r7, #0]
 8016944:	4907      	ldr	r1, [pc, #28]	; (8016964 <USBD_HS_ConfigStrDescriptor+0x34>)
 8016946:	4808      	ldr	r0, [pc, #32]	; (8016968 <USBD_HS_ConfigStrDescriptor+0x38>)
 8016948:	f7ff fd40 	bl	80163cc <USBD_GetString>
 801694c:	e004      	b.n	8016958 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801694e:	683a      	ldr	r2, [r7, #0]
 8016950:	4904      	ldr	r1, [pc, #16]	; (8016964 <USBD_HS_ConfigStrDescriptor+0x34>)
 8016952:	4805      	ldr	r0, [pc, #20]	; (8016968 <USBD_HS_ConfigStrDescriptor+0x38>)
 8016954:	f7ff fd3a 	bl	80163cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8016958:	4b02      	ldr	r3, [pc, #8]	; (8016964 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801695a:	4618      	mov	r0, r3
 801695c:	3708      	adds	r7, #8
 801695e:	46bd      	mov	sp, r7
 8016960:	bd80      	pop	{r7, pc}
 8016962:	bf00      	nop
 8016964:	240028d0 	.word	0x240028d0
 8016968:	08018508 	.word	0x08018508

0801696c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801696c:	b580      	push	{r7, lr}
 801696e:	b082      	sub	sp, #8
 8016970:	af00      	add	r7, sp, #0
 8016972:	4603      	mov	r3, r0
 8016974:	6039      	str	r1, [r7, #0]
 8016976:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016978:	79fb      	ldrb	r3, [r7, #7]
 801697a:	2b00      	cmp	r3, #0
 801697c:	d105      	bne.n	801698a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801697e:	683a      	ldr	r2, [r7, #0]
 8016980:	4907      	ldr	r1, [pc, #28]	; (80169a0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8016982:	4808      	ldr	r0, [pc, #32]	; (80169a4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8016984:	f7ff fd22 	bl	80163cc <USBD_GetString>
 8016988:	e004      	b.n	8016994 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801698a:	683a      	ldr	r2, [r7, #0]
 801698c:	4904      	ldr	r1, [pc, #16]	; (80169a0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801698e:	4805      	ldr	r0, [pc, #20]	; (80169a4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8016990:	f7ff fd1c 	bl	80163cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8016994:	4b02      	ldr	r3, [pc, #8]	; (80169a0 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8016996:	4618      	mov	r0, r3
 8016998:	3708      	adds	r7, #8
 801699a:	46bd      	mov	sp, r7
 801699c:	bd80      	pop	{r7, pc}
 801699e:	bf00      	nop
 80169a0:	240028d0 	.word	0x240028d0
 80169a4:	08018514 	.word	0x08018514

080169a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80169a8:	b580      	push	{r7, lr}
 80169aa:	b084      	sub	sp, #16
 80169ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80169ae:	4b0f      	ldr	r3, [pc, #60]	; (80169ec <Get_SerialNum+0x44>)
 80169b0:	681b      	ldr	r3, [r3, #0]
 80169b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80169b4:	4b0e      	ldr	r3, [pc, #56]	; (80169f0 <Get_SerialNum+0x48>)
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80169ba:	4b0e      	ldr	r3, [pc, #56]	; (80169f4 <Get_SerialNum+0x4c>)
 80169bc:	681b      	ldr	r3, [r3, #0]
 80169be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80169c0:	68fa      	ldr	r2, [r7, #12]
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	4413      	add	r3, r2
 80169c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80169c8:	68fb      	ldr	r3, [r7, #12]
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d009      	beq.n	80169e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80169ce:	2208      	movs	r2, #8
 80169d0:	4909      	ldr	r1, [pc, #36]	; (80169f8 <Get_SerialNum+0x50>)
 80169d2:	68f8      	ldr	r0, [r7, #12]
 80169d4:	f000 f814 	bl	8016a00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80169d8:	2204      	movs	r2, #4
 80169da:	4908      	ldr	r1, [pc, #32]	; (80169fc <Get_SerialNum+0x54>)
 80169dc:	68b8      	ldr	r0, [r7, #8]
 80169de:	f000 f80f 	bl	8016a00 <IntToUnicode>
  }
}
 80169e2:	bf00      	nop
 80169e4:	3710      	adds	r7, #16
 80169e6:	46bd      	mov	sp, r7
 80169e8:	bd80      	pop	{r7, pc}
 80169ea:	bf00      	nop
 80169ec:	1ff1e800 	.word	0x1ff1e800
 80169f0:	1ff1e804 	.word	0x1ff1e804
 80169f4:	1ff1e808 	.word	0x1ff1e808
 80169f8:	240000e6 	.word	0x240000e6
 80169fc:	240000f6 	.word	0x240000f6

08016a00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016a00:	b480      	push	{r7}
 8016a02:	b087      	sub	sp, #28
 8016a04:	af00      	add	r7, sp, #0
 8016a06:	60f8      	str	r0, [r7, #12]
 8016a08:	60b9      	str	r1, [r7, #8]
 8016a0a:	4613      	mov	r3, r2
 8016a0c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016a0e:	2300      	movs	r3, #0
 8016a10:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016a12:	2300      	movs	r3, #0
 8016a14:	75fb      	strb	r3, [r7, #23]
 8016a16:	e027      	b.n	8016a68 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016a18:	68fb      	ldr	r3, [r7, #12]
 8016a1a:	0f1b      	lsrs	r3, r3, #28
 8016a1c:	2b09      	cmp	r3, #9
 8016a1e:	d80b      	bhi.n	8016a38 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016a20:	68fb      	ldr	r3, [r7, #12]
 8016a22:	0f1b      	lsrs	r3, r3, #28
 8016a24:	b2da      	uxtb	r2, r3
 8016a26:	7dfb      	ldrb	r3, [r7, #23]
 8016a28:	005b      	lsls	r3, r3, #1
 8016a2a:	4619      	mov	r1, r3
 8016a2c:	68bb      	ldr	r3, [r7, #8]
 8016a2e:	440b      	add	r3, r1
 8016a30:	3230      	adds	r2, #48	; 0x30
 8016a32:	b2d2      	uxtb	r2, r2
 8016a34:	701a      	strb	r2, [r3, #0]
 8016a36:	e00a      	b.n	8016a4e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	0f1b      	lsrs	r3, r3, #28
 8016a3c:	b2da      	uxtb	r2, r3
 8016a3e:	7dfb      	ldrb	r3, [r7, #23]
 8016a40:	005b      	lsls	r3, r3, #1
 8016a42:	4619      	mov	r1, r3
 8016a44:	68bb      	ldr	r3, [r7, #8]
 8016a46:	440b      	add	r3, r1
 8016a48:	3237      	adds	r2, #55	; 0x37
 8016a4a:	b2d2      	uxtb	r2, r2
 8016a4c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016a4e:	68fb      	ldr	r3, [r7, #12]
 8016a50:	011b      	lsls	r3, r3, #4
 8016a52:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016a54:	7dfb      	ldrb	r3, [r7, #23]
 8016a56:	005b      	lsls	r3, r3, #1
 8016a58:	3301      	adds	r3, #1
 8016a5a:	68ba      	ldr	r2, [r7, #8]
 8016a5c:	4413      	add	r3, r2
 8016a5e:	2200      	movs	r2, #0
 8016a60:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016a62:	7dfb      	ldrb	r3, [r7, #23]
 8016a64:	3301      	adds	r3, #1
 8016a66:	75fb      	strb	r3, [r7, #23]
 8016a68:	7dfa      	ldrb	r2, [r7, #23]
 8016a6a:	79fb      	ldrb	r3, [r7, #7]
 8016a6c:	429a      	cmp	r2, r3
 8016a6e:	d3d3      	bcc.n	8016a18 <IntToUnicode+0x18>
  }
}
 8016a70:	bf00      	nop
 8016a72:	bf00      	nop
 8016a74:	371c      	adds	r7, #28
 8016a76:	46bd      	mov	sp, r7
 8016a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a7c:	4770      	bx	lr
	...

08016a80 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016a80:	b580      	push	{r7, lr}
 8016a82:	b0b2      	sub	sp, #200	; 0xc8
 8016a84:	af00      	add	r7, sp, #0
 8016a86:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8016a88:	f107 0310 	add.w	r3, r7, #16
 8016a8c:	22b8      	movs	r2, #184	; 0xb8
 8016a8e:	2100      	movs	r1, #0
 8016a90:	4618      	mov	r0, r3
 8016a92:	f000 fb4f 	bl	8017134 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	681b      	ldr	r3, [r3, #0]
 8016a9a:	4a1a      	ldr	r2, [pc, #104]	; (8016b04 <HAL_PCD_MspInit+0x84>)
 8016a9c:	4293      	cmp	r3, r2
 8016a9e:	d12c      	bne.n	8016afa <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8016aa0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8016aa4:	f04f 0300 	mov.w	r3, #0
 8016aa8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8016aac:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8016ab0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8016ab4:	f107 0310 	add.w	r3, r7, #16
 8016ab8:	4618      	mov	r0, r3
 8016aba:	f7f3 fed3 	bl	800a864 <HAL_RCCEx_PeriphCLKConfig>
 8016abe:	4603      	mov	r3, r0
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d001      	beq.n	8016ac8 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8016ac4:	f7eb ff50 	bl	8002968 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8016ac8:	f7f2 feec 	bl	80098a4 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8016acc:	4b0e      	ldr	r3, [pc, #56]	; (8016b08 <HAL_PCD_MspInit+0x88>)
 8016ace:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016ad2:	4a0d      	ldr	r2, [pc, #52]	; (8016b08 <HAL_PCD_MspInit+0x88>)
 8016ad4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8016ad8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8016adc:	4b0a      	ldr	r3, [pc, #40]	; (8016b08 <HAL_PCD_MspInit+0x88>)
 8016ade:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016ae6:	60fb      	str	r3, [r7, #12]
 8016ae8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8016aea:	2200      	movs	r2, #0
 8016aec:	2100      	movs	r1, #0
 8016aee:	204d      	movs	r0, #77	; 0x4d
 8016af0:	f7ee fc5d 	bl	80053ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8016af4:	204d      	movs	r0, #77	; 0x4d
 8016af6:	f7ee fc74 	bl	80053e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8016afa:	bf00      	nop
 8016afc:	37c8      	adds	r7, #200	; 0xc8
 8016afe:	46bd      	mov	sp, r7
 8016b00:	bd80      	pop	{r7, pc}
 8016b02:	bf00      	nop
 8016b04:	40040000 	.word	0x40040000
 8016b08:	58024400 	.word	0x58024400

08016b0c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b0c:	b580      	push	{r7, lr}
 8016b0e:	b082      	sub	sp, #8
 8016b10:	af00      	add	r7, sp, #0
 8016b12:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8016b20:	4619      	mov	r1, r3
 8016b22:	4610      	mov	r0, r2
 8016b24:	f7fe faed 	bl	8015102 <USBD_LL_SetupStage>
}
 8016b28:	bf00      	nop
 8016b2a:	3708      	adds	r7, #8
 8016b2c:	46bd      	mov	sp, r7
 8016b2e:	bd80      	pop	{r7, pc}

08016b30 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b30:	b580      	push	{r7, lr}
 8016b32:	b082      	sub	sp, #8
 8016b34:	af00      	add	r7, sp, #0
 8016b36:	6078      	str	r0, [r7, #4]
 8016b38:	460b      	mov	r3, r1
 8016b3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016b42:	78fa      	ldrb	r2, [r7, #3]
 8016b44:	6879      	ldr	r1, [r7, #4]
 8016b46:	4613      	mov	r3, r2
 8016b48:	00db      	lsls	r3, r3, #3
 8016b4a:	4413      	add	r3, r2
 8016b4c:	009b      	lsls	r3, r3, #2
 8016b4e:	440b      	add	r3, r1
 8016b50:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8016b54:	681a      	ldr	r2, [r3, #0]
 8016b56:	78fb      	ldrb	r3, [r7, #3]
 8016b58:	4619      	mov	r1, r3
 8016b5a:	f7fe fb27 	bl	80151ac <USBD_LL_DataOutStage>
}
 8016b5e:	bf00      	nop
 8016b60:	3708      	adds	r7, #8
 8016b62:	46bd      	mov	sp, r7
 8016b64:	bd80      	pop	{r7, pc}

08016b66 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b66:	b580      	push	{r7, lr}
 8016b68:	b082      	sub	sp, #8
 8016b6a:	af00      	add	r7, sp, #0
 8016b6c:	6078      	str	r0, [r7, #4]
 8016b6e:	460b      	mov	r3, r1
 8016b70:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016b78:	78fa      	ldrb	r2, [r7, #3]
 8016b7a:	6879      	ldr	r1, [r7, #4]
 8016b7c:	4613      	mov	r3, r2
 8016b7e:	00db      	lsls	r3, r3, #3
 8016b80:	4413      	add	r3, r2
 8016b82:	009b      	lsls	r3, r3, #2
 8016b84:	440b      	add	r3, r1
 8016b86:	3348      	adds	r3, #72	; 0x48
 8016b88:	681a      	ldr	r2, [r3, #0]
 8016b8a:	78fb      	ldrb	r3, [r7, #3]
 8016b8c:	4619      	mov	r1, r3
 8016b8e:	f7fe fbc0 	bl	8015312 <USBD_LL_DataInStage>
}
 8016b92:	bf00      	nop
 8016b94:	3708      	adds	r7, #8
 8016b96:	46bd      	mov	sp, r7
 8016b98:	bd80      	pop	{r7, pc}

08016b9a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b9a:	b580      	push	{r7, lr}
 8016b9c:	b082      	sub	sp, #8
 8016b9e:	af00      	add	r7, sp, #0
 8016ba0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016ba8:	4618      	mov	r0, r3
 8016baa:	f7fe fcfa 	bl	80155a2 <USBD_LL_SOF>
}
 8016bae:	bf00      	nop
 8016bb0:	3708      	adds	r7, #8
 8016bb2:	46bd      	mov	sp, r7
 8016bb4:	bd80      	pop	{r7, pc}

08016bb6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016bb6:	b580      	push	{r7, lr}
 8016bb8:	b084      	sub	sp, #16
 8016bba:	af00      	add	r7, sp, #0
 8016bbc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016bbe:	2301      	movs	r3, #1
 8016bc0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	691b      	ldr	r3, [r3, #16]
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d102      	bne.n	8016bd0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8016bca:	2300      	movs	r3, #0
 8016bcc:	73fb      	strb	r3, [r7, #15]
 8016bce:	e008      	b.n	8016be2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	691b      	ldr	r3, [r3, #16]
 8016bd4:	2b02      	cmp	r3, #2
 8016bd6:	d102      	bne.n	8016bde <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016bd8:	2301      	movs	r3, #1
 8016bda:	73fb      	strb	r3, [r7, #15]
 8016bdc:	e001      	b.n	8016be2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016bde:	f7eb fec3 	bl	8002968 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016be8:	7bfa      	ldrb	r2, [r7, #15]
 8016bea:	4611      	mov	r1, r2
 8016bec:	4618      	mov	r0, r3
 8016bee:	f7fe fc94 	bl	801551a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016bf8:	4618      	mov	r0, r3
 8016bfa:	f7fe fc3c 	bl	8015476 <USBD_LL_Reset>
}
 8016bfe:	bf00      	nop
 8016c00:	3710      	adds	r7, #16
 8016c02:	46bd      	mov	sp, r7
 8016c04:	bd80      	pop	{r7, pc}
	...

08016c08 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c08:	b580      	push	{r7, lr}
 8016c0a:	b082      	sub	sp, #8
 8016c0c:	af00      	add	r7, sp, #0
 8016c0e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c16:	4618      	mov	r0, r3
 8016c18:	f7fe fc8f 	bl	801553a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016c24:	681b      	ldr	r3, [r3, #0]
 8016c26:	687a      	ldr	r2, [r7, #4]
 8016c28:	6812      	ldr	r2, [r2, #0]
 8016c2a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016c2e:	f043 0301 	orr.w	r3, r3, #1
 8016c32:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	6a1b      	ldr	r3, [r3, #32]
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	d005      	beq.n	8016c48 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016c3c:	4b04      	ldr	r3, [pc, #16]	; (8016c50 <HAL_PCD_SuspendCallback+0x48>)
 8016c3e:	691b      	ldr	r3, [r3, #16]
 8016c40:	4a03      	ldr	r2, [pc, #12]	; (8016c50 <HAL_PCD_SuspendCallback+0x48>)
 8016c42:	f043 0306 	orr.w	r3, r3, #6
 8016c46:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016c48:	bf00      	nop
 8016c4a:	3708      	adds	r7, #8
 8016c4c:	46bd      	mov	sp, r7
 8016c4e:	bd80      	pop	{r7, pc}
 8016c50:	e000ed00 	.word	0xe000ed00

08016c54 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c54:	b580      	push	{r7, lr}
 8016c56:	b082      	sub	sp, #8
 8016c58:	af00      	add	r7, sp, #0
 8016c5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c62:	4618      	mov	r0, r3
 8016c64:	f7fe fc85 	bl	8015572 <USBD_LL_Resume>
}
 8016c68:	bf00      	nop
 8016c6a:	3708      	adds	r7, #8
 8016c6c:	46bd      	mov	sp, r7
 8016c6e:	bd80      	pop	{r7, pc}

08016c70 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c70:	b580      	push	{r7, lr}
 8016c72:	b082      	sub	sp, #8
 8016c74:	af00      	add	r7, sp, #0
 8016c76:	6078      	str	r0, [r7, #4]
 8016c78:	460b      	mov	r3, r1
 8016c7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c82:	78fa      	ldrb	r2, [r7, #3]
 8016c84:	4611      	mov	r1, r2
 8016c86:	4618      	mov	r0, r3
 8016c88:	f7fe fcdd 	bl	8015646 <USBD_LL_IsoOUTIncomplete>
}
 8016c8c:	bf00      	nop
 8016c8e:	3708      	adds	r7, #8
 8016c90:	46bd      	mov	sp, r7
 8016c92:	bd80      	pop	{r7, pc}

08016c94 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c94:	b580      	push	{r7, lr}
 8016c96:	b082      	sub	sp, #8
 8016c98:	af00      	add	r7, sp, #0
 8016c9a:	6078      	str	r0, [r7, #4]
 8016c9c:	460b      	mov	r3, r1
 8016c9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016ca6:	78fa      	ldrb	r2, [r7, #3]
 8016ca8:	4611      	mov	r1, r2
 8016caa:	4618      	mov	r0, r3
 8016cac:	f7fe fc99 	bl	80155e2 <USBD_LL_IsoINIncomplete>
}
 8016cb0:	bf00      	nop
 8016cb2:	3708      	adds	r7, #8
 8016cb4:	46bd      	mov	sp, r7
 8016cb6:	bd80      	pop	{r7, pc}

08016cb8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016cb8:	b580      	push	{r7, lr}
 8016cba:	b082      	sub	sp, #8
 8016cbc:	af00      	add	r7, sp, #0
 8016cbe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016cc6:	4618      	mov	r0, r3
 8016cc8:	f7fe fcef 	bl	80156aa <USBD_LL_DevConnected>
}
 8016ccc:	bf00      	nop
 8016cce:	3708      	adds	r7, #8
 8016cd0:	46bd      	mov	sp, r7
 8016cd2:	bd80      	pop	{r7, pc}

08016cd4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016cd4:	b580      	push	{r7, lr}
 8016cd6:	b082      	sub	sp, #8
 8016cd8:	af00      	add	r7, sp, #0
 8016cda:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016ce2:	4618      	mov	r0, r3
 8016ce4:	f7fe fcec 	bl	80156c0 <USBD_LL_DevDisconnected>
}
 8016ce8:	bf00      	nop
 8016cea:	3708      	adds	r7, #8
 8016cec:	46bd      	mov	sp, r7
 8016cee:	bd80      	pop	{r7, pc}

08016cf0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016cf0:	b580      	push	{r7, lr}
 8016cf2:	b082      	sub	sp, #8
 8016cf4:	af00      	add	r7, sp, #0
 8016cf6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	781b      	ldrb	r3, [r3, #0]
 8016cfc:	2b01      	cmp	r3, #1
 8016cfe:	d140      	bne.n	8016d82 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8016d00:	4a22      	ldr	r2, [pc, #136]	; (8016d8c <USBD_LL_Init+0x9c>)
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	4a20      	ldr	r2, [pc, #128]	; (8016d8c <USBD_LL_Init+0x9c>)
 8016d0c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8016d10:	4b1e      	ldr	r3, [pc, #120]	; (8016d8c <USBD_LL_Init+0x9c>)
 8016d12:	4a1f      	ldr	r2, [pc, #124]	; (8016d90 <USBD_LL_Init+0xa0>)
 8016d14:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8016d16:	4b1d      	ldr	r3, [pc, #116]	; (8016d8c <USBD_LL_Init+0x9c>)
 8016d18:	2209      	movs	r2, #9
 8016d1a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8016d1c:	4b1b      	ldr	r3, [pc, #108]	; (8016d8c <USBD_LL_Init+0x9c>)
 8016d1e:	2202      	movs	r2, #2
 8016d20:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8016d22:	4b1a      	ldr	r3, [pc, #104]	; (8016d8c <USBD_LL_Init+0x9c>)
 8016d24:	2200      	movs	r2, #0
 8016d26:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8016d28:	4b18      	ldr	r3, [pc, #96]	; (8016d8c <USBD_LL_Init+0x9c>)
 8016d2a:	2202      	movs	r2, #2
 8016d2c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8016d2e:	4b17      	ldr	r3, [pc, #92]	; (8016d8c <USBD_LL_Init+0x9c>)
 8016d30:	2200      	movs	r2, #0
 8016d32:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8016d34:	4b15      	ldr	r3, [pc, #84]	; (8016d8c <USBD_LL_Init+0x9c>)
 8016d36:	2200      	movs	r2, #0
 8016d38:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8016d3a:	4b14      	ldr	r3, [pc, #80]	; (8016d8c <USBD_LL_Init+0x9c>)
 8016d3c:	2200      	movs	r2, #0
 8016d3e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8016d40:	4b12      	ldr	r3, [pc, #72]	; (8016d8c <USBD_LL_Init+0x9c>)
 8016d42:	2200      	movs	r2, #0
 8016d44:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8016d46:	4b11      	ldr	r3, [pc, #68]	; (8016d8c <USBD_LL_Init+0x9c>)
 8016d48:	2200      	movs	r2, #0
 8016d4a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8016d4c:	4b0f      	ldr	r3, [pc, #60]	; (8016d8c <USBD_LL_Init+0x9c>)
 8016d4e:	2200      	movs	r2, #0
 8016d50:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8016d52:	480e      	ldr	r0, [pc, #56]	; (8016d8c <USBD_LL_Init+0x9c>)
 8016d54:	f7f1 fab3 	bl	80082be <HAL_PCD_Init>
 8016d58:	4603      	mov	r3, r0
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	d001      	beq.n	8016d62 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8016d5e:	f7eb fe03 	bl	8002968 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8016d62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8016d66:	4809      	ldr	r0, [pc, #36]	; (8016d8c <USBD_LL_Init+0x9c>)
 8016d68:	f7f2 fd21 	bl	80097ae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8016d6c:	2280      	movs	r2, #128	; 0x80
 8016d6e:	2100      	movs	r1, #0
 8016d70:	4806      	ldr	r0, [pc, #24]	; (8016d8c <USBD_LL_Init+0x9c>)
 8016d72:	f7f2 fcd5 	bl	8009720 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8016d76:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8016d7a:	2101      	movs	r1, #1
 8016d7c:	4803      	ldr	r0, [pc, #12]	; (8016d8c <USBD_LL_Init+0x9c>)
 8016d7e:	f7f2 fccf 	bl	8009720 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8016d82:	2300      	movs	r3, #0
}
 8016d84:	4618      	mov	r0, r3
 8016d86:	3708      	adds	r7, #8
 8016d88:	46bd      	mov	sp, r7
 8016d8a:	bd80      	pop	{r7, pc}
 8016d8c:	24002ad0 	.word	0x24002ad0
 8016d90:	40040000 	.word	0x40040000

08016d94 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016d94:	b580      	push	{r7, lr}
 8016d96:	b084      	sub	sp, #16
 8016d98:	af00      	add	r7, sp, #0
 8016d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d9c:	2300      	movs	r3, #0
 8016d9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016da0:	2300      	movs	r3, #0
 8016da2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016daa:	4618      	mov	r0, r3
 8016dac:	f7f1 fbab 	bl	8008506 <HAL_PCD_Start>
 8016db0:	4603      	mov	r3, r0
 8016db2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016db4:	7bfb      	ldrb	r3, [r7, #15]
 8016db6:	4618      	mov	r0, r3
 8016db8:	f000 f942 	bl	8017040 <USBD_Get_USB_Status>
 8016dbc:	4603      	mov	r3, r0
 8016dbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016dc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8016dc2:	4618      	mov	r0, r3
 8016dc4:	3710      	adds	r7, #16
 8016dc6:	46bd      	mov	sp, r7
 8016dc8:	bd80      	pop	{r7, pc}

08016dca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016dca:	b580      	push	{r7, lr}
 8016dcc:	b084      	sub	sp, #16
 8016dce:	af00      	add	r7, sp, #0
 8016dd0:	6078      	str	r0, [r7, #4]
 8016dd2:	4608      	mov	r0, r1
 8016dd4:	4611      	mov	r1, r2
 8016dd6:	461a      	mov	r2, r3
 8016dd8:	4603      	mov	r3, r0
 8016dda:	70fb      	strb	r3, [r7, #3]
 8016ddc:	460b      	mov	r3, r1
 8016dde:	70bb      	strb	r3, [r7, #2]
 8016de0:	4613      	mov	r3, r2
 8016de2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016de4:	2300      	movs	r3, #0
 8016de6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016de8:	2300      	movs	r3, #0
 8016dea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016df2:	78bb      	ldrb	r3, [r7, #2]
 8016df4:	883a      	ldrh	r2, [r7, #0]
 8016df6:	78f9      	ldrb	r1, [r7, #3]
 8016df8:	f7f2 f8ab 	bl	8008f52 <HAL_PCD_EP_Open>
 8016dfc:	4603      	mov	r3, r0
 8016dfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e00:	7bfb      	ldrb	r3, [r7, #15]
 8016e02:	4618      	mov	r0, r3
 8016e04:	f000 f91c 	bl	8017040 <USBD_Get_USB_Status>
 8016e08:	4603      	mov	r3, r0
 8016e0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016e0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8016e0e:	4618      	mov	r0, r3
 8016e10:	3710      	adds	r7, #16
 8016e12:	46bd      	mov	sp, r7
 8016e14:	bd80      	pop	{r7, pc}

08016e16 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e16:	b580      	push	{r7, lr}
 8016e18:	b084      	sub	sp, #16
 8016e1a:	af00      	add	r7, sp, #0
 8016e1c:	6078      	str	r0, [r7, #4]
 8016e1e:	460b      	mov	r3, r1
 8016e20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e22:	2300      	movs	r3, #0
 8016e24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e26:	2300      	movs	r3, #0
 8016e28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016e30:	78fa      	ldrb	r2, [r7, #3]
 8016e32:	4611      	mov	r1, r2
 8016e34:	4618      	mov	r0, r3
 8016e36:	f7f2 f8f4 	bl	8009022 <HAL_PCD_EP_Close>
 8016e3a:	4603      	mov	r3, r0
 8016e3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e3e:	7bfb      	ldrb	r3, [r7, #15]
 8016e40:	4618      	mov	r0, r3
 8016e42:	f000 f8fd 	bl	8017040 <USBD_Get_USB_Status>
 8016e46:	4603      	mov	r3, r0
 8016e48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016e4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8016e4c:	4618      	mov	r0, r3
 8016e4e:	3710      	adds	r7, #16
 8016e50:	46bd      	mov	sp, r7
 8016e52:	bd80      	pop	{r7, pc}

08016e54 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e54:	b580      	push	{r7, lr}
 8016e56:	b084      	sub	sp, #16
 8016e58:	af00      	add	r7, sp, #0
 8016e5a:	6078      	str	r0, [r7, #4]
 8016e5c:	460b      	mov	r3, r1
 8016e5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e60:	2300      	movs	r3, #0
 8016e62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e64:	2300      	movs	r3, #0
 8016e66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016e6e:	78fa      	ldrb	r2, [r7, #3]
 8016e70:	4611      	mov	r1, r2
 8016e72:	4618      	mov	r0, r3
 8016e74:	f7f2 f9ae 	bl	80091d4 <HAL_PCD_EP_SetStall>
 8016e78:	4603      	mov	r3, r0
 8016e7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e7c:	7bfb      	ldrb	r3, [r7, #15]
 8016e7e:	4618      	mov	r0, r3
 8016e80:	f000 f8de 	bl	8017040 <USBD_Get_USB_Status>
 8016e84:	4603      	mov	r3, r0
 8016e86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016e88:	7bbb      	ldrb	r3, [r7, #14]
}
 8016e8a:	4618      	mov	r0, r3
 8016e8c:	3710      	adds	r7, #16
 8016e8e:	46bd      	mov	sp, r7
 8016e90:	bd80      	pop	{r7, pc}

08016e92 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e92:	b580      	push	{r7, lr}
 8016e94:	b084      	sub	sp, #16
 8016e96:	af00      	add	r7, sp, #0
 8016e98:	6078      	str	r0, [r7, #4]
 8016e9a:	460b      	mov	r3, r1
 8016e9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e9e:	2300      	movs	r3, #0
 8016ea0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ea2:	2300      	movs	r3, #0
 8016ea4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016eac:	78fa      	ldrb	r2, [r7, #3]
 8016eae:	4611      	mov	r1, r2
 8016eb0:	4618      	mov	r0, r3
 8016eb2:	f7f2 f9f3 	bl	800929c <HAL_PCD_EP_ClrStall>
 8016eb6:	4603      	mov	r3, r0
 8016eb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016eba:	7bfb      	ldrb	r3, [r7, #15]
 8016ebc:	4618      	mov	r0, r3
 8016ebe:	f000 f8bf 	bl	8017040 <USBD_Get_USB_Status>
 8016ec2:	4603      	mov	r3, r0
 8016ec4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016ec6:	7bbb      	ldrb	r3, [r7, #14]
}
 8016ec8:	4618      	mov	r0, r3
 8016eca:	3710      	adds	r7, #16
 8016ecc:	46bd      	mov	sp, r7
 8016ece:	bd80      	pop	{r7, pc}

08016ed0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016ed0:	b480      	push	{r7}
 8016ed2:	b085      	sub	sp, #20
 8016ed4:	af00      	add	r7, sp, #0
 8016ed6:	6078      	str	r0, [r7, #4]
 8016ed8:	460b      	mov	r3, r1
 8016eda:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016ee2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016ee4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	da0b      	bge.n	8016f04 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016eec:	78fb      	ldrb	r3, [r7, #3]
 8016eee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016ef2:	68f9      	ldr	r1, [r7, #12]
 8016ef4:	4613      	mov	r3, r2
 8016ef6:	00db      	lsls	r3, r3, #3
 8016ef8:	4413      	add	r3, r2
 8016efa:	009b      	lsls	r3, r3, #2
 8016efc:	440b      	add	r3, r1
 8016efe:	333e      	adds	r3, #62	; 0x3e
 8016f00:	781b      	ldrb	r3, [r3, #0]
 8016f02:	e00b      	b.n	8016f1c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016f04:	78fb      	ldrb	r3, [r7, #3]
 8016f06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016f0a:	68f9      	ldr	r1, [r7, #12]
 8016f0c:	4613      	mov	r3, r2
 8016f0e:	00db      	lsls	r3, r3, #3
 8016f10:	4413      	add	r3, r2
 8016f12:	009b      	lsls	r3, r3, #2
 8016f14:	440b      	add	r3, r1
 8016f16:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8016f1a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016f1c:	4618      	mov	r0, r3
 8016f1e:	3714      	adds	r7, #20
 8016f20:	46bd      	mov	sp, r7
 8016f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f26:	4770      	bx	lr

08016f28 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016f28:	b580      	push	{r7, lr}
 8016f2a:	b084      	sub	sp, #16
 8016f2c:	af00      	add	r7, sp, #0
 8016f2e:	6078      	str	r0, [r7, #4]
 8016f30:	460b      	mov	r3, r1
 8016f32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016f34:	2300      	movs	r3, #0
 8016f36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f38:	2300      	movs	r3, #0
 8016f3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016f42:	78fa      	ldrb	r2, [r7, #3]
 8016f44:	4611      	mov	r1, r2
 8016f46:	4618      	mov	r0, r3
 8016f48:	f7f1 ffde 	bl	8008f08 <HAL_PCD_SetAddress>
 8016f4c:	4603      	mov	r3, r0
 8016f4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016f50:	7bfb      	ldrb	r3, [r7, #15]
 8016f52:	4618      	mov	r0, r3
 8016f54:	f000 f874 	bl	8017040 <USBD_Get_USB_Status>
 8016f58:	4603      	mov	r3, r0
 8016f5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016f5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8016f5e:	4618      	mov	r0, r3
 8016f60:	3710      	adds	r7, #16
 8016f62:	46bd      	mov	sp, r7
 8016f64:	bd80      	pop	{r7, pc}

08016f66 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016f66:	b580      	push	{r7, lr}
 8016f68:	b086      	sub	sp, #24
 8016f6a:	af00      	add	r7, sp, #0
 8016f6c:	60f8      	str	r0, [r7, #12]
 8016f6e:	607a      	str	r2, [r7, #4]
 8016f70:	603b      	str	r3, [r7, #0]
 8016f72:	460b      	mov	r3, r1
 8016f74:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016f76:	2300      	movs	r3, #0
 8016f78:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f7a:	2300      	movs	r3, #0
 8016f7c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016f7e:	68fb      	ldr	r3, [r7, #12]
 8016f80:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016f84:	7af9      	ldrb	r1, [r7, #11]
 8016f86:	683b      	ldr	r3, [r7, #0]
 8016f88:	687a      	ldr	r2, [r7, #4]
 8016f8a:	f7f2 f8e8 	bl	800915e <HAL_PCD_EP_Transmit>
 8016f8e:	4603      	mov	r3, r0
 8016f90:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016f92:	7dfb      	ldrb	r3, [r7, #23]
 8016f94:	4618      	mov	r0, r3
 8016f96:	f000 f853 	bl	8017040 <USBD_Get_USB_Status>
 8016f9a:	4603      	mov	r3, r0
 8016f9c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016f9e:	7dbb      	ldrb	r3, [r7, #22]
}
 8016fa0:	4618      	mov	r0, r3
 8016fa2:	3718      	adds	r7, #24
 8016fa4:	46bd      	mov	sp, r7
 8016fa6:	bd80      	pop	{r7, pc}

08016fa8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016fa8:	b580      	push	{r7, lr}
 8016faa:	b086      	sub	sp, #24
 8016fac:	af00      	add	r7, sp, #0
 8016fae:	60f8      	str	r0, [r7, #12]
 8016fb0:	607a      	str	r2, [r7, #4]
 8016fb2:	603b      	str	r3, [r7, #0]
 8016fb4:	460b      	mov	r3, r1
 8016fb6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016fb8:	2300      	movs	r3, #0
 8016fba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016fbc:	2300      	movs	r3, #0
 8016fbe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016fc0:	68fb      	ldr	r3, [r7, #12]
 8016fc2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016fc6:	7af9      	ldrb	r1, [r7, #11]
 8016fc8:	683b      	ldr	r3, [r7, #0]
 8016fca:	687a      	ldr	r2, [r7, #4]
 8016fcc:	f7f2 f873 	bl	80090b6 <HAL_PCD_EP_Receive>
 8016fd0:	4603      	mov	r3, r0
 8016fd2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016fd4:	7dfb      	ldrb	r3, [r7, #23]
 8016fd6:	4618      	mov	r0, r3
 8016fd8:	f000 f832 	bl	8017040 <USBD_Get_USB_Status>
 8016fdc:	4603      	mov	r3, r0
 8016fde:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016fe0:	7dbb      	ldrb	r3, [r7, #22]
}
 8016fe2:	4618      	mov	r0, r3
 8016fe4:	3718      	adds	r7, #24
 8016fe6:	46bd      	mov	sp, r7
 8016fe8:	bd80      	pop	{r7, pc}

08016fea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016fea:	b580      	push	{r7, lr}
 8016fec:	b082      	sub	sp, #8
 8016fee:	af00      	add	r7, sp, #0
 8016ff0:	6078      	str	r0, [r7, #4]
 8016ff2:	460b      	mov	r3, r1
 8016ff4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016ffc:	78fa      	ldrb	r2, [r7, #3]
 8016ffe:	4611      	mov	r1, r2
 8017000:	4618      	mov	r0, r3
 8017002:	f7f2 f894 	bl	800912e <HAL_PCD_EP_GetRxCount>
 8017006:	4603      	mov	r3, r0
}
 8017008:	4618      	mov	r0, r3
 801700a:	3708      	adds	r7, #8
 801700c:	46bd      	mov	sp, r7
 801700e:	bd80      	pop	{r7, pc}

08017010 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8017010:	b480      	push	{r7}
 8017012:	b083      	sub	sp, #12
 8017014:	af00      	add	r7, sp, #0
 8017016:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017018:	4b03      	ldr	r3, [pc, #12]	; (8017028 <USBD_static_malloc+0x18>)
}
 801701a:	4618      	mov	r0, r3
 801701c:	370c      	adds	r7, #12
 801701e:	46bd      	mov	sp, r7
 8017020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017024:	4770      	bx	lr
 8017026:	bf00      	nop
 8017028:	24002fdc 	.word	0x24002fdc

0801702c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801702c:	b480      	push	{r7}
 801702e:	b083      	sub	sp, #12
 8017030:	af00      	add	r7, sp, #0
 8017032:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8017034:	bf00      	nop
 8017036:	370c      	adds	r7, #12
 8017038:	46bd      	mov	sp, r7
 801703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801703e:	4770      	bx	lr

08017040 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017040:	b480      	push	{r7}
 8017042:	b085      	sub	sp, #20
 8017044:	af00      	add	r7, sp, #0
 8017046:	4603      	mov	r3, r0
 8017048:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801704a:	2300      	movs	r3, #0
 801704c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801704e:	79fb      	ldrb	r3, [r7, #7]
 8017050:	2b03      	cmp	r3, #3
 8017052:	d817      	bhi.n	8017084 <USBD_Get_USB_Status+0x44>
 8017054:	a201      	add	r2, pc, #4	; (adr r2, 801705c <USBD_Get_USB_Status+0x1c>)
 8017056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801705a:	bf00      	nop
 801705c:	0801706d 	.word	0x0801706d
 8017060:	08017073 	.word	0x08017073
 8017064:	08017079 	.word	0x08017079
 8017068:	0801707f 	.word	0x0801707f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801706c:	2300      	movs	r3, #0
 801706e:	73fb      	strb	r3, [r7, #15]
    break;
 8017070:	e00b      	b.n	801708a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017072:	2303      	movs	r3, #3
 8017074:	73fb      	strb	r3, [r7, #15]
    break;
 8017076:	e008      	b.n	801708a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017078:	2301      	movs	r3, #1
 801707a:	73fb      	strb	r3, [r7, #15]
    break;
 801707c:	e005      	b.n	801708a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801707e:	2303      	movs	r3, #3
 8017080:	73fb      	strb	r3, [r7, #15]
    break;
 8017082:	e002      	b.n	801708a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017084:	2303      	movs	r3, #3
 8017086:	73fb      	strb	r3, [r7, #15]
    break;
 8017088:	bf00      	nop
  }
  return usb_status;
 801708a:	7bfb      	ldrb	r3, [r7, #15]
}
 801708c:	4618      	mov	r0, r3
 801708e:	3714      	adds	r7, #20
 8017090:	46bd      	mov	sp, r7
 8017092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017096:	4770      	bx	lr

08017098 <siprintf>:
 8017098:	b40e      	push	{r1, r2, r3}
 801709a:	b500      	push	{lr}
 801709c:	b09c      	sub	sp, #112	; 0x70
 801709e:	ab1d      	add	r3, sp, #116	; 0x74
 80170a0:	9002      	str	r0, [sp, #8]
 80170a2:	9006      	str	r0, [sp, #24]
 80170a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80170a8:	4809      	ldr	r0, [pc, #36]	; (80170d0 <siprintf+0x38>)
 80170aa:	9107      	str	r1, [sp, #28]
 80170ac:	9104      	str	r1, [sp, #16]
 80170ae:	4909      	ldr	r1, [pc, #36]	; (80170d4 <siprintf+0x3c>)
 80170b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80170b4:	9105      	str	r1, [sp, #20]
 80170b6:	6800      	ldr	r0, [r0, #0]
 80170b8:	9301      	str	r3, [sp, #4]
 80170ba:	a902      	add	r1, sp, #8
 80170bc:	f000 f9d6 	bl	801746c <_svfiprintf_r>
 80170c0:	9b02      	ldr	r3, [sp, #8]
 80170c2:	2200      	movs	r2, #0
 80170c4:	701a      	strb	r2, [r3, #0]
 80170c6:	b01c      	add	sp, #112	; 0x70
 80170c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80170cc:	b003      	add	sp, #12
 80170ce:	4770      	bx	lr
 80170d0:	2400014c 	.word	0x2400014c
 80170d4:	ffff0208 	.word	0xffff0208

080170d8 <siscanf>:
 80170d8:	b40e      	push	{r1, r2, r3}
 80170da:	b510      	push	{r4, lr}
 80170dc:	b09f      	sub	sp, #124	; 0x7c
 80170de:	ac21      	add	r4, sp, #132	; 0x84
 80170e0:	f44f 7101 	mov.w	r1, #516	; 0x204
 80170e4:	f854 2b04 	ldr.w	r2, [r4], #4
 80170e8:	9201      	str	r2, [sp, #4]
 80170ea:	f8ad 101c 	strh.w	r1, [sp, #28]
 80170ee:	9004      	str	r0, [sp, #16]
 80170f0:	9008      	str	r0, [sp, #32]
 80170f2:	f7e9 f917 	bl	8000324 <strlen>
 80170f6:	4b0c      	ldr	r3, [pc, #48]	; (8017128 <siscanf+0x50>)
 80170f8:	9005      	str	r0, [sp, #20]
 80170fa:	9009      	str	r0, [sp, #36]	; 0x24
 80170fc:	930d      	str	r3, [sp, #52]	; 0x34
 80170fe:	480b      	ldr	r0, [pc, #44]	; (801712c <siscanf+0x54>)
 8017100:	9a01      	ldr	r2, [sp, #4]
 8017102:	6800      	ldr	r0, [r0, #0]
 8017104:	9403      	str	r4, [sp, #12]
 8017106:	2300      	movs	r3, #0
 8017108:	9311      	str	r3, [sp, #68]	; 0x44
 801710a:	9316      	str	r3, [sp, #88]	; 0x58
 801710c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017110:	f8ad 301e 	strh.w	r3, [sp, #30]
 8017114:	a904      	add	r1, sp, #16
 8017116:	4623      	mov	r3, r4
 8017118:	f000 fb00 	bl	801771c <__ssvfiscanf_r>
 801711c:	b01f      	add	sp, #124	; 0x7c
 801711e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017122:	b003      	add	sp, #12
 8017124:	4770      	bx	lr
 8017126:	bf00      	nop
 8017128:	08017131 	.word	0x08017131
 801712c:	2400014c 	.word	0x2400014c

08017130 <__seofread>:
 8017130:	2000      	movs	r0, #0
 8017132:	4770      	bx	lr

08017134 <memset>:
 8017134:	4402      	add	r2, r0
 8017136:	4603      	mov	r3, r0
 8017138:	4293      	cmp	r3, r2
 801713a:	d100      	bne.n	801713e <memset+0xa>
 801713c:	4770      	bx	lr
 801713e:	f803 1b01 	strb.w	r1, [r3], #1
 8017142:	e7f9      	b.n	8017138 <memset+0x4>

08017144 <__errno>:
 8017144:	4b01      	ldr	r3, [pc, #4]	; (801714c <__errno+0x8>)
 8017146:	6818      	ldr	r0, [r3, #0]
 8017148:	4770      	bx	lr
 801714a:	bf00      	nop
 801714c:	2400014c 	.word	0x2400014c

08017150 <__libc_init_array>:
 8017150:	b570      	push	{r4, r5, r6, lr}
 8017152:	4d0d      	ldr	r5, [pc, #52]	; (8017188 <__libc_init_array+0x38>)
 8017154:	4c0d      	ldr	r4, [pc, #52]	; (801718c <__libc_init_array+0x3c>)
 8017156:	1b64      	subs	r4, r4, r5
 8017158:	10a4      	asrs	r4, r4, #2
 801715a:	2600      	movs	r6, #0
 801715c:	42a6      	cmp	r6, r4
 801715e:	d109      	bne.n	8017174 <__libc_init_array+0x24>
 8017160:	4d0b      	ldr	r5, [pc, #44]	; (8017190 <__libc_init_array+0x40>)
 8017162:	4c0c      	ldr	r4, [pc, #48]	; (8017194 <__libc_init_array+0x44>)
 8017164:	f001 f8fe 	bl	8018364 <_init>
 8017168:	1b64      	subs	r4, r4, r5
 801716a:	10a4      	asrs	r4, r4, #2
 801716c:	2600      	movs	r6, #0
 801716e:	42a6      	cmp	r6, r4
 8017170:	d105      	bne.n	801717e <__libc_init_array+0x2e>
 8017172:	bd70      	pop	{r4, r5, r6, pc}
 8017174:	f855 3b04 	ldr.w	r3, [r5], #4
 8017178:	4798      	blx	r3
 801717a:	3601      	adds	r6, #1
 801717c:	e7ee      	b.n	801715c <__libc_init_array+0xc>
 801717e:	f855 3b04 	ldr.w	r3, [r5], #4
 8017182:	4798      	blx	r3
 8017184:	3601      	adds	r6, #1
 8017186:	e7f2      	b.n	801716e <__libc_init_array+0x1e>
 8017188:	0801874c 	.word	0x0801874c
 801718c:	0801874c 	.word	0x0801874c
 8017190:	0801874c 	.word	0x0801874c
 8017194:	08018750 	.word	0x08018750

08017198 <__retarget_lock_acquire_recursive>:
 8017198:	4770      	bx	lr

0801719a <__retarget_lock_release_recursive>:
 801719a:	4770      	bx	lr

0801719c <strcpy>:
 801719c:	4603      	mov	r3, r0
 801719e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80171a2:	f803 2b01 	strb.w	r2, [r3], #1
 80171a6:	2a00      	cmp	r2, #0
 80171a8:	d1f9      	bne.n	801719e <strcpy+0x2>
 80171aa:	4770      	bx	lr

080171ac <memcpy>:
 80171ac:	440a      	add	r2, r1
 80171ae:	4291      	cmp	r1, r2
 80171b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80171b4:	d100      	bne.n	80171b8 <memcpy+0xc>
 80171b6:	4770      	bx	lr
 80171b8:	b510      	push	{r4, lr}
 80171ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80171be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80171c2:	4291      	cmp	r1, r2
 80171c4:	d1f9      	bne.n	80171ba <memcpy+0xe>
 80171c6:	bd10      	pop	{r4, pc}

080171c8 <_free_r>:
 80171c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80171ca:	2900      	cmp	r1, #0
 80171cc:	d044      	beq.n	8017258 <_free_r+0x90>
 80171ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80171d2:	9001      	str	r0, [sp, #4]
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	f1a1 0404 	sub.w	r4, r1, #4
 80171da:	bfb8      	it	lt
 80171dc:	18e4      	addlt	r4, r4, r3
 80171de:	f000 f8df 	bl	80173a0 <__malloc_lock>
 80171e2:	4a1e      	ldr	r2, [pc, #120]	; (801725c <_free_r+0x94>)
 80171e4:	9801      	ldr	r0, [sp, #4]
 80171e6:	6813      	ldr	r3, [r2, #0]
 80171e8:	b933      	cbnz	r3, 80171f8 <_free_r+0x30>
 80171ea:	6063      	str	r3, [r4, #4]
 80171ec:	6014      	str	r4, [r2, #0]
 80171ee:	b003      	add	sp, #12
 80171f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80171f4:	f000 b8da 	b.w	80173ac <__malloc_unlock>
 80171f8:	42a3      	cmp	r3, r4
 80171fa:	d908      	bls.n	801720e <_free_r+0x46>
 80171fc:	6825      	ldr	r5, [r4, #0]
 80171fe:	1961      	adds	r1, r4, r5
 8017200:	428b      	cmp	r3, r1
 8017202:	bf01      	itttt	eq
 8017204:	6819      	ldreq	r1, [r3, #0]
 8017206:	685b      	ldreq	r3, [r3, #4]
 8017208:	1949      	addeq	r1, r1, r5
 801720a:	6021      	streq	r1, [r4, #0]
 801720c:	e7ed      	b.n	80171ea <_free_r+0x22>
 801720e:	461a      	mov	r2, r3
 8017210:	685b      	ldr	r3, [r3, #4]
 8017212:	b10b      	cbz	r3, 8017218 <_free_r+0x50>
 8017214:	42a3      	cmp	r3, r4
 8017216:	d9fa      	bls.n	801720e <_free_r+0x46>
 8017218:	6811      	ldr	r1, [r2, #0]
 801721a:	1855      	adds	r5, r2, r1
 801721c:	42a5      	cmp	r5, r4
 801721e:	d10b      	bne.n	8017238 <_free_r+0x70>
 8017220:	6824      	ldr	r4, [r4, #0]
 8017222:	4421      	add	r1, r4
 8017224:	1854      	adds	r4, r2, r1
 8017226:	42a3      	cmp	r3, r4
 8017228:	6011      	str	r1, [r2, #0]
 801722a:	d1e0      	bne.n	80171ee <_free_r+0x26>
 801722c:	681c      	ldr	r4, [r3, #0]
 801722e:	685b      	ldr	r3, [r3, #4]
 8017230:	6053      	str	r3, [r2, #4]
 8017232:	440c      	add	r4, r1
 8017234:	6014      	str	r4, [r2, #0]
 8017236:	e7da      	b.n	80171ee <_free_r+0x26>
 8017238:	d902      	bls.n	8017240 <_free_r+0x78>
 801723a:	230c      	movs	r3, #12
 801723c:	6003      	str	r3, [r0, #0]
 801723e:	e7d6      	b.n	80171ee <_free_r+0x26>
 8017240:	6825      	ldr	r5, [r4, #0]
 8017242:	1961      	adds	r1, r4, r5
 8017244:	428b      	cmp	r3, r1
 8017246:	bf04      	itt	eq
 8017248:	6819      	ldreq	r1, [r3, #0]
 801724a:	685b      	ldreq	r3, [r3, #4]
 801724c:	6063      	str	r3, [r4, #4]
 801724e:	bf04      	itt	eq
 8017250:	1949      	addeq	r1, r1, r5
 8017252:	6021      	streq	r1, [r4, #0]
 8017254:	6054      	str	r4, [r2, #4]
 8017256:	e7ca      	b.n	80171ee <_free_r+0x26>
 8017258:	b003      	add	sp, #12
 801725a:	bd30      	pop	{r4, r5, pc}
 801725c:	2400333c 	.word	0x2400333c

08017260 <sbrk_aligned>:
 8017260:	b570      	push	{r4, r5, r6, lr}
 8017262:	4e0e      	ldr	r6, [pc, #56]	; (801729c <sbrk_aligned+0x3c>)
 8017264:	460c      	mov	r4, r1
 8017266:	6831      	ldr	r1, [r6, #0]
 8017268:	4605      	mov	r5, r0
 801726a:	b911      	cbnz	r1, 8017272 <sbrk_aligned+0x12>
 801726c:	f000 ff3a 	bl	80180e4 <_sbrk_r>
 8017270:	6030      	str	r0, [r6, #0]
 8017272:	4621      	mov	r1, r4
 8017274:	4628      	mov	r0, r5
 8017276:	f000 ff35 	bl	80180e4 <_sbrk_r>
 801727a:	1c43      	adds	r3, r0, #1
 801727c:	d00a      	beq.n	8017294 <sbrk_aligned+0x34>
 801727e:	1cc4      	adds	r4, r0, #3
 8017280:	f024 0403 	bic.w	r4, r4, #3
 8017284:	42a0      	cmp	r0, r4
 8017286:	d007      	beq.n	8017298 <sbrk_aligned+0x38>
 8017288:	1a21      	subs	r1, r4, r0
 801728a:	4628      	mov	r0, r5
 801728c:	f000 ff2a 	bl	80180e4 <_sbrk_r>
 8017290:	3001      	adds	r0, #1
 8017292:	d101      	bne.n	8017298 <sbrk_aligned+0x38>
 8017294:	f04f 34ff 	mov.w	r4, #4294967295
 8017298:	4620      	mov	r0, r4
 801729a:	bd70      	pop	{r4, r5, r6, pc}
 801729c:	24003340 	.word	0x24003340

080172a0 <_malloc_r>:
 80172a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80172a4:	1ccd      	adds	r5, r1, #3
 80172a6:	f025 0503 	bic.w	r5, r5, #3
 80172aa:	3508      	adds	r5, #8
 80172ac:	2d0c      	cmp	r5, #12
 80172ae:	bf38      	it	cc
 80172b0:	250c      	movcc	r5, #12
 80172b2:	2d00      	cmp	r5, #0
 80172b4:	4607      	mov	r7, r0
 80172b6:	db01      	blt.n	80172bc <_malloc_r+0x1c>
 80172b8:	42a9      	cmp	r1, r5
 80172ba:	d905      	bls.n	80172c8 <_malloc_r+0x28>
 80172bc:	230c      	movs	r3, #12
 80172be:	603b      	str	r3, [r7, #0]
 80172c0:	2600      	movs	r6, #0
 80172c2:	4630      	mov	r0, r6
 80172c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80172c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801739c <_malloc_r+0xfc>
 80172cc:	f000 f868 	bl	80173a0 <__malloc_lock>
 80172d0:	f8d8 3000 	ldr.w	r3, [r8]
 80172d4:	461c      	mov	r4, r3
 80172d6:	bb5c      	cbnz	r4, 8017330 <_malloc_r+0x90>
 80172d8:	4629      	mov	r1, r5
 80172da:	4638      	mov	r0, r7
 80172dc:	f7ff ffc0 	bl	8017260 <sbrk_aligned>
 80172e0:	1c43      	adds	r3, r0, #1
 80172e2:	4604      	mov	r4, r0
 80172e4:	d155      	bne.n	8017392 <_malloc_r+0xf2>
 80172e6:	f8d8 4000 	ldr.w	r4, [r8]
 80172ea:	4626      	mov	r6, r4
 80172ec:	2e00      	cmp	r6, #0
 80172ee:	d145      	bne.n	801737c <_malloc_r+0xdc>
 80172f0:	2c00      	cmp	r4, #0
 80172f2:	d048      	beq.n	8017386 <_malloc_r+0xe6>
 80172f4:	6823      	ldr	r3, [r4, #0]
 80172f6:	4631      	mov	r1, r6
 80172f8:	4638      	mov	r0, r7
 80172fa:	eb04 0903 	add.w	r9, r4, r3
 80172fe:	f000 fef1 	bl	80180e4 <_sbrk_r>
 8017302:	4581      	cmp	r9, r0
 8017304:	d13f      	bne.n	8017386 <_malloc_r+0xe6>
 8017306:	6821      	ldr	r1, [r4, #0]
 8017308:	1a6d      	subs	r5, r5, r1
 801730a:	4629      	mov	r1, r5
 801730c:	4638      	mov	r0, r7
 801730e:	f7ff ffa7 	bl	8017260 <sbrk_aligned>
 8017312:	3001      	adds	r0, #1
 8017314:	d037      	beq.n	8017386 <_malloc_r+0xe6>
 8017316:	6823      	ldr	r3, [r4, #0]
 8017318:	442b      	add	r3, r5
 801731a:	6023      	str	r3, [r4, #0]
 801731c:	f8d8 3000 	ldr.w	r3, [r8]
 8017320:	2b00      	cmp	r3, #0
 8017322:	d038      	beq.n	8017396 <_malloc_r+0xf6>
 8017324:	685a      	ldr	r2, [r3, #4]
 8017326:	42a2      	cmp	r2, r4
 8017328:	d12b      	bne.n	8017382 <_malloc_r+0xe2>
 801732a:	2200      	movs	r2, #0
 801732c:	605a      	str	r2, [r3, #4]
 801732e:	e00f      	b.n	8017350 <_malloc_r+0xb0>
 8017330:	6822      	ldr	r2, [r4, #0]
 8017332:	1b52      	subs	r2, r2, r5
 8017334:	d41f      	bmi.n	8017376 <_malloc_r+0xd6>
 8017336:	2a0b      	cmp	r2, #11
 8017338:	d917      	bls.n	801736a <_malloc_r+0xca>
 801733a:	1961      	adds	r1, r4, r5
 801733c:	42a3      	cmp	r3, r4
 801733e:	6025      	str	r5, [r4, #0]
 8017340:	bf18      	it	ne
 8017342:	6059      	strne	r1, [r3, #4]
 8017344:	6863      	ldr	r3, [r4, #4]
 8017346:	bf08      	it	eq
 8017348:	f8c8 1000 	streq.w	r1, [r8]
 801734c:	5162      	str	r2, [r4, r5]
 801734e:	604b      	str	r3, [r1, #4]
 8017350:	4638      	mov	r0, r7
 8017352:	f104 060b 	add.w	r6, r4, #11
 8017356:	f000 f829 	bl	80173ac <__malloc_unlock>
 801735a:	f026 0607 	bic.w	r6, r6, #7
 801735e:	1d23      	adds	r3, r4, #4
 8017360:	1af2      	subs	r2, r6, r3
 8017362:	d0ae      	beq.n	80172c2 <_malloc_r+0x22>
 8017364:	1b9b      	subs	r3, r3, r6
 8017366:	50a3      	str	r3, [r4, r2]
 8017368:	e7ab      	b.n	80172c2 <_malloc_r+0x22>
 801736a:	42a3      	cmp	r3, r4
 801736c:	6862      	ldr	r2, [r4, #4]
 801736e:	d1dd      	bne.n	801732c <_malloc_r+0x8c>
 8017370:	f8c8 2000 	str.w	r2, [r8]
 8017374:	e7ec      	b.n	8017350 <_malloc_r+0xb0>
 8017376:	4623      	mov	r3, r4
 8017378:	6864      	ldr	r4, [r4, #4]
 801737a:	e7ac      	b.n	80172d6 <_malloc_r+0x36>
 801737c:	4634      	mov	r4, r6
 801737e:	6876      	ldr	r6, [r6, #4]
 8017380:	e7b4      	b.n	80172ec <_malloc_r+0x4c>
 8017382:	4613      	mov	r3, r2
 8017384:	e7cc      	b.n	8017320 <_malloc_r+0x80>
 8017386:	230c      	movs	r3, #12
 8017388:	603b      	str	r3, [r7, #0]
 801738a:	4638      	mov	r0, r7
 801738c:	f000 f80e 	bl	80173ac <__malloc_unlock>
 8017390:	e797      	b.n	80172c2 <_malloc_r+0x22>
 8017392:	6025      	str	r5, [r4, #0]
 8017394:	e7dc      	b.n	8017350 <_malloc_r+0xb0>
 8017396:	605b      	str	r3, [r3, #4]
 8017398:	deff      	udf	#255	; 0xff
 801739a:	bf00      	nop
 801739c:	2400333c 	.word	0x2400333c

080173a0 <__malloc_lock>:
 80173a0:	4801      	ldr	r0, [pc, #4]	; (80173a8 <__malloc_lock+0x8>)
 80173a2:	f7ff bef9 	b.w	8017198 <__retarget_lock_acquire_recursive>
 80173a6:	bf00      	nop
 80173a8:	24003338 	.word	0x24003338

080173ac <__malloc_unlock>:
 80173ac:	4801      	ldr	r0, [pc, #4]	; (80173b4 <__malloc_unlock+0x8>)
 80173ae:	f7ff bef4 	b.w	801719a <__retarget_lock_release_recursive>
 80173b2:	bf00      	nop
 80173b4:	24003338 	.word	0x24003338

080173b8 <__ssputs_r>:
 80173b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80173bc:	688e      	ldr	r6, [r1, #8]
 80173be:	461f      	mov	r7, r3
 80173c0:	42be      	cmp	r6, r7
 80173c2:	680b      	ldr	r3, [r1, #0]
 80173c4:	4682      	mov	sl, r0
 80173c6:	460c      	mov	r4, r1
 80173c8:	4690      	mov	r8, r2
 80173ca:	d82c      	bhi.n	8017426 <__ssputs_r+0x6e>
 80173cc:	898a      	ldrh	r2, [r1, #12]
 80173ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80173d2:	d026      	beq.n	8017422 <__ssputs_r+0x6a>
 80173d4:	6965      	ldr	r5, [r4, #20]
 80173d6:	6909      	ldr	r1, [r1, #16]
 80173d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80173dc:	eba3 0901 	sub.w	r9, r3, r1
 80173e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80173e4:	1c7b      	adds	r3, r7, #1
 80173e6:	444b      	add	r3, r9
 80173e8:	106d      	asrs	r5, r5, #1
 80173ea:	429d      	cmp	r5, r3
 80173ec:	bf38      	it	cc
 80173ee:	461d      	movcc	r5, r3
 80173f0:	0553      	lsls	r3, r2, #21
 80173f2:	d527      	bpl.n	8017444 <__ssputs_r+0x8c>
 80173f4:	4629      	mov	r1, r5
 80173f6:	f7ff ff53 	bl	80172a0 <_malloc_r>
 80173fa:	4606      	mov	r6, r0
 80173fc:	b360      	cbz	r0, 8017458 <__ssputs_r+0xa0>
 80173fe:	6921      	ldr	r1, [r4, #16]
 8017400:	464a      	mov	r2, r9
 8017402:	f7ff fed3 	bl	80171ac <memcpy>
 8017406:	89a3      	ldrh	r3, [r4, #12]
 8017408:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801740c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017410:	81a3      	strh	r3, [r4, #12]
 8017412:	6126      	str	r6, [r4, #16]
 8017414:	6165      	str	r5, [r4, #20]
 8017416:	444e      	add	r6, r9
 8017418:	eba5 0509 	sub.w	r5, r5, r9
 801741c:	6026      	str	r6, [r4, #0]
 801741e:	60a5      	str	r5, [r4, #8]
 8017420:	463e      	mov	r6, r7
 8017422:	42be      	cmp	r6, r7
 8017424:	d900      	bls.n	8017428 <__ssputs_r+0x70>
 8017426:	463e      	mov	r6, r7
 8017428:	6820      	ldr	r0, [r4, #0]
 801742a:	4632      	mov	r2, r6
 801742c:	4641      	mov	r1, r8
 801742e:	f000 fe3e 	bl	80180ae <memmove>
 8017432:	68a3      	ldr	r3, [r4, #8]
 8017434:	1b9b      	subs	r3, r3, r6
 8017436:	60a3      	str	r3, [r4, #8]
 8017438:	6823      	ldr	r3, [r4, #0]
 801743a:	4433      	add	r3, r6
 801743c:	6023      	str	r3, [r4, #0]
 801743e:	2000      	movs	r0, #0
 8017440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017444:	462a      	mov	r2, r5
 8017446:	f000 fe5d 	bl	8018104 <_realloc_r>
 801744a:	4606      	mov	r6, r0
 801744c:	2800      	cmp	r0, #0
 801744e:	d1e0      	bne.n	8017412 <__ssputs_r+0x5a>
 8017450:	6921      	ldr	r1, [r4, #16]
 8017452:	4650      	mov	r0, sl
 8017454:	f7ff feb8 	bl	80171c8 <_free_r>
 8017458:	230c      	movs	r3, #12
 801745a:	f8ca 3000 	str.w	r3, [sl]
 801745e:	89a3      	ldrh	r3, [r4, #12]
 8017460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017464:	81a3      	strh	r3, [r4, #12]
 8017466:	f04f 30ff 	mov.w	r0, #4294967295
 801746a:	e7e9      	b.n	8017440 <__ssputs_r+0x88>

0801746c <_svfiprintf_r>:
 801746c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017470:	4698      	mov	r8, r3
 8017472:	898b      	ldrh	r3, [r1, #12]
 8017474:	061b      	lsls	r3, r3, #24
 8017476:	b09d      	sub	sp, #116	; 0x74
 8017478:	4607      	mov	r7, r0
 801747a:	460d      	mov	r5, r1
 801747c:	4614      	mov	r4, r2
 801747e:	d50e      	bpl.n	801749e <_svfiprintf_r+0x32>
 8017480:	690b      	ldr	r3, [r1, #16]
 8017482:	b963      	cbnz	r3, 801749e <_svfiprintf_r+0x32>
 8017484:	2140      	movs	r1, #64	; 0x40
 8017486:	f7ff ff0b 	bl	80172a0 <_malloc_r>
 801748a:	6028      	str	r0, [r5, #0]
 801748c:	6128      	str	r0, [r5, #16]
 801748e:	b920      	cbnz	r0, 801749a <_svfiprintf_r+0x2e>
 8017490:	230c      	movs	r3, #12
 8017492:	603b      	str	r3, [r7, #0]
 8017494:	f04f 30ff 	mov.w	r0, #4294967295
 8017498:	e0d0      	b.n	801763c <_svfiprintf_r+0x1d0>
 801749a:	2340      	movs	r3, #64	; 0x40
 801749c:	616b      	str	r3, [r5, #20]
 801749e:	2300      	movs	r3, #0
 80174a0:	9309      	str	r3, [sp, #36]	; 0x24
 80174a2:	2320      	movs	r3, #32
 80174a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80174a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80174ac:	2330      	movs	r3, #48	; 0x30
 80174ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8017654 <_svfiprintf_r+0x1e8>
 80174b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80174b6:	f04f 0901 	mov.w	r9, #1
 80174ba:	4623      	mov	r3, r4
 80174bc:	469a      	mov	sl, r3
 80174be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80174c2:	b10a      	cbz	r2, 80174c8 <_svfiprintf_r+0x5c>
 80174c4:	2a25      	cmp	r2, #37	; 0x25
 80174c6:	d1f9      	bne.n	80174bc <_svfiprintf_r+0x50>
 80174c8:	ebba 0b04 	subs.w	fp, sl, r4
 80174cc:	d00b      	beq.n	80174e6 <_svfiprintf_r+0x7a>
 80174ce:	465b      	mov	r3, fp
 80174d0:	4622      	mov	r2, r4
 80174d2:	4629      	mov	r1, r5
 80174d4:	4638      	mov	r0, r7
 80174d6:	f7ff ff6f 	bl	80173b8 <__ssputs_r>
 80174da:	3001      	adds	r0, #1
 80174dc:	f000 80a9 	beq.w	8017632 <_svfiprintf_r+0x1c6>
 80174e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80174e2:	445a      	add	r2, fp
 80174e4:	9209      	str	r2, [sp, #36]	; 0x24
 80174e6:	f89a 3000 	ldrb.w	r3, [sl]
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	f000 80a1 	beq.w	8017632 <_svfiprintf_r+0x1c6>
 80174f0:	2300      	movs	r3, #0
 80174f2:	f04f 32ff 	mov.w	r2, #4294967295
 80174f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80174fa:	f10a 0a01 	add.w	sl, sl, #1
 80174fe:	9304      	str	r3, [sp, #16]
 8017500:	9307      	str	r3, [sp, #28]
 8017502:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017506:	931a      	str	r3, [sp, #104]	; 0x68
 8017508:	4654      	mov	r4, sl
 801750a:	2205      	movs	r2, #5
 801750c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017510:	4850      	ldr	r0, [pc, #320]	; (8017654 <_svfiprintf_r+0x1e8>)
 8017512:	f7e8 ff15 	bl	8000340 <memchr>
 8017516:	9a04      	ldr	r2, [sp, #16]
 8017518:	b9d8      	cbnz	r0, 8017552 <_svfiprintf_r+0xe6>
 801751a:	06d0      	lsls	r0, r2, #27
 801751c:	bf44      	itt	mi
 801751e:	2320      	movmi	r3, #32
 8017520:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017524:	0711      	lsls	r1, r2, #28
 8017526:	bf44      	itt	mi
 8017528:	232b      	movmi	r3, #43	; 0x2b
 801752a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801752e:	f89a 3000 	ldrb.w	r3, [sl]
 8017532:	2b2a      	cmp	r3, #42	; 0x2a
 8017534:	d015      	beq.n	8017562 <_svfiprintf_r+0xf6>
 8017536:	9a07      	ldr	r2, [sp, #28]
 8017538:	4654      	mov	r4, sl
 801753a:	2000      	movs	r0, #0
 801753c:	f04f 0c0a 	mov.w	ip, #10
 8017540:	4621      	mov	r1, r4
 8017542:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017546:	3b30      	subs	r3, #48	; 0x30
 8017548:	2b09      	cmp	r3, #9
 801754a:	d94d      	bls.n	80175e8 <_svfiprintf_r+0x17c>
 801754c:	b1b0      	cbz	r0, 801757c <_svfiprintf_r+0x110>
 801754e:	9207      	str	r2, [sp, #28]
 8017550:	e014      	b.n	801757c <_svfiprintf_r+0x110>
 8017552:	eba0 0308 	sub.w	r3, r0, r8
 8017556:	fa09 f303 	lsl.w	r3, r9, r3
 801755a:	4313      	orrs	r3, r2
 801755c:	9304      	str	r3, [sp, #16]
 801755e:	46a2      	mov	sl, r4
 8017560:	e7d2      	b.n	8017508 <_svfiprintf_r+0x9c>
 8017562:	9b03      	ldr	r3, [sp, #12]
 8017564:	1d19      	adds	r1, r3, #4
 8017566:	681b      	ldr	r3, [r3, #0]
 8017568:	9103      	str	r1, [sp, #12]
 801756a:	2b00      	cmp	r3, #0
 801756c:	bfbb      	ittet	lt
 801756e:	425b      	neglt	r3, r3
 8017570:	f042 0202 	orrlt.w	r2, r2, #2
 8017574:	9307      	strge	r3, [sp, #28]
 8017576:	9307      	strlt	r3, [sp, #28]
 8017578:	bfb8      	it	lt
 801757a:	9204      	strlt	r2, [sp, #16]
 801757c:	7823      	ldrb	r3, [r4, #0]
 801757e:	2b2e      	cmp	r3, #46	; 0x2e
 8017580:	d10c      	bne.n	801759c <_svfiprintf_r+0x130>
 8017582:	7863      	ldrb	r3, [r4, #1]
 8017584:	2b2a      	cmp	r3, #42	; 0x2a
 8017586:	d134      	bne.n	80175f2 <_svfiprintf_r+0x186>
 8017588:	9b03      	ldr	r3, [sp, #12]
 801758a:	1d1a      	adds	r2, r3, #4
 801758c:	681b      	ldr	r3, [r3, #0]
 801758e:	9203      	str	r2, [sp, #12]
 8017590:	2b00      	cmp	r3, #0
 8017592:	bfb8      	it	lt
 8017594:	f04f 33ff 	movlt.w	r3, #4294967295
 8017598:	3402      	adds	r4, #2
 801759a:	9305      	str	r3, [sp, #20]
 801759c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8017664 <_svfiprintf_r+0x1f8>
 80175a0:	7821      	ldrb	r1, [r4, #0]
 80175a2:	2203      	movs	r2, #3
 80175a4:	4650      	mov	r0, sl
 80175a6:	f7e8 fecb 	bl	8000340 <memchr>
 80175aa:	b138      	cbz	r0, 80175bc <_svfiprintf_r+0x150>
 80175ac:	9b04      	ldr	r3, [sp, #16]
 80175ae:	eba0 000a 	sub.w	r0, r0, sl
 80175b2:	2240      	movs	r2, #64	; 0x40
 80175b4:	4082      	lsls	r2, r0
 80175b6:	4313      	orrs	r3, r2
 80175b8:	3401      	adds	r4, #1
 80175ba:	9304      	str	r3, [sp, #16]
 80175bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80175c0:	4825      	ldr	r0, [pc, #148]	; (8017658 <_svfiprintf_r+0x1ec>)
 80175c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80175c6:	2206      	movs	r2, #6
 80175c8:	f7e8 feba 	bl	8000340 <memchr>
 80175cc:	2800      	cmp	r0, #0
 80175ce:	d038      	beq.n	8017642 <_svfiprintf_r+0x1d6>
 80175d0:	4b22      	ldr	r3, [pc, #136]	; (801765c <_svfiprintf_r+0x1f0>)
 80175d2:	bb1b      	cbnz	r3, 801761c <_svfiprintf_r+0x1b0>
 80175d4:	9b03      	ldr	r3, [sp, #12]
 80175d6:	3307      	adds	r3, #7
 80175d8:	f023 0307 	bic.w	r3, r3, #7
 80175dc:	3308      	adds	r3, #8
 80175de:	9303      	str	r3, [sp, #12]
 80175e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175e2:	4433      	add	r3, r6
 80175e4:	9309      	str	r3, [sp, #36]	; 0x24
 80175e6:	e768      	b.n	80174ba <_svfiprintf_r+0x4e>
 80175e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80175ec:	460c      	mov	r4, r1
 80175ee:	2001      	movs	r0, #1
 80175f0:	e7a6      	b.n	8017540 <_svfiprintf_r+0xd4>
 80175f2:	2300      	movs	r3, #0
 80175f4:	3401      	adds	r4, #1
 80175f6:	9305      	str	r3, [sp, #20]
 80175f8:	4619      	mov	r1, r3
 80175fa:	f04f 0c0a 	mov.w	ip, #10
 80175fe:	4620      	mov	r0, r4
 8017600:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017604:	3a30      	subs	r2, #48	; 0x30
 8017606:	2a09      	cmp	r2, #9
 8017608:	d903      	bls.n	8017612 <_svfiprintf_r+0x1a6>
 801760a:	2b00      	cmp	r3, #0
 801760c:	d0c6      	beq.n	801759c <_svfiprintf_r+0x130>
 801760e:	9105      	str	r1, [sp, #20]
 8017610:	e7c4      	b.n	801759c <_svfiprintf_r+0x130>
 8017612:	fb0c 2101 	mla	r1, ip, r1, r2
 8017616:	4604      	mov	r4, r0
 8017618:	2301      	movs	r3, #1
 801761a:	e7f0      	b.n	80175fe <_svfiprintf_r+0x192>
 801761c:	ab03      	add	r3, sp, #12
 801761e:	9300      	str	r3, [sp, #0]
 8017620:	462a      	mov	r2, r5
 8017622:	4b0f      	ldr	r3, [pc, #60]	; (8017660 <_svfiprintf_r+0x1f4>)
 8017624:	a904      	add	r1, sp, #16
 8017626:	4638      	mov	r0, r7
 8017628:	f3af 8000 	nop.w
 801762c:	1c42      	adds	r2, r0, #1
 801762e:	4606      	mov	r6, r0
 8017630:	d1d6      	bne.n	80175e0 <_svfiprintf_r+0x174>
 8017632:	89ab      	ldrh	r3, [r5, #12]
 8017634:	065b      	lsls	r3, r3, #25
 8017636:	f53f af2d 	bmi.w	8017494 <_svfiprintf_r+0x28>
 801763a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801763c:	b01d      	add	sp, #116	; 0x74
 801763e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017642:	ab03      	add	r3, sp, #12
 8017644:	9300      	str	r3, [sp, #0]
 8017646:	462a      	mov	r2, r5
 8017648:	4b05      	ldr	r3, [pc, #20]	; (8017660 <_svfiprintf_r+0x1f4>)
 801764a:	a904      	add	r1, sp, #16
 801764c:	4638      	mov	r0, r7
 801764e:	f000 fa4b 	bl	8017ae8 <_printf_i>
 8017652:	e7eb      	b.n	801762c <_svfiprintf_r+0x1c0>
 8017654:	080185f4 	.word	0x080185f4
 8017658:	080185fe 	.word	0x080185fe
 801765c:	00000000 	.word	0x00000000
 8017660:	080173b9 	.word	0x080173b9
 8017664:	080185fa 	.word	0x080185fa

08017668 <_sungetc_r>:
 8017668:	b538      	push	{r3, r4, r5, lr}
 801766a:	1c4b      	adds	r3, r1, #1
 801766c:	4614      	mov	r4, r2
 801766e:	d103      	bne.n	8017678 <_sungetc_r+0x10>
 8017670:	f04f 35ff 	mov.w	r5, #4294967295
 8017674:	4628      	mov	r0, r5
 8017676:	bd38      	pop	{r3, r4, r5, pc}
 8017678:	8993      	ldrh	r3, [r2, #12]
 801767a:	f023 0320 	bic.w	r3, r3, #32
 801767e:	8193      	strh	r3, [r2, #12]
 8017680:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017682:	6852      	ldr	r2, [r2, #4]
 8017684:	b2cd      	uxtb	r5, r1
 8017686:	b18b      	cbz	r3, 80176ac <_sungetc_r+0x44>
 8017688:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801768a:	4293      	cmp	r3, r2
 801768c:	dd08      	ble.n	80176a0 <_sungetc_r+0x38>
 801768e:	6823      	ldr	r3, [r4, #0]
 8017690:	1e5a      	subs	r2, r3, #1
 8017692:	6022      	str	r2, [r4, #0]
 8017694:	f803 5c01 	strb.w	r5, [r3, #-1]
 8017698:	6863      	ldr	r3, [r4, #4]
 801769a:	3301      	adds	r3, #1
 801769c:	6063      	str	r3, [r4, #4]
 801769e:	e7e9      	b.n	8017674 <_sungetc_r+0xc>
 80176a0:	4621      	mov	r1, r4
 80176a2:	f000 fcca 	bl	801803a <__submore>
 80176a6:	2800      	cmp	r0, #0
 80176a8:	d0f1      	beq.n	801768e <_sungetc_r+0x26>
 80176aa:	e7e1      	b.n	8017670 <_sungetc_r+0x8>
 80176ac:	6921      	ldr	r1, [r4, #16]
 80176ae:	6823      	ldr	r3, [r4, #0]
 80176b0:	b151      	cbz	r1, 80176c8 <_sungetc_r+0x60>
 80176b2:	4299      	cmp	r1, r3
 80176b4:	d208      	bcs.n	80176c8 <_sungetc_r+0x60>
 80176b6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80176ba:	42a9      	cmp	r1, r5
 80176bc:	d104      	bne.n	80176c8 <_sungetc_r+0x60>
 80176be:	3b01      	subs	r3, #1
 80176c0:	3201      	adds	r2, #1
 80176c2:	6023      	str	r3, [r4, #0]
 80176c4:	6062      	str	r2, [r4, #4]
 80176c6:	e7d5      	b.n	8017674 <_sungetc_r+0xc>
 80176c8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80176cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80176d0:	6363      	str	r3, [r4, #52]	; 0x34
 80176d2:	2303      	movs	r3, #3
 80176d4:	63a3      	str	r3, [r4, #56]	; 0x38
 80176d6:	4623      	mov	r3, r4
 80176d8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80176dc:	6023      	str	r3, [r4, #0]
 80176de:	2301      	movs	r3, #1
 80176e0:	e7dc      	b.n	801769c <_sungetc_r+0x34>

080176e2 <__ssrefill_r>:
 80176e2:	b510      	push	{r4, lr}
 80176e4:	460c      	mov	r4, r1
 80176e6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80176e8:	b169      	cbz	r1, 8017706 <__ssrefill_r+0x24>
 80176ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80176ee:	4299      	cmp	r1, r3
 80176f0:	d001      	beq.n	80176f6 <__ssrefill_r+0x14>
 80176f2:	f7ff fd69 	bl	80171c8 <_free_r>
 80176f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80176f8:	6063      	str	r3, [r4, #4]
 80176fa:	2000      	movs	r0, #0
 80176fc:	6360      	str	r0, [r4, #52]	; 0x34
 80176fe:	b113      	cbz	r3, 8017706 <__ssrefill_r+0x24>
 8017700:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017702:	6023      	str	r3, [r4, #0]
 8017704:	bd10      	pop	{r4, pc}
 8017706:	6923      	ldr	r3, [r4, #16]
 8017708:	6023      	str	r3, [r4, #0]
 801770a:	2300      	movs	r3, #0
 801770c:	6063      	str	r3, [r4, #4]
 801770e:	89a3      	ldrh	r3, [r4, #12]
 8017710:	f043 0320 	orr.w	r3, r3, #32
 8017714:	81a3      	strh	r3, [r4, #12]
 8017716:	f04f 30ff 	mov.w	r0, #4294967295
 801771a:	e7f3      	b.n	8017704 <__ssrefill_r+0x22>

0801771c <__ssvfiscanf_r>:
 801771c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017720:	460c      	mov	r4, r1
 8017722:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8017726:	2100      	movs	r1, #0
 8017728:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801772c:	49a6      	ldr	r1, [pc, #664]	; (80179c8 <__ssvfiscanf_r+0x2ac>)
 801772e:	91a0      	str	r1, [sp, #640]	; 0x280
 8017730:	f10d 0804 	add.w	r8, sp, #4
 8017734:	49a5      	ldr	r1, [pc, #660]	; (80179cc <__ssvfiscanf_r+0x2b0>)
 8017736:	4fa6      	ldr	r7, [pc, #664]	; (80179d0 <__ssvfiscanf_r+0x2b4>)
 8017738:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80179d4 <__ssvfiscanf_r+0x2b8>
 801773c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8017740:	4606      	mov	r6, r0
 8017742:	91a1      	str	r1, [sp, #644]	; 0x284
 8017744:	9300      	str	r3, [sp, #0]
 8017746:	7813      	ldrb	r3, [r2, #0]
 8017748:	2b00      	cmp	r3, #0
 801774a:	f000 815a 	beq.w	8017a02 <__ssvfiscanf_r+0x2e6>
 801774e:	5cf9      	ldrb	r1, [r7, r3]
 8017750:	f011 0108 	ands.w	r1, r1, #8
 8017754:	f102 0501 	add.w	r5, r2, #1
 8017758:	d019      	beq.n	801778e <__ssvfiscanf_r+0x72>
 801775a:	6863      	ldr	r3, [r4, #4]
 801775c:	2b00      	cmp	r3, #0
 801775e:	dd0f      	ble.n	8017780 <__ssvfiscanf_r+0x64>
 8017760:	6823      	ldr	r3, [r4, #0]
 8017762:	781a      	ldrb	r2, [r3, #0]
 8017764:	5cba      	ldrb	r2, [r7, r2]
 8017766:	0712      	lsls	r2, r2, #28
 8017768:	d401      	bmi.n	801776e <__ssvfiscanf_r+0x52>
 801776a:	462a      	mov	r2, r5
 801776c:	e7eb      	b.n	8017746 <__ssvfiscanf_r+0x2a>
 801776e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017770:	3201      	adds	r2, #1
 8017772:	9245      	str	r2, [sp, #276]	; 0x114
 8017774:	6862      	ldr	r2, [r4, #4]
 8017776:	3301      	adds	r3, #1
 8017778:	3a01      	subs	r2, #1
 801777a:	6062      	str	r2, [r4, #4]
 801777c:	6023      	str	r3, [r4, #0]
 801777e:	e7ec      	b.n	801775a <__ssvfiscanf_r+0x3e>
 8017780:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017782:	4621      	mov	r1, r4
 8017784:	4630      	mov	r0, r6
 8017786:	4798      	blx	r3
 8017788:	2800      	cmp	r0, #0
 801778a:	d0e9      	beq.n	8017760 <__ssvfiscanf_r+0x44>
 801778c:	e7ed      	b.n	801776a <__ssvfiscanf_r+0x4e>
 801778e:	2b25      	cmp	r3, #37	; 0x25
 8017790:	d012      	beq.n	80177b8 <__ssvfiscanf_r+0x9c>
 8017792:	469a      	mov	sl, r3
 8017794:	6863      	ldr	r3, [r4, #4]
 8017796:	2b00      	cmp	r3, #0
 8017798:	f340 8091 	ble.w	80178be <__ssvfiscanf_r+0x1a2>
 801779c:	6822      	ldr	r2, [r4, #0]
 801779e:	7813      	ldrb	r3, [r2, #0]
 80177a0:	4553      	cmp	r3, sl
 80177a2:	f040 812e 	bne.w	8017a02 <__ssvfiscanf_r+0x2e6>
 80177a6:	6863      	ldr	r3, [r4, #4]
 80177a8:	3b01      	subs	r3, #1
 80177aa:	6063      	str	r3, [r4, #4]
 80177ac:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80177ae:	3201      	adds	r2, #1
 80177b0:	3301      	adds	r3, #1
 80177b2:	6022      	str	r2, [r4, #0]
 80177b4:	9345      	str	r3, [sp, #276]	; 0x114
 80177b6:	e7d8      	b.n	801776a <__ssvfiscanf_r+0x4e>
 80177b8:	9141      	str	r1, [sp, #260]	; 0x104
 80177ba:	9143      	str	r1, [sp, #268]	; 0x10c
 80177bc:	7853      	ldrb	r3, [r2, #1]
 80177be:	2b2a      	cmp	r3, #42	; 0x2a
 80177c0:	bf02      	ittt	eq
 80177c2:	2310      	moveq	r3, #16
 80177c4:	1c95      	addeq	r5, r2, #2
 80177c6:	9341      	streq	r3, [sp, #260]	; 0x104
 80177c8:	220a      	movs	r2, #10
 80177ca:	46aa      	mov	sl, r5
 80177cc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80177d0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80177d4:	2b09      	cmp	r3, #9
 80177d6:	d91c      	bls.n	8017812 <__ssvfiscanf_r+0xf6>
 80177d8:	487e      	ldr	r0, [pc, #504]	; (80179d4 <__ssvfiscanf_r+0x2b8>)
 80177da:	2203      	movs	r2, #3
 80177dc:	f7e8 fdb0 	bl	8000340 <memchr>
 80177e0:	b138      	cbz	r0, 80177f2 <__ssvfiscanf_r+0xd6>
 80177e2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80177e4:	eba0 0009 	sub.w	r0, r0, r9
 80177e8:	2301      	movs	r3, #1
 80177ea:	4083      	lsls	r3, r0
 80177ec:	4313      	orrs	r3, r2
 80177ee:	9341      	str	r3, [sp, #260]	; 0x104
 80177f0:	4655      	mov	r5, sl
 80177f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80177f6:	2b78      	cmp	r3, #120	; 0x78
 80177f8:	d806      	bhi.n	8017808 <__ssvfiscanf_r+0xec>
 80177fa:	2b57      	cmp	r3, #87	; 0x57
 80177fc:	d810      	bhi.n	8017820 <__ssvfiscanf_r+0x104>
 80177fe:	2b25      	cmp	r3, #37	; 0x25
 8017800:	d0c7      	beq.n	8017792 <__ssvfiscanf_r+0x76>
 8017802:	d857      	bhi.n	80178b4 <__ssvfiscanf_r+0x198>
 8017804:	2b00      	cmp	r3, #0
 8017806:	d065      	beq.n	80178d4 <__ssvfiscanf_r+0x1b8>
 8017808:	2303      	movs	r3, #3
 801780a:	9347      	str	r3, [sp, #284]	; 0x11c
 801780c:	230a      	movs	r3, #10
 801780e:	9342      	str	r3, [sp, #264]	; 0x108
 8017810:	e076      	b.n	8017900 <__ssvfiscanf_r+0x1e4>
 8017812:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017814:	fb02 1103 	mla	r1, r2, r3, r1
 8017818:	3930      	subs	r1, #48	; 0x30
 801781a:	9143      	str	r1, [sp, #268]	; 0x10c
 801781c:	4655      	mov	r5, sl
 801781e:	e7d4      	b.n	80177ca <__ssvfiscanf_r+0xae>
 8017820:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8017824:	2a20      	cmp	r2, #32
 8017826:	d8ef      	bhi.n	8017808 <__ssvfiscanf_r+0xec>
 8017828:	a101      	add	r1, pc, #4	; (adr r1, 8017830 <__ssvfiscanf_r+0x114>)
 801782a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801782e:	bf00      	nop
 8017830:	080178e3 	.word	0x080178e3
 8017834:	08017809 	.word	0x08017809
 8017838:	08017809 	.word	0x08017809
 801783c:	08017941 	.word	0x08017941
 8017840:	08017809 	.word	0x08017809
 8017844:	08017809 	.word	0x08017809
 8017848:	08017809 	.word	0x08017809
 801784c:	08017809 	.word	0x08017809
 8017850:	08017809 	.word	0x08017809
 8017854:	08017809 	.word	0x08017809
 8017858:	08017809 	.word	0x08017809
 801785c:	08017957 	.word	0x08017957
 8017860:	0801793d 	.word	0x0801793d
 8017864:	080178bb 	.word	0x080178bb
 8017868:	080178bb 	.word	0x080178bb
 801786c:	080178bb 	.word	0x080178bb
 8017870:	08017809 	.word	0x08017809
 8017874:	080178f9 	.word	0x080178f9
 8017878:	08017809 	.word	0x08017809
 801787c:	08017809 	.word	0x08017809
 8017880:	08017809 	.word	0x08017809
 8017884:	08017809 	.word	0x08017809
 8017888:	08017967 	.word	0x08017967
 801788c:	08017935 	.word	0x08017935
 8017890:	080178db 	.word	0x080178db
 8017894:	08017809 	.word	0x08017809
 8017898:	08017809 	.word	0x08017809
 801789c:	08017963 	.word	0x08017963
 80178a0:	08017809 	.word	0x08017809
 80178a4:	0801793d 	.word	0x0801793d
 80178a8:	08017809 	.word	0x08017809
 80178ac:	08017809 	.word	0x08017809
 80178b0:	080178e3 	.word	0x080178e3
 80178b4:	3b45      	subs	r3, #69	; 0x45
 80178b6:	2b02      	cmp	r3, #2
 80178b8:	d8a6      	bhi.n	8017808 <__ssvfiscanf_r+0xec>
 80178ba:	2305      	movs	r3, #5
 80178bc:	e01f      	b.n	80178fe <__ssvfiscanf_r+0x1e2>
 80178be:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80178c0:	4621      	mov	r1, r4
 80178c2:	4630      	mov	r0, r6
 80178c4:	4798      	blx	r3
 80178c6:	2800      	cmp	r0, #0
 80178c8:	f43f af68 	beq.w	801779c <__ssvfiscanf_r+0x80>
 80178cc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80178ce:	2800      	cmp	r0, #0
 80178d0:	f040 808d 	bne.w	80179ee <__ssvfiscanf_r+0x2d2>
 80178d4:	f04f 30ff 	mov.w	r0, #4294967295
 80178d8:	e08f      	b.n	80179fa <__ssvfiscanf_r+0x2de>
 80178da:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80178dc:	f042 0220 	orr.w	r2, r2, #32
 80178e0:	9241      	str	r2, [sp, #260]	; 0x104
 80178e2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80178e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80178e8:	9241      	str	r2, [sp, #260]	; 0x104
 80178ea:	2210      	movs	r2, #16
 80178ec:	2b6f      	cmp	r3, #111	; 0x6f
 80178ee:	9242      	str	r2, [sp, #264]	; 0x108
 80178f0:	bf34      	ite	cc
 80178f2:	2303      	movcc	r3, #3
 80178f4:	2304      	movcs	r3, #4
 80178f6:	e002      	b.n	80178fe <__ssvfiscanf_r+0x1e2>
 80178f8:	2300      	movs	r3, #0
 80178fa:	9342      	str	r3, [sp, #264]	; 0x108
 80178fc:	2303      	movs	r3, #3
 80178fe:	9347      	str	r3, [sp, #284]	; 0x11c
 8017900:	6863      	ldr	r3, [r4, #4]
 8017902:	2b00      	cmp	r3, #0
 8017904:	dd3d      	ble.n	8017982 <__ssvfiscanf_r+0x266>
 8017906:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017908:	0659      	lsls	r1, r3, #25
 801790a:	d404      	bmi.n	8017916 <__ssvfiscanf_r+0x1fa>
 801790c:	6823      	ldr	r3, [r4, #0]
 801790e:	781a      	ldrb	r2, [r3, #0]
 8017910:	5cba      	ldrb	r2, [r7, r2]
 8017912:	0712      	lsls	r2, r2, #28
 8017914:	d43c      	bmi.n	8017990 <__ssvfiscanf_r+0x274>
 8017916:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8017918:	2b02      	cmp	r3, #2
 801791a:	dc4b      	bgt.n	80179b4 <__ssvfiscanf_r+0x298>
 801791c:	466b      	mov	r3, sp
 801791e:	4622      	mov	r2, r4
 8017920:	a941      	add	r1, sp, #260	; 0x104
 8017922:	4630      	mov	r0, r6
 8017924:	f000 fa02 	bl	8017d2c <_scanf_chars>
 8017928:	2801      	cmp	r0, #1
 801792a:	d06a      	beq.n	8017a02 <__ssvfiscanf_r+0x2e6>
 801792c:	2802      	cmp	r0, #2
 801792e:	f47f af1c 	bne.w	801776a <__ssvfiscanf_r+0x4e>
 8017932:	e7cb      	b.n	80178cc <__ssvfiscanf_r+0x1b0>
 8017934:	2308      	movs	r3, #8
 8017936:	9342      	str	r3, [sp, #264]	; 0x108
 8017938:	2304      	movs	r3, #4
 801793a:	e7e0      	b.n	80178fe <__ssvfiscanf_r+0x1e2>
 801793c:	220a      	movs	r2, #10
 801793e:	e7d5      	b.n	80178ec <__ssvfiscanf_r+0x1d0>
 8017940:	4629      	mov	r1, r5
 8017942:	4640      	mov	r0, r8
 8017944:	f000 fb40 	bl	8017fc8 <__sccl>
 8017948:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801794a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801794e:	9341      	str	r3, [sp, #260]	; 0x104
 8017950:	4605      	mov	r5, r0
 8017952:	2301      	movs	r3, #1
 8017954:	e7d3      	b.n	80178fe <__ssvfiscanf_r+0x1e2>
 8017956:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801795c:	9341      	str	r3, [sp, #260]	; 0x104
 801795e:	2300      	movs	r3, #0
 8017960:	e7cd      	b.n	80178fe <__ssvfiscanf_r+0x1e2>
 8017962:	2302      	movs	r3, #2
 8017964:	e7cb      	b.n	80178fe <__ssvfiscanf_r+0x1e2>
 8017966:	9841      	ldr	r0, [sp, #260]	; 0x104
 8017968:	06c3      	lsls	r3, r0, #27
 801796a:	f53f aefe 	bmi.w	801776a <__ssvfiscanf_r+0x4e>
 801796e:	9b00      	ldr	r3, [sp, #0]
 8017970:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017972:	1d19      	adds	r1, r3, #4
 8017974:	9100      	str	r1, [sp, #0]
 8017976:	681b      	ldr	r3, [r3, #0]
 8017978:	07c0      	lsls	r0, r0, #31
 801797a:	bf4c      	ite	mi
 801797c:	801a      	strhmi	r2, [r3, #0]
 801797e:	601a      	strpl	r2, [r3, #0]
 8017980:	e6f3      	b.n	801776a <__ssvfiscanf_r+0x4e>
 8017982:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017984:	4621      	mov	r1, r4
 8017986:	4630      	mov	r0, r6
 8017988:	4798      	blx	r3
 801798a:	2800      	cmp	r0, #0
 801798c:	d0bb      	beq.n	8017906 <__ssvfiscanf_r+0x1ea>
 801798e:	e79d      	b.n	80178cc <__ssvfiscanf_r+0x1b0>
 8017990:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017992:	3201      	adds	r2, #1
 8017994:	9245      	str	r2, [sp, #276]	; 0x114
 8017996:	6862      	ldr	r2, [r4, #4]
 8017998:	3a01      	subs	r2, #1
 801799a:	2a00      	cmp	r2, #0
 801799c:	6062      	str	r2, [r4, #4]
 801799e:	dd02      	ble.n	80179a6 <__ssvfiscanf_r+0x28a>
 80179a0:	3301      	adds	r3, #1
 80179a2:	6023      	str	r3, [r4, #0]
 80179a4:	e7b2      	b.n	801790c <__ssvfiscanf_r+0x1f0>
 80179a6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80179a8:	4621      	mov	r1, r4
 80179aa:	4630      	mov	r0, r6
 80179ac:	4798      	blx	r3
 80179ae:	2800      	cmp	r0, #0
 80179b0:	d0ac      	beq.n	801790c <__ssvfiscanf_r+0x1f0>
 80179b2:	e78b      	b.n	80178cc <__ssvfiscanf_r+0x1b0>
 80179b4:	2b04      	cmp	r3, #4
 80179b6:	dc0f      	bgt.n	80179d8 <__ssvfiscanf_r+0x2bc>
 80179b8:	466b      	mov	r3, sp
 80179ba:	4622      	mov	r2, r4
 80179bc:	a941      	add	r1, sp, #260	; 0x104
 80179be:	4630      	mov	r0, r6
 80179c0:	f000 fa0e 	bl	8017de0 <_scanf_i>
 80179c4:	e7b0      	b.n	8017928 <__ssvfiscanf_r+0x20c>
 80179c6:	bf00      	nop
 80179c8:	08017669 	.word	0x08017669
 80179cc:	080176e3 	.word	0x080176e3
 80179d0:	08018643 	.word	0x08018643
 80179d4:	080185fa 	.word	0x080185fa
 80179d8:	4b0b      	ldr	r3, [pc, #44]	; (8017a08 <__ssvfiscanf_r+0x2ec>)
 80179da:	2b00      	cmp	r3, #0
 80179dc:	f43f aec5 	beq.w	801776a <__ssvfiscanf_r+0x4e>
 80179e0:	466b      	mov	r3, sp
 80179e2:	4622      	mov	r2, r4
 80179e4:	a941      	add	r1, sp, #260	; 0x104
 80179e6:	4630      	mov	r0, r6
 80179e8:	f3af 8000 	nop.w
 80179ec:	e79c      	b.n	8017928 <__ssvfiscanf_r+0x20c>
 80179ee:	89a3      	ldrh	r3, [r4, #12]
 80179f0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80179f4:	bf18      	it	ne
 80179f6:	f04f 30ff 	movne.w	r0, #4294967295
 80179fa:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80179fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a02:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017a04:	e7f9      	b.n	80179fa <__ssvfiscanf_r+0x2de>
 8017a06:	bf00      	nop
 8017a08:	00000000 	.word	0x00000000

08017a0c <_printf_common>:
 8017a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a10:	4616      	mov	r6, r2
 8017a12:	4699      	mov	r9, r3
 8017a14:	688a      	ldr	r2, [r1, #8]
 8017a16:	690b      	ldr	r3, [r1, #16]
 8017a18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017a1c:	4293      	cmp	r3, r2
 8017a1e:	bfb8      	it	lt
 8017a20:	4613      	movlt	r3, r2
 8017a22:	6033      	str	r3, [r6, #0]
 8017a24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017a28:	4607      	mov	r7, r0
 8017a2a:	460c      	mov	r4, r1
 8017a2c:	b10a      	cbz	r2, 8017a32 <_printf_common+0x26>
 8017a2e:	3301      	adds	r3, #1
 8017a30:	6033      	str	r3, [r6, #0]
 8017a32:	6823      	ldr	r3, [r4, #0]
 8017a34:	0699      	lsls	r1, r3, #26
 8017a36:	bf42      	ittt	mi
 8017a38:	6833      	ldrmi	r3, [r6, #0]
 8017a3a:	3302      	addmi	r3, #2
 8017a3c:	6033      	strmi	r3, [r6, #0]
 8017a3e:	6825      	ldr	r5, [r4, #0]
 8017a40:	f015 0506 	ands.w	r5, r5, #6
 8017a44:	d106      	bne.n	8017a54 <_printf_common+0x48>
 8017a46:	f104 0a19 	add.w	sl, r4, #25
 8017a4a:	68e3      	ldr	r3, [r4, #12]
 8017a4c:	6832      	ldr	r2, [r6, #0]
 8017a4e:	1a9b      	subs	r3, r3, r2
 8017a50:	42ab      	cmp	r3, r5
 8017a52:	dc26      	bgt.n	8017aa2 <_printf_common+0x96>
 8017a54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017a58:	1e13      	subs	r3, r2, #0
 8017a5a:	6822      	ldr	r2, [r4, #0]
 8017a5c:	bf18      	it	ne
 8017a5e:	2301      	movne	r3, #1
 8017a60:	0692      	lsls	r2, r2, #26
 8017a62:	d42b      	bmi.n	8017abc <_printf_common+0xb0>
 8017a64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017a68:	4649      	mov	r1, r9
 8017a6a:	4638      	mov	r0, r7
 8017a6c:	47c0      	blx	r8
 8017a6e:	3001      	adds	r0, #1
 8017a70:	d01e      	beq.n	8017ab0 <_printf_common+0xa4>
 8017a72:	6823      	ldr	r3, [r4, #0]
 8017a74:	6922      	ldr	r2, [r4, #16]
 8017a76:	f003 0306 	and.w	r3, r3, #6
 8017a7a:	2b04      	cmp	r3, #4
 8017a7c:	bf02      	ittt	eq
 8017a7e:	68e5      	ldreq	r5, [r4, #12]
 8017a80:	6833      	ldreq	r3, [r6, #0]
 8017a82:	1aed      	subeq	r5, r5, r3
 8017a84:	68a3      	ldr	r3, [r4, #8]
 8017a86:	bf0c      	ite	eq
 8017a88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017a8c:	2500      	movne	r5, #0
 8017a8e:	4293      	cmp	r3, r2
 8017a90:	bfc4      	itt	gt
 8017a92:	1a9b      	subgt	r3, r3, r2
 8017a94:	18ed      	addgt	r5, r5, r3
 8017a96:	2600      	movs	r6, #0
 8017a98:	341a      	adds	r4, #26
 8017a9a:	42b5      	cmp	r5, r6
 8017a9c:	d11a      	bne.n	8017ad4 <_printf_common+0xc8>
 8017a9e:	2000      	movs	r0, #0
 8017aa0:	e008      	b.n	8017ab4 <_printf_common+0xa8>
 8017aa2:	2301      	movs	r3, #1
 8017aa4:	4652      	mov	r2, sl
 8017aa6:	4649      	mov	r1, r9
 8017aa8:	4638      	mov	r0, r7
 8017aaa:	47c0      	blx	r8
 8017aac:	3001      	adds	r0, #1
 8017aae:	d103      	bne.n	8017ab8 <_printf_common+0xac>
 8017ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8017ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ab8:	3501      	adds	r5, #1
 8017aba:	e7c6      	b.n	8017a4a <_printf_common+0x3e>
 8017abc:	18e1      	adds	r1, r4, r3
 8017abe:	1c5a      	adds	r2, r3, #1
 8017ac0:	2030      	movs	r0, #48	; 0x30
 8017ac2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017ac6:	4422      	add	r2, r4
 8017ac8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017acc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017ad0:	3302      	adds	r3, #2
 8017ad2:	e7c7      	b.n	8017a64 <_printf_common+0x58>
 8017ad4:	2301      	movs	r3, #1
 8017ad6:	4622      	mov	r2, r4
 8017ad8:	4649      	mov	r1, r9
 8017ada:	4638      	mov	r0, r7
 8017adc:	47c0      	blx	r8
 8017ade:	3001      	adds	r0, #1
 8017ae0:	d0e6      	beq.n	8017ab0 <_printf_common+0xa4>
 8017ae2:	3601      	adds	r6, #1
 8017ae4:	e7d9      	b.n	8017a9a <_printf_common+0x8e>
	...

08017ae8 <_printf_i>:
 8017ae8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017aec:	7e0f      	ldrb	r7, [r1, #24]
 8017aee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017af0:	2f78      	cmp	r7, #120	; 0x78
 8017af2:	4691      	mov	r9, r2
 8017af4:	4680      	mov	r8, r0
 8017af6:	460c      	mov	r4, r1
 8017af8:	469a      	mov	sl, r3
 8017afa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017afe:	d807      	bhi.n	8017b10 <_printf_i+0x28>
 8017b00:	2f62      	cmp	r7, #98	; 0x62
 8017b02:	d80a      	bhi.n	8017b1a <_printf_i+0x32>
 8017b04:	2f00      	cmp	r7, #0
 8017b06:	f000 80d4 	beq.w	8017cb2 <_printf_i+0x1ca>
 8017b0a:	2f58      	cmp	r7, #88	; 0x58
 8017b0c:	f000 80c0 	beq.w	8017c90 <_printf_i+0x1a8>
 8017b10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017b14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017b18:	e03a      	b.n	8017b90 <_printf_i+0xa8>
 8017b1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017b1e:	2b15      	cmp	r3, #21
 8017b20:	d8f6      	bhi.n	8017b10 <_printf_i+0x28>
 8017b22:	a101      	add	r1, pc, #4	; (adr r1, 8017b28 <_printf_i+0x40>)
 8017b24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017b28:	08017b81 	.word	0x08017b81
 8017b2c:	08017b95 	.word	0x08017b95
 8017b30:	08017b11 	.word	0x08017b11
 8017b34:	08017b11 	.word	0x08017b11
 8017b38:	08017b11 	.word	0x08017b11
 8017b3c:	08017b11 	.word	0x08017b11
 8017b40:	08017b95 	.word	0x08017b95
 8017b44:	08017b11 	.word	0x08017b11
 8017b48:	08017b11 	.word	0x08017b11
 8017b4c:	08017b11 	.word	0x08017b11
 8017b50:	08017b11 	.word	0x08017b11
 8017b54:	08017c99 	.word	0x08017c99
 8017b58:	08017bc1 	.word	0x08017bc1
 8017b5c:	08017c53 	.word	0x08017c53
 8017b60:	08017b11 	.word	0x08017b11
 8017b64:	08017b11 	.word	0x08017b11
 8017b68:	08017cbb 	.word	0x08017cbb
 8017b6c:	08017b11 	.word	0x08017b11
 8017b70:	08017bc1 	.word	0x08017bc1
 8017b74:	08017b11 	.word	0x08017b11
 8017b78:	08017b11 	.word	0x08017b11
 8017b7c:	08017c5b 	.word	0x08017c5b
 8017b80:	682b      	ldr	r3, [r5, #0]
 8017b82:	1d1a      	adds	r2, r3, #4
 8017b84:	681b      	ldr	r3, [r3, #0]
 8017b86:	602a      	str	r2, [r5, #0]
 8017b88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017b8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017b90:	2301      	movs	r3, #1
 8017b92:	e09f      	b.n	8017cd4 <_printf_i+0x1ec>
 8017b94:	6820      	ldr	r0, [r4, #0]
 8017b96:	682b      	ldr	r3, [r5, #0]
 8017b98:	0607      	lsls	r7, r0, #24
 8017b9a:	f103 0104 	add.w	r1, r3, #4
 8017b9e:	6029      	str	r1, [r5, #0]
 8017ba0:	d501      	bpl.n	8017ba6 <_printf_i+0xbe>
 8017ba2:	681e      	ldr	r6, [r3, #0]
 8017ba4:	e003      	b.n	8017bae <_printf_i+0xc6>
 8017ba6:	0646      	lsls	r6, r0, #25
 8017ba8:	d5fb      	bpl.n	8017ba2 <_printf_i+0xba>
 8017baa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017bae:	2e00      	cmp	r6, #0
 8017bb0:	da03      	bge.n	8017bba <_printf_i+0xd2>
 8017bb2:	232d      	movs	r3, #45	; 0x2d
 8017bb4:	4276      	negs	r6, r6
 8017bb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017bba:	485a      	ldr	r0, [pc, #360]	; (8017d24 <_printf_i+0x23c>)
 8017bbc:	230a      	movs	r3, #10
 8017bbe:	e012      	b.n	8017be6 <_printf_i+0xfe>
 8017bc0:	682b      	ldr	r3, [r5, #0]
 8017bc2:	6820      	ldr	r0, [r4, #0]
 8017bc4:	1d19      	adds	r1, r3, #4
 8017bc6:	6029      	str	r1, [r5, #0]
 8017bc8:	0605      	lsls	r5, r0, #24
 8017bca:	d501      	bpl.n	8017bd0 <_printf_i+0xe8>
 8017bcc:	681e      	ldr	r6, [r3, #0]
 8017bce:	e002      	b.n	8017bd6 <_printf_i+0xee>
 8017bd0:	0641      	lsls	r1, r0, #25
 8017bd2:	d5fb      	bpl.n	8017bcc <_printf_i+0xe4>
 8017bd4:	881e      	ldrh	r6, [r3, #0]
 8017bd6:	4853      	ldr	r0, [pc, #332]	; (8017d24 <_printf_i+0x23c>)
 8017bd8:	2f6f      	cmp	r7, #111	; 0x6f
 8017bda:	bf0c      	ite	eq
 8017bdc:	2308      	moveq	r3, #8
 8017bde:	230a      	movne	r3, #10
 8017be0:	2100      	movs	r1, #0
 8017be2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017be6:	6865      	ldr	r5, [r4, #4]
 8017be8:	60a5      	str	r5, [r4, #8]
 8017bea:	2d00      	cmp	r5, #0
 8017bec:	bfa2      	ittt	ge
 8017bee:	6821      	ldrge	r1, [r4, #0]
 8017bf0:	f021 0104 	bicge.w	r1, r1, #4
 8017bf4:	6021      	strge	r1, [r4, #0]
 8017bf6:	b90e      	cbnz	r6, 8017bfc <_printf_i+0x114>
 8017bf8:	2d00      	cmp	r5, #0
 8017bfa:	d04b      	beq.n	8017c94 <_printf_i+0x1ac>
 8017bfc:	4615      	mov	r5, r2
 8017bfe:	fbb6 f1f3 	udiv	r1, r6, r3
 8017c02:	fb03 6711 	mls	r7, r3, r1, r6
 8017c06:	5dc7      	ldrb	r7, [r0, r7]
 8017c08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017c0c:	4637      	mov	r7, r6
 8017c0e:	42bb      	cmp	r3, r7
 8017c10:	460e      	mov	r6, r1
 8017c12:	d9f4      	bls.n	8017bfe <_printf_i+0x116>
 8017c14:	2b08      	cmp	r3, #8
 8017c16:	d10b      	bne.n	8017c30 <_printf_i+0x148>
 8017c18:	6823      	ldr	r3, [r4, #0]
 8017c1a:	07de      	lsls	r6, r3, #31
 8017c1c:	d508      	bpl.n	8017c30 <_printf_i+0x148>
 8017c1e:	6923      	ldr	r3, [r4, #16]
 8017c20:	6861      	ldr	r1, [r4, #4]
 8017c22:	4299      	cmp	r1, r3
 8017c24:	bfde      	ittt	le
 8017c26:	2330      	movle	r3, #48	; 0x30
 8017c28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017c2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017c30:	1b52      	subs	r2, r2, r5
 8017c32:	6122      	str	r2, [r4, #16]
 8017c34:	f8cd a000 	str.w	sl, [sp]
 8017c38:	464b      	mov	r3, r9
 8017c3a:	aa03      	add	r2, sp, #12
 8017c3c:	4621      	mov	r1, r4
 8017c3e:	4640      	mov	r0, r8
 8017c40:	f7ff fee4 	bl	8017a0c <_printf_common>
 8017c44:	3001      	adds	r0, #1
 8017c46:	d14a      	bne.n	8017cde <_printf_i+0x1f6>
 8017c48:	f04f 30ff 	mov.w	r0, #4294967295
 8017c4c:	b004      	add	sp, #16
 8017c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c52:	6823      	ldr	r3, [r4, #0]
 8017c54:	f043 0320 	orr.w	r3, r3, #32
 8017c58:	6023      	str	r3, [r4, #0]
 8017c5a:	4833      	ldr	r0, [pc, #204]	; (8017d28 <_printf_i+0x240>)
 8017c5c:	2778      	movs	r7, #120	; 0x78
 8017c5e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017c62:	6823      	ldr	r3, [r4, #0]
 8017c64:	6829      	ldr	r1, [r5, #0]
 8017c66:	061f      	lsls	r7, r3, #24
 8017c68:	f851 6b04 	ldr.w	r6, [r1], #4
 8017c6c:	d402      	bmi.n	8017c74 <_printf_i+0x18c>
 8017c6e:	065f      	lsls	r7, r3, #25
 8017c70:	bf48      	it	mi
 8017c72:	b2b6      	uxthmi	r6, r6
 8017c74:	07df      	lsls	r7, r3, #31
 8017c76:	bf48      	it	mi
 8017c78:	f043 0320 	orrmi.w	r3, r3, #32
 8017c7c:	6029      	str	r1, [r5, #0]
 8017c7e:	bf48      	it	mi
 8017c80:	6023      	strmi	r3, [r4, #0]
 8017c82:	b91e      	cbnz	r6, 8017c8c <_printf_i+0x1a4>
 8017c84:	6823      	ldr	r3, [r4, #0]
 8017c86:	f023 0320 	bic.w	r3, r3, #32
 8017c8a:	6023      	str	r3, [r4, #0]
 8017c8c:	2310      	movs	r3, #16
 8017c8e:	e7a7      	b.n	8017be0 <_printf_i+0xf8>
 8017c90:	4824      	ldr	r0, [pc, #144]	; (8017d24 <_printf_i+0x23c>)
 8017c92:	e7e4      	b.n	8017c5e <_printf_i+0x176>
 8017c94:	4615      	mov	r5, r2
 8017c96:	e7bd      	b.n	8017c14 <_printf_i+0x12c>
 8017c98:	682b      	ldr	r3, [r5, #0]
 8017c9a:	6826      	ldr	r6, [r4, #0]
 8017c9c:	6961      	ldr	r1, [r4, #20]
 8017c9e:	1d18      	adds	r0, r3, #4
 8017ca0:	6028      	str	r0, [r5, #0]
 8017ca2:	0635      	lsls	r5, r6, #24
 8017ca4:	681b      	ldr	r3, [r3, #0]
 8017ca6:	d501      	bpl.n	8017cac <_printf_i+0x1c4>
 8017ca8:	6019      	str	r1, [r3, #0]
 8017caa:	e002      	b.n	8017cb2 <_printf_i+0x1ca>
 8017cac:	0670      	lsls	r0, r6, #25
 8017cae:	d5fb      	bpl.n	8017ca8 <_printf_i+0x1c0>
 8017cb0:	8019      	strh	r1, [r3, #0]
 8017cb2:	2300      	movs	r3, #0
 8017cb4:	6123      	str	r3, [r4, #16]
 8017cb6:	4615      	mov	r5, r2
 8017cb8:	e7bc      	b.n	8017c34 <_printf_i+0x14c>
 8017cba:	682b      	ldr	r3, [r5, #0]
 8017cbc:	1d1a      	adds	r2, r3, #4
 8017cbe:	602a      	str	r2, [r5, #0]
 8017cc0:	681d      	ldr	r5, [r3, #0]
 8017cc2:	6862      	ldr	r2, [r4, #4]
 8017cc4:	2100      	movs	r1, #0
 8017cc6:	4628      	mov	r0, r5
 8017cc8:	f7e8 fb3a 	bl	8000340 <memchr>
 8017ccc:	b108      	cbz	r0, 8017cd2 <_printf_i+0x1ea>
 8017cce:	1b40      	subs	r0, r0, r5
 8017cd0:	6060      	str	r0, [r4, #4]
 8017cd2:	6863      	ldr	r3, [r4, #4]
 8017cd4:	6123      	str	r3, [r4, #16]
 8017cd6:	2300      	movs	r3, #0
 8017cd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017cdc:	e7aa      	b.n	8017c34 <_printf_i+0x14c>
 8017cde:	6923      	ldr	r3, [r4, #16]
 8017ce0:	462a      	mov	r2, r5
 8017ce2:	4649      	mov	r1, r9
 8017ce4:	4640      	mov	r0, r8
 8017ce6:	47d0      	blx	sl
 8017ce8:	3001      	adds	r0, #1
 8017cea:	d0ad      	beq.n	8017c48 <_printf_i+0x160>
 8017cec:	6823      	ldr	r3, [r4, #0]
 8017cee:	079b      	lsls	r3, r3, #30
 8017cf0:	d413      	bmi.n	8017d1a <_printf_i+0x232>
 8017cf2:	68e0      	ldr	r0, [r4, #12]
 8017cf4:	9b03      	ldr	r3, [sp, #12]
 8017cf6:	4298      	cmp	r0, r3
 8017cf8:	bfb8      	it	lt
 8017cfa:	4618      	movlt	r0, r3
 8017cfc:	e7a6      	b.n	8017c4c <_printf_i+0x164>
 8017cfe:	2301      	movs	r3, #1
 8017d00:	4632      	mov	r2, r6
 8017d02:	4649      	mov	r1, r9
 8017d04:	4640      	mov	r0, r8
 8017d06:	47d0      	blx	sl
 8017d08:	3001      	adds	r0, #1
 8017d0a:	d09d      	beq.n	8017c48 <_printf_i+0x160>
 8017d0c:	3501      	adds	r5, #1
 8017d0e:	68e3      	ldr	r3, [r4, #12]
 8017d10:	9903      	ldr	r1, [sp, #12]
 8017d12:	1a5b      	subs	r3, r3, r1
 8017d14:	42ab      	cmp	r3, r5
 8017d16:	dcf2      	bgt.n	8017cfe <_printf_i+0x216>
 8017d18:	e7eb      	b.n	8017cf2 <_printf_i+0x20a>
 8017d1a:	2500      	movs	r5, #0
 8017d1c:	f104 0619 	add.w	r6, r4, #25
 8017d20:	e7f5      	b.n	8017d0e <_printf_i+0x226>
 8017d22:	bf00      	nop
 8017d24:	08018605 	.word	0x08018605
 8017d28:	08018616 	.word	0x08018616

08017d2c <_scanf_chars>:
 8017d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017d30:	4615      	mov	r5, r2
 8017d32:	688a      	ldr	r2, [r1, #8]
 8017d34:	4680      	mov	r8, r0
 8017d36:	460c      	mov	r4, r1
 8017d38:	b932      	cbnz	r2, 8017d48 <_scanf_chars+0x1c>
 8017d3a:	698a      	ldr	r2, [r1, #24]
 8017d3c:	2a00      	cmp	r2, #0
 8017d3e:	bf0c      	ite	eq
 8017d40:	2201      	moveq	r2, #1
 8017d42:	f04f 32ff 	movne.w	r2, #4294967295
 8017d46:	608a      	str	r2, [r1, #8]
 8017d48:	6822      	ldr	r2, [r4, #0]
 8017d4a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8017ddc <_scanf_chars+0xb0>
 8017d4e:	06d1      	lsls	r1, r2, #27
 8017d50:	bf5f      	itttt	pl
 8017d52:	681a      	ldrpl	r2, [r3, #0]
 8017d54:	1d11      	addpl	r1, r2, #4
 8017d56:	6019      	strpl	r1, [r3, #0]
 8017d58:	6816      	ldrpl	r6, [r2, #0]
 8017d5a:	2700      	movs	r7, #0
 8017d5c:	69a0      	ldr	r0, [r4, #24]
 8017d5e:	b188      	cbz	r0, 8017d84 <_scanf_chars+0x58>
 8017d60:	2801      	cmp	r0, #1
 8017d62:	d107      	bne.n	8017d74 <_scanf_chars+0x48>
 8017d64:	682a      	ldr	r2, [r5, #0]
 8017d66:	7811      	ldrb	r1, [r2, #0]
 8017d68:	6962      	ldr	r2, [r4, #20]
 8017d6a:	5c52      	ldrb	r2, [r2, r1]
 8017d6c:	b952      	cbnz	r2, 8017d84 <_scanf_chars+0x58>
 8017d6e:	2f00      	cmp	r7, #0
 8017d70:	d031      	beq.n	8017dd6 <_scanf_chars+0xaa>
 8017d72:	e022      	b.n	8017dba <_scanf_chars+0x8e>
 8017d74:	2802      	cmp	r0, #2
 8017d76:	d120      	bne.n	8017dba <_scanf_chars+0x8e>
 8017d78:	682b      	ldr	r3, [r5, #0]
 8017d7a:	781b      	ldrb	r3, [r3, #0]
 8017d7c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8017d80:	071b      	lsls	r3, r3, #28
 8017d82:	d41a      	bmi.n	8017dba <_scanf_chars+0x8e>
 8017d84:	6823      	ldr	r3, [r4, #0]
 8017d86:	06da      	lsls	r2, r3, #27
 8017d88:	bf5e      	ittt	pl
 8017d8a:	682b      	ldrpl	r3, [r5, #0]
 8017d8c:	781b      	ldrbpl	r3, [r3, #0]
 8017d8e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8017d92:	682a      	ldr	r2, [r5, #0]
 8017d94:	686b      	ldr	r3, [r5, #4]
 8017d96:	3201      	adds	r2, #1
 8017d98:	602a      	str	r2, [r5, #0]
 8017d9a:	68a2      	ldr	r2, [r4, #8]
 8017d9c:	3b01      	subs	r3, #1
 8017d9e:	3a01      	subs	r2, #1
 8017da0:	606b      	str	r3, [r5, #4]
 8017da2:	3701      	adds	r7, #1
 8017da4:	60a2      	str	r2, [r4, #8]
 8017da6:	b142      	cbz	r2, 8017dba <_scanf_chars+0x8e>
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	dcd7      	bgt.n	8017d5c <_scanf_chars+0x30>
 8017dac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017db0:	4629      	mov	r1, r5
 8017db2:	4640      	mov	r0, r8
 8017db4:	4798      	blx	r3
 8017db6:	2800      	cmp	r0, #0
 8017db8:	d0d0      	beq.n	8017d5c <_scanf_chars+0x30>
 8017dba:	6823      	ldr	r3, [r4, #0]
 8017dbc:	f013 0310 	ands.w	r3, r3, #16
 8017dc0:	d105      	bne.n	8017dce <_scanf_chars+0xa2>
 8017dc2:	68e2      	ldr	r2, [r4, #12]
 8017dc4:	3201      	adds	r2, #1
 8017dc6:	60e2      	str	r2, [r4, #12]
 8017dc8:	69a2      	ldr	r2, [r4, #24]
 8017dca:	b102      	cbz	r2, 8017dce <_scanf_chars+0xa2>
 8017dcc:	7033      	strb	r3, [r6, #0]
 8017dce:	6923      	ldr	r3, [r4, #16]
 8017dd0:	443b      	add	r3, r7
 8017dd2:	6123      	str	r3, [r4, #16]
 8017dd4:	2000      	movs	r0, #0
 8017dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017dda:	bf00      	nop
 8017ddc:	08018643 	.word	0x08018643

08017de0 <_scanf_i>:
 8017de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017de4:	4698      	mov	r8, r3
 8017de6:	4b74      	ldr	r3, [pc, #464]	; (8017fb8 <_scanf_i+0x1d8>)
 8017de8:	460c      	mov	r4, r1
 8017dea:	4682      	mov	sl, r0
 8017dec:	4616      	mov	r6, r2
 8017dee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017df2:	b087      	sub	sp, #28
 8017df4:	ab03      	add	r3, sp, #12
 8017df6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017dfa:	4b70      	ldr	r3, [pc, #448]	; (8017fbc <_scanf_i+0x1dc>)
 8017dfc:	69a1      	ldr	r1, [r4, #24]
 8017dfe:	4a70      	ldr	r2, [pc, #448]	; (8017fc0 <_scanf_i+0x1e0>)
 8017e00:	2903      	cmp	r1, #3
 8017e02:	bf18      	it	ne
 8017e04:	461a      	movne	r2, r3
 8017e06:	68a3      	ldr	r3, [r4, #8]
 8017e08:	9201      	str	r2, [sp, #4]
 8017e0a:	1e5a      	subs	r2, r3, #1
 8017e0c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8017e10:	bf88      	it	hi
 8017e12:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017e16:	4627      	mov	r7, r4
 8017e18:	bf82      	ittt	hi
 8017e1a:	eb03 0905 	addhi.w	r9, r3, r5
 8017e1e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017e22:	60a3      	strhi	r3, [r4, #8]
 8017e24:	f857 3b1c 	ldr.w	r3, [r7], #28
 8017e28:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8017e2c:	bf98      	it	ls
 8017e2e:	f04f 0900 	movls.w	r9, #0
 8017e32:	6023      	str	r3, [r4, #0]
 8017e34:	463d      	mov	r5, r7
 8017e36:	f04f 0b00 	mov.w	fp, #0
 8017e3a:	6831      	ldr	r1, [r6, #0]
 8017e3c:	ab03      	add	r3, sp, #12
 8017e3e:	7809      	ldrb	r1, [r1, #0]
 8017e40:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8017e44:	2202      	movs	r2, #2
 8017e46:	f7e8 fa7b 	bl	8000340 <memchr>
 8017e4a:	b328      	cbz	r0, 8017e98 <_scanf_i+0xb8>
 8017e4c:	f1bb 0f01 	cmp.w	fp, #1
 8017e50:	d159      	bne.n	8017f06 <_scanf_i+0x126>
 8017e52:	6862      	ldr	r2, [r4, #4]
 8017e54:	b92a      	cbnz	r2, 8017e62 <_scanf_i+0x82>
 8017e56:	6822      	ldr	r2, [r4, #0]
 8017e58:	2308      	movs	r3, #8
 8017e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017e5e:	6063      	str	r3, [r4, #4]
 8017e60:	6022      	str	r2, [r4, #0]
 8017e62:	6822      	ldr	r2, [r4, #0]
 8017e64:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8017e68:	6022      	str	r2, [r4, #0]
 8017e6a:	68a2      	ldr	r2, [r4, #8]
 8017e6c:	1e51      	subs	r1, r2, #1
 8017e6e:	60a1      	str	r1, [r4, #8]
 8017e70:	b192      	cbz	r2, 8017e98 <_scanf_i+0xb8>
 8017e72:	6832      	ldr	r2, [r6, #0]
 8017e74:	1c51      	adds	r1, r2, #1
 8017e76:	6031      	str	r1, [r6, #0]
 8017e78:	7812      	ldrb	r2, [r2, #0]
 8017e7a:	f805 2b01 	strb.w	r2, [r5], #1
 8017e7e:	6872      	ldr	r2, [r6, #4]
 8017e80:	3a01      	subs	r2, #1
 8017e82:	2a00      	cmp	r2, #0
 8017e84:	6072      	str	r2, [r6, #4]
 8017e86:	dc07      	bgt.n	8017e98 <_scanf_i+0xb8>
 8017e88:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8017e8c:	4631      	mov	r1, r6
 8017e8e:	4650      	mov	r0, sl
 8017e90:	4790      	blx	r2
 8017e92:	2800      	cmp	r0, #0
 8017e94:	f040 8085 	bne.w	8017fa2 <_scanf_i+0x1c2>
 8017e98:	f10b 0b01 	add.w	fp, fp, #1
 8017e9c:	f1bb 0f03 	cmp.w	fp, #3
 8017ea0:	d1cb      	bne.n	8017e3a <_scanf_i+0x5a>
 8017ea2:	6863      	ldr	r3, [r4, #4]
 8017ea4:	b90b      	cbnz	r3, 8017eaa <_scanf_i+0xca>
 8017ea6:	230a      	movs	r3, #10
 8017ea8:	6063      	str	r3, [r4, #4]
 8017eaa:	6863      	ldr	r3, [r4, #4]
 8017eac:	4945      	ldr	r1, [pc, #276]	; (8017fc4 <_scanf_i+0x1e4>)
 8017eae:	6960      	ldr	r0, [r4, #20]
 8017eb0:	1ac9      	subs	r1, r1, r3
 8017eb2:	f000 f889 	bl	8017fc8 <__sccl>
 8017eb6:	f04f 0b00 	mov.w	fp, #0
 8017eba:	68a3      	ldr	r3, [r4, #8]
 8017ebc:	6822      	ldr	r2, [r4, #0]
 8017ebe:	2b00      	cmp	r3, #0
 8017ec0:	d03d      	beq.n	8017f3e <_scanf_i+0x15e>
 8017ec2:	6831      	ldr	r1, [r6, #0]
 8017ec4:	6960      	ldr	r0, [r4, #20]
 8017ec6:	f891 c000 	ldrb.w	ip, [r1]
 8017eca:	f810 000c 	ldrb.w	r0, [r0, ip]
 8017ece:	2800      	cmp	r0, #0
 8017ed0:	d035      	beq.n	8017f3e <_scanf_i+0x15e>
 8017ed2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8017ed6:	d124      	bne.n	8017f22 <_scanf_i+0x142>
 8017ed8:	0510      	lsls	r0, r2, #20
 8017eda:	d522      	bpl.n	8017f22 <_scanf_i+0x142>
 8017edc:	f10b 0b01 	add.w	fp, fp, #1
 8017ee0:	f1b9 0f00 	cmp.w	r9, #0
 8017ee4:	d003      	beq.n	8017eee <_scanf_i+0x10e>
 8017ee6:	3301      	adds	r3, #1
 8017ee8:	f109 39ff 	add.w	r9, r9, #4294967295
 8017eec:	60a3      	str	r3, [r4, #8]
 8017eee:	6873      	ldr	r3, [r6, #4]
 8017ef0:	3b01      	subs	r3, #1
 8017ef2:	2b00      	cmp	r3, #0
 8017ef4:	6073      	str	r3, [r6, #4]
 8017ef6:	dd1b      	ble.n	8017f30 <_scanf_i+0x150>
 8017ef8:	6833      	ldr	r3, [r6, #0]
 8017efa:	3301      	adds	r3, #1
 8017efc:	6033      	str	r3, [r6, #0]
 8017efe:	68a3      	ldr	r3, [r4, #8]
 8017f00:	3b01      	subs	r3, #1
 8017f02:	60a3      	str	r3, [r4, #8]
 8017f04:	e7d9      	b.n	8017eba <_scanf_i+0xda>
 8017f06:	f1bb 0f02 	cmp.w	fp, #2
 8017f0a:	d1ae      	bne.n	8017e6a <_scanf_i+0x8a>
 8017f0c:	6822      	ldr	r2, [r4, #0]
 8017f0e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8017f12:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017f16:	d1bf      	bne.n	8017e98 <_scanf_i+0xb8>
 8017f18:	2310      	movs	r3, #16
 8017f1a:	6063      	str	r3, [r4, #4]
 8017f1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017f20:	e7a2      	b.n	8017e68 <_scanf_i+0x88>
 8017f22:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8017f26:	6022      	str	r2, [r4, #0]
 8017f28:	780b      	ldrb	r3, [r1, #0]
 8017f2a:	f805 3b01 	strb.w	r3, [r5], #1
 8017f2e:	e7de      	b.n	8017eee <_scanf_i+0x10e>
 8017f30:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017f34:	4631      	mov	r1, r6
 8017f36:	4650      	mov	r0, sl
 8017f38:	4798      	blx	r3
 8017f3a:	2800      	cmp	r0, #0
 8017f3c:	d0df      	beq.n	8017efe <_scanf_i+0x11e>
 8017f3e:	6823      	ldr	r3, [r4, #0]
 8017f40:	05d9      	lsls	r1, r3, #23
 8017f42:	d50d      	bpl.n	8017f60 <_scanf_i+0x180>
 8017f44:	42bd      	cmp	r5, r7
 8017f46:	d909      	bls.n	8017f5c <_scanf_i+0x17c>
 8017f48:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017f4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017f50:	4632      	mov	r2, r6
 8017f52:	4650      	mov	r0, sl
 8017f54:	4798      	blx	r3
 8017f56:	f105 39ff 	add.w	r9, r5, #4294967295
 8017f5a:	464d      	mov	r5, r9
 8017f5c:	42bd      	cmp	r5, r7
 8017f5e:	d028      	beq.n	8017fb2 <_scanf_i+0x1d2>
 8017f60:	6822      	ldr	r2, [r4, #0]
 8017f62:	f012 0210 	ands.w	r2, r2, #16
 8017f66:	d113      	bne.n	8017f90 <_scanf_i+0x1b0>
 8017f68:	702a      	strb	r2, [r5, #0]
 8017f6a:	6863      	ldr	r3, [r4, #4]
 8017f6c:	9e01      	ldr	r6, [sp, #4]
 8017f6e:	4639      	mov	r1, r7
 8017f70:	4650      	mov	r0, sl
 8017f72:	47b0      	blx	r6
 8017f74:	f8d8 3000 	ldr.w	r3, [r8]
 8017f78:	6821      	ldr	r1, [r4, #0]
 8017f7a:	1d1a      	adds	r2, r3, #4
 8017f7c:	f8c8 2000 	str.w	r2, [r8]
 8017f80:	f011 0f20 	tst.w	r1, #32
 8017f84:	681b      	ldr	r3, [r3, #0]
 8017f86:	d00f      	beq.n	8017fa8 <_scanf_i+0x1c8>
 8017f88:	6018      	str	r0, [r3, #0]
 8017f8a:	68e3      	ldr	r3, [r4, #12]
 8017f8c:	3301      	adds	r3, #1
 8017f8e:	60e3      	str	r3, [r4, #12]
 8017f90:	6923      	ldr	r3, [r4, #16]
 8017f92:	1bed      	subs	r5, r5, r7
 8017f94:	445d      	add	r5, fp
 8017f96:	442b      	add	r3, r5
 8017f98:	6123      	str	r3, [r4, #16]
 8017f9a:	2000      	movs	r0, #0
 8017f9c:	b007      	add	sp, #28
 8017f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fa2:	f04f 0b00 	mov.w	fp, #0
 8017fa6:	e7ca      	b.n	8017f3e <_scanf_i+0x15e>
 8017fa8:	07ca      	lsls	r2, r1, #31
 8017faa:	bf4c      	ite	mi
 8017fac:	8018      	strhmi	r0, [r3, #0]
 8017fae:	6018      	strpl	r0, [r3, #0]
 8017fb0:	e7eb      	b.n	8017f8a <_scanf_i+0x1aa>
 8017fb2:	2001      	movs	r0, #1
 8017fb4:	e7f2      	b.n	8017f9c <_scanf_i+0x1bc>
 8017fb6:	bf00      	nop
 8017fb8:	08018524 	.word	0x08018524
 8017fbc:	08018351 	.word	0x08018351
 8017fc0:	08018269 	.word	0x08018269
 8017fc4:	08018637 	.word	0x08018637

08017fc8 <__sccl>:
 8017fc8:	b570      	push	{r4, r5, r6, lr}
 8017fca:	780b      	ldrb	r3, [r1, #0]
 8017fcc:	4604      	mov	r4, r0
 8017fce:	2b5e      	cmp	r3, #94	; 0x5e
 8017fd0:	bf0b      	itete	eq
 8017fd2:	784b      	ldrbeq	r3, [r1, #1]
 8017fd4:	1c4a      	addne	r2, r1, #1
 8017fd6:	1c8a      	addeq	r2, r1, #2
 8017fd8:	2100      	movne	r1, #0
 8017fda:	bf08      	it	eq
 8017fdc:	2101      	moveq	r1, #1
 8017fde:	3801      	subs	r0, #1
 8017fe0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8017fe4:	f800 1f01 	strb.w	r1, [r0, #1]!
 8017fe8:	42a8      	cmp	r0, r5
 8017fea:	d1fb      	bne.n	8017fe4 <__sccl+0x1c>
 8017fec:	b90b      	cbnz	r3, 8017ff2 <__sccl+0x2a>
 8017fee:	1e50      	subs	r0, r2, #1
 8017ff0:	bd70      	pop	{r4, r5, r6, pc}
 8017ff2:	f081 0101 	eor.w	r1, r1, #1
 8017ff6:	54e1      	strb	r1, [r4, r3]
 8017ff8:	4610      	mov	r0, r2
 8017ffa:	4602      	mov	r2, r0
 8017ffc:	f812 5b01 	ldrb.w	r5, [r2], #1
 8018000:	2d2d      	cmp	r5, #45	; 0x2d
 8018002:	d005      	beq.n	8018010 <__sccl+0x48>
 8018004:	2d5d      	cmp	r5, #93	; 0x5d
 8018006:	d016      	beq.n	8018036 <__sccl+0x6e>
 8018008:	2d00      	cmp	r5, #0
 801800a:	d0f1      	beq.n	8017ff0 <__sccl+0x28>
 801800c:	462b      	mov	r3, r5
 801800e:	e7f2      	b.n	8017ff6 <__sccl+0x2e>
 8018010:	7846      	ldrb	r6, [r0, #1]
 8018012:	2e5d      	cmp	r6, #93	; 0x5d
 8018014:	d0fa      	beq.n	801800c <__sccl+0x44>
 8018016:	42b3      	cmp	r3, r6
 8018018:	dcf8      	bgt.n	801800c <__sccl+0x44>
 801801a:	3002      	adds	r0, #2
 801801c:	461a      	mov	r2, r3
 801801e:	3201      	adds	r2, #1
 8018020:	4296      	cmp	r6, r2
 8018022:	54a1      	strb	r1, [r4, r2]
 8018024:	dcfb      	bgt.n	801801e <__sccl+0x56>
 8018026:	1af2      	subs	r2, r6, r3
 8018028:	3a01      	subs	r2, #1
 801802a:	1c5d      	adds	r5, r3, #1
 801802c:	42b3      	cmp	r3, r6
 801802e:	bfa8      	it	ge
 8018030:	2200      	movge	r2, #0
 8018032:	18ab      	adds	r3, r5, r2
 8018034:	e7e1      	b.n	8017ffa <__sccl+0x32>
 8018036:	4610      	mov	r0, r2
 8018038:	e7da      	b.n	8017ff0 <__sccl+0x28>

0801803a <__submore>:
 801803a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801803e:	460c      	mov	r4, r1
 8018040:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018042:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018046:	4299      	cmp	r1, r3
 8018048:	d11d      	bne.n	8018086 <__submore+0x4c>
 801804a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801804e:	f7ff f927 	bl	80172a0 <_malloc_r>
 8018052:	b918      	cbnz	r0, 801805c <__submore+0x22>
 8018054:	f04f 30ff 	mov.w	r0, #4294967295
 8018058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801805c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018060:	63a3      	str	r3, [r4, #56]	; 0x38
 8018062:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8018066:	6360      	str	r0, [r4, #52]	; 0x34
 8018068:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801806c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8018070:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8018074:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018078:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801807c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8018080:	6020      	str	r0, [r4, #0]
 8018082:	2000      	movs	r0, #0
 8018084:	e7e8      	b.n	8018058 <__submore+0x1e>
 8018086:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8018088:	0077      	lsls	r7, r6, #1
 801808a:	463a      	mov	r2, r7
 801808c:	f000 f83a 	bl	8018104 <_realloc_r>
 8018090:	4605      	mov	r5, r0
 8018092:	2800      	cmp	r0, #0
 8018094:	d0de      	beq.n	8018054 <__submore+0x1a>
 8018096:	eb00 0806 	add.w	r8, r0, r6
 801809a:	4601      	mov	r1, r0
 801809c:	4632      	mov	r2, r6
 801809e:	4640      	mov	r0, r8
 80180a0:	f7ff f884 	bl	80171ac <memcpy>
 80180a4:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80180a8:	f8c4 8000 	str.w	r8, [r4]
 80180ac:	e7e9      	b.n	8018082 <__submore+0x48>

080180ae <memmove>:
 80180ae:	4288      	cmp	r0, r1
 80180b0:	b510      	push	{r4, lr}
 80180b2:	eb01 0402 	add.w	r4, r1, r2
 80180b6:	d902      	bls.n	80180be <memmove+0x10>
 80180b8:	4284      	cmp	r4, r0
 80180ba:	4623      	mov	r3, r4
 80180bc:	d807      	bhi.n	80180ce <memmove+0x20>
 80180be:	1e43      	subs	r3, r0, #1
 80180c0:	42a1      	cmp	r1, r4
 80180c2:	d008      	beq.n	80180d6 <memmove+0x28>
 80180c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80180c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80180cc:	e7f8      	b.n	80180c0 <memmove+0x12>
 80180ce:	4402      	add	r2, r0
 80180d0:	4601      	mov	r1, r0
 80180d2:	428a      	cmp	r2, r1
 80180d4:	d100      	bne.n	80180d8 <memmove+0x2a>
 80180d6:	bd10      	pop	{r4, pc}
 80180d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80180dc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80180e0:	e7f7      	b.n	80180d2 <memmove+0x24>
	...

080180e4 <_sbrk_r>:
 80180e4:	b538      	push	{r3, r4, r5, lr}
 80180e6:	4d06      	ldr	r5, [pc, #24]	; (8018100 <_sbrk_r+0x1c>)
 80180e8:	2300      	movs	r3, #0
 80180ea:	4604      	mov	r4, r0
 80180ec:	4608      	mov	r0, r1
 80180ee:	602b      	str	r3, [r5, #0]
 80180f0:	f7eb fb6e 	bl	80037d0 <_sbrk>
 80180f4:	1c43      	adds	r3, r0, #1
 80180f6:	d102      	bne.n	80180fe <_sbrk_r+0x1a>
 80180f8:	682b      	ldr	r3, [r5, #0]
 80180fa:	b103      	cbz	r3, 80180fe <_sbrk_r+0x1a>
 80180fc:	6023      	str	r3, [r4, #0]
 80180fe:	bd38      	pop	{r3, r4, r5, pc}
 8018100:	24003334 	.word	0x24003334

08018104 <_realloc_r>:
 8018104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018108:	4680      	mov	r8, r0
 801810a:	4614      	mov	r4, r2
 801810c:	460e      	mov	r6, r1
 801810e:	b921      	cbnz	r1, 801811a <_realloc_r+0x16>
 8018110:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018114:	4611      	mov	r1, r2
 8018116:	f7ff b8c3 	b.w	80172a0 <_malloc_r>
 801811a:	b92a      	cbnz	r2, 8018128 <_realloc_r+0x24>
 801811c:	f7ff f854 	bl	80171c8 <_free_r>
 8018120:	4625      	mov	r5, r4
 8018122:	4628      	mov	r0, r5
 8018124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018128:	f000 f914 	bl	8018354 <_malloc_usable_size_r>
 801812c:	4284      	cmp	r4, r0
 801812e:	4607      	mov	r7, r0
 8018130:	d802      	bhi.n	8018138 <_realloc_r+0x34>
 8018132:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018136:	d812      	bhi.n	801815e <_realloc_r+0x5a>
 8018138:	4621      	mov	r1, r4
 801813a:	4640      	mov	r0, r8
 801813c:	f7ff f8b0 	bl	80172a0 <_malloc_r>
 8018140:	4605      	mov	r5, r0
 8018142:	2800      	cmp	r0, #0
 8018144:	d0ed      	beq.n	8018122 <_realloc_r+0x1e>
 8018146:	42bc      	cmp	r4, r7
 8018148:	4622      	mov	r2, r4
 801814a:	4631      	mov	r1, r6
 801814c:	bf28      	it	cs
 801814e:	463a      	movcs	r2, r7
 8018150:	f7ff f82c 	bl	80171ac <memcpy>
 8018154:	4631      	mov	r1, r6
 8018156:	4640      	mov	r0, r8
 8018158:	f7ff f836 	bl	80171c8 <_free_r>
 801815c:	e7e1      	b.n	8018122 <_realloc_r+0x1e>
 801815e:	4635      	mov	r5, r6
 8018160:	e7df      	b.n	8018122 <_realloc_r+0x1e>
	...

08018164 <_strtol_l.constprop.0>:
 8018164:	2b01      	cmp	r3, #1
 8018166:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801816a:	d001      	beq.n	8018170 <_strtol_l.constprop.0+0xc>
 801816c:	2b24      	cmp	r3, #36	; 0x24
 801816e:	d906      	bls.n	801817e <_strtol_l.constprop.0+0x1a>
 8018170:	f7fe ffe8 	bl	8017144 <__errno>
 8018174:	2316      	movs	r3, #22
 8018176:	6003      	str	r3, [r0, #0]
 8018178:	2000      	movs	r0, #0
 801817a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801817e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8018264 <_strtol_l.constprop.0+0x100>
 8018182:	460d      	mov	r5, r1
 8018184:	462e      	mov	r6, r5
 8018186:	f815 4b01 	ldrb.w	r4, [r5], #1
 801818a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801818e:	f017 0708 	ands.w	r7, r7, #8
 8018192:	d1f7      	bne.n	8018184 <_strtol_l.constprop.0+0x20>
 8018194:	2c2d      	cmp	r4, #45	; 0x2d
 8018196:	d132      	bne.n	80181fe <_strtol_l.constprop.0+0x9a>
 8018198:	782c      	ldrb	r4, [r5, #0]
 801819a:	2701      	movs	r7, #1
 801819c:	1cb5      	adds	r5, r6, #2
 801819e:	2b00      	cmp	r3, #0
 80181a0:	d05b      	beq.n	801825a <_strtol_l.constprop.0+0xf6>
 80181a2:	2b10      	cmp	r3, #16
 80181a4:	d109      	bne.n	80181ba <_strtol_l.constprop.0+0x56>
 80181a6:	2c30      	cmp	r4, #48	; 0x30
 80181a8:	d107      	bne.n	80181ba <_strtol_l.constprop.0+0x56>
 80181aa:	782c      	ldrb	r4, [r5, #0]
 80181ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80181b0:	2c58      	cmp	r4, #88	; 0x58
 80181b2:	d14d      	bne.n	8018250 <_strtol_l.constprop.0+0xec>
 80181b4:	786c      	ldrb	r4, [r5, #1]
 80181b6:	2310      	movs	r3, #16
 80181b8:	3502      	adds	r5, #2
 80181ba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80181be:	f108 38ff 	add.w	r8, r8, #4294967295
 80181c2:	f04f 0e00 	mov.w	lr, #0
 80181c6:	fbb8 f9f3 	udiv	r9, r8, r3
 80181ca:	4676      	mov	r6, lr
 80181cc:	fb03 8a19 	mls	sl, r3, r9, r8
 80181d0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80181d4:	f1bc 0f09 	cmp.w	ip, #9
 80181d8:	d816      	bhi.n	8018208 <_strtol_l.constprop.0+0xa4>
 80181da:	4664      	mov	r4, ip
 80181dc:	42a3      	cmp	r3, r4
 80181de:	dd24      	ble.n	801822a <_strtol_l.constprop.0+0xc6>
 80181e0:	f1be 3fff 	cmp.w	lr, #4294967295
 80181e4:	d008      	beq.n	80181f8 <_strtol_l.constprop.0+0x94>
 80181e6:	45b1      	cmp	r9, r6
 80181e8:	d31c      	bcc.n	8018224 <_strtol_l.constprop.0+0xc0>
 80181ea:	d101      	bne.n	80181f0 <_strtol_l.constprop.0+0x8c>
 80181ec:	45a2      	cmp	sl, r4
 80181ee:	db19      	blt.n	8018224 <_strtol_l.constprop.0+0xc0>
 80181f0:	fb06 4603 	mla	r6, r6, r3, r4
 80181f4:	f04f 0e01 	mov.w	lr, #1
 80181f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80181fc:	e7e8      	b.n	80181d0 <_strtol_l.constprop.0+0x6c>
 80181fe:	2c2b      	cmp	r4, #43	; 0x2b
 8018200:	bf04      	itt	eq
 8018202:	782c      	ldrbeq	r4, [r5, #0]
 8018204:	1cb5      	addeq	r5, r6, #2
 8018206:	e7ca      	b.n	801819e <_strtol_l.constprop.0+0x3a>
 8018208:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801820c:	f1bc 0f19 	cmp.w	ip, #25
 8018210:	d801      	bhi.n	8018216 <_strtol_l.constprop.0+0xb2>
 8018212:	3c37      	subs	r4, #55	; 0x37
 8018214:	e7e2      	b.n	80181dc <_strtol_l.constprop.0+0x78>
 8018216:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801821a:	f1bc 0f19 	cmp.w	ip, #25
 801821e:	d804      	bhi.n	801822a <_strtol_l.constprop.0+0xc6>
 8018220:	3c57      	subs	r4, #87	; 0x57
 8018222:	e7db      	b.n	80181dc <_strtol_l.constprop.0+0x78>
 8018224:	f04f 3eff 	mov.w	lr, #4294967295
 8018228:	e7e6      	b.n	80181f8 <_strtol_l.constprop.0+0x94>
 801822a:	f1be 3fff 	cmp.w	lr, #4294967295
 801822e:	d105      	bne.n	801823c <_strtol_l.constprop.0+0xd8>
 8018230:	2322      	movs	r3, #34	; 0x22
 8018232:	6003      	str	r3, [r0, #0]
 8018234:	4646      	mov	r6, r8
 8018236:	b942      	cbnz	r2, 801824a <_strtol_l.constprop.0+0xe6>
 8018238:	4630      	mov	r0, r6
 801823a:	e79e      	b.n	801817a <_strtol_l.constprop.0+0x16>
 801823c:	b107      	cbz	r7, 8018240 <_strtol_l.constprop.0+0xdc>
 801823e:	4276      	negs	r6, r6
 8018240:	2a00      	cmp	r2, #0
 8018242:	d0f9      	beq.n	8018238 <_strtol_l.constprop.0+0xd4>
 8018244:	f1be 0f00 	cmp.w	lr, #0
 8018248:	d000      	beq.n	801824c <_strtol_l.constprop.0+0xe8>
 801824a:	1e69      	subs	r1, r5, #1
 801824c:	6011      	str	r1, [r2, #0]
 801824e:	e7f3      	b.n	8018238 <_strtol_l.constprop.0+0xd4>
 8018250:	2430      	movs	r4, #48	; 0x30
 8018252:	2b00      	cmp	r3, #0
 8018254:	d1b1      	bne.n	80181ba <_strtol_l.constprop.0+0x56>
 8018256:	2308      	movs	r3, #8
 8018258:	e7af      	b.n	80181ba <_strtol_l.constprop.0+0x56>
 801825a:	2c30      	cmp	r4, #48	; 0x30
 801825c:	d0a5      	beq.n	80181aa <_strtol_l.constprop.0+0x46>
 801825e:	230a      	movs	r3, #10
 8018260:	e7ab      	b.n	80181ba <_strtol_l.constprop.0+0x56>
 8018262:	bf00      	nop
 8018264:	08018643 	.word	0x08018643

08018268 <_strtol_r>:
 8018268:	f7ff bf7c 	b.w	8018164 <_strtol_l.constprop.0>

0801826c <_strtoul_l.constprop.0>:
 801826c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018270:	4f36      	ldr	r7, [pc, #216]	; (801834c <_strtoul_l.constprop.0+0xe0>)
 8018272:	4686      	mov	lr, r0
 8018274:	460d      	mov	r5, r1
 8018276:	4628      	mov	r0, r5
 8018278:	f815 4b01 	ldrb.w	r4, [r5], #1
 801827c:	5d3e      	ldrb	r6, [r7, r4]
 801827e:	f016 0608 	ands.w	r6, r6, #8
 8018282:	d1f8      	bne.n	8018276 <_strtoul_l.constprop.0+0xa>
 8018284:	2c2d      	cmp	r4, #45	; 0x2d
 8018286:	d130      	bne.n	80182ea <_strtoul_l.constprop.0+0x7e>
 8018288:	782c      	ldrb	r4, [r5, #0]
 801828a:	2601      	movs	r6, #1
 801828c:	1c85      	adds	r5, r0, #2
 801828e:	2b00      	cmp	r3, #0
 8018290:	d057      	beq.n	8018342 <_strtoul_l.constprop.0+0xd6>
 8018292:	2b10      	cmp	r3, #16
 8018294:	d109      	bne.n	80182aa <_strtoul_l.constprop.0+0x3e>
 8018296:	2c30      	cmp	r4, #48	; 0x30
 8018298:	d107      	bne.n	80182aa <_strtoul_l.constprop.0+0x3e>
 801829a:	7828      	ldrb	r0, [r5, #0]
 801829c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80182a0:	2858      	cmp	r0, #88	; 0x58
 80182a2:	d149      	bne.n	8018338 <_strtoul_l.constprop.0+0xcc>
 80182a4:	786c      	ldrb	r4, [r5, #1]
 80182a6:	2310      	movs	r3, #16
 80182a8:	3502      	adds	r5, #2
 80182aa:	f04f 38ff 	mov.w	r8, #4294967295
 80182ae:	2700      	movs	r7, #0
 80182b0:	fbb8 f8f3 	udiv	r8, r8, r3
 80182b4:	fb03 f908 	mul.w	r9, r3, r8
 80182b8:	ea6f 0909 	mvn.w	r9, r9
 80182bc:	4638      	mov	r0, r7
 80182be:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80182c2:	f1bc 0f09 	cmp.w	ip, #9
 80182c6:	d815      	bhi.n	80182f4 <_strtoul_l.constprop.0+0x88>
 80182c8:	4664      	mov	r4, ip
 80182ca:	42a3      	cmp	r3, r4
 80182cc:	dd23      	ble.n	8018316 <_strtoul_l.constprop.0+0xaa>
 80182ce:	f1b7 3fff 	cmp.w	r7, #4294967295
 80182d2:	d007      	beq.n	80182e4 <_strtoul_l.constprop.0+0x78>
 80182d4:	4580      	cmp	r8, r0
 80182d6:	d31b      	bcc.n	8018310 <_strtoul_l.constprop.0+0xa4>
 80182d8:	d101      	bne.n	80182de <_strtoul_l.constprop.0+0x72>
 80182da:	45a1      	cmp	r9, r4
 80182dc:	db18      	blt.n	8018310 <_strtoul_l.constprop.0+0xa4>
 80182de:	fb00 4003 	mla	r0, r0, r3, r4
 80182e2:	2701      	movs	r7, #1
 80182e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80182e8:	e7e9      	b.n	80182be <_strtoul_l.constprop.0+0x52>
 80182ea:	2c2b      	cmp	r4, #43	; 0x2b
 80182ec:	bf04      	itt	eq
 80182ee:	782c      	ldrbeq	r4, [r5, #0]
 80182f0:	1c85      	addeq	r5, r0, #2
 80182f2:	e7cc      	b.n	801828e <_strtoul_l.constprop.0+0x22>
 80182f4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80182f8:	f1bc 0f19 	cmp.w	ip, #25
 80182fc:	d801      	bhi.n	8018302 <_strtoul_l.constprop.0+0x96>
 80182fe:	3c37      	subs	r4, #55	; 0x37
 8018300:	e7e3      	b.n	80182ca <_strtoul_l.constprop.0+0x5e>
 8018302:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8018306:	f1bc 0f19 	cmp.w	ip, #25
 801830a:	d804      	bhi.n	8018316 <_strtoul_l.constprop.0+0xaa>
 801830c:	3c57      	subs	r4, #87	; 0x57
 801830e:	e7dc      	b.n	80182ca <_strtoul_l.constprop.0+0x5e>
 8018310:	f04f 37ff 	mov.w	r7, #4294967295
 8018314:	e7e6      	b.n	80182e4 <_strtoul_l.constprop.0+0x78>
 8018316:	1c7b      	adds	r3, r7, #1
 8018318:	d106      	bne.n	8018328 <_strtoul_l.constprop.0+0xbc>
 801831a:	2322      	movs	r3, #34	; 0x22
 801831c:	f8ce 3000 	str.w	r3, [lr]
 8018320:	4638      	mov	r0, r7
 8018322:	b932      	cbnz	r2, 8018332 <_strtoul_l.constprop.0+0xc6>
 8018324:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018328:	b106      	cbz	r6, 801832c <_strtoul_l.constprop.0+0xc0>
 801832a:	4240      	negs	r0, r0
 801832c:	2a00      	cmp	r2, #0
 801832e:	d0f9      	beq.n	8018324 <_strtoul_l.constprop.0+0xb8>
 8018330:	b107      	cbz	r7, 8018334 <_strtoul_l.constprop.0+0xc8>
 8018332:	1e69      	subs	r1, r5, #1
 8018334:	6011      	str	r1, [r2, #0]
 8018336:	e7f5      	b.n	8018324 <_strtoul_l.constprop.0+0xb8>
 8018338:	2430      	movs	r4, #48	; 0x30
 801833a:	2b00      	cmp	r3, #0
 801833c:	d1b5      	bne.n	80182aa <_strtoul_l.constprop.0+0x3e>
 801833e:	2308      	movs	r3, #8
 8018340:	e7b3      	b.n	80182aa <_strtoul_l.constprop.0+0x3e>
 8018342:	2c30      	cmp	r4, #48	; 0x30
 8018344:	d0a9      	beq.n	801829a <_strtoul_l.constprop.0+0x2e>
 8018346:	230a      	movs	r3, #10
 8018348:	e7af      	b.n	80182aa <_strtoul_l.constprop.0+0x3e>
 801834a:	bf00      	nop
 801834c:	08018643 	.word	0x08018643

08018350 <_strtoul_r>:
 8018350:	f7ff bf8c 	b.w	801826c <_strtoul_l.constprop.0>

08018354 <_malloc_usable_size_r>:
 8018354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018358:	1f18      	subs	r0, r3, #4
 801835a:	2b00      	cmp	r3, #0
 801835c:	bfbc      	itt	lt
 801835e:	580b      	ldrlt	r3, [r1, r0]
 8018360:	18c0      	addlt	r0, r0, r3
 8018362:	4770      	bx	lr

08018364 <_init>:
 8018364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018366:	bf00      	nop
 8018368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801836a:	bc08      	pop	{r3}
 801836c:	469e      	mov	lr, r3
 801836e:	4770      	bx	lr

08018370 <_fini>:
 8018370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018372:	bf00      	nop
 8018374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018376:	bc08      	pop	{r3}
 8018378:	469e      	mov	lr, r3
 801837a:	4770      	bx	lr
