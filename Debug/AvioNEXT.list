
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017ec8  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  08018198  08018198  00028198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018544  08018544  00028544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801854c  0801854c  0002854c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018550  08018550  00028550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000150  24000000  08018554  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000031a8  24000150  080186a4  00030150  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  240032f8  080186a4  000332f8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030150  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0003017e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003538a  00000000  00000000  000301c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000621e  00000000  00000000  0006554b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002ac8  00000000  00000000  0006b770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00002132  00000000  00000000  0006e238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003dffd  00000000  00000000  0007036a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003a892  00000000  00000000  000ae367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017d3e1  00000000  00000000  000e8bf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000c240  00000000  00000000  00265fdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  0027221c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000150 	.word	0x24000150
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08018180 	.word	0x08018180

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000154 	.word	0x24000154
 800030c:	08018180 	.word	0x08018180

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b970 	b.w	80006d8 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9e08      	ldr	r6, [sp, #32]
 8000416:	460d      	mov	r5, r1
 8000418:	4604      	mov	r4, r0
 800041a:	460f      	mov	r7, r1
 800041c:	2b00      	cmp	r3, #0
 800041e:	d14a      	bne.n	80004b6 <__udivmoddi4+0xa6>
 8000420:	428a      	cmp	r2, r1
 8000422:	4694      	mov	ip, r2
 8000424:	d965      	bls.n	80004f2 <__udivmoddi4+0xe2>
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	b143      	cbz	r3, 800043e <__udivmoddi4+0x2e>
 800042c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000430:	f1c3 0220 	rsb	r2, r3, #32
 8000434:	409f      	lsls	r7, r3
 8000436:	fa20 f202 	lsr.w	r2, r0, r2
 800043a:	4317      	orrs	r7, r2
 800043c:	409c      	lsls	r4, r3
 800043e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000442:	fa1f f58c 	uxth.w	r5, ip
 8000446:	fbb7 f1fe 	udiv	r1, r7, lr
 800044a:	0c22      	lsrs	r2, r4, #16
 800044c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000450:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000454:	fb01 f005 	mul.w	r0, r1, r5
 8000458:	4290      	cmp	r0, r2
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x62>
 800045c:	eb1c 0202 	adds.w	r2, ip, r2
 8000460:	f101 37ff 	add.w	r7, r1, #4294967295
 8000464:	f080 811c 	bcs.w	80006a0 <__udivmoddi4+0x290>
 8000468:	4290      	cmp	r0, r2
 800046a:	f240 8119 	bls.w	80006a0 <__udivmoddi4+0x290>
 800046e:	3902      	subs	r1, #2
 8000470:	4462      	add	r2, ip
 8000472:	1a12      	subs	r2, r2, r0
 8000474:	b2a4      	uxth	r4, r4
 8000476:	fbb2 f0fe 	udiv	r0, r2, lr
 800047a:	fb0e 2210 	mls	r2, lr, r0, r2
 800047e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000482:	fb00 f505 	mul.w	r5, r0, r5
 8000486:	42a5      	cmp	r5, r4
 8000488:	d90a      	bls.n	80004a0 <__udivmoddi4+0x90>
 800048a:	eb1c 0404 	adds.w	r4, ip, r4
 800048e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000492:	f080 8107 	bcs.w	80006a4 <__udivmoddi4+0x294>
 8000496:	42a5      	cmp	r5, r4
 8000498:	f240 8104 	bls.w	80006a4 <__udivmoddi4+0x294>
 800049c:	4464      	add	r4, ip
 800049e:	3802      	subs	r0, #2
 80004a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80004a4:	1b64      	subs	r4, r4, r5
 80004a6:	2100      	movs	r1, #0
 80004a8:	b11e      	cbz	r6, 80004b2 <__udivmoddi4+0xa2>
 80004aa:	40dc      	lsrs	r4, r3
 80004ac:	2300      	movs	r3, #0
 80004ae:	e9c6 4300 	strd	r4, r3, [r6]
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0xbc>
 80004ba:	2e00      	cmp	r6, #0
 80004bc:	f000 80ed 	beq.w	800069a <__udivmoddi4+0x28a>
 80004c0:	2100      	movs	r1, #0
 80004c2:	e9c6 0500 	strd	r0, r5, [r6]
 80004c6:	4608      	mov	r0, r1
 80004c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004cc:	fab3 f183 	clz	r1, r3
 80004d0:	2900      	cmp	r1, #0
 80004d2:	d149      	bne.n	8000568 <__udivmoddi4+0x158>
 80004d4:	42ab      	cmp	r3, r5
 80004d6:	d302      	bcc.n	80004de <__udivmoddi4+0xce>
 80004d8:	4282      	cmp	r2, r0
 80004da:	f200 80f8 	bhi.w	80006ce <__udivmoddi4+0x2be>
 80004de:	1a84      	subs	r4, r0, r2
 80004e0:	eb65 0203 	sbc.w	r2, r5, r3
 80004e4:	2001      	movs	r0, #1
 80004e6:	4617      	mov	r7, r2
 80004e8:	2e00      	cmp	r6, #0
 80004ea:	d0e2      	beq.n	80004b2 <__udivmoddi4+0xa2>
 80004ec:	e9c6 4700 	strd	r4, r7, [r6]
 80004f0:	e7df      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004f2:	b902      	cbnz	r2, 80004f6 <__udivmoddi4+0xe6>
 80004f4:	deff      	udf	#255	; 0xff
 80004f6:	fab2 f382 	clz	r3, r2
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	f040 8090 	bne.w	8000620 <__udivmoddi4+0x210>
 8000500:	1a8a      	subs	r2, r1, r2
 8000502:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000506:	fa1f fe8c 	uxth.w	lr, ip
 800050a:	2101      	movs	r1, #1
 800050c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000510:	fb07 2015 	mls	r0, r7, r5, r2
 8000514:	0c22      	lsrs	r2, r4, #16
 8000516:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800051a:	fb0e f005 	mul.w	r0, lr, r5
 800051e:	4290      	cmp	r0, r2
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x124>
 8000522:	eb1c 0202 	adds.w	r2, ip, r2
 8000526:	f105 38ff 	add.w	r8, r5, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x122>
 800052c:	4290      	cmp	r0, r2
 800052e:	f200 80cb 	bhi.w	80006c8 <__udivmoddi4+0x2b8>
 8000532:	4645      	mov	r5, r8
 8000534:	1a12      	subs	r2, r2, r0
 8000536:	b2a4      	uxth	r4, r4
 8000538:	fbb2 f0f7 	udiv	r0, r2, r7
 800053c:	fb07 2210 	mls	r2, r7, r0, r2
 8000540:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000544:	fb0e fe00 	mul.w	lr, lr, r0
 8000548:	45a6      	cmp	lr, r4
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x14e>
 800054c:	eb1c 0404 	adds.w	r4, ip, r4
 8000550:	f100 32ff 	add.w	r2, r0, #4294967295
 8000554:	d202      	bcs.n	800055c <__udivmoddi4+0x14c>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f200 80bb 	bhi.w	80006d2 <__udivmoddi4+0x2c2>
 800055c:	4610      	mov	r0, r2
 800055e:	eba4 040e 	sub.w	r4, r4, lr
 8000562:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000566:	e79f      	b.n	80004a8 <__udivmoddi4+0x98>
 8000568:	f1c1 0720 	rsb	r7, r1, #32
 800056c:	408b      	lsls	r3, r1
 800056e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000572:	ea4c 0c03 	orr.w	ip, ip, r3
 8000576:	fa05 f401 	lsl.w	r4, r5, r1
 800057a:	fa20 f307 	lsr.w	r3, r0, r7
 800057e:	40fd      	lsrs	r5, r7
 8000580:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000584:	4323      	orrs	r3, r4
 8000586:	fbb5 f8f9 	udiv	r8, r5, r9
 800058a:	fa1f fe8c 	uxth.w	lr, ip
 800058e:	fb09 5518 	mls	r5, r9, r8, r5
 8000592:	0c1c      	lsrs	r4, r3, #16
 8000594:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000598:	fb08 f50e 	mul.w	r5, r8, lr
 800059c:	42a5      	cmp	r5, r4
 800059e:	fa02 f201 	lsl.w	r2, r2, r1
 80005a2:	fa00 f001 	lsl.w	r0, r0, r1
 80005a6:	d90b      	bls.n	80005c0 <__udivmoddi4+0x1b0>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80005b0:	f080 8088 	bcs.w	80006c4 <__udivmoddi4+0x2b4>
 80005b4:	42a5      	cmp	r5, r4
 80005b6:	f240 8085 	bls.w	80006c4 <__udivmoddi4+0x2b4>
 80005ba:	f1a8 0802 	sub.w	r8, r8, #2
 80005be:	4464      	add	r4, ip
 80005c0:	1b64      	subs	r4, r4, r5
 80005c2:	b29d      	uxth	r5, r3
 80005c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80005c8:	fb09 4413 	mls	r4, r9, r3, r4
 80005cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005d4:	45a6      	cmp	lr, r4
 80005d6:	d908      	bls.n	80005ea <__udivmoddi4+0x1da>
 80005d8:	eb1c 0404 	adds.w	r4, ip, r4
 80005dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80005e0:	d26c      	bcs.n	80006bc <__udivmoddi4+0x2ac>
 80005e2:	45a6      	cmp	lr, r4
 80005e4:	d96a      	bls.n	80006bc <__udivmoddi4+0x2ac>
 80005e6:	3b02      	subs	r3, #2
 80005e8:	4464      	add	r4, ip
 80005ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ee:	fba3 9502 	umull	r9, r5, r3, r2
 80005f2:	eba4 040e 	sub.w	r4, r4, lr
 80005f6:	42ac      	cmp	r4, r5
 80005f8:	46c8      	mov	r8, r9
 80005fa:	46ae      	mov	lr, r5
 80005fc:	d356      	bcc.n	80006ac <__udivmoddi4+0x29c>
 80005fe:	d053      	beq.n	80006a8 <__udivmoddi4+0x298>
 8000600:	b156      	cbz	r6, 8000618 <__udivmoddi4+0x208>
 8000602:	ebb0 0208 	subs.w	r2, r0, r8
 8000606:	eb64 040e 	sbc.w	r4, r4, lr
 800060a:	fa04 f707 	lsl.w	r7, r4, r7
 800060e:	40ca      	lsrs	r2, r1
 8000610:	40cc      	lsrs	r4, r1
 8000612:	4317      	orrs	r7, r2
 8000614:	e9c6 7400 	strd	r7, r4, [r6]
 8000618:	4618      	mov	r0, r3
 800061a:	2100      	movs	r1, #0
 800061c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000620:	f1c3 0120 	rsb	r1, r3, #32
 8000624:	fa02 fc03 	lsl.w	ip, r2, r3
 8000628:	fa20 f201 	lsr.w	r2, r0, r1
 800062c:	fa25 f101 	lsr.w	r1, r5, r1
 8000630:	409d      	lsls	r5, r3
 8000632:	432a      	orrs	r2, r5
 8000634:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000638:	fa1f fe8c 	uxth.w	lr, ip
 800063c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000640:	fb07 1510 	mls	r5, r7, r0, r1
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800064a:	fb00 f50e 	mul.w	r5, r0, lr
 800064e:	428d      	cmp	r5, r1
 8000650:	fa04 f403 	lsl.w	r4, r4, r3
 8000654:	d908      	bls.n	8000668 <__udivmoddi4+0x258>
 8000656:	eb1c 0101 	adds.w	r1, ip, r1
 800065a:	f100 38ff 	add.w	r8, r0, #4294967295
 800065e:	d22f      	bcs.n	80006c0 <__udivmoddi4+0x2b0>
 8000660:	428d      	cmp	r5, r1
 8000662:	d92d      	bls.n	80006c0 <__udivmoddi4+0x2b0>
 8000664:	3802      	subs	r0, #2
 8000666:	4461      	add	r1, ip
 8000668:	1b49      	subs	r1, r1, r5
 800066a:	b292      	uxth	r2, r2
 800066c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000670:	fb07 1115 	mls	r1, r7, r5, r1
 8000674:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000678:	fb05 f10e 	mul.w	r1, r5, lr
 800067c:	4291      	cmp	r1, r2
 800067e:	d908      	bls.n	8000692 <__udivmoddi4+0x282>
 8000680:	eb1c 0202 	adds.w	r2, ip, r2
 8000684:	f105 38ff 	add.w	r8, r5, #4294967295
 8000688:	d216      	bcs.n	80006b8 <__udivmoddi4+0x2a8>
 800068a:	4291      	cmp	r1, r2
 800068c:	d914      	bls.n	80006b8 <__udivmoddi4+0x2a8>
 800068e:	3d02      	subs	r5, #2
 8000690:	4462      	add	r2, ip
 8000692:	1a52      	subs	r2, r2, r1
 8000694:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000698:	e738      	b.n	800050c <__udivmoddi4+0xfc>
 800069a:	4631      	mov	r1, r6
 800069c:	4630      	mov	r0, r6
 800069e:	e708      	b.n	80004b2 <__udivmoddi4+0xa2>
 80006a0:	4639      	mov	r1, r7
 80006a2:	e6e6      	b.n	8000472 <__udivmoddi4+0x62>
 80006a4:	4610      	mov	r0, r2
 80006a6:	e6fb      	b.n	80004a0 <__udivmoddi4+0x90>
 80006a8:	4548      	cmp	r0, r9
 80006aa:	d2a9      	bcs.n	8000600 <__udivmoddi4+0x1f0>
 80006ac:	ebb9 0802 	subs.w	r8, r9, r2
 80006b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80006b4:	3b01      	subs	r3, #1
 80006b6:	e7a3      	b.n	8000600 <__udivmoddi4+0x1f0>
 80006b8:	4645      	mov	r5, r8
 80006ba:	e7ea      	b.n	8000692 <__udivmoddi4+0x282>
 80006bc:	462b      	mov	r3, r5
 80006be:	e794      	b.n	80005ea <__udivmoddi4+0x1da>
 80006c0:	4640      	mov	r0, r8
 80006c2:	e7d1      	b.n	8000668 <__udivmoddi4+0x258>
 80006c4:	46d0      	mov	r8, sl
 80006c6:	e77b      	b.n	80005c0 <__udivmoddi4+0x1b0>
 80006c8:	3d02      	subs	r5, #2
 80006ca:	4462      	add	r2, ip
 80006cc:	e732      	b.n	8000534 <__udivmoddi4+0x124>
 80006ce:	4608      	mov	r0, r1
 80006d0:	e70a      	b.n	80004e8 <__udivmoddi4+0xd8>
 80006d2:	4464      	add	r4, ip
 80006d4:	3802      	subs	r0, #2
 80006d6:	e742      	b.n	800055e <__udivmoddi4+0x14e>

080006d8 <__aeabi_idiv0>:
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop

080006dc <HG2_Write_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);

	return reg_value;
}

void HG2_Write_Register(uint8_t addr, uint8_t data){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	460a      	mov	r2, r1
 80006e6:	71fb      	strb	r3, [r7, #7]
 80006e8:	4613      	mov	r3, r2
 80006ea:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f2:	480c      	ldr	r0, [pc, #48]	; (8000724 <HG2_Write_Register+0x48>)
 80006f4:	f007 fc08 	bl	8007f08 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80006f8:	1df9      	adds	r1, r7, #7
 80006fa:	2364      	movs	r3, #100	; 0x64
 80006fc:	2201      	movs	r2, #1
 80006fe:	480a      	ldr	r0, [pc, #40]	; (8000728 <HG2_Write_Register+0x4c>)
 8000700:	f00e f984 	bl	800ea0c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000704:	1db9      	adds	r1, r7, #6
 8000706:	2364      	movs	r3, #100	; 0x64
 8000708:	2201      	movs	r2, #1
 800070a:	4807      	ldr	r0, [pc, #28]	; (8000728 <HG2_Write_Register+0x4c>)
 800070c:	f00e f97e 	bl	800ea0c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000710:	2201      	movs	r2, #1
 8000712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000716:	4803      	ldr	r0, [pc, #12]	; (8000724 <HG2_Write_Register+0x48>)
 8000718:	f007 fbf6 	bl	8007f08 <HAL_GPIO_WritePin>

}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	58020c00 	.word	0x58020c00
 8000728:	24000fc0 	.word	0x24000fc0

0800072c <LG2_Read_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
}



uint8_t LG2_Read_Register(uint8_t addr){
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	addr |= (1<<7);
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800073c:	b2db      	uxtb	r3, r3
 800073e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <LG2_Read_Register+0x50>)
 8000748:	f007 fbde 	bl	8007f08 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 800074c:	1df9      	adds	r1, r7, #7
 800074e:	2364      	movs	r3, #100	; 0x64
 8000750:	2201      	movs	r2, #1
 8000752:	480b      	ldr	r0, [pc, #44]	; (8000780 <LG2_Read_Register+0x54>)
 8000754:	f00e f95a 	bl	800ea0c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &reg_value, 1, 100);
 8000758:	f107 010f 	add.w	r1, r7, #15
 800075c:	2364      	movs	r3, #100	; 0x64
 800075e:	2201      	movs	r2, #1
 8000760:	4807      	ldr	r0, [pc, #28]	; (8000780 <LG2_Read_Register+0x54>)
 8000762:	f00e fb4f 	bl	800ee04 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <LG2_Read_Register+0x50>)
 800076e:	f007 fbcb 	bl	8007f08 <HAL_GPIO_WritePin>

	return reg_value;
 8000772:	7bfb      	ldrb	r3, [r7, #15]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	58020c00 	.word	0x58020c00
 8000780:	24000fc0 	.word	0x24000fc0

08000784 <LG2_Write_Register>:

void LG2_Write_Register(uint8_t addr, uint8_t data){
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	460a      	mov	r2, r1
 800078e:	71fb      	strb	r3, [r7, #7]
 8000790:	4613      	mov	r3, r2
 8000792:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079a:	480c      	ldr	r0, [pc, #48]	; (80007cc <LG2_Write_Register+0x48>)
 800079c:	f007 fbb4 	bl	8007f08 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80007a0:	1df9      	adds	r1, r7, #7
 80007a2:	2364      	movs	r3, #100	; 0x64
 80007a4:	2201      	movs	r2, #1
 80007a6:	480a      	ldr	r0, [pc, #40]	; (80007d0 <LG2_Write_Register+0x4c>)
 80007a8:	f00e f930 	bl	800ea0c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 80007ac:	1db9      	adds	r1, r7, #6
 80007ae:	2364      	movs	r3, #100	; 0x64
 80007b0:	2201      	movs	r2, #1
 80007b2:	4807      	ldr	r0, [pc, #28]	; (80007d0 <LG2_Write_Register+0x4c>)
 80007b4:	f00e f92a 	bl	800ea0c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 80007b8:	2201      	movs	r2, #1
 80007ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007be:	4803      	ldr	r0, [pc, #12]	; (80007cc <LG2_Write_Register+0x48>)
 80007c0:	f007 fba2 	bl	8007f08 <HAL_GPIO_WritePin>

}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	58020c00 	.word	0x58020c00
 80007d0:	24000fc0 	.word	0x24000fc0

080007d4 <LG2_Get_Gyro_X>:

float LG2_Get_Gyro_X(){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x22);
 80007da:	2022      	movs	r0, #34	; 0x22
 80007dc:	f7ff ffa6 	bl	800072c <LG2_Read_Register>
 80007e0:	4603      	mov	r3, r0
 80007e2:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x23);
 80007e4:	2023      	movs	r0, #35	; 0x23
 80007e6:	f7ff ffa1 	bl	800072c <LG2_Read_Register>
 80007ea:	4603      	mov	r3, r0
 80007ec:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80007ee:	79bb      	ldrb	r3, [r7, #6]
 80007f0:	021b      	lsls	r3, r3, #8
 80007f2:	b21a      	sxth	r2, r3
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	4313      	orrs	r3, r2
 80007fa:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 80007fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000800:	ee07 3a90 	vmov	s15, r3
 8000804:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000808:	eddf 6a08 	vldr	s13, [pc, #32]	; 800082c <LG2_Get_Gyro_X+0x58>
 800080c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000810:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000830 <LG2_Get_Gyro_X+0x5c>
 8000814:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000818:	edc7 7a00 	vstr	s15, [r7]
	return omega;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	ee07 3a90 	vmov	s15, r3
}
 8000822:	eeb0 0a67 	vmov.f32	s0, s15
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	46fffe00 	.word	0x46fffe00
 8000830:	437a0000 	.word	0x437a0000

08000834 <LG2_Get_Gyro_Y>:

float LG2_Get_Gyro_Y(){
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x24);
 800083a:	2024      	movs	r0, #36	; 0x24
 800083c:	f7ff ff76 	bl	800072c <LG2_Read_Register>
 8000840:	4603      	mov	r3, r0
 8000842:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x25);
 8000844:	2025      	movs	r0, #37	; 0x25
 8000846:	f7ff ff71 	bl	800072c <LG2_Read_Register>
 800084a:	4603      	mov	r3, r0
 800084c:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	b21a      	sxth	r2, r3
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	b21b      	sxth	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 800085c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000860:	ee07 3a90 	vmov	s15, r3
 8000864:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000868:	eddf 6a08 	vldr	s13, [pc, #32]	; 800088c <LG2_Get_Gyro_Y+0x58>
 800086c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000870:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000890 <LG2_Get_Gyro_Y+0x5c>
 8000874:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000878:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	ee07 3a90 	vmov	s15, r3
}
 8000882:	eeb0 0a67 	vmov.f32	s0, s15
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	46fffe00 	.word	0x46fffe00
 8000890:	437a0000 	.word	0x437a0000
 8000894:	00000000 	.word	0x00000000

08000898 <LG2_Get_Gyro_Z>:

float LG2_Get_Gyro_Z(){
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x26);
 800089e:	2026      	movs	r0, #38	; 0x26
 80008a0:	f7ff ff44 	bl	800072c <LG2_Read_Register>
 80008a4:	4603      	mov	r3, r0
 80008a6:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x27);
 80008a8:	2027      	movs	r0, #39	; 0x27
 80008aa:	f7ff ff3f 	bl	800072c <LG2_Read_Register>
 80008ae:	4603      	mov	r3, r0
 80008b0:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80008b2:	79bb      	ldrb	r3, [r7, #6]
 80008b4:	021b      	lsls	r3, r3, #8
 80008b6:	b21a      	sxth	r2, r3
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	b21b      	sxth	r3, r3
 80008bc:	4313      	orrs	r3, r2
 80008be:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767.0) * 250.0;
 80008c0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008c4:	ee07 3a90 	vmov	s15, r3
 80008c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008cc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80008d0:	ed9f 5b09 	vldr	d5, [pc, #36]	; 80008f8 <LG2_Get_Gyro_Z+0x60>
 80008d4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008d8:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000900 <LG2_Get_Gyro_Z+0x68>
 80008dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008e4:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	ee07 3a90 	vmov	s15, r3
}
 80008ee:	eeb0 0a67 	vmov.f32	s0, s15
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	00000000 	.word	0x00000000
 80008fc:	40dfffc0 	.word	0x40dfffc0
 8000900:	00000000 	.word	0x00000000
 8000904:	406f4000 	.word	0x406f4000

08000908 <setServo>:
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;


void setServo(int servoNum, float angle){
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal =(int)( 3000 + (4000 * (angle/180)));
 8000914:	ed97 7a00 	vldr	s14, [r7]
 8000918:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000988 <setServo+0x80>
 800091c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000920:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800098c <setServo+0x84>
 8000924:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000928:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000990 <setServo+0x88>
 800092c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000930:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000934:	ee17 3a90 	vmov	r3, s15
 8000938:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3b01      	subs	r3, #1
 800093e:	2b03      	cmp	r3, #3
 8000940:	d81a      	bhi.n	8000978 <setServo+0x70>
 8000942:	a201      	add	r2, pc, #4	; (adr r2, 8000948 <setServo+0x40>)
 8000944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000948:	08000959 	.word	0x08000959
 800094c:	08000961 	.word	0x08000961
 8000950:	08000969 	.word	0x08000969
 8000954:	08000971 	.word	0x08000971
		case 1:
			TIM4->CCR4 = timerVal;
 8000958:	4a0e      	ldr	r2, [pc, #56]	; (8000994 <setServo+0x8c>)
 800095a:	89fb      	ldrh	r3, [r7, #14]
 800095c:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 800095e:	e00c      	b.n	800097a <setServo+0x72>
		case 2:
			TIM4->CCR3 = timerVal;
 8000960:	4a0c      	ldr	r2, [pc, #48]	; (8000994 <setServo+0x8c>)
 8000962:	89fb      	ldrh	r3, [r7, #14]
 8000964:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 8000966:	e008      	b.n	800097a <setServo+0x72>
		case 3:
			TIM4->CCR2 = timerVal;
 8000968:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <setServo+0x8c>)
 800096a:	89fb      	ldrh	r3, [r7, #14]
 800096c:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 800096e:	e004      	b.n	800097a <setServo+0x72>
		case 4:
			TIM4->CCR1 = timerVal;
 8000970:	4a08      	ldr	r2, [pc, #32]	; (8000994 <setServo+0x8c>)
 8000972:	89fb      	ldrh	r3, [r7, #14]
 8000974:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8000976:	e000      	b.n	800097a <setServo+0x72>

		default:
			break;
 8000978:	bf00      	nop
	}
}
 800097a:	bf00      	nop
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	43340000 	.word	0x43340000
 800098c:	457a0000 	.word	0x457a0000
 8000990:	453b8000 	.word	0x453b8000
 8000994:	40000800 	.word	0x40000800

08000998 <setLEDs>:

void setLEDs(void) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b08e      	sub	sp, #56	; 0x38
 800099c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 800099e:	2300      	movs	r3, #0
 80009a0:	637b      	str	r3, [r7, #52]	; 0x34
 80009a2:	e181      	b.n	8000ca8 <setLEDs+0x310>
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 80009a4:	4aa1      	ldr	r2, [pc, #644]	; (8000c2c <setLEDs+0x294>)
 80009a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80009ac:	2b03      	cmp	r3, #3
 80009ae:	f200 8177 	bhi.w	8000ca0 <setLEDs+0x308>
 80009b2:	a201      	add	r2, pc, #4	; (adr r2, 80009b8 <setLEDs+0x20>)
 80009b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b8:	080009c9 	.word	0x080009c9
 80009bc:	08000a79 	.word	0x08000a79
 80009c0:	08000b29 	.word	0x08000b29
 80009c4:	08000bd9 	.word	0x08000bd9
		case 0:
			for (int j = 0; j < 3; j++) {
 80009c8:	2300      	movs	r3, #0
 80009ca:	633b      	str	r3, [r7, #48]	; 0x30
 80009cc:	e042      	b.n	8000a54 <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 80009ce:	2300      	movs	r3, #0
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009d2:	e039      	b.n	8000a48 <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80009d4:	4996      	ldr	r1, [pc, #600]	; (8000c30 <setLEDs+0x298>)
 80009d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009d8:	4613      	mov	r3, r2
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	4413      	add	r3, r2
 80009de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80009e0:	4413      	add	r3, r2
 80009e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009e6:	2180      	movs	r1, #128	; 0x80
 80009e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009ea:	fa41 f202 	asr.w	r2, r1, r2
 80009ee:	4013      	ands	r3, r2
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d013      	beq.n	8000a1c <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 80009f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009f6:	00da      	lsls	r2, r3, #3
 80009f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009fa:	18d1      	adds	r1, r2, r3
 80009fc:	4a8b      	ldr	r2, [pc, #556]	; (8000c2c <setLEDs+0x294>)
 80009fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	4413      	add	r3, r2
 8000a04:	685a      	ldr	r2, [r3, #4]
 8000a06:	4613      	mov	r3, r2
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	4413      	add	r3, r2
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	440b      	add	r3, r1
 8000a10:	3308      	adds	r3, #8
 8000a12:	4a88      	ldr	r2, [pc, #544]	; (8000c34 <setLEDs+0x29c>)
 8000a14:	213c      	movs	r1, #60	; 0x3c
 8000a16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a1a:	e012      	b.n	8000a42 <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a1e:	00da      	lsls	r2, r3, #3
 8000a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a22:	18d1      	adds	r1, r2, r3
 8000a24:	4a81      	ldr	r2, [pc, #516]	; (8000c2c <setLEDs+0x294>)
 8000a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a28:	00db      	lsls	r3, r3, #3
 8000a2a:	4413      	add	r3, r2
 8000a2c:	685a      	ldr	r2, [r3, #4]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	4413      	add	r3, r2
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	440b      	add	r3, r1
 8000a38:	3308      	adds	r3, #8
 8000a3a:	4a7e      	ldr	r2, [pc, #504]	; (8000c34 <setLEDs+0x29c>)
 8000a3c:	211e      	movs	r1, #30
 8000a3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a44:	3301      	adds	r3, #1
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4a:	2b07      	cmp	r3, #7
 8000a4c:	ddc2      	ble.n	80009d4 <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8000a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a50:	3301      	adds	r3, #1
 8000a52:	633b      	str	r3, [r7, #48]	; 0x30
 8000a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	ddb9      	ble.n	80009ce <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a5a:	2380      	movs	r3, #128	; 0x80
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a5e:	e007      	b.n	8000a70 <setLEDs+0xd8>
				LED_PWM_Data_0[i] = 0;
 8000a60:	4a74      	ldr	r2, [pc, #464]	; (8000c34 <setLEDs+0x29c>)
 8000a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a64:	2100      	movs	r1, #0
 8000a66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a72:	2bb1      	cmp	r3, #177	; 0xb1
 8000a74:	ddf4      	ble.n	8000a60 <setLEDs+0xc8>
			}
			break;
 8000a76:	e114      	b.n	8000ca2 <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a7c:	e042      	b.n	8000b04 <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
 8000a82:	e039      	b.n	8000af8 <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000a84:	496a      	ldr	r1, [pc, #424]	; (8000c30 <setLEDs+0x298>)
 8000a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a88:	4613      	mov	r3, r2
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	4413      	add	r3, r2
 8000a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a90:	4413      	add	r3, r2
 8000a92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a96:	2180      	movs	r1, #128	; 0x80
 8000a98:	6a3a      	ldr	r2, [r7, #32]
 8000a9a:	fa41 f202 	asr.w	r2, r1, r2
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d013      	beq.n	8000acc <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa6:	00da      	lsls	r2, r3, #3
 8000aa8:	6a3b      	ldr	r3, [r7, #32]
 8000aaa:	18d1      	adds	r1, r2, r3
 8000aac:	4a5f      	ldr	r2, [pc, #380]	; (8000c2c <setLEDs+0x294>)
 8000aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	4413      	add	r3, r2
 8000ab4:	685a      	ldr	r2, [r3, #4]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	4413      	add	r3, r2
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	440b      	add	r3, r1
 8000ac0:	3308      	adds	r3, #8
 8000ac2:	4a5d      	ldr	r2, [pc, #372]	; (8000c38 <setLEDs+0x2a0>)
 8000ac4:	213c      	movs	r1, #60	; 0x3c
 8000ac6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000aca:	e012      	b.n	8000af2 <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	00da      	lsls	r2, r3, #3
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	18d1      	adds	r1, r2, r3
 8000ad4:	4a55      	ldr	r2, [pc, #340]	; (8000c2c <setLEDs+0x294>)
 8000ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	4413      	add	r3, r2
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	4413      	add	r3, r2
 8000ae4:	00db      	lsls	r3, r3, #3
 8000ae6:	440b      	add	r3, r1
 8000ae8:	3308      	adds	r3, #8
 8000aea:	4a53      	ldr	r2, [pc, #332]	; (8000c38 <setLEDs+0x2a0>)
 8000aec:	211e      	movs	r1, #30
 8000aee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000af2:	6a3b      	ldr	r3, [r7, #32]
 8000af4:	3301      	adds	r3, #1
 8000af6:	623b      	str	r3, [r7, #32]
 8000af8:	6a3b      	ldr	r3, [r7, #32]
 8000afa:	2b07      	cmp	r3, #7
 8000afc:	ddc2      	ble.n	8000a84 <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 8000afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b00:	3301      	adds	r3, #1
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
 8000b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	ddb9      	ble.n	8000a7e <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000b0a:	2380      	movs	r3, #128	; 0x80
 8000b0c:	61fb      	str	r3, [r7, #28]
 8000b0e:	e007      	b.n	8000b20 <setLEDs+0x188>
				LED_PWM_Data_1[i] = 0;
 8000b10:	4a49      	ldr	r2, [pc, #292]	; (8000c38 <setLEDs+0x2a0>)
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	2100      	movs	r1, #0
 8000b16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	61fb      	str	r3, [r7, #28]
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	2bb1      	cmp	r3, #177	; 0xb1
 8000b24:	ddf4      	ble.n	8000b10 <setLEDs+0x178>
			}
			break;
 8000b26:	e0bc      	b.n	8000ca2 <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61bb      	str	r3, [r7, #24]
 8000b2c:	e042      	b.n	8000bb4 <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	e039      	b.n	8000ba8 <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000b34:	493e      	ldr	r1, [pc, #248]	; (8000c30 <setLEDs+0x298>)
 8000b36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b38:	4613      	mov	r3, r2
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	4413      	add	r3, r2
 8000b3e:	69ba      	ldr	r2, [r7, #24]
 8000b40:	4413      	add	r3, r2
 8000b42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b46:	2180      	movs	r1, #128	; 0x80
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	fa41 f202 	asr.w	r2, r1, r2
 8000b4e:	4013      	ands	r3, r2
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d013      	beq.n	8000b7c <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	00da      	lsls	r2, r3, #3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	18d1      	adds	r1, r2, r3
 8000b5c:	4a33      	ldr	r2, [pc, #204]	; (8000c2c <setLEDs+0x294>)
 8000b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	4413      	add	r3, r2
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	4613      	mov	r3, r2
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	4413      	add	r3, r2
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	440b      	add	r3, r1
 8000b70:	3308      	adds	r3, #8
 8000b72:	4a32      	ldr	r2, [pc, #200]	; (8000c3c <setLEDs+0x2a4>)
 8000b74:	213c      	movs	r1, #60	; 0x3c
 8000b76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000b7a:	e012      	b.n	8000ba2 <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	00da      	lsls	r2, r3, #3
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	18d1      	adds	r1, r2, r3
 8000b84:	4a29      	ldr	r2, [pc, #164]	; (8000c2c <setLEDs+0x294>)
 8000b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	4413      	add	r3, r2
 8000b8c:	685a      	ldr	r2, [r3, #4]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	4413      	add	r3, r2
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	440b      	add	r3, r1
 8000b98:	3308      	adds	r3, #8
 8000b9a:	4a28      	ldr	r2, [pc, #160]	; (8000c3c <setLEDs+0x2a4>)
 8000b9c:	211e      	movs	r1, #30
 8000b9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	2b07      	cmp	r3, #7
 8000bac:	ddc2      	ble.n	8000b34 <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	61bb      	str	r3, [r7, #24]
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	ddb9      	ble.n	8000b2e <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000bba:	2338      	movs	r3, #56	; 0x38
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	e007      	b.n	8000bd0 <setLEDs+0x238>
				LED_PWM_Data_2[i] = 0;
 8000bc0:	4a1e      	ldr	r2, [pc, #120]	; (8000c3c <setLEDs+0x2a4>)
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	2b69      	cmp	r3, #105	; 0x69
 8000bd4:	ddf4      	ble.n	8000bc0 <setLEDs+0x228>
			}
			break;
 8000bd6:	e064      	b.n	8000ca2 <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	e04e      	b.n	8000c7c <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	e045      	b.n	8000c70 <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000be4:	4912      	ldr	r1, [pc, #72]	; (8000c30 <setLEDs+0x298>)
 8000be6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000be8:	4613      	mov	r3, r2
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	4413      	add	r3, r2
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bf6:	2180      	movs	r1, #128	; 0x80
 8000bf8:	68ba      	ldr	r2, [r7, #8]
 8000bfa:	fa41 f202 	asr.w	r2, r1, r2
 8000bfe:	4013      	ands	r3, r2
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d01f      	beq.n	8000c44 <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	00da      	lsls	r2, r3, #3
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	18d1      	adds	r1, r2, r3
 8000c0c:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <setLEDs+0x294>)
 8000c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	4413      	add	r3, r2
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	4613      	mov	r3, r2
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	4413      	add	r3, r2
 8000c1c:	00db      	lsls	r3, r3, #3
 8000c1e:	440b      	add	r3, r1
 8000c20:	3308      	adds	r3, #8
 8000c22:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <setLEDs+0x2a8>)
 8000c24:	213c      	movs	r1, #60	; 0x3c
 8000c26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000c2a:	e01e      	b.n	8000c6a <setLEDs+0x2d2>
 8000c2c:	08018330 	.word	0x08018330
 8000c30:	24000b50 	.word	0x24000b50
 8000c34:	24000270 	.word	0x24000270
 8000c38:	24000538 	.word	0x24000538
 8000c3c:	24000800 	.word	0x24000800
 8000c40:	240009a8 	.word	0x240009a8
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	00da      	lsls	r2, r3, #3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	18d1      	adds	r1, r2, r3
 8000c4c:	4a26      	ldr	r2, [pc, #152]	; (8000ce8 <setLEDs+0x350>)
 8000c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	4413      	add	r3, r2
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	4613      	mov	r3, r2
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	4413      	add	r3, r2
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	440b      	add	r3, r1
 8000c60:	3308      	adds	r3, #8
 8000c62:	4a22      	ldr	r2, [pc, #136]	; (8000cec <setLEDs+0x354>)
 8000c64:	211e      	movs	r1, #30
 8000c66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	2b07      	cmp	r3, #7
 8000c74:	ddb6      	ble.n	8000be4 <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	ddad      	ble.n	8000bde <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c82:	2338      	movs	r3, #56	; 0x38
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	e007      	b.n	8000c98 <setLEDs+0x300>
				LED_PWM_Data_3[i] = 0;
 8000c88:	4a18      	ldr	r2, [pc, #96]	; (8000cec <setLEDs+0x354>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	3301      	adds	r3, #1
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b69      	cmp	r3, #105	; 0x69
 8000c9c:	ddf4      	ble.n	8000c88 <setLEDs+0x2f0>
			}
			break;
 8000c9e:	e000      	b.n	8000ca2 <setLEDs+0x30a>
		default:
			break;
 8000ca0:	bf00      	nop
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 8000ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8000ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000caa:	2b0d      	cmp	r3, #13
 8000cac:	f77f ae7a 	ble.w	80009a4 <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0, (NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
 8000cb0:	23b2      	movs	r3, #178	; 0xb2
 8000cb2:	4a0f      	ldr	r2, [pc, #60]	; (8000cf0 <setLEDs+0x358>)
 8000cb4:	210c      	movs	r1, #12
 8000cb6:	480f      	ldr	r0, [pc, #60]	; (8000cf4 <setLEDs+0x35c>)
 8000cb8:	f00e fc90 	bl	800f5dc <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1, (NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
 8000cbc:	23b2      	movs	r3, #178	; 0xb2
 8000cbe:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <setLEDs+0x360>)
 8000cc0:	2108      	movs	r1, #8
 8000cc2:	480e      	ldr	r0, [pc, #56]	; (8000cfc <setLEDs+0x364>)
 8000cc4:	f00e fc8a 	bl	800f5dc <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2, (NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
 8000cc8:	236a      	movs	r3, #106	; 0x6a
 8000cca:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <setLEDs+0x368>)
 8000ccc:	2104      	movs	r1, #4
 8000cce:	480d      	ldr	r0, [pc, #52]	; (8000d04 <setLEDs+0x36c>)
 8000cd0:	f00e fc84 	bl	800f5dc <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3, (NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3
 8000cd4:	236a      	movs	r3, #106	; 0x6a
 8000cd6:	4a05      	ldr	r2, [pc, #20]	; (8000cec <setLEDs+0x354>)
 8000cd8:	2100      	movs	r1, #0
 8000cda:	480a      	ldr	r0, [pc, #40]	; (8000d04 <setLEDs+0x36c>)
 8000cdc:	f00e fc7e 	bl	800f5dc <HAL_TIM_PWM_Start_DMA>

}
 8000ce0:	bf00      	nop
 8000ce2:	3738      	adds	r7, #56	; 0x38
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	08018330 	.word	0x08018330
 8000cec:	240009a8 	.word	0x240009a8
 8000cf0:	24000270 	.word	0x24000270
 8000cf4:	240011b4 	.word	0x240011b4
 8000cf8:	24000538 	.word	0x24000538
 8000cfc:	240010d0 	.word	0x240010d0
 8000d00:	24000800 	.word	0x24000800
 8000d04:	2400111c 	.word	0x2400111c

08000d08 <LoRA_Read_Register>:
	}
}



uint8_t LoRA_Read_Register(uint8_t addr){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d18:	480d      	ldr	r0, [pc, #52]	; (8000d50 <LoRA_Read_Register+0x48>)
 8000d1a:	f007 f8f5 	bl	8007f08 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d1e:	1df9      	adds	r1, r7, #7
 8000d20:	2364      	movs	r3, #100	; 0x64
 8000d22:	2201      	movs	r2, #1
 8000d24:	480b      	ldr	r0, [pc, #44]	; (8000d54 <LoRA_Read_Register+0x4c>)
 8000d26:	f00d fe71 	bl	800ea0c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8000d2a:	f107 010f 	add.w	r1, r7, #15
 8000d2e:	2364      	movs	r3, #100	; 0x64
 8000d30:	2201      	movs	r2, #1
 8000d32:	4808      	ldr	r0, [pc, #32]	; (8000d54 <LoRA_Read_Register+0x4c>)
 8000d34:	f00e f866 	bl	800ee04 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d3e:	4804      	ldr	r0, [pc, #16]	; (8000d50 <LoRA_Read_Register+0x48>)
 8000d40:	f007 f8e2 	bl	8007f08 <HAL_GPIO_WritePin>

	return reg_value;
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	58020000 	.word	0x58020000
 8000d54:	24001048 	.word	0x24001048

08000d58 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	460a      	mov	r2, r1
 8000d62:	71fb      	strb	r3, [r7, #7]
 8000d64:	4613      	mov	r3, r2
 8000d66:	71bb      	strb	r3, [r7, #6]
	addr |= (1<<7);
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d78:	480c      	ldr	r0, [pc, #48]	; (8000dac <LoRA_Write_Register+0x54>)
 8000d7a:	f007 f8c5 	bl	8007f08 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d7e:	1df9      	adds	r1, r7, #7
 8000d80:	2364      	movs	r3, #100	; 0x64
 8000d82:	2201      	movs	r2, #1
 8000d84:	480a      	ldr	r0, [pc, #40]	; (8000db0 <LoRA_Write_Register+0x58>)
 8000d86:	f00d fe41 	bl	800ea0c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000d8a:	1db9      	adds	r1, r7, #6
 8000d8c:	2364      	movs	r3, #100	; 0x64
 8000d8e:	2201      	movs	r2, #1
 8000d90:	4807      	ldr	r0, [pc, #28]	; (8000db0 <LoRA_Write_Register+0x58>)
 8000d92:	f00d fe3b 	bl	800ea0c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d96:	2201      	movs	r2, #1
 8000d98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d9c:	4803      	ldr	r0, [pc, #12]	; (8000dac <LoRA_Write_Register+0x54>)
 8000d9e:	f007 f8b3 	bl	8007f08 <HAL_GPIO_WritePin>

}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	58020000 	.word	0x58020000
 8000db0:	24001048 	.word	0x24001048

08000db4 <LoRA_sleep>:


void LoRA_sleep(void){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000db8:	2180      	movs	r1, #128	; 0x80
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f7ff ffcc 	bl	8000d58 <LoRA_Write_Register>
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency){
 8000dc4:	b5b0      	push	{r4, r5, r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8000dcc:	6879      	ldr	r1, [r7, #4]
 8000dce:	17c8      	asrs	r0, r1, #31
 8000dd0:	460a      	mov	r2, r1
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	1355      	asrs	r5, r2, #13
 8000dd6:	04d4      	lsls	r4, r2, #19
 8000dd8:	4a18      	ldr	r2, [pc, #96]	; (8000e3c <LoRA_set_frequency+0x78>)
 8000dda:	f04f 0300 	mov.w	r3, #0
 8000dde:	4620      	mov	r0, r4
 8000de0:	4629      	mov	r1, r5
 8000de2:	f7ff fafd 	bl	80003e0 <__aeabi_uldivmod>
 8000de6:	4602      	mov	r2, r0
 8000de8:	460b      	mov	r3, r1
 8000dea:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8000dee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000df2:	f04f 0200 	mov.w	r2, #0
 8000df6:	f04f 0300 	mov.w	r3, #0
 8000dfa:	0c02      	lsrs	r2, r0, #16
 8000dfc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e00:	0c0b      	lsrs	r3, r1, #16
 8000e02:	b2d3      	uxtb	r3, r2
 8000e04:	4619      	mov	r1, r3
 8000e06:	2006      	movs	r0, #6
 8000e08:	f7ff ffa6 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t)(frf >> 8));
 8000e0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e10:	f04f 0200 	mov.w	r2, #0
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	0a02      	lsrs	r2, r0, #8
 8000e1a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000e1e:	0a0b      	lsrs	r3, r1, #8
 8000e20:	b2d3      	uxtb	r3, r2
 8000e22:	4619      	mov	r1, r3
 8000e24:	2007      	movs	r0, #7
 8000e26:	f7ff ff97 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8000e2a:	7a3b      	ldrb	r3, [r7, #8]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	2008      	movs	r0, #8
 8000e30:	f7ff ff92 	bl	8000d58 <LoRA_Write_Register>
}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e3c:	01e84800 	.word	0x01e84800

08000e40 <LoRA_idle>:

void LoRA_idle(){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8000e44:	2181      	movs	r1, #129	; 0x81
 8000e46:	2001      	movs	r0, #1
 8000e48:	f7ff ff86 	bl	8000d58 <LoRA_Write_Register>
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <LoRA_setOCP>:

void LoRA_setOCP(uint8_t mA){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
	  uint8_t ocpTrim = 27;
 8000e5a:	231b      	movs	r3, #27
 8000e5c:	73fb      	strb	r3, [r7, #15]

	  if (mA <= 120) {
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	2b78      	cmp	r3, #120	; 0x78
 8000e62:	d809      	bhi.n	8000e78 <LoRA_setOCP+0x28>
	    ocpTrim = (mA - 45) / 5;
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	3b2d      	subs	r3, #45	; 0x2d
 8000e68:	4a11      	ldr	r2, [pc, #68]	; (8000eb0 <LoRA_setOCP+0x60>)
 8000e6a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e6e:	1052      	asrs	r2, r2, #1
 8000e70:	17db      	asrs	r3, r3, #31
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	73fb      	strb	r3, [r7, #15]
 8000e76:	e00b      	b.n	8000e90 <LoRA_setOCP+0x40>
	  } else if (mA <=240) {
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	2bf0      	cmp	r3, #240	; 0xf0
 8000e7c:	d808      	bhi.n	8000e90 <LoRA_setOCP+0x40>
	    ocpTrim = (mA + 30) / 10;
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	331e      	adds	r3, #30
 8000e82:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <LoRA_setOCP+0x60>)
 8000e84:	fb82 1203 	smull	r1, r2, r2, r3
 8000e88:	1092      	asrs	r2, r2, #2
 8000e8a:	17db      	asrs	r3, r3, #31
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	73fb      	strb	r3, [r7, #15]
	  }

	  LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	f003 031f 	and.w	r3, r3, #31
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	f043 0320 	orr.w	r3, r3, #32
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	200b      	movs	r0, #11
 8000ea2:	f7ff ff59 	bl	8000d58 <LoRA_Write_Register>
}
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	66666667 	.word	0x66666667

08000eb4 <LoRA_setTxPower>:

void LoRA_setTxPower(int level){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
    // PA BOOST
    if (level > 17) {
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b11      	cmp	r3, #17
 8000ec0:	dd0f      	ble.n	8000ee2 <LoRA_setTxPower+0x2e>
      if (level > 20) {
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b14      	cmp	r3, #20
 8000ec6:	dd01      	ble.n	8000ecc <LoRA_setTxPower+0x18>
        level = 20;
 8000ec8:	2314      	movs	r3, #20
 8000eca:	607b      	str	r3, [r7, #4]
      }

      // subtract 3 from level, so 18 - 20 maps to 15 - 17
      level -= 3;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b03      	subs	r3, #3
 8000ed0:	607b      	str	r3, [r7, #4]

      // High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
      LoRA_Write_Register(REG_PA_DAC, 0x87);
 8000ed2:	2187      	movs	r1, #135	; 0x87
 8000ed4:	204d      	movs	r0, #77	; 0x4d
 8000ed6:	f7ff ff3f 	bl	8000d58 <LoRA_Write_Register>
      LoRA_setOCP(140);
 8000eda:	208c      	movs	r0, #140	; 0x8c
 8000edc:	f7ff ffb8 	bl	8000e50 <LoRA_setOCP>
 8000ee0:	e00b      	b.n	8000efa <LoRA_setTxPower+0x46>
    } else {
      if (level < 2) {
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	dc01      	bgt.n	8000eec <LoRA_setTxPower+0x38>
        level = 2;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	607b      	str	r3, [r7, #4]
      }
      //Default value PA_HF/LF or +17dBm
      LoRA_Write_Register(REG_PA_DAC, 0x84);
 8000eec:	2184      	movs	r1, #132	; 0x84
 8000eee:	204d      	movs	r0, #77	; 0x4d
 8000ef0:	f7ff ff32 	bl	8000d58 <LoRA_Write_Register>
      LoRA_setOCP(100);
 8000ef4:	2064      	movs	r0, #100	; 0x64
 8000ef6:	f7ff ffab 	bl	8000e50 <LoRA_setOCP>
    }

    LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	3b02      	subs	r3, #2
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	b25b      	sxtb	r3, r3
 8000f04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f08:	b25b      	sxtb	r3, r3
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	2009      	movs	r0, #9
 8000f10:	f7ff ff22 	bl	8000d58 <LoRA_Write_Register>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode(){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1, LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 8000f20:	201d      	movs	r0, #29
 8000f22:	f7ff fef1 	bl	8000d08 <LoRA_Read_Register>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f023 0301 	bic.w	r3, r3, #1
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	4619      	mov	r1, r3
 8000f30:	201d      	movs	r0, #29
 8000f32:	f7ff ff11 	bl	8000d58 <LoRA_Write_Register>
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <LoRA_begin>:

void LoRA_begin(long frequency){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b09c      	sub	sp, #112	; 0x70
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8000f44:	2201      	movs	r2, #1
 8000f46:	2101      	movs	r1, #1
 8000f48:	4822      	ldr	r0, [pc, #136]	; (8000fd4 <LoRA_begin+0x98>)
 8000f4a:	f006 ffdd 	bl	8007f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f54:	4820      	ldr	r0, [pc, #128]	; (8000fd8 <LoRA_begin+0x9c>)
 8000f56:	f006 ffd7 	bl	8007f08 <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 8000f5a:	2042      	movs	r0, #66	; 0x42
 8000f5c:	f7ff fed4 	bl	8000d08 <LoRA_Read_Register>
 8000f60:	4603      	mov	r3, r0
 8000f62:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    char data_debug[100];
	sprintf( data_debug,  "%x\n", version);
 8000f66:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000f6a:	f107 0308 	add.w	r3, r7, #8
 8000f6e:	491b      	ldr	r1, [pc, #108]	; (8000fdc <LoRA_begin+0xa0>)
 8000f70:	4618      	mov	r0, r3
 8000f72:	f015 ff9f 	bl	8016eb4 <siprintf>
	CDC_Transmit_HS(data_debug, strlen(data_debug));
 8000f76:	f107 0308 	add.w	r3, r7, #8
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff f9d2 	bl	8000324 <strlen>
 8000f80:	4602      	mov	r2, r0
 8000f82:	f107 0308 	add.w	r3, r7, #8
 8000f86:	4611      	mov	r1, r2
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f015 fb3f 	bl	801660c <CDC_Transmit_HS>

	LoRA_sleep();
 8000f8e:	f7ff ff11 	bl	8000db4 <LoRA_sleep>
	LoRA_set_frequency(868000000);
 8000f92:	4813      	ldr	r0, [pc, #76]	; (8000fe0 <LoRA_begin+0xa4>)
 8000f94:	f7ff ff16 	bl	8000dc4 <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 8000f98:	2100      	movs	r1, #0
 8000f9a:	200f      	movs	r0, #15
 8000f9c:	f7ff fedc 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	200e      	movs	r0, #14
 8000fa4:	f7ff fed8 	bl	8000d58 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 8000fa8:	200c      	movs	r0, #12
 8000faa:	f7ff fead 	bl	8000d08 <LoRA_Read_Register>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	f043 0303 	orr.w	r3, r3, #3
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	200c      	movs	r0, #12
 8000fba:	f7ff fecd 	bl	8000d58 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8000fbe:	2104      	movs	r1, #4
 8000fc0:	2026      	movs	r0, #38	; 0x26
 8000fc2:	f7ff fec9 	bl	8000d58 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 8000fc6:	2011      	movs	r0, #17
 8000fc8:	f7ff ff74 	bl	8000eb4 <LoRA_setTxPower>

}
 8000fcc:	bf00      	nop
 8000fce:	3770      	adds	r7, #112	; 0x70
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	58020c00 	.word	0x58020c00
 8000fd8:	58020000 	.word	0x58020000
 8000fdc:	08018198 	.word	0x08018198
 8000fe0:	33bca100 	.word	0x33bca100

08000fe4 <LoRA_beginPacket>:


void LoRA_beginPacket(){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 8000fe8:	f7ff ff98 	bl	8000f1c <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8000fec:	2100      	movs	r1, #0
 8000fee:	200d      	movs	r0, #13
 8000ff0:	f7ff feb2 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2022      	movs	r0, #34	; 0x22
 8000ff8:	f7ff feae 	bl	8000d58 <LoRA_Write_Register>
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <LoRA_endPacket>:

void LoRA_endPacket(){
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8001006:	2183      	movs	r1, #131	; 0x83
 8001008:	2001      	movs	r0, #1
 800100a:	f7ff fea5 	bl	8000d58 <LoRA_Write_Register>

	while((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0){
 800100e:	bf00      	nop
 8001010:	2012      	movs	r0, #18
 8001012:	f7ff fe79 	bl	8000d08 <LoRA_Read_Register>
 8001016:	4603      	mov	r3, r0
 8001018:	f003 0308 	and.w	r3, r3, #8
 800101c:	2b00      	cmp	r3, #0
 800101e:	d0f7      	beq.n	8001010 <LoRA_endPacket+0x10>

	}

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8001020:	2108      	movs	r1, #8
 8001022:	2012      	movs	r0, #18
 8001024:	f7ff fe98 	bl	8000d58 <LoRA_Write_Register>

	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 8001028:	2012      	movs	r0, #18
 800102a:	f7ff fe6d 	bl	8000d08 <LoRA_Read_Register>
 800102e:	4603      	mov	r3, r0
 8001030:	607b      	str	r3, [r7, #4]

	LoRA_explicit_header_mode();
 8001032:	f7ff ff73 	bl	8000f1c <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	b2db      	uxtb	r3, r3
 800103a:	4619      	mov	r1, r3
 800103c:	2012      	movs	r0, #18
 800103e:	f7ff fe8b 	bl	8000d58 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001048:	2b00      	cmp	r3, #0
 800104a:	d00f      	beq.n	800106c <LoRA_endPacket+0x6c>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f003 0320 	and.w	r3, r3, #32
 8001052:	2b00      	cmp	r3, #0
 8001054:	d10a      	bne.n	800106c <LoRA_endPacket+0x6c>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 8001056:	2010      	movs	r0, #16
 8001058:	f7ff fe56 	bl	8000d08 <LoRA_Read_Register>
 800105c:	4603      	mov	r3, r0
 800105e:	4619      	mov	r1, r3
 8001060:	200d      	movs	r0, #13
 8001062:	f7ff fe79 	bl	8000d58 <LoRA_Write_Register>
		LoRA_idle();
 8001066:	f7ff feeb 	bl	8000e40 <LoRA_idle>
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)){
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
	}
}
 800106a:	e00d      	b.n	8001088 <LoRA_endPacket+0x88>
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)){
 800106c:	2001      	movs	r0, #1
 800106e:	f7ff fe4b 	bl	8000d08 <LoRA_Read_Register>
 8001072:	4603      	mov	r3, r0
 8001074:	2b86      	cmp	r3, #134	; 0x86
 8001076:	d007      	beq.n	8001088 <LoRA_endPacket+0x88>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8001078:	2100      	movs	r1, #0
 800107a:	200d      	movs	r0, #13
 800107c:	f7ff fe6c 	bl	8000d58 <LoRA_Write_Register>
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 8001080:	2186      	movs	r1, #134	; 0x86
 8001082:	2001      	movs	r0, #1
 8001084:	f7ff fe68 	bl	8000d58 <LoRA_Write_Register>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <LoRA_parsePacket>:


int LoRA_parsePacket(){
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 800109a:	2012      	movs	r0, #18
 800109c:	f7ff fe34 	bl	8000d08 <LoRA_Read_Register>
 80010a0:	4603      	mov	r3, r0
 80010a2:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 80010a4:	f7ff ff3a 	bl	8000f1c <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	4619      	mov	r1, r3
 80010ae:	2012      	movs	r0, #18
 80010b0:	f7ff fe52 	bl	8000d58 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d014      	beq.n	80010e8 <LoRA_parsePacket+0x58>
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	f003 0320 	and.w	r3, r3, #32
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d10f      	bne.n	80010e8 <LoRA_parsePacket+0x58>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 80010c8:	2013      	movs	r0, #19
 80010ca:	f7ff fe1d 	bl	8000d08 <LoRA_Read_Register>
 80010ce:	4603      	mov	r3, r0
 80010d0:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 80010d2:	2010      	movs	r0, #16
 80010d4:	f7ff fe18 	bl	8000d08 <LoRA_Read_Register>
 80010d8:	4603      	mov	r3, r0
 80010da:	4619      	mov	r1, r3
 80010dc:	200d      	movs	r0, #13
 80010de:	f7ff fe3b 	bl	8000d58 <LoRA_Write_Register>
		LoRA_idle();
 80010e2:	f7ff fead 	bl	8000e40 <LoRA_idle>
 80010e6:	e00d      	b.n	8001104 <LoRA_parsePacket+0x74>
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)){
 80010e8:	2001      	movs	r0, #1
 80010ea:	f7ff fe0d 	bl	8000d08 <LoRA_Read_Register>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b86      	cmp	r3, #134	; 0x86
 80010f2:	d007      	beq.n	8001104 <LoRA_parsePacket+0x74>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 80010f4:	2100      	movs	r1, #0
 80010f6:	200d      	movs	r0, #13
 80010f8:	f7ff fe2e 	bl	8000d58 <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 80010fc:	2186      	movs	r1, #134	; 0x86
 80010fe:	2001      	movs	r0, #1
 8001100:	f7ff fe2a 	bl	8000d58 <LoRA_Write_Register>
	}
	return packetLenght;
 8001104:	687b      	ldr	r3, [r7, #4]

}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <LoRA_sendPacket>:

void LoRA_sendPacket(char * data){
 800110e:	b580      	push	{r7, lr}
 8001110:	b084      	sub	sp, #16
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
    LoRA_beginPacket();
 8001116:	f7ff ff65 	bl	8000fe4 <LoRA_beginPacket>
    for(int i = 0; i < strlen(data); i++){
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	e00a      	b.n	8001136 <LoRA_sendPacket+0x28>
    	LoRA_Write_Register(REG_FIFO, data[i]);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	4413      	add	r3, r2
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4619      	mov	r1, r3
 800112a:	2000      	movs	r0, #0
 800112c:	f7ff fe14 	bl	8000d58 <LoRA_Write_Register>
    for(int i = 0; i < strlen(data); i++){
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	3301      	adds	r3, #1
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff f8f4 	bl	8000324 <strlen>
 800113c:	4602      	mov	r2, r0
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	429a      	cmp	r2, r3
 8001142:	d8ed      	bhi.n	8001120 <LoRA_sendPacket+0x12>
    }
    LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff f8ed 	bl	8000324 <strlen>
 800114a:	4603      	mov	r3, r0
 800114c:	b2db      	uxtb	r3, r3
 800114e:	4619      	mov	r1, r3
 8001150:	2022      	movs	r0, #34	; 0x22
 8001152:	f7ff fe01 	bl	8000d58 <LoRA_Write_Register>
    LoRA_endPacket();
 8001156:	f7ff ff53 	bl	8001000 <LoRA_endPacket>
}
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <disarm>:
	int status = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
	return status;
}

int disarm(char* state)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	2102      	movs	r1, #2
 8001170:	4827      	ldr	r0, [pc, #156]	; (8001210 <disarm+0xac>)
 8001172:	f006 fec9 	bl	8007f08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2104      	movs	r1, #4
 800117a:	4825      	ldr	r0, [pc, #148]	; (8001210 <disarm+0xac>)
 800117c:	f006 fec4 	bl	8007f08 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 8001180:	2200      	movs	r2, #0
 8001182:	2102      	movs	r1, #2
 8001184:	4823      	ldr	r0, [pc, #140]	; (8001214 <disarm+0xb0>)
 8001186:	f006 febf 	bl	8007f08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001190:	4821      	ldr	r0, [pc, #132]	; (8001218 <disarm+0xb4>)
 8001192:	f006 feb9 	bl	8007f08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800119c:	481e      	ldr	r0, [pc, #120]	; (8001218 <disarm+0xb4>)
 800119e:	f006 feb3 	bl	8007f08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011a8:	481b      	ldr	r0, [pc, #108]	; (8001218 <disarm+0xb4>)
 80011aa:	f006 fead 	bl	8007f08 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2102      	movs	r1, #2
 80011b2:	481a      	ldr	r0, [pc, #104]	; (800121c <disarm+0xb8>)
 80011b4:	f006 fea8 	bl	8007f08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 80011b8:	2200      	movs	r2, #0
 80011ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011be:	4818      	ldr	r0, [pc, #96]	; (8001220 <disarm+0xbc>)
 80011c0:	f006 fea2 	bl	8007f08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 80011c4:	2200      	movs	r2, #0
 80011c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ca:	4815      	ldr	r0, [pc, #84]	; (8001220 <disarm+0xbc>)
 80011cc:	f006 fe9c 	bl	8007f08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 80011d0:	2200      	movs	r2, #0
 80011d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011d6:	4812      	ldr	r0, [pc, #72]	; (8001220 <disarm+0xbc>)
 80011d8:	f006 fe96 	bl	8007f08 <HAL_GPIO_WritePin>

  LED_Color_Data[7][0] = 255;
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <disarm+0xc0>)
 80011de:	22ff      	movs	r2, #255	; 0xff
 80011e0:	655a      	str	r2, [r3, #84]	; 0x54
  LED_Color_Data[7][1] = 0;
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <disarm+0xc0>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	659a      	str	r2, [r3, #88]	; 0x58
  LED_Color_Data[7][2] = 0;
 80011e8:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <disarm+0xc0>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	65da      	str	r2, [r3, #92]	; 0x5c
  setLEDs();
 80011ee:	f7ff fbd3 	bl	8000998 <setLEDs>

  strcpy(state,"DISARMED");
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	490c      	ldr	r1, [pc, #48]	; (8001228 <disarm+0xc4>)
 80011f6:	461a      	mov	r2, r3
 80011f8:	460b      	mov	r3, r1
 80011fa:	cb03      	ldmia	r3!, {r0, r1}
 80011fc:	6010      	str	r0, [r2, #0]
 80011fe:	6051      	str	r1, [r2, #4]
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	7213      	strb	r3, [r2, #8]
  return 0;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	58020000 	.word	0x58020000
 8001214:	58020400 	.word	0x58020400
 8001218:	58021400 	.word	0x58021400
 800121c:	58021800 	.word	0x58021800
 8001220:	58021000 	.word	0x58021000
 8001224:	24000b50 	.word	0x24000b50
 8001228:	0801819c 	.word	0x0801819c

0800122c <recv_packet>:
  setLEDs();
  return 0;
}

int recv_packet(char* LoRA_data, int max_length)
{
 800122c:	b590      	push	{r4, r7, lr}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
  int packet_length = LoRA_parsePacket();
 8001236:	f7ff ff2b 	bl	8001090 <LoRA_parsePacket>
 800123a:	60b8      	str	r0, [r7, #8]
  if(max_length-1 < packet_length) //-1 for the null terminator
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	429a      	cmp	r2, r3
 8001242:	dc01      	bgt.n	8001248 <recv_packet+0x1c>
  {
    return 0;
 8001244:	2300      	movs	r3, #0
 8001246:	e01c      	b.n	8001282 <recv_packet+0x56>
  }
  if(packet_length){
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d018      	beq.n	8001280 <recv_packet+0x54>
    for(int i = 0; i < packet_length; i++){
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	e00a      	b.n	800126a <recv_packet+0x3e>
      LoRA_data[i] = LoRA_Read_Register(0x00);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	18d4      	adds	r4, r2, r3
 800125a:	2000      	movs	r0, #0
 800125c:	f7ff fd54 	bl	8000d08 <LoRA_Read_Register>
 8001260:	4603      	mov	r3, r0
 8001262:	7023      	strb	r3, [r4, #0]
    for(int i = 0; i < packet_length; i++){
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	3301      	adds	r3, #1
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	429a      	cmp	r2, r3
 8001270:	dbf0      	blt.n	8001254 <recv_packet+0x28>
    }
    LoRA_data[packet_length] = '\0';
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	4413      	add	r3, r2
 8001278:	2200      	movs	r2, #0
 800127a:	701a      	strb	r2, [r3, #0]
    return packet_length;
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	e000      	b.n	8001282 <recv_packet+0x56>
  }
  else{
    return 0;
 8001280:	2300      	movs	r3, #0
  }
}
 8001282:	4618      	mov	r0, r3
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	bd90      	pop	{r4, r7, pc}

0800128a <reliable_send_packet>:

void reliable_send_packet(char *LoRA_data) {
 800128a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800128e:	b087      	sub	sp, #28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	466b      	mov	r3, sp
 8001296:	461e      	mov	r6, r3
	uint16_t length = strlen(LoRA_data) + 1; //+1 for the \0
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff f843 	bl	8000324 <strlen>
 800129e:	4603      	mov	r3, r0
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	3301      	adds	r3, #1
 80012a4:	827b      	strh	r3, [r7, #18]
	char acknowledge[length];
 80012a6:	8a79      	ldrh	r1, [r7, #18]
 80012a8:	460b      	mov	r3, r1
 80012aa:	3b01      	subs	r3, #1
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	b28b      	uxth	r3, r1
 80012b0:	2200      	movs	r2, #0
 80012b2:	4698      	mov	r8, r3
 80012b4:	4691      	mov	r9, r2
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	f04f 0300 	mov.w	r3, #0
 80012be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80012c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80012c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80012ca:	b28b      	uxth	r3, r1
 80012cc:	2200      	movs	r2, #0
 80012ce:	461c      	mov	r4, r3
 80012d0:	4615      	mov	r5, r2
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	f04f 0300 	mov.w	r3, #0
 80012da:	00eb      	lsls	r3, r5, #3
 80012dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012e0:	00e2      	lsls	r2, r4, #3
 80012e2:	460b      	mov	r3, r1
 80012e4:	3307      	adds	r3, #7
 80012e6:	08db      	lsrs	r3, r3, #3
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	ebad 0d03 	sub.w	sp, sp, r3
 80012ee:	466b      	mov	r3, sp
 80012f0:	3300      	adds	r3, #0
 80012f2:	60bb      	str	r3, [r7, #8]
	uint32_t lastTime = HAL_GetTick();
 80012f4:	f002 fb4a 	bl	800398c <HAL_GetTick>
 80012f8:	6178      	str	r0, [r7, #20]
	LoRA_sendPacket(LoRA_data);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ff07 	bl	800110e <LoRA_sendPacket>
	while (1) {

		if (recv_packet(acknowledge, length)) {
 8001300:	8a7b      	ldrh	r3, [r7, #18]
 8001302:	4619      	mov	r1, r3
 8001304:	68b8      	ldr	r0, [r7, #8]
 8001306:	f7ff ff91 	bl	800122c <recv_packet>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d009      	beq.n	8001324 <reliable_send_packet+0x9a>
			//cehck crc
			if (strcmp(acknowledge, LoRA_data) != 0) {
 8001310:	6879      	ldr	r1, [r7, #4]
 8001312:	68b8      	ldr	r0, [r7, #8]
 8001314:	f7fe fffc 	bl	8000310 <strcmp>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d011      	beq.n	8001342 <reliable_send_packet+0xb8>
				LoRA_sendPacket(LoRA_data);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff fef5 	bl	800110e <LoRA_sendPacket>
			} else {
				break;
			}
		}

		if (HAL_GetTick() - lastTime > 1000) {
 8001324:	f002 fb32 	bl	800398c <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001332:	d9e5      	bls.n	8001300 <reliable_send_packet+0x76>
			LoRA_sendPacket(LoRA_data);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff feea 	bl	800110e <LoRA_sendPacket>
			lastTime = HAL_GetTick();
 800133a:	f002 fb27 	bl	800398c <HAL_GetTick>
 800133e:	6178      	str	r0, [r7, #20]
		if (recv_packet(acknowledge, length)) {
 8001340:	e7de      	b.n	8001300 <reliable_send_packet+0x76>
				break;
 8001342:	bf00      	nop
 8001344:	46b5      	mov	sp, r6
		}
	}
}
 8001346:	bf00      	nop
 8001348:	371c      	adds	r7, #28
 800134a:	46bd      	mov	sp, r7
 800134c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001350 <usbReceiveHandle>:

		reliable_send_packet(message);
	}
}

int usbReceiveHandle(char* output){
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	uint32_t temp = usbBytesReady;
 8001358:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <usbReceiveHandle+0x40>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	60fb      	str	r3, [r7, #12]
	if(usbBytesReady > 0){
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <usbReceiveHandle+0x40>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00f      	beq.n	8001386 <usbReceiveHandle+0x36>
		if(usbBytesReady > 256){
			//crash(2);
		}
		memcpy(output, usbDataBuffer, usbBytesReady);
 8001366:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <usbReceiveHandle+0x40>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	461a      	mov	r2, r3
 800136c:	4909      	ldr	r1, [pc, #36]	; (8001394 <usbReceiveHandle+0x44>)
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f015 fe2a 	bl	8016fc8 <memcpy>
		output[usbBytesReady] = '\0';
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <usbReceiveHandle+0x40>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	4413      	add	r3, r2
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]
		usbBytesReady = 0;
 8001380:	4b03      	ldr	r3, [pc, #12]	; (8001390 <usbReceiveHandle+0x40>)
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
	}
	return temp;
 8001386:	68fb      	ldr	r3, [r7, #12]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	2400026c 	.word	0x2400026c
 8001394:	2400016c 	.word	0x2400016c

08001398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800139a:	f6ad 4d0c 	subw	sp, sp, #3084	; 0xc0c
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 80013a0:	4bd7      	ldr	r3, [pc, #860]	; (8001700 <main+0x368>)
 80013a2:	f607 348c 	addw	r4, r7, #2956	; 0xb8c
 80013a6:	461d      	mov	r5, r3
 80013a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013b0:	c403      	stmia	r4!, {r0, r1}
 80013b2:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b4:	f002 fa64 	bl	8003880 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b8:	f000 fb34 	bl	8001a24 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80013bc:	f000 fbae 	bl	8001b1c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013c0:	f001 f912 	bl	80025e8 <MX_GPIO_Init>
  MX_DMA_Init();
 80013c4:	f001 f8b0 	bl	8002528 <MX_DMA_Init>
  MX_SPI3_Init();
 80013c8:	f000 fe2e 	bl	8002028 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 80013cc:	f000 fcbe 	bl	8001d4c <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 80013d0:	f001 f85e 	bl	8002490 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80013d4:	f000 fbd4 	bl	8001b80 <MX_ADC1_Init>
  MX_TIM4_Init();
 80013d8:	f000 ff38 	bl	800224c <MX_TIM4_Init>
  MX_ADC3_Init();
 80013dc:	f000 fc48 	bl	8001c70 <MX_ADC3_Init>
  MX_SPI2_Init();
 80013e0:	f000 fdcc 	bl	8001f7c <MX_SPI2_Init>
  MX_I2C2_Init();
 80013e4:	f000 fd16 	bl	8001e14 <MX_I2C2_Init>
  MX_TIM2_Init();
 80013e8:	f000 fe74 	bl	80020d4 <MX_TIM2_Init>
  MX_TIM5_Init();
 80013ec:	f000 ffaa 	bl	8002344 <MX_TIM5_Init>
  MX_TIM3_Init();
 80013f0:	f000 fec8 	bl	8002184 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80013f4:	f015 f834 	bl	8016460 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80013f8:	f000 fd6a 	bl	8001ed0 <MX_SPI1_Init>
  MX_UART4_Init();
 80013fc:	f000 fffc 	bl	80023f8 <MX_UART4_Init>
  MX_FATFS_Init();
 8001400:	f012 fdc2 	bl	8013f88 <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 8001404:	f000 fd46 	bl	8001e94 <MX_SDMMC2_SD_Init>
  /* USER CODE BEGIN 2 */

	const int MAX = 50;
 8001408:	2332      	movs	r3, #50	; 0x32
 800140a:	f8c7 3bec 	str.w	r3, [r7, #3052]	; 0xbec
	const double SPEED = 2.0/2000;
 800140e:	a3ba      	add	r3, pc, #744	; (adr r3, 80016f8 <main+0x360>)
 8001410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001414:	f507 613e 	add.w	r1, r7, #3040	; 0xbe0
 8001418:	e9c1 2300 	strd	r2, r3, [r1]
	const double r_offset = 0;
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	f04f 0300 	mov.w	r3, #0
 8001424:	f607 31d8 	addw	r1, r7, #3032	; 0xbd8
 8001428:	e9c1 2300 	strd	r2, r3, [r1]
	const double g_offset = 1;
 800142c:	f04f 0200 	mov.w	r2, #0
 8001430:	4bb4      	ldr	r3, [pc, #720]	; (8001704 <main+0x36c>)
 8001432:	f507 613d 	add.w	r1, r7, #3024	; 0xbd0
 8001436:	e9c1 2300 	strd	r2, r3, [r1]
	const double b_offset = 2;
 800143a:	f04f 0200 	mov.w	r2, #0
 800143e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001442:	f607 31c8 	addw	r1, r7, #3016	; 0xbc8
 8001446:	e9c1 2300 	strd	r2, r3, [r1]

	LG2_Write_Register(0x10, 0b00111100); //Accelerometer setup - CTRL1_XL
 800144a:	213c      	movs	r1, #60	; 0x3c
 800144c:	2010      	movs	r0, #16
 800144e:	f7ff f999 	bl	8000784 <LG2_Write_Register>
	LG2_Write_Register(0x11, 0b00110000); //Gyroscope setup - CTRL2_G
 8001452:	2130      	movs	r1, #48	; 0x30
 8001454:	2011      	movs	r0, #17
 8001456:	f7ff f995 	bl	8000784 <LG2_Write_Register>
	LG2_Write_Register(0x13, 0b00000100); //disables I2C - CTRL4_C
 800145a:	2104      	movs	r1, #4
 800145c:	2013      	movs	r0, #19
 800145e:	f7ff f991 	bl	8000784 <LG2_Write_Register>

	HAL_Delay(3000);
 8001462:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001466:	f002 fa9d 	bl	80039a4 <HAL_Delay>
	HG2_Write_Register(0x1C, 0b10111111);
 800146a:	21bf      	movs	r1, #191	; 0xbf
 800146c:	201c      	movs	r0, #28
 800146e:	f7ff f935 	bl	80006dc <HG2_Write_Register>
	HAL_Delay(2);
 8001472:	2002      	movs	r0, #2
 8001474:	f002 fa96 	bl	80039a4 <HAL_Delay>

	HG2_Write_Register(0x1B, 0b01011000);
 8001478:	2158      	movs	r1, #88	; 0x58
 800147a:	201b      	movs	r0, #27
 800147c:	f7ff f92e 	bl	80006dc <HG2_Write_Register>
	HG2_Write_Register(0x1B, 0b11011000);
 8001480:	21d8      	movs	r1, #216	; 0xd8
 8001482:	201b      	movs	r0, #27
 8001484:	f7ff f92a 	bl	80006dc <HG2_Write_Register>

	float rotZ = 0;
 8001488:	f04f 0300 	mov.w	r3, #0
 800148c:	f607 32c4 	addw	r2, r7, #3012	; 0xbc4
 8001490:	6013      	str	r3, [r2, #0]
	uint32_t lastTime = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	f8c7 3c04 	str.w	r3, [r7, #3076]	; 0xc04

	float calOmegaX = 0;
 8001498:	f04f 0300 	mov.w	r3, #0
 800149c:	f507 6240 	add.w	r2, r7, #3072	; 0xc00
 80014a0:	6013      	str	r3, [r2, #0]
	float calOmegaY = 0;
 80014a2:	f04f 0300 	mov.w	r3, #0
 80014a6:	f607 32fc 	addw	r2, r7, #3068	; 0xbfc
 80014aa:	6013      	str	r3, [r2, #0]
	float calOmegaZ = 0;
 80014ac:	f04f 0300 	mov.w	r3, #0
 80014b0:	f607 32f8 	addw	r2, r7, #3064	; 0xbf8
 80014b4:	6013      	str	r3, [r2, #0]
	//HAL_Delay(2000);
	for(int i = 0; i < 500; i++){
 80014b6:	2300      	movs	r3, #0
 80014b8:	f8c7 3bf4 	str.w	r3, [r7, #3060]	; 0xbf4
 80014bc:	e02e      	b.n	800151c <main+0x184>
		calOmegaX += LG2_Get_Gyro_X();
 80014be:	f7ff f989 	bl	80007d4 <LG2_Get_Gyro_X>
 80014c2:	eeb0 7a40 	vmov.f32	s14, s0
 80014c6:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80014ca:	edd3 7a00 	vldr	s15, [r3]
 80014ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014d2:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80014d6:	edc3 7a00 	vstr	s15, [r3]
		calOmegaY += LG2_Get_Gyro_Y();
 80014da:	f7ff f9ab 	bl	8000834 <LG2_Get_Gyro_Y>
 80014de:	eeb0 7a40 	vmov.f32	s14, s0
 80014e2:	f607 33fc 	addw	r3, r7, #3068	; 0xbfc
 80014e6:	edd3 7a00 	vldr	s15, [r3]
 80014ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014ee:	f607 33fc 	addw	r3, r7, #3068	; 0xbfc
 80014f2:	edc3 7a00 	vstr	s15, [r3]
		calOmegaZ += LG2_Get_Gyro_Z();
 80014f6:	f7ff f9cf 	bl	8000898 <LG2_Get_Gyro_Z>
 80014fa:	eeb0 7a40 	vmov.f32	s14, s0
 80014fe:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001502:	edd3 7a00 	vldr	s15, [r3]
 8001506:	ee77 7a87 	vadd.f32	s15, s15, s14
 800150a:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 800150e:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < 500; i++){
 8001512:	f8d7 3bf4 	ldr.w	r3, [r7, #3060]	; 0xbf4
 8001516:	3301      	adds	r3, #1
 8001518:	f8c7 3bf4 	str.w	r3, [r7, #3060]	; 0xbf4
 800151c:	f8d7 3bf4 	ldr.w	r3, [r7, #3060]	; 0xbf4
 8001520:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001524:	dbcb      	blt.n	80014be <main+0x126>

		//HAL_Delay(20);
	}
	calOmegaX /= 500;
 8001526:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 800152a:	ed93 7a00 	vldr	s14, [r3]
 800152e:	eddf 6a76 	vldr	s13, [pc, #472]	; 8001708 <main+0x370>
 8001532:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001536:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 800153a:	edc3 7a00 	vstr	s15, [r3]
	calOmegaY /= 500;
 800153e:	f607 33fc 	addw	r3, r7, #3068	; 0xbfc
 8001542:	ed93 7a00 	vldr	s14, [r3]
 8001546:	eddf 6a70 	vldr	s13, [pc, #448]	; 8001708 <main+0x370>
 800154a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800154e:	f607 33fc 	addw	r3, r7, #3068	; 0xbfc
 8001552:	edc3 7a00 	vstr	s15, [r3]
	calOmegaZ /= 500;
 8001556:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 800155a:	ed93 7a00 	vldr	s14, [r3]
 800155e:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8001708 <main+0x370>
 8001562:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001566:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 800156a:	edc3 7a00 	vstr	s15, [r3]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 800156e:	2201      	movs	r2, #1
 8001570:	2101      	movs	r1, #1
 8001572:	4866      	ldr	r0, [pc, #408]	; (800170c <main+0x374>)
 8001574:	f006 fcc8 	bl	8007f08 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001578:	20c8      	movs	r0, #200	; 0xc8
 800157a:	f002 fa13 	bl	80039a4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 800157e:	2200      	movs	r2, #0
 8001580:	2101      	movs	r1, #1
 8001582:	4862      	ldr	r0, [pc, #392]	; (800170c <main+0x374>)
 8001584:	f006 fcc0 	bl	8007f08 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001588:	20c8      	movs	r0, #200	; 0xc8
 800158a:	f002 fa0b 	bl	80039a4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 800158e:	2201      	movs	r2, #1
 8001590:	2101      	movs	r1, #1
 8001592:	485e      	ldr	r0, [pc, #376]	; (800170c <main+0x374>)
 8001594:	f006 fcb8 	bl	8007f08 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001598:	20c8      	movs	r0, #200	; 0xc8
 800159a:	f002 fa03 	bl	80039a4 <HAL_Delay>


	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 800159e:	2201      	movs	r2, #1
 80015a0:	2104      	movs	r1, #4
 80015a2:	485b      	ldr	r0, [pc, #364]	; (8001710 <main+0x378>)
 80015a4:	f006 fcb0 	bl	8007f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 80015a8:	2201      	movs	r2, #1
 80015aa:	2108      	movs	r1, #8
 80015ac:	4858      	ldr	r0, [pc, #352]	; (8001710 <main+0x378>)
 80015ae:	f006 fcab 	bl	8007f08 <HAL_GPIO_WritePin>


    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80015b2:	2100      	movs	r1, #0
 80015b4:	4857      	ldr	r0, [pc, #348]	; (8001714 <main+0x37c>)
 80015b6:	f00d fef5 	bl	800f3a4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80015ba:	2104      	movs	r1, #4
 80015bc:	4855      	ldr	r0, [pc, #340]	; (8001714 <main+0x37c>)
 80015be:	f00d fef1 	bl	800f3a4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80015c2:	2108      	movs	r1, #8
 80015c4:	4853      	ldr	r0, [pc, #332]	; (8001714 <main+0x37c>)
 80015c6:	f00d feed 	bl	800f3a4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80015ca:	210c      	movs	r1, #12
 80015cc:	4851      	ldr	r0, [pc, #324]	; (8001714 <main+0x37c>)
 80015ce:	f00d fee9 	bl	800f3a4 <HAL_TIM_PWM_Start>

    setServo(1, 90);
 80015d2:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8001718 <main+0x380>
 80015d6:	2001      	movs	r0, #1
 80015d8:	f7ff f996 	bl	8000908 <setServo>
    setServo(2, 180);
 80015dc:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 800171c <main+0x384>
 80015e0:	2002      	movs	r0, #2
 80015e2:	f7ff f991 	bl	8000908 <setServo>
    setServo(3, 0);
 80015e6:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8001720 <main+0x388>
 80015ea:	2003      	movs	r0, #3
 80015ec:	f7ff f98c 	bl	8000908 <setServo>
    setServo(4, 45);
 80015f0:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8001724 <main+0x38c>
 80015f4:	2004      	movs	r0, #4
 80015f6:	f7ff f987 	bl	8000908 <setServo>
//    				}
//    			}
//    		}
//    	}
//    	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
	  LoRA_begin(868000000);
 80015fa:	484b      	ldr	r0, [pc, #300]	; (8001728 <main+0x390>)
 80015fc:	f7ff fc9e 	bl	8000f3c <LoRA_begin>
		LoRA_sendPacket("whatever");
		HAL_Delay(1000);
	}
*/

	int connected = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	f8c7 3bc0 	str.w	r3, [r7, #3008]	; 0xbc0
	long last_packet = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	f8c7 3bbc 	str.w	r3, [r7, #3004]	; 0xbbc
	int ARMED = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	f8c7 3bb8 	str.w	r3, [r7, #3000]	; 0xbb8

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);

  int max_packet_count = 0;
 8001612:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 8001616:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
  int stream_counter = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	f8c7 3bb4 	str.w	r3, [r7, #2996]	; 0xbb4
  char state[MAX_PAYLOAD_LENGHT] = "";
 8001624:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 8001628:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	3304      	adds	r3, #4
 8001632:	22f6      	movs	r2, #246	; 0xf6
 8001634:	2100      	movs	r1, #0
 8001636:	4618      	mov	r0, r3
 8001638:	f015 fc8a 	bl	8016f50 <memset>
  char acknowledge[MAX_PAYLOAD_LENGHT];
  char previous_packet[MAX_PAYLOAD_LENGHT];
  char recieved_packet[MAX_PAYLOAD_LENGHT];
  char response_packet[MAX_PAYLOAD_LENGHT];
  char sendMessage[MAX_PAYLOAD_LENGHT];
  int last = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
  int packets_streamed = 50;
 8001642:	2332      	movs	r3, #50	; 0x32
 8001644:	f8c7 3bac 	str.w	r3, [r7, #2988]	; 0xbac
  int packetId;
  char communication_state[50] = "SENDING RELIABLE";
 8001648:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 800164c:	f6a3 16fc 	subw	r6, r3, #2556	; 0x9fc
 8001650:	4b36      	ldr	r3, [pc, #216]	; (800172c <main+0x394>)
 8001652:	4634      	mov	r4, r6
 8001654:	461d      	mov	r5, r3
 8001656:	6828      	ldr	r0, [r5, #0]
 8001658:	6869      	ldr	r1, [r5, #4]
 800165a:	68aa      	ldr	r2, [r5, #8]
 800165c:	68eb      	ldr	r3, [r5, #12]
 800165e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001660:	7c2b      	ldrb	r3, [r5, #16]
 8001662:	7023      	strb	r3, [r4, #0]
 8001664:	f106 0311 	add.w	r3, r6, #17
 8001668:	2221      	movs	r2, #33	; 0x21
 800166a:	2100      	movs	r1, #0
 800166c:	4618      	mov	r0, r3
 800166e:	f015 fc6f 	bl	8016f50 <memset>
  uint32_t previousTime = HAL_GetTick();
 8001672:	f002 f98b 	bl	800398c <HAL_GetTick>
 8001676:	f8c7 0bf0 	str.w	r0, [r7, #3056]	; 0xbf0
  disarm(state);
 800167a:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fd70 	bl	8001164 <disarm>
  LoRA_begin(868000000);
 8001684:	4828      	ldr	r0, [pc, #160]	; (8001728 <main+0x390>)
 8001686:	f7ff fc59 	bl	8000f3c <LoRA_begin>


while (1) {
    if(strcmp(communication_state,"RECEIVING RELIABLE") == 0)
 800168a:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 800168e:	4928      	ldr	r1, [pc, #160]	; (8001730 <main+0x398>)
 8001690:	4618      	mov	r0, r3
 8001692:	f7fe fe3d 	bl	8000310 <strcmp>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	f040 80ad 	bne.w	80017f8 <main+0x460>
    {
      if(recv_packet(recieved_packet, MAX_PAYLOAD_LENGHT))
 800169e:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80016a2:	21fa      	movs	r1, #250	; 0xfa
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fdc1 	bl	800122c <recv_packet>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f000 8091 	beq.w	80017d4 <main+0x43c>
      {
        previousTime = HAL_GetTick();
 80016b2:	f002 f96b 	bl	800398c <HAL_GetTick>
 80016b6:	f8c7 0bf0 	str.w	r0, [r7, #3056]	; 0xbf0
        HAL_Delay(100);
 80016ba:	2064      	movs	r0, #100	; 0x64
 80016bc:	f002 f972 	bl	80039a4 <HAL_Delay>
        CDC_Transmit_HS("is arm 0succ\n", strlen("is arm 0succ\n"));
 80016c0:	210d      	movs	r1, #13
 80016c2:	481c      	ldr	r0, [pc, #112]	; (8001734 <main+0x39c>)
 80016c4:	f014 ffa2 	bl	801660c <CDC_Transmit_HS>
        HAL_Delay(100);
 80016c8:	2064      	movs	r0, #100	; 0x64
 80016ca:	f002 f96b 	bl	80039a4 <HAL_Delay>
        if(sscanf(recieved_packet, "$ %s", state) == 1)
 80016ce:	f607 0228 	addw	r2, r7, #2088	; 0x828
 80016d2:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80016d6:	4918      	ldr	r1, [pc, #96]	; (8001738 <main+0x3a0>)
 80016d8:	4618      	mov	r0, r3
 80016da:	f015 fc0b 	bl	8016ef4 <siscanf>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d12b      	bne.n	800173c <main+0x3a4>
        {
          strcpy(communication_state,"SENDING RELIABLE");
 80016e4:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80016e8:	4a10      	ldr	r2, [pc, #64]	; (800172c <main+0x394>)
 80016ea:	461c      	mov	r4, r3
 80016ec:	4615      	mov	r5, r2
 80016ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016f2:	682b      	ldr	r3, [r5, #0]
 80016f4:	7023      	strb	r3, [r4, #0]
 80016f6:	e167      	b.n	80019c8 <main+0x630>
 80016f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80016fc:	3f50624d 	.word	0x3f50624d
 8001700:	0801827c 	.word	0x0801827c
 8001704:	3ff00000 	.word	0x3ff00000
 8001708:	43fa0000 	.word	0x43fa0000
 800170c:	58020c00 	.word	0x58020c00
 8001710:	58021800 	.word	0x58021800
 8001714:	24001168 	.word	0x24001168
 8001718:	42b40000 	.word	0x42b40000
 800171c:	43340000 	.word	0x43340000
 8001720:	00000000 	.word	0x00000000
 8001724:	42340000 	.word	0x42340000
 8001728:	33bca100 	.word	0x33bca100
 800172c:	08018214 	.word	0x08018214
 8001730:	080181e8 	.word	0x080181e8
 8001734:	080181fc 	.word	0x080181fc
 8001738:	0801820c 	.word	0x0801820c
        }
        else if(sscanf(recieved_packet, "! %d", &max_packet_count) == 1)
 800173c:	f607 1224 	addw	r2, r7, #2340	; 0x924
 8001740:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001744:	49ac      	ldr	r1, [pc, #688]	; (80019f8 <main+0x660>)
 8001746:	4618      	mov	r0, r3
 8001748:	f015 fbd4 	bl	8016ef4 <siscanf>
 800174c:	4603      	mov	r3, r0
 800174e:	2b01      	cmp	r3, #1
 8001750:	d10b      	bne.n	800176a <main+0x3d2>
        {
          strcpy(communication_state,"SENDING STREAM");
 8001752:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001756:	4aa9      	ldr	r2, [pc, #676]	; (80019fc <main+0x664>)
 8001758:	461c      	mov	r4, r3
 800175a:	4613      	mov	r3, r2
 800175c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800175e:	c407      	stmia	r4!, {r0, r1, r2}
 8001760:	8023      	strh	r3, [r4, #0]
 8001762:	3402      	adds	r4, #2
 8001764:	0c1b      	lsrs	r3, r3, #16
 8001766:	7023      	strb	r3, [r4, #0]
 8001768:	e12e      	b.n	80019c8 <main+0x630>
        }
        else if(strcmp(recieved_packet, previous_packet)==0)
 800176a:	f207 5234 	addw	r2, r7, #1332	; 0x534
 800176e:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001772:	4611      	mov	r1, r2
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe fdcb 	bl	8000310 <strcmp>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d105      	bne.n	800178c <main+0x3f4>
        {
          //send acknowledge again
          LoRA_sendPacket(recieved_packet);
 8001780:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fcc2 	bl	800110e <LoRA_sendPacket>
 800178a:	e11d      	b.n	80019c8 <main+0x630>
        }
        else
        {
        	CDC_Transmit_HS("is arm 1succ\n", strlen("is arm 1succ\n"));
 800178c:	210d      	movs	r1, #13
 800178e:	489c      	ldr	r0, [pc, #624]	; (8001a00 <main+0x668>)
 8001790:	f014 ff3c 	bl	801660c <CDC_Transmit_HS>
          HAL_Delay(100);
 8001794:	2064      	movs	r0, #100	; 0x64
 8001796:	f002 f905 	bl	80039a4 <HAL_Delay>
          strcpy(previous_packet, recieved_packet);
 800179a:	f507 6287 	add.w	r2, r7, #1080	; 0x438
 800179e:	f207 5334 	addw	r3, r7, #1332	; 0x534
 80017a2:	4611      	mov	r1, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f015 fc07 	bl	8016fb8 <strcpy>
          LoRA_sendPacket(recieved_packet);
 80017aa:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff fcad 	bl	800110e <LoRA_sendPacket>
          HAL_Delay(100);
 80017b4:	2064      	movs	r0, #100	; 0x64
 80017b6:	f002 f8f5 	bl	80039a4 <HAL_Delay>
          CDC_Transmit_HS(recieved_packet, strlen(recieved_packet));
 80017ba:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe fdb0 	bl	8000324 <strlen>
 80017c4:	4602      	mov	r2, r0
 80017c6:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80017ca:	4611      	mov	r1, r2
 80017cc:	4618      	mov	r0, r3
 80017ce:	f014 ff1d 	bl	801660c <CDC_Transmit_HS>
 80017d2:	e0f9      	b.n	80019c8 <main+0x630>
        }
      }
      else if(HAL_GetTick()-previousTime > 1000)
 80017d4:	f002 f8da 	bl	800398c <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	f8d7 3bf0 	ldr.w	r3, [r7, #3056]	; 0xbf0
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017e4:	f240 80f0 	bls.w	80019c8 <main+0x630>
      {
        previousTime = HAL_GetTick();
 80017e8:	f002 f8d0 	bl	800398c <HAL_GetTick>
 80017ec:	f8c7 0bf0 	str.w	r0, [r7, #3056]	; 0xbf0
        //give up SENDING
        LoRA_sendPacket("$");
 80017f0:	4884      	ldr	r0, [pc, #528]	; (8001a04 <main+0x66c>)
 80017f2:	f7ff fc8c 	bl	800110e <LoRA_sendPacket>
 80017f6:	e0e7      	b.n	80019c8 <main+0x630>
      }
    }
    else if(strcmp(communication_state,"RECEIVING STREAM") == 0)
 80017f8:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80017fc:	4982      	ldr	r1, [pc, #520]	; (8001a08 <main+0x670>)
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe fd86 	bl	8000310 <strcmp>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d14a      	bne.n	80018a0 <main+0x508>
    {
      if(recv_packet(recieved_packet, MAX_PAYLOAD_LENGHT))
 800180a:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800180e:	21fa      	movs	r1, #250	; 0xfa
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fd0b 	bl	800122c <recv_packet>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d025      	beq.n	8001868 <main+0x4d0>
      {
        previousTime = HAL_GetTick();
 800181c:	f002 f8b6 	bl	800398c <HAL_GetTick>
 8001820:	f8c7 0bf0 	str.w	r0, [r7, #3056]	; 0xbf0
        if(sscanf(recieved_packet, "$ %s", state) == 1)
 8001824:	f607 0228 	addw	r2, r7, #2088	; 0x828
 8001828:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800182c:	4977      	ldr	r1, [pc, #476]	; (8001a0c <main+0x674>)
 800182e:	4618      	mov	r0, r3
 8001830:	f015 fb60 	bl	8016ef4 <siscanf>
 8001834:	4603      	mov	r3, r0
 8001836:	2b01      	cmp	r3, #1
 8001838:	d109      	bne.n	800184e <main+0x4b6>
        {
          strcpy(communication_state,"SENDING RELIABLE");
 800183a:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 800183e:	4a74      	ldr	r2, [pc, #464]	; (8001a10 <main+0x678>)
 8001840:	461c      	mov	r4, r3
 8001842:	4615      	mov	r5, r2
 8001844:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001846:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001848:	682b      	ldr	r3, [r5, #0]
 800184a:	7023      	strb	r3, [r4, #0]
 800184c:	e0bc      	b.n	80019c8 <main+0x630>
        }
        else
        {
          CDC_Transmit_HS(recieved_packet, strlen(recieved_packet));
 800184e:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001852:	4618      	mov	r0, r3
 8001854:	f7fe fd66 	bl	8000324 <strlen>
 8001858:	4602      	mov	r2, r0
 800185a:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800185e:	4611      	mov	r1, r2
 8001860:	4618      	mov	r0, r3
 8001862:	f014 fed3 	bl	801660c <CDC_Transmit_HS>
 8001866:	e0af      	b.n	80019c8 <main+0x630>
        }
      }
      else if(HAL_GetTick()-previousTime > 1000)
 8001868:	f002 f890 	bl	800398c <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	f8d7 3bf0 	ldr.w	r3, [r7, #3056]	; 0xbf0
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001878:	f240 80a6 	bls.w	80019c8 <main+0x630>
      {
        previousTime = HAL_GetTick();
 800187c:	f002 f886 	bl	800398c <HAL_GetTick>
 8001880:	f8c7 0bf0 	str.w	r0, [r7, #3056]	; 0xbf0
        //give up SENDING
        sprintf(sendMessage, "! %d", packets_streamed);
 8001884:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001888:	f8d7 2bac 	ldr.w	r2, [r7, #2988]	; 0xbac
 800188c:	495a      	ldr	r1, [pc, #360]	; (80019f8 <main+0x660>)
 800188e:	4618      	mov	r0, r3
 8001890:	f015 fb10 	bl	8016eb4 <siprintf>
        LoRA_sendPacket(sendMessage);
 8001894:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff fc38 	bl	800110e <LoRA_sendPacket>
 800189e:	e093      	b.n	80019c8 <main+0x630>
      }
    }
    else if(strcmp(communication_state,"SENDING STREAM") == 0)
 80018a0:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80018a4:	4955      	ldr	r1, [pc, #340]	; (80019fc <main+0x664>)
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe fd32 	bl	8000310 <strcmp>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d123      	bne.n	80018fa <main+0x562>
    {
      if(max_packet_count == 0)
 80018b2:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 80018b6:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d110      	bne.n	80018e2 <main+0x54a>
      {
        strcpy(communication_state,"RECEIVING RELIABLE");
 80018c0:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80018c4:	4a53      	ldr	r2, [pc, #332]	; (8001a14 <main+0x67c>)
 80018c6:	461c      	mov	r4, r3
 80018c8:	4615      	mov	r5, r2
 80018ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018ce:	682b      	ldr	r3, [r5, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	8022      	strh	r2, [r4, #0]
 80018d4:	3402      	adds	r4, #2
 80018d6:	0c1b      	lsrs	r3, r3, #16
 80018d8:	7023      	strb	r3, [r4, #0]
        LoRA_sendPacket("$");
 80018da:	484a      	ldr	r0, [pc, #296]	; (8001a04 <main+0x66c>)
 80018dc:	f7ff fc17 	bl	800110e <LoRA_sendPacket>
 80018e0:	e072      	b.n	80019c8 <main+0x630>
      }
      else
      {
        //send whatever
        max_packet_count--;
 80018e2:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 80018e6:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	1e5a      	subs	r2, r3, #1
 80018ee:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 80018f2:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	e066      	b.n	80019c8 <main+0x630>
      }

    }
    else if(strcmp(communication_state,"SENDING RELIABLE") == 0)
 80018fa:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80018fe:	4944      	ldr	r1, [pc, #272]	; (8001a10 <main+0x678>)
 8001900:	4618      	mov	r0, r3
 8001902:	f7fe fd05 	bl	8000310 <strcmp>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d15d      	bne.n	80019c8 <main+0x630>
    {
	  	  CDC_Transmit_HS(state, strlen(state));
 800190c:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe fd07 	bl	8000324 <strlen>
 8001916:	4602      	mov	r2, r0
 8001918:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800191c:	4611      	mov	r1, r2
 800191e:	4618      	mov	r0, r3
 8001920:	f014 fe74 	bl	801660c <CDC_Transmit_HS>

    	//get input
    	char input[usbBufferLen];
    	usbReceiveHandle(input);
 8001924:	463b      	mov	r3, r7
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fd12 	bl	8001350 <usbReceiveHandle>

    	while(!usbReceiveHandle(input))
 800192c:	bf00      	nop
 800192e:	463b      	mov	r3, r7
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fd0d 	bl	8001350 <usbReceiveHandle>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0f8      	beq.n	800192e <main+0x596>
    	{}

      reliable_send_packet(input);
 800193c:	463b      	mov	r3, r7
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fca3 	bl	800128a <reliable_send_packet>

	  	char debug[usbBufferLen+10];
	  	sprintf(debug, "Debug: %s\n", input);
 8001944:	463a      	mov	r2, r7
 8001946:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800194a:	4933      	ldr	r1, [pc, #204]	; (8001a18 <main+0x680>)
 800194c:	4618      	mov	r0, r3
 800194e:	f015 fab1 	bl	8016eb4 <siprintf>
	  	CDC_Transmit_HS(debug, strlen(debug));
 8001952:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001956:	4618      	mov	r0, r3
 8001958:	f7fe fce4 	bl	8000324 <strlen>
 800195c:	4602      	mov	r2, r0
 800195e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001962:	4611      	mov	r1, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f014 fe51 	bl	801660c <CDC_Transmit_HS>

      if(strcmp(input,"FIRE")==0)
 800196a:	463b      	mov	r3, r7
 800196c:	492b      	ldr	r1, [pc, #172]	; (8001a1c <main+0x684>)
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fcce 	bl	8000310 <strcmp>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d116      	bne.n	80019a8 <main+0x610>
      {
        strcpy(communication_state,"RECEIVING STREAM");
 800197a:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 800197e:	4a22      	ldr	r2, [pc, #136]	; (8001a08 <main+0x670>)
 8001980:	461c      	mov	r4, r3
 8001982:	4615      	mov	r5, r2
 8001984:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001986:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001988:	682b      	ldr	r3, [r5, #0]
 800198a:	7023      	strb	r3, [r4, #0]
        sprintf(sendMessage, "! %d", packets_streamed);
 800198c:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001990:	f8d7 2bac 	ldr.w	r2, [r7, #2988]	; 0xbac
 8001994:	4918      	ldr	r1, [pc, #96]	; (80019f8 <main+0x660>)
 8001996:	4618      	mov	r0, r3
 8001998:	f015 fa8c 	bl	8016eb4 <siprintf>
        LoRA_sendPacket(sendMessage);
 800199c:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff fbb4 	bl	800110e <LoRA_sendPacket>
 80019a6:	e00f      	b.n	80019c8 <main+0x630>
      }
      else
      {
        strcpy(communication_state,"RECEIVING RELIABLE");
 80019a8:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80019ac:	4a19      	ldr	r2, [pc, #100]	; (8001a14 <main+0x67c>)
 80019ae:	461c      	mov	r4, r3
 80019b0:	4615      	mov	r5, r2
 80019b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019b6:	682b      	ldr	r3, [r5, #0]
 80019b8:	461a      	mov	r2, r3
 80019ba:	8022      	strh	r2, [r4, #0]
 80019bc:	3402      	adds	r4, #2
 80019be:	0c1b      	lsrs	r3, r3, #16
 80019c0:	7023      	strb	r3, [r4, #0]
        LoRA_sendPacket("$");
 80019c2:	4810      	ldr	r0, [pc, #64]	; (8001a04 <main+0x66c>)
 80019c4:	f7ff fba3 	bl	800110e <LoRA_sendPacket>
//			LED_Color_Data[i][0] = (uint32_t)MAX*triangle_space(color_offset+r_offset);
//			LED_Color_Data[i][1] = (uint32_t)MAX*triangle_space(color_offset+g_offset);
//			LED_Color_Data[i][2] = (uint32_t)MAX*triangle_space(color_offset+b_offset);
//		}

		float timeElapsed = ((float)(HAL_GetTick() - lastTime)) / 1000;
 80019c8:	f001 ffe0 	bl	800398c <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	f8d7 3c04 	ldr.w	r3, [r7, #3076]	; 0xc04
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	ee07 3a90 	vmov	s15, r3
 80019d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019dc:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001a20 <main+0x688>
 80019e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019e4:	f607 33a8 	addw	r3, r7, #2984	; 0xba8
 80019e8:	edc3 7a00 	vstr	s15, [r3]

		//float GyroX = LG2_Get_Gyro_X() - calOmegaX;
		//float GyroY = LG2_Get_Gyro_Y() - calOmegaY;
		//float GyroZ = LG2_Get_Gyro_Z() - calOmegaZ;

		lastTime = HAL_GetTick();
 80019ec:	f001 ffce 	bl	800398c <HAL_GetTick>
 80019f0:	f8c7 0c04 	str.w	r0, [r7, #3076]	; 0xc04
while (1) {
 80019f4:	e649      	b.n	800168a <main+0x2f2>
 80019f6:	bf00      	nop
 80019f8:	08018228 	.word	0x08018228
 80019fc:	08018230 	.word	0x08018230
 8001a00:	08018240 	.word	0x08018240
 8001a04:	08018250 	.word	0x08018250
 8001a08:	08018254 	.word	0x08018254
 8001a0c:	0801820c 	.word	0x0801820c
 8001a10:	08018214 	.word	0x08018214
 8001a14:	080181e8 	.word	0x080181e8
 8001a18:	08018268 	.word	0x08018268
 8001a1c:	08018274 	.word	0x08018274
 8001a20:	447a0000 	.word	0x447a0000

08001a24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b09c      	sub	sp, #112	; 0x70
 8001a28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a2e:	224c      	movs	r2, #76	; 0x4c
 8001a30:	2100      	movs	r1, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f015 fa8c 	bl	8016f50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	2220      	movs	r2, #32
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f015 fa86 	bl	8016f50 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001a44:	2002      	movs	r0, #2
 8001a46:	f007 fe59 	bl	80096fc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	603b      	str	r3, [r7, #0]
 8001a4e:	4b32      	ldr	r3, [pc, #200]	; (8001b18 <SystemClock_Config+0xf4>)
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a56:	4a30      	ldr	r2, [pc, #192]	; (8001b18 <SystemClock_Config+0xf4>)
 8001a58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a5c:	6193      	str	r3, [r2, #24]
 8001a5e:	4b2e      	ldr	r3, [pc, #184]	; (8001b18 <SystemClock_Config+0xf4>)
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a66:	603b      	str	r3, [r7, #0]
 8001a68:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001a6a:	bf00      	nop
 8001a6c:	4b2a      	ldr	r3, [pc, #168]	; (8001b18 <SystemClock_Config+0xf4>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a78:	d1f8      	bne.n	8001a6c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001a7a:	2323      	movs	r3, #35	; 0x23
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a82:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001a84:	2301      	movs	r3, #1
 8001a86:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001a88:	2340      	movs	r3, #64	; 0x40
 8001a8a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a90:	2302      	movs	r3, #2
 8001a92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a94:	2300      	movs	r3, #0
 8001a96:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a98:	2304      	movs	r3, #4
 8001a9a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001a9c:	230c      	movs	r3, #12
 8001a9e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8001aa4:	230c      	movs	r3, #12
 8001aa6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001aac:	230c      	movs	r3, #12
 8001aae:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001abc:	4618      	mov	r0, r3
 8001abe:	f007 fe67 	bl	8009790 <HAL_RCC_OscConfig>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001ac8:	f000 ff02 	bl	80028d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001acc:	233f      	movs	r3, #63	; 0x3f
 8001ace:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001ad8:	2308      	movs	r3, #8
 8001ada:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001adc:	2340      	movs	r3, #64	; 0x40
 8001ade:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001ae0:	2340      	movs	r3, #64	; 0x40
 8001ae2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001ae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ae8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001aea:	2340      	movs	r3, #64	; 0x40
 8001aec:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001aee:	1d3b      	adds	r3, r7, #4
 8001af0:	2101      	movs	r1, #1
 8001af2:	4618      	mov	r0, r3
 8001af4:	f008 fa26 	bl	8009f44 <HAL_RCC_ClockConfig>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8001afe:	f000 fee7 	bl	80028d0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001b02:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001b06:	2100      	movs	r1, #0
 8001b08:	2000      	movs	r0, #0
 8001b0a:	f008 fbd1 	bl	800a2b0 <HAL_RCC_MCOConfig>
}
 8001b0e:	bf00      	nop
 8001b10:	3770      	adds	r7, #112	; 0x70
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	58024800 	.word	0x58024800

08001b1c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b0ae      	sub	sp, #184	; 0xb8
 8001b20:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b22:	463b      	mov	r3, r7
 8001b24:	22b8      	movs	r2, #184	; 0xb8
 8001b26:	2100      	movs	r1, #0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f015 fa11 	bl	8016f50 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 8001b2e:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8001b32:	f04f 0300 	mov.w	r3, #0
 8001b36:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001b3a:	2304      	movs	r3, #4
 8001b3c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001b3e:	230c      	movs	r3, #12
 8001b40:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001b42:	2304      	movs	r3, #4
 8001b44:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001b46:	2302      	movs	r3, #2
 8001b48:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001b4e:	23c0      	movs	r3, #192	; 0xc0
 8001b50:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001b52:	2300      	movs	r3, #0
 8001b54:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001b5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b5e:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001b60:	2300      	movs	r3, #0
 8001b62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b66:	463b      	mov	r3, r7
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f008 fde1 	bl	800a730 <HAL_RCCEx_PeriphCLKConfig>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001b74:	f000 feac 	bl	80028d0 <Error_Handler>
  }
}
 8001b78:	bf00      	nop
 8001b7a:	37b8      	adds	r7, #184	; 0xb8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08c      	sub	sp, #48	; 0x30
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001b86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b92:	463b      	mov	r3, r7
 8001b94:	2224      	movs	r2, #36	; 0x24
 8001b96:	2100      	movs	r1, #0
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f015 f9d9 	bl	8016f50 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b9e:	4b31      	ldr	r3, [pc, #196]	; (8001c64 <MX_ADC1_Init+0xe4>)
 8001ba0:	4a31      	ldr	r2, [pc, #196]	; (8001c68 <MX_ADC1_Init+0xe8>)
 8001ba2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001ba4:	4b2f      	ldr	r3, [pc, #188]	; (8001c64 <MX_ADC1_Init+0xe4>)
 8001ba6:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001baa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001bac:	4b2d      	ldr	r3, [pc, #180]	; (8001c64 <MX_ADC1_Init+0xe4>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001bb2:	4b2c      	ldr	r3, [pc, #176]	; (8001c64 <MX_ADC1_Init+0xe4>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bb8:	4b2a      	ldr	r3, [pc, #168]	; (8001c64 <MX_ADC1_Init+0xe4>)
 8001bba:	2204      	movs	r2, #4
 8001bbc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001bbe:	4b29      	ldr	r3, [pc, #164]	; (8001c64 <MX_ADC1_Init+0xe4>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001bc4:	4b27      	ldr	r3, [pc, #156]	; (8001c64 <MX_ADC1_Init+0xe4>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001bca:	4b26      	ldr	r3, [pc, #152]	; (8001c64 <MX_ADC1_Init+0xe4>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bd0:	4b24      	ldr	r3, [pc, #144]	; (8001c64 <MX_ADC1_Init+0xe4>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bd8:	4b22      	ldr	r3, [pc, #136]	; (8001c64 <MX_ADC1_Init+0xe4>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bde:	4b21      	ldr	r3, [pc, #132]	; (8001c64 <MX_ADC1_Init+0xe4>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001be4:	4b1f      	ldr	r3, [pc, #124]	; (8001c64 <MX_ADC1_Init+0xe4>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001bea:	4b1e      	ldr	r3, [pc, #120]	; (8001c64 <MX_ADC1_Init+0xe4>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001bf0:	4b1c      	ldr	r3, [pc, #112]	; (8001c64 <MX_ADC1_Init+0xe4>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001bf6:	4b1b      	ldr	r3, [pc, #108]	; (8001c64 <MX_ADC1_Init+0xe4>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bfe:	4819      	ldr	r0, [pc, #100]	; (8001c64 <MX_ADC1_Init+0xe4>)
 8001c00:	f002 f950 	bl	8003ea4 <HAL_ADC_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001c0a:	f000 fe61 	bl	80028d0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c16:	4619      	mov	r1, r3
 8001c18:	4812      	ldr	r0, [pc, #72]	; (8001c64 <MX_ADC1_Init+0xe4>)
 8001c1a:	f003 f98b 	bl	8004f34 <HAL_ADCEx_MultiModeConfigChannel>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001c24:	f000 fe54 	bl	80028d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001c28:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <MX_ADC1_Init+0xec>)
 8001c2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c2c:	2306      	movs	r3, #6
 8001c2e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8001c30:	2303      	movs	r3, #3
 8001c32:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c34:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001c38:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c3a:	2304      	movs	r3, #4
 8001c3c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001c42:	2300      	movs	r3, #0
 8001c44:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c48:	463b      	mov	r3, r7
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4805      	ldr	r0, [pc, #20]	; (8001c64 <MX_ADC1_Init+0xe4>)
 8001c4e:	f002 fb31 	bl	80042b4 <HAL_ADC_ConfigChannel>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001c58:	f000 fe3a 	bl	80028d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c5c:	bf00      	nop
 8001c5e:	3730      	adds	r7, #48	; 0x30
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	24000bf8 	.word	0x24000bf8
 8001c68:	40022000 	.word	0x40022000
 8001c6c:	2a000400 	.word	0x2a000400

08001c70 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08a      	sub	sp, #40	; 0x28
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	2224      	movs	r2, #36	; 0x24
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f015 f967 	bl	8016f50 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001c82:	4b2f      	ldr	r3, [pc, #188]	; (8001d40 <MX_ADC3_Init+0xd0>)
 8001c84:	4a2f      	ldr	r2, [pc, #188]	; (8001d44 <MX_ADC3_Init+0xd4>)
 8001c86:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001c88:	4b2d      	ldr	r3, [pc, #180]	; (8001d40 <MX_ADC3_Init+0xd0>)
 8001c8a:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001c8e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001c90:	4b2b      	ldr	r3, [pc, #172]	; (8001d40 <MX_ADC3_Init+0xd0>)
 8001c92:	2208      	movs	r2, #8
 8001c94:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001c96:	4b2a      	ldr	r3, [pc, #168]	; (8001d40 <MX_ADC3_Init+0xd0>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c9c:	4b28      	ldr	r3, [pc, #160]	; (8001d40 <MX_ADC3_Init+0xd0>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ca2:	4b27      	ldr	r3, [pc, #156]	; (8001d40 <MX_ADC3_Init+0xd0>)
 8001ca4:	2204      	movs	r2, #4
 8001ca6:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001ca8:	4b25      	ldr	r3, [pc, #148]	; (8001d40 <MX_ADC3_Init+0xd0>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001cae:	4b24      	ldr	r3, [pc, #144]	; (8001d40 <MX_ADC3_Init+0xd0>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001cb4:	4b22      	ldr	r3, [pc, #136]	; (8001d40 <MX_ADC3_Init+0xd0>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001cba:	4b21      	ldr	r3, [pc, #132]	; (8001d40 <MX_ADC3_Init+0xd0>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cc2:	4b1f      	ldr	r3, [pc, #124]	; (8001d40 <MX_ADC3_Init+0xd0>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cc8:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <MX_ADC3_Init+0xd0>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001cce:	4b1c      	ldr	r3, [pc, #112]	; (8001d40 <MX_ADC3_Init+0xd0>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001cd6:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <MX_ADC3_Init+0xd0>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001cdc:	4b18      	ldr	r3, [pc, #96]	; (8001d40 <MX_ADC3_Init+0xd0>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ce2:	4b17      	ldr	r3, [pc, #92]	; (8001d40 <MX_ADC3_Init+0xd0>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001ce8:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <MX_ADC3_Init+0xd0>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001cee:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <MX_ADC3_Init+0xd0>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001cf6:	4812      	ldr	r0, [pc, #72]	; (8001d40 <MX_ADC3_Init+0xd0>)
 8001cf8:	f002 f8d4 	bl	8003ea4 <HAL_ADC_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001d02:	f000 fde5 	bl	80028d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d06:	4b10      	ldr	r3, [pc, #64]	; (8001d48 <MX_ADC3_Init+0xd8>)
 8001d08:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d0a:	2306      	movs	r3, #6
 8001d0c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001d12:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001d16:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d18:	2304      	movs	r3, #4
 8001d1a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001d20:	2300      	movs	r3, #0
 8001d22:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001d24:	1d3b      	adds	r3, r7, #4
 8001d26:	4619      	mov	r1, r3
 8001d28:	4805      	ldr	r0, [pc, #20]	; (8001d40 <MX_ADC3_Init+0xd0>)
 8001d2a:	f002 fac3 	bl	80042b4 <HAL_ADC_ConfigChannel>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8001d34:	f000 fdcc 	bl	80028d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001d38:	bf00      	nop
 8001d3a:	3728      	adds	r7, #40	; 0x28
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	24000c68 	.word	0x24000c68
 8001d44:	58026000 	.word	0x58026000
 8001d48:	04300002 	.word	0x04300002

08001d4c <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001d50:	4b2e      	ldr	r3, [pc, #184]	; (8001e0c <MX_FDCAN3_Init+0xc0>)
 8001d52:	4a2f      	ldr	r2, [pc, #188]	; (8001e10 <MX_FDCAN3_Init+0xc4>)
 8001d54:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001d56:	4b2d      	ldr	r3, [pc, #180]	; (8001e0c <MX_FDCAN3_Init+0xc0>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001d5c:	4b2b      	ldr	r3, [pc, #172]	; (8001e0c <MX_FDCAN3_Init+0xc0>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001d62:	4b2a      	ldr	r3, [pc, #168]	; (8001e0c <MX_FDCAN3_Init+0xc0>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001d68:	4b28      	ldr	r3, [pc, #160]	; (8001e0c <MX_FDCAN3_Init+0xc0>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001d6e:	4b27      	ldr	r3, [pc, #156]	; (8001e0c <MX_FDCAN3_Init+0xc0>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8001d74:	4b25      	ldr	r3, [pc, #148]	; (8001e0c <MX_FDCAN3_Init+0xc0>)
 8001d76:	2210      	movs	r2, #16
 8001d78:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001d7a:	4b24      	ldr	r3, [pc, #144]	; (8001e0c <MX_FDCAN3_Init+0xc0>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8001d80:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <MX_FDCAN3_Init+0xc0>)
 8001d82:	2202      	movs	r2, #2
 8001d84:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8001d86:	4b21      	ldr	r3, [pc, #132]	; (8001e0c <MX_FDCAN3_Init+0xc0>)
 8001d88:	2202      	movs	r2, #2
 8001d8a:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8001d8c:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <MX_FDCAN3_Init+0xc0>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8001d92:	4b1e      	ldr	r3, [pc, #120]	; (8001e0c <MX_FDCAN3_Init+0xc0>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001d98:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <MX_FDCAN3_Init+0xc0>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001d9e:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <MX_FDCAN3_Init+0xc0>)
 8001da0:	2201      	movs	r2, #1
 8001da2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8001da4:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <MX_FDCAN3_Init+0xc0>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8001daa:	4b18      	ldr	r3, [pc, #96]	; (8001e0c <MX_FDCAN3_Init+0xc0>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8001db0:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <MX_FDCAN3_Init+0xc0>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8001db6:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <MX_FDCAN3_Init+0xc0>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001dbc:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <MX_FDCAN3_Init+0xc0>)
 8001dbe:	2204      	movs	r2, #4
 8001dc0:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8001dc2:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <MX_FDCAN3_Init+0xc0>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001dc8:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <MX_FDCAN3_Init+0xc0>)
 8001dca:	2204      	movs	r2, #4
 8001dcc:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8001dce:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <MX_FDCAN3_Init+0xc0>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001dd4:	4b0d      	ldr	r3, [pc, #52]	; (8001e0c <MX_FDCAN3_Init+0xc0>)
 8001dd6:	2204      	movs	r2, #4
 8001dd8:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8001dda:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <MX_FDCAN3_Init+0xc0>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8001de0:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <MX_FDCAN3_Init+0xc0>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8001de6:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <MX_FDCAN3_Init+0xc0>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001dec:	4b07      	ldr	r3, [pc, #28]	; (8001e0c <MX_FDCAN3_Init+0xc0>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001df2:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <MX_FDCAN3_Init+0xc0>)
 8001df4:	2204      	movs	r2, #4
 8001df6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001df8:	4804      	ldr	r0, [pc, #16]	; (8001e0c <MX_FDCAN3_Init+0xc0>)
 8001dfa:	f005 fb61 	bl	80074c0 <HAL_FDCAN_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8001e04:	f000 fd64 	bl	80028d0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8001e08:	bf00      	nop
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	24000dc8 	.word	0x24000dc8
 8001e10:	4000d400 	.word	0x4000d400

08001e14 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001e18:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <MX_I2C2_Init+0x74>)
 8001e1a:	4a1c      	ldr	r2, [pc, #112]	; (8001e8c <MX_I2C2_Init+0x78>)
 8001e1c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001e1e:	4b1a      	ldr	r3, [pc, #104]	; (8001e88 <MX_I2C2_Init+0x74>)
 8001e20:	4a1b      	ldr	r2, [pc, #108]	; (8001e90 <MX_I2C2_Init+0x7c>)
 8001e22:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001e24:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <MX_I2C2_Init+0x74>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e2a:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <MX_I2C2_Init+0x74>)
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e30:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <MX_I2C2_Init+0x74>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001e36:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <MX_I2C2_Init+0x74>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e3c:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <MX_I2C2_Init+0x74>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e42:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <MX_I2C2_Init+0x74>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e48:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <MX_I2C2_Init+0x74>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001e4e:	480e      	ldr	r0, [pc, #56]	; (8001e88 <MX_I2C2_Init+0x74>)
 8001e50:	f006 f874 	bl	8007f3c <HAL_I2C_Init>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001e5a:	f000 fd39 	bl	80028d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4809      	ldr	r0, [pc, #36]	; (8001e88 <MX_I2C2_Init+0x74>)
 8001e62:	f006 f8fb 	bl	800805c <HAL_I2CEx_ConfigAnalogFilter>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001e6c:	f000 fd30 	bl	80028d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001e70:	2100      	movs	r1, #0
 8001e72:	4805      	ldr	r0, [pc, #20]	; (8001e88 <MX_I2C2_Init+0x74>)
 8001e74:	f006 f93d 	bl	80080f2 <HAL_I2CEx_ConfigDigitalFilter>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001e7e:	f000 fd27 	bl	80028d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	24000e68 	.word	0x24000e68
 8001e8c:	40005800 	.word	0x40005800
 8001e90:	20303e5d 	.word	0x20303e5d

08001e94 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8001e98:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <MX_SDMMC2_SD_Init+0x34>)
 8001e9a:	4a0c      	ldr	r2, [pc, #48]	; (8001ecc <MX_SDMMC2_SD_Init+0x38>)
 8001e9c:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001e9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <MX_SDMMC2_SD_Init+0x34>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001ea4:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <MX_SDMMC2_SD_Init+0x34>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001eaa:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <MX_SDMMC2_SD_Init+0x34>)
 8001eac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001eb0:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001eb2:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <MX_SDMMC2_SD_Init+0x34>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 8001eb8:	4b03      	ldr	r3, [pc, #12]	; (8001ec8 <MX_SDMMC2_SD_Init+0x34>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8001ebe:	bf00      	nop
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	24000ebc 	.word	0x24000ebc
 8001ecc:	48022400 	.word	0x48022400

08001ed0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ed4:	4b27      	ldr	r3, [pc, #156]	; (8001f74 <MX_SPI1_Init+0xa4>)
 8001ed6:	4a28      	ldr	r2, [pc, #160]	; (8001f78 <MX_SPI1_Init+0xa8>)
 8001ed8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001eda:	4b26      	ldr	r3, [pc, #152]	; (8001f74 <MX_SPI1_Init+0xa4>)
 8001edc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001ee0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ee2:	4b24      	ldr	r3, [pc, #144]	; (8001f74 <MX_SPI1_Init+0xa4>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ee8:	4b22      	ldr	r3, [pc, #136]	; (8001f74 <MX_SPI1_Init+0xa4>)
 8001eea:	2207      	movs	r2, #7
 8001eec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eee:	4b21      	ldr	r3, [pc, #132]	; (8001f74 <MX_SPI1_Init+0xa4>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ef4:	4b1f      	ldr	r3, [pc, #124]	; (8001f74 <MX_SPI1_Init+0xa4>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001efa:	4b1e      	ldr	r3, [pc, #120]	; (8001f74 <MX_SPI1_Init+0xa4>)
 8001efc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f00:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001f02:	4b1c      	ldr	r3, [pc, #112]	; (8001f74 <MX_SPI1_Init+0xa4>)
 8001f04:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001f08:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f0a:	4b1a      	ldr	r3, [pc, #104]	; (8001f74 <MX_SPI1_Init+0xa4>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f10:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <MX_SPI1_Init+0xa4>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f16:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <MX_SPI1_Init+0xa4>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001f1c:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <MX_SPI1_Init+0xa4>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f22:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <MX_SPI1_Init+0xa4>)
 8001f24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f28:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001f2a:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <MX_SPI1_Init+0xa4>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001f30:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <MX_SPI1_Init+0xa4>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f36:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <MX_SPI1_Init+0xa4>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f3c:	4b0d      	ldr	r3, [pc, #52]	; (8001f74 <MX_SPI1_Init+0xa4>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001f42:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <MX_SPI1_Init+0xa4>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001f48:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <MX_SPI1_Init+0xa4>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001f4e:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <MX_SPI1_Init+0xa4>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001f54:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <MX_SPI1_Init+0xa4>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <MX_SPI1_Init+0xa4>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f60:	4804      	ldr	r0, [pc, #16]	; (8001f74 <MX_SPI1_Init+0xa4>)
 8001f62:	f00c fc2f 	bl	800e7c4 <HAL_SPI_Init>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001f6c:	f000 fcb0 	bl	80028d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	24000f38 	.word	0x24000f38
 8001f78:	40013000 	.word	0x40013000

08001f7c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001f80:	4b27      	ldr	r3, [pc, #156]	; (8002020 <MX_SPI2_Init+0xa4>)
 8001f82:	4a28      	ldr	r2, [pc, #160]	; (8002024 <MX_SPI2_Init+0xa8>)
 8001f84:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f86:	4b26      	ldr	r3, [pc, #152]	; (8002020 <MX_SPI2_Init+0xa4>)
 8001f88:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001f8c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f8e:	4b24      	ldr	r3, [pc, #144]	; (8002020 <MX_SPI2_Init+0xa4>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f94:	4b22      	ldr	r3, [pc, #136]	; (8002020 <MX_SPI2_Init+0xa4>)
 8001f96:	2207      	movs	r2, #7
 8001f98:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f9a:	4b21      	ldr	r3, [pc, #132]	; (8002020 <MX_SPI2_Init+0xa4>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fa0:	4b1f      	ldr	r3, [pc, #124]	; (8002020 <MX_SPI2_Init+0xa4>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001fa6:	4b1e      	ldr	r3, [pc, #120]	; (8002020 <MX_SPI2_Init+0xa4>)
 8001fa8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001fac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001fae:	4b1c      	ldr	r3, [pc, #112]	; (8002020 <MX_SPI2_Init+0xa4>)
 8001fb0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001fb4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fb6:	4b1a      	ldr	r3, [pc, #104]	; (8002020 <MX_SPI2_Init+0xa4>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fbc:	4b18      	ldr	r3, [pc, #96]	; (8002020 <MX_SPI2_Init+0xa4>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fc2:	4b17      	ldr	r3, [pc, #92]	; (8002020 <MX_SPI2_Init+0xa4>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001fc8:	4b15      	ldr	r3, [pc, #84]	; (8002020 <MX_SPI2_Init+0xa4>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001fce:	4b14      	ldr	r3, [pc, #80]	; (8002020 <MX_SPI2_Init+0xa4>)
 8001fd0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fd4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001fd6:	4b12      	ldr	r3, [pc, #72]	; (8002020 <MX_SPI2_Init+0xa4>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001fdc:	4b10      	ldr	r3, [pc, #64]	; (8002020 <MX_SPI2_Init+0xa4>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001fe2:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <MX_SPI2_Init+0xa4>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001fe8:	4b0d      	ldr	r3, [pc, #52]	; (8002020 <MX_SPI2_Init+0xa4>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001fee:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <MX_SPI2_Init+0xa4>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001ff4:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <MX_SPI2_Init+0xa4>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001ffa:	4b09      	ldr	r3, [pc, #36]	; (8002020 <MX_SPI2_Init+0xa4>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002000:	4b07      	ldr	r3, [pc, #28]	; (8002020 <MX_SPI2_Init+0xa4>)
 8002002:	2200      	movs	r2, #0
 8002004:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <MX_SPI2_Init+0xa4>)
 8002008:	2200      	movs	r2, #0
 800200a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800200c:	4804      	ldr	r0, [pc, #16]	; (8002020 <MX_SPI2_Init+0xa4>)
 800200e:	f00c fbd9 	bl	800e7c4 <HAL_SPI_Init>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8002018:	f000 fc5a 	bl	80028d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800201c:	bf00      	nop
 800201e:	bd80      	pop	{r7, pc}
 8002020:	24000fc0 	.word	0x24000fc0
 8002024:	40003800 	.word	0x40003800

08002028 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800202c:	4b27      	ldr	r3, [pc, #156]	; (80020cc <MX_SPI3_Init+0xa4>)
 800202e:	4a28      	ldr	r2, [pc, #160]	; (80020d0 <MX_SPI3_Init+0xa8>)
 8002030:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002032:	4b26      	ldr	r3, [pc, #152]	; (80020cc <MX_SPI3_Init+0xa4>)
 8002034:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002038:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800203a:	4b24      	ldr	r3, [pc, #144]	; (80020cc <MX_SPI3_Init+0xa4>)
 800203c:	2200      	movs	r2, #0
 800203e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002040:	4b22      	ldr	r3, [pc, #136]	; (80020cc <MX_SPI3_Init+0xa4>)
 8002042:	2207      	movs	r2, #7
 8002044:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002046:	4b21      	ldr	r3, [pc, #132]	; (80020cc <MX_SPI3_Init+0xa4>)
 8002048:	2200      	movs	r2, #0
 800204a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800204c:	4b1f      	ldr	r3, [pc, #124]	; (80020cc <MX_SPI3_Init+0xa4>)
 800204e:	2200      	movs	r2, #0
 8002050:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002052:	4b1e      	ldr	r3, [pc, #120]	; (80020cc <MX_SPI3_Init+0xa4>)
 8002054:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002058:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800205a:	4b1c      	ldr	r3, [pc, #112]	; (80020cc <MX_SPI3_Init+0xa4>)
 800205c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002060:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002062:	4b1a      	ldr	r3, [pc, #104]	; (80020cc <MX_SPI3_Init+0xa4>)
 8002064:	2200      	movs	r2, #0
 8002066:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002068:	4b18      	ldr	r3, [pc, #96]	; (80020cc <MX_SPI3_Init+0xa4>)
 800206a:	2200      	movs	r2, #0
 800206c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800206e:	4b17      	ldr	r3, [pc, #92]	; (80020cc <MX_SPI3_Init+0xa4>)
 8002070:	2200      	movs	r2, #0
 8002072:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8002074:	4b15      	ldr	r3, [pc, #84]	; (80020cc <MX_SPI3_Init+0xa4>)
 8002076:	2200      	movs	r2, #0
 8002078:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800207a:	4b14      	ldr	r3, [pc, #80]	; (80020cc <MX_SPI3_Init+0xa4>)
 800207c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002080:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002082:	4b12      	ldr	r3, [pc, #72]	; (80020cc <MX_SPI3_Init+0xa4>)
 8002084:	2200      	movs	r2, #0
 8002086:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002088:	4b10      	ldr	r3, [pc, #64]	; (80020cc <MX_SPI3_Init+0xa4>)
 800208a:	2200      	movs	r2, #0
 800208c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800208e:	4b0f      	ldr	r3, [pc, #60]	; (80020cc <MX_SPI3_Init+0xa4>)
 8002090:	2200      	movs	r2, #0
 8002092:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002094:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <MX_SPI3_Init+0xa4>)
 8002096:	2200      	movs	r2, #0
 8002098:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800209a:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <MX_SPI3_Init+0xa4>)
 800209c:	2200      	movs	r2, #0
 800209e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80020a0:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <MX_SPI3_Init+0xa4>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80020a6:	4b09      	ldr	r3, [pc, #36]	; (80020cc <MX_SPI3_Init+0xa4>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80020ac:	4b07      	ldr	r3, [pc, #28]	; (80020cc <MX_SPI3_Init+0xa4>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80020b2:	4b06      	ldr	r3, [pc, #24]	; (80020cc <MX_SPI3_Init+0xa4>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80020b8:	4804      	ldr	r0, [pc, #16]	; (80020cc <MX_SPI3_Init+0xa4>)
 80020ba:	f00c fb83 	bl	800e7c4 <HAL_SPI_Init>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 80020c4:	f000 fc04 	bl	80028d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80020c8:	bf00      	nop
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	24001048 	.word	0x24001048
 80020d0:	40003c00 	.word	0x40003c00

080020d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08a      	sub	sp, #40	; 0x28
 80020d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020da:	f107 031c 	add.w	r3, r7, #28
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	605a      	str	r2, [r3, #4]
 80020e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020e6:	463b      	mov	r3, r7
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	611a      	str	r2, [r3, #16]
 80020f4:	615a      	str	r2, [r3, #20]
 80020f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020f8:	4b21      	ldr	r3, [pc, #132]	; (8002180 <MX_TIM2_Init+0xac>)
 80020fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002100:	4b1f      	ldr	r3, [pc, #124]	; (8002180 <MX_TIM2_Init+0xac>)
 8002102:	2200      	movs	r2, #0
 8002104:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002106:	4b1e      	ldr	r3, [pc, #120]	; (8002180 <MX_TIM2_Init+0xac>)
 8002108:	2200      	movs	r2, #0
 800210a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 800210c:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <MX_TIM2_Init+0xac>)
 800210e:	225a      	movs	r2, #90	; 0x5a
 8002110:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002112:	4b1b      	ldr	r3, [pc, #108]	; (8002180 <MX_TIM2_Init+0xac>)
 8002114:	2200      	movs	r2, #0
 8002116:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002118:	4b19      	ldr	r3, [pc, #100]	; (8002180 <MX_TIM2_Init+0xac>)
 800211a:	2200      	movs	r2, #0
 800211c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800211e:	4818      	ldr	r0, [pc, #96]	; (8002180 <MX_TIM2_Init+0xac>)
 8002120:	f00d f8e9 	bl	800f2f6 <HAL_TIM_PWM_Init>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800212a:	f000 fbd1 	bl	80028d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800212e:	2300      	movs	r3, #0
 8002130:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002132:	2300      	movs	r3, #0
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002136:	f107 031c 	add.w	r3, r7, #28
 800213a:	4619      	mov	r1, r3
 800213c:	4810      	ldr	r0, [pc, #64]	; (8002180 <MX_TIM2_Init+0xac>)
 800213e:	f00e fb6f 	bl	8010820 <HAL_TIMEx_MasterConfigSynchronization>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002148:	f000 fbc2 	bl	80028d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800214c:	2360      	movs	r3, #96	; 0x60
 800214e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002154:	2300      	movs	r3, #0
 8002156:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002158:	2300      	movs	r3, #0
 800215a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800215c:	463b      	mov	r3, r7
 800215e:	2208      	movs	r2, #8
 8002160:	4619      	mov	r1, r3
 8002162:	4807      	ldr	r0, [pc, #28]	; (8002180 <MX_TIM2_Init+0xac>)
 8002164:	f00d fd8e 	bl	800fc84 <HAL_TIM_PWM_ConfigChannel>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800216e:	f000 fbaf 	bl	80028d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002172:	4803      	ldr	r0, [pc, #12]	; (8002180 <MX_TIM2_Init+0xac>)
 8002174:	f001 f8a0 	bl	80032b8 <HAL_TIM_MspPostInit>

}
 8002178:	bf00      	nop
 800217a:	3728      	adds	r7, #40	; 0x28
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	240010d0 	.word	0x240010d0

08002184 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08a      	sub	sp, #40	; 0x28
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800218a:	f107 031c 	add.w	r3, r7, #28
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	605a      	str	r2, [r3, #4]
 8002194:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002196:	463b      	mov	r3, r7
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	611a      	str	r2, [r3, #16]
 80021a4:	615a      	str	r2, [r3, #20]
 80021a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021a8:	4b26      	ldr	r3, [pc, #152]	; (8002244 <MX_TIM3_Init+0xc0>)
 80021aa:	4a27      	ldr	r2, [pc, #156]	; (8002248 <MX_TIM3_Init+0xc4>)
 80021ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80021ae:	4b25      	ldr	r3, [pc, #148]	; (8002244 <MX_TIM3_Init+0xc0>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b4:	4b23      	ldr	r3, [pc, #140]	; (8002244 <MX_TIM3_Init+0xc0>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 80021ba:	4b22      	ldr	r3, [pc, #136]	; (8002244 <MX_TIM3_Init+0xc0>)
 80021bc:	225a      	movs	r2, #90	; 0x5a
 80021be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c0:	4b20      	ldr	r3, [pc, #128]	; (8002244 <MX_TIM3_Init+0xc0>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c6:	4b1f      	ldr	r3, [pc, #124]	; (8002244 <MX_TIM3_Init+0xc0>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80021cc:	481d      	ldr	r0, [pc, #116]	; (8002244 <MX_TIM3_Init+0xc0>)
 80021ce:	f00d f892 	bl	800f2f6 <HAL_TIM_PWM_Init>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80021d8:	f000 fb7a 	bl	80028d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021dc:	2300      	movs	r3, #0
 80021de:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021e0:	2300      	movs	r3, #0
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021e4:	f107 031c 	add.w	r3, r7, #28
 80021e8:	4619      	mov	r1, r3
 80021ea:	4816      	ldr	r0, [pc, #88]	; (8002244 <MX_TIM3_Init+0xc0>)
 80021ec:	f00e fb18 	bl	8010820 <HAL_TIMEx_MasterConfigSynchronization>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80021f6:	f000 fb6b 	bl	80028d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021fa:	2360      	movs	r3, #96	; 0x60
 80021fc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80021fe:	2300      	movs	r3, #0
 8002200:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002202:	2300      	movs	r3, #0
 8002204:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002206:	2300      	movs	r3, #0
 8002208:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800220a:	463b      	mov	r3, r7
 800220c:	2200      	movs	r2, #0
 800220e:	4619      	mov	r1, r3
 8002210:	480c      	ldr	r0, [pc, #48]	; (8002244 <MX_TIM3_Init+0xc0>)
 8002212:	f00d fd37 	bl	800fc84 <HAL_TIM_PWM_ConfigChannel>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800221c:	f000 fb58 	bl	80028d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002220:	463b      	mov	r3, r7
 8002222:	2204      	movs	r2, #4
 8002224:	4619      	mov	r1, r3
 8002226:	4807      	ldr	r0, [pc, #28]	; (8002244 <MX_TIM3_Init+0xc0>)
 8002228:	f00d fd2c 	bl	800fc84 <HAL_TIM_PWM_ConfigChannel>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002232:	f000 fb4d 	bl	80028d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002236:	4803      	ldr	r0, [pc, #12]	; (8002244 <MX_TIM3_Init+0xc0>)
 8002238:	f001 f83e 	bl	80032b8 <HAL_TIM_MspPostInit>

}
 800223c:	bf00      	nop
 800223e:	3728      	adds	r7, #40	; 0x28
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	2400111c 	.word	0x2400111c
 8002248:	40000400 	.word	0x40000400

0800224c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08a      	sub	sp, #40	; 0x28
 8002250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002252:	f107 031c 	add.w	r3, r7, #28
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	605a      	str	r2, [r3, #4]
 800225c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800225e:	463b      	mov	r3, r7
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	60da      	str	r2, [r3, #12]
 800226a:	611a      	str	r2, [r3, #16]
 800226c:	615a      	str	r2, [r3, #20]
 800226e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002270:	4b32      	ldr	r3, [pc, #200]	; (800233c <MX_TIM4_Init+0xf0>)
 8002272:	4a33      	ldr	r2, [pc, #204]	; (8002340 <MX_TIM4_Init+0xf4>)
 8002274:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 28;
 8002276:	4b31      	ldr	r3, [pc, #196]	; (800233c <MX_TIM4_Init+0xf0>)
 8002278:	221c      	movs	r2, #28
 800227a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800227c:	4b2f      	ldr	r3, [pc, #188]	; (800233c <MX_TIM4_Init+0xf0>)
 800227e:	2200      	movs	r2, #0
 8002280:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8002282:	4b2e      	ldr	r3, [pc, #184]	; (800233c <MX_TIM4_Init+0xf0>)
 8002284:	f242 720f 	movw	r2, #9999	; 0x270f
 8002288:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800228a:	4b2c      	ldr	r3, [pc, #176]	; (800233c <MX_TIM4_Init+0xf0>)
 800228c:	2200      	movs	r2, #0
 800228e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002290:	4b2a      	ldr	r3, [pc, #168]	; (800233c <MX_TIM4_Init+0xf0>)
 8002292:	2200      	movs	r2, #0
 8002294:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002296:	4829      	ldr	r0, [pc, #164]	; (800233c <MX_TIM4_Init+0xf0>)
 8002298:	f00d f82d 	bl	800f2f6 <HAL_TIM_PWM_Init>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80022a2:	f000 fb15 	bl	80028d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022a6:	2300      	movs	r3, #0
 80022a8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022aa:	2300      	movs	r3, #0
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80022ae:	f107 031c 	add.w	r3, r7, #28
 80022b2:	4619      	mov	r1, r3
 80022b4:	4821      	ldr	r0, [pc, #132]	; (800233c <MX_TIM4_Init+0xf0>)
 80022b6:	f00e fab3 	bl	8010820 <HAL_TIMEx_MasterConfigSynchronization>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80022c0:	f000 fb06 	bl	80028d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022c4:	2360      	movs	r3, #96	; 0x60
 80022c6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022cc:	2300      	movs	r3, #0
 80022ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022d0:	2300      	movs	r3, #0
 80022d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022d4:	463b      	mov	r3, r7
 80022d6:	2200      	movs	r2, #0
 80022d8:	4619      	mov	r1, r3
 80022da:	4818      	ldr	r0, [pc, #96]	; (800233c <MX_TIM4_Init+0xf0>)
 80022dc:	f00d fcd2 	bl	800fc84 <HAL_TIM_PWM_ConfigChannel>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80022e6:	f000 faf3 	bl	80028d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022ea:	463b      	mov	r3, r7
 80022ec:	2204      	movs	r2, #4
 80022ee:	4619      	mov	r1, r3
 80022f0:	4812      	ldr	r0, [pc, #72]	; (800233c <MX_TIM4_Init+0xf0>)
 80022f2:	f00d fcc7 	bl	800fc84 <HAL_TIM_PWM_ConfigChannel>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80022fc:	f000 fae8 	bl	80028d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002300:	463b      	mov	r3, r7
 8002302:	2208      	movs	r2, #8
 8002304:	4619      	mov	r1, r3
 8002306:	480d      	ldr	r0, [pc, #52]	; (800233c <MX_TIM4_Init+0xf0>)
 8002308:	f00d fcbc 	bl	800fc84 <HAL_TIM_PWM_ConfigChannel>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8002312:	f000 fadd 	bl	80028d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002316:	463b      	mov	r3, r7
 8002318:	220c      	movs	r2, #12
 800231a:	4619      	mov	r1, r3
 800231c:	4807      	ldr	r0, [pc, #28]	; (800233c <MX_TIM4_Init+0xf0>)
 800231e:	f00d fcb1 	bl	800fc84 <HAL_TIM_PWM_ConfigChannel>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8002328:	f000 fad2 	bl	80028d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800232c:	4803      	ldr	r0, [pc, #12]	; (800233c <MX_TIM4_Init+0xf0>)
 800232e:	f000 ffc3 	bl	80032b8 <HAL_TIM_MspPostInit>

}
 8002332:	bf00      	nop
 8002334:	3728      	adds	r7, #40	; 0x28
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	24001168 	.word	0x24001168
 8002340:	40000800 	.word	0x40000800

08002344 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b08a      	sub	sp, #40	; 0x28
 8002348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800234a:	f107 031c 	add.w	r3, r7, #28
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	605a      	str	r2, [r3, #4]
 8002354:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002356:	463b      	mov	r3, r7
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	611a      	str	r2, [r3, #16]
 8002364:	615a      	str	r2, [r3, #20]
 8002366:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002368:	4b21      	ldr	r3, [pc, #132]	; (80023f0 <MX_TIM5_Init+0xac>)
 800236a:	4a22      	ldr	r2, [pc, #136]	; (80023f4 <MX_TIM5_Init+0xb0>)
 800236c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800236e:	4b20      	ldr	r3, [pc, #128]	; (80023f0 <MX_TIM5_Init+0xac>)
 8002370:	2200      	movs	r2, #0
 8002372:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002374:	4b1e      	ldr	r3, [pc, #120]	; (80023f0 <MX_TIM5_Init+0xac>)
 8002376:	2200      	movs	r2, #0
 8002378:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 800237a:	4b1d      	ldr	r3, [pc, #116]	; (80023f0 <MX_TIM5_Init+0xac>)
 800237c:	225a      	movs	r2, #90	; 0x5a
 800237e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002380:	4b1b      	ldr	r3, [pc, #108]	; (80023f0 <MX_TIM5_Init+0xac>)
 8002382:	2200      	movs	r2, #0
 8002384:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002386:	4b1a      	ldr	r3, [pc, #104]	; (80023f0 <MX_TIM5_Init+0xac>)
 8002388:	2200      	movs	r2, #0
 800238a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800238c:	4818      	ldr	r0, [pc, #96]	; (80023f0 <MX_TIM5_Init+0xac>)
 800238e:	f00c ffb2 	bl	800f2f6 <HAL_TIM_PWM_Init>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002398:	f000 fa9a 	bl	80028d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800239c:	2300      	movs	r3, #0
 800239e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023a0:	2300      	movs	r3, #0
 80023a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80023a4:	f107 031c 	add.w	r3, r7, #28
 80023a8:	4619      	mov	r1, r3
 80023aa:	4811      	ldr	r0, [pc, #68]	; (80023f0 <MX_TIM5_Init+0xac>)
 80023ac:	f00e fa38 	bl	8010820 <HAL_TIMEx_MasterConfigSynchronization>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80023b6:	f000 fa8b 	bl	80028d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023ba:	2360      	movs	r3, #96	; 0x60
 80023bc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023c2:	2300      	movs	r3, #0
 80023c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023c6:	2300      	movs	r3, #0
 80023c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023ca:	463b      	mov	r3, r7
 80023cc:	220c      	movs	r2, #12
 80023ce:	4619      	mov	r1, r3
 80023d0:	4807      	ldr	r0, [pc, #28]	; (80023f0 <MX_TIM5_Init+0xac>)
 80023d2:	f00d fc57 	bl	800fc84 <HAL_TIM_PWM_ConfigChannel>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80023dc:	f000 fa78 	bl	80028d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80023e0:	4803      	ldr	r0, [pc, #12]	; (80023f0 <MX_TIM5_Init+0xac>)
 80023e2:	f000 ff69 	bl	80032b8 <HAL_TIM_MspPostInit>

}
 80023e6:	bf00      	nop
 80023e8:	3728      	adds	r7, #40	; 0x28
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	240011b4 	.word	0x240011b4
 80023f4:	40000c00 	.word	0x40000c00

080023f8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80023fc:	4b22      	ldr	r3, [pc, #136]	; (8002488 <MX_UART4_Init+0x90>)
 80023fe:	4a23      	ldr	r2, [pc, #140]	; (800248c <MX_UART4_Init+0x94>)
 8002400:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002402:	4b21      	ldr	r3, [pc, #132]	; (8002488 <MX_UART4_Init+0x90>)
 8002404:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002408:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800240a:	4b1f      	ldr	r3, [pc, #124]	; (8002488 <MX_UART4_Init+0x90>)
 800240c:	2200      	movs	r2, #0
 800240e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002410:	4b1d      	ldr	r3, [pc, #116]	; (8002488 <MX_UART4_Init+0x90>)
 8002412:	2200      	movs	r2, #0
 8002414:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002416:	4b1c      	ldr	r3, [pc, #112]	; (8002488 <MX_UART4_Init+0x90>)
 8002418:	2200      	movs	r2, #0
 800241a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800241c:	4b1a      	ldr	r3, [pc, #104]	; (8002488 <MX_UART4_Init+0x90>)
 800241e:	220c      	movs	r2, #12
 8002420:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002422:	4b19      	ldr	r3, [pc, #100]	; (8002488 <MX_UART4_Init+0x90>)
 8002424:	2200      	movs	r2, #0
 8002426:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002428:	4b17      	ldr	r3, [pc, #92]	; (8002488 <MX_UART4_Init+0x90>)
 800242a:	2200      	movs	r2, #0
 800242c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800242e:	4b16      	ldr	r3, [pc, #88]	; (8002488 <MX_UART4_Init+0x90>)
 8002430:	2200      	movs	r2, #0
 8002432:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002434:	4b14      	ldr	r3, [pc, #80]	; (8002488 <MX_UART4_Init+0x90>)
 8002436:	2200      	movs	r2, #0
 8002438:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800243a:	4b13      	ldr	r3, [pc, #76]	; (8002488 <MX_UART4_Init+0x90>)
 800243c:	2200      	movs	r2, #0
 800243e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002440:	4811      	ldr	r0, [pc, #68]	; (8002488 <MX_UART4_Init+0x90>)
 8002442:	f00e faa7 	bl	8010994 <HAL_UART_Init>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800244c:	f000 fa40 	bl	80028d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002450:	2100      	movs	r1, #0
 8002452:	480d      	ldr	r0, [pc, #52]	; (8002488 <MX_UART4_Init+0x90>)
 8002454:	f00f fbad 	bl	8011bb2 <HAL_UARTEx_SetTxFifoThreshold>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800245e:	f000 fa37 	bl	80028d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002462:	2100      	movs	r1, #0
 8002464:	4808      	ldr	r0, [pc, #32]	; (8002488 <MX_UART4_Init+0x90>)
 8002466:	f00f fbe2 	bl	8011c2e <HAL_UARTEx_SetRxFifoThreshold>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002470:	f000 fa2e 	bl	80028d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002474:	4804      	ldr	r0, [pc, #16]	; (8002488 <MX_UART4_Init+0x90>)
 8002476:	f00f fb63 	bl	8011b40 <HAL_UARTEx_DisableFifoMode>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002480:	f000 fa26 	bl	80028d0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002484:	bf00      	nop
 8002486:	bd80      	pop	{r7, pc}
 8002488:	24001458 	.word	0x24001458
 800248c:	40004c00 	.word	0x40004c00

08002490 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002494:	4b22      	ldr	r3, [pc, #136]	; (8002520 <MX_USART6_UART_Init+0x90>)
 8002496:	4a23      	ldr	r2, [pc, #140]	; (8002524 <MX_USART6_UART_Init+0x94>)
 8002498:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800249a:	4b21      	ldr	r3, [pc, #132]	; (8002520 <MX_USART6_UART_Init+0x90>)
 800249c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024a0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80024a2:	4b1f      	ldr	r3, [pc, #124]	; (8002520 <MX_USART6_UART_Init+0x90>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80024a8:	4b1d      	ldr	r3, [pc, #116]	; (8002520 <MX_USART6_UART_Init+0x90>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80024ae:	4b1c      	ldr	r3, [pc, #112]	; (8002520 <MX_USART6_UART_Init+0x90>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80024b4:	4b1a      	ldr	r3, [pc, #104]	; (8002520 <MX_USART6_UART_Init+0x90>)
 80024b6:	220c      	movs	r2, #12
 80024b8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ba:	4b19      	ldr	r3, [pc, #100]	; (8002520 <MX_USART6_UART_Init+0x90>)
 80024bc:	2200      	movs	r2, #0
 80024be:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80024c0:	4b17      	ldr	r3, [pc, #92]	; (8002520 <MX_USART6_UART_Init+0x90>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024c6:	4b16      	ldr	r3, [pc, #88]	; (8002520 <MX_USART6_UART_Init+0x90>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024cc:	4b14      	ldr	r3, [pc, #80]	; (8002520 <MX_USART6_UART_Init+0x90>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024d2:	4b13      	ldr	r3, [pc, #76]	; (8002520 <MX_USART6_UART_Init+0x90>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80024d8:	4811      	ldr	r0, [pc, #68]	; (8002520 <MX_USART6_UART_Init+0x90>)
 80024da:	f00e fa5b 	bl	8010994 <HAL_UART_Init>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80024e4:	f000 f9f4 	bl	80028d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024e8:	2100      	movs	r1, #0
 80024ea:	480d      	ldr	r0, [pc, #52]	; (8002520 <MX_USART6_UART_Init+0x90>)
 80024ec:	f00f fb61 	bl	8011bb2 <HAL_UARTEx_SetTxFifoThreshold>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80024f6:	f000 f9eb 	bl	80028d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024fa:	2100      	movs	r1, #0
 80024fc:	4808      	ldr	r0, [pc, #32]	; (8002520 <MX_USART6_UART_Init+0x90>)
 80024fe:	f00f fb96 	bl	8011c2e <HAL_UARTEx_SetRxFifoThreshold>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002508:	f000 f9e2 	bl	80028d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 800250c:	4804      	ldr	r0, [pc, #16]	; (8002520 <MX_USART6_UART_Init+0x90>)
 800250e:	f00f fb17 	bl	8011b40 <HAL_UARTEx_DisableFifoMode>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002518:	f000 f9da 	bl	80028d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800251c:	bf00      	nop
 800251e:	bd80      	pop	{r7, pc}
 8002520:	240014ec 	.word	0x240014ec
 8002524:	40011400 	.word	0x40011400

08002528 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800252e:	4b2d      	ldr	r3, [pc, #180]	; (80025e4 <MX_DMA_Init+0xbc>)
 8002530:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002534:	4a2b      	ldr	r2, [pc, #172]	; (80025e4 <MX_DMA_Init+0xbc>)
 8002536:	f043 0301 	orr.w	r3, r3, #1
 800253a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800253e:	4b29      	ldr	r3, [pc, #164]	; (80025e4 <MX_DMA_Init+0xbc>)
 8002540:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	607b      	str	r3, [r7, #4]
 800254a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800254c:	4b25      	ldr	r3, [pc, #148]	; (80025e4 <MX_DMA_Init+0xbc>)
 800254e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002552:	4a24      	ldr	r2, [pc, #144]	; (80025e4 <MX_DMA_Init+0xbc>)
 8002554:	f043 0302 	orr.w	r3, r3, #2
 8002558:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800255c:	4b21      	ldr	r3, [pc, #132]	; (80025e4 <MX_DMA_Init+0xbc>)
 800255e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	603b      	str	r3, [r7, #0]
 8002568:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800256a:	2200      	movs	r2, #0
 800256c:	2100      	movs	r1, #0
 800256e:	200b      	movs	r0, #11
 8002570:	f002 fe9d 	bl	80052ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002574:	200b      	movs	r0, #11
 8002576:	f002 feb4 	bl	80052e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	2100      	movs	r1, #0
 800257e:	200c      	movs	r0, #12
 8002580:	f002 fe95 	bl	80052ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002584:	200c      	movs	r0, #12
 8002586:	f002 feac 	bl	80052e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800258a:	2200      	movs	r2, #0
 800258c:	2100      	movs	r1, #0
 800258e:	200d      	movs	r0, #13
 8002590:	f002 fe8d 	bl	80052ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002594:	200d      	movs	r0, #13
 8002596:	f002 fea4 	bl	80052e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800259a:	2200      	movs	r2, #0
 800259c:	2100      	movs	r1, #0
 800259e:	200e      	movs	r0, #14
 80025a0:	f002 fe85 	bl	80052ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80025a4:	200e      	movs	r0, #14
 80025a6:	f002 fe9c 	bl	80052e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80025aa:	2200      	movs	r2, #0
 80025ac:	2100      	movs	r1, #0
 80025ae:	200f      	movs	r0, #15
 80025b0:	f002 fe7d 	bl	80052ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80025b4:	200f      	movs	r0, #15
 80025b6:	f002 fe94 	bl	80052e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80025ba:	2200      	movs	r2, #0
 80025bc:	2100      	movs	r1, #0
 80025be:	2010      	movs	r0, #16
 80025c0:	f002 fe75 	bl	80052ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80025c4:	2010      	movs	r0, #16
 80025c6:	f002 fe8c 	bl	80052e2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80025ca:	2200      	movs	r2, #0
 80025cc:	2100      	movs	r1, #0
 80025ce:	2046      	movs	r0, #70	; 0x46
 80025d0:	f002 fe6d 	bl	80052ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80025d4:	2046      	movs	r0, #70	; 0x46
 80025d6:	f002 fe84 	bl	80052e2 <HAL_NVIC_EnableIRQ>

}
 80025da:	bf00      	nop
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	58024400 	.word	0x58024400

080025e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b08e      	sub	sp, #56	; 0x38
 80025ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	605a      	str	r2, [r3, #4]
 80025f8:	609a      	str	r2, [r3, #8]
 80025fa:	60da      	str	r2, [r3, #12]
 80025fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025fe:	4bac      	ldr	r3, [pc, #688]	; (80028b0 <MX_GPIO_Init+0x2c8>)
 8002600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002604:	4aaa      	ldr	r2, [pc, #680]	; (80028b0 <MX_GPIO_Init+0x2c8>)
 8002606:	f043 0310 	orr.w	r3, r3, #16
 800260a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800260e:	4ba8      	ldr	r3, [pc, #672]	; (80028b0 <MX_GPIO_Init+0x2c8>)
 8002610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002614:	f003 0310 	and.w	r3, r3, #16
 8002618:	623b      	str	r3, [r7, #32]
 800261a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800261c:	4ba4      	ldr	r3, [pc, #656]	; (80028b0 <MX_GPIO_Init+0x2c8>)
 800261e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002622:	4aa3      	ldr	r2, [pc, #652]	; (80028b0 <MX_GPIO_Init+0x2c8>)
 8002624:	f043 0320 	orr.w	r3, r3, #32
 8002628:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800262c:	4ba0      	ldr	r3, [pc, #640]	; (80028b0 <MX_GPIO_Init+0x2c8>)
 800262e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002632:	f003 0320 	and.w	r3, r3, #32
 8002636:	61fb      	str	r3, [r7, #28]
 8002638:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800263a:	4b9d      	ldr	r3, [pc, #628]	; (80028b0 <MX_GPIO_Init+0x2c8>)
 800263c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002640:	4a9b      	ldr	r2, [pc, #620]	; (80028b0 <MX_GPIO_Init+0x2c8>)
 8002642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002646:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800264a:	4b99      	ldr	r3, [pc, #612]	; (80028b0 <MX_GPIO_Init+0x2c8>)
 800264c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002654:	61bb      	str	r3, [r7, #24]
 8002656:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002658:	4b95      	ldr	r3, [pc, #596]	; (80028b0 <MX_GPIO_Init+0x2c8>)
 800265a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800265e:	4a94      	ldr	r2, [pc, #592]	; (80028b0 <MX_GPIO_Init+0x2c8>)
 8002660:	f043 0304 	orr.w	r3, r3, #4
 8002664:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002668:	4b91      	ldr	r3, [pc, #580]	; (80028b0 <MX_GPIO_Init+0x2c8>)
 800266a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800266e:	f003 0304 	and.w	r3, r3, #4
 8002672:	617b      	str	r3, [r7, #20]
 8002674:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002676:	4b8e      	ldr	r3, [pc, #568]	; (80028b0 <MX_GPIO_Init+0x2c8>)
 8002678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800267c:	4a8c      	ldr	r2, [pc, #560]	; (80028b0 <MX_GPIO_Init+0x2c8>)
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002686:	4b8a      	ldr	r3, [pc, #552]	; (80028b0 <MX_GPIO_Init+0x2c8>)
 8002688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002694:	4b86      	ldr	r3, [pc, #536]	; (80028b0 <MX_GPIO_Init+0x2c8>)
 8002696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800269a:	4a85      	ldr	r2, [pc, #532]	; (80028b0 <MX_GPIO_Init+0x2c8>)
 800269c:	f043 0302 	orr.w	r3, r3, #2
 80026a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026a4:	4b82      	ldr	r3, [pc, #520]	; (80028b0 <MX_GPIO_Init+0x2c8>)
 80026a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80026b2:	4b7f      	ldr	r3, [pc, #508]	; (80028b0 <MX_GPIO_Init+0x2c8>)
 80026b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026b8:	4a7d      	ldr	r2, [pc, #500]	; (80028b0 <MX_GPIO_Init+0x2c8>)
 80026ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026c2:	4b7b      	ldr	r3, [pc, #492]	; (80028b0 <MX_GPIO_Init+0x2c8>)
 80026c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026cc:	60bb      	str	r3, [r7, #8]
 80026ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026d0:	4b77      	ldr	r3, [pc, #476]	; (80028b0 <MX_GPIO_Init+0x2c8>)
 80026d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026d6:	4a76      	ldr	r2, [pc, #472]	; (80028b0 <MX_GPIO_Init+0x2c8>)
 80026d8:	f043 0308 	orr.w	r3, r3, #8
 80026dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026e0:	4b73      	ldr	r3, [pc, #460]	; (80028b0 <MX_GPIO_Init+0x2c8>)
 80026e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	607b      	str	r3, [r7, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 80026ee:	2200      	movs	r2, #0
 80026f0:	f241 5104 	movw	r1, #5380	; 0x1504
 80026f4:	486f      	ldr	r0, [pc, #444]	; (80028b4 <MX_GPIO_Init+0x2cc>)
 80026f6:	f005 fc07 	bl	8007f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|ARM2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 80026fa:	2200      	movs	r2, #0
 80026fc:	f248 0106 	movw	r1, #32774	; 0x8006
 8002700:	486d      	ldr	r0, [pc, #436]	; (80028b8 <MX_GPIO_Init+0x2d0>)
 8002702:	f005 fc01 	bl	8007f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002706:	2200      	movs	r2, #0
 8002708:	2130      	movs	r1, #48	; 0x30
 800270a:	486c      	ldr	r0, [pc, #432]	; (80028bc <MX_GPIO_Init+0x2d4>)
 800270c:	f005 fbfc 	bl	8007f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, GPIO_PIN_RESET);
 8002710:	2200      	movs	r2, #0
 8002712:	2102      	movs	r1, #2
 8002714:	486a      	ldr	r0, [pc, #424]	; (80028c0 <MX_GPIO_Init+0x2d8>)
 8002716:	f005 fbf7 	bl	8007f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 800271a:	2200      	movs	r2, #0
 800271c:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8002720:	4868      	ldr	r0, [pc, #416]	; (80028c4 <MX_GPIO_Init+0x2dc>)
 8002722:	f005 fbf1 	bl	8007f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002726:	2200      	movs	r2, #0
 8002728:	210e      	movs	r1, #14
 800272a:	4867      	ldr	r0, [pc, #412]	; (80028c8 <MX_GPIO_Init+0x2e0>)
 800272c:	f005 fbec 	bl	8007f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0, GPIO_PIN_RESET);
 8002730:	2200      	movs	r2, #0
 8002732:	f240 3101 	movw	r1, #769	; 0x301
 8002736:	4865      	ldr	r0, [pc, #404]	; (80028cc <MX_GPIO_Init+0x2e4>)
 8002738:	f005 fbe6 	bl	8007f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 800273c:	f241 5304 	movw	r3, #5380	; 0x1504
 8002740:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002742:	2301      	movs	r3, #1
 8002744:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002746:	2300      	movs	r3, #0
 8002748:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274a:	2300      	movs	r3, #0
 800274c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800274e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002752:	4619      	mov	r1, r3
 8002754:	4857      	ldr	r0, [pc, #348]	; (80028b4 <MX_GPIO_Init+0x2cc>)
 8002756:	f005 fa17 	bl	8007b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin ARM2_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|ARM2_Pin|GPIO_PIN_15;
 800275a:	f248 0306 	movw	r3, #32774	; 0x8006
 800275e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002760:	2301      	movs	r3, #1
 8002762:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002768:	2300      	movs	r3, #0
 800276a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800276c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002770:	4619      	mov	r1, r3
 8002772:	4851      	ldr	r0, [pc, #324]	; (80028b8 <MX_GPIO_Init+0x2d0>)
 8002774:	f005 fa08 	bl	8007b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002778:	2330      	movs	r3, #48	; 0x30
 800277a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800277c:	2301      	movs	r3, #1
 800277e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002780:	2300      	movs	r3, #0
 8002782:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002784:	2300      	movs	r3, #0
 8002786:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800278c:	4619      	mov	r1, r3
 800278e:	484b      	ldr	r0, [pc, #300]	; (80028bc <MX_GPIO_Init+0x2d4>)
 8002790:	f005 f9fa 	bl	8007b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PYRO1_Pin */
  GPIO_InitStruct.Pin = PYRO1_Pin;
 8002794:	2302      	movs	r3, #2
 8002796:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002798:	2301      	movs	r3, #1
 800279a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279c:	2300      	movs	r3, #0
 800279e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a0:	2300      	movs	r3, #0
 80027a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PYRO1_GPIO_Port, &GPIO_InitStruct);
 80027a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027a8:	4619      	mov	r1, r3
 80027aa:	4845      	ldr	r0, [pc, #276]	; (80028c0 <MX_GPIO_Init+0x2d8>)
 80027ac:	f005 f9ec 	bl	8007b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 80027b0:	2304      	movs	r3, #4
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027b4:	2300      	movs	r3, #0
 80027b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027b8:	2301      	movs	r3, #1
 80027ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 80027bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027c0:	4619      	mov	r1, r3
 80027c2:	483f      	ldr	r0, [pc, #252]	; (80028c0 <MX_GPIO_Init+0x2d8>)
 80027c4:	f005 f9e0 	bl	8007b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 80027c8:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 80027cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ce:	2301      	movs	r3, #1
 80027d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d6:	2300      	movs	r3, #0
 80027d8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027de:	4619      	mov	r1, r3
 80027e0:	4838      	ldr	r0, [pc, #224]	; (80028c4 <MX_GPIO_Init+0x2dc>)
 80027e2:	f005 f9d1 	bl	8007b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 80027e6:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ec:	2300      	movs	r3, #0
 80027ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027f0:	2301      	movs	r3, #1
 80027f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027f8:	4619      	mov	r1, r3
 80027fa:	4832      	ldr	r0, [pc, #200]	; (80028c4 <MX_GPIO_Init+0x2dc>)
 80027fc:	f005 f9c4 	bl	8007b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 8002800:	2301      	movs	r3, #1
 8002802:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002804:	2300      	movs	r3, #0
 8002806:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002808:	2301      	movs	r3, #1
 800280a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 800280c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002810:	4619      	mov	r1, r3
 8002812:	482d      	ldr	r0, [pc, #180]	; (80028c8 <MX_GPIO_Init+0x2e0>)
 8002814:	f005 f9b8 	bl	8007b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 8002818:	230e      	movs	r3, #14
 800281a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800281c:	2301      	movs	r3, #1
 800281e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002820:	2300      	movs	r3, #0
 8002822:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002824:	2300      	movs	r3, #0
 8002826:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800282c:	4619      	mov	r1, r3
 800282e:	4826      	ldr	r0, [pc, #152]	; (80028c8 <MX_GPIO_Init+0x2e0>)
 8002830:	f005 f9aa 	bl	8007b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 8002834:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800283a:	2300      	movs	r3, #0
 800283c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800283e:	2301      	movs	r3, #1
 8002840:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002846:	4619      	mov	r1, r3
 8002848:	481a      	ldr	r0, [pc, #104]	; (80028b4 <MX_GPIO_Init+0x2cc>)
 800284a:	f005 f99d 	bl	8007b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0;
 800284e:	f240 3301 	movw	r3, #769	; 0x301
 8002852:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002854:	2301      	movs	r3, #1
 8002856:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002858:	2300      	movs	r3, #0
 800285a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285c:	2300      	movs	r3, #0
 800285e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002864:	4619      	mov	r1, r3
 8002866:	4819      	ldr	r0, [pc, #100]	; (80028cc <MX_GPIO_Init+0x2e4>)
 8002868:	f005 f98e 	bl	8007b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 800286c:	2310      	movs	r3, #16
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002870:	2300      	movs	r3, #0
 8002872:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800287c:	4619      	mov	r1, r3
 800287e:	4812      	ldr	r0, [pc, #72]	; (80028c8 <MX_GPIO_Init+0x2e0>)
 8002880:	f005 f982 	bl	8007b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002884:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288a:	2302      	movs	r3, #2
 800288c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288e:	2300      	movs	r3, #0
 8002890:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002892:	2300      	movs	r3, #0
 8002894:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002896:	2300      	movs	r3, #0
 8002898:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800289a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800289e:	4619      	mov	r1, r3
 80028a0:	4805      	ldr	r0, [pc, #20]	; (80028b8 <MX_GPIO_Init+0x2d0>)
 80028a2:	f005 f971 	bl	8007b88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80028a6:	bf00      	nop
 80028a8:	3738      	adds	r7, #56	; 0x38
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	58024400 	.word	0x58024400
 80028b4:	58021000 	.word	0x58021000
 80028b8:	58020000 	.word	0x58020000
 80028bc:	58020800 	.word	0x58020800
 80028c0:	58020400 	.word	0x58020400
 80028c4:	58021400 	.word	0x58021400
 80028c8:	58021800 	.word	0x58021800
 80028cc:	58020c00 	.word	0x58020c00

080028d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028d4:	b672      	cpsid	i
}
 80028d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80028d8:	e7fe      	b.n	80028d8 <Error_Handler+0x8>
	...

080028dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028e2:	4b0a      	ldr	r3, [pc, #40]	; (800290c <HAL_MspInit+0x30>)
 80028e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028e8:	4a08      	ldr	r2, [pc, #32]	; (800290c <HAL_MspInit+0x30>)
 80028ea:	f043 0302 	orr.w	r3, r3, #2
 80028ee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80028f2:	4b06      	ldr	r3, [pc, #24]	; (800290c <HAL_MspInit+0x30>)
 80028f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	607b      	str	r3, [r7, #4]
 80028fe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	58024400 	.word	0x58024400

08002910 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b08c      	sub	sp, #48	; 0x30
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002918:	f107 031c 	add.w	r3, r7, #28
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	605a      	str	r2, [r3, #4]
 8002922:	609a      	str	r2, [r3, #8]
 8002924:	60da      	str	r2, [r3, #12]
 8002926:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a5d      	ldr	r2, [pc, #372]	; (8002aa4 <HAL_ADC_MspInit+0x194>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d159      	bne.n	80029e6 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002932:	4b5d      	ldr	r3, [pc, #372]	; (8002aa8 <HAL_ADC_MspInit+0x198>)
 8002934:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002938:	4a5b      	ldr	r2, [pc, #364]	; (8002aa8 <HAL_ADC_MspInit+0x198>)
 800293a:	f043 0320 	orr.w	r3, r3, #32
 800293e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002942:	4b59      	ldr	r3, [pc, #356]	; (8002aa8 <HAL_ADC_MspInit+0x198>)
 8002944:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002948:	f003 0320 	and.w	r3, r3, #32
 800294c:	61bb      	str	r3, [r7, #24]
 800294e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002950:	4b55      	ldr	r3, [pc, #340]	; (8002aa8 <HAL_ADC_MspInit+0x198>)
 8002952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002956:	4a54      	ldr	r2, [pc, #336]	; (8002aa8 <HAL_ADC_MspInit+0x198>)
 8002958:	f043 0304 	orr.w	r3, r3, #4
 800295c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002960:	4b51      	ldr	r3, [pc, #324]	; (8002aa8 <HAL_ADC_MspInit+0x198>)
 8002962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002966:	f003 0304 	and.w	r3, r3, #4
 800296a:	617b      	str	r3, [r7, #20]
 800296c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = ARM_CHECK_Pin;
 800296e:	2301      	movs	r3, #1
 8002970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002972:	2303      	movs	r3, #3
 8002974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002976:	2300      	movs	r3, #0
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 800297a:	f107 031c 	add.w	r3, r7, #28
 800297e:	4619      	mov	r1, r3
 8002980:	484a      	ldr	r0, [pc, #296]	; (8002aac <HAL_ADC_MspInit+0x19c>)
 8002982:	f005 f901 	bl	8007b88 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 8002986:	4b4a      	ldr	r3, [pc, #296]	; (8002ab0 <HAL_ADC_MspInit+0x1a0>)
 8002988:	4a4a      	ldr	r2, [pc, #296]	; (8002ab4 <HAL_ADC_MspInit+0x1a4>)
 800298a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800298c:	4b48      	ldr	r3, [pc, #288]	; (8002ab0 <HAL_ADC_MspInit+0x1a0>)
 800298e:	2209      	movs	r2, #9
 8002990:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002992:	4b47      	ldr	r3, [pc, #284]	; (8002ab0 <HAL_ADC_MspInit+0x1a0>)
 8002994:	2200      	movs	r2, #0
 8002996:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002998:	4b45      	ldr	r3, [pc, #276]	; (8002ab0 <HAL_ADC_MspInit+0x1a0>)
 800299a:	2200      	movs	r2, #0
 800299c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800299e:	4b44      	ldr	r3, [pc, #272]	; (8002ab0 <HAL_ADC_MspInit+0x1a0>)
 80029a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029a4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80029a6:	4b42      	ldr	r3, [pc, #264]	; (8002ab0 <HAL_ADC_MspInit+0x1a0>)
 80029a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029ac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80029ae:	4b40      	ldr	r3, [pc, #256]	; (8002ab0 <HAL_ADC_MspInit+0x1a0>)
 80029b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80029b6:	4b3e      	ldr	r3, [pc, #248]	; (8002ab0 <HAL_ADC_MspInit+0x1a0>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80029bc:	4b3c      	ldr	r3, [pc, #240]	; (8002ab0 <HAL_ADC_MspInit+0x1a0>)
 80029be:	2200      	movs	r2, #0
 80029c0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029c2:	4b3b      	ldr	r3, [pc, #236]	; (8002ab0 <HAL_ADC_MspInit+0x1a0>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80029c8:	4839      	ldr	r0, [pc, #228]	; (8002ab0 <HAL_ADC_MspInit+0x1a0>)
 80029ca:	f002 fca5 	bl	8005318 <HAL_DMA_Init>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80029d4:	f7ff ff7c 	bl	80028d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a35      	ldr	r2, [pc, #212]	; (8002ab0 <HAL_ADC_MspInit+0x1a0>)
 80029dc:	659a      	str	r2, [r3, #88]	; 0x58
 80029de:	4a34      	ldr	r2, [pc, #208]	; (8002ab0 <HAL_ADC_MspInit+0x1a0>)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80029e4:	e059      	b.n	8002a9a <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a33      	ldr	r2, [pc, #204]	; (8002ab8 <HAL_ADC_MspInit+0x1a8>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d154      	bne.n	8002a9a <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80029f0:	4b2d      	ldr	r3, [pc, #180]	; (8002aa8 <HAL_ADC_MspInit+0x198>)
 80029f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029f6:	4a2c      	ldr	r2, [pc, #176]	; (8002aa8 <HAL_ADC_MspInit+0x198>)
 80029f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a00:	4b29      	ldr	r3, [pc, #164]	; (8002aa8 <HAL_ADC_MspInit+0x198>)
 8002a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a0a:	613b      	str	r3, [r7, #16]
 8002a0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a0e:	4b26      	ldr	r3, [pc, #152]	; (8002aa8 <HAL_ADC_MspInit+0x198>)
 8002a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a14:	4a24      	ldr	r2, [pc, #144]	; (8002aa8 <HAL_ADC_MspInit+0x198>)
 8002a16:	f043 0304 	orr.w	r3, r3, #4
 8002a1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a1e:	4b22      	ldr	r3, [pc, #136]	; (8002aa8 <HAL_ADC_MspInit+0x198>)
 8002a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002a2c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002a30:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002a34:	f000 ffda 	bl	80039ec <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8002a38:	4b20      	ldr	r3, [pc, #128]	; (8002abc <HAL_ADC_MspInit+0x1ac>)
 8002a3a:	4a21      	ldr	r2, [pc, #132]	; (8002ac0 <HAL_ADC_MspInit+0x1b0>)
 8002a3c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002a3e:	4b1f      	ldr	r3, [pc, #124]	; (8002abc <HAL_ADC_MspInit+0x1ac>)
 8002a40:	2273      	movs	r2, #115	; 0x73
 8002a42:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a44:	4b1d      	ldr	r3, [pc, #116]	; (8002abc <HAL_ADC_MspInit+0x1ac>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a4a:	4b1c      	ldr	r3, [pc, #112]	; (8002abc <HAL_ADC_MspInit+0x1ac>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002a50:	4b1a      	ldr	r3, [pc, #104]	; (8002abc <HAL_ADC_MspInit+0x1ac>)
 8002a52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a56:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a58:	4b18      	ldr	r3, [pc, #96]	; (8002abc <HAL_ADC_MspInit+0x1ac>)
 8002a5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a5e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a60:	4b16      	ldr	r3, [pc, #88]	; (8002abc <HAL_ADC_MspInit+0x1ac>)
 8002a62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a66:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002a68:	4b14      	ldr	r3, [pc, #80]	; (8002abc <HAL_ADC_MspInit+0x1ac>)
 8002a6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a6e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002a70:	4b12      	ldr	r3, [pc, #72]	; (8002abc <HAL_ADC_MspInit+0x1ac>)
 8002a72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a76:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a78:	4b10      	ldr	r3, [pc, #64]	; (8002abc <HAL_ADC_MspInit+0x1ac>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002a7e:	480f      	ldr	r0, [pc, #60]	; (8002abc <HAL_ADC_MspInit+0x1ac>)
 8002a80:	f002 fc4a 	bl	8005318 <HAL_DMA_Init>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 8002a8a:	f7ff ff21 	bl	80028d0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a0a      	ldr	r2, [pc, #40]	; (8002abc <HAL_ADC_MspInit+0x1ac>)
 8002a92:	659a      	str	r2, [r3, #88]	; 0x58
 8002a94:	4a09      	ldr	r2, [pc, #36]	; (8002abc <HAL_ADC_MspInit+0x1ac>)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002a9a:	bf00      	nop
 8002a9c:	3730      	adds	r7, #48	; 0x30
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40022000 	.word	0x40022000
 8002aa8:	58024400 	.word	0x58024400
 8002aac:	58020800 	.word	0x58020800
 8002ab0:	24000cd8 	.word	0x24000cd8
 8002ab4:	40020088 	.word	0x40020088
 8002ab8:	58026000 	.word	0x58026000
 8002abc:	24000d50 	.word	0x24000d50
 8002ac0:	400204b8 	.word	0x400204b8

08002ac4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b0b8      	sub	sp, #224	; 0xe0
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002acc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	605a      	str	r2, [r3, #4]
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	60da      	str	r2, [r3, #12]
 8002ada:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002adc:	f107 0310 	add.w	r3, r7, #16
 8002ae0:	22b8      	movs	r2, #184	; 0xb8
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f014 fa33 	bl	8016f50 <memset>
  if(hfdcan->Instance==FDCAN3)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a26      	ldr	r2, [pc, #152]	; (8002b88 <HAL_FDCAN_MspInit+0xc4>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d144      	bne.n	8002b7e <HAL_FDCAN_MspInit+0xba>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002af4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002af8:	f04f 0300 	mov.w	r3, #0
 8002afc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002b00:	2300      	movs	r3, #0
 8002b02:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b04:	f107 0310 	add.w	r3, r7, #16
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f007 fe11 	bl	800a730 <HAL_RCCEx_PeriphCLKConfig>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <HAL_FDCAN_MspInit+0x54>
    {
      Error_Handler();
 8002b14:	f7ff fedc 	bl	80028d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002b18:	4b1c      	ldr	r3, [pc, #112]	; (8002b8c <HAL_FDCAN_MspInit+0xc8>)
 8002b1a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002b1e:	4a1b      	ldr	r2, [pc, #108]	; (8002b8c <HAL_FDCAN_MspInit+0xc8>)
 8002b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b24:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002b28:	4b18      	ldr	r3, [pc, #96]	; (8002b8c <HAL_FDCAN_MspInit+0xc8>)
 8002b2a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b36:	4b15      	ldr	r3, [pc, #84]	; (8002b8c <HAL_FDCAN_MspInit+0xc8>)
 8002b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b3c:	4a13      	ldr	r2, [pc, #76]	; (8002b8c <HAL_FDCAN_MspInit+0xc8>)
 8002b3e:	f043 0320 	orr.w	r3, r3, #32
 8002b42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b46:	4b11      	ldr	r3, [pc, #68]	; (8002b8c <HAL_FDCAN_MspInit+0xc8>)
 8002b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b4c:	f003 0320 	and.w	r3, r3, #32
 8002b50:	60bb      	str	r3, [r7, #8]
 8002b52:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b54:	23c0      	movs	r3, #192	; 0xc0
 8002b56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b60:	2300      	movs	r3, #0
 8002b62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b66:	2300      	movs	r3, #0
 8002b68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b72:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b76:	4619      	mov	r1, r3
 8002b78:	4805      	ldr	r0, [pc, #20]	; (8002b90 <HAL_FDCAN_MspInit+0xcc>)
 8002b7a:	f005 f805 	bl	8007b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8002b7e:	bf00      	nop
 8002b80:	37e0      	adds	r7, #224	; 0xe0
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	4000d400 	.word	0x4000d400
 8002b8c:	58024400 	.word	0x58024400
 8002b90:	58021400 	.word	0x58021400

08002b94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b0b8      	sub	sp, #224	; 0xe0
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b9c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	605a      	str	r2, [r3, #4]
 8002ba6:	609a      	str	r2, [r3, #8]
 8002ba8:	60da      	str	r2, [r3, #12]
 8002baa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bac:	f107 0310 	add.w	r3, r7, #16
 8002bb0:	22b8      	movs	r2, #184	; 0xb8
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f014 f9cb 	bl	8016f50 <memset>
  if(hi2c->Instance==I2C2)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a26      	ldr	r2, [pc, #152]	; (8002c58 <HAL_I2C_MspInit+0xc4>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d145      	bne.n	8002c50 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002bc4:	f04f 0208 	mov.w	r2, #8
 8002bc8:	f04f 0300 	mov.w	r3, #0
 8002bcc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bd6:	f107 0310 	add.w	r3, r7, #16
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f007 fda8 	bl	800a730 <HAL_RCCEx_PeriphCLKConfig>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002be6:	f7ff fe73 	bl	80028d0 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002bea:	4b1c      	ldr	r3, [pc, #112]	; (8002c5c <HAL_I2C_MspInit+0xc8>)
 8002bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bf0:	4a1a      	ldr	r2, [pc, #104]	; (8002c5c <HAL_I2C_MspInit+0xc8>)
 8002bf2:	f043 0320 	orr.w	r3, r3, #32
 8002bf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bfa:	4b18      	ldr	r3, [pc, #96]	; (8002c5c <HAL_I2C_MspInit+0xc8>)
 8002bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c00:	f003 0320 	and.w	r3, r3, #32
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c0e:	2312      	movs	r3, #18
 8002c10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002c20:	2304      	movs	r3, #4
 8002c22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c26:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	480c      	ldr	r0, [pc, #48]	; (8002c60 <HAL_I2C_MspInit+0xcc>)
 8002c2e:	f004 ffab 	bl	8007b88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002c32:	4b0a      	ldr	r3, [pc, #40]	; (8002c5c <HAL_I2C_MspInit+0xc8>)
 8002c34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c38:	4a08      	ldr	r2, [pc, #32]	; (8002c5c <HAL_I2C_MspInit+0xc8>)
 8002c3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c3e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c42:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <HAL_I2C_MspInit+0xc8>)
 8002c44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c4c:	60bb      	str	r3, [r7, #8]
 8002c4e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002c50:	bf00      	nop
 8002c52:	37e0      	adds	r7, #224	; 0xe0
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40005800 	.word	0x40005800
 8002c5c:	58024400 	.word	0x58024400
 8002c60:	58021400 	.word	0x58021400

08002c64 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b0ba      	sub	sp, #232	; 0xe8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c6c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	605a      	str	r2, [r3, #4]
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	60da      	str	r2, [r3, #12]
 8002c7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c7c:	f107 0318 	add.w	r3, r7, #24
 8002c80:	22b8      	movs	r2, #184	; 0xb8
 8002c82:	2100      	movs	r1, #0
 8002c84:	4618      	mov	r0, r3
 8002c86:	f014 f963 	bl	8016f50 <memset>
  if(hsd->Instance==SDMMC2)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a5d      	ldr	r2, [pc, #372]	; (8002e04 <HAL_SD_MspInit+0x1a0>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	f040 80b3 	bne.w	8002dfc <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002c96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ca6:	f107 0318 	add.w	r3, r7, #24
 8002caa:	4618      	mov	r0, r3
 8002cac:	f007 fd40 	bl	800a730 <HAL_RCCEx_PeriphCLKConfig>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8002cb6:	f7ff fe0b 	bl	80028d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8002cba:	4b53      	ldr	r3, [pc, #332]	; (8002e08 <HAL_SD_MspInit+0x1a4>)
 8002cbc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002cc0:	4a51      	ldr	r2, [pc, #324]	; (8002e08 <HAL_SD_MspInit+0x1a4>)
 8002cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cc6:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002cca:	4b4f      	ldr	r3, [pc, #316]	; (8002e08 <HAL_SD_MspInit+0x1a4>)
 8002ccc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002cd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cd4:	617b      	str	r3, [r7, #20]
 8002cd6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cd8:	4b4b      	ldr	r3, [pc, #300]	; (8002e08 <HAL_SD_MspInit+0x1a4>)
 8002cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cde:	4a4a      	ldr	r2, [pc, #296]	; (8002e08 <HAL_SD_MspInit+0x1a4>)
 8002ce0:	f043 0308 	orr.w	r3, r3, #8
 8002ce4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ce8:	4b47      	ldr	r3, [pc, #284]	; (8002e08 <HAL_SD_MspInit+0x1a4>)
 8002cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cee:	f003 0308 	and.w	r3, r3, #8
 8002cf2:	613b      	str	r3, [r7, #16]
 8002cf4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002cf6:	4b44      	ldr	r3, [pc, #272]	; (8002e08 <HAL_SD_MspInit+0x1a4>)
 8002cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cfc:	4a42      	ldr	r2, [pc, #264]	; (8002e08 <HAL_SD_MspInit+0x1a4>)
 8002cfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d06:	4b40      	ldr	r3, [pc, #256]	; (8002e08 <HAL_SD_MspInit+0x1a4>)
 8002d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d14:	2340      	movs	r3, #64	; 0x40
 8002d16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d20:	2300      	movs	r3, #0
 8002d22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d26:	2303      	movs	r3, #3
 8002d28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002d2c:	230b      	movs	r3, #11
 8002d2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d32:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d36:	4619      	mov	r1, r3
 8002d38:	4834      	ldr	r0, [pc, #208]	; (8002e0c <HAL_SD_MspInit+0x1a8>)
 8002d3a:	f004 ff25 	bl	8007b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002d3e:	2380      	movs	r3, #128	; 0x80
 8002d40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d44:	2302      	movs	r3, #2
 8002d46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d50:	2303      	movs	r3, #3
 8002d52:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002d56:	230b      	movs	r3, #11
 8002d58:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d5c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d60:	4619      	mov	r1, r3
 8002d62:	482a      	ldr	r0, [pc, #168]	; (8002e0c <HAL_SD_MspInit+0x1a8>)
 8002d64:	f004 ff10 	bl	8007b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d6c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d70:	2302      	movs	r3, #2
 8002d72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d76:	2301      	movs	r3, #1
 8002d78:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002d82:	230b      	movs	r3, #11
 8002d84:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d88:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4820      	ldr	r0, [pc, #128]	; (8002e10 <HAL_SD_MspInit+0x1ac>)
 8002d90:	f004 fefa 	bl	8007b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da8:	2303      	movs	r3, #3
 8002daa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002dae:	230b      	movs	r3, #11
 8002db0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002db4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002db8:	4619      	mov	r1, r3
 8002dba:	4815      	ldr	r0, [pc, #84]	; (8002e10 <HAL_SD_MspInit+0x1ac>)
 8002dbc:	f004 fee4 	bl	8007b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002dc0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002dc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc8:	2302      	movs	r3, #2
 8002dca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8002dda:	230a      	movs	r3, #10
 8002ddc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002de0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002de4:	4619      	mov	r1, r3
 8002de6:	480a      	ldr	r0, [pc, #40]	; (8002e10 <HAL_SD_MspInit+0x1ac>)
 8002de8:	f004 fece 	bl	8007b88 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8002dec:	2200      	movs	r2, #0
 8002dee:	2100      	movs	r1, #0
 8002df0:	207c      	movs	r0, #124	; 0x7c
 8002df2:	f002 fa5c 	bl	80052ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8002df6:	207c      	movs	r0, #124	; 0x7c
 8002df8:	f002 fa73 	bl	80052e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8002dfc:	bf00      	nop
 8002dfe:	37e8      	adds	r7, #232	; 0xe8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	48022400 	.word	0x48022400
 8002e08:	58024400 	.word	0x58024400
 8002e0c:	58020c00 	.word	0x58020c00
 8002e10:	58021800 	.word	0x58021800

08002e14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b08e      	sub	sp, #56	; 0x38
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	605a      	str	r2, [r3, #4]
 8002e26:	609a      	str	r2, [r3, #8]
 8002e28:	60da      	str	r2, [r3, #12]
 8002e2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a4f      	ldr	r2, [pc, #316]	; (8002f70 <HAL_SPI_MspInit+0x15c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d12e      	bne.n	8002e94 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e36:	4b4f      	ldr	r3, [pc, #316]	; (8002f74 <HAL_SPI_MspInit+0x160>)
 8002e38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e3c:	4a4d      	ldr	r2, [pc, #308]	; (8002f74 <HAL_SPI_MspInit+0x160>)
 8002e3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e42:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002e46:	4b4b      	ldr	r3, [pc, #300]	; (8002f74 <HAL_SPI_MspInit+0x160>)
 8002e48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e50:	623b      	str	r3, [r7, #32]
 8002e52:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e54:	4b47      	ldr	r3, [pc, #284]	; (8002f74 <HAL_SPI_MspInit+0x160>)
 8002e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e5a:	4a46      	ldr	r2, [pc, #280]	; (8002f74 <HAL_SPI_MspInit+0x160>)
 8002e5c:	f043 0301 	orr.w	r3, r3, #1
 8002e60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e64:	4b43      	ldr	r3, [pc, #268]	; (8002f74 <HAL_SPI_MspInit+0x160>)
 8002e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	61fb      	str	r3, [r7, #28]
 8002e70:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002e72:	23e0      	movs	r3, #224	; 0xe0
 8002e74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e76:	2302      	movs	r3, #2
 8002e78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e82:	2305      	movs	r3, #5
 8002e84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	483a      	ldr	r0, [pc, #232]	; (8002f78 <HAL_SPI_MspInit+0x164>)
 8002e8e:	f004 fe7b 	bl	8007b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002e92:	e068      	b.n	8002f66 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a38      	ldr	r2, [pc, #224]	; (8002f7c <HAL_SPI_MspInit+0x168>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d12f      	bne.n	8002efe <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002e9e:	4b35      	ldr	r3, [pc, #212]	; (8002f74 <HAL_SPI_MspInit+0x160>)
 8002ea0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ea4:	4a33      	ldr	r2, [pc, #204]	; (8002f74 <HAL_SPI_MspInit+0x160>)
 8002ea6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eaa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002eae:	4b31      	ldr	r3, [pc, #196]	; (8002f74 <HAL_SPI_MspInit+0x160>)
 8002eb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002eb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eb8:	61bb      	str	r3, [r7, #24]
 8002eba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ebc:	4b2d      	ldr	r3, [pc, #180]	; (8002f74 <HAL_SPI_MspInit+0x160>)
 8002ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ec2:	4a2c      	ldr	r2, [pc, #176]	; (8002f74 <HAL_SPI_MspInit+0x160>)
 8002ec4:	f043 0302 	orr.w	r3, r3, #2
 8002ec8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ecc:	4b29      	ldr	r3, [pc, #164]	; (8002f74 <HAL_SPI_MspInit+0x160>)
 8002ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	617b      	str	r3, [r7, #20]
 8002ed8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002eda:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002ede:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002eec:	2305      	movs	r3, #5
 8002eee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4822      	ldr	r0, [pc, #136]	; (8002f80 <HAL_SPI_MspInit+0x16c>)
 8002ef8:	f004 fe46 	bl	8007b88 <HAL_GPIO_Init>
}
 8002efc:	e033      	b.n	8002f66 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a20      	ldr	r2, [pc, #128]	; (8002f84 <HAL_SPI_MspInit+0x170>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d12e      	bne.n	8002f66 <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002f08:	4b1a      	ldr	r3, [pc, #104]	; (8002f74 <HAL_SPI_MspInit+0x160>)
 8002f0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f0e:	4a19      	ldr	r2, [pc, #100]	; (8002f74 <HAL_SPI_MspInit+0x160>)
 8002f10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f14:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f18:	4b16      	ldr	r3, [pc, #88]	; (8002f74 <HAL_SPI_MspInit+0x160>)
 8002f1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f22:	613b      	str	r3, [r7, #16]
 8002f24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f26:	4b13      	ldr	r3, [pc, #76]	; (8002f74 <HAL_SPI_MspInit+0x160>)
 8002f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f2c:	4a11      	ldr	r2, [pc, #68]	; (8002f74 <HAL_SPI_MspInit+0x160>)
 8002f2e:	f043 0304 	orr.w	r3, r3, #4
 8002f32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f36:	4b0f      	ldr	r3, [pc, #60]	; (8002f74 <HAL_SPI_MspInit+0x160>)
 8002f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002f44:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f52:	2300      	movs	r3, #0
 8002f54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002f56:	2306      	movs	r3, #6
 8002f58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f5e:	4619      	mov	r1, r3
 8002f60:	4809      	ldr	r0, [pc, #36]	; (8002f88 <HAL_SPI_MspInit+0x174>)
 8002f62:	f004 fe11 	bl	8007b88 <HAL_GPIO_Init>
}
 8002f66:	bf00      	nop
 8002f68:	3738      	adds	r7, #56	; 0x38
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	40013000 	.word	0x40013000
 8002f74:	58024400 	.word	0x58024400
 8002f78:	58020000 	.word	0x58020000
 8002f7c:	40003800 	.word	0x40003800
 8002f80:	58020400 	.word	0x58020400
 8002f84:	40003c00 	.word	0x40003c00
 8002f88:	58020800 	.word	0x58020800

08002f8c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b08c      	sub	sp, #48	; 0x30
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f94:	f107 031c 	add.w	r3, r7, #28
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	605a      	str	r2, [r3, #4]
 8002f9e:	609a      	str	r2, [r3, #8]
 8002fa0:	60da      	str	r2, [r3, #12]
 8002fa2:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fac:	d15d      	bne.n	800306a <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fae:	4b8e      	ldr	r3, [pc, #568]	; (80031e8 <HAL_TIM_PWM_MspInit+0x25c>)
 8002fb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fb4:	4a8c      	ldr	r2, [pc, #560]	; (80031e8 <HAL_TIM_PWM_MspInit+0x25c>)
 8002fb6:	f043 0301 	orr.w	r3, r3, #1
 8002fba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002fbe:	4b8a      	ldr	r3, [pc, #552]	; (80031e8 <HAL_TIM_PWM_MspInit+0x25c>)
 8002fc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	61bb      	str	r3, [r7, #24]
 8002fca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fcc:	4b86      	ldr	r3, [pc, #536]	; (80031e8 <HAL_TIM_PWM_MspInit+0x25c>)
 8002fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fd2:	4a85      	ldr	r2, [pc, #532]	; (80031e8 <HAL_TIM_PWM_MspInit+0x25c>)
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fdc:	4b82      	ldr	r3, [pc, #520]	; (80031e8 <HAL_TIM_PWM_MspInit+0x25c>)
 8002fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	617b      	str	r3, [r7, #20]
 8002fe8:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002fea:	2301      	movs	r3, #1
 8002fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fee:	2302      	movs	r3, #2
 8002ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ffe:	f107 031c 	add.w	r3, r7, #28
 8003002:	4619      	mov	r1, r3
 8003004:	4879      	ldr	r0, [pc, #484]	; (80031ec <HAL_TIM_PWM_MspInit+0x260>)
 8003006:	f004 fdbf 	bl	8007b88 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 800300a:	4b79      	ldr	r3, [pc, #484]	; (80031f0 <HAL_TIM_PWM_MspInit+0x264>)
 800300c:	4a79      	ldr	r2, [pc, #484]	; (80031f4 <HAL_TIM_PWM_MspInit+0x268>)
 800300e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 8003010:	4b77      	ldr	r3, [pc, #476]	; (80031f0 <HAL_TIM_PWM_MspInit+0x264>)
 8003012:	2214      	movs	r2, #20
 8003014:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003016:	4b76      	ldr	r3, [pc, #472]	; (80031f0 <HAL_TIM_PWM_MspInit+0x264>)
 8003018:	2240      	movs	r2, #64	; 0x40
 800301a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800301c:	4b74      	ldr	r3, [pc, #464]	; (80031f0 <HAL_TIM_PWM_MspInit+0x264>)
 800301e:	2200      	movs	r2, #0
 8003020:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003022:	4b73      	ldr	r3, [pc, #460]	; (80031f0 <HAL_TIM_PWM_MspInit+0x264>)
 8003024:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003028:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800302a:	4b71      	ldr	r3, [pc, #452]	; (80031f0 <HAL_TIM_PWM_MspInit+0x264>)
 800302c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003030:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003032:	4b6f      	ldr	r3, [pc, #444]	; (80031f0 <HAL_TIM_PWM_MspInit+0x264>)
 8003034:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003038:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 800303a:	4b6d      	ldr	r3, [pc, #436]	; (80031f0 <HAL_TIM_PWM_MspInit+0x264>)
 800303c:	2200      	movs	r2, #0
 800303e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003040:	4b6b      	ldr	r3, [pc, #428]	; (80031f0 <HAL_TIM_PWM_MspInit+0x264>)
 8003042:	2200      	movs	r2, #0
 8003044:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003046:	4b6a      	ldr	r3, [pc, #424]	; (80031f0 <HAL_TIM_PWM_MspInit+0x264>)
 8003048:	2200      	movs	r2, #0
 800304a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 800304c:	4868      	ldr	r0, [pc, #416]	; (80031f0 <HAL_TIM_PWM_MspInit+0x264>)
 800304e:	f002 f963 	bl	8005318 <HAL_DMA_Init>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8003058:	f7ff fc3a 	bl	80028d0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a64      	ldr	r2, [pc, #400]	; (80031f0 <HAL_TIM_PWM_MspInit+0x264>)
 8003060:	62da      	str	r2, [r3, #44]	; 0x2c
 8003062:	4a63      	ldr	r2, [pc, #396]	; (80031f0 <HAL_TIM_PWM_MspInit+0x264>)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003068:	e119      	b.n	800329e <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a62      	ldr	r2, [pc, #392]	; (80031f8 <HAL_TIM_PWM_MspInit+0x26c>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d16d      	bne.n	8003150 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003074:	4b5c      	ldr	r3, [pc, #368]	; (80031e8 <HAL_TIM_PWM_MspInit+0x25c>)
 8003076:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800307a:	4a5b      	ldr	r2, [pc, #364]	; (80031e8 <HAL_TIM_PWM_MspInit+0x25c>)
 800307c:	f043 0302 	orr.w	r3, r3, #2
 8003080:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003084:	4b58      	ldr	r3, [pc, #352]	; (80031e8 <HAL_TIM_PWM_MspInit+0x25c>)
 8003086:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	613b      	str	r3, [r7, #16]
 8003090:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 8003092:	4b5a      	ldr	r3, [pc, #360]	; (80031fc <HAL_TIM_PWM_MspInit+0x270>)
 8003094:	4a5a      	ldr	r2, [pc, #360]	; (8003200 <HAL_TIM_PWM_MspInit+0x274>)
 8003096:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8003098:	4b58      	ldr	r3, [pc, #352]	; (80031fc <HAL_TIM_PWM_MspInit+0x270>)
 800309a:	2218      	movs	r2, #24
 800309c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800309e:	4b57      	ldr	r3, [pc, #348]	; (80031fc <HAL_TIM_PWM_MspInit+0x270>)
 80030a0:	2240      	movs	r2, #64	; 0x40
 80030a2:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80030a4:	4b55      	ldr	r3, [pc, #340]	; (80031fc <HAL_TIM_PWM_MspInit+0x270>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80030aa:	4b54      	ldr	r3, [pc, #336]	; (80031fc <HAL_TIM_PWM_MspInit+0x270>)
 80030ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030b0:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80030b2:	4b52      	ldr	r3, [pc, #328]	; (80031fc <HAL_TIM_PWM_MspInit+0x270>)
 80030b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030b8:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80030ba:	4b50      	ldr	r3, [pc, #320]	; (80031fc <HAL_TIM_PWM_MspInit+0x270>)
 80030bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030c0:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 80030c2:	4b4e      	ldr	r3, [pc, #312]	; (80031fc <HAL_TIM_PWM_MspInit+0x270>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80030c8:	4b4c      	ldr	r3, [pc, #304]	; (80031fc <HAL_TIM_PWM_MspInit+0x270>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030ce:	4b4b      	ldr	r3, [pc, #300]	; (80031fc <HAL_TIM_PWM_MspInit+0x270>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 80030d4:	4849      	ldr	r0, [pc, #292]	; (80031fc <HAL_TIM_PWM_MspInit+0x270>)
 80030d6:	f002 f91f 	bl	8005318 <HAL_DMA_Init>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 80030e0:	f7ff fbf6 	bl	80028d0 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a45      	ldr	r2, [pc, #276]	; (80031fc <HAL_TIM_PWM_MspInit+0x270>)
 80030e8:	629a      	str	r2, [r3, #40]	; 0x28
 80030ea:	4a44      	ldr	r2, [pc, #272]	; (80031fc <HAL_TIM_PWM_MspInit+0x270>)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 80030f0:	4b44      	ldr	r3, [pc, #272]	; (8003204 <HAL_TIM_PWM_MspInit+0x278>)
 80030f2:	4a45      	ldr	r2, [pc, #276]	; (8003208 <HAL_TIM_PWM_MspInit+0x27c>)
 80030f4:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 80030f6:	4b43      	ldr	r3, [pc, #268]	; (8003204 <HAL_TIM_PWM_MspInit+0x278>)
 80030f8:	2217      	movs	r2, #23
 80030fa:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030fc:	4b41      	ldr	r3, [pc, #260]	; (8003204 <HAL_TIM_PWM_MspInit+0x278>)
 80030fe:	2240      	movs	r2, #64	; 0x40
 8003100:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003102:	4b40      	ldr	r3, [pc, #256]	; (8003204 <HAL_TIM_PWM_MspInit+0x278>)
 8003104:	2200      	movs	r2, #0
 8003106:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003108:	4b3e      	ldr	r3, [pc, #248]	; (8003204 <HAL_TIM_PWM_MspInit+0x278>)
 800310a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800310e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003110:	4b3c      	ldr	r3, [pc, #240]	; (8003204 <HAL_TIM_PWM_MspInit+0x278>)
 8003112:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003116:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003118:	4b3a      	ldr	r3, [pc, #232]	; (8003204 <HAL_TIM_PWM_MspInit+0x278>)
 800311a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800311e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8003120:	4b38      	ldr	r3, [pc, #224]	; (8003204 <HAL_TIM_PWM_MspInit+0x278>)
 8003122:	2200      	movs	r2, #0
 8003124:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003126:	4b37      	ldr	r3, [pc, #220]	; (8003204 <HAL_TIM_PWM_MspInit+0x278>)
 8003128:	2200      	movs	r2, #0
 800312a:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800312c:	4b35      	ldr	r3, [pc, #212]	; (8003204 <HAL_TIM_PWM_MspInit+0x278>)
 800312e:	2200      	movs	r2, #0
 8003130:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8003132:	4834      	ldr	r0, [pc, #208]	; (8003204 <HAL_TIM_PWM_MspInit+0x278>)
 8003134:	f002 f8f0 	bl	8005318 <HAL_DMA_Init>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 800313e:	f7ff fbc7 	bl	80028d0 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a2f      	ldr	r2, [pc, #188]	; (8003204 <HAL_TIM_PWM_MspInit+0x278>)
 8003146:	625a      	str	r2, [r3, #36]	; 0x24
 8003148:	4a2e      	ldr	r2, [pc, #184]	; (8003204 <HAL_TIM_PWM_MspInit+0x278>)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800314e:	e0a6      	b.n	800329e <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a2d      	ldr	r2, [pc, #180]	; (800320c <HAL_TIM_PWM_MspInit+0x280>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d15e      	bne.n	8003218 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800315a:	4b23      	ldr	r3, [pc, #140]	; (80031e8 <HAL_TIM_PWM_MspInit+0x25c>)
 800315c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003160:	4a21      	ldr	r2, [pc, #132]	; (80031e8 <HAL_TIM_PWM_MspInit+0x25c>)
 8003162:	f043 0304 	orr.w	r3, r3, #4
 8003166:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800316a:	4b1f      	ldr	r3, [pc, #124]	; (80031e8 <HAL_TIM_PWM_MspInit+0x25c>)
 800316c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8003178:	4b25      	ldr	r3, [pc, #148]	; (8003210 <HAL_TIM_PWM_MspInit+0x284>)
 800317a:	4a26      	ldr	r2, [pc, #152]	; (8003214 <HAL_TIM_PWM_MspInit+0x288>)
 800317c:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 800317e:	4b24      	ldr	r3, [pc, #144]	; (8003210 <HAL_TIM_PWM_MspInit+0x284>)
 8003180:	221f      	movs	r2, #31
 8003182:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003184:	4b22      	ldr	r3, [pc, #136]	; (8003210 <HAL_TIM_PWM_MspInit+0x284>)
 8003186:	2240      	movs	r2, #64	; 0x40
 8003188:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800318a:	4b21      	ldr	r3, [pc, #132]	; (8003210 <HAL_TIM_PWM_MspInit+0x284>)
 800318c:	2200      	movs	r2, #0
 800318e:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003190:	4b1f      	ldr	r3, [pc, #124]	; (8003210 <HAL_TIM_PWM_MspInit+0x284>)
 8003192:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003196:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003198:	4b1d      	ldr	r3, [pc, #116]	; (8003210 <HAL_TIM_PWM_MspInit+0x284>)
 800319a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800319e:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80031a0:	4b1b      	ldr	r3, [pc, #108]	; (8003210 <HAL_TIM_PWM_MspInit+0x284>)
 80031a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031a6:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 80031a8:	4b19      	ldr	r3, [pc, #100]	; (8003210 <HAL_TIM_PWM_MspInit+0x284>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80031ae:	4b18      	ldr	r3, [pc, #96]	; (8003210 <HAL_TIM_PWM_MspInit+0x284>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031b4:	4b16      	ldr	r3, [pc, #88]	; (8003210 <HAL_TIM_PWM_MspInit+0x284>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 80031ba:	4815      	ldr	r0, [pc, #84]	; (8003210 <HAL_TIM_PWM_MspInit+0x284>)
 80031bc:	f002 f8ac 	bl	8005318 <HAL_DMA_Init>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 80031c6:	f7ff fb83 	bl	80028d0 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a10      	ldr	r2, [pc, #64]	; (8003210 <HAL_TIM_PWM_MspInit+0x284>)
 80031ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80031d0:	4a0f      	ldr	r2, [pc, #60]	; (8003210 <HAL_TIM_PWM_MspInit+0x284>)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80031d6:	2200      	movs	r2, #0
 80031d8:	2100      	movs	r1, #0
 80031da:	201e      	movs	r0, #30
 80031dc:	f002 f867 	bl	80052ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80031e0:	201e      	movs	r0, #30
 80031e2:	f002 f87e 	bl	80052e2 <HAL_NVIC_EnableIRQ>
}
 80031e6:	e05a      	b.n	800329e <HAL_TIM_PWM_MspInit+0x312>
 80031e8:	58024400 	.word	0x58024400
 80031ec:	58020000 	.word	0x58020000
 80031f0:	24001200 	.word	0x24001200
 80031f4:	40020028 	.word	0x40020028
 80031f8:	40000400 	.word	0x40000400
 80031fc:	24001278 	.word	0x24001278
 8003200:	40020058 	.word	0x40020058
 8003204:	240012f0 	.word	0x240012f0
 8003208:	40020070 	.word	0x40020070
 800320c:	40000800 	.word	0x40000800
 8003210:	24001368 	.word	0x24001368
 8003214:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a22      	ldr	r2, [pc, #136]	; (80032a8 <HAL_TIM_PWM_MspInit+0x31c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d13d      	bne.n	800329e <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003222:	4b22      	ldr	r3, [pc, #136]	; (80032ac <HAL_TIM_PWM_MspInit+0x320>)
 8003224:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003228:	4a20      	ldr	r2, [pc, #128]	; (80032ac <HAL_TIM_PWM_MspInit+0x320>)
 800322a:	f043 0308 	orr.w	r3, r3, #8
 800322e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003232:	4b1e      	ldr	r3, [pc, #120]	; (80032ac <HAL_TIM_PWM_MspInit+0x320>)
 8003234:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003238:	f003 0308 	and.w	r3, r3, #8
 800323c:	60bb      	str	r3, [r7, #8]
 800323e:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 8003240:	4b1b      	ldr	r3, [pc, #108]	; (80032b0 <HAL_TIM_PWM_MspInit+0x324>)
 8003242:	4a1c      	ldr	r2, [pc, #112]	; (80032b4 <HAL_TIM_PWM_MspInit+0x328>)
 8003244:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8003246:	4b1a      	ldr	r3, [pc, #104]	; (80032b0 <HAL_TIM_PWM_MspInit+0x324>)
 8003248:	223a      	movs	r2, #58	; 0x3a
 800324a:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800324c:	4b18      	ldr	r3, [pc, #96]	; (80032b0 <HAL_TIM_PWM_MspInit+0x324>)
 800324e:	2240      	movs	r2, #64	; 0x40
 8003250:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8003252:	4b17      	ldr	r3, [pc, #92]	; (80032b0 <HAL_TIM_PWM_MspInit+0x324>)
 8003254:	2200      	movs	r2, #0
 8003256:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8003258:	4b15      	ldr	r3, [pc, #84]	; (80032b0 <HAL_TIM_PWM_MspInit+0x324>)
 800325a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800325e:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003260:	4b13      	ldr	r3, [pc, #76]	; (80032b0 <HAL_TIM_PWM_MspInit+0x324>)
 8003262:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003266:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003268:	4b11      	ldr	r3, [pc, #68]	; (80032b0 <HAL_TIM_PWM_MspInit+0x324>)
 800326a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800326e:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8003270:	4b0f      	ldr	r3, [pc, #60]	; (80032b0 <HAL_TIM_PWM_MspInit+0x324>)
 8003272:	2200      	movs	r2, #0
 8003274:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8003276:	4b0e      	ldr	r3, [pc, #56]	; (80032b0 <HAL_TIM_PWM_MspInit+0x324>)
 8003278:	2200      	movs	r2, #0
 800327a:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800327c:	4b0c      	ldr	r3, [pc, #48]	; (80032b0 <HAL_TIM_PWM_MspInit+0x324>)
 800327e:	2200      	movs	r2, #0
 8003280:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 8003282:	480b      	ldr	r0, [pc, #44]	; (80032b0 <HAL_TIM_PWM_MspInit+0x324>)
 8003284:	f002 f848 	bl	8005318 <HAL_DMA_Init>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 800328e:	f7ff fb1f 	bl	80028d0 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a06      	ldr	r2, [pc, #24]	; (80032b0 <HAL_TIM_PWM_MspInit+0x324>)
 8003296:	631a      	str	r2, [r3, #48]	; 0x30
 8003298:	4a05      	ldr	r2, [pc, #20]	; (80032b0 <HAL_TIM_PWM_MspInit+0x324>)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800329e:	bf00      	nop
 80032a0:	3730      	adds	r7, #48	; 0x30
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40000c00 	.word	0x40000c00
 80032ac:	58024400 	.word	0x58024400
 80032b0:	240013e0 	.word	0x240013e0
 80032b4:	40020040 	.word	0x40020040

080032b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b08c      	sub	sp, #48	; 0x30
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c0:	f107 031c 	add.w	r3, r7, #28
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	605a      	str	r2, [r3, #4]
 80032ca:	609a      	str	r2, [r3, #8]
 80032cc:	60da      	str	r2, [r3, #12]
 80032ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d8:	d120      	bne.n	800331c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032da:	4b52      	ldr	r3, [pc, #328]	; (8003424 <HAL_TIM_MspPostInit+0x16c>)
 80032dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032e0:	4a50      	ldr	r2, [pc, #320]	; (8003424 <HAL_TIM_MspPostInit+0x16c>)
 80032e2:	f043 0302 	orr.w	r3, r3, #2
 80032e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032ea:	4b4e      	ldr	r3, [pc, #312]	; (8003424 <HAL_TIM_MspPostInit+0x16c>)
 80032ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	61bb      	str	r3, [r7, #24]
 80032f6:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80032f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fe:	2302      	movs	r3, #2
 8003300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003302:	2302      	movs	r3, #2
 8003304:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003306:	2300      	movs	r3, #0
 8003308:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800330a:	2301      	movs	r3, #1
 800330c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800330e:	f107 031c 	add.w	r3, r7, #28
 8003312:	4619      	mov	r1, r3
 8003314:	4844      	ldr	r0, [pc, #272]	; (8003428 <HAL_TIM_MspPostInit+0x170>)
 8003316:	f004 fc37 	bl	8007b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800331a:	e07f      	b.n	800341c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a42      	ldr	r2, [pc, #264]	; (800342c <HAL_TIM_MspPostInit+0x174>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d11f      	bne.n	8003366 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003326:	4b3f      	ldr	r3, [pc, #252]	; (8003424 <HAL_TIM_MspPostInit+0x16c>)
 8003328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800332c:	4a3d      	ldr	r2, [pc, #244]	; (8003424 <HAL_TIM_MspPostInit+0x16c>)
 800332e:	f043 0302 	orr.w	r3, r3, #2
 8003332:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003336:	4b3b      	ldr	r3, [pc, #236]	; (8003424 <HAL_TIM_MspPostInit+0x16c>)
 8003338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	617b      	str	r3, [r7, #20]
 8003342:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003344:	2330      	movs	r3, #48	; 0x30
 8003346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003348:	2302      	movs	r3, #2
 800334a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800334c:	2302      	movs	r3, #2
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003350:	2300      	movs	r3, #0
 8003352:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003354:	2302      	movs	r3, #2
 8003356:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003358:	f107 031c 	add.w	r3, r7, #28
 800335c:	4619      	mov	r1, r3
 800335e:	4832      	ldr	r0, [pc, #200]	; (8003428 <HAL_TIM_MspPostInit+0x170>)
 8003360:	f004 fc12 	bl	8007b88 <HAL_GPIO_Init>
}
 8003364:	e05a      	b.n	800341c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a31      	ldr	r2, [pc, #196]	; (8003430 <HAL_TIM_MspPostInit+0x178>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d131      	bne.n	80033d4 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003370:	4b2c      	ldr	r3, [pc, #176]	; (8003424 <HAL_TIM_MspPostInit+0x16c>)
 8003372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003376:	4a2b      	ldr	r2, [pc, #172]	; (8003424 <HAL_TIM_MspPostInit+0x16c>)
 8003378:	f043 0308 	orr.w	r3, r3, #8
 800337c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003380:	4b28      	ldr	r3, [pc, #160]	; (8003424 <HAL_TIM_MspPostInit+0x16c>)
 8003382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003386:	f003 0308 	and.w	r3, r3, #8
 800338a:	613b      	str	r3, [r7, #16]
 800338c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800338e:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8003392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003394:	2302      	movs	r3, #2
 8003396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003398:	2300      	movs	r3, #0
 800339a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339c:	2300      	movs	r3, #0
 800339e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80033a0:	2302      	movs	r3, #2
 80033a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033a4:	f107 031c 	add.w	r3, r7, #28
 80033a8:	4619      	mov	r1, r3
 80033aa:	4822      	ldr	r0, [pc, #136]	; (8003434 <HAL_TIM_MspPostInit+0x17c>)
 80033ac:	f004 fbec 	bl	8007b88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80033b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80033b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b6:	2302      	movs	r3, #2
 80033b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80033ba:	2302      	movs	r3, #2
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033be:	2300      	movs	r3, #0
 80033c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80033c2:	2302      	movs	r3, #2
 80033c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033c6:	f107 031c 	add.w	r3, r7, #28
 80033ca:	4619      	mov	r1, r3
 80033cc:	4819      	ldr	r0, [pc, #100]	; (8003434 <HAL_TIM_MspPostInit+0x17c>)
 80033ce:	f004 fbdb 	bl	8007b88 <HAL_GPIO_Init>
}
 80033d2:	e023      	b.n	800341c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a17      	ldr	r2, [pc, #92]	; (8003438 <HAL_TIM_MspPostInit+0x180>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d11e      	bne.n	800341c <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033de:	4b11      	ldr	r3, [pc, #68]	; (8003424 <HAL_TIM_MspPostInit+0x16c>)
 80033e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033e4:	4a0f      	ldr	r2, [pc, #60]	; (8003424 <HAL_TIM_MspPostInit+0x16c>)
 80033e6:	f043 0301 	orr.w	r3, r3, #1
 80033ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033ee:	4b0d      	ldr	r3, [pc, #52]	; (8003424 <HAL_TIM_MspPostInit+0x16c>)
 80033f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80033fc:	2308      	movs	r3, #8
 80033fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003400:	2302      	movs	r3, #2
 8003402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003404:	2302      	movs	r3, #2
 8003406:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003408:	2300      	movs	r3, #0
 800340a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800340c:	2302      	movs	r3, #2
 800340e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003410:	f107 031c 	add.w	r3, r7, #28
 8003414:	4619      	mov	r1, r3
 8003416:	4809      	ldr	r0, [pc, #36]	; (800343c <HAL_TIM_MspPostInit+0x184>)
 8003418:	f004 fbb6 	bl	8007b88 <HAL_GPIO_Init>
}
 800341c:	bf00      	nop
 800341e:	3730      	adds	r7, #48	; 0x30
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	58024400 	.word	0x58024400
 8003428:	58020400 	.word	0x58020400
 800342c:	40000400 	.word	0x40000400
 8003430:	40000800 	.word	0x40000800
 8003434:	58020c00 	.word	0x58020c00
 8003438:	40000c00 	.word	0x40000c00
 800343c:	58020000 	.word	0x58020000

08003440 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b0ba      	sub	sp, #232	; 0xe8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003448:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	605a      	str	r2, [r3, #4]
 8003452:	609a      	str	r2, [r3, #8]
 8003454:	60da      	str	r2, [r3, #12]
 8003456:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003458:	f107 0318 	add.w	r3, r7, #24
 800345c:	22b8      	movs	r2, #184	; 0xb8
 800345e:	2100      	movs	r1, #0
 8003460:	4618      	mov	r0, r3
 8003462:	f013 fd75 	bl	8016f50 <memset>
  if(huart->Instance==UART4)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a4d      	ldr	r2, [pc, #308]	; (80035a0 <HAL_UART_MspInit+0x160>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d147      	bne.n	8003500 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003470:	f04f 0202 	mov.w	r2, #2
 8003474:	f04f 0300 	mov.w	r3, #0
 8003478:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800347c:	2300      	movs	r3, #0
 800347e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003482:	f107 0318 	add.w	r3, r7, #24
 8003486:	4618      	mov	r0, r3
 8003488:	f007 f952 	bl	800a730 <HAL_RCCEx_PeriphCLKConfig>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003492:	f7ff fa1d 	bl	80028d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003496:	4b43      	ldr	r3, [pc, #268]	; (80035a4 <HAL_UART_MspInit+0x164>)
 8003498:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800349c:	4a41      	ldr	r2, [pc, #260]	; (80035a4 <HAL_UART_MspInit+0x164>)
 800349e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80034a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80034a6:	4b3f      	ldr	r3, [pc, #252]	; (80035a4 <HAL_UART_MspInit+0x164>)
 80034a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034b0:	617b      	str	r3, [r7, #20]
 80034b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034b4:	4b3b      	ldr	r3, [pc, #236]	; (80035a4 <HAL_UART_MspInit+0x164>)
 80034b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034ba:	4a3a      	ldr	r2, [pc, #232]	; (80035a4 <HAL_UART_MspInit+0x164>)
 80034bc:	f043 0302 	orr.w	r3, r3, #2
 80034c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034c4:	4b37      	ldr	r3, [pc, #220]	; (80035a4 <HAL_UART_MspInit+0x164>)
 80034c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	613b      	str	r3, [r7, #16]
 80034d0:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80034d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80034d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034da:	2302      	movs	r3, #2
 80034dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e0:	2300      	movs	r3, #0
 80034e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e6:	2300      	movs	r3, #0
 80034e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80034ec:	2308      	movs	r3, #8
 80034ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034f2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80034f6:	4619      	mov	r1, r3
 80034f8:	482b      	ldr	r0, [pc, #172]	; (80035a8 <HAL_UART_MspInit+0x168>)
 80034fa:	f004 fb45 	bl	8007b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80034fe:	e04a      	b.n	8003596 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a29      	ldr	r2, [pc, #164]	; (80035ac <HAL_UART_MspInit+0x16c>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d145      	bne.n	8003596 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800350a:	f04f 0201 	mov.w	r2, #1
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003516:	2300      	movs	r3, #0
 8003518:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800351c:	f107 0318 	add.w	r3, r7, #24
 8003520:	4618      	mov	r0, r3
 8003522:	f007 f905 	bl	800a730 <HAL_RCCEx_PeriphCLKConfig>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 800352c:	f7ff f9d0 	bl	80028d0 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003530:	4b1c      	ldr	r3, [pc, #112]	; (80035a4 <HAL_UART_MspInit+0x164>)
 8003532:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003536:	4a1b      	ldr	r2, [pc, #108]	; (80035a4 <HAL_UART_MspInit+0x164>)
 8003538:	f043 0320 	orr.w	r3, r3, #32
 800353c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003540:	4b18      	ldr	r3, [pc, #96]	; (80035a4 <HAL_UART_MspInit+0x164>)
 8003542:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003546:	f003 0320 	and.w	r3, r3, #32
 800354a:	60fb      	str	r3, [r7, #12]
 800354c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800354e:	4b15      	ldr	r3, [pc, #84]	; (80035a4 <HAL_UART_MspInit+0x164>)
 8003550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003554:	4a13      	ldr	r2, [pc, #76]	; (80035a4 <HAL_UART_MspInit+0x164>)
 8003556:	f043 0304 	orr.w	r3, r3, #4
 800355a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800355e:	4b11      	ldr	r3, [pc, #68]	; (80035a4 <HAL_UART_MspInit+0x164>)
 8003560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	60bb      	str	r3, [r7, #8]
 800356a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800356c:	23c0      	movs	r3, #192	; 0xc0
 800356e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003572:	2302      	movs	r3, #2
 8003574:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003578:	2300      	movs	r3, #0
 800357a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800357e:	2300      	movs	r3, #0
 8003580:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8003584:	2307      	movs	r3, #7
 8003586:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800358a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800358e:	4619      	mov	r1, r3
 8003590:	4807      	ldr	r0, [pc, #28]	; (80035b0 <HAL_UART_MspInit+0x170>)
 8003592:	f004 faf9 	bl	8007b88 <HAL_GPIO_Init>
}
 8003596:	bf00      	nop
 8003598:	37e8      	adds	r7, #232	; 0xe8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	40004c00 	.word	0x40004c00
 80035a4:	58024400 	.word	0x58024400
 80035a8:	58020400 	.word	0x58020400
 80035ac:	40011400 	.word	0x40011400
 80035b0:	58020800 	.word	0x58020800

080035b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035b8:	e7fe      	b.n	80035b8 <NMI_Handler+0x4>

080035ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035ba:	b480      	push	{r7}
 80035bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035be:	e7fe      	b.n	80035be <HardFault_Handler+0x4>

080035c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035c4:	e7fe      	b.n	80035c4 <MemManage_Handler+0x4>

080035c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035c6:	b480      	push	{r7}
 80035c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035ca:	e7fe      	b.n	80035ca <BusFault_Handler+0x4>

080035cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035d0:	e7fe      	b.n	80035d0 <UsageFault_Handler+0x4>

080035d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035d2:	b480      	push	{r7}
 80035d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035d6:	bf00      	nop
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035e4:	bf00      	nop
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035ee:	b480      	push	{r7}
 80035f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035f2:	bf00      	nop
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003600:	f000 f9b0 	bl	8003964 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003604:	bf00      	nop
 8003606:	bd80      	pop	{r7, pc}

08003608 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 800360c:	4802      	ldr	r0, [pc, #8]	; (8003618 <DMA1_Stream0_IRQHandler+0x10>)
 800360e:	f002 fc45 	bl	8005e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003612:	bf00      	nop
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	24001368 	.word	0x24001368

0800361c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8003620:	4802      	ldr	r0, [pc, #8]	; (800362c <DMA1_Stream1_IRQHandler+0x10>)
 8003622:	f002 fc3b 	bl	8005e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003626:	bf00      	nop
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	24001200 	.word	0x24001200

08003630 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8003634:	4802      	ldr	r0, [pc, #8]	; (8003640 <DMA1_Stream2_IRQHandler+0x10>)
 8003636:	f002 fc31 	bl	8005e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800363a:	bf00      	nop
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	240013e0 	.word	0x240013e0

08003644 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003648:	4802      	ldr	r0, [pc, #8]	; (8003654 <DMA1_Stream3_IRQHandler+0x10>)
 800364a:	f002 fc27 	bl	8005e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800364e:	bf00      	nop
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	24001278 	.word	0x24001278

08003658 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 800365c:	4802      	ldr	r0, [pc, #8]	; (8003668 <DMA1_Stream4_IRQHandler+0x10>)
 800365e:	f002 fc1d 	bl	8005e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003662:	bf00      	nop
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	240012f0 	.word	0x240012f0

0800366c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003670:	4802      	ldr	r0, [pc, #8]	; (800367c <DMA1_Stream5_IRQHandler+0x10>)
 8003672:	f002 fc13 	bl	8005e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003676:	bf00      	nop
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	24000cd8 	.word	0x24000cd8

08003680 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003684:	4802      	ldr	r0, [pc, #8]	; (8003690 <TIM4_IRQHandler+0x10>)
 8003686:	f00c f9dd 	bl	800fa44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800368a:	bf00      	nop
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	24001168 	.word	0x24001168

08003694 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003698:	4802      	ldr	r0, [pc, #8]	; (80036a4 <DMA2_Stream7_IRQHandler+0x10>)
 800369a:	f002 fbff 	bl	8005e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800369e:	bf00      	nop
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	24000d50 	.word	0x24000d50

080036a8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80036ac:	4802      	ldr	r0, [pc, #8]	; (80036b8 <OTG_HS_IRQHandler+0x10>)
 80036ae:	f004 fec5 	bl	800843c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80036b2:	bf00      	nop
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	24002a84 	.word	0x24002a84

080036bc <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 80036c0:	4802      	ldr	r0, [pc, #8]	; (80036cc <SDMMC2_IRQHandler+0x10>)
 80036c2:	f009 fe8b 	bl	800d3dc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 80036c6:	bf00      	nop
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	24000ebc 	.word	0x24000ebc

080036d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036d8:	4a14      	ldr	r2, [pc, #80]	; (800372c <_sbrk+0x5c>)
 80036da:	4b15      	ldr	r3, [pc, #84]	; (8003730 <_sbrk+0x60>)
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036e4:	4b13      	ldr	r3, [pc, #76]	; (8003734 <_sbrk+0x64>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d102      	bne.n	80036f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036ec:	4b11      	ldr	r3, [pc, #68]	; (8003734 <_sbrk+0x64>)
 80036ee:	4a12      	ldr	r2, [pc, #72]	; (8003738 <_sbrk+0x68>)
 80036f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036f2:	4b10      	ldr	r3, [pc, #64]	; (8003734 <_sbrk+0x64>)
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4413      	add	r3, r2
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d207      	bcs.n	8003710 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003700:	f013 fc2e 	bl	8016f60 <__errno>
 8003704:	4603      	mov	r3, r0
 8003706:	220c      	movs	r2, #12
 8003708:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800370a:	f04f 33ff 	mov.w	r3, #4294967295
 800370e:	e009      	b.n	8003724 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003710:	4b08      	ldr	r3, [pc, #32]	; (8003734 <_sbrk+0x64>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003716:	4b07      	ldr	r3, [pc, #28]	; (8003734 <_sbrk+0x64>)
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4413      	add	r3, r2
 800371e:	4a05      	ldr	r2, [pc, #20]	; (8003734 <_sbrk+0x64>)
 8003720:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003722:	68fb      	ldr	r3, [r7, #12]
}
 8003724:	4618      	mov	r0, r3
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	24050000 	.word	0x24050000
 8003730:	00000800 	.word	0x00000800
 8003734:	24001580 	.word	0x24001580
 8003738:	240032f8 	.word	0x240032f8

0800373c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003740:	4b32      	ldr	r3, [pc, #200]	; (800380c <SystemInit+0xd0>)
 8003742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003746:	4a31      	ldr	r2, [pc, #196]	; (800380c <SystemInit+0xd0>)
 8003748:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800374c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003750:	4b2f      	ldr	r3, [pc, #188]	; (8003810 <SystemInit+0xd4>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 030f 	and.w	r3, r3, #15
 8003758:	2b06      	cmp	r3, #6
 800375a:	d807      	bhi.n	800376c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800375c:	4b2c      	ldr	r3, [pc, #176]	; (8003810 <SystemInit+0xd4>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f023 030f 	bic.w	r3, r3, #15
 8003764:	4a2a      	ldr	r2, [pc, #168]	; (8003810 <SystemInit+0xd4>)
 8003766:	f043 0307 	orr.w	r3, r3, #7
 800376a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800376c:	4b29      	ldr	r3, [pc, #164]	; (8003814 <SystemInit+0xd8>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a28      	ldr	r2, [pc, #160]	; (8003814 <SystemInit+0xd8>)
 8003772:	f043 0301 	orr.w	r3, r3, #1
 8003776:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003778:	4b26      	ldr	r3, [pc, #152]	; (8003814 <SystemInit+0xd8>)
 800377a:	2200      	movs	r2, #0
 800377c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800377e:	4b25      	ldr	r3, [pc, #148]	; (8003814 <SystemInit+0xd8>)
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	4924      	ldr	r1, [pc, #144]	; (8003814 <SystemInit+0xd8>)
 8003784:	4b24      	ldr	r3, [pc, #144]	; (8003818 <SystemInit+0xdc>)
 8003786:	4013      	ands	r3, r2
 8003788:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800378a:	4b21      	ldr	r3, [pc, #132]	; (8003810 <SystemInit+0xd4>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	2b00      	cmp	r3, #0
 8003794:	d007      	beq.n	80037a6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003796:	4b1e      	ldr	r3, [pc, #120]	; (8003810 <SystemInit+0xd4>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f023 030f 	bic.w	r3, r3, #15
 800379e:	4a1c      	ldr	r2, [pc, #112]	; (8003810 <SystemInit+0xd4>)
 80037a0:	f043 0307 	orr.w	r3, r3, #7
 80037a4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80037a6:	4b1b      	ldr	r3, [pc, #108]	; (8003814 <SystemInit+0xd8>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80037ac:	4b19      	ldr	r3, [pc, #100]	; (8003814 <SystemInit+0xd8>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80037b2:	4b18      	ldr	r3, [pc, #96]	; (8003814 <SystemInit+0xd8>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80037b8:	4b16      	ldr	r3, [pc, #88]	; (8003814 <SystemInit+0xd8>)
 80037ba:	4a18      	ldr	r2, [pc, #96]	; (800381c <SystemInit+0xe0>)
 80037bc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80037be:	4b15      	ldr	r3, [pc, #84]	; (8003814 <SystemInit+0xd8>)
 80037c0:	4a17      	ldr	r2, [pc, #92]	; (8003820 <SystemInit+0xe4>)
 80037c2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80037c4:	4b13      	ldr	r3, [pc, #76]	; (8003814 <SystemInit+0xd8>)
 80037c6:	4a17      	ldr	r2, [pc, #92]	; (8003824 <SystemInit+0xe8>)
 80037c8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80037ca:	4b12      	ldr	r3, [pc, #72]	; (8003814 <SystemInit+0xd8>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80037d0:	4b10      	ldr	r3, [pc, #64]	; (8003814 <SystemInit+0xd8>)
 80037d2:	4a14      	ldr	r2, [pc, #80]	; (8003824 <SystemInit+0xe8>)
 80037d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80037d6:	4b0f      	ldr	r3, [pc, #60]	; (8003814 <SystemInit+0xd8>)
 80037d8:	2200      	movs	r2, #0
 80037da:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80037dc:	4b0d      	ldr	r3, [pc, #52]	; (8003814 <SystemInit+0xd8>)
 80037de:	4a11      	ldr	r2, [pc, #68]	; (8003824 <SystemInit+0xe8>)
 80037e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80037e2:	4b0c      	ldr	r3, [pc, #48]	; (8003814 <SystemInit+0xd8>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80037e8:	4b0a      	ldr	r3, [pc, #40]	; (8003814 <SystemInit+0xd8>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a09      	ldr	r2, [pc, #36]	; (8003814 <SystemInit+0xd8>)
 80037ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80037f4:	4b07      	ldr	r3, [pc, #28]	; (8003814 <SystemInit+0xd8>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80037fa:	4b0b      	ldr	r3, [pc, #44]	; (8003828 <SystemInit+0xec>)
 80037fc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003800:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003802:	bf00      	nop
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	e000ed00 	.word	0xe000ed00
 8003810:	52002000 	.word	0x52002000
 8003814:	58024400 	.word	0x58024400
 8003818:	eaf6ed7f 	.word	0xeaf6ed7f
 800381c:	02020200 	.word	0x02020200
 8003820:	01ff0000 	.word	0x01ff0000
 8003824:	01010280 	.word	0x01010280
 8003828:	52004000 	.word	0x52004000

0800382c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800382c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003864 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003830:	f7ff ff84 	bl	800373c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003834:	480c      	ldr	r0, [pc, #48]	; (8003868 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003836:	490d      	ldr	r1, [pc, #52]	; (800386c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003838:	4a0d      	ldr	r2, [pc, #52]	; (8003870 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800383a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800383c:	e002      	b.n	8003844 <LoopCopyDataInit>

0800383e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800383e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003842:	3304      	adds	r3, #4

08003844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003848:	d3f9      	bcc.n	800383e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800384a:	4a0a      	ldr	r2, [pc, #40]	; (8003874 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800384c:	4c0a      	ldr	r4, [pc, #40]	; (8003878 <LoopFillZerobss+0x22>)
  movs r3, #0
 800384e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003850:	e001      	b.n	8003856 <LoopFillZerobss>

08003852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003854:	3204      	adds	r2, #4

08003856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003858:	d3fb      	bcc.n	8003852 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800385a:	f013 fb87 	bl	8016f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800385e:	f7fd fd9b 	bl	8001398 <main>
  bx  lr
 8003862:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003864:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003868:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800386c:	24000150 	.word	0x24000150
  ldr r2, =_sidata
 8003870:	08018554 	.word	0x08018554
  ldr r2, =_sbss
 8003874:	24000150 	.word	0x24000150
  ldr r4, =_ebss
 8003878:	240032f8 	.word	0x240032f8

0800387c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800387c:	e7fe      	b.n	800387c <ADC3_IRQHandler>
	...

08003880 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003886:	2003      	movs	r0, #3
 8003888:	f001 fd06 	bl	8005298 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800388c:	f006 fd7a 	bl	800a384 <HAL_RCC_GetSysClockFreq>
 8003890:	4602      	mov	r2, r0
 8003892:	4b15      	ldr	r3, [pc, #84]	; (80038e8 <HAL_Init+0x68>)
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	0a1b      	lsrs	r3, r3, #8
 8003898:	f003 030f 	and.w	r3, r3, #15
 800389c:	4913      	ldr	r1, [pc, #76]	; (80038ec <HAL_Init+0x6c>)
 800389e:	5ccb      	ldrb	r3, [r1, r3]
 80038a0:	f003 031f 	and.w	r3, r3, #31
 80038a4:	fa22 f303 	lsr.w	r3, r2, r3
 80038a8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038aa:	4b0f      	ldr	r3, [pc, #60]	; (80038e8 <HAL_Init+0x68>)
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	4a0e      	ldr	r2, [pc, #56]	; (80038ec <HAL_Init+0x6c>)
 80038b4:	5cd3      	ldrb	r3, [r2, r3]
 80038b6:	f003 031f 	and.w	r3, r3, #31
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	fa22 f303 	lsr.w	r3, r2, r3
 80038c0:	4a0b      	ldr	r2, [pc, #44]	; (80038f0 <HAL_Init+0x70>)
 80038c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80038c4:	4a0b      	ldr	r2, [pc, #44]	; (80038f4 <HAL_Init+0x74>)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038ca:	200f      	movs	r0, #15
 80038cc:	f000 f814 	bl	80038f8 <HAL_InitTick>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e002      	b.n	80038e0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80038da:	f7fe ffff 	bl	80028dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3708      	adds	r7, #8
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	58024400 	.word	0x58024400
 80038ec:	080183a0 	.word	0x080183a0
 80038f0:	24000004 	.word	0x24000004
 80038f4:	24000000 	.word	0x24000000

080038f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003900:	4b15      	ldr	r3, [pc, #84]	; (8003958 <HAL_InitTick+0x60>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e021      	b.n	8003950 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800390c:	4b13      	ldr	r3, [pc, #76]	; (800395c <HAL_InitTick+0x64>)
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	4b11      	ldr	r3, [pc, #68]	; (8003958 <HAL_InitTick+0x60>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	4619      	mov	r1, r3
 8003916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800391a:	fbb3 f3f1 	udiv	r3, r3, r1
 800391e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003922:	4618      	mov	r0, r3
 8003924:	f001 fceb 	bl	80052fe <HAL_SYSTICK_Config>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e00e      	b.n	8003950 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b0f      	cmp	r3, #15
 8003936:	d80a      	bhi.n	800394e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003938:	2200      	movs	r2, #0
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	f04f 30ff 	mov.w	r0, #4294967295
 8003940:	f001 fcb5 	bl	80052ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003944:	4a06      	ldr	r2, [pc, #24]	; (8003960 <HAL_InitTick+0x68>)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800394a:	2300      	movs	r3, #0
 800394c:	e000      	b.n	8003950 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
}
 8003950:	4618      	mov	r0, r3
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	2400000c 	.word	0x2400000c
 800395c:	24000000 	.word	0x24000000
 8003960:	24000008 	.word	0x24000008

08003964 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003968:	4b06      	ldr	r3, [pc, #24]	; (8003984 <HAL_IncTick+0x20>)
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	461a      	mov	r2, r3
 800396e:	4b06      	ldr	r3, [pc, #24]	; (8003988 <HAL_IncTick+0x24>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4413      	add	r3, r2
 8003974:	4a04      	ldr	r2, [pc, #16]	; (8003988 <HAL_IncTick+0x24>)
 8003976:	6013      	str	r3, [r2, #0]
}
 8003978:	bf00      	nop
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	2400000c 	.word	0x2400000c
 8003988:	24001584 	.word	0x24001584

0800398c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  return uwTick;
 8003990:	4b03      	ldr	r3, [pc, #12]	; (80039a0 <HAL_GetTick+0x14>)
 8003992:	681b      	ldr	r3, [r3, #0]
}
 8003994:	4618      	mov	r0, r3
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	24001584 	.word	0x24001584

080039a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039ac:	f7ff ffee 	bl	800398c <HAL_GetTick>
 80039b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039bc:	d005      	beq.n	80039ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039be:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <HAL_Delay+0x44>)
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	461a      	mov	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4413      	add	r3, r2
 80039c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039ca:	bf00      	nop
 80039cc:	f7ff ffde 	bl	800398c <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d8f7      	bhi.n	80039cc <HAL_Delay+0x28>
  {
  }
}
 80039dc:	bf00      	nop
 80039de:	bf00      	nop
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	2400000c 	.word	0x2400000c

080039ec <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80039f6:	4b07      	ldr	r3, [pc, #28]	; (8003a14 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	43db      	mvns	r3, r3
 80039fe:	401a      	ands	r2, r3
 8003a00:	4904      	ldr	r1, [pc, #16]	; (8003a14 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	604b      	str	r3, [r1, #4]
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	58000400 	.word	0x58000400

08003a18 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	609a      	str	r2, [r3, #8]
}
 8003a32:	bf00      	nop
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b083      	sub	sp, #12
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
 8003a46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	609a      	str	r2, [r3, #8]
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b087      	sub	sp, #28
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
 8003a8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	3360      	adds	r3, #96	; 0x60
 8003a92:	461a      	mov	r2, r3
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4a10      	ldr	r2, [pc, #64]	; (8003ae0 <LL_ADC_SetOffset+0x60>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d10b      	bne.n	8003abc <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003aba:	e00b      	b.n	8003ad4 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	430b      	orrs	r3, r1
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	601a      	str	r2, [r3, #0]
}
 8003ad4:	bf00      	nop
 8003ad6:	371c      	adds	r7, #28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	58026000 	.word	0x58026000

08003ae4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	3360      	adds	r3, #96	; 0x60
 8003af2:	461a      	mov	r2, r3
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4413      	add	r3, r2
 8003afa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3714      	adds	r7, #20
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f003 031f 	and.w	r3, r3, #31
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b30:	431a      	orrs	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	611a      	str	r2, [r3, #16]
}
 8003b36:	bf00      	nop
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
	...

08003b44 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b087      	sub	sp, #28
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4a0c      	ldr	r2, [pc, #48]	; (8003b84 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d00e      	beq.n	8003b76 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	3360      	adds	r3, #96	; 0x60
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	431a      	orrs	r2, r3
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	601a      	str	r2, [r3, #0]
  }
}
 8003b76:	bf00      	nop
 8003b78:	371c      	adds	r7, #28
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	58026000 	.word	0x58026000

08003b88 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4a0c      	ldr	r2, [pc, #48]	; (8003bc8 <LL_ADC_SetOffsetSaturation+0x40>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d10e      	bne.n	8003bba <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	3360      	adds	r3, #96	; 0x60
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003bba:	bf00      	nop
 8003bbc:	371c      	adds	r7, #28
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	58026000 	.word	0x58026000

08003bcc <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b087      	sub	sp, #28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4a0c      	ldr	r2, [pc, #48]	; (8003c0c <LL_ADC_SetOffsetSign+0x40>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d10e      	bne.n	8003bfe <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	3360      	adds	r3, #96	; 0x60
 8003be4:	461a      	mov	r2, r3
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003bfe:	bf00      	nop
 8003c00:	371c      	adds	r7, #28
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	58026000 	.word	0x58026000

08003c10 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b087      	sub	sp, #28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	3360      	adds	r3, #96	; 0x60
 8003c20:	461a      	mov	r2, r3
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4413      	add	r3, r2
 8003c28:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	4a0c      	ldr	r2, [pc, #48]	; (8003c60 <LL_ADC_SetOffsetState+0x50>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d108      	bne.n	8003c44 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003c42:	e007      	b.n	8003c54 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	601a      	str	r2, [r3, #0]
}
 8003c54:	bf00      	nop
 8003c56:	371c      	adds	r7, #28
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	58026000 	.word	0x58026000

08003c64 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b087      	sub	sp, #28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	3330      	adds	r3, #48	; 0x30
 8003c74:	461a      	mov	r2, r3
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	0a1b      	lsrs	r3, r3, #8
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	f003 030c 	and.w	r3, r3, #12
 8003c80:	4413      	add	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	f003 031f 	and.w	r3, r3, #31
 8003c8e:	211f      	movs	r1, #31
 8003c90:	fa01 f303 	lsl.w	r3, r1, r3
 8003c94:	43db      	mvns	r3, r3
 8003c96:	401a      	ands	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	0e9b      	lsrs	r3, r3, #26
 8003c9c:	f003 011f 	and.w	r1, r3, #31
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f003 031f 	and.w	r3, r3, #31
 8003ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8003caa:	431a      	orrs	r2, r3
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003cb0:	bf00      	nop
 8003cb2:	371c      	adds	r7, #28
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b087      	sub	sp, #28
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	3314      	adds	r3, #20
 8003ccc:	461a      	mov	r2, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	0e5b      	lsrs	r3, r3, #25
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	4413      	add	r3, r2
 8003cda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	0d1b      	lsrs	r3, r3, #20
 8003ce4:	f003 031f 	and.w	r3, r3, #31
 8003ce8:	2107      	movs	r1, #7
 8003cea:	fa01 f303 	lsl.w	r3, r1, r3
 8003cee:	43db      	mvns	r3, r3
 8003cf0:	401a      	ands	r2, r3
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	0d1b      	lsrs	r3, r3, #20
 8003cf6:	f003 031f 	and.w	r3, r3, #31
 8003cfa:	6879      	ldr	r1, [r7, #4]
 8003cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003d00:	431a      	orrs	r2, r3
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003d06:	bf00      	nop
 8003d08:	371c      	adds	r7, #28
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
	...

08003d14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4a1a      	ldr	r2, [pc, #104]	; (8003d8c <LL_ADC_SetChannelSingleDiff+0x78>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d115      	bne.n	8003d54 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d34:	43db      	mvns	r3, r3
 8003d36:	401a      	ands	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f003 0318 	and.w	r3, r3, #24
 8003d3e:	4914      	ldr	r1, [pc, #80]	; (8003d90 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003d40:	40d9      	lsrs	r1, r3
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	400b      	ands	r3, r1
 8003d46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003d52:	e014      	b.n	8003d7e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d60:	43db      	mvns	r3, r3
 8003d62:	401a      	ands	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f003 0318 	and.w	r3, r3, #24
 8003d6a:	4909      	ldr	r1, [pc, #36]	; (8003d90 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003d6c:	40d9      	lsrs	r1, r3
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	400b      	ands	r3, r1
 8003d72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d76:	431a      	orrs	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003d7e:	bf00      	nop
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	58026000 	.word	0x58026000
 8003d90:	000fffff 	.word	0x000fffff

08003d94 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	4b04      	ldr	r3, [pc, #16]	; (8003db4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003da2:	4013      	ands	r3, r2
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6093      	str	r3, [r2, #8]
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	5fffffc0 	.word	0x5fffffc0

08003db8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dcc:	d101      	bne.n	8003dd2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e000      	b.n	8003dd4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	4b05      	ldr	r3, [pc, #20]	; (8003e04 <LL_ADC_EnableInternalRegulator+0x24>)
 8003dee:	4013      	ands	r3, r2
 8003df0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	6fffffc0 	.word	0x6fffffc0

08003e08 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e1c:	d101      	bne.n	8003e22 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e000      	b.n	8003e24 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d101      	bne.n	8003e48 <LL_ADC_IsEnabled+0x18>
 8003e44:	2301      	movs	r3, #1
 8003e46:	e000      	b.n	8003e4a <LL_ADC_IsEnabled+0x1a>
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 0304 	and.w	r3, r3, #4
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d101      	bne.n	8003e6e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e000      	b.n	8003e70 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f003 0308 	and.w	r3, r3, #8
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d101      	bne.n	8003e94 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003e90:	2301      	movs	r3, #1
 8003e92:	e000      	b.n	8003e96 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
	...

08003ea4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ea4:	b590      	push	{r4, r7, lr}
 8003ea6:	b089      	sub	sp, #36	; 0x24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003eac:	2300      	movs	r3, #0
 8003eae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e1ee      	b.n	800429c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d109      	bne.n	8003ee0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f7fe fd1f 	bl	8002910 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7ff ff67 	bl	8003db8 <LL_ADC_IsDeepPowerDownEnabled>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d004      	beq.n	8003efa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7ff ff4d 	bl	8003d94 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7ff ff82 	bl	8003e08 <LL_ADC_IsInternalRegulatorEnabled>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d114      	bne.n	8003f34 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7ff ff66 	bl	8003de0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f14:	4b8e      	ldr	r3, [pc, #568]	; (8004150 <HAL_ADC_Init+0x2ac>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	099b      	lsrs	r3, r3, #6
 8003f1a:	4a8e      	ldr	r2, [pc, #568]	; (8004154 <HAL_ADC_Init+0x2b0>)
 8003f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f20:	099b      	lsrs	r3, r3, #6
 8003f22:	3301      	adds	r3, #1
 8003f24:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f26:	e002      	b.n	8003f2e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1f9      	bne.n	8003f28 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff ff65 	bl	8003e08 <LL_ADC_IsInternalRegulatorEnabled>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10d      	bne.n	8003f60 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f48:	f043 0210 	orr.w	r2, r3, #16
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f54:	f043 0201 	orr.w	r2, r3, #1
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7ff ff76 	bl	8003e56 <LL_ADC_REG_IsConversionOngoing>
 8003f6a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f70:	f003 0310 	and.w	r3, r3, #16
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f040 8188 	bne.w	800428a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f040 8184 	bne.w	800428a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f86:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003f8a:	f043 0202 	orr.w	r2, r3, #2
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff ff4a 	bl	8003e30 <LL_ADC_IsEnabled>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d136      	bne.n	8004010 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a6c      	ldr	r2, [pc, #432]	; (8004158 <HAL_ADC_Init+0x2b4>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d004      	beq.n	8003fb6 <HAL_ADC_Init+0x112>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a6a      	ldr	r2, [pc, #424]	; (800415c <HAL_ADC_Init+0x2b8>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d10e      	bne.n	8003fd4 <HAL_ADC_Init+0x130>
 8003fb6:	4868      	ldr	r0, [pc, #416]	; (8004158 <HAL_ADC_Init+0x2b4>)
 8003fb8:	f7ff ff3a 	bl	8003e30 <LL_ADC_IsEnabled>
 8003fbc:	4604      	mov	r4, r0
 8003fbe:	4867      	ldr	r0, [pc, #412]	; (800415c <HAL_ADC_Init+0x2b8>)
 8003fc0:	f7ff ff36 	bl	8003e30 <LL_ADC_IsEnabled>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	4323      	orrs	r3, r4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	bf0c      	ite	eq
 8003fcc:	2301      	moveq	r3, #1
 8003fce:	2300      	movne	r3, #0
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	e008      	b.n	8003fe6 <HAL_ADC_Init+0x142>
 8003fd4:	4862      	ldr	r0, [pc, #392]	; (8004160 <HAL_ADC_Init+0x2bc>)
 8003fd6:	f7ff ff2b 	bl	8003e30 <LL_ADC_IsEnabled>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	bf0c      	ite	eq
 8003fe0:	2301      	moveq	r3, #1
 8003fe2:	2300      	movne	r3, #0
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d012      	beq.n	8004010 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a5a      	ldr	r2, [pc, #360]	; (8004158 <HAL_ADC_Init+0x2b4>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d004      	beq.n	8003ffe <HAL_ADC_Init+0x15a>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a58      	ldr	r2, [pc, #352]	; (800415c <HAL_ADC_Init+0x2b8>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d101      	bne.n	8004002 <HAL_ADC_Init+0x15e>
 8003ffe:	4a59      	ldr	r2, [pc, #356]	; (8004164 <HAL_ADC_Init+0x2c0>)
 8004000:	e000      	b.n	8004004 <HAL_ADC_Init+0x160>
 8004002:	4a59      	ldr	r2, [pc, #356]	; (8004168 <HAL_ADC_Init+0x2c4>)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	4619      	mov	r1, r3
 800400a:	4610      	mov	r0, r2
 800400c:	f7ff fd04 	bl	8003a18 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a52      	ldr	r2, [pc, #328]	; (8004160 <HAL_ADC_Init+0x2bc>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d129      	bne.n	800406e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	7e5b      	ldrb	r3, [r3, #25]
 800401e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004024:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800402a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	2b08      	cmp	r3, #8
 8004032:	d013      	beq.n	800405c <HAL_ADC_Init+0x1b8>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	2b0c      	cmp	r3, #12
 800403a:	d00d      	beq.n	8004058 <HAL_ADC_Init+0x1b4>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	2b1c      	cmp	r3, #28
 8004042:	d007      	beq.n	8004054 <HAL_ADC_Init+0x1b0>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	2b18      	cmp	r3, #24
 800404a:	d101      	bne.n	8004050 <HAL_ADC_Init+0x1ac>
 800404c:	2318      	movs	r3, #24
 800404e:	e006      	b.n	800405e <HAL_ADC_Init+0x1ba>
 8004050:	2300      	movs	r3, #0
 8004052:	e004      	b.n	800405e <HAL_ADC_Init+0x1ba>
 8004054:	2310      	movs	r3, #16
 8004056:	e002      	b.n	800405e <HAL_ADC_Init+0x1ba>
 8004058:	2308      	movs	r3, #8
 800405a:	e000      	b.n	800405e <HAL_ADC_Init+0x1ba>
 800405c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800405e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004066:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004068:	4313      	orrs	r3, r2
 800406a:	61bb      	str	r3, [r7, #24]
 800406c:	e00e      	b.n	800408c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	7e5b      	ldrb	r3, [r3, #25]
 8004072:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004078:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800407e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004086:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004088:	4313      	orrs	r3, r2
 800408a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d106      	bne.n	80040a4 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	3b01      	subs	r3, #1
 800409c:	045b      	lsls	r3, r3, #17
 800409e:	69ba      	ldr	r2, [r7, #24]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d009      	beq.n	80040c0 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	4313      	orrs	r3, r2
 80040be:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a26      	ldr	r2, [pc, #152]	; (8004160 <HAL_ADC_Init+0x2bc>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d115      	bne.n	80040f6 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	4b26      	ldr	r3, [pc, #152]	; (800416c <HAL_ADC_Init+0x2c8>)
 80040d2:	4013      	ands	r3, r2
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6812      	ldr	r2, [r2, #0]
 80040d8:	69b9      	ldr	r1, [r7, #24]
 80040da:	430b      	orrs	r3, r1
 80040dc:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	611a      	str	r2, [r3, #16]
 80040f4:	e009      	b.n	800410a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68da      	ldr	r2, [r3, #12]
 80040fc:	4b1c      	ldr	r3, [pc, #112]	; (8004170 <HAL_ADC_Init+0x2cc>)
 80040fe:	4013      	ands	r3, r2
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	6812      	ldr	r2, [r2, #0]
 8004104:	69b9      	ldr	r1, [r7, #24]
 8004106:	430b      	orrs	r3, r1
 8004108:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4618      	mov	r0, r3
 8004110:	f7ff fea1 	bl	8003e56 <LL_ADC_REG_IsConversionOngoing>
 8004114:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4618      	mov	r0, r3
 800411c:	f7ff feae 	bl	8003e7c <LL_ADC_INJ_IsConversionOngoing>
 8004120:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	2b00      	cmp	r3, #0
 8004126:	f040 808e 	bne.w	8004246 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2b00      	cmp	r3, #0
 800412e:	f040 808a 	bne.w	8004246 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a0a      	ldr	r2, [pc, #40]	; (8004160 <HAL_ADC_Init+0x2bc>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d11b      	bne.n	8004174 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	7e1b      	ldrb	r3, [r3, #24]
 8004140:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004148:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800414a:	4313      	orrs	r3, r2
 800414c:	61bb      	str	r3, [r7, #24]
 800414e:	e018      	b.n	8004182 <HAL_ADC_Init+0x2de>
 8004150:	24000000 	.word	0x24000000
 8004154:	053e2d63 	.word	0x053e2d63
 8004158:	40022000 	.word	0x40022000
 800415c:	40022100 	.word	0x40022100
 8004160:	58026000 	.word	0x58026000
 8004164:	40022300 	.word	0x40022300
 8004168:	58026300 	.word	0x58026300
 800416c:	fff04007 	.word	0xfff04007
 8004170:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	7e1b      	ldrb	r3, [r3, #24]
 8004178:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 800417e:	4313      	orrs	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68da      	ldr	r2, [r3, #12]
 8004188:	4b46      	ldr	r3, [pc, #280]	; (80042a4 <HAL_ADC_Init+0x400>)
 800418a:	4013      	ands	r3, r2
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	6812      	ldr	r2, [r2, #0]
 8004190:	69b9      	ldr	r1, [r7, #24]
 8004192:	430b      	orrs	r3, r1
 8004194:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800419c:	2b01      	cmp	r3, #1
 800419e:	d137      	bne.n	8004210 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a4:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a3f      	ldr	r2, [pc, #252]	; (80042a8 <HAL_ADC_Init+0x404>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d116      	bne.n	80041de <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691a      	ldr	r2, [r3, #16]
 80041b6:	4b3d      	ldr	r3, [pc, #244]	; (80042ac <HAL_ADC_Init+0x408>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80041c2:	4311      	orrs	r1, r2
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041c8:	4311      	orrs	r1, r2
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80041ce:	430a      	orrs	r2, r1
 80041d0:	431a      	orrs	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0201 	orr.w	r2, r2, #1
 80041da:	611a      	str	r2, [r3, #16]
 80041dc:	e020      	b.n	8004220 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	691a      	ldr	r2, [r3, #16]
 80041e4:	4b32      	ldr	r3, [pc, #200]	; (80042b0 <HAL_ADC_Init+0x40c>)
 80041e6:	4013      	ands	r3, r2
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80041ec:	3a01      	subs	r2, #1
 80041ee:	0411      	lsls	r1, r2, #16
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80041f4:	4311      	orrs	r1, r2
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041fa:	4311      	orrs	r1, r2
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004200:	430a      	orrs	r2, r1
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f042 0201 	orr.w	r2, r2, #1
 800420c:	611a      	str	r2, [r3, #16]
 800420e:	e007      	b.n	8004220 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	691a      	ldr	r2, [r3, #16]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 0201 	bic.w	r2, r2, #1
 800421e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a1b      	ldr	r2, [pc, #108]	; (80042a8 <HAL_ADC_Init+0x404>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d002      	beq.n	8004246 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 fd63 	bl	8004d0c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d10c      	bne.n	8004268 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004254:	f023 010f 	bic.w	r1, r3, #15
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	69db      	ldr	r3, [r3, #28]
 800425c:	1e5a      	subs	r2, r3, #1
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	631a      	str	r2, [r3, #48]	; 0x30
 8004266:	e007      	b.n	8004278 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 020f 	bic.w	r2, r2, #15
 8004276:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800427c:	f023 0303 	bic.w	r3, r3, #3
 8004280:	f043 0201 	orr.w	r2, r3, #1
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	661a      	str	r2, [r3, #96]	; 0x60
 8004288:	e007      	b.n	800429a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800428e:	f043 0210 	orr.w	r2, r3, #16
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800429a:	7ffb      	ldrb	r3, [r7, #31]
}
 800429c:	4618      	mov	r0, r3
 800429e:	3724      	adds	r7, #36	; 0x24
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd90      	pop	{r4, r7, pc}
 80042a4:	ffffbffc 	.word	0xffffbffc
 80042a8:	58026000 	.word	0x58026000
 80042ac:	fc00f81f 	.word	0xfc00f81f
 80042b0:	fc00f81e 	.word	0xfc00f81e

080042b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80042b4:	b590      	push	{r4, r7, lr}
 80042b6:	b0b9      	sub	sp, #228	; 0xe4
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042be:	2300      	movs	r3, #0
 80042c0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80042c4:	2300      	movs	r3, #0
 80042c6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042ce:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	4aa9      	ldr	r2, [pc, #676]	; (800457c <HAL_ADC_ConfigChannel+0x2c8>)
 80042d6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d102      	bne.n	80042e8 <HAL_ADC_ConfigChannel+0x34>
 80042e2:	2302      	movs	r3, #2
 80042e4:	f000 bcfa 	b.w	8004cdc <HAL_ADC_ConfigChannel+0xa28>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff fdae 	bl	8003e56 <LL_ADC_REG_IsConversionOngoing>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f040 84de 	bne.w	8004cbe <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a9e      	ldr	r2, [pc, #632]	; (8004580 <HAL_ADC_ConfigChannel+0x2cc>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d033      	beq.n	8004374 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004314:	2b00      	cmp	r3, #0
 8004316:	d108      	bne.n	800432a <HAL_ADC_ConfigChannel+0x76>
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	0e9b      	lsrs	r3, r3, #26
 800431e:	f003 031f 	and.w	r3, r3, #31
 8004322:	2201      	movs	r2, #1
 8004324:	fa02 f303 	lsl.w	r3, r2, r3
 8004328:	e01d      	b.n	8004366 <HAL_ADC_ConfigChannel+0xb2>
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004332:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004336:	fa93 f3a3 	rbit	r3, r3
 800433a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800433e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004342:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004346:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 800434e:	2320      	movs	r3, #32
 8004350:	e004      	b.n	800435c <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8004352:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004356:	fab3 f383 	clz	r3, r3
 800435a:	b2db      	uxtb	r3, r3
 800435c:	f003 031f 	and.w	r3, r3, #31
 8004360:	2201      	movs	r2, #1
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6812      	ldr	r2, [r2, #0]
 800436a:	69d1      	ldr	r1, [r2, #28]
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6812      	ldr	r2, [r2, #0]
 8004370:	430b      	orrs	r3, r1
 8004372:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6818      	ldr	r0, [r3, #0]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	6859      	ldr	r1, [r3, #4]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	461a      	mov	r2, r3
 8004382:	f7ff fc6f 	bl	8003c64 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff fd63 	bl	8003e56 <LL_ADC_REG_IsConversionOngoing>
 8004390:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4618      	mov	r0, r3
 800439a:	f7ff fd6f 	bl	8003e7c <LL_ADC_INJ_IsConversionOngoing>
 800439e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80043a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f040 8270 	bne.w	800488c <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80043ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f040 826b 	bne.w	800488c <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6818      	ldr	r0, [r3, #0]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	6819      	ldr	r1, [r3, #0]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	461a      	mov	r2, r3
 80043c4:	f7ff fc7a 	bl	8003cbc <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a6c      	ldr	r2, [pc, #432]	; (8004580 <HAL_ADC_ConfigChannel+0x2cc>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d10d      	bne.n	80043ee <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	695a      	ldr	r2, [r3, #20]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	08db      	lsrs	r3, r3, #3
 80043de:	f003 0303 	and.w	r3, r3, #3
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	fa02 f303 	lsl.w	r3, r2, r3
 80043e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80043ec:	e032      	b.n	8004454 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80043ee:	4b65      	ldr	r3, [pc, #404]	; (8004584 <HAL_ADC_ConfigChannel+0x2d0>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80043f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043fa:	d10b      	bne.n	8004414 <HAL_ADC_ConfigChannel+0x160>
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	695a      	ldr	r2, [r3, #20]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	089b      	lsrs	r3, r3, #2
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	fa02 f303 	lsl.w	r3, r2, r3
 8004412:	e01d      	b.n	8004450 <HAL_ADC_ConfigChannel+0x19c>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	f003 0310 	and.w	r3, r3, #16
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10b      	bne.n	800443a <HAL_ADC_ConfigChannel+0x186>
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	695a      	ldr	r2, [r3, #20]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	089b      	lsrs	r3, r3, #2
 800442e:	f003 0307 	and.w	r3, r3, #7
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	e00a      	b.n	8004450 <HAL_ADC_ConfigChannel+0x19c>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	695a      	ldr	r2, [r3, #20]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	089b      	lsrs	r3, r3, #2
 8004446:	f003 0304 	and.w	r3, r3, #4
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	fa02 f303 	lsl.w	r3, r2, r3
 8004450:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	2b04      	cmp	r3, #4
 800445a:	d048      	beq.n	80044ee <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6818      	ldr	r0, [r3, #0]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	6919      	ldr	r1, [r3, #16]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800446c:	f7ff fb08 	bl	8003a80 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a42      	ldr	r2, [pc, #264]	; (8004580 <HAL_ADC_ConfigChannel+0x2cc>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d119      	bne.n	80044ae <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6818      	ldr	r0, [r3, #0]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	6919      	ldr	r1, [r3, #16]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	461a      	mov	r2, r3
 8004488:	f7ff fba0 	bl	8003bcc <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6818      	ldr	r0, [r3, #0]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	6919      	ldr	r1, [r3, #16]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	f893 3020 	ldrb.w	r3, [r3, #32]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d102      	bne.n	80044a4 <HAL_ADC_ConfigChannel+0x1f0>
 800449e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044a2:	e000      	b.n	80044a6 <HAL_ADC_ConfigChannel+0x1f2>
 80044a4:	2300      	movs	r3, #0
 80044a6:	461a      	mov	r2, r3
 80044a8:	f7ff fb6e 	bl	8003b88 <LL_ADC_SetOffsetSaturation>
 80044ac:	e1ee      	b.n	800488c <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6818      	ldr	r0, [r3, #0]
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	6919      	ldr	r1, [r3, #16]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d102      	bne.n	80044c6 <HAL_ADC_ConfigChannel+0x212>
 80044c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80044c4:	e000      	b.n	80044c8 <HAL_ADC_ConfigChannel+0x214>
 80044c6:	2300      	movs	r3, #0
 80044c8:	461a      	mov	r2, r3
 80044ca:	f7ff fb3b 	bl	8003b44 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6818      	ldr	r0, [r3, #0]
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	6919      	ldr	r1, [r3, #16]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	7e1b      	ldrb	r3, [r3, #24]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d102      	bne.n	80044e4 <HAL_ADC_ConfigChannel+0x230>
 80044de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80044e2:	e000      	b.n	80044e6 <HAL_ADC_ConfigChannel+0x232>
 80044e4:	2300      	movs	r3, #0
 80044e6:	461a      	mov	r2, r3
 80044e8:	f7ff fb12 	bl	8003b10 <LL_ADC_SetDataRightShift>
 80044ec:	e1ce      	b.n	800488c <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a23      	ldr	r2, [pc, #140]	; (8004580 <HAL_ADC_ConfigChannel+0x2cc>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	f040 8181 	bne.w	80047fc <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2100      	movs	r1, #0
 8004500:	4618      	mov	r0, r3
 8004502:	f7ff faef 	bl	8003ae4 <LL_ADC_GetOffsetChannel>
 8004506:	4603      	mov	r3, r0
 8004508:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10a      	bne.n	8004526 <HAL_ADC_ConfigChannel+0x272>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2100      	movs	r1, #0
 8004516:	4618      	mov	r0, r3
 8004518:	f7ff fae4 	bl	8003ae4 <LL_ADC_GetOffsetChannel>
 800451c:	4603      	mov	r3, r0
 800451e:	0e9b      	lsrs	r3, r3, #26
 8004520:	f003 021f 	and.w	r2, r3, #31
 8004524:	e01e      	b.n	8004564 <HAL_ADC_ConfigChannel+0x2b0>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2100      	movs	r1, #0
 800452c:	4618      	mov	r0, r3
 800452e:	f7ff fad9 	bl	8003ae4 <LL_ADC_GetOffsetChannel>
 8004532:	4603      	mov	r3, r0
 8004534:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004538:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800453c:	fa93 f3a3 	rbit	r3, r3
 8004540:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004544:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004548:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 800454c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004550:	2b00      	cmp	r3, #0
 8004552:	d101      	bne.n	8004558 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8004554:	2320      	movs	r3, #32
 8004556:	e004      	b.n	8004562 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8004558:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800455c:	fab3 f383 	clz	r3, r3
 8004560:	b2db      	uxtb	r3, r3
 8004562:	461a      	mov	r2, r3
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10b      	bne.n	8004588 <HAL_ADC_ConfigChannel+0x2d4>
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	0e9b      	lsrs	r3, r3, #26
 8004576:	f003 031f 	and.w	r3, r3, #31
 800457a:	e01e      	b.n	80045ba <HAL_ADC_ConfigChannel+0x306>
 800457c:	47ff0000 	.word	0x47ff0000
 8004580:	58026000 	.word	0x58026000
 8004584:	5c001000 	.word	0x5c001000
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004590:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004594:	fa93 f3a3 	rbit	r3, r3
 8004598:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 800459c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80045a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80045a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 80045ac:	2320      	movs	r3, #32
 80045ae:	e004      	b.n	80045ba <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 80045b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80045b4:	fab3 f383 	clz	r3, r3
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d106      	bne.n	80045cc <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2200      	movs	r2, #0
 80045c4:	2100      	movs	r1, #0
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7ff fb22 	bl	8003c10 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2101      	movs	r1, #1
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7ff fa86 	bl	8003ae4 <LL_ADC_GetOffsetChannel>
 80045d8:	4603      	mov	r3, r0
 80045da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10a      	bne.n	80045f8 <HAL_ADC_ConfigChannel+0x344>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2101      	movs	r1, #1
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff fa7b 	bl	8003ae4 <LL_ADC_GetOffsetChannel>
 80045ee:	4603      	mov	r3, r0
 80045f0:	0e9b      	lsrs	r3, r3, #26
 80045f2:	f003 021f 	and.w	r2, r3, #31
 80045f6:	e01e      	b.n	8004636 <HAL_ADC_ConfigChannel+0x382>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2101      	movs	r1, #1
 80045fe:	4618      	mov	r0, r3
 8004600:	f7ff fa70 	bl	8003ae4 <LL_ADC_GetOffsetChannel>
 8004604:	4603      	mov	r3, r0
 8004606:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800460e:	fa93 f3a3 	rbit	r3, r3
 8004612:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004616:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800461a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800461e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8004626:	2320      	movs	r3, #32
 8004628:	e004      	b.n	8004634 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800462a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800462e:	fab3 f383 	clz	r3, r3
 8004632:	b2db      	uxtb	r3, r3
 8004634:	461a      	mov	r2, r3
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800463e:	2b00      	cmp	r3, #0
 8004640:	d105      	bne.n	800464e <HAL_ADC_ConfigChannel+0x39a>
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	0e9b      	lsrs	r3, r3, #26
 8004648:	f003 031f 	and.w	r3, r3, #31
 800464c:	e018      	b.n	8004680 <HAL_ADC_ConfigChannel+0x3cc>
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004656:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800465a:	fa93 f3a3 	rbit	r3, r3
 800465e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004662:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004666:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800466a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8004672:	2320      	movs	r3, #32
 8004674:	e004      	b.n	8004680 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8004676:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800467a:	fab3 f383 	clz	r3, r3
 800467e:	b2db      	uxtb	r3, r3
 8004680:	429a      	cmp	r2, r3
 8004682:	d106      	bne.n	8004692 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2200      	movs	r2, #0
 800468a:	2101      	movs	r1, #1
 800468c:	4618      	mov	r0, r3
 800468e:	f7ff fabf 	bl	8003c10 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2102      	movs	r1, #2
 8004698:	4618      	mov	r0, r3
 800469a:	f7ff fa23 	bl	8003ae4 <LL_ADC_GetOffsetChannel>
 800469e:	4603      	mov	r3, r0
 80046a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10a      	bne.n	80046be <HAL_ADC_ConfigChannel+0x40a>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2102      	movs	r1, #2
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7ff fa18 	bl	8003ae4 <LL_ADC_GetOffsetChannel>
 80046b4:	4603      	mov	r3, r0
 80046b6:	0e9b      	lsrs	r3, r3, #26
 80046b8:	f003 021f 	and.w	r2, r3, #31
 80046bc:	e01e      	b.n	80046fc <HAL_ADC_ConfigChannel+0x448>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2102      	movs	r1, #2
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7ff fa0d 	bl	8003ae4 <LL_ADC_GetOffsetChannel>
 80046ca:	4603      	mov	r3, r0
 80046cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046d4:	fa93 f3a3 	rbit	r3, r3
 80046d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80046dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80046e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 80046ec:	2320      	movs	r3, #32
 80046ee:	e004      	b.n	80046fa <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 80046f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046f4:	fab3 f383 	clz	r3, r3
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	461a      	mov	r2, r3
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004704:	2b00      	cmp	r3, #0
 8004706:	d105      	bne.n	8004714 <HAL_ADC_ConfigChannel+0x460>
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	0e9b      	lsrs	r3, r3, #26
 800470e:	f003 031f 	and.w	r3, r3, #31
 8004712:	e014      	b.n	800473e <HAL_ADC_ConfigChannel+0x48a>
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800471c:	fa93 f3a3 	rbit	r3, r3
 8004720:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004722:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004724:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004728:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800472c:	2b00      	cmp	r3, #0
 800472e:	d101      	bne.n	8004734 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004730:	2320      	movs	r3, #32
 8004732:	e004      	b.n	800473e <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004734:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004738:	fab3 f383 	clz	r3, r3
 800473c:	b2db      	uxtb	r3, r3
 800473e:	429a      	cmp	r2, r3
 8004740:	d106      	bne.n	8004750 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2200      	movs	r2, #0
 8004748:	2102      	movs	r1, #2
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff fa60 	bl	8003c10 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2103      	movs	r1, #3
 8004756:	4618      	mov	r0, r3
 8004758:	f7ff f9c4 	bl	8003ae4 <LL_ADC_GetOffsetChannel>
 800475c:	4603      	mov	r3, r0
 800475e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10a      	bne.n	800477c <HAL_ADC_ConfigChannel+0x4c8>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2103      	movs	r1, #3
 800476c:	4618      	mov	r0, r3
 800476e:	f7ff f9b9 	bl	8003ae4 <LL_ADC_GetOffsetChannel>
 8004772:	4603      	mov	r3, r0
 8004774:	0e9b      	lsrs	r3, r3, #26
 8004776:	f003 021f 	and.w	r2, r3, #31
 800477a:	e017      	b.n	80047ac <HAL_ADC_ConfigChannel+0x4f8>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2103      	movs	r1, #3
 8004782:	4618      	mov	r0, r3
 8004784:	f7ff f9ae 	bl	8003ae4 <LL_ADC_GetOffsetChannel>
 8004788:	4603      	mov	r3, r0
 800478a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800478e:	fa93 f3a3 	rbit	r3, r3
 8004792:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004796:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004798:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800479e:	2320      	movs	r3, #32
 80047a0:	e003      	b.n	80047aa <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80047a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047a4:	fab3 f383 	clz	r3, r3
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	461a      	mov	r2, r3
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d105      	bne.n	80047c4 <HAL_ADC_ConfigChannel+0x510>
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	0e9b      	lsrs	r3, r3, #26
 80047be:	f003 031f 	and.w	r3, r3, #31
 80047c2:	e011      	b.n	80047e8 <HAL_ADC_ConfigChannel+0x534>
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047cc:	fa93 f3a3 	rbit	r3, r3
 80047d0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80047d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047d4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80047d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d101      	bne.n	80047e0 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 80047dc:	2320      	movs	r3, #32
 80047de:	e003      	b.n	80047e8 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 80047e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047e2:	fab3 f383 	clz	r3, r3
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d14f      	bne.n	800488c <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2200      	movs	r2, #0
 80047f2:	2103      	movs	r1, #3
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7ff fa0b 	bl	8003c10 <LL_ADC_SetOffsetState>
 80047fa:	e047      	b.n	800488c <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004802:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	069b      	lsls	r3, r3, #26
 800480c:	429a      	cmp	r2, r3
 800480e:	d107      	bne.n	8004820 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800481e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004826:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	069b      	lsls	r3, r3, #26
 8004830:	429a      	cmp	r2, r3
 8004832:	d107      	bne.n	8004844 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004842:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800484a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	069b      	lsls	r3, r3, #26
 8004854:	429a      	cmp	r2, r3
 8004856:	d107      	bne.n	8004868 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004866:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800486e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	069b      	lsls	r3, r3, #26
 8004878:	429a      	cmp	r2, r3
 800487a:	d107      	bne.n	800488c <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800488a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4618      	mov	r0, r3
 8004892:	f7ff facd 	bl	8003e30 <LL_ADC_IsEnabled>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	f040 8219 	bne.w	8004cd0 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6818      	ldr	r0, [r3, #0]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	6819      	ldr	r1, [r3, #0]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	461a      	mov	r2, r3
 80048ac:	f7ff fa32 	bl	8003d14 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	4aa1      	ldr	r2, [pc, #644]	; (8004b3c <HAL_ADC_ConfigChannel+0x888>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	f040 812e 	bne.w	8004b18 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10b      	bne.n	80048e4 <HAL_ADC_ConfigChannel+0x630>
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	0e9b      	lsrs	r3, r3, #26
 80048d2:	3301      	adds	r3, #1
 80048d4:	f003 031f 	and.w	r3, r3, #31
 80048d8:	2b09      	cmp	r3, #9
 80048da:	bf94      	ite	ls
 80048dc:	2301      	movls	r3, #1
 80048de:	2300      	movhi	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	e019      	b.n	8004918 <HAL_ADC_ConfigChannel+0x664>
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048ec:	fa93 f3a3 	rbit	r3, r3
 80048f0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80048f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80048f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d101      	bne.n	8004900 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80048fc:	2320      	movs	r3, #32
 80048fe:	e003      	b.n	8004908 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8004900:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004902:	fab3 f383 	clz	r3, r3
 8004906:	b2db      	uxtb	r3, r3
 8004908:	3301      	adds	r3, #1
 800490a:	f003 031f 	and.w	r3, r3, #31
 800490e:	2b09      	cmp	r3, #9
 8004910:	bf94      	ite	ls
 8004912:	2301      	movls	r3, #1
 8004914:	2300      	movhi	r3, #0
 8004916:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004918:	2b00      	cmp	r3, #0
 800491a:	d079      	beq.n	8004a10 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004924:	2b00      	cmp	r3, #0
 8004926:	d107      	bne.n	8004938 <HAL_ADC_ConfigChannel+0x684>
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	0e9b      	lsrs	r3, r3, #26
 800492e:	3301      	adds	r3, #1
 8004930:	069b      	lsls	r3, r3, #26
 8004932:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004936:	e015      	b.n	8004964 <HAL_ADC_ConfigChannel+0x6b0>
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800493e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004940:	fa93 f3a3 	rbit	r3, r3
 8004944:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004948:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800494a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004950:	2320      	movs	r3, #32
 8004952:	e003      	b.n	800495c <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004956:	fab3 f383 	clz	r3, r3
 800495a:	b2db      	uxtb	r3, r3
 800495c:	3301      	adds	r3, #1
 800495e:	069b      	lsls	r3, r3, #26
 8004960:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800496c:	2b00      	cmp	r3, #0
 800496e:	d109      	bne.n	8004984 <HAL_ADC_ConfigChannel+0x6d0>
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	0e9b      	lsrs	r3, r3, #26
 8004976:	3301      	adds	r3, #1
 8004978:	f003 031f 	and.w	r3, r3, #31
 800497c:	2101      	movs	r1, #1
 800497e:	fa01 f303 	lsl.w	r3, r1, r3
 8004982:	e017      	b.n	80049b4 <HAL_ADC_ConfigChannel+0x700>
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800498a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800498c:	fa93 f3a3 	rbit	r3, r3
 8004990:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004994:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004996:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004998:	2b00      	cmp	r3, #0
 800499a:	d101      	bne.n	80049a0 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 800499c:	2320      	movs	r3, #32
 800499e:	e003      	b.n	80049a8 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 80049a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049a2:	fab3 f383 	clz	r3, r3
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	3301      	adds	r3, #1
 80049aa:	f003 031f 	and.w	r3, r3, #31
 80049ae:	2101      	movs	r1, #1
 80049b0:	fa01 f303 	lsl.w	r3, r1, r3
 80049b4:	ea42 0103 	orr.w	r1, r2, r3
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10a      	bne.n	80049da <HAL_ADC_ConfigChannel+0x726>
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	0e9b      	lsrs	r3, r3, #26
 80049ca:	3301      	adds	r3, #1
 80049cc:	f003 021f 	and.w	r2, r3, #31
 80049d0:	4613      	mov	r3, r2
 80049d2:	005b      	lsls	r3, r3, #1
 80049d4:	4413      	add	r3, r2
 80049d6:	051b      	lsls	r3, r3, #20
 80049d8:	e018      	b.n	8004a0c <HAL_ADC_ConfigChannel+0x758>
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e2:	fa93 f3a3 	rbit	r3, r3
 80049e6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80049e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ea:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80049ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d101      	bne.n	80049f6 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 80049f2:	2320      	movs	r3, #32
 80049f4:	e003      	b.n	80049fe <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 80049f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f8:	fab3 f383 	clz	r3, r3
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	3301      	adds	r3, #1
 8004a00:	f003 021f 	and.w	r2, r3, #31
 8004a04:	4613      	mov	r3, r2
 8004a06:	005b      	lsls	r3, r3, #1
 8004a08:	4413      	add	r3, r2
 8004a0a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a0c:	430b      	orrs	r3, r1
 8004a0e:	e07e      	b.n	8004b0e <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d107      	bne.n	8004a2c <HAL_ADC_ConfigChannel+0x778>
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	0e9b      	lsrs	r3, r3, #26
 8004a22:	3301      	adds	r3, #1
 8004a24:	069b      	lsls	r3, r3, #26
 8004a26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a2a:	e015      	b.n	8004a58 <HAL_ADC_ConfigChannel+0x7a4>
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a34:	fa93 f3a3 	rbit	r3, r3
 8004a38:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d101      	bne.n	8004a48 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004a44:	2320      	movs	r3, #32
 8004a46:	e003      	b.n	8004a50 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4a:	fab3 f383 	clz	r3, r3
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	3301      	adds	r3, #1
 8004a52:	069b      	lsls	r3, r3, #26
 8004a54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d109      	bne.n	8004a78 <HAL_ADC_ConfigChannel+0x7c4>
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	0e9b      	lsrs	r3, r3, #26
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	f003 031f 	and.w	r3, r3, #31
 8004a70:	2101      	movs	r1, #1
 8004a72:	fa01 f303 	lsl.w	r3, r1, r3
 8004a76:	e017      	b.n	8004aa8 <HAL_ADC_ConfigChannel+0x7f4>
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	fa93 f3a3 	rbit	r3, r3
 8004a84:	61bb      	str	r3, [r7, #24]
  return result;
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004a8a:	6a3b      	ldr	r3, [r7, #32]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d101      	bne.n	8004a94 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004a90:	2320      	movs	r3, #32
 8004a92:	e003      	b.n	8004a9c <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004a94:	6a3b      	ldr	r3, [r7, #32]
 8004a96:	fab3 f383 	clz	r3, r3
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	f003 031f 	and.w	r3, r3, #31
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa8:	ea42 0103 	orr.w	r1, r2, r3
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10d      	bne.n	8004ad4 <HAL_ADC_ConfigChannel+0x820>
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	0e9b      	lsrs	r3, r3, #26
 8004abe:	3301      	adds	r3, #1
 8004ac0:	f003 021f 	and.w	r2, r3, #31
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	005b      	lsls	r3, r3, #1
 8004ac8:	4413      	add	r3, r2
 8004aca:	3b1e      	subs	r3, #30
 8004acc:	051b      	lsls	r3, r3, #20
 8004ace:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ad2:	e01b      	b.n	8004b0c <HAL_ADC_ConfigChannel+0x858>
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	fa93 f3a3 	rbit	r3, r3
 8004ae0:	60fb      	str	r3, [r7, #12]
  return result;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d101      	bne.n	8004af0 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004aec:	2320      	movs	r3, #32
 8004aee:	e003      	b.n	8004af8 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	fab3 f383 	clz	r3, r3
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	3301      	adds	r3, #1
 8004afa:	f003 021f 	and.w	r2, r3, #31
 8004afe:	4613      	mov	r3, r2
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	4413      	add	r3, r2
 8004b04:	3b1e      	subs	r3, #30
 8004b06:	051b      	lsls	r3, r3, #20
 8004b08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b0c:	430b      	orrs	r3, r1
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	6892      	ldr	r2, [r2, #8]
 8004b12:	4619      	mov	r1, r3
 8004b14:	f7ff f8d2 	bl	8003cbc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f280 80d7 	bge.w	8004cd0 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a06      	ldr	r2, [pc, #24]	; (8004b40 <HAL_ADC_ConfigChannel+0x88c>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d004      	beq.n	8004b36 <HAL_ADC_ConfigChannel+0x882>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a04      	ldr	r2, [pc, #16]	; (8004b44 <HAL_ADC_ConfigChannel+0x890>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d10a      	bne.n	8004b4c <HAL_ADC_ConfigChannel+0x898>
 8004b36:	4b04      	ldr	r3, [pc, #16]	; (8004b48 <HAL_ADC_ConfigChannel+0x894>)
 8004b38:	e009      	b.n	8004b4e <HAL_ADC_ConfigChannel+0x89a>
 8004b3a:	bf00      	nop
 8004b3c:	47ff0000 	.word	0x47ff0000
 8004b40:	40022000 	.word	0x40022000
 8004b44:	40022100 	.word	0x40022100
 8004b48:	40022300 	.word	0x40022300
 8004b4c:	4b65      	ldr	r3, [pc, #404]	; (8004ce4 <HAL_ADC_ConfigChannel+0xa30>)
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fe ff88 	bl	8003a64 <LL_ADC_GetCommonPathInternalCh>
 8004b54:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a62      	ldr	r2, [pc, #392]	; (8004ce8 <HAL_ADC_ConfigChannel+0xa34>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d004      	beq.n	8004b6c <HAL_ADC_ConfigChannel+0x8b8>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a61      	ldr	r2, [pc, #388]	; (8004cec <HAL_ADC_ConfigChannel+0xa38>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d10e      	bne.n	8004b8a <HAL_ADC_ConfigChannel+0x8d6>
 8004b6c:	485e      	ldr	r0, [pc, #376]	; (8004ce8 <HAL_ADC_ConfigChannel+0xa34>)
 8004b6e:	f7ff f95f 	bl	8003e30 <LL_ADC_IsEnabled>
 8004b72:	4604      	mov	r4, r0
 8004b74:	485d      	ldr	r0, [pc, #372]	; (8004cec <HAL_ADC_ConfigChannel+0xa38>)
 8004b76:	f7ff f95b 	bl	8003e30 <LL_ADC_IsEnabled>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	4323      	orrs	r3, r4
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	bf0c      	ite	eq
 8004b82:	2301      	moveq	r3, #1
 8004b84:	2300      	movne	r3, #0
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	e008      	b.n	8004b9c <HAL_ADC_ConfigChannel+0x8e8>
 8004b8a:	4859      	ldr	r0, [pc, #356]	; (8004cf0 <HAL_ADC_ConfigChannel+0xa3c>)
 8004b8c:	f7ff f950 	bl	8003e30 <LL_ADC_IsEnabled>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	bf0c      	ite	eq
 8004b96:	2301      	moveq	r3, #1
 8004b98:	2300      	movne	r3, #0
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f000 8084 	beq.w	8004caa <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a53      	ldr	r2, [pc, #332]	; (8004cf4 <HAL_ADC_ConfigChannel+0xa40>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d132      	bne.n	8004c12 <HAL_ADC_ConfigChannel+0x95e>
 8004bac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004bb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d12c      	bne.n	8004c12 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a4c      	ldr	r2, [pc, #304]	; (8004cf0 <HAL_ADC_ConfigChannel+0xa3c>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	f040 8086 	bne.w	8004cd0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a47      	ldr	r2, [pc, #284]	; (8004ce8 <HAL_ADC_ConfigChannel+0xa34>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d004      	beq.n	8004bd8 <HAL_ADC_ConfigChannel+0x924>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a46      	ldr	r2, [pc, #280]	; (8004cec <HAL_ADC_ConfigChannel+0xa38>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d101      	bne.n	8004bdc <HAL_ADC_ConfigChannel+0x928>
 8004bd8:	4a47      	ldr	r2, [pc, #284]	; (8004cf8 <HAL_ADC_ConfigChannel+0xa44>)
 8004bda:	e000      	b.n	8004bde <HAL_ADC_ConfigChannel+0x92a>
 8004bdc:	4a41      	ldr	r2, [pc, #260]	; (8004ce4 <HAL_ADC_ConfigChannel+0xa30>)
 8004bde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004be2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004be6:	4619      	mov	r1, r3
 8004be8:	4610      	mov	r0, r2
 8004bea:	f7fe ff28 	bl	8003a3e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004bee:	4b43      	ldr	r3, [pc, #268]	; (8004cfc <HAL_ADC_ConfigChannel+0xa48>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	099b      	lsrs	r3, r3, #6
 8004bf4:	4a42      	ldr	r2, [pc, #264]	; (8004d00 <HAL_ADC_ConfigChannel+0xa4c>)
 8004bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfa:	099b      	lsrs	r3, r3, #6
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004c02:	e002      	b.n	8004c0a <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	3b01      	subs	r3, #1
 8004c08:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1f9      	bne.n	8004c04 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c10:	e05e      	b.n	8004cd0 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a3b      	ldr	r2, [pc, #236]	; (8004d04 <HAL_ADC_ConfigChannel+0xa50>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d120      	bne.n	8004c5e <HAL_ADC_ConfigChannel+0x9aa>
 8004c1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d11a      	bne.n	8004c5e <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a30      	ldr	r2, [pc, #192]	; (8004cf0 <HAL_ADC_ConfigChannel+0xa3c>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d14e      	bne.n	8004cd0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a2c      	ldr	r2, [pc, #176]	; (8004ce8 <HAL_ADC_ConfigChannel+0xa34>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d004      	beq.n	8004c46 <HAL_ADC_ConfigChannel+0x992>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a2a      	ldr	r2, [pc, #168]	; (8004cec <HAL_ADC_ConfigChannel+0xa38>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d101      	bne.n	8004c4a <HAL_ADC_ConfigChannel+0x996>
 8004c46:	4a2c      	ldr	r2, [pc, #176]	; (8004cf8 <HAL_ADC_ConfigChannel+0xa44>)
 8004c48:	e000      	b.n	8004c4c <HAL_ADC_ConfigChannel+0x998>
 8004c4a:	4a26      	ldr	r2, [pc, #152]	; (8004ce4 <HAL_ADC_ConfigChannel+0xa30>)
 8004c4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c54:	4619      	mov	r1, r3
 8004c56:	4610      	mov	r0, r2
 8004c58:	f7fe fef1 	bl	8003a3e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c5c:	e038      	b.n	8004cd0 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a29      	ldr	r2, [pc, #164]	; (8004d08 <HAL_ADC_ConfigChannel+0xa54>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d133      	bne.n	8004cd0 <HAL_ADC_ConfigChannel+0xa1c>
 8004c68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d12d      	bne.n	8004cd0 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a1d      	ldr	r2, [pc, #116]	; (8004cf0 <HAL_ADC_ConfigChannel+0xa3c>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d128      	bne.n	8004cd0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a19      	ldr	r2, [pc, #100]	; (8004ce8 <HAL_ADC_ConfigChannel+0xa34>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d004      	beq.n	8004c92 <HAL_ADC_ConfigChannel+0x9de>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a17      	ldr	r2, [pc, #92]	; (8004cec <HAL_ADC_ConfigChannel+0xa38>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d101      	bne.n	8004c96 <HAL_ADC_ConfigChannel+0x9e2>
 8004c92:	4a19      	ldr	r2, [pc, #100]	; (8004cf8 <HAL_ADC_ConfigChannel+0xa44>)
 8004c94:	e000      	b.n	8004c98 <HAL_ADC_ConfigChannel+0x9e4>
 8004c96:	4a13      	ldr	r2, [pc, #76]	; (8004ce4 <HAL_ADC_ConfigChannel+0xa30>)
 8004c98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	4610      	mov	r0, r2
 8004ca4:	f7fe fecb 	bl	8003a3e <LL_ADC_SetCommonPathInternalCh>
 8004ca8:	e012      	b.n	8004cd0 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cae:	f043 0220 	orr.w	r2, r3, #32
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004cbc:	e008      	b.n	8004cd0 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cc2:	f043 0220 	orr.w	r2, r3, #32
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004cd8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	37e4      	adds	r7, #228	; 0xe4
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd90      	pop	{r4, r7, pc}
 8004ce4:	58026300 	.word	0x58026300
 8004ce8:	40022000 	.word	0x40022000
 8004cec:	40022100 	.word	0x40022100
 8004cf0:	58026000 	.word	0x58026000
 8004cf4:	c7520000 	.word	0xc7520000
 8004cf8:	40022300 	.word	0x40022300
 8004cfc:	24000000 	.word	0x24000000
 8004d00:	053e2d63 	.word	0x053e2d63
 8004d04:	c3210000 	.word	0xc3210000
 8004d08:	cb840000 	.word	0xcb840000

08004d0c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a6c      	ldr	r2, [pc, #432]	; (8004ecc <ADC_ConfigureBoostMode+0x1c0>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d004      	beq.n	8004d28 <ADC_ConfigureBoostMode+0x1c>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a6b      	ldr	r2, [pc, #428]	; (8004ed0 <ADC_ConfigureBoostMode+0x1c4>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d109      	bne.n	8004d3c <ADC_ConfigureBoostMode+0x30>
 8004d28:	4b6a      	ldr	r3, [pc, #424]	; (8004ed4 <ADC_ConfigureBoostMode+0x1c8>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	bf14      	ite	ne
 8004d34:	2301      	movne	r3, #1
 8004d36:	2300      	moveq	r3, #0
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	e008      	b.n	8004d4e <ADC_ConfigureBoostMode+0x42>
 8004d3c:	4b66      	ldr	r3, [pc, #408]	; (8004ed8 <ADC_ConfigureBoostMode+0x1cc>)
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	bf14      	ite	ne
 8004d48:	2301      	movne	r3, #1
 8004d4a:	2300      	moveq	r3, #0
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d01c      	beq.n	8004d8c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004d52:	f005 fc91 	bl	800a678 <HAL_RCC_GetHCLKFreq>
 8004d56:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d60:	d010      	beq.n	8004d84 <ADC_ConfigureBoostMode+0x78>
 8004d62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d66:	d873      	bhi.n	8004e50 <ADC_ConfigureBoostMode+0x144>
 8004d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d6c:	d002      	beq.n	8004d74 <ADC_ConfigureBoostMode+0x68>
 8004d6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d72:	d16d      	bne.n	8004e50 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	0c1b      	lsrs	r3, r3, #16
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d80:	60fb      	str	r3, [r7, #12]
        break;
 8004d82:	e068      	b.n	8004e56 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	089b      	lsrs	r3, r3, #2
 8004d88:	60fb      	str	r3, [r7, #12]
        break;
 8004d8a:	e064      	b.n	8004e56 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004d8c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004d90:	f04f 0100 	mov.w	r1, #0
 8004d94:	f006 fe6c 	bl	800ba70 <HAL_RCCEx_GetPeriphCLKFreq>
 8004d98:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004da2:	d051      	beq.n	8004e48 <ADC_ConfigureBoostMode+0x13c>
 8004da4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004da8:	d854      	bhi.n	8004e54 <ADC_ConfigureBoostMode+0x148>
 8004daa:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004dae:	d047      	beq.n	8004e40 <ADC_ConfigureBoostMode+0x134>
 8004db0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004db4:	d84e      	bhi.n	8004e54 <ADC_ConfigureBoostMode+0x148>
 8004db6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004dba:	d03d      	beq.n	8004e38 <ADC_ConfigureBoostMode+0x12c>
 8004dbc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004dc0:	d848      	bhi.n	8004e54 <ADC_ConfigureBoostMode+0x148>
 8004dc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dc6:	d033      	beq.n	8004e30 <ADC_ConfigureBoostMode+0x124>
 8004dc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dcc:	d842      	bhi.n	8004e54 <ADC_ConfigureBoostMode+0x148>
 8004dce:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004dd2:	d029      	beq.n	8004e28 <ADC_ConfigureBoostMode+0x11c>
 8004dd4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004dd8:	d83c      	bhi.n	8004e54 <ADC_ConfigureBoostMode+0x148>
 8004dda:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004dde:	d01a      	beq.n	8004e16 <ADC_ConfigureBoostMode+0x10a>
 8004de0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004de4:	d836      	bhi.n	8004e54 <ADC_ConfigureBoostMode+0x148>
 8004de6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004dea:	d014      	beq.n	8004e16 <ADC_ConfigureBoostMode+0x10a>
 8004dec:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004df0:	d830      	bhi.n	8004e54 <ADC_ConfigureBoostMode+0x148>
 8004df2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004df6:	d00e      	beq.n	8004e16 <ADC_ConfigureBoostMode+0x10a>
 8004df8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dfc:	d82a      	bhi.n	8004e54 <ADC_ConfigureBoostMode+0x148>
 8004dfe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004e02:	d008      	beq.n	8004e16 <ADC_ConfigureBoostMode+0x10a>
 8004e04:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004e08:	d824      	bhi.n	8004e54 <ADC_ConfigureBoostMode+0x148>
 8004e0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e0e:	d002      	beq.n	8004e16 <ADC_ConfigureBoostMode+0x10a>
 8004e10:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e14:	d11e      	bne.n	8004e54 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	0c9b      	lsrs	r3, r3, #18
 8004e1c:	005b      	lsls	r3, r3, #1
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e24:	60fb      	str	r3, [r7, #12]
        break;
 8004e26:	e016      	b.n	8004e56 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	091b      	lsrs	r3, r3, #4
 8004e2c:	60fb      	str	r3, [r7, #12]
        break;
 8004e2e:	e012      	b.n	8004e56 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	095b      	lsrs	r3, r3, #5
 8004e34:	60fb      	str	r3, [r7, #12]
        break;
 8004e36:	e00e      	b.n	8004e56 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	099b      	lsrs	r3, r3, #6
 8004e3c:	60fb      	str	r3, [r7, #12]
        break;
 8004e3e:	e00a      	b.n	8004e56 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	09db      	lsrs	r3, r3, #7
 8004e44:	60fb      	str	r3, [r7, #12]
        break;
 8004e46:	e006      	b.n	8004e56 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	0a1b      	lsrs	r3, r3, #8
 8004e4c:	60fb      	str	r3, [r7, #12]
        break;
 8004e4e:	e002      	b.n	8004e56 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004e50:	bf00      	nop
 8004e52:	e000      	b.n	8004e56 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004e54:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	085b      	lsrs	r3, r3, #1
 8004e5a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4a1f      	ldr	r2, [pc, #124]	; (8004edc <ADC_ConfigureBoostMode+0x1d0>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d808      	bhi.n	8004e76 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689a      	ldr	r2, [r3, #8]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004e72:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004e74:	e025      	b.n	8004ec2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	4a19      	ldr	r2, [pc, #100]	; (8004ee0 <ADC_ConfigureBoostMode+0x1d4>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d80a      	bhi.n	8004e94 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e90:	609a      	str	r2, [r3, #8]
}
 8004e92:	e016      	b.n	8004ec2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	4a13      	ldr	r2, [pc, #76]	; (8004ee4 <ADC_ConfigureBoostMode+0x1d8>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d80a      	bhi.n	8004eb2 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eae:	609a      	str	r2, [r3, #8]
}
 8004eb0:	e007      	b.n	8004ec2 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004ec0:	609a      	str	r2, [r3, #8]
}
 8004ec2:	bf00      	nop
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	40022000 	.word	0x40022000
 8004ed0:	40022100 	.word	0x40022100
 8004ed4:	40022300 	.word	0x40022300
 8004ed8:	58026300 	.word	0x58026300
 8004edc:	005f5e10 	.word	0x005f5e10
 8004ee0:	00bebc20 	.word	0x00bebc20
 8004ee4:	017d7840 	.word	0x017d7840

08004ee8 <LL_ADC_IsEnabled>:
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f003 0301 	and.w	r3, r3, #1
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d101      	bne.n	8004f00 <LL_ADC_IsEnabled+0x18>
 8004efc:	2301      	movs	r3, #1
 8004efe:	e000      	b.n	8004f02 <LL_ADC_IsEnabled+0x1a>
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <LL_ADC_REG_IsConversionOngoing>:
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f003 0304 	and.w	r3, r3, #4
 8004f1e:	2b04      	cmp	r3, #4
 8004f20:	d101      	bne.n	8004f26 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004f22:	2301      	movs	r3, #1
 8004f24:	e000      	b.n	8004f28 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004f34:	b590      	push	{r4, r7, lr}
 8004f36:	b0a3      	sub	sp, #140	; 0x8c
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d101      	bne.n	8004f52 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004f4e:	2302      	movs	r3, #2
 8004f50:	e0c1      	b.n	80050d6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a5e      	ldr	r2, [pc, #376]	; (80050e0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d102      	bne.n	8004f72 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004f6c:	4b5d      	ldr	r3, [pc, #372]	; (80050e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004f6e:	60fb      	str	r3, [r7, #12]
 8004f70:	e001      	b.n	8004f76 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004f72:	2300      	movs	r3, #0
 8004f74:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d10b      	bne.n	8004f94 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f80:	f043 0220 	orr.w	r2, r3, #32
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e0a0      	b.n	80050d6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7ff ffb9 	bl	8004f0e <LL_ADC_REG_IsConversionOngoing>
 8004f9c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7ff ffb2 	bl	8004f0e <LL_ADC_REG_IsConversionOngoing>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f040 8081 	bne.w	80050b4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004fb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d17c      	bne.n	80050b4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a48      	ldr	r2, [pc, #288]	; (80050e0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d004      	beq.n	8004fce <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a46      	ldr	r2, [pc, #280]	; (80050e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d101      	bne.n	8004fd2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004fce:	4b46      	ldr	r3, [pc, #280]	; (80050e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004fd0:	e000      	b.n	8004fd4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004fd2:	4b46      	ldr	r3, [pc, #280]	; (80050ec <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004fd4:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d039      	beq.n	8005052 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004fde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	431a      	orrs	r2, r3
 8004fec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a3a      	ldr	r2, [pc, #232]	; (80050e0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d004      	beq.n	8005004 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a39      	ldr	r2, [pc, #228]	; (80050e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d10e      	bne.n	8005022 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005004:	4836      	ldr	r0, [pc, #216]	; (80050e0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005006:	f7ff ff6f 	bl	8004ee8 <LL_ADC_IsEnabled>
 800500a:	4604      	mov	r4, r0
 800500c:	4835      	ldr	r0, [pc, #212]	; (80050e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800500e:	f7ff ff6b 	bl	8004ee8 <LL_ADC_IsEnabled>
 8005012:	4603      	mov	r3, r0
 8005014:	4323      	orrs	r3, r4
 8005016:	2b00      	cmp	r3, #0
 8005018:	bf0c      	ite	eq
 800501a:	2301      	moveq	r3, #1
 800501c:	2300      	movne	r3, #0
 800501e:	b2db      	uxtb	r3, r3
 8005020:	e008      	b.n	8005034 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8005022:	4833      	ldr	r0, [pc, #204]	; (80050f0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005024:	f7ff ff60 	bl	8004ee8 <LL_ADC_IsEnabled>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	bf0c      	ite	eq
 800502e:	2301      	moveq	r3, #1
 8005030:	2300      	movne	r3, #0
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b00      	cmp	r3, #0
 8005036:	d047      	beq.n	80050c8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005038:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800503a:	689a      	ldr	r2, [r3, #8]
 800503c:	4b2d      	ldr	r3, [pc, #180]	; (80050f4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800503e:	4013      	ands	r3, r2
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	6811      	ldr	r1, [r2, #0]
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	6892      	ldr	r2, [r2, #8]
 8005048:	430a      	orrs	r2, r1
 800504a:	431a      	orrs	r2, r3
 800504c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800504e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005050:	e03a      	b.n	80050c8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005052:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800505a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800505c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a1f      	ldr	r2, [pc, #124]	; (80050e0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d004      	beq.n	8005072 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a1d      	ldr	r2, [pc, #116]	; (80050e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d10e      	bne.n	8005090 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8005072:	481b      	ldr	r0, [pc, #108]	; (80050e0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005074:	f7ff ff38 	bl	8004ee8 <LL_ADC_IsEnabled>
 8005078:	4604      	mov	r4, r0
 800507a:	481a      	ldr	r0, [pc, #104]	; (80050e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800507c:	f7ff ff34 	bl	8004ee8 <LL_ADC_IsEnabled>
 8005080:	4603      	mov	r3, r0
 8005082:	4323      	orrs	r3, r4
 8005084:	2b00      	cmp	r3, #0
 8005086:	bf0c      	ite	eq
 8005088:	2301      	moveq	r3, #1
 800508a:	2300      	movne	r3, #0
 800508c:	b2db      	uxtb	r3, r3
 800508e:	e008      	b.n	80050a2 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8005090:	4817      	ldr	r0, [pc, #92]	; (80050f0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005092:	f7ff ff29 	bl	8004ee8 <LL_ADC_IsEnabled>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	bf0c      	ite	eq
 800509c:	2301      	moveq	r3, #1
 800509e:	2300      	movne	r3, #0
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d010      	beq.n	80050c8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80050a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050a8:	689a      	ldr	r2, [r3, #8]
 80050aa:	4b12      	ldr	r3, [pc, #72]	; (80050f4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80050ac:	4013      	ands	r3, r2
 80050ae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80050b0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80050b2:	e009      	b.n	80050c8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050b8:	f043 0220 	orr.w	r2, r3, #32
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80050c6:	e000      	b.n	80050ca <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80050c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80050d2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	378c      	adds	r7, #140	; 0x8c
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd90      	pop	{r4, r7, pc}
 80050de:	bf00      	nop
 80050e0:	40022000 	.word	0x40022000
 80050e4:	40022100 	.word	0x40022100
 80050e8:	40022300 	.word	0x40022300
 80050ec:	58026300 	.word	0x58026300
 80050f0:	58026000 	.word	0x58026000
 80050f4:	fffff0e0 	.word	0xfffff0e0

080050f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f003 0307 	and.w	r3, r3, #7
 8005106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005108:	4b0b      	ldr	r3, [pc, #44]	; (8005138 <__NVIC_SetPriorityGrouping+0x40>)
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005114:	4013      	ands	r3, r2
 8005116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005120:	4b06      	ldr	r3, [pc, #24]	; (800513c <__NVIC_SetPriorityGrouping+0x44>)
 8005122:	4313      	orrs	r3, r2
 8005124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005126:	4a04      	ldr	r2, [pc, #16]	; (8005138 <__NVIC_SetPriorityGrouping+0x40>)
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	60d3      	str	r3, [r2, #12]
}
 800512c:	bf00      	nop
 800512e:	3714      	adds	r7, #20
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr
 8005138:	e000ed00 	.word	0xe000ed00
 800513c:	05fa0000 	.word	0x05fa0000

08005140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005140:	b480      	push	{r7}
 8005142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005144:	4b04      	ldr	r3, [pc, #16]	; (8005158 <__NVIC_GetPriorityGrouping+0x18>)
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	0a1b      	lsrs	r3, r3, #8
 800514a:	f003 0307 	and.w	r3, r3, #7
}
 800514e:	4618      	mov	r0, r3
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	e000ed00 	.word	0xe000ed00

0800515c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	4603      	mov	r3, r0
 8005164:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005166:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800516a:	2b00      	cmp	r3, #0
 800516c:	db0b      	blt.n	8005186 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800516e:	88fb      	ldrh	r3, [r7, #6]
 8005170:	f003 021f 	and.w	r2, r3, #31
 8005174:	4907      	ldr	r1, [pc, #28]	; (8005194 <__NVIC_EnableIRQ+0x38>)
 8005176:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800517a:	095b      	lsrs	r3, r3, #5
 800517c:	2001      	movs	r0, #1
 800517e:	fa00 f202 	lsl.w	r2, r0, r2
 8005182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	e000e100 	.word	0xe000e100

08005198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	4603      	mov	r3, r0
 80051a0:	6039      	str	r1, [r7, #0]
 80051a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80051a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	db0a      	blt.n	80051c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	b2da      	uxtb	r2, r3
 80051b0:	490c      	ldr	r1, [pc, #48]	; (80051e4 <__NVIC_SetPriority+0x4c>)
 80051b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051b6:	0112      	lsls	r2, r2, #4
 80051b8:	b2d2      	uxtb	r2, r2
 80051ba:	440b      	add	r3, r1
 80051bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051c0:	e00a      	b.n	80051d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	4908      	ldr	r1, [pc, #32]	; (80051e8 <__NVIC_SetPriority+0x50>)
 80051c8:	88fb      	ldrh	r3, [r7, #6]
 80051ca:	f003 030f 	and.w	r3, r3, #15
 80051ce:	3b04      	subs	r3, #4
 80051d0:	0112      	lsls	r2, r2, #4
 80051d2:	b2d2      	uxtb	r2, r2
 80051d4:	440b      	add	r3, r1
 80051d6:	761a      	strb	r2, [r3, #24]
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	e000e100 	.word	0xe000e100
 80051e8:	e000ed00 	.word	0xe000ed00

080051ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b089      	sub	sp, #36	; 0x24
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f003 0307 	and.w	r3, r3, #7
 80051fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	f1c3 0307 	rsb	r3, r3, #7
 8005206:	2b04      	cmp	r3, #4
 8005208:	bf28      	it	cs
 800520a:	2304      	movcs	r3, #4
 800520c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	3304      	adds	r3, #4
 8005212:	2b06      	cmp	r3, #6
 8005214:	d902      	bls.n	800521c <NVIC_EncodePriority+0x30>
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	3b03      	subs	r3, #3
 800521a:	e000      	b.n	800521e <NVIC_EncodePriority+0x32>
 800521c:	2300      	movs	r3, #0
 800521e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005220:	f04f 32ff 	mov.w	r2, #4294967295
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	fa02 f303 	lsl.w	r3, r2, r3
 800522a:	43da      	mvns	r2, r3
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	401a      	ands	r2, r3
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005234:	f04f 31ff 	mov.w	r1, #4294967295
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	fa01 f303 	lsl.w	r3, r1, r3
 800523e:	43d9      	mvns	r1, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005244:	4313      	orrs	r3, r2
         );
}
 8005246:	4618      	mov	r0, r3
 8005248:	3724      	adds	r7, #36	; 0x24
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
	...

08005254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	3b01      	subs	r3, #1
 8005260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005264:	d301      	bcc.n	800526a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005266:	2301      	movs	r3, #1
 8005268:	e00f      	b.n	800528a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800526a:	4a0a      	ldr	r2, [pc, #40]	; (8005294 <SysTick_Config+0x40>)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	3b01      	subs	r3, #1
 8005270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005272:	210f      	movs	r1, #15
 8005274:	f04f 30ff 	mov.w	r0, #4294967295
 8005278:	f7ff ff8e 	bl	8005198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800527c:	4b05      	ldr	r3, [pc, #20]	; (8005294 <SysTick_Config+0x40>)
 800527e:	2200      	movs	r2, #0
 8005280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005282:	4b04      	ldr	r3, [pc, #16]	; (8005294 <SysTick_Config+0x40>)
 8005284:	2207      	movs	r2, #7
 8005286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	e000e010 	.word	0xe000e010

08005298 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f7ff ff29 	bl	80050f8 <__NVIC_SetPriorityGrouping>
}
 80052a6:	bf00      	nop
 80052a8:	3708      	adds	r7, #8
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b086      	sub	sp, #24
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	4603      	mov	r3, r0
 80052b6:	60b9      	str	r1, [r7, #8]
 80052b8:	607a      	str	r2, [r7, #4]
 80052ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80052bc:	f7ff ff40 	bl	8005140 <__NVIC_GetPriorityGrouping>
 80052c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	68b9      	ldr	r1, [r7, #8]
 80052c6:	6978      	ldr	r0, [r7, #20]
 80052c8:	f7ff ff90 	bl	80051ec <NVIC_EncodePriority>
 80052cc:	4602      	mov	r2, r0
 80052ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80052d2:	4611      	mov	r1, r2
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7ff ff5f 	bl	8005198 <__NVIC_SetPriority>
}
 80052da:	bf00      	nop
 80052dc:	3718      	adds	r7, #24
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b082      	sub	sp, #8
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	4603      	mov	r3, r0
 80052ea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7ff ff33 	bl	800515c <__NVIC_EnableIRQ>
}
 80052f6:	bf00      	nop
 80052f8:	3708      	adds	r7, #8
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b082      	sub	sp, #8
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f7ff ffa4 	bl	8005254 <SysTick_Config>
 800530c:	4603      	mov	r3, r0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3708      	adds	r7, #8
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
	...

08005318 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005320:	f7fe fb34 	bl	800398c <HAL_GetTick>
 8005324:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d101      	bne.n	8005330 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e312      	b.n	8005956 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a66      	ldr	r2, [pc, #408]	; (80054d0 <HAL_DMA_Init+0x1b8>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d04a      	beq.n	80053d0 <HAL_DMA_Init+0xb8>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a65      	ldr	r2, [pc, #404]	; (80054d4 <HAL_DMA_Init+0x1bc>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d045      	beq.n	80053d0 <HAL_DMA_Init+0xb8>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a63      	ldr	r2, [pc, #396]	; (80054d8 <HAL_DMA_Init+0x1c0>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d040      	beq.n	80053d0 <HAL_DMA_Init+0xb8>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a62      	ldr	r2, [pc, #392]	; (80054dc <HAL_DMA_Init+0x1c4>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d03b      	beq.n	80053d0 <HAL_DMA_Init+0xb8>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a60      	ldr	r2, [pc, #384]	; (80054e0 <HAL_DMA_Init+0x1c8>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d036      	beq.n	80053d0 <HAL_DMA_Init+0xb8>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a5f      	ldr	r2, [pc, #380]	; (80054e4 <HAL_DMA_Init+0x1cc>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d031      	beq.n	80053d0 <HAL_DMA_Init+0xb8>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a5d      	ldr	r2, [pc, #372]	; (80054e8 <HAL_DMA_Init+0x1d0>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d02c      	beq.n	80053d0 <HAL_DMA_Init+0xb8>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a5c      	ldr	r2, [pc, #368]	; (80054ec <HAL_DMA_Init+0x1d4>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d027      	beq.n	80053d0 <HAL_DMA_Init+0xb8>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a5a      	ldr	r2, [pc, #360]	; (80054f0 <HAL_DMA_Init+0x1d8>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d022      	beq.n	80053d0 <HAL_DMA_Init+0xb8>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a59      	ldr	r2, [pc, #356]	; (80054f4 <HAL_DMA_Init+0x1dc>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d01d      	beq.n	80053d0 <HAL_DMA_Init+0xb8>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a57      	ldr	r2, [pc, #348]	; (80054f8 <HAL_DMA_Init+0x1e0>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d018      	beq.n	80053d0 <HAL_DMA_Init+0xb8>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a56      	ldr	r2, [pc, #344]	; (80054fc <HAL_DMA_Init+0x1e4>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d013      	beq.n	80053d0 <HAL_DMA_Init+0xb8>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a54      	ldr	r2, [pc, #336]	; (8005500 <HAL_DMA_Init+0x1e8>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d00e      	beq.n	80053d0 <HAL_DMA_Init+0xb8>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a53      	ldr	r2, [pc, #332]	; (8005504 <HAL_DMA_Init+0x1ec>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d009      	beq.n	80053d0 <HAL_DMA_Init+0xb8>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a51      	ldr	r2, [pc, #324]	; (8005508 <HAL_DMA_Init+0x1f0>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d004      	beq.n	80053d0 <HAL_DMA_Init+0xb8>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a50      	ldr	r2, [pc, #320]	; (800550c <HAL_DMA_Init+0x1f4>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d101      	bne.n	80053d4 <HAL_DMA_Init+0xbc>
 80053d0:	2301      	movs	r3, #1
 80053d2:	e000      	b.n	80053d6 <HAL_DMA_Init+0xbe>
 80053d4:	2300      	movs	r3, #0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f000 813c 	beq.w	8005654 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a37      	ldr	r2, [pc, #220]	; (80054d0 <HAL_DMA_Init+0x1b8>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d04a      	beq.n	800548c <HAL_DMA_Init+0x174>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a36      	ldr	r2, [pc, #216]	; (80054d4 <HAL_DMA_Init+0x1bc>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d045      	beq.n	800548c <HAL_DMA_Init+0x174>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a34      	ldr	r2, [pc, #208]	; (80054d8 <HAL_DMA_Init+0x1c0>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d040      	beq.n	800548c <HAL_DMA_Init+0x174>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a33      	ldr	r2, [pc, #204]	; (80054dc <HAL_DMA_Init+0x1c4>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d03b      	beq.n	800548c <HAL_DMA_Init+0x174>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a31      	ldr	r2, [pc, #196]	; (80054e0 <HAL_DMA_Init+0x1c8>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d036      	beq.n	800548c <HAL_DMA_Init+0x174>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a30      	ldr	r2, [pc, #192]	; (80054e4 <HAL_DMA_Init+0x1cc>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d031      	beq.n	800548c <HAL_DMA_Init+0x174>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a2e      	ldr	r2, [pc, #184]	; (80054e8 <HAL_DMA_Init+0x1d0>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d02c      	beq.n	800548c <HAL_DMA_Init+0x174>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a2d      	ldr	r2, [pc, #180]	; (80054ec <HAL_DMA_Init+0x1d4>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d027      	beq.n	800548c <HAL_DMA_Init+0x174>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a2b      	ldr	r2, [pc, #172]	; (80054f0 <HAL_DMA_Init+0x1d8>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d022      	beq.n	800548c <HAL_DMA_Init+0x174>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a2a      	ldr	r2, [pc, #168]	; (80054f4 <HAL_DMA_Init+0x1dc>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d01d      	beq.n	800548c <HAL_DMA_Init+0x174>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a28      	ldr	r2, [pc, #160]	; (80054f8 <HAL_DMA_Init+0x1e0>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d018      	beq.n	800548c <HAL_DMA_Init+0x174>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a27      	ldr	r2, [pc, #156]	; (80054fc <HAL_DMA_Init+0x1e4>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d013      	beq.n	800548c <HAL_DMA_Init+0x174>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a25      	ldr	r2, [pc, #148]	; (8005500 <HAL_DMA_Init+0x1e8>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d00e      	beq.n	800548c <HAL_DMA_Init+0x174>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a24      	ldr	r2, [pc, #144]	; (8005504 <HAL_DMA_Init+0x1ec>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d009      	beq.n	800548c <HAL_DMA_Init+0x174>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a22      	ldr	r2, [pc, #136]	; (8005508 <HAL_DMA_Init+0x1f0>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d004      	beq.n	800548c <HAL_DMA_Init+0x174>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a21      	ldr	r2, [pc, #132]	; (800550c <HAL_DMA_Init+0x1f4>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d108      	bne.n	800549e <HAL_DMA_Init+0x186>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 0201 	bic.w	r2, r2, #1
 800549a:	601a      	str	r2, [r3, #0]
 800549c:	e007      	b.n	80054ae <HAL_DMA_Init+0x196>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f022 0201 	bic.w	r2, r2, #1
 80054ac:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80054ae:	e02f      	b.n	8005510 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054b0:	f7fe fa6c 	bl	800398c <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b05      	cmp	r3, #5
 80054bc:	d928      	bls.n	8005510 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2220      	movs	r2, #32
 80054c2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2203      	movs	r2, #3
 80054c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e242      	b.n	8005956 <HAL_DMA_Init+0x63e>
 80054d0:	40020010 	.word	0x40020010
 80054d4:	40020028 	.word	0x40020028
 80054d8:	40020040 	.word	0x40020040
 80054dc:	40020058 	.word	0x40020058
 80054e0:	40020070 	.word	0x40020070
 80054e4:	40020088 	.word	0x40020088
 80054e8:	400200a0 	.word	0x400200a0
 80054ec:	400200b8 	.word	0x400200b8
 80054f0:	40020410 	.word	0x40020410
 80054f4:	40020428 	.word	0x40020428
 80054f8:	40020440 	.word	0x40020440
 80054fc:	40020458 	.word	0x40020458
 8005500:	40020470 	.word	0x40020470
 8005504:	40020488 	.word	0x40020488
 8005508:	400204a0 	.word	0x400204a0
 800550c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1c8      	bne.n	80054b0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	4b83      	ldr	r3, [pc, #524]	; (8005738 <HAL_DMA_Init+0x420>)
 800552a:	4013      	ands	r3, r2
 800552c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005536:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005542:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800554e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	4313      	orrs	r3, r2
 800555a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005560:	2b04      	cmp	r3, #4
 8005562:	d107      	bne.n	8005574 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556c:	4313      	orrs	r3, r2
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	4313      	orrs	r3, r2
 8005572:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	2b28      	cmp	r3, #40	; 0x28
 800557a:	d903      	bls.n	8005584 <HAL_DMA_Init+0x26c>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	2b2e      	cmp	r3, #46	; 0x2e
 8005582:	d91f      	bls.n	80055c4 <HAL_DMA_Init+0x2ac>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	2b3e      	cmp	r3, #62	; 0x3e
 800558a:	d903      	bls.n	8005594 <HAL_DMA_Init+0x27c>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	2b42      	cmp	r3, #66	; 0x42
 8005592:	d917      	bls.n	80055c4 <HAL_DMA_Init+0x2ac>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	2b46      	cmp	r3, #70	; 0x46
 800559a:	d903      	bls.n	80055a4 <HAL_DMA_Init+0x28c>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	2b48      	cmp	r3, #72	; 0x48
 80055a2:	d90f      	bls.n	80055c4 <HAL_DMA_Init+0x2ac>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	2b4e      	cmp	r3, #78	; 0x4e
 80055aa:	d903      	bls.n	80055b4 <HAL_DMA_Init+0x29c>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	2b52      	cmp	r3, #82	; 0x52
 80055b2:	d907      	bls.n	80055c4 <HAL_DMA_Init+0x2ac>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	2b73      	cmp	r3, #115	; 0x73
 80055ba:	d905      	bls.n	80055c8 <HAL_DMA_Init+0x2b0>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	2b77      	cmp	r3, #119	; 0x77
 80055c2:	d801      	bhi.n	80055c8 <HAL_DMA_Init+0x2b0>
 80055c4:	2301      	movs	r3, #1
 80055c6:	e000      	b.n	80055ca <HAL_DMA_Init+0x2b2>
 80055c8:	2300      	movs	r3, #0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055d4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f023 0307 	bic.w	r3, r3, #7
 80055ec:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fc:	2b04      	cmp	r3, #4
 80055fe:	d117      	bne.n	8005630 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	4313      	orrs	r3, r2
 8005608:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00e      	beq.n	8005630 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f001 fdca 	bl	80071ac <DMA_CheckFifoParam>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d008      	beq.n	8005630 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2240      	movs	r2, #64	; 0x40
 8005622:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e192      	b.n	8005956 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f001 fd05 	bl	8007048 <DMA_CalcBaseAndBitshift>
 800563e:	4603      	mov	r3, r0
 8005640:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005646:	f003 031f 	and.w	r3, r3, #31
 800564a:	223f      	movs	r2, #63	; 0x3f
 800564c:	409a      	lsls	r2, r3
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	609a      	str	r2, [r3, #8]
 8005652:	e0c8      	b.n	80057e6 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a38      	ldr	r2, [pc, #224]	; (800573c <HAL_DMA_Init+0x424>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d022      	beq.n	80056a4 <HAL_DMA_Init+0x38c>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a37      	ldr	r2, [pc, #220]	; (8005740 <HAL_DMA_Init+0x428>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d01d      	beq.n	80056a4 <HAL_DMA_Init+0x38c>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a35      	ldr	r2, [pc, #212]	; (8005744 <HAL_DMA_Init+0x42c>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d018      	beq.n	80056a4 <HAL_DMA_Init+0x38c>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a34      	ldr	r2, [pc, #208]	; (8005748 <HAL_DMA_Init+0x430>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d013      	beq.n	80056a4 <HAL_DMA_Init+0x38c>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a32      	ldr	r2, [pc, #200]	; (800574c <HAL_DMA_Init+0x434>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d00e      	beq.n	80056a4 <HAL_DMA_Init+0x38c>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a31      	ldr	r2, [pc, #196]	; (8005750 <HAL_DMA_Init+0x438>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d009      	beq.n	80056a4 <HAL_DMA_Init+0x38c>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a2f      	ldr	r2, [pc, #188]	; (8005754 <HAL_DMA_Init+0x43c>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d004      	beq.n	80056a4 <HAL_DMA_Init+0x38c>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a2e      	ldr	r2, [pc, #184]	; (8005758 <HAL_DMA_Init+0x440>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d101      	bne.n	80056a8 <HAL_DMA_Init+0x390>
 80056a4:	2301      	movs	r3, #1
 80056a6:	e000      	b.n	80056aa <HAL_DMA_Init+0x392>
 80056a8:	2300      	movs	r3, #0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	f000 8092 	beq.w	80057d4 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a21      	ldr	r2, [pc, #132]	; (800573c <HAL_DMA_Init+0x424>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d021      	beq.n	80056fe <HAL_DMA_Init+0x3e6>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a20      	ldr	r2, [pc, #128]	; (8005740 <HAL_DMA_Init+0x428>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d01c      	beq.n	80056fe <HAL_DMA_Init+0x3e6>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a1e      	ldr	r2, [pc, #120]	; (8005744 <HAL_DMA_Init+0x42c>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d017      	beq.n	80056fe <HAL_DMA_Init+0x3e6>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a1d      	ldr	r2, [pc, #116]	; (8005748 <HAL_DMA_Init+0x430>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d012      	beq.n	80056fe <HAL_DMA_Init+0x3e6>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a1b      	ldr	r2, [pc, #108]	; (800574c <HAL_DMA_Init+0x434>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d00d      	beq.n	80056fe <HAL_DMA_Init+0x3e6>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a1a      	ldr	r2, [pc, #104]	; (8005750 <HAL_DMA_Init+0x438>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d008      	beq.n	80056fe <HAL_DMA_Init+0x3e6>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a18      	ldr	r2, [pc, #96]	; (8005754 <HAL_DMA_Init+0x43c>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d003      	beq.n	80056fe <HAL_DMA_Init+0x3e6>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a17      	ldr	r2, [pc, #92]	; (8005758 <HAL_DMA_Init+0x440>)
 80056fc:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2202      	movs	r2, #2
 8005702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	4b10      	ldr	r3, [pc, #64]	; (800575c <HAL_DMA_Init+0x444>)
 800571a:	4013      	ands	r3, r2
 800571c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	2b40      	cmp	r3, #64	; 0x40
 8005724:	d01c      	beq.n	8005760 <HAL_DMA_Init+0x448>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	2b80      	cmp	r3, #128	; 0x80
 800572c:	d102      	bne.n	8005734 <HAL_DMA_Init+0x41c>
 800572e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005732:	e016      	b.n	8005762 <HAL_DMA_Init+0x44a>
 8005734:	2300      	movs	r3, #0
 8005736:	e014      	b.n	8005762 <HAL_DMA_Init+0x44a>
 8005738:	fe10803f 	.word	0xfe10803f
 800573c:	58025408 	.word	0x58025408
 8005740:	5802541c 	.word	0x5802541c
 8005744:	58025430 	.word	0x58025430
 8005748:	58025444 	.word	0x58025444
 800574c:	58025458 	.word	0x58025458
 8005750:	5802546c 	.word	0x5802546c
 8005754:	58025480 	.word	0x58025480
 8005758:	58025494 	.word	0x58025494
 800575c:	fffe000f 	.word	0xfffe000f
 8005760:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	68d2      	ldr	r2, [r2, #12]
 8005766:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005768:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005770:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005778:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005780:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005788:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005790:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	4313      	orrs	r3, r2
 8005796:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	461a      	mov	r2, r3
 80057a6:	4b6e      	ldr	r3, [pc, #440]	; (8005960 <HAL_DMA_Init+0x648>)
 80057a8:	4413      	add	r3, r2
 80057aa:	4a6e      	ldr	r2, [pc, #440]	; (8005964 <HAL_DMA_Init+0x64c>)
 80057ac:	fba2 2303 	umull	r2, r3, r2, r3
 80057b0:	091b      	lsrs	r3, r3, #4
 80057b2:	009a      	lsls	r2, r3, #2
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f001 fc45 	bl	8007048 <DMA_CalcBaseAndBitshift>
 80057be:	4603      	mov	r3, r0
 80057c0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057c6:	f003 031f 	and.w	r3, r3, #31
 80057ca:	2201      	movs	r2, #1
 80057cc:	409a      	lsls	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	605a      	str	r2, [r3, #4]
 80057d2:	e008      	b.n	80057e6 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2240      	movs	r2, #64	; 0x40
 80057d8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2203      	movs	r2, #3
 80057de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e0b7      	b.n	8005956 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a5f      	ldr	r2, [pc, #380]	; (8005968 <HAL_DMA_Init+0x650>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d072      	beq.n	80058d6 <HAL_DMA_Init+0x5be>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a5d      	ldr	r2, [pc, #372]	; (800596c <HAL_DMA_Init+0x654>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d06d      	beq.n	80058d6 <HAL_DMA_Init+0x5be>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a5c      	ldr	r2, [pc, #368]	; (8005970 <HAL_DMA_Init+0x658>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d068      	beq.n	80058d6 <HAL_DMA_Init+0x5be>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a5a      	ldr	r2, [pc, #360]	; (8005974 <HAL_DMA_Init+0x65c>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d063      	beq.n	80058d6 <HAL_DMA_Init+0x5be>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a59      	ldr	r2, [pc, #356]	; (8005978 <HAL_DMA_Init+0x660>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d05e      	beq.n	80058d6 <HAL_DMA_Init+0x5be>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a57      	ldr	r2, [pc, #348]	; (800597c <HAL_DMA_Init+0x664>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d059      	beq.n	80058d6 <HAL_DMA_Init+0x5be>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a56      	ldr	r2, [pc, #344]	; (8005980 <HAL_DMA_Init+0x668>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d054      	beq.n	80058d6 <HAL_DMA_Init+0x5be>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a54      	ldr	r2, [pc, #336]	; (8005984 <HAL_DMA_Init+0x66c>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d04f      	beq.n	80058d6 <HAL_DMA_Init+0x5be>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a53      	ldr	r2, [pc, #332]	; (8005988 <HAL_DMA_Init+0x670>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d04a      	beq.n	80058d6 <HAL_DMA_Init+0x5be>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a51      	ldr	r2, [pc, #324]	; (800598c <HAL_DMA_Init+0x674>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d045      	beq.n	80058d6 <HAL_DMA_Init+0x5be>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a50      	ldr	r2, [pc, #320]	; (8005990 <HAL_DMA_Init+0x678>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d040      	beq.n	80058d6 <HAL_DMA_Init+0x5be>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a4e      	ldr	r2, [pc, #312]	; (8005994 <HAL_DMA_Init+0x67c>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d03b      	beq.n	80058d6 <HAL_DMA_Init+0x5be>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a4d      	ldr	r2, [pc, #308]	; (8005998 <HAL_DMA_Init+0x680>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d036      	beq.n	80058d6 <HAL_DMA_Init+0x5be>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a4b      	ldr	r2, [pc, #300]	; (800599c <HAL_DMA_Init+0x684>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d031      	beq.n	80058d6 <HAL_DMA_Init+0x5be>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a4a      	ldr	r2, [pc, #296]	; (80059a0 <HAL_DMA_Init+0x688>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d02c      	beq.n	80058d6 <HAL_DMA_Init+0x5be>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a48      	ldr	r2, [pc, #288]	; (80059a4 <HAL_DMA_Init+0x68c>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d027      	beq.n	80058d6 <HAL_DMA_Init+0x5be>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a47      	ldr	r2, [pc, #284]	; (80059a8 <HAL_DMA_Init+0x690>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d022      	beq.n	80058d6 <HAL_DMA_Init+0x5be>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a45      	ldr	r2, [pc, #276]	; (80059ac <HAL_DMA_Init+0x694>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d01d      	beq.n	80058d6 <HAL_DMA_Init+0x5be>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a44      	ldr	r2, [pc, #272]	; (80059b0 <HAL_DMA_Init+0x698>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d018      	beq.n	80058d6 <HAL_DMA_Init+0x5be>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a42      	ldr	r2, [pc, #264]	; (80059b4 <HAL_DMA_Init+0x69c>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d013      	beq.n	80058d6 <HAL_DMA_Init+0x5be>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a41      	ldr	r2, [pc, #260]	; (80059b8 <HAL_DMA_Init+0x6a0>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d00e      	beq.n	80058d6 <HAL_DMA_Init+0x5be>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a3f      	ldr	r2, [pc, #252]	; (80059bc <HAL_DMA_Init+0x6a4>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d009      	beq.n	80058d6 <HAL_DMA_Init+0x5be>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a3e      	ldr	r2, [pc, #248]	; (80059c0 <HAL_DMA_Init+0x6a8>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d004      	beq.n	80058d6 <HAL_DMA_Init+0x5be>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a3c      	ldr	r2, [pc, #240]	; (80059c4 <HAL_DMA_Init+0x6ac>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d101      	bne.n	80058da <HAL_DMA_Init+0x5c2>
 80058d6:	2301      	movs	r3, #1
 80058d8:	e000      	b.n	80058dc <HAL_DMA_Init+0x5c4>
 80058da:	2300      	movs	r3, #0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d032      	beq.n	8005946 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f001 fcdf 	bl	80072a4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	2b80      	cmp	r3, #128	; 0x80
 80058ec:	d102      	bne.n	80058f4 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685a      	ldr	r2, [r3, #4]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058fc:	b2d2      	uxtb	r2, r2
 80058fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005908:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d010      	beq.n	8005934 <HAL_DMA_Init+0x61c>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	2b08      	cmp	r3, #8
 8005918:	d80c      	bhi.n	8005934 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f001 fd5c 	bl	80073d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005924:	2200      	movs	r2, #0
 8005926:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005930:	605a      	str	r2, [r3, #4]
 8005932:	e008      	b.n	8005946 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3718      	adds	r7, #24
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	a7fdabf8 	.word	0xa7fdabf8
 8005964:	cccccccd 	.word	0xcccccccd
 8005968:	40020010 	.word	0x40020010
 800596c:	40020028 	.word	0x40020028
 8005970:	40020040 	.word	0x40020040
 8005974:	40020058 	.word	0x40020058
 8005978:	40020070 	.word	0x40020070
 800597c:	40020088 	.word	0x40020088
 8005980:	400200a0 	.word	0x400200a0
 8005984:	400200b8 	.word	0x400200b8
 8005988:	40020410 	.word	0x40020410
 800598c:	40020428 	.word	0x40020428
 8005990:	40020440 	.word	0x40020440
 8005994:	40020458 	.word	0x40020458
 8005998:	40020470 	.word	0x40020470
 800599c:	40020488 	.word	0x40020488
 80059a0:	400204a0 	.word	0x400204a0
 80059a4:	400204b8 	.word	0x400204b8
 80059a8:	58025408 	.word	0x58025408
 80059ac:	5802541c 	.word	0x5802541c
 80059b0:	58025430 	.word	0x58025430
 80059b4:	58025444 	.word	0x58025444
 80059b8:	58025458 	.word	0x58025458
 80059bc:	5802546c 	.word	0x5802546c
 80059c0:	58025480 	.word	0x58025480
 80059c4:	58025494 	.word	0x58025494

080059c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b086      	sub	sp, #24
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
 80059d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059d6:	2300      	movs	r3, #0
 80059d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d101      	bne.n	80059e4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e226      	b.n	8005e32 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d101      	bne.n	80059f2 <HAL_DMA_Start_IT+0x2a>
 80059ee:	2302      	movs	r3, #2
 80059f0:	e21f      	b.n	8005e32 <HAL_DMA_Start_IT+0x46a>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	f040 820a 	bne.w	8005e1c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a68      	ldr	r2, [pc, #416]	; (8005bbc <HAL_DMA_Start_IT+0x1f4>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d04a      	beq.n	8005ab6 <HAL_DMA_Start_IT+0xee>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a66      	ldr	r2, [pc, #408]	; (8005bc0 <HAL_DMA_Start_IT+0x1f8>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d045      	beq.n	8005ab6 <HAL_DMA_Start_IT+0xee>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a65      	ldr	r2, [pc, #404]	; (8005bc4 <HAL_DMA_Start_IT+0x1fc>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d040      	beq.n	8005ab6 <HAL_DMA_Start_IT+0xee>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a63      	ldr	r2, [pc, #396]	; (8005bc8 <HAL_DMA_Start_IT+0x200>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d03b      	beq.n	8005ab6 <HAL_DMA_Start_IT+0xee>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a62      	ldr	r2, [pc, #392]	; (8005bcc <HAL_DMA_Start_IT+0x204>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d036      	beq.n	8005ab6 <HAL_DMA_Start_IT+0xee>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a60      	ldr	r2, [pc, #384]	; (8005bd0 <HAL_DMA_Start_IT+0x208>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d031      	beq.n	8005ab6 <HAL_DMA_Start_IT+0xee>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a5f      	ldr	r2, [pc, #380]	; (8005bd4 <HAL_DMA_Start_IT+0x20c>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d02c      	beq.n	8005ab6 <HAL_DMA_Start_IT+0xee>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a5d      	ldr	r2, [pc, #372]	; (8005bd8 <HAL_DMA_Start_IT+0x210>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d027      	beq.n	8005ab6 <HAL_DMA_Start_IT+0xee>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a5c      	ldr	r2, [pc, #368]	; (8005bdc <HAL_DMA_Start_IT+0x214>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d022      	beq.n	8005ab6 <HAL_DMA_Start_IT+0xee>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a5a      	ldr	r2, [pc, #360]	; (8005be0 <HAL_DMA_Start_IT+0x218>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d01d      	beq.n	8005ab6 <HAL_DMA_Start_IT+0xee>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a59      	ldr	r2, [pc, #356]	; (8005be4 <HAL_DMA_Start_IT+0x21c>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d018      	beq.n	8005ab6 <HAL_DMA_Start_IT+0xee>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a57      	ldr	r2, [pc, #348]	; (8005be8 <HAL_DMA_Start_IT+0x220>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d013      	beq.n	8005ab6 <HAL_DMA_Start_IT+0xee>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a56      	ldr	r2, [pc, #344]	; (8005bec <HAL_DMA_Start_IT+0x224>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d00e      	beq.n	8005ab6 <HAL_DMA_Start_IT+0xee>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a54      	ldr	r2, [pc, #336]	; (8005bf0 <HAL_DMA_Start_IT+0x228>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d009      	beq.n	8005ab6 <HAL_DMA_Start_IT+0xee>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a53      	ldr	r2, [pc, #332]	; (8005bf4 <HAL_DMA_Start_IT+0x22c>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d004      	beq.n	8005ab6 <HAL_DMA_Start_IT+0xee>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a51      	ldr	r2, [pc, #324]	; (8005bf8 <HAL_DMA_Start_IT+0x230>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d108      	bne.n	8005ac8 <HAL_DMA_Start_IT+0x100>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f022 0201 	bic.w	r2, r2, #1
 8005ac4:	601a      	str	r2, [r3, #0]
 8005ac6:	e007      	b.n	8005ad8 <HAL_DMA_Start_IT+0x110>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 0201 	bic.w	r2, r2, #1
 8005ad6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	68b9      	ldr	r1, [r7, #8]
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f001 f906 	bl	8006cf0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a34      	ldr	r2, [pc, #208]	; (8005bbc <HAL_DMA_Start_IT+0x1f4>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d04a      	beq.n	8005b84 <HAL_DMA_Start_IT+0x1bc>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a33      	ldr	r2, [pc, #204]	; (8005bc0 <HAL_DMA_Start_IT+0x1f8>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d045      	beq.n	8005b84 <HAL_DMA_Start_IT+0x1bc>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a31      	ldr	r2, [pc, #196]	; (8005bc4 <HAL_DMA_Start_IT+0x1fc>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d040      	beq.n	8005b84 <HAL_DMA_Start_IT+0x1bc>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a30      	ldr	r2, [pc, #192]	; (8005bc8 <HAL_DMA_Start_IT+0x200>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d03b      	beq.n	8005b84 <HAL_DMA_Start_IT+0x1bc>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a2e      	ldr	r2, [pc, #184]	; (8005bcc <HAL_DMA_Start_IT+0x204>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d036      	beq.n	8005b84 <HAL_DMA_Start_IT+0x1bc>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a2d      	ldr	r2, [pc, #180]	; (8005bd0 <HAL_DMA_Start_IT+0x208>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d031      	beq.n	8005b84 <HAL_DMA_Start_IT+0x1bc>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a2b      	ldr	r2, [pc, #172]	; (8005bd4 <HAL_DMA_Start_IT+0x20c>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d02c      	beq.n	8005b84 <HAL_DMA_Start_IT+0x1bc>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a2a      	ldr	r2, [pc, #168]	; (8005bd8 <HAL_DMA_Start_IT+0x210>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d027      	beq.n	8005b84 <HAL_DMA_Start_IT+0x1bc>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a28      	ldr	r2, [pc, #160]	; (8005bdc <HAL_DMA_Start_IT+0x214>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d022      	beq.n	8005b84 <HAL_DMA_Start_IT+0x1bc>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a27      	ldr	r2, [pc, #156]	; (8005be0 <HAL_DMA_Start_IT+0x218>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d01d      	beq.n	8005b84 <HAL_DMA_Start_IT+0x1bc>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a25      	ldr	r2, [pc, #148]	; (8005be4 <HAL_DMA_Start_IT+0x21c>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d018      	beq.n	8005b84 <HAL_DMA_Start_IT+0x1bc>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a24      	ldr	r2, [pc, #144]	; (8005be8 <HAL_DMA_Start_IT+0x220>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d013      	beq.n	8005b84 <HAL_DMA_Start_IT+0x1bc>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a22      	ldr	r2, [pc, #136]	; (8005bec <HAL_DMA_Start_IT+0x224>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d00e      	beq.n	8005b84 <HAL_DMA_Start_IT+0x1bc>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a21      	ldr	r2, [pc, #132]	; (8005bf0 <HAL_DMA_Start_IT+0x228>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d009      	beq.n	8005b84 <HAL_DMA_Start_IT+0x1bc>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a1f      	ldr	r2, [pc, #124]	; (8005bf4 <HAL_DMA_Start_IT+0x22c>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d004      	beq.n	8005b84 <HAL_DMA_Start_IT+0x1bc>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a1e      	ldr	r2, [pc, #120]	; (8005bf8 <HAL_DMA_Start_IT+0x230>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d101      	bne.n	8005b88 <HAL_DMA_Start_IT+0x1c0>
 8005b84:	2301      	movs	r3, #1
 8005b86:	e000      	b.n	8005b8a <HAL_DMA_Start_IT+0x1c2>
 8005b88:	2300      	movs	r3, #0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d036      	beq.n	8005bfc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f023 021e 	bic.w	r2, r3, #30
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f042 0216 	orr.w	r2, r2, #22
 8005ba0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d03e      	beq.n	8005c28 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f042 0208 	orr.w	r2, r2, #8
 8005bb8:	601a      	str	r2, [r3, #0]
 8005bba:	e035      	b.n	8005c28 <HAL_DMA_Start_IT+0x260>
 8005bbc:	40020010 	.word	0x40020010
 8005bc0:	40020028 	.word	0x40020028
 8005bc4:	40020040 	.word	0x40020040
 8005bc8:	40020058 	.word	0x40020058
 8005bcc:	40020070 	.word	0x40020070
 8005bd0:	40020088 	.word	0x40020088
 8005bd4:	400200a0 	.word	0x400200a0
 8005bd8:	400200b8 	.word	0x400200b8
 8005bdc:	40020410 	.word	0x40020410
 8005be0:	40020428 	.word	0x40020428
 8005be4:	40020440 	.word	0x40020440
 8005be8:	40020458 	.word	0x40020458
 8005bec:	40020470 	.word	0x40020470
 8005bf0:	40020488 	.word	0x40020488
 8005bf4:	400204a0 	.word	0x400204a0
 8005bf8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f023 020e 	bic.w	r2, r3, #14
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f042 020a 	orr.w	r2, r2, #10
 8005c0e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d007      	beq.n	8005c28 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f042 0204 	orr.w	r2, r2, #4
 8005c26:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a83      	ldr	r2, [pc, #524]	; (8005e3c <HAL_DMA_Start_IT+0x474>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d072      	beq.n	8005d18 <HAL_DMA_Start_IT+0x350>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a82      	ldr	r2, [pc, #520]	; (8005e40 <HAL_DMA_Start_IT+0x478>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d06d      	beq.n	8005d18 <HAL_DMA_Start_IT+0x350>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a80      	ldr	r2, [pc, #512]	; (8005e44 <HAL_DMA_Start_IT+0x47c>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d068      	beq.n	8005d18 <HAL_DMA_Start_IT+0x350>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a7f      	ldr	r2, [pc, #508]	; (8005e48 <HAL_DMA_Start_IT+0x480>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d063      	beq.n	8005d18 <HAL_DMA_Start_IT+0x350>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a7d      	ldr	r2, [pc, #500]	; (8005e4c <HAL_DMA_Start_IT+0x484>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d05e      	beq.n	8005d18 <HAL_DMA_Start_IT+0x350>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a7c      	ldr	r2, [pc, #496]	; (8005e50 <HAL_DMA_Start_IT+0x488>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d059      	beq.n	8005d18 <HAL_DMA_Start_IT+0x350>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a7a      	ldr	r2, [pc, #488]	; (8005e54 <HAL_DMA_Start_IT+0x48c>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d054      	beq.n	8005d18 <HAL_DMA_Start_IT+0x350>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a79      	ldr	r2, [pc, #484]	; (8005e58 <HAL_DMA_Start_IT+0x490>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d04f      	beq.n	8005d18 <HAL_DMA_Start_IT+0x350>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a77      	ldr	r2, [pc, #476]	; (8005e5c <HAL_DMA_Start_IT+0x494>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d04a      	beq.n	8005d18 <HAL_DMA_Start_IT+0x350>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a76      	ldr	r2, [pc, #472]	; (8005e60 <HAL_DMA_Start_IT+0x498>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d045      	beq.n	8005d18 <HAL_DMA_Start_IT+0x350>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a74      	ldr	r2, [pc, #464]	; (8005e64 <HAL_DMA_Start_IT+0x49c>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d040      	beq.n	8005d18 <HAL_DMA_Start_IT+0x350>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a73      	ldr	r2, [pc, #460]	; (8005e68 <HAL_DMA_Start_IT+0x4a0>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d03b      	beq.n	8005d18 <HAL_DMA_Start_IT+0x350>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a71      	ldr	r2, [pc, #452]	; (8005e6c <HAL_DMA_Start_IT+0x4a4>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d036      	beq.n	8005d18 <HAL_DMA_Start_IT+0x350>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a70      	ldr	r2, [pc, #448]	; (8005e70 <HAL_DMA_Start_IT+0x4a8>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d031      	beq.n	8005d18 <HAL_DMA_Start_IT+0x350>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a6e      	ldr	r2, [pc, #440]	; (8005e74 <HAL_DMA_Start_IT+0x4ac>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d02c      	beq.n	8005d18 <HAL_DMA_Start_IT+0x350>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a6d      	ldr	r2, [pc, #436]	; (8005e78 <HAL_DMA_Start_IT+0x4b0>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d027      	beq.n	8005d18 <HAL_DMA_Start_IT+0x350>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a6b      	ldr	r2, [pc, #428]	; (8005e7c <HAL_DMA_Start_IT+0x4b4>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d022      	beq.n	8005d18 <HAL_DMA_Start_IT+0x350>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a6a      	ldr	r2, [pc, #424]	; (8005e80 <HAL_DMA_Start_IT+0x4b8>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d01d      	beq.n	8005d18 <HAL_DMA_Start_IT+0x350>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a68      	ldr	r2, [pc, #416]	; (8005e84 <HAL_DMA_Start_IT+0x4bc>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d018      	beq.n	8005d18 <HAL_DMA_Start_IT+0x350>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a67      	ldr	r2, [pc, #412]	; (8005e88 <HAL_DMA_Start_IT+0x4c0>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d013      	beq.n	8005d18 <HAL_DMA_Start_IT+0x350>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a65      	ldr	r2, [pc, #404]	; (8005e8c <HAL_DMA_Start_IT+0x4c4>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d00e      	beq.n	8005d18 <HAL_DMA_Start_IT+0x350>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a64      	ldr	r2, [pc, #400]	; (8005e90 <HAL_DMA_Start_IT+0x4c8>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d009      	beq.n	8005d18 <HAL_DMA_Start_IT+0x350>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a62      	ldr	r2, [pc, #392]	; (8005e94 <HAL_DMA_Start_IT+0x4cc>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d004      	beq.n	8005d18 <HAL_DMA_Start_IT+0x350>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a61      	ldr	r2, [pc, #388]	; (8005e98 <HAL_DMA_Start_IT+0x4d0>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d101      	bne.n	8005d1c <HAL_DMA_Start_IT+0x354>
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e000      	b.n	8005d1e <HAL_DMA_Start_IT+0x356>
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d01a      	beq.n	8005d58 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d007      	beq.n	8005d40 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d3e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d007      	beq.n	8005d58 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d56:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a37      	ldr	r2, [pc, #220]	; (8005e3c <HAL_DMA_Start_IT+0x474>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d04a      	beq.n	8005df8 <HAL_DMA_Start_IT+0x430>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a36      	ldr	r2, [pc, #216]	; (8005e40 <HAL_DMA_Start_IT+0x478>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d045      	beq.n	8005df8 <HAL_DMA_Start_IT+0x430>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a34      	ldr	r2, [pc, #208]	; (8005e44 <HAL_DMA_Start_IT+0x47c>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d040      	beq.n	8005df8 <HAL_DMA_Start_IT+0x430>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a33      	ldr	r2, [pc, #204]	; (8005e48 <HAL_DMA_Start_IT+0x480>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d03b      	beq.n	8005df8 <HAL_DMA_Start_IT+0x430>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a31      	ldr	r2, [pc, #196]	; (8005e4c <HAL_DMA_Start_IT+0x484>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d036      	beq.n	8005df8 <HAL_DMA_Start_IT+0x430>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a30      	ldr	r2, [pc, #192]	; (8005e50 <HAL_DMA_Start_IT+0x488>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d031      	beq.n	8005df8 <HAL_DMA_Start_IT+0x430>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a2e      	ldr	r2, [pc, #184]	; (8005e54 <HAL_DMA_Start_IT+0x48c>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d02c      	beq.n	8005df8 <HAL_DMA_Start_IT+0x430>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a2d      	ldr	r2, [pc, #180]	; (8005e58 <HAL_DMA_Start_IT+0x490>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d027      	beq.n	8005df8 <HAL_DMA_Start_IT+0x430>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a2b      	ldr	r2, [pc, #172]	; (8005e5c <HAL_DMA_Start_IT+0x494>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d022      	beq.n	8005df8 <HAL_DMA_Start_IT+0x430>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a2a      	ldr	r2, [pc, #168]	; (8005e60 <HAL_DMA_Start_IT+0x498>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d01d      	beq.n	8005df8 <HAL_DMA_Start_IT+0x430>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a28      	ldr	r2, [pc, #160]	; (8005e64 <HAL_DMA_Start_IT+0x49c>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d018      	beq.n	8005df8 <HAL_DMA_Start_IT+0x430>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a27      	ldr	r2, [pc, #156]	; (8005e68 <HAL_DMA_Start_IT+0x4a0>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d013      	beq.n	8005df8 <HAL_DMA_Start_IT+0x430>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a25      	ldr	r2, [pc, #148]	; (8005e6c <HAL_DMA_Start_IT+0x4a4>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d00e      	beq.n	8005df8 <HAL_DMA_Start_IT+0x430>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a24      	ldr	r2, [pc, #144]	; (8005e70 <HAL_DMA_Start_IT+0x4a8>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d009      	beq.n	8005df8 <HAL_DMA_Start_IT+0x430>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a22      	ldr	r2, [pc, #136]	; (8005e74 <HAL_DMA_Start_IT+0x4ac>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d004      	beq.n	8005df8 <HAL_DMA_Start_IT+0x430>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a21      	ldr	r2, [pc, #132]	; (8005e78 <HAL_DMA_Start_IT+0x4b0>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d108      	bne.n	8005e0a <HAL_DMA_Start_IT+0x442>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f042 0201 	orr.w	r2, r2, #1
 8005e06:	601a      	str	r2, [r3, #0]
 8005e08:	e012      	b.n	8005e30 <HAL_DMA_Start_IT+0x468>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f042 0201 	orr.w	r2, r2, #1
 8005e18:	601a      	str	r2, [r3, #0]
 8005e1a:	e009      	b.n	8005e30 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e22:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3718      	adds	r7, #24
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	40020010 	.word	0x40020010
 8005e40:	40020028 	.word	0x40020028
 8005e44:	40020040 	.word	0x40020040
 8005e48:	40020058 	.word	0x40020058
 8005e4c:	40020070 	.word	0x40020070
 8005e50:	40020088 	.word	0x40020088
 8005e54:	400200a0 	.word	0x400200a0
 8005e58:	400200b8 	.word	0x400200b8
 8005e5c:	40020410 	.word	0x40020410
 8005e60:	40020428 	.word	0x40020428
 8005e64:	40020440 	.word	0x40020440
 8005e68:	40020458 	.word	0x40020458
 8005e6c:	40020470 	.word	0x40020470
 8005e70:	40020488 	.word	0x40020488
 8005e74:	400204a0 	.word	0x400204a0
 8005e78:	400204b8 	.word	0x400204b8
 8005e7c:	58025408 	.word	0x58025408
 8005e80:	5802541c 	.word	0x5802541c
 8005e84:	58025430 	.word	0x58025430
 8005e88:	58025444 	.word	0x58025444
 8005e8c:	58025458 	.word	0x58025458
 8005e90:	5802546c 	.word	0x5802546c
 8005e94:	58025480 	.word	0x58025480
 8005e98:	58025494 	.word	0x58025494

08005e9c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b08a      	sub	sp, #40	; 0x28
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005ea8:	4b67      	ldr	r3, [pc, #412]	; (8006048 <HAL_DMA_IRQHandler+0x1ac>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a67      	ldr	r2, [pc, #412]	; (800604c <HAL_DMA_IRQHandler+0x1b0>)
 8005eae:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb2:	0a9b      	lsrs	r3, r3, #10
 8005eb4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eba:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ec0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005ec2:	6a3b      	ldr	r3, [r7, #32]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a5f      	ldr	r2, [pc, #380]	; (8006050 <HAL_DMA_IRQHandler+0x1b4>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d04a      	beq.n	8005f6e <HAL_DMA_IRQHandler+0xd2>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a5d      	ldr	r2, [pc, #372]	; (8006054 <HAL_DMA_IRQHandler+0x1b8>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d045      	beq.n	8005f6e <HAL_DMA_IRQHandler+0xd2>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a5c      	ldr	r2, [pc, #368]	; (8006058 <HAL_DMA_IRQHandler+0x1bc>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d040      	beq.n	8005f6e <HAL_DMA_IRQHandler+0xd2>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a5a      	ldr	r2, [pc, #360]	; (800605c <HAL_DMA_IRQHandler+0x1c0>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d03b      	beq.n	8005f6e <HAL_DMA_IRQHandler+0xd2>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a59      	ldr	r2, [pc, #356]	; (8006060 <HAL_DMA_IRQHandler+0x1c4>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d036      	beq.n	8005f6e <HAL_DMA_IRQHandler+0xd2>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a57      	ldr	r2, [pc, #348]	; (8006064 <HAL_DMA_IRQHandler+0x1c8>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d031      	beq.n	8005f6e <HAL_DMA_IRQHandler+0xd2>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a56      	ldr	r2, [pc, #344]	; (8006068 <HAL_DMA_IRQHandler+0x1cc>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d02c      	beq.n	8005f6e <HAL_DMA_IRQHandler+0xd2>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a54      	ldr	r2, [pc, #336]	; (800606c <HAL_DMA_IRQHandler+0x1d0>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d027      	beq.n	8005f6e <HAL_DMA_IRQHandler+0xd2>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a53      	ldr	r2, [pc, #332]	; (8006070 <HAL_DMA_IRQHandler+0x1d4>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d022      	beq.n	8005f6e <HAL_DMA_IRQHandler+0xd2>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a51      	ldr	r2, [pc, #324]	; (8006074 <HAL_DMA_IRQHandler+0x1d8>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d01d      	beq.n	8005f6e <HAL_DMA_IRQHandler+0xd2>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a50      	ldr	r2, [pc, #320]	; (8006078 <HAL_DMA_IRQHandler+0x1dc>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d018      	beq.n	8005f6e <HAL_DMA_IRQHandler+0xd2>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a4e      	ldr	r2, [pc, #312]	; (800607c <HAL_DMA_IRQHandler+0x1e0>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d013      	beq.n	8005f6e <HAL_DMA_IRQHandler+0xd2>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a4d      	ldr	r2, [pc, #308]	; (8006080 <HAL_DMA_IRQHandler+0x1e4>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d00e      	beq.n	8005f6e <HAL_DMA_IRQHandler+0xd2>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a4b      	ldr	r2, [pc, #300]	; (8006084 <HAL_DMA_IRQHandler+0x1e8>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d009      	beq.n	8005f6e <HAL_DMA_IRQHandler+0xd2>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a4a      	ldr	r2, [pc, #296]	; (8006088 <HAL_DMA_IRQHandler+0x1ec>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d004      	beq.n	8005f6e <HAL_DMA_IRQHandler+0xd2>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a48      	ldr	r2, [pc, #288]	; (800608c <HAL_DMA_IRQHandler+0x1f0>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d101      	bne.n	8005f72 <HAL_DMA_IRQHandler+0xd6>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e000      	b.n	8005f74 <HAL_DMA_IRQHandler+0xd8>
 8005f72:	2300      	movs	r3, #0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f000 842b 	beq.w	80067d0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f7e:	f003 031f 	and.w	r3, r3, #31
 8005f82:	2208      	movs	r2, #8
 8005f84:	409a      	lsls	r2, r3
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	4013      	ands	r3, r2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f000 80a2 	beq.w	80060d4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a2e      	ldr	r2, [pc, #184]	; (8006050 <HAL_DMA_IRQHandler+0x1b4>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d04a      	beq.n	8006030 <HAL_DMA_IRQHandler+0x194>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a2d      	ldr	r2, [pc, #180]	; (8006054 <HAL_DMA_IRQHandler+0x1b8>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d045      	beq.n	8006030 <HAL_DMA_IRQHandler+0x194>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a2b      	ldr	r2, [pc, #172]	; (8006058 <HAL_DMA_IRQHandler+0x1bc>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d040      	beq.n	8006030 <HAL_DMA_IRQHandler+0x194>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a2a      	ldr	r2, [pc, #168]	; (800605c <HAL_DMA_IRQHandler+0x1c0>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d03b      	beq.n	8006030 <HAL_DMA_IRQHandler+0x194>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a28      	ldr	r2, [pc, #160]	; (8006060 <HAL_DMA_IRQHandler+0x1c4>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d036      	beq.n	8006030 <HAL_DMA_IRQHandler+0x194>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a27      	ldr	r2, [pc, #156]	; (8006064 <HAL_DMA_IRQHandler+0x1c8>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d031      	beq.n	8006030 <HAL_DMA_IRQHandler+0x194>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a25      	ldr	r2, [pc, #148]	; (8006068 <HAL_DMA_IRQHandler+0x1cc>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d02c      	beq.n	8006030 <HAL_DMA_IRQHandler+0x194>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a24      	ldr	r2, [pc, #144]	; (800606c <HAL_DMA_IRQHandler+0x1d0>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d027      	beq.n	8006030 <HAL_DMA_IRQHandler+0x194>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a22      	ldr	r2, [pc, #136]	; (8006070 <HAL_DMA_IRQHandler+0x1d4>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d022      	beq.n	8006030 <HAL_DMA_IRQHandler+0x194>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a21      	ldr	r2, [pc, #132]	; (8006074 <HAL_DMA_IRQHandler+0x1d8>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d01d      	beq.n	8006030 <HAL_DMA_IRQHandler+0x194>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a1f      	ldr	r2, [pc, #124]	; (8006078 <HAL_DMA_IRQHandler+0x1dc>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d018      	beq.n	8006030 <HAL_DMA_IRQHandler+0x194>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a1e      	ldr	r2, [pc, #120]	; (800607c <HAL_DMA_IRQHandler+0x1e0>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d013      	beq.n	8006030 <HAL_DMA_IRQHandler+0x194>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a1c      	ldr	r2, [pc, #112]	; (8006080 <HAL_DMA_IRQHandler+0x1e4>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d00e      	beq.n	8006030 <HAL_DMA_IRQHandler+0x194>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a1b      	ldr	r2, [pc, #108]	; (8006084 <HAL_DMA_IRQHandler+0x1e8>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d009      	beq.n	8006030 <HAL_DMA_IRQHandler+0x194>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a19      	ldr	r2, [pc, #100]	; (8006088 <HAL_DMA_IRQHandler+0x1ec>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d004      	beq.n	8006030 <HAL_DMA_IRQHandler+0x194>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a18      	ldr	r2, [pc, #96]	; (800608c <HAL_DMA_IRQHandler+0x1f0>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d12f      	bne.n	8006090 <HAL_DMA_IRQHandler+0x1f4>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0304 	and.w	r3, r3, #4
 800603a:	2b00      	cmp	r3, #0
 800603c:	bf14      	ite	ne
 800603e:	2301      	movne	r3, #1
 8006040:	2300      	moveq	r3, #0
 8006042:	b2db      	uxtb	r3, r3
 8006044:	e02e      	b.n	80060a4 <HAL_DMA_IRQHandler+0x208>
 8006046:	bf00      	nop
 8006048:	24000000 	.word	0x24000000
 800604c:	1b4e81b5 	.word	0x1b4e81b5
 8006050:	40020010 	.word	0x40020010
 8006054:	40020028 	.word	0x40020028
 8006058:	40020040 	.word	0x40020040
 800605c:	40020058 	.word	0x40020058
 8006060:	40020070 	.word	0x40020070
 8006064:	40020088 	.word	0x40020088
 8006068:	400200a0 	.word	0x400200a0
 800606c:	400200b8 	.word	0x400200b8
 8006070:	40020410 	.word	0x40020410
 8006074:	40020428 	.word	0x40020428
 8006078:	40020440 	.word	0x40020440
 800607c:	40020458 	.word	0x40020458
 8006080:	40020470 	.word	0x40020470
 8006084:	40020488 	.word	0x40020488
 8006088:	400204a0 	.word	0x400204a0
 800608c:	400204b8 	.word	0x400204b8
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0308 	and.w	r3, r3, #8
 800609a:	2b00      	cmp	r3, #0
 800609c:	bf14      	ite	ne
 800609e:	2301      	movne	r3, #1
 80060a0:	2300      	moveq	r3, #0
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d015      	beq.n	80060d4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f022 0204 	bic.w	r2, r2, #4
 80060b6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060bc:	f003 031f 	and.w	r3, r3, #31
 80060c0:	2208      	movs	r2, #8
 80060c2:	409a      	lsls	r2, r3
 80060c4:	6a3b      	ldr	r3, [r7, #32]
 80060c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060cc:	f043 0201 	orr.w	r2, r3, #1
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060d8:	f003 031f 	and.w	r3, r3, #31
 80060dc:	69ba      	ldr	r2, [r7, #24]
 80060de:	fa22 f303 	lsr.w	r3, r2, r3
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d06e      	beq.n	80061c8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a69      	ldr	r2, [pc, #420]	; (8006294 <HAL_DMA_IRQHandler+0x3f8>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d04a      	beq.n	800618a <HAL_DMA_IRQHandler+0x2ee>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a67      	ldr	r2, [pc, #412]	; (8006298 <HAL_DMA_IRQHandler+0x3fc>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d045      	beq.n	800618a <HAL_DMA_IRQHandler+0x2ee>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a66      	ldr	r2, [pc, #408]	; (800629c <HAL_DMA_IRQHandler+0x400>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d040      	beq.n	800618a <HAL_DMA_IRQHandler+0x2ee>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a64      	ldr	r2, [pc, #400]	; (80062a0 <HAL_DMA_IRQHandler+0x404>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d03b      	beq.n	800618a <HAL_DMA_IRQHandler+0x2ee>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a63      	ldr	r2, [pc, #396]	; (80062a4 <HAL_DMA_IRQHandler+0x408>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d036      	beq.n	800618a <HAL_DMA_IRQHandler+0x2ee>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a61      	ldr	r2, [pc, #388]	; (80062a8 <HAL_DMA_IRQHandler+0x40c>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d031      	beq.n	800618a <HAL_DMA_IRQHandler+0x2ee>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a60      	ldr	r2, [pc, #384]	; (80062ac <HAL_DMA_IRQHandler+0x410>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d02c      	beq.n	800618a <HAL_DMA_IRQHandler+0x2ee>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a5e      	ldr	r2, [pc, #376]	; (80062b0 <HAL_DMA_IRQHandler+0x414>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d027      	beq.n	800618a <HAL_DMA_IRQHandler+0x2ee>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a5d      	ldr	r2, [pc, #372]	; (80062b4 <HAL_DMA_IRQHandler+0x418>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d022      	beq.n	800618a <HAL_DMA_IRQHandler+0x2ee>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a5b      	ldr	r2, [pc, #364]	; (80062b8 <HAL_DMA_IRQHandler+0x41c>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d01d      	beq.n	800618a <HAL_DMA_IRQHandler+0x2ee>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a5a      	ldr	r2, [pc, #360]	; (80062bc <HAL_DMA_IRQHandler+0x420>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d018      	beq.n	800618a <HAL_DMA_IRQHandler+0x2ee>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a58      	ldr	r2, [pc, #352]	; (80062c0 <HAL_DMA_IRQHandler+0x424>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d013      	beq.n	800618a <HAL_DMA_IRQHandler+0x2ee>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a57      	ldr	r2, [pc, #348]	; (80062c4 <HAL_DMA_IRQHandler+0x428>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d00e      	beq.n	800618a <HAL_DMA_IRQHandler+0x2ee>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a55      	ldr	r2, [pc, #340]	; (80062c8 <HAL_DMA_IRQHandler+0x42c>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d009      	beq.n	800618a <HAL_DMA_IRQHandler+0x2ee>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a54      	ldr	r2, [pc, #336]	; (80062cc <HAL_DMA_IRQHandler+0x430>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d004      	beq.n	800618a <HAL_DMA_IRQHandler+0x2ee>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a52      	ldr	r2, [pc, #328]	; (80062d0 <HAL_DMA_IRQHandler+0x434>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d10a      	bne.n	80061a0 <HAL_DMA_IRQHandler+0x304>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006194:	2b00      	cmp	r3, #0
 8006196:	bf14      	ite	ne
 8006198:	2301      	movne	r3, #1
 800619a:	2300      	moveq	r3, #0
 800619c:	b2db      	uxtb	r3, r3
 800619e:	e003      	b.n	80061a8 <HAL_DMA_IRQHandler+0x30c>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2300      	movs	r3, #0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00d      	beq.n	80061c8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061b0:	f003 031f 	and.w	r3, r3, #31
 80061b4:	2201      	movs	r2, #1
 80061b6:	409a      	lsls	r2, r3
 80061b8:	6a3b      	ldr	r3, [r7, #32]
 80061ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c0:	f043 0202 	orr.w	r2, r3, #2
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061cc:	f003 031f 	and.w	r3, r3, #31
 80061d0:	2204      	movs	r2, #4
 80061d2:	409a      	lsls	r2, r3
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	4013      	ands	r3, r2
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f000 808f 	beq.w	80062fc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a2c      	ldr	r2, [pc, #176]	; (8006294 <HAL_DMA_IRQHandler+0x3f8>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d04a      	beq.n	800627e <HAL_DMA_IRQHandler+0x3e2>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a2a      	ldr	r2, [pc, #168]	; (8006298 <HAL_DMA_IRQHandler+0x3fc>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d045      	beq.n	800627e <HAL_DMA_IRQHandler+0x3e2>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a29      	ldr	r2, [pc, #164]	; (800629c <HAL_DMA_IRQHandler+0x400>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d040      	beq.n	800627e <HAL_DMA_IRQHandler+0x3e2>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a27      	ldr	r2, [pc, #156]	; (80062a0 <HAL_DMA_IRQHandler+0x404>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d03b      	beq.n	800627e <HAL_DMA_IRQHandler+0x3e2>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a26      	ldr	r2, [pc, #152]	; (80062a4 <HAL_DMA_IRQHandler+0x408>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d036      	beq.n	800627e <HAL_DMA_IRQHandler+0x3e2>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a24      	ldr	r2, [pc, #144]	; (80062a8 <HAL_DMA_IRQHandler+0x40c>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d031      	beq.n	800627e <HAL_DMA_IRQHandler+0x3e2>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a23      	ldr	r2, [pc, #140]	; (80062ac <HAL_DMA_IRQHandler+0x410>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d02c      	beq.n	800627e <HAL_DMA_IRQHandler+0x3e2>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a21      	ldr	r2, [pc, #132]	; (80062b0 <HAL_DMA_IRQHandler+0x414>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d027      	beq.n	800627e <HAL_DMA_IRQHandler+0x3e2>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a20      	ldr	r2, [pc, #128]	; (80062b4 <HAL_DMA_IRQHandler+0x418>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d022      	beq.n	800627e <HAL_DMA_IRQHandler+0x3e2>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a1e      	ldr	r2, [pc, #120]	; (80062b8 <HAL_DMA_IRQHandler+0x41c>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d01d      	beq.n	800627e <HAL_DMA_IRQHandler+0x3e2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a1d      	ldr	r2, [pc, #116]	; (80062bc <HAL_DMA_IRQHandler+0x420>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d018      	beq.n	800627e <HAL_DMA_IRQHandler+0x3e2>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a1b      	ldr	r2, [pc, #108]	; (80062c0 <HAL_DMA_IRQHandler+0x424>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d013      	beq.n	800627e <HAL_DMA_IRQHandler+0x3e2>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a1a      	ldr	r2, [pc, #104]	; (80062c4 <HAL_DMA_IRQHandler+0x428>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d00e      	beq.n	800627e <HAL_DMA_IRQHandler+0x3e2>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a18      	ldr	r2, [pc, #96]	; (80062c8 <HAL_DMA_IRQHandler+0x42c>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d009      	beq.n	800627e <HAL_DMA_IRQHandler+0x3e2>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a17      	ldr	r2, [pc, #92]	; (80062cc <HAL_DMA_IRQHandler+0x430>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d004      	beq.n	800627e <HAL_DMA_IRQHandler+0x3e2>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a15      	ldr	r2, [pc, #84]	; (80062d0 <HAL_DMA_IRQHandler+0x434>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d12a      	bne.n	80062d4 <HAL_DMA_IRQHandler+0x438>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0302 	and.w	r3, r3, #2
 8006288:	2b00      	cmp	r3, #0
 800628a:	bf14      	ite	ne
 800628c:	2301      	movne	r3, #1
 800628e:	2300      	moveq	r3, #0
 8006290:	b2db      	uxtb	r3, r3
 8006292:	e023      	b.n	80062dc <HAL_DMA_IRQHandler+0x440>
 8006294:	40020010 	.word	0x40020010
 8006298:	40020028 	.word	0x40020028
 800629c:	40020040 	.word	0x40020040
 80062a0:	40020058 	.word	0x40020058
 80062a4:	40020070 	.word	0x40020070
 80062a8:	40020088 	.word	0x40020088
 80062ac:	400200a0 	.word	0x400200a0
 80062b0:	400200b8 	.word	0x400200b8
 80062b4:	40020410 	.word	0x40020410
 80062b8:	40020428 	.word	0x40020428
 80062bc:	40020440 	.word	0x40020440
 80062c0:	40020458 	.word	0x40020458
 80062c4:	40020470 	.word	0x40020470
 80062c8:	40020488 	.word	0x40020488
 80062cc:	400204a0 	.word	0x400204a0
 80062d0:	400204b8 	.word	0x400204b8
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2300      	movs	r3, #0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00d      	beq.n	80062fc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062e4:	f003 031f 	and.w	r3, r3, #31
 80062e8:	2204      	movs	r2, #4
 80062ea:	409a      	lsls	r2, r3
 80062ec:	6a3b      	ldr	r3, [r7, #32]
 80062ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f4:	f043 0204 	orr.w	r2, r3, #4
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006300:	f003 031f 	and.w	r3, r3, #31
 8006304:	2210      	movs	r2, #16
 8006306:	409a      	lsls	r2, r3
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	4013      	ands	r3, r2
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 80a6 	beq.w	800645e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a85      	ldr	r2, [pc, #532]	; (800652c <HAL_DMA_IRQHandler+0x690>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d04a      	beq.n	80063b2 <HAL_DMA_IRQHandler+0x516>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a83      	ldr	r2, [pc, #524]	; (8006530 <HAL_DMA_IRQHandler+0x694>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d045      	beq.n	80063b2 <HAL_DMA_IRQHandler+0x516>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a82      	ldr	r2, [pc, #520]	; (8006534 <HAL_DMA_IRQHandler+0x698>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d040      	beq.n	80063b2 <HAL_DMA_IRQHandler+0x516>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a80      	ldr	r2, [pc, #512]	; (8006538 <HAL_DMA_IRQHandler+0x69c>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d03b      	beq.n	80063b2 <HAL_DMA_IRQHandler+0x516>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a7f      	ldr	r2, [pc, #508]	; (800653c <HAL_DMA_IRQHandler+0x6a0>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d036      	beq.n	80063b2 <HAL_DMA_IRQHandler+0x516>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a7d      	ldr	r2, [pc, #500]	; (8006540 <HAL_DMA_IRQHandler+0x6a4>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d031      	beq.n	80063b2 <HAL_DMA_IRQHandler+0x516>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a7c      	ldr	r2, [pc, #496]	; (8006544 <HAL_DMA_IRQHandler+0x6a8>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d02c      	beq.n	80063b2 <HAL_DMA_IRQHandler+0x516>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a7a      	ldr	r2, [pc, #488]	; (8006548 <HAL_DMA_IRQHandler+0x6ac>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d027      	beq.n	80063b2 <HAL_DMA_IRQHandler+0x516>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a79      	ldr	r2, [pc, #484]	; (800654c <HAL_DMA_IRQHandler+0x6b0>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d022      	beq.n	80063b2 <HAL_DMA_IRQHandler+0x516>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a77      	ldr	r2, [pc, #476]	; (8006550 <HAL_DMA_IRQHandler+0x6b4>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d01d      	beq.n	80063b2 <HAL_DMA_IRQHandler+0x516>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a76      	ldr	r2, [pc, #472]	; (8006554 <HAL_DMA_IRQHandler+0x6b8>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d018      	beq.n	80063b2 <HAL_DMA_IRQHandler+0x516>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a74      	ldr	r2, [pc, #464]	; (8006558 <HAL_DMA_IRQHandler+0x6bc>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d013      	beq.n	80063b2 <HAL_DMA_IRQHandler+0x516>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a73      	ldr	r2, [pc, #460]	; (800655c <HAL_DMA_IRQHandler+0x6c0>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d00e      	beq.n	80063b2 <HAL_DMA_IRQHandler+0x516>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a71      	ldr	r2, [pc, #452]	; (8006560 <HAL_DMA_IRQHandler+0x6c4>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d009      	beq.n	80063b2 <HAL_DMA_IRQHandler+0x516>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a70      	ldr	r2, [pc, #448]	; (8006564 <HAL_DMA_IRQHandler+0x6c8>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d004      	beq.n	80063b2 <HAL_DMA_IRQHandler+0x516>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a6e      	ldr	r2, [pc, #440]	; (8006568 <HAL_DMA_IRQHandler+0x6cc>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d10a      	bne.n	80063c8 <HAL_DMA_IRQHandler+0x52c>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0308 	and.w	r3, r3, #8
 80063bc:	2b00      	cmp	r3, #0
 80063be:	bf14      	ite	ne
 80063c0:	2301      	movne	r3, #1
 80063c2:	2300      	moveq	r3, #0
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	e009      	b.n	80063dc <HAL_DMA_IRQHandler+0x540>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0304 	and.w	r3, r3, #4
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	bf14      	ite	ne
 80063d6:	2301      	movne	r3, #1
 80063d8:	2300      	moveq	r3, #0
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d03e      	beq.n	800645e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063e4:	f003 031f 	and.w	r3, r3, #31
 80063e8:	2210      	movs	r2, #16
 80063ea:	409a      	lsls	r2, r3
 80063ec:	6a3b      	ldr	r3, [r7, #32]
 80063ee:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d018      	beq.n	8006430 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d108      	bne.n	800641e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006410:	2b00      	cmp	r3, #0
 8006412:	d024      	beq.n	800645e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	4798      	blx	r3
 800641c:	e01f      	b.n	800645e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006422:	2b00      	cmp	r3, #0
 8006424:	d01b      	beq.n	800645e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	4798      	blx	r3
 800642e:	e016      	b.n	800645e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800643a:	2b00      	cmp	r3, #0
 800643c:	d107      	bne.n	800644e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 0208 	bic.w	r2, r2, #8
 800644c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006452:	2b00      	cmp	r3, #0
 8006454:	d003      	beq.n	800645e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006462:	f003 031f 	and.w	r3, r3, #31
 8006466:	2220      	movs	r2, #32
 8006468:	409a      	lsls	r2, r3
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	4013      	ands	r3, r2
 800646e:	2b00      	cmp	r3, #0
 8006470:	f000 8110 	beq.w	8006694 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a2c      	ldr	r2, [pc, #176]	; (800652c <HAL_DMA_IRQHandler+0x690>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d04a      	beq.n	8006514 <HAL_DMA_IRQHandler+0x678>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a2b      	ldr	r2, [pc, #172]	; (8006530 <HAL_DMA_IRQHandler+0x694>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d045      	beq.n	8006514 <HAL_DMA_IRQHandler+0x678>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a29      	ldr	r2, [pc, #164]	; (8006534 <HAL_DMA_IRQHandler+0x698>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d040      	beq.n	8006514 <HAL_DMA_IRQHandler+0x678>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a28      	ldr	r2, [pc, #160]	; (8006538 <HAL_DMA_IRQHandler+0x69c>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d03b      	beq.n	8006514 <HAL_DMA_IRQHandler+0x678>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a26      	ldr	r2, [pc, #152]	; (800653c <HAL_DMA_IRQHandler+0x6a0>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d036      	beq.n	8006514 <HAL_DMA_IRQHandler+0x678>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a25      	ldr	r2, [pc, #148]	; (8006540 <HAL_DMA_IRQHandler+0x6a4>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d031      	beq.n	8006514 <HAL_DMA_IRQHandler+0x678>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a23      	ldr	r2, [pc, #140]	; (8006544 <HAL_DMA_IRQHandler+0x6a8>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d02c      	beq.n	8006514 <HAL_DMA_IRQHandler+0x678>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a22      	ldr	r2, [pc, #136]	; (8006548 <HAL_DMA_IRQHandler+0x6ac>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d027      	beq.n	8006514 <HAL_DMA_IRQHandler+0x678>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a20      	ldr	r2, [pc, #128]	; (800654c <HAL_DMA_IRQHandler+0x6b0>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d022      	beq.n	8006514 <HAL_DMA_IRQHandler+0x678>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a1f      	ldr	r2, [pc, #124]	; (8006550 <HAL_DMA_IRQHandler+0x6b4>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d01d      	beq.n	8006514 <HAL_DMA_IRQHandler+0x678>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a1d      	ldr	r2, [pc, #116]	; (8006554 <HAL_DMA_IRQHandler+0x6b8>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d018      	beq.n	8006514 <HAL_DMA_IRQHandler+0x678>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a1c      	ldr	r2, [pc, #112]	; (8006558 <HAL_DMA_IRQHandler+0x6bc>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d013      	beq.n	8006514 <HAL_DMA_IRQHandler+0x678>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a1a      	ldr	r2, [pc, #104]	; (800655c <HAL_DMA_IRQHandler+0x6c0>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d00e      	beq.n	8006514 <HAL_DMA_IRQHandler+0x678>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a19      	ldr	r2, [pc, #100]	; (8006560 <HAL_DMA_IRQHandler+0x6c4>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d009      	beq.n	8006514 <HAL_DMA_IRQHandler+0x678>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a17      	ldr	r2, [pc, #92]	; (8006564 <HAL_DMA_IRQHandler+0x6c8>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d004      	beq.n	8006514 <HAL_DMA_IRQHandler+0x678>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a16      	ldr	r2, [pc, #88]	; (8006568 <HAL_DMA_IRQHandler+0x6cc>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d12b      	bne.n	800656c <HAL_DMA_IRQHandler+0x6d0>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0310 	and.w	r3, r3, #16
 800651e:	2b00      	cmp	r3, #0
 8006520:	bf14      	ite	ne
 8006522:	2301      	movne	r3, #1
 8006524:	2300      	moveq	r3, #0
 8006526:	b2db      	uxtb	r3, r3
 8006528:	e02a      	b.n	8006580 <HAL_DMA_IRQHandler+0x6e4>
 800652a:	bf00      	nop
 800652c:	40020010 	.word	0x40020010
 8006530:	40020028 	.word	0x40020028
 8006534:	40020040 	.word	0x40020040
 8006538:	40020058 	.word	0x40020058
 800653c:	40020070 	.word	0x40020070
 8006540:	40020088 	.word	0x40020088
 8006544:	400200a0 	.word	0x400200a0
 8006548:	400200b8 	.word	0x400200b8
 800654c:	40020410 	.word	0x40020410
 8006550:	40020428 	.word	0x40020428
 8006554:	40020440 	.word	0x40020440
 8006558:	40020458 	.word	0x40020458
 800655c:	40020470 	.word	0x40020470
 8006560:	40020488 	.word	0x40020488
 8006564:	400204a0 	.word	0x400204a0
 8006568:	400204b8 	.word	0x400204b8
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0302 	and.w	r3, r3, #2
 8006576:	2b00      	cmp	r3, #0
 8006578:	bf14      	ite	ne
 800657a:	2301      	movne	r3, #1
 800657c:	2300      	moveq	r3, #0
 800657e:	b2db      	uxtb	r3, r3
 8006580:	2b00      	cmp	r3, #0
 8006582:	f000 8087 	beq.w	8006694 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800658a:	f003 031f 	and.w	r3, r3, #31
 800658e:	2220      	movs	r2, #32
 8006590:	409a      	lsls	r2, r3
 8006592:	6a3b      	ldr	r3, [r7, #32]
 8006594:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800659c:	b2db      	uxtb	r3, r3
 800659e:	2b04      	cmp	r3, #4
 80065a0:	d139      	bne.n	8006616 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f022 0216 	bic.w	r2, r2, #22
 80065b0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	695a      	ldr	r2, [r3, #20]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065c0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d103      	bne.n	80065d2 <HAL_DMA_IRQHandler+0x736>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d007      	beq.n	80065e2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f022 0208 	bic.w	r2, r2, #8
 80065e0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065e6:	f003 031f 	and.w	r3, r3, #31
 80065ea:	223f      	movs	r2, #63	; 0x3f
 80065ec:	409a      	lsls	r2, r3
 80065ee:	6a3b      	ldr	r3, [r7, #32]
 80065f0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006606:	2b00      	cmp	r3, #0
 8006608:	f000 834a 	beq.w	8006ca0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	4798      	blx	r3
          }
          return;
 8006614:	e344      	b.n	8006ca0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d018      	beq.n	8006656 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d108      	bne.n	8006644 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006636:	2b00      	cmp	r3, #0
 8006638:	d02c      	beq.n	8006694 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	4798      	blx	r3
 8006642:	e027      	b.n	8006694 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006648:	2b00      	cmp	r3, #0
 800664a:	d023      	beq.n	8006694 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	4798      	blx	r3
 8006654:	e01e      	b.n	8006694 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10f      	bne.n	8006684 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f022 0210 	bic.w	r2, r2, #16
 8006672:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006688:	2b00      	cmp	r3, #0
 800668a:	d003      	beq.n	8006694 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006698:	2b00      	cmp	r3, #0
 800669a:	f000 8306 	beq.w	8006caa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f000 8088 	beq.w	80067bc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2204      	movs	r2, #4
 80066b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a7a      	ldr	r2, [pc, #488]	; (80068a4 <HAL_DMA_IRQHandler+0xa08>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d04a      	beq.n	8006754 <HAL_DMA_IRQHandler+0x8b8>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a79      	ldr	r2, [pc, #484]	; (80068a8 <HAL_DMA_IRQHandler+0xa0c>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d045      	beq.n	8006754 <HAL_DMA_IRQHandler+0x8b8>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a77      	ldr	r2, [pc, #476]	; (80068ac <HAL_DMA_IRQHandler+0xa10>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d040      	beq.n	8006754 <HAL_DMA_IRQHandler+0x8b8>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a76      	ldr	r2, [pc, #472]	; (80068b0 <HAL_DMA_IRQHandler+0xa14>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d03b      	beq.n	8006754 <HAL_DMA_IRQHandler+0x8b8>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a74      	ldr	r2, [pc, #464]	; (80068b4 <HAL_DMA_IRQHandler+0xa18>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d036      	beq.n	8006754 <HAL_DMA_IRQHandler+0x8b8>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a73      	ldr	r2, [pc, #460]	; (80068b8 <HAL_DMA_IRQHandler+0xa1c>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d031      	beq.n	8006754 <HAL_DMA_IRQHandler+0x8b8>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a71      	ldr	r2, [pc, #452]	; (80068bc <HAL_DMA_IRQHandler+0xa20>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d02c      	beq.n	8006754 <HAL_DMA_IRQHandler+0x8b8>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a70      	ldr	r2, [pc, #448]	; (80068c0 <HAL_DMA_IRQHandler+0xa24>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d027      	beq.n	8006754 <HAL_DMA_IRQHandler+0x8b8>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a6e      	ldr	r2, [pc, #440]	; (80068c4 <HAL_DMA_IRQHandler+0xa28>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d022      	beq.n	8006754 <HAL_DMA_IRQHandler+0x8b8>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a6d      	ldr	r2, [pc, #436]	; (80068c8 <HAL_DMA_IRQHandler+0xa2c>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d01d      	beq.n	8006754 <HAL_DMA_IRQHandler+0x8b8>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a6b      	ldr	r2, [pc, #428]	; (80068cc <HAL_DMA_IRQHandler+0xa30>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d018      	beq.n	8006754 <HAL_DMA_IRQHandler+0x8b8>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a6a      	ldr	r2, [pc, #424]	; (80068d0 <HAL_DMA_IRQHandler+0xa34>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d013      	beq.n	8006754 <HAL_DMA_IRQHandler+0x8b8>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a68      	ldr	r2, [pc, #416]	; (80068d4 <HAL_DMA_IRQHandler+0xa38>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d00e      	beq.n	8006754 <HAL_DMA_IRQHandler+0x8b8>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a67      	ldr	r2, [pc, #412]	; (80068d8 <HAL_DMA_IRQHandler+0xa3c>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d009      	beq.n	8006754 <HAL_DMA_IRQHandler+0x8b8>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a65      	ldr	r2, [pc, #404]	; (80068dc <HAL_DMA_IRQHandler+0xa40>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d004      	beq.n	8006754 <HAL_DMA_IRQHandler+0x8b8>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a64      	ldr	r2, [pc, #400]	; (80068e0 <HAL_DMA_IRQHandler+0xa44>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d108      	bne.n	8006766 <HAL_DMA_IRQHandler+0x8ca>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f022 0201 	bic.w	r2, r2, #1
 8006762:	601a      	str	r2, [r3, #0]
 8006764:	e007      	b.n	8006776 <HAL_DMA_IRQHandler+0x8da>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f022 0201 	bic.w	r2, r2, #1
 8006774:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	3301      	adds	r3, #1
 800677a:	60fb      	str	r3, [r7, #12]
 800677c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800677e:	429a      	cmp	r2, r3
 8006780:	d307      	bcc.n	8006792 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1f2      	bne.n	8006776 <HAL_DMA_IRQHandler+0x8da>
 8006790:	e000      	b.n	8006794 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006792:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d004      	beq.n	80067ac <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2203      	movs	r2, #3
 80067a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80067aa:	e003      	b.n	80067b4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f000 8272 	beq.w	8006caa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	4798      	blx	r3
 80067ce:	e26c      	b.n	8006caa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a43      	ldr	r2, [pc, #268]	; (80068e4 <HAL_DMA_IRQHandler+0xa48>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d022      	beq.n	8006820 <HAL_DMA_IRQHandler+0x984>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a42      	ldr	r2, [pc, #264]	; (80068e8 <HAL_DMA_IRQHandler+0xa4c>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d01d      	beq.n	8006820 <HAL_DMA_IRQHandler+0x984>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a40      	ldr	r2, [pc, #256]	; (80068ec <HAL_DMA_IRQHandler+0xa50>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d018      	beq.n	8006820 <HAL_DMA_IRQHandler+0x984>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a3f      	ldr	r2, [pc, #252]	; (80068f0 <HAL_DMA_IRQHandler+0xa54>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d013      	beq.n	8006820 <HAL_DMA_IRQHandler+0x984>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a3d      	ldr	r2, [pc, #244]	; (80068f4 <HAL_DMA_IRQHandler+0xa58>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d00e      	beq.n	8006820 <HAL_DMA_IRQHandler+0x984>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a3c      	ldr	r2, [pc, #240]	; (80068f8 <HAL_DMA_IRQHandler+0xa5c>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d009      	beq.n	8006820 <HAL_DMA_IRQHandler+0x984>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a3a      	ldr	r2, [pc, #232]	; (80068fc <HAL_DMA_IRQHandler+0xa60>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d004      	beq.n	8006820 <HAL_DMA_IRQHandler+0x984>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a39      	ldr	r2, [pc, #228]	; (8006900 <HAL_DMA_IRQHandler+0xa64>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d101      	bne.n	8006824 <HAL_DMA_IRQHandler+0x988>
 8006820:	2301      	movs	r3, #1
 8006822:	e000      	b.n	8006826 <HAL_DMA_IRQHandler+0x98a>
 8006824:	2300      	movs	r3, #0
 8006826:	2b00      	cmp	r3, #0
 8006828:	f000 823f 	beq.w	8006caa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006838:	f003 031f 	and.w	r3, r3, #31
 800683c:	2204      	movs	r2, #4
 800683e:	409a      	lsls	r2, r3
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	4013      	ands	r3, r2
 8006844:	2b00      	cmp	r3, #0
 8006846:	f000 80cd 	beq.w	80069e4 <HAL_DMA_IRQHandler+0xb48>
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	f003 0304 	and.w	r3, r3, #4
 8006850:	2b00      	cmp	r3, #0
 8006852:	f000 80c7 	beq.w	80069e4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800685a:	f003 031f 	and.w	r3, r3, #31
 800685e:	2204      	movs	r2, #4
 8006860:	409a      	lsls	r2, r3
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800686c:	2b00      	cmp	r3, #0
 800686e:	d049      	beq.n	8006904 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d109      	bne.n	800688e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800687e:	2b00      	cmp	r3, #0
 8006880:	f000 8210 	beq.w	8006ca4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800688c:	e20a      	b.n	8006ca4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006892:	2b00      	cmp	r3, #0
 8006894:	f000 8206 	beq.w	8006ca4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068a0:	e200      	b.n	8006ca4 <HAL_DMA_IRQHandler+0xe08>
 80068a2:	bf00      	nop
 80068a4:	40020010 	.word	0x40020010
 80068a8:	40020028 	.word	0x40020028
 80068ac:	40020040 	.word	0x40020040
 80068b0:	40020058 	.word	0x40020058
 80068b4:	40020070 	.word	0x40020070
 80068b8:	40020088 	.word	0x40020088
 80068bc:	400200a0 	.word	0x400200a0
 80068c0:	400200b8 	.word	0x400200b8
 80068c4:	40020410 	.word	0x40020410
 80068c8:	40020428 	.word	0x40020428
 80068cc:	40020440 	.word	0x40020440
 80068d0:	40020458 	.word	0x40020458
 80068d4:	40020470 	.word	0x40020470
 80068d8:	40020488 	.word	0x40020488
 80068dc:	400204a0 	.word	0x400204a0
 80068e0:	400204b8 	.word	0x400204b8
 80068e4:	58025408 	.word	0x58025408
 80068e8:	5802541c 	.word	0x5802541c
 80068ec:	58025430 	.word	0x58025430
 80068f0:	58025444 	.word	0x58025444
 80068f4:	58025458 	.word	0x58025458
 80068f8:	5802546c 	.word	0x5802546c
 80068fc:	58025480 	.word	0x58025480
 8006900:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	f003 0320 	and.w	r3, r3, #32
 800690a:	2b00      	cmp	r3, #0
 800690c:	d160      	bne.n	80069d0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a7f      	ldr	r2, [pc, #508]	; (8006b10 <HAL_DMA_IRQHandler+0xc74>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d04a      	beq.n	80069ae <HAL_DMA_IRQHandler+0xb12>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a7d      	ldr	r2, [pc, #500]	; (8006b14 <HAL_DMA_IRQHandler+0xc78>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d045      	beq.n	80069ae <HAL_DMA_IRQHandler+0xb12>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a7c      	ldr	r2, [pc, #496]	; (8006b18 <HAL_DMA_IRQHandler+0xc7c>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d040      	beq.n	80069ae <HAL_DMA_IRQHandler+0xb12>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a7a      	ldr	r2, [pc, #488]	; (8006b1c <HAL_DMA_IRQHandler+0xc80>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d03b      	beq.n	80069ae <HAL_DMA_IRQHandler+0xb12>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a79      	ldr	r2, [pc, #484]	; (8006b20 <HAL_DMA_IRQHandler+0xc84>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d036      	beq.n	80069ae <HAL_DMA_IRQHandler+0xb12>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a77      	ldr	r2, [pc, #476]	; (8006b24 <HAL_DMA_IRQHandler+0xc88>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d031      	beq.n	80069ae <HAL_DMA_IRQHandler+0xb12>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a76      	ldr	r2, [pc, #472]	; (8006b28 <HAL_DMA_IRQHandler+0xc8c>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d02c      	beq.n	80069ae <HAL_DMA_IRQHandler+0xb12>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a74      	ldr	r2, [pc, #464]	; (8006b2c <HAL_DMA_IRQHandler+0xc90>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d027      	beq.n	80069ae <HAL_DMA_IRQHandler+0xb12>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a73      	ldr	r2, [pc, #460]	; (8006b30 <HAL_DMA_IRQHandler+0xc94>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d022      	beq.n	80069ae <HAL_DMA_IRQHandler+0xb12>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a71      	ldr	r2, [pc, #452]	; (8006b34 <HAL_DMA_IRQHandler+0xc98>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d01d      	beq.n	80069ae <HAL_DMA_IRQHandler+0xb12>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a70      	ldr	r2, [pc, #448]	; (8006b38 <HAL_DMA_IRQHandler+0xc9c>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d018      	beq.n	80069ae <HAL_DMA_IRQHandler+0xb12>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a6e      	ldr	r2, [pc, #440]	; (8006b3c <HAL_DMA_IRQHandler+0xca0>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d013      	beq.n	80069ae <HAL_DMA_IRQHandler+0xb12>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a6d      	ldr	r2, [pc, #436]	; (8006b40 <HAL_DMA_IRQHandler+0xca4>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d00e      	beq.n	80069ae <HAL_DMA_IRQHandler+0xb12>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a6b      	ldr	r2, [pc, #428]	; (8006b44 <HAL_DMA_IRQHandler+0xca8>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d009      	beq.n	80069ae <HAL_DMA_IRQHandler+0xb12>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a6a      	ldr	r2, [pc, #424]	; (8006b48 <HAL_DMA_IRQHandler+0xcac>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d004      	beq.n	80069ae <HAL_DMA_IRQHandler+0xb12>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a68      	ldr	r2, [pc, #416]	; (8006b4c <HAL_DMA_IRQHandler+0xcb0>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d108      	bne.n	80069c0 <HAL_DMA_IRQHandler+0xb24>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f022 0208 	bic.w	r2, r2, #8
 80069bc:	601a      	str	r2, [r3, #0]
 80069be:	e007      	b.n	80069d0 <HAL_DMA_IRQHandler+0xb34>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f022 0204 	bic.w	r2, r2, #4
 80069ce:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f000 8165 	beq.w	8006ca4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069e2:	e15f      	b.n	8006ca4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069e8:	f003 031f 	and.w	r3, r3, #31
 80069ec:	2202      	movs	r2, #2
 80069ee:	409a      	lsls	r2, r3
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	4013      	ands	r3, r2
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f000 80c5 	beq.w	8006b84 <HAL_DMA_IRQHandler+0xce8>
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	f003 0302 	and.w	r3, r3, #2
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f000 80bf 	beq.w	8006b84 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a0a:	f003 031f 	and.w	r3, r3, #31
 8006a0e:	2202      	movs	r2, #2
 8006a10:	409a      	lsls	r2, r3
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d018      	beq.n	8006a52 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d109      	bne.n	8006a3e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	f000 813a 	beq.w	8006ca8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a3c:	e134      	b.n	8006ca8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f000 8130 	beq.w	8006ca8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a50:	e12a      	b.n	8006ca8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	f003 0320 	and.w	r3, r3, #32
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f040 8089 	bne.w	8006b70 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a2b      	ldr	r2, [pc, #172]	; (8006b10 <HAL_DMA_IRQHandler+0xc74>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d04a      	beq.n	8006afe <HAL_DMA_IRQHandler+0xc62>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a29      	ldr	r2, [pc, #164]	; (8006b14 <HAL_DMA_IRQHandler+0xc78>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d045      	beq.n	8006afe <HAL_DMA_IRQHandler+0xc62>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a28      	ldr	r2, [pc, #160]	; (8006b18 <HAL_DMA_IRQHandler+0xc7c>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d040      	beq.n	8006afe <HAL_DMA_IRQHandler+0xc62>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a26      	ldr	r2, [pc, #152]	; (8006b1c <HAL_DMA_IRQHandler+0xc80>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d03b      	beq.n	8006afe <HAL_DMA_IRQHandler+0xc62>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a25      	ldr	r2, [pc, #148]	; (8006b20 <HAL_DMA_IRQHandler+0xc84>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d036      	beq.n	8006afe <HAL_DMA_IRQHandler+0xc62>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a23      	ldr	r2, [pc, #140]	; (8006b24 <HAL_DMA_IRQHandler+0xc88>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d031      	beq.n	8006afe <HAL_DMA_IRQHandler+0xc62>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a22      	ldr	r2, [pc, #136]	; (8006b28 <HAL_DMA_IRQHandler+0xc8c>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d02c      	beq.n	8006afe <HAL_DMA_IRQHandler+0xc62>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a20      	ldr	r2, [pc, #128]	; (8006b2c <HAL_DMA_IRQHandler+0xc90>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d027      	beq.n	8006afe <HAL_DMA_IRQHandler+0xc62>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a1f      	ldr	r2, [pc, #124]	; (8006b30 <HAL_DMA_IRQHandler+0xc94>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d022      	beq.n	8006afe <HAL_DMA_IRQHandler+0xc62>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a1d      	ldr	r2, [pc, #116]	; (8006b34 <HAL_DMA_IRQHandler+0xc98>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d01d      	beq.n	8006afe <HAL_DMA_IRQHandler+0xc62>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a1c      	ldr	r2, [pc, #112]	; (8006b38 <HAL_DMA_IRQHandler+0xc9c>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d018      	beq.n	8006afe <HAL_DMA_IRQHandler+0xc62>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a1a      	ldr	r2, [pc, #104]	; (8006b3c <HAL_DMA_IRQHandler+0xca0>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d013      	beq.n	8006afe <HAL_DMA_IRQHandler+0xc62>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a19      	ldr	r2, [pc, #100]	; (8006b40 <HAL_DMA_IRQHandler+0xca4>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d00e      	beq.n	8006afe <HAL_DMA_IRQHandler+0xc62>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a17      	ldr	r2, [pc, #92]	; (8006b44 <HAL_DMA_IRQHandler+0xca8>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d009      	beq.n	8006afe <HAL_DMA_IRQHandler+0xc62>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a16      	ldr	r2, [pc, #88]	; (8006b48 <HAL_DMA_IRQHandler+0xcac>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d004      	beq.n	8006afe <HAL_DMA_IRQHandler+0xc62>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a14      	ldr	r2, [pc, #80]	; (8006b4c <HAL_DMA_IRQHandler+0xcb0>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d128      	bne.n	8006b50 <HAL_DMA_IRQHandler+0xcb4>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f022 0214 	bic.w	r2, r2, #20
 8006b0c:	601a      	str	r2, [r3, #0]
 8006b0e:	e027      	b.n	8006b60 <HAL_DMA_IRQHandler+0xcc4>
 8006b10:	40020010 	.word	0x40020010
 8006b14:	40020028 	.word	0x40020028
 8006b18:	40020040 	.word	0x40020040
 8006b1c:	40020058 	.word	0x40020058
 8006b20:	40020070 	.word	0x40020070
 8006b24:	40020088 	.word	0x40020088
 8006b28:	400200a0 	.word	0x400200a0
 8006b2c:	400200b8 	.word	0x400200b8
 8006b30:	40020410 	.word	0x40020410
 8006b34:	40020428 	.word	0x40020428
 8006b38:	40020440 	.word	0x40020440
 8006b3c:	40020458 	.word	0x40020458
 8006b40:	40020470 	.word	0x40020470
 8006b44:	40020488 	.word	0x40020488
 8006b48:	400204a0 	.word	0x400204a0
 8006b4c:	400204b8 	.word	0x400204b8
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f022 020a 	bic.w	r2, r2, #10
 8006b5e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f000 8097 	beq.w	8006ca8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b82:	e091      	b.n	8006ca8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b88:	f003 031f 	and.w	r3, r3, #31
 8006b8c:	2208      	movs	r2, #8
 8006b8e:	409a      	lsls	r2, r3
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	4013      	ands	r3, r2
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f000 8088 	beq.w	8006caa <HAL_DMA_IRQHandler+0xe0e>
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	f003 0308 	and.w	r3, r3, #8
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 8082 	beq.w	8006caa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a41      	ldr	r2, [pc, #260]	; (8006cb0 <HAL_DMA_IRQHandler+0xe14>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d04a      	beq.n	8006c46 <HAL_DMA_IRQHandler+0xdaa>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a3f      	ldr	r2, [pc, #252]	; (8006cb4 <HAL_DMA_IRQHandler+0xe18>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d045      	beq.n	8006c46 <HAL_DMA_IRQHandler+0xdaa>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a3e      	ldr	r2, [pc, #248]	; (8006cb8 <HAL_DMA_IRQHandler+0xe1c>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d040      	beq.n	8006c46 <HAL_DMA_IRQHandler+0xdaa>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a3c      	ldr	r2, [pc, #240]	; (8006cbc <HAL_DMA_IRQHandler+0xe20>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d03b      	beq.n	8006c46 <HAL_DMA_IRQHandler+0xdaa>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a3b      	ldr	r2, [pc, #236]	; (8006cc0 <HAL_DMA_IRQHandler+0xe24>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d036      	beq.n	8006c46 <HAL_DMA_IRQHandler+0xdaa>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a39      	ldr	r2, [pc, #228]	; (8006cc4 <HAL_DMA_IRQHandler+0xe28>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d031      	beq.n	8006c46 <HAL_DMA_IRQHandler+0xdaa>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a38      	ldr	r2, [pc, #224]	; (8006cc8 <HAL_DMA_IRQHandler+0xe2c>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d02c      	beq.n	8006c46 <HAL_DMA_IRQHandler+0xdaa>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a36      	ldr	r2, [pc, #216]	; (8006ccc <HAL_DMA_IRQHandler+0xe30>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d027      	beq.n	8006c46 <HAL_DMA_IRQHandler+0xdaa>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a35      	ldr	r2, [pc, #212]	; (8006cd0 <HAL_DMA_IRQHandler+0xe34>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d022      	beq.n	8006c46 <HAL_DMA_IRQHandler+0xdaa>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a33      	ldr	r2, [pc, #204]	; (8006cd4 <HAL_DMA_IRQHandler+0xe38>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d01d      	beq.n	8006c46 <HAL_DMA_IRQHandler+0xdaa>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a32      	ldr	r2, [pc, #200]	; (8006cd8 <HAL_DMA_IRQHandler+0xe3c>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d018      	beq.n	8006c46 <HAL_DMA_IRQHandler+0xdaa>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a30      	ldr	r2, [pc, #192]	; (8006cdc <HAL_DMA_IRQHandler+0xe40>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d013      	beq.n	8006c46 <HAL_DMA_IRQHandler+0xdaa>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a2f      	ldr	r2, [pc, #188]	; (8006ce0 <HAL_DMA_IRQHandler+0xe44>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d00e      	beq.n	8006c46 <HAL_DMA_IRQHandler+0xdaa>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a2d      	ldr	r2, [pc, #180]	; (8006ce4 <HAL_DMA_IRQHandler+0xe48>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d009      	beq.n	8006c46 <HAL_DMA_IRQHandler+0xdaa>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a2c      	ldr	r2, [pc, #176]	; (8006ce8 <HAL_DMA_IRQHandler+0xe4c>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d004      	beq.n	8006c46 <HAL_DMA_IRQHandler+0xdaa>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a2a      	ldr	r2, [pc, #168]	; (8006cec <HAL_DMA_IRQHandler+0xe50>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d108      	bne.n	8006c58 <HAL_DMA_IRQHandler+0xdbc>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f022 021c 	bic.w	r2, r2, #28
 8006c54:	601a      	str	r2, [r3, #0]
 8006c56:	e007      	b.n	8006c68 <HAL_DMA_IRQHandler+0xdcc>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f022 020e 	bic.w	r2, r2, #14
 8006c66:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c6c:	f003 031f 	and.w	r3, r3, #31
 8006c70:	2201      	movs	r2, #1
 8006c72:	409a      	lsls	r2, r3
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2201      	movs	r2, #1
 8006c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d009      	beq.n	8006caa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	4798      	blx	r3
 8006c9e:	e004      	b.n	8006caa <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006ca0:	bf00      	nop
 8006ca2:	e002      	b.n	8006caa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ca4:	bf00      	nop
 8006ca6:	e000      	b.n	8006caa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ca8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006caa:	3728      	adds	r7, #40	; 0x28
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	40020010 	.word	0x40020010
 8006cb4:	40020028 	.word	0x40020028
 8006cb8:	40020040 	.word	0x40020040
 8006cbc:	40020058 	.word	0x40020058
 8006cc0:	40020070 	.word	0x40020070
 8006cc4:	40020088 	.word	0x40020088
 8006cc8:	400200a0 	.word	0x400200a0
 8006ccc:	400200b8 	.word	0x400200b8
 8006cd0:	40020410 	.word	0x40020410
 8006cd4:	40020428 	.word	0x40020428
 8006cd8:	40020440 	.word	0x40020440
 8006cdc:	40020458 	.word	0x40020458
 8006ce0:	40020470 	.word	0x40020470
 8006ce4:	40020488 	.word	0x40020488
 8006ce8:	400204a0 	.word	0x400204a0
 8006cec:	400204b8 	.word	0x400204b8

08006cf0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b087      	sub	sp, #28
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	607a      	str	r2, [r7, #4]
 8006cfc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d02:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d08:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a7f      	ldr	r2, [pc, #508]	; (8006f0c <DMA_SetConfig+0x21c>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d072      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a7d      	ldr	r2, [pc, #500]	; (8006f10 <DMA_SetConfig+0x220>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d06d      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a7c      	ldr	r2, [pc, #496]	; (8006f14 <DMA_SetConfig+0x224>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d068      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a7a      	ldr	r2, [pc, #488]	; (8006f18 <DMA_SetConfig+0x228>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d063      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a79      	ldr	r2, [pc, #484]	; (8006f1c <DMA_SetConfig+0x22c>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d05e      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a77      	ldr	r2, [pc, #476]	; (8006f20 <DMA_SetConfig+0x230>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d059      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a76      	ldr	r2, [pc, #472]	; (8006f24 <DMA_SetConfig+0x234>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d054      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a74      	ldr	r2, [pc, #464]	; (8006f28 <DMA_SetConfig+0x238>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d04f      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a73      	ldr	r2, [pc, #460]	; (8006f2c <DMA_SetConfig+0x23c>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d04a      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a71      	ldr	r2, [pc, #452]	; (8006f30 <DMA_SetConfig+0x240>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d045      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a70      	ldr	r2, [pc, #448]	; (8006f34 <DMA_SetConfig+0x244>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d040      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a6e      	ldr	r2, [pc, #440]	; (8006f38 <DMA_SetConfig+0x248>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d03b      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a6d      	ldr	r2, [pc, #436]	; (8006f3c <DMA_SetConfig+0x24c>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d036      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a6b      	ldr	r2, [pc, #428]	; (8006f40 <DMA_SetConfig+0x250>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d031      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a6a      	ldr	r2, [pc, #424]	; (8006f44 <DMA_SetConfig+0x254>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d02c      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a68      	ldr	r2, [pc, #416]	; (8006f48 <DMA_SetConfig+0x258>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d027      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a67      	ldr	r2, [pc, #412]	; (8006f4c <DMA_SetConfig+0x25c>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d022      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a65      	ldr	r2, [pc, #404]	; (8006f50 <DMA_SetConfig+0x260>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d01d      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a64      	ldr	r2, [pc, #400]	; (8006f54 <DMA_SetConfig+0x264>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d018      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a62      	ldr	r2, [pc, #392]	; (8006f58 <DMA_SetConfig+0x268>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d013      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a61      	ldr	r2, [pc, #388]	; (8006f5c <DMA_SetConfig+0x26c>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d00e      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a5f      	ldr	r2, [pc, #380]	; (8006f60 <DMA_SetConfig+0x270>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d009      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a5e      	ldr	r2, [pc, #376]	; (8006f64 <DMA_SetConfig+0x274>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d004      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a5c      	ldr	r2, [pc, #368]	; (8006f68 <DMA_SetConfig+0x278>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d101      	bne.n	8006dfe <DMA_SetConfig+0x10e>
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e000      	b.n	8006e00 <DMA_SetConfig+0x110>
 8006dfe:	2300      	movs	r3, #0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00d      	beq.n	8006e20 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006e0c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d004      	beq.n	8006e20 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006e1e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a39      	ldr	r2, [pc, #228]	; (8006f0c <DMA_SetConfig+0x21c>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d04a      	beq.n	8006ec0 <DMA_SetConfig+0x1d0>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a38      	ldr	r2, [pc, #224]	; (8006f10 <DMA_SetConfig+0x220>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d045      	beq.n	8006ec0 <DMA_SetConfig+0x1d0>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a36      	ldr	r2, [pc, #216]	; (8006f14 <DMA_SetConfig+0x224>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d040      	beq.n	8006ec0 <DMA_SetConfig+0x1d0>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a35      	ldr	r2, [pc, #212]	; (8006f18 <DMA_SetConfig+0x228>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d03b      	beq.n	8006ec0 <DMA_SetConfig+0x1d0>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a33      	ldr	r2, [pc, #204]	; (8006f1c <DMA_SetConfig+0x22c>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d036      	beq.n	8006ec0 <DMA_SetConfig+0x1d0>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a32      	ldr	r2, [pc, #200]	; (8006f20 <DMA_SetConfig+0x230>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d031      	beq.n	8006ec0 <DMA_SetConfig+0x1d0>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a30      	ldr	r2, [pc, #192]	; (8006f24 <DMA_SetConfig+0x234>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d02c      	beq.n	8006ec0 <DMA_SetConfig+0x1d0>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a2f      	ldr	r2, [pc, #188]	; (8006f28 <DMA_SetConfig+0x238>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d027      	beq.n	8006ec0 <DMA_SetConfig+0x1d0>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a2d      	ldr	r2, [pc, #180]	; (8006f2c <DMA_SetConfig+0x23c>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d022      	beq.n	8006ec0 <DMA_SetConfig+0x1d0>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a2c      	ldr	r2, [pc, #176]	; (8006f30 <DMA_SetConfig+0x240>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d01d      	beq.n	8006ec0 <DMA_SetConfig+0x1d0>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a2a      	ldr	r2, [pc, #168]	; (8006f34 <DMA_SetConfig+0x244>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d018      	beq.n	8006ec0 <DMA_SetConfig+0x1d0>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a29      	ldr	r2, [pc, #164]	; (8006f38 <DMA_SetConfig+0x248>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d013      	beq.n	8006ec0 <DMA_SetConfig+0x1d0>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a27      	ldr	r2, [pc, #156]	; (8006f3c <DMA_SetConfig+0x24c>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d00e      	beq.n	8006ec0 <DMA_SetConfig+0x1d0>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a26      	ldr	r2, [pc, #152]	; (8006f40 <DMA_SetConfig+0x250>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d009      	beq.n	8006ec0 <DMA_SetConfig+0x1d0>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a24      	ldr	r2, [pc, #144]	; (8006f44 <DMA_SetConfig+0x254>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d004      	beq.n	8006ec0 <DMA_SetConfig+0x1d0>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a23      	ldr	r2, [pc, #140]	; (8006f48 <DMA_SetConfig+0x258>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d101      	bne.n	8006ec4 <DMA_SetConfig+0x1d4>
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e000      	b.n	8006ec6 <DMA_SetConfig+0x1d6>
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d059      	beq.n	8006f7e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ece:	f003 031f 	and.w	r3, r3, #31
 8006ed2:	223f      	movs	r2, #63	; 0x3f
 8006ed4:	409a      	lsls	r2, r3
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006ee8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	683a      	ldr	r2, [r7, #0]
 8006ef0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	2b40      	cmp	r3, #64	; 0x40
 8006ef8:	d138      	bne.n	8006f6c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68ba      	ldr	r2, [r7, #8]
 8006f08:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006f0a:	e086      	b.n	800701a <DMA_SetConfig+0x32a>
 8006f0c:	40020010 	.word	0x40020010
 8006f10:	40020028 	.word	0x40020028
 8006f14:	40020040 	.word	0x40020040
 8006f18:	40020058 	.word	0x40020058
 8006f1c:	40020070 	.word	0x40020070
 8006f20:	40020088 	.word	0x40020088
 8006f24:	400200a0 	.word	0x400200a0
 8006f28:	400200b8 	.word	0x400200b8
 8006f2c:	40020410 	.word	0x40020410
 8006f30:	40020428 	.word	0x40020428
 8006f34:	40020440 	.word	0x40020440
 8006f38:	40020458 	.word	0x40020458
 8006f3c:	40020470 	.word	0x40020470
 8006f40:	40020488 	.word	0x40020488
 8006f44:	400204a0 	.word	0x400204a0
 8006f48:	400204b8 	.word	0x400204b8
 8006f4c:	58025408 	.word	0x58025408
 8006f50:	5802541c 	.word	0x5802541c
 8006f54:	58025430 	.word	0x58025430
 8006f58:	58025444 	.word	0x58025444
 8006f5c:	58025458 	.word	0x58025458
 8006f60:	5802546c 	.word	0x5802546c
 8006f64:	58025480 	.word	0x58025480
 8006f68:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68ba      	ldr	r2, [r7, #8]
 8006f72:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	60da      	str	r2, [r3, #12]
}
 8006f7c:	e04d      	b.n	800701a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a29      	ldr	r2, [pc, #164]	; (8007028 <DMA_SetConfig+0x338>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d022      	beq.n	8006fce <DMA_SetConfig+0x2de>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a27      	ldr	r2, [pc, #156]	; (800702c <DMA_SetConfig+0x33c>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d01d      	beq.n	8006fce <DMA_SetConfig+0x2de>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a26      	ldr	r2, [pc, #152]	; (8007030 <DMA_SetConfig+0x340>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d018      	beq.n	8006fce <DMA_SetConfig+0x2de>
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a24      	ldr	r2, [pc, #144]	; (8007034 <DMA_SetConfig+0x344>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d013      	beq.n	8006fce <DMA_SetConfig+0x2de>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a23      	ldr	r2, [pc, #140]	; (8007038 <DMA_SetConfig+0x348>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d00e      	beq.n	8006fce <DMA_SetConfig+0x2de>
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a21      	ldr	r2, [pc, #132]	; (800703c <DMA_SetConfig+0x34c>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d009      	beq.n	8006fce <DMA_SetConfig+0x2de>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a20      	ldr	r2, [pc, #128]	; (8007040 <DMA_SetConfig+0x350>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d004      	beq.n	8006fce <DMA_SetConfig+0x2de>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a1e      	ldr	r2, [pc, #120]	; (8007044 <DMA_SetConfig+0x354>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d101      	bne.n	8006fd2 <DMA_SetConfig+0x2e2>
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e000      	b.n	8006fd4 <DMA_SetConfig+0x2e4>
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d020      	beq.n	800701a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fdc:	f003 031f 	and.w	r3, r3, #31
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	409a      	lsls	r2, r3
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	683a      	ldr	r2, [r7, #0]
 8006fee:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	2b40      	cmp	r3, #64	; 0x40
 8006ff6:	d108      	bne.n	800700a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	60da      	str	r2, [r3, #12]
}
 8007008:	e007      	b.n	800701a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68ba      	ldr	r2, [r7, #8]
 8007010:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	60da      	str	r2, [r3, #12]
}
 800701a:	bf00      	nop
 800701c:	371c      	adds	r7, #28
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop
 8007028:	58025408 	.word	0x58025408
 800702c:	5802541c 	.word	0x5802541c
 8007030:	58025430 	.word	0x58025430
 8007034:	58025444 	.word	0x58025444
 8007038:	58025458 	.word	0x58025458
 800703c:	5802546c 	.word	0x5802546c
 8007040:	58025480 	.word	0x58025480
 8007044:	58025494 	.word	0x58025494

08007048 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a42      	ldr	r2, [pc, #264]	; (8007160 <DMA_CalcBaseAndBitshift+0x118>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d04a      	beq.n	80070f0 <DMA_CalcBaseAndBitshift+0xa8>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a41      	ldr	r2, [pc, #260]	; (8007164 <DMA_CalcBaseAndBitshift+0x11c>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d045      	beq.n	80070f0 <DMA_CalcBaseAndBitshift+0xa8>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a3f      	ldr	r2, [pc, #252]	; (8007168 <DMA_CalcBaseAndBitshift+0x120>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d040      	beq.n	80070f0 <DMA_CalcBaseAndBitshift+0xa8>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a3e      	ldr	r2, [pc, #248]	; (800716c <DMA_CalcBaseAndBitshift+0x124>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d03b      	beq.n	80070f0 <DMA_CalcBaseAndBitshift+0xa8>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a3c      	ldr	r2, [pc, #240]	; (8007170 <DMA_CalcBaseAndBitshift+0x128>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d036      	beq.n	80070f0 <DMA_CalcBaseAndBitshift+0xa8>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a3b      	ldr	r2, [pc, #236]	; (8007174 <DMA_CalcBaseAndBitshift+0x12c>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d031      	beq.n	80070f0 <DMA_CalcBaseAndBitshift+0xa8>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a39      	ldr	r2, [pc, #228]	; (8007178 <DMA_CalcBaseAndBitshift+0x130>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d02c      	beq.n	80070f0 <DMA_CalcBaseAndBitshift+0xa8>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a38      	ldr	r2, [pc, #224]	; (800717c <DMA_CalcBaseAndBitshift+0x134>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d027      	beq.n	80070f0 <DMA_CalcBaseAndBitshift+0xa8>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a36      	ldr	r2, [pc, #216]	; (8007180 <DMA_CalcBaseAndBitshift+0x138>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d022      	beq.n	80070f0 <DMA_CalcBaseAndBitshift+0xa8>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a35      	ldr	r2, [pc, #212]	; (8007184 <DMA_CalcBaseAndBitshift+0x13c>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d01d      	beq.n	80070f0 <DMA_CalcBaseAndBitshift+0xa8>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a33      	ldr	r2, [pc, #204]	; (8007188 <DMA_CalcBaseAndBitshift+0x140>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d018      	beq.n	80070f0 <DMA_CalcBaseAndBitshift+0xa8>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a32      	ldr	r2, [pc, #200]	; (800718c <DMA_CalcBaseAndBitshift+0x144>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d013      	beq.n	80070f0 <DMA_CalcBaseAndBitshift+0xa8>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a30      	ldr	r2, [pc, #192]	; (8007190 <DMA_CalcBaseAndBitshift+0x148>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d00e      	beq.n	80070f0 <DMA_CalcBaseAndBitshift+0xa8>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a2f      	ldr	r2, [pc, #188]	; (8007194 <DMA_CalcBaseAndBitshift+0x14c>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d009      	beq.n	80070f0 <DMA_CalcBaseAndBitshift+0xa8>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a2d      	ldr	r2, [pc, #180]	; (8007198 <DMA_CalcBaseAndBitshift+0x150>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d004      	beq.n	80070f0 <DMA_CalcBaseAndBitshift+0xa8>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a2c      	ldr	r2, [pc, #176]	; (800719c <DMA_CalcBaseAndBitshift+0x154>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d101      	bne.n	80070f4 <DMA_CalcBaseAndBitshift+0xac>
 80070f0:	2301      	movs	r3, #1
 80070f2:	e000      	b.n	80070f6 <DMA_CalcBaseAndBitshift+0xae>
 80070f4:	2300      	movs	r3, #0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d024      	beq.n	8007144 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	3b10      	subs	r3, #16
 8007102:	4a27      	ldr	r2, [pc, #156]	; (80071a0 <DMA_CalcBaseAndBitshift+0x158>)
 8007104:	fba2 2303 	umull	r2, r3, r2, r3
 8007108:	091b      	lsrs	r3, r3, #4
 800710a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f003 0307 	and.w	r3, r3, #7
 8007112:	4a24      	ldr	r2, [pc, #144]	; (80071a4 <DMA_CalcBaseAndBitshift+0x15c>)
 8007114:	5cd3      	ldrb	r3, [r2, r3]
 8007116:	461a      	mov	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2b03      	cmp	r3, #3
 8007120:	d908      	bls.n	8007134 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	461a      	mov	r2, r3
 8007128:	4b1f      	ldr	r3, [pc, #124]	; (80071a8 <DMA_CalcBaseAndBitshift+0x160>)
 800712a:	4013      	ands	r3, r2
 800712c:	1d1a      	adds	r2, r3, #4
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	659a      	str	r2, [r3, #88]	; 0x58
 8007132:	e00d      	b.n	8007150 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	461a      	mov	r2, r3
 800713a:	4b1b      	ldr	r3, [pc, #108]	; (80071a8 <DMA_CalcBaseAndBitshift+0x160>)
 800713c:	4013      	ands	r3, r2
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	6593      	str	r3, [r2, #88]	; 0x58
 8007142:	e005      	b.n	8007150 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007154:	4618      	mov	r0, r3
 8007156:	3714      	adds	r7, #20
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr
 8007160:	40020010 	.word	0x40020010
 8007164:	40020028 	.word	0x40020028
 8007168:	40020040 	.word	0x40020040
 800716c:	40020058 	.word	0x40020058
 8007170:	40020070 	.word	0x40020070
 8007174:	40020088 	.word	0x40020088
 8007178:	400200a0 	.word	0x400200a0
 800717c:	400200b8 	.word	0x400200b8
 8007180:	40020410 	.word	0x40020410
 8007184:	40020428 	.word	0x40020428
 8007188:	40020440 	.word	0x40020440
 800718c:	40020458 	.word	0x40020458
 8007190:	40020470 	.word	0x40020470
 8007194:	40020488 	.word	0x40020488
 8007198:	400204a0 	.word	0x400204a0
 800719c:	400204b8 	.word	0x400204b8
 80071a0:	aaaaaaab 	.word	0xaaaaaaab
 80071a4:	080183b0 	.word	0x080183b0
 80071a8:	fffffc00 	.word	0xfffffc00

080071ac <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071b4:	2300      	movs	r3, #0
 80071b6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	699b      	ldr	r3, [r3, #24]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d120      	bne.n	8007202 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c4:	2b03      	cmp	r3, #3
 80071c6:	d858      	bhi.n	800727a <DMA_CheckFifoParam+0xce>
 80071c8:	a201      	add	r2, pc, #4	; (adr r2, 80071d0 <DMA_CheckFifoParam+0x24>)
 80071ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ce:	bf00      	nop
 80071d0:	080071e1 	.word	0x080071e1
 80071d4:	080071f3 	.word	0x080071f3
 80071d8:	080071e1 	.word	0x080071e1
 80071dc:	0800727b 	.word	0x0800727b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d048      	beq.n	800727e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80071f0:	e045      	b.n	800727e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80071fa:	d142      	bne.n	8007282 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007200:	e03f      	b.n	8007282 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800720a:	d123      	bne.n	8007254 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007210:	2b03      	cmp	r3, #3
 8007212:	d838      	bhi.n	8007286 <DMA_CheckFifoParam+0xda>
 8007214:	a201      	add	r2, pc, #4	; (adr r2, 800721c <DMA_CheckFifoParam+0x70>)
 8007216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800721a:	bf00      	nop
 800721c:	0800722d 	.word	0x0800722d
 8007220:	08007233 	.word	0x08007233
 8007224:	0800722d 	.word	0x0800722d
 8007228:	08007245 	.word	0x08007245
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	73fb      	strb	r3, [r7, #15]
        break;
 8007230:	e030      	b.n	8007294 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007236:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d025      	beq.n	800728a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007242:	e022      	b.n	800728a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007248:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800724c:	d11f      	bne.n	800728e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007252:	e01c      	b.n	800728e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007258:	2b02      	cmp	r3, #2
 800725a:	d902      	bls.n	8007262 <DMA_CheckFifoParam+0xb6>
 800725c:	2b03      	cmp	r3, #3
 800725e:	d003      	beq.n	8007268 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007260:	e018      	b.n	8007294 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	73fb      	strb	r3, [r7, #15]
        break;
 8007266:	e015      	b.n	8007294 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800726c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00e      	beq.n	8007292 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	73fb      	strb	r3, [r7, #15]
    break;
 8007278:	e00b      	b.n	8007292 <DMA_CheckFifoParam+0xe6>
        break;
 800727a:	bf00      	nop
 800727c:	e00a      	b.n	8007294 <DMA_CheckFifoParam+0xe8>
        break;
 800727e:	bf00      	nop
 8007280:	e008      	b.n	8007294 <DMA_CheckFifoParam+0xe8>
        break;
 8007282:	bf00      	nop
 8007284:	e006      	b.n	8007294 <DMA_CheckFifoParam+0xe8>
        break;
 8007286:	bf00      	nop
 8007288:	e004      	b.n	8007294 <DMA_CheckFifoParam+0xe8>
        break;
 800728a:	bf00      	nop
 800728c:	e002      	b.n	8007294 <DMA_CheckFifoParam+0xe8>
        break;
 800728e:	bf00      	nop
 8007290:	e000      	b.n	8007294 <DMA_CheckFifoParam+0xe8>
    break;
 8007292:	bf00      	nop
    }
  }

  return status;
 8007294:	7bfb      	ldrb	r3, [r7, #15]
}
 8007296:	4618      	mov	r0, r3
 8007298:	3714      	adds	r7, #20
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop

080072a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a38      	ldr	r2, [pc, #224]	; (8007398 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d022      	beq.n	8007302 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a36      	ldr	r2, [pc, #216]	; (800739c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d01d      	beq.n	8007302 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a35      	ldr	r2, [pc, #212]	; (80073a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d018      	beq.n	8007302 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a33      	ldr	r2, [pc, #204]	; (80073a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d013      	beq.n	8007302 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a32      	ldr	r2, [pc, #200]	; (80073a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d00e      	beq.n	8007302 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a30      	ldr	r2, [pc, #192]	; (80073ac <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d009      	beq.n	8007302 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a2f      	ldr	r2, [pc, #188]	; (80073b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d004      	beq.n	8007302 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a2d      	ldr	r2, [pc, #180]	; (80073b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d101      	bne.n	8007306 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007302:	2301      	movs	r3, #1
 8007304:	e000      	b.n	8007308 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007306:	2300      	movs	r3, #0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d01a      	beq.n	8007342 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	b2db      	uxtb	r3, r3
 8007312:	3b08      	subs	r3, #8
 8007314:	4a28      	ldr	r2, [pc, #160]	; (80073b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007316:	fba2 2303 	umull	r2, r3, r2, r3
 800731a:	091b      	lsrs	r3, r3, #4
 800731c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	4b26      	ldr	r3, [pc, #152]	; (80073bc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007322:	4413      	add	r3, r2
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	461a      	mov	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a24      	ldr	r2, [pc, #144]	; (80073c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007330:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f003 031f 	and.w	r3, r3, #31
 8007338:	2201      	movs	r2, #1
 800733a:	409a      	lsls	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007340:	e024      	b.n	800738c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	b2db      	uxtb	r3, r3
 8007348:	3b10      	subs	r3, #16
 800734a:	4a1e      	ldr	r2, [pc, #120]	; (80073c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800734c:	fba2 2303 	umull	r2, r3, r2, r3
 8007350:	091b      	lsrs	r3, r3, #4
 8007352:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	4a1c      	ldr	r2, [pc, #112]	; (80073c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d806      	bhi.n	800736a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	4a1b      	ldr	r2, [pc, #108]	; (80073cc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d902      	bls.n	800736a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	3308      	adds	r3, #8
 8007368:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	4b18      	ldr	r3, [pc, #96]	; (80073d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800736e:	4413      	add	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	461a      	mov	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a16      	ldr	r2, [pc, #88]	; (80073d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800737c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f003 031f 	and.w	r3, r3, #31
 8007384:	2201      	movs	r2, #1
 8007386:	409a      	lsls	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800738c:	bf00      	nop
 800738e:	3714      	adds	r7, #20
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr
 8007398:	58025408 	.word	0x58025408
 800739c:	5802541c 	.word	0x5802541c
 80073a0:	58025430 	.word	0x58025430
 80073a4:	58025444 	.word	0x58025444
 80073a8:	58025458 	.word	0x58025458
 80073ac:	5802546c 	.word	0x5802546c
 80073b0:	58025480 	.word	0x58025480
 80073b4:	58025494 	.word	0x58025494
 80073b8:	cccccccd 	.word	0xcccccccd
 80073bc:	16009600 	.word	0x16009600
 80073c0:	58025880 	.word	0x58025880
 80073c4:	aaaaaaab 	.word	0xaaaaaaab
 80073c8:	400204b8 	.word	0x400204b8
 80073cc:	4002040f 	.word	0x4002040f
 80073d0:	10008200 	.word	0x10008200
 80073d4:	40020880 	.word	0x40020880

080073d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d04a      	beq.n	8007484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2b08      	cmp	r3, #8
 80073f2:	d847      	bhi.n	8007484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a25      	ldr	r2, [pc, #148]	; (8007490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d022      	beq.n	8007444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a24      	ldr	r2, [pc, #144]	; (8007494 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d01d      	beq.n	8007444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a22      	ldr	r2, [pc, #136]	; (8007498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d018      	beq.n	8007444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a21      	ldr	r2, [pc, #132]	; (800749c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d013      	beq.n	8007444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a1f      	ldr	r2, [pc, #124]	; (80074a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d00e      	beq.n	8007444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a1e      	ldr	r2, [pc, #120]	; (80074a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d009      	beq.n	8007444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a1c      	ldr	r2, [pc, #112]	; (80074a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d004      	beq.n	8007444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a1b      	ldr	r2, [pc, #108]	; (80074ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d101      	bne.n	8007448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007444:	2301      	movs	r3, #1
 8007446:	e000      	b.n	800744a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007448:	2300      	movs	r3, #0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00a      	beq.n	8007464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800744e:	68fa      	ldr	r2, [r7, #12]
 8007450:	4b17      	ldr	r3, [pc, #92]	; (80074b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007452:	4413      	add	r3, r2
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	461a      	mov	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a15      	ldr	r2, [pc, #84]	; (80074b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007460:	671a      	str	r2, [r3, #112]	; 0x70
 8007462:	e009      	b.n	8007478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	4b14      	ldr	r3, [pc, #80]	; (80074b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007468:	4413      	add	r3, r2
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	461a      	mov	r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a11      	ldr	r2, [pc, #68]	; (80074bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007476:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	3b01      	subs	r3, #1
 800747c:	2201      	movs	r2, #1
 800747e:	409a      	lsls	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007484:	bf00      	nop
 8007486:	3714      	adds	r7, #20
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr
 8007490:	58025408 	.word	0x58025408
 8007494:	5802541c 	.word	0x5802541c
 8007498:	58025430 	.word	0x58025430
 800749c:	58025444 	.word	0x58025444
 80074a0:	58025458 	.word	0x58025458
 80074a4:	5802546c 	.word	0x5802546c
 80074a8:	58025480 	.word	0x58025480
 80074ac:	58025494 	.word	0x58025494
 80074b0:	1600963f 	.word	0x1600963f
 80074b4:	58025940 	.word	0x58025940
 80074b8:	1000823f 	.word	0x1000823f
 80074bc:	40020940 	.word	0x40020940

080074c0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b098      	sub	sp, #96	; 0x60
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80074c8:	4a84      	ldr	r2, [pc, #528]	; (80076dc <HAL_FDCAN_Init+0x21c>)
 80074ca:	f107 030c 	add.w	r3, r7, #12
 80074ce:	4611      	mov	r1, r2
 80074d0:	224c      	movs	r2, #76	; 0x4c
 80074d2:	4618      	mov	r0, r3
 80074d4:	f00f fd78 	bl	8016fc8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d101      	bne.n	80074e2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e1c6      	b.n	8007870 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a7e      	ldr	r2, [pc, #504]	; (80076e0 <HAL_FDCAN_Init+0x220>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d106      	bne.n	80074fa <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80074f4:	461a      	mov	r2, r3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007500:	b2db      	uxtb	r3, r3
 8007502:	2b00      	cmp	r3, #0
 8007504:	d106      	bne.n	8007514 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7fb fad8 	bl	8002ac4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	699a      	ldr	r2, [r3, #24]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f022 0210 	bic.w	r2, r2, #16
 8007522:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007524:	f7fc fa32 	bl	800398c <HAL_GetTick>
 8007528:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800752a:	e014      	b.n	8007556 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800752c:	f7fc fa2e 	bl	800398c <HAL_GetTick>
 8007530:	4602      	mov	r2, r0
 8007532:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007534:	1ad3      	subs	r3, r2, r3
 8007536:	2b0a      	cmp	r3, #10
 8007538:	d90d      	bls.n	8007556 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007540:	f043 0201 	orr.w	r2, r3, #1
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2203      	movs	r2, #3
 800754e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	e18c      	b.n	8007870 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	699b      	ldr	r3, [r3, #24]
 800755c:	f003 0308 	and.w	r3, r3, #8
 8007560:	2b08      	cmp	r3, #8
 8007562:	d0e3      	beq.n	800752c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	699a      	ldr	r2, [r3, #24]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f042 0201 	orr.w	r2, r2, #1
 8007572:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007574:	f7fc fa0a 	bl	800398c <HAL_GetTick>
 8007578:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800757a:	e014      	b.n	80075a6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800757c:	f7fc fa06 	bl	800398c <HAL_GetTick>
 8007580:	4602      	mov	r2, r0
 8007582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	2b0a      	cmp	r3, #10
 8007588:	d90d      	bls.n	80075a6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007590:	f043 0201 	orr.w	r2, r3, #1
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2203      	movs	r2, #3
 800759e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e164      	b.n	8007870 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	699b      	ldr	r3, [r3, #24]
 80075ac:	f003 0301 	and.w	r3, r3, #1
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d0e3      	beq.n	800757c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	699a      	ldr	r2, [r3, #24]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f042 0202 	orr.w	r2, r2, #2
 80075c2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	7c1b      	ldrb	r3, [r3, #16]
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d108      	bne.n	80075de <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	699a      	ldr	r2, [r3, #24]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075da:	619a      	str	r2, [r3, #24]
 80075dc:	e007      	b.n	80075ee <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	699a      	ldr	r2, [r3, #24]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075ec:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	7c5b      	ldrb	r3, [r3, #17]
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d108      	bne.n	8007608 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	699a      	ldr	r2, [r3, #24]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007604:	619a      	str	r2, [r3, #24]
 8007606:	e007      	b.n	8007618 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	699a      	ldr	r2, [r3, #24]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007616:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	7c9b      	ldrb	r3, [r3, #18]
 800761c:	2b01      	cmp	r3, #1
 800761e:	d108      	bne.n	8007632 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	699a      	ldr	r2, [r3, #24]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800762e:	619a      	str	r2, [r3, #24]
 8007630:	e007      	b.n	8007642 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	699a      	ldr	r2, [r3, #24]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007640:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	699b      	ldr	r3, [r3, #24]
 8007648:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	689a      	ldr	r2, [r3, #8]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	430a      	orrs	r2, r1
 8007656:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	699a      	ldr	r2, [r3, #24]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8007666:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	691a      	ldr	r2, [r3, #16]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f022 0210 	bic.w	r2, r2, #16
 8007676:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	2b01      	cmp	r3, #1
 800767e:	d108      	bne.n	8007692 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	699a      	ldr	r2, [r3, #24]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f042 0204 	orr.w	r2, r2, #4
 800768e:	619a      	str	r2, [r3, #24]
 8007690:	e030      	b.n	80076f4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d02c      	beq.n	80076f4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d020      	beq.n	80076e4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	699a      	ldr	r2, [r3, #24]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80076b0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	691a      	ldr	r2, [r3, #16]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f042 0210 	orr.w	r2, r2, #16
 80076c0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	2b03      	cmp	r3, #3
 80076c8:	d114      	bne.n	80076f4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	699a      	ldr	r2, [r3, #24]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f042 0220 	orr.w	r2, r2, #32
 80076d8:	619a      	str	r2, [r3, #24]
 80076da:	e00b      	b.n	80076f4 <HAL_FDCAN_Init+0x234>
 80076dc:	0801829c 	.word	0x0801829c
 80076e0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	699a      	ldr	r2, [r3, #24]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f042 0220 	orr.w	r2, r2, #32
 80076f2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	699b      	ldr	r3, [r3, #24]
 80076f8:	3b01      	subs	r3, #1
 80076fa:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	69db      	ldr	r3, [r3, #28]
 8007700:	3b01      	subs	r3, #1
 8007702:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007704:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a1b      	ldr	r3, [r3, #32]
 800770a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800770c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	695b      	ldr	r3, [r3, #20]
 8007714:	3b01      	subs	r3, #1
 8007716:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800771c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800771e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007728:	d115      	bne.n	8007756 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800772e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007734:	3b01      	subs	r3, #1
 8007736:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007738:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773e:	3b01      	subs	r3, #1
 8007740:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007742:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774a:	3b01      	subs	r3, #1
 800774c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007752:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007754:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00a      	beq.n	8007774 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	430a      	orrs	r2, r1
 8007770:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800777c:	4413      	add	r3, r2
 800777e:	2b00      	cmp	r3, #0
 8007780:	d011      	beq.n	80077a6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800778a:	f023 0107 	bic.w	r1, r3, #7
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	3360      	adds	r3, #96	; 0x60
 8007796:	443b      	add	r3, r7
 8007798:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	430a      	orrs	r2, r1
 80077a2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d011      	beq.n	80077d2 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80077b6:	f023 0107 	bic.w	r1, r3, #7
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	3360      	adds	r3, #96	; 0x60
 80077c2:	443b      	add	r3, r7
 80077c4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	430a      	orrs	r2, r1
 80077ce:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d012      	beq.n	8007800 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80077e2:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	3360      	adds	r3, #96	; 0x60
 80077ee:	443b      	add	r3, r7
 80077f0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80077f4:	011a      	lsls	r2, r3, #4
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	430a      	orrs	r2, r1
 80077fc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007804:	2b00      	cmp	r3, #0
 8007806:	d012      	beq.n	800782e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007810:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	3360      	adds	r3, #96	; 0x60
 800781c:	443b      	add	r3, r7
 800781e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007822:	021a      	lsls	r2, r3, #8
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	430a      	orrs	r2, r1
 800782a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a11      	ldr	r2, [pc, #68]	; (8007878 <HAL_FDCAN_Init+0x3b8>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d107      	bne.n	8007848 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	689a      	ldr	r2, [r3, #8]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	f022 0203 	bic.w	r2, r2, #3
 8007846:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 f80b 	bl	800787c <FDCAN_CalcultateRamBlockAddresses>
 8007866:	4603      	mov	r3, r0
 8007868:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 800786c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8007870:	4618      	mov	r0, r3
 8007872:	3760      	adds	r7, #96	; 0x60
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}
 8007878:	4000a000 	.word	0x4000a000

0800787c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800787c:	b480      	push	{r7}
 800787e:	b085      	sub	sp, #20
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007888:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007892:	4ba7      	ldr	r3, [pc, #668]	; (8007b30 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007894:	4013      	ands	r3, r2
 8007896:	68ba      	ldr	r2, [r7, #8]
 8007898:	0091      	lsls	r1, r2, #2
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	6812      	ldr	r2, [r2, #0]
 800789e:	430b      	orrs	r3, r1
 80078a0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078ac:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b4:	041a      	lsls	r2, r3, #16
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	430a      	orrs	r2, r1
 80078bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c4:	68ba      	ldr	r2, [r7, #8]
 80078c6:	4413      	add	r3, r2
 80078c8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80078d2:	4b97      	ldr	r3, [pc, #604]	; (8007b30 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80078d4:	4013      	ands	r3, r2
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	0091      	lsls	r1, r2, #2
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	6812      	ldr	r2, [r2, #0]
 80078de:	430b      	orrs	r3, r1
 80078e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078ec:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078f4:	041a      	lsls	r2, r3, #16
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	430a      	orrs	r2, r1
 80078fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007904:	005b      	lsls	r3, r3, #1
 8007906:	68ba      	ldr	r2, [r7, #8]
 8007908:	4413      	add	r3, r2
 800790a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007914:	4b86      	ldr	r3, [pc, #536]	; (8007b30 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007916:	4013      	ands	r3, r2
 8007918:	68ba      	ldr	r2, [r7, #8]
 800791a:	0091      	lsls	r1, r2, #2
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	6812      	ldr	r2, [r2, #0]
 8007920:	430b      	orrs	r3, r1
 8007922:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800792e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007936:	041a      	lsls	r2, r3, #16
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	430a      	orrs	r2, r1
 800793e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800794a:	fb02 f303 	mul.w	r3, r2, r3
 800794e:	68ba      	ldr	r2, [r7, #8]
 8007950:	4413      	add	r3, r2
 8007952:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800795c:	4b74      	ldr	r3, [pc, #464]	; (8007b30 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800795e:	4013      	ands	r3, r2
 8007960:	68ba      	ldr	r2, [r7, #8]
 8007962:	0091      	lsls	r1, r2, #2
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	6812      	ldr	r2, [r2, #0]
 8007968:	430b      	orrs	r3, r1
 800796a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007976:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800797e:	041a      	lsls	r2, r3, #16
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	430a      	orrs	r2, r1
 8007986:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007992:	fb02 f303 	mul.w	r3, r2, r3
 8007996:	68ba      	ldr	r2, [r7, #8]
 8007998:	4413      	add	r3, r2
 800799a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80079a4:	4b62      	ldr	r3, [pc, #392]	; (8007b30 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80079a6:	4013      	ands	r3, r2
 80079a8:	68ba      	ldr	r2, [r7, #8]
 80079aa:	0091      	lsls	r1, r2, #2
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	6812      	ldr	r2, [r2, #0]
 80079b0:	430b      	orrs	r3, r1
 80079b2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80079be:	fb02 f303 	mul.w	r3, r2, r3
 80079c2:	68ba      	ldr	r2, [r7, #8]
 80079c4:	4413      	add	r3, r2
 80079c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80079d0:	4b57      	ldr	r3, [pc, #348]	; (8007b30 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80079d2:	4013      	ands	r3, r2
 80079d4:	68ba      	ldr	r2, [r7, #8]
 80079d6:	0091      	lsls	r1, r2, #2
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	6812      	ldr	r2, [r2, #0]
 80079dc:	430b      	orrs	r3, r1
 80079de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80079ea:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079f2:	041a      	lsls	r2, r3, #16
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	430a      	orrs	r2, r1
 80079fa:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a02:	005b      	lsls	r3, r3, #1
 8007a04:	68ba      	ldr	r2, [r7, #8]
 8007a06:	4413      	add	r3, r2
 8007a08:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007a12:	4b47      	ldr	r3, [pc, #284]	; (8007b30 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a14:	4013      	ands	r3, r2
 8007a16:	68ba      	ldr	r2, [r7, #8]
 8007a18:	0091      	lsls	r1, r2, #2
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	6812      	ldr	r2, [r2, #0]
 8007a1e:	430b      	orrs	r3, r1
 8007a20:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007a2c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a34:	041a      	lsls	r2, r3, #16
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	430a      	orrs	r2, r1
 8007a3c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007a48:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a50:	061a      	lsls	r2, r3, #24
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	430a      	orrs	r2, r1
 8007a58:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a60:	4b34      	ldr	r3, [pc, #208]	; (8007b34 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007a62:	4413      	add	r3, r2
 8007a64:	009a      	lsls	r2, r3, #2
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	441a      	add	r2, r3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a82:	00db      	lsls	r3, r3, #3
 8007a84:	441a      	add	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a92:	6879      	ldr	r1, [r7, #4]
 8007a94:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007a96:	fb01 f303 	mul.w	r3, r1, r3
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	441a      	add	r2, r3
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aaa:	6879      	ldr	r1, [r7, #4]
 8007aac:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007aae:	fb01 f303 	mul.w	r3, r1, r3
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	441a      	add	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ac2:	6879      	ldr	r1, [r7, #4]
 8007ac4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007ac6:	fb01 f303 	mul.w	r3, r1, r3
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	441a      	add	r2, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ade:	00db      	lsls	r3, r3, #3
 8007ae0:	441a      	add	r2, r3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007af2:	6879      	ldr	r1, [r7, #4]
 8007af4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007af6:	fb01 f303 	mul.w	r3, r1, r3
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	441a      	add	r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b0e:	6879      	ldr	r1, [r7, #4]
 8007b10:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007b12:	fb01 f303 	mul.w	r3, r1, r3
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	441a      	add	r2, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b26:	4a04      	ldr	r2, [pc, #16]	; (8007b38 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d915      	bls.n	8007b58 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007b2c:	e006      	b.n	8007b3c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007b2e:	bf00      	nop
 8007b30:	ffff0003 	.word	0xffff0003
 8007b34:	10002b00 	.word	0x10002b00
 8007b38:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b42:	f043 0220 	orr.w	r2, r3, #32
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2203      	movs	r2, #3
 8007b50:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	e010      	b.n	8007b7a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b5c:	60fb      	str	r3, [r7, #12]
 8007b5e:	e005      	b.n	8007b6c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2200      	movs	r2, #0
 8007b64:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	3304      	adds	r3, #4
 8007b6a:	60fb      	str	r3, [r7, #12]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d3f3      	bcc.n	8007b60 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3714      	adds	r7, #20
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop

08007b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b089      	sub	sp, #36	; 0x24
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007b92:	2300      	movs	r3, #0
 8007b94:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007b96:	4b86      	ldr	r3, [pc, #536]	; (8007db0 <HAL_GPIO_Init+0x228>)
 8007b98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007b9a:	e18c      	b.n	8007eb6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	2101      	movs	r1, #1
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ba8:	4013      	ands	r3, r2
 8007baa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f000 817e 	beq.w	8007eb0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	f003 0303 	and.w	r3, r3, #3
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d005      	beq.n	8007bcc <HAL_GPIO_Init+0x44>
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	f003 0303 	and.w	r3, r3, #3
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	d130      	bne.n	8007c2e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	005b      	lsls	r3, r3, #1
 8007bd6:	2203      	movs	r2, #3
 8007bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bdc:	43db      	mvns	r3, r3
 8007bde:	69ba      	ldr	r2, [r7, #24]
 8007be0:	4013      	ands	r3, r2
 8007be2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	68da      	ldr	r2, [r3, #12]
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	005b      	lsls	r3, r3, #1
 8007bec:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf0:	69ba      	ldr	r2, [r7, #24]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	69ba      	ldr	r2, [r7, #24]
 8007bfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007c02:	2201      	movs	r2, #1
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	fa02 f303 	lsl.w	r3, r2, r3
 8007c0a:	43db      	mvns	r3, r3
 8007c0c:	69ba      	ldr	r2, [r7, #24]
 8007c0e:	4013      	ands	r3, r2
 8007c10:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	091b      	lsrs	r3, r3, #4
 8007c18:	f003 0201 	and.w	r2, r3, #1
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c22:	69ba      	ldr	r2, [r7, #24]
 8007c24:	4313      	orrs	r3, r2
 8007c26:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	69ba      	ldr	r2, [r7, #24]
 8007c2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	f003 0303 	and.w	r3, r3, #3
 8007c36:	2b03      	cmp	r3, #3
 8007c38:	d017      	beq.n	8007c6a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	005b      	lsls	r3, r3, #1
 8007c44:	2203      	movs	r2, #3
 8007c46:	fa02 f303 	lsl.w	r3, r2, r3
 8007c4a:	43db      	mvns	r3, r3
 8007c4c:	69ba      	ldr	r2, [r7, #24]
 8007c4e:	4013      	ands	r3, r2
 8007c50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	689a      	ldr	r2, [r3, #8]
 8007c56:	69fb      	ldr	r3, [r7, #28]
 8007c58:	005b      	lsls	r3, r3, #1
 8007c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c5e:	69ba      	ldr	r2, [r7, #24]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	69ba      	ldr	r2, [r7, #24]
 8007c68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	f003 0303 	and.w	r3, r3, #3
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	d123      	bne.n	8007cbe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	08da      	lsrs	r2, r3, #3
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	3208      	adds	r2, #8
 8007c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	f003 0307 	and.w	r3, r3, #7
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	220f      	movs	r2, #15
 8007c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c92:	43db      	mvns	r3, r3
 8007c94:	69ba      	ldr	r2, [r7, #24]
 8007c96:	4013      	ands	r3, r2
 8007c98:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	691a      	ldr	r2, [r3, #16]
 8007c9e:	69fb      	ldr	r3, [r7, #28]
 8007ca0:	f003 0307 	and.w	r3, r3, #7
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8007caa:	69ba      	ldr	r2, [r7, #24]
 8007cac:	4313      	orrs	r3, r2
 8007cae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	08da      	lsrs	r2, r3, #3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	3208      	adds	r2, #8
 8007cb8:	69b9      	ldr	r1, [r7, #24]
 8007cba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	005b      	lsls	r3, r3, #1
 8007cc8:	2203      	movs	r2, #3
 8007cca:	fa02 f303 	lsl.w	r3, r2, r3
 8007cce:	43db      	mvns	r3, r3
 8007cd0:	69ba      	ldr	r2, [r7, #24]
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	f003 0203 	and.w	r2, r3, #3
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	005b      	lsls	r3, r3, #1
 8007ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce6:	69ba      	ldr	r2, [r7, #24]
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	69ba      	ldr	r2, [r7, #24]
 8007cf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	f000 80d8 	beq.w	8007eb0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d00:	4b2c      	ldr	r3, [pc, #176]	; (8007db4 <HAL_GPIO_Init+0x22c>)
 8007d02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d06:	4a2b      	ldr	r2, [pc, #172]	; (8007db4 <HAL_GPIO_Init+0x22c>)
 8007d08:	f043 0302 	orr.w	r3, r3, #2
 8007d0c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007d10:	4b28      	ldr	r3, [pc, #160]	; (8007db4 <HAL_GPIO_Init+0x22c>)
 8007d12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d16:	f003 0302 	and.w	r3, r3, #2
 8007d1a:	60fb      	str	r3, [r7, #12]
 8007d1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007d1e:	4a26      	ldr	r2, [pc, #152]	; (8007db8 <HAL_GPIO_Init+0x230>)
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	089b      	lsrs	r3, r3, #2
 8007d24:	3302      	adds	r3, #2
 8007d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	f003 0303 	and.w	r3, r3, #3
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	220f      	movs	r2, #15
 8007d36:	fa02 f303 	lsl.w	r3, r2, r3
 8007d3a:	43db      	mvns	r3, r3
 8007d3c:	69ba      	ldr	r2, [r7, #24]
 8007d3e:	4013      	ands	r3, r2
 8007d40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4a1d      	ldr	r2, [pc, #116]	; (8007dbc <HAL_GPIO_Init+0x234>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d04a      	beq.n	8007de0 <HAL_GPIO_Init+0x258>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4a1c      	ldr	r2, [pc, #112]	; (8007dc0 <HAL_GPIO_Init+0x238>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d02b      	beq.n	8007daa <HAL_GPIO_Init+0x222>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a1b      	ldr	r2, [pc, #108]	; (8007dc4 <HAL_GPIO_Init+0x23c>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d025      	beq.n	8007da6 <HAL_GPIO_Init+0x21e>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a1a      	ldr	r2, [pc, #104]	; (8007dc8 <HAL_GPIO_Init+0x240>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d01f      	beq.n	8007da2 <HAL_GPIO_Init+0x21a>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a19      	ldr	r2, [pc, #100]	; (8007dcc <HAL_GPIO_Init+0x244>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d019      	beq.n	8007d9e <HAL_GPIO_Init+0x216>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4a18      	ldr	r2, [pc, #96]	; (8007dd0 <HAL_GPIO_Init+0x248>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d013      	beq.n	8007d9a <HAL_GPIO_Init+0x212>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a17      	ldr	r2, [pc, #92]	; (8007dd4 <HAL_GPIO_Init+0x24c>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d00d      	beq.n	8007d96 <HAL_GPIO_Init+0x20e>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4a16      	ldr	r2, [pc, #88]	; (8007dd8 <HAL_GPIO_Init+0x250>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d007      	beq.n	8007d92 <HAL_GPIO_Init+0x20a>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a15      	ldr	r2, [pc, #84]	; (8007ddc <HAL_GPIO_Init+0x254>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d101      	bne.n	8007d8e <HAL_GPIO_Init+0x206>
 8007d8a:	2309      	movs	r3, #9
 8007d8c:	e029      	b.n	8007de2 <HAL_GPIO_Init+0x25a>
 8007d8e:	230a      	movs	r3, #10
 8007d90:	e027      	b.n	8007de2 <HAL_GPIO_Init+0x25a>
 8007d92:	2307      	movs	r3, #7
 8007d94:	e025      	b.n	8007de2 <HAL_GPIO_Init+0x25a>
 8007d96:	2306      	movs	r3, #6
 8007d98:	e023      	b.n	8007de2 <HAL_GPIO_Init+0x25a>
 8007d9a:	2305      	movs	r3, #5
 8007d9c:	e021      	b.n	8007de2 <HAL_GPIO_Init+0x25a>
 8007d9e:	2304      	movs	r3, #4
 8007da0:	e01f      	b.n	8007de2 <HAL_GPIO_Init+0x25a>
 8007da2:	2303      	movs	r3, #3
 8007da4:	e01d      	b.n	8007de2 <HAL_GPIO_Init+0x25a>
 8007da6:	2302      	movs	r3, #2
 8007da8:	e01b      	b.n	8007de2 <HAL_GPIO_Init+0x25a>
 8007daa:	2301      	movs	r3, #1
 8007dac:	e019      	b.n	8007de2 <HAL_GPIO_Init+0x25a>
 8007dae:	bf00      	nop
 8007db0:	58000080 	.word	0x58000080
 8007db4:	58024400 	.word	0x58024400
 8007db8:	58000400 	.word	0x58000400
 8007dbc:	58020000 	.word	0x58020000
 8007dc0:	58020400 	.word	0x58020400
 8007dc4:	58020800 	.word	0x58020800
 8007dc8:	58020c00 	.word	0x58020c00
 8007dcc:	58021000 	.word	0x58021000
 8007dd0:	58021400 	.word	0x58021400
 8007dd4:	58021800 	.word	0x58021800
 8007dd8:	58021c00 	.word	0x58021c00
 8007ddc:	58022400 	.word	0x58022400
 8007de0:	2300      	movs	r3, #0
 8007de2:	69fa      	ldr	r2, [r7, #28]
 8007de4:	f002 0203 	and.w	r2, r2, #3
 8007de8:	0092      	lsls	r2, r2, #2
 8007dea:	4093      	lsls	r3, r2
 8007dec:	69ba      	ldr	r2, [r7, #24]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007df2:	4938      	ldr	r1, [pc, #224]	; (8007ed4 <HAL_GPIO_Init+0x34c>)
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	089b      	lsrs	r3, r3, #2
 8007df8:	3302      	adds	r3, #2
 8007dfa:	69ba      	ldr	r2, [r7, #24]
 8007dfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	43db      	mvns	r3, r3
 8007e0c:	69ba      	ldr	r2, [r7, #24]
 8007e0e:	4013      	ands	r3, r2
 8007e10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d003      	beq.n	8007e26 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007e1e:	69ba      	ldr	r2, [r7, #24]
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007e26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	43db      	mvns	r3, r3
 8007e3a:	69ba      	ldr	r2, [r7, #24]
 8007e3c:	4013      	ands	r3, r2
 8007e3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d003      	beq.n	8007e54 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007e4c:	69ba      	ldr	r2, [r7, #24]
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007e54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	43db      	mvns	r3, r3
 8007e66:	69ba      	ldr	r2, [r7, #24]
 8007e68:	4013      	ands	r3, r2
 8007e6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d003      	beq.n	8007e80 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007e78:	69ba      	ldr	r2, [r7, #24]
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	69ba      	ldr	r2, [r7, #24]
 8007e84:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	43db      	mvns	r3, r3
 8007e90:	69ba      	ldr	r2, [r7, #24]
 8007e92:	4013      	ands	r3, r2
 8007e94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d003      	beq.n	8007eaa <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007ea2:	69ba      	ldr	r2, [r7, #24]
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	69ba      	ldr	r2, [r7, #24]
 8007eae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f47f ae6b 	bne.w	8007b9c <HAL_GPIO_Init+0x14>
  }
}
 8007ec6:	bf00      	nop
 8007ec8:	bf00      	nop
 8007eca:	3724      	adds	r7, #36	; 0x24
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr
 8007ed4:	58000400 	.word	0x58000400

08007ed8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b085      	sub	sp, #20
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	691a      	ldr	r2, [r3, #16]
 8007ee8:	887b      	ldrh	r3, [r7, #2]
 8007eea:	4013      	ands	r3, r2
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d002      	beq.n	8007ef6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	73fb      	strb	r3, [r7, #15]
 8007ef4:	e001      	b.n	8007efa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3714      	adds	r7, #20
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	460b      	mov	r3, r1
 8007f12:	807b      	strh	r3, [r7, #2]
 8007f14:	4613      	mov	r3, r2
 8007f16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007f18:	787b      	ldrb	r3, [r7, #1]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d003      	beq.n	8007f26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007f1e:	887a      	ldrh	r2, [r7, #2]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007f24:	e003      	b.n	8007f2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007f26:	887b      	ldrh	r3, [r7, #2]
 8007f28:	041a      	lsls	r2, r3, #16
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	619a      	str	r2, [r3, #24]
}
 8007f2e:	bf00      	nop
 8007f30:	370c      	adds	r7, #12
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
	...

08007f3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d101      	bne.n	8007f4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e07f      	b.n	800804e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d106      	bne.n	8007f68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f7fa fe16 	bl	8002b94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2224      	movs	r2, #36	; 0x24
 8007f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f022 0201 	bic.w	r2, r2, #1
 8007f7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	685a      	ldr	r2, [r3, #4]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007f8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	689a      	ldr	r2, [r3, #8]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007f9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d107      	bne.n	8007fb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	689a      	ldr	r2, [r3, #8]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007fb2:	609a      	str	r2, [r3, #8]
 8007fb4:	e006      	b.n	8007fc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	689a      	ldr	r2, [r3, #8]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007fc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	2b02      	cmp	r3, #2
 8007fca:	d104      	bne.n	8007fd6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007fd4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	6859      	ldr	r1, [r3, #4]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	4b1d      	ldr	r3, [pc, #116]	; (8008058 <HAL_I2C_Init+0x11c>)
 8007fe2:	430b      	orrs	r3, r1
 8007fe4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	68da      	ldr	r2, [r3, #12]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007ff4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	691a      	ldr	r2, [r3, #16]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	695b      	ldr	r3, [r3, #20]
 8007ffe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	699b      	ldr	r3, [r3, #24]
 8008006:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	430a      	orrs	r2, r1
 800800e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	69d9      	ldr	r1, [r3, #28]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6a1a      	ldr	r2, [r3, #32]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	430a      	orrs	r2, r1
 800801e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f042 0201 	orr.w	r2, r2, #1
 800802e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2220      	movs	r2, #32
 800803a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	3708      	adds	r7, #8
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	02008000 	.word	0x02008000

0800805c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800806c:	b2db      	uxtb	r3, r3
 800806e:	2b20      	cmp	r3, #32
 8008070:	d138      	bne.n	80080e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008078:	2b01      	cmp	r3, #1
 800807a:	d101      	bne.n	8008080 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800807c:	2302      	movs	r3, #2
 800807e:	e032      	b.n	80080e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2224      	movs	r2, #36	; 0x24
 800808c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f022 0201 	bic.w	r2, r2, #1
 800809e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80080ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	6819      	ldr	r1, [r3, #0]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	683a      	ldr	r2, [r7, #0]
 80080bc:	430a      	orrs	r2, r1
 80080be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f042 0201 	orr.w	r2, r2, #1
 80080ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2220      	movs	r2, #32
 80080d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80080e0:	2300      	movs	r3, #0
 80080e2:	e000      	b.n	80080e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80080e4:	2302      	movs	r3, #2
  }
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	370c      	adds	r7, #12
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr

080080f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80080f2:	b480      	push	{r7}
 80080f4:	b085      	sub	sp, #20
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
 80080fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008102:	b2db      	uxtb	r3, r3
 8008104:	2b20      	cmp	r3, #32
 8008106:	d139      	bne.n	800817c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800810e:	2b01      	cmp	r3, #1
 8008110:	d101      	bne.n	8008116 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008112:	2302      	movs	r3, #2
 8008114:	e033      	b.n	800817e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2224      	movs	r2, #36	; 0x24
 8008122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f022 0201 	bic.w	r2, r2, #1
 8008134:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008144:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	021b      	lsls	r3, r3, #8
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	4313      	orrs	r3, r2
 800814e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	68fa      	ldr	r2, [r7, #12]
 8008156:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f042 0201 	orr.w	r2, r2, #1
 8008166:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2220      	movs	r2, #32
 800816c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008178:	2300      	movs	r3, #0
 800817a:	e000      	b.n	800817e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800817c:	2302      	movs	r3, #2
  }
}
 800817e:	4618      	mov	r0, r3
 8008180:	3714      	adds	r7, #20
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr

0800818a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800818a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800818c:	b08f      	sub	sp, #60	; 0x3c
 800818e:	af0a      	add	r7, sp, #40	; 0x28
 8008190:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d101      	bne.n	800819c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	e116      	b.n	80083ca <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d106      	bne.n	80081bc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f00e fb70 	bl	801689c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2203      	movs	r2, #3
 80081c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d102      	bne.n	80081d6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4618      	mov	r0, r3
 80081dc:	f00a fc9f 	bl	8012b1e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	603b      	str	r3, [r7, #0]
 80081e6:	687e      	ldr	r6, [r7, #4]
 80081e8:	466d      	mov	r5, sp
 80081ea:	f106 0410 	add.w	r4, r6, #16
 80081ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80081f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80081f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80081f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80081f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80081fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80081fe:	1d33      	adds	r3, r6, #4
 8008200:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008202:	6838      	ldr	r0, [r7, #0]
 8008204:	f00a fb6a 	bl	80128dc <USB_CoreInit>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d005      	beq.n	800821a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2202      	movs	r2, #2
 8008212:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	e0d7      	b.n	80083ca <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	2100      	movs	r1, #0
 8008220:	4618      	mov	r0, r3
 8008222:	f00a fc8d 	bl	8012b40 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008226:	2300      	movs	r3, #0
 8008228:	73fb      	strb	r3, [r7, #15]
 800822a:	e04a      	b.n	80082c2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800822c:	7bfa      	ldrb	r2, [r7, #15]
 800822e:	6879      	ldr	r1, [r7, #4]
 8008230:	4613      	mov	r3, r2
 8008232:	00db      	lsls	r3, r3, #3
 8008234:	4413      	add	r3, r2
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	440b      	add	r3, r1
 800823a:	333d      	adds	r3, #61	; 0x3d
 800823c:	2201      	movs	r2, #1
 800823e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008240:	7bfa      	ldrb	r2, [r7, #15]
 8008242:	6879      	ldr	r1, [r7, #4]
 8008244:	4613      	mov	r3, r2
 8008246:	00db      	lsls	r3, r3, #3
 8008248:	4413      	add	r3, r2
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	440b      	add	r3, r1
 800824e:	333c      	adds	r3, #60	; 0x3c
 8008250:	7bfa      	ldrb	r2, [r7, #15]
 8008252:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008254:	7bfa      	ldrb	r2, [r7, #15]
 8008256:	7bfb      	ldrb	r3, [r7, #15]
 8008258:	b298      	uxth	r0, r3
 800825a:	6879      	ldr	r1, [r7, #4]
 800825c:	4613      	mov	r3, r2
 800825e:	00db      	lsls	r3, r3, #3
 8008260:	4413      	add	r3, r2
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	440b      	add	r3, r1
 8008266:	3356      	adds	r3, #86	; 0x56
 8008268:	4602      	mov	r2, r0
 800826a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800826c:	7bfa      	ldrb	r2, [r7, #15]
 800826e:	6879      	ldr	r1, [r7, #4]
 8008270:	4613      	mov	r3, r2
 8008272:	00db      	lsls	r3, r3, #3
 8008274:	4413      	add	r3, r2
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	440b      	add	r3, r1
 800827a:	3340      	adds	r3, #64	; 0x40
 800827c:	2200      	movs	r2, #0
 800827e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008280:	7bfa      	ldrb	r2, [r7, #15]
 8008282:	6879      	ldr	r1, [r7, #4]
 8008284:	4613      	mov	r3, r2
 8008286:	00db      	lsls	r3, r3, #3
 8008288:	4413      	add	r3, r2
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	440b      	add	r3, r1
 800828e:	3344      	adds	r3, #68	; 0x44
 8008290:	2200      	movs	r2, #0
 8008292:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008294:	7bfa      	ldrb	r2, [r7, #15]
 8008296:	6879      	ldr	r1, [r7, #4]
 8008298:	4613      	mov	r3, r2
 800829a:	00db      	lsls	r3, r3, #3
 800829c:	4413      	add	r3, r2
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	440b      	add	r3, r1
 80082a2:	3348      	adds	r3, #72	; 0x48
 80082a4:	2200      	movs	r2, #0
 80082a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80082a8:	7bfa      	ldrb	r2, [r7, #15]
 80082aa:	6879      	ldr	r1, [r7, #4]
 80082ac:	4613      	mov	r3, r2
 80082ae:	00db      	lsls	r3, r3, #3
 80082b0:	4413      	add	r3, r2
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	440b      	add	r3, r1
 80082b6:	334c      	adds	r3, #76	; 0x4c
 80082b8:	2200      	movs	r2, #0
 80082ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80082bc:	7bfb      	ldrb	r3, [r7, #15]
 80082be:	3301      	adds	r3, #1
 80082c0:	73fb      	strb	r3, [r7, #15]
 80082c2:	7bfa      	ldrb	r2, [r7, #15]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d3af      	bcc.n	800822c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80082cc:	2300      	movs	r3, #0
 80082ce:	73fb      	strb	r3, [r7, #15]
 80082d0:	e044      	b.n	800835c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80082d2:	7bfa      	ldrb	r2, [r7, #15]
 80082d4:	6879      	ldr	r1, [r7, #4]
 80082d6:	4613      	mov	r3, r2
 80082d8:	00db      	lsls	r3, r3, #3
 80082da:	4413      	add	r3, r2
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	440b      	add	r3, r1
 80082e0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80082e4:	2200      	movs	r2, #0
 80082e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80082e8:	7bfa      	ldrb	r2, [r7, #15]
 80082ea:	6879      	ldr	r1, [r7, #4]
 80082ec:	4613      	mov	r3, r2
 80082ee:	00db      	lsls	r3, r3, #3
 80082f0:	4413      	add	r3, r2
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	440b      	add	r3, r1
 80082f6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80082fa:	7bfa      	ldrb	r2, [r7, #15]
 80082fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80082fe:	7bfa      	ldrb	r2, [r7, #15]
 8008300:	6879      	ldr	r1, [r7, #4]
 8008302:	4613      	mov	r3, r2
 8008304:	00db      	lsls	r3, r3, #3
 8008306:	4413      	add	r3, r2
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	440b      	add	r3, r1
 800830c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008310:	2200      	movs	r2, #0
 8008312:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008314:	7bfa      	ldrb	r2, [r7, #15]
 8008316:	6879      	ldr	r1, [r7, #4]
 8008318:	4613      	mov	r3, r2
 800831a:	00db      	lsls	r3, r3, #3
 800831c:	4413      	add	r3, r2
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	440b      	add	r3, r1
 8008322:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8008326:	2200      	movs	r2, #0
 8008328:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800832a:	7bfa      	ldrb	r2, [r7, #15]
 800832c:	6879      	ldr	r1, [r7, #4]
 800832e:	4613      	mov	r3, r2
 8008330:	00db      	lsls	r3, r3, #3
 8008332:	4413      	add	r3, r2
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	440b      	add	r3, r1
 8008338:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800833c:	2200      	movs	r2, #0
 800833e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008340:	7bfa      	ldrb	r2, [r7, #15]
 8008342:	6879      	ldr	r1, [r7, #4]
 8008344:	4613      	mov	r3, r2
 8008346:	00db      	lsls	r3, r3, #3
 8008348:	4413      	add	r3, r2
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	440b      	add	r3, r1
 800834e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008352:	2200      	movs	r2, #0
 8008354:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008356:	7bfb      	ldrb	r3, [r7, #15]
 8008358:	3301      	adds	r3, #1
 800835a:	73fb      	strb	r3, [r7, #15]
 800835c:	7bfa      	ldrb	r2, [r7, #15]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	429a      	cmp	r2, r3
 8008364:	d3b5      	bcc.n	80082d2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	603b      	str	r3, [r7, #0]
 800836c:	687e      	ldr	r6, [r7, #4]
 800836e:	466d      	mov	r5, sp
 8008370:	f106 0410 	add.w	r4, r6, #16
 8008374:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008376:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008378:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800837a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800837c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008380:	e885 0003 	stmia.w	r5, {r0, r1}
 8008384:	1d33      	adds	r3, r6, #4
 8008386:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008388:	6838      	ldr	r0, [r7, #0]
 800838a:	f00a fc25 	bl	8012bd8 <USB_DevInit>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d005      	beq.n	80083a0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2202      	movs	r2, #2
 8008398:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800839c:	2301      	movs	r3, #1
 800839e:	e014      	b.n	80083ca <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d102      	bne.n	80083be <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f001 f96f 	bl	800969c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4618      	mov	r0, r3
 80083c4:	f00b fc67 	bl	8013c96 <USB_DevDisconnect>

  return HAL_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3714      	adds	r7, #20
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080083d2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b084      	sub	sp, #16
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d101      	bne.n	80083ee <HAL_PCD_Start+0x1c>
 80083ea:	2302      	movs	r3, #2
 80083ec:	e022      	b.n	8008434 <HAL_PCD_Start+0x62>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2201      	movs	r2, #1
 80083f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d109      	bne.n	8008416 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8008406:	2b01      	cmp	r3, #1
 8008408:	d105      	bne.n	8008416 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4618      	mov	r0, r3
 800841c:	f00a fb6e 	bl	8012afc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4618      	mov	r0, r3
 8008426:	f00b fc15 	bl	8013c54 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008432:	2300      	movs	r3, #0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3710      	adds	r7, #16
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800843c:	b590      	push	{r4, r7, lr}
 800843e:	b08d      	sub	sp, #52	; 0x34
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800844a:	6a3b      	ldr	r3, [r7, #32]
 800844c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4618      	mov	r0, r3
 8008454:	f00b fcd3 	bl	8013dfe <USB_GetMode>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	f040 84b7 	bne.w	8008dce <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4618      	mov	r0, r3
 8008466:	f00b fc37 	bl	8013cd8 <USB_ReadInterrupts>
 800846a:	4603      	mov	r3, r0
 800846c:	2b00      	cmp	r3, #0
 800846e:	f000 84ad 	beq.w	8008dcc <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8008472:	69fb      	ldr	r3, [r7, #28]
 8008474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	0a1b      	lsrs	r3, r3, #8
 800847c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4618      	mov	r0, r3
 800848c:	f00b fc24 	bl	8013cd8 <USB_ReadInterrupts>
 8008490:	4603      	mov	r3, r0
 8008492:	f003 0302 	and.w	r3, r3, #2
 8008496:	2b02      	cmp	r3, #2
 8008498:	d107      	bne.n	80084aa <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	695a      	ldr	r2, [r3, #20]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f002 0202 	and.w	r2, r2, #2
 80084a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4618      	mov	r0, r3
 80084b0:	f00b fc12 	bl	8013cd8 <USB_ReadInterrupts>
 80084b4:	4603      	mov	r3, r0
 80084b6:	f003 0310 	and.w	r3, r3, #16
 80084ba:	2b10      	cmp	r3, #16
 80084bc:	d161      	bne.n	8008582 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	699a      	ldr	r2, [r3, #24]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f022 0210 	bic.w	r2, r2, #16
 80084cc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80084ce:	6a3b      	ldr	r3, [r7, #32]
 80084d0:	6a1b      	ldr	r3, [r3, #32]
 80084d2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	f003 020f 	and.w	r2, r3, #15
 80084da:	4613      	mov	r3, r2
 80084dc:	00db      	lsls	r3, r3, #3
 80084de:	4413      	add	r3, r2
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	4413      	add	r3, r2
 80084ea:	3304      	adds	r3, #4
 80084ec:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	0c5b      	lsrs	r3, r3, #17
 80084f2:	f003 030f 	and.w	r3, r3, #15
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	d124      	bne.n	8008544 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80084fa:	69ba      	ldr	r2, [r7, #24]
 80084fc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008500:	4013      	ands	r3, r2
 8008502:	2b00      	cmp	r3, #0
 8008504:	d035      	beq.n	8008572 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800850a:	69bb      	ldr	r3, [r7, #24]
 800850c:	091b      	lsrs	r3, r3, #4
 800850e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008510:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008514:	b29b      	uxth	r3, r3
 8008516:	461a      	mov	r2, r3
 8008518:	6a38      	ldr	r0, [r7, #32]
 800851a:	f00b fa49 	bl	80139b0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	68da      	ldr	r2, [r3, #12]
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	091b      	lsrs	r3, r3, #4
 8008526:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800852a:	441a      	add	r2, r3
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	695a      	ldr	r2, [r3, #20]
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	091b      	lsrs	r3, r3, #4
 8008538:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800853c:	441a      	add	r2, r3
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	615a      	str	r2, [r3, #20]
 8008542:	e016      	b.n	8008572 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008544:	69bb      	ldr	r3, [r7, #24]
 8008546:	0c5b      	lsrs	r3, r3, #17
 8008548:	f003 030f 	and.w	r3, r3, #15
 800854c:	2b06      	cmp	r3, #6
 800854e:	d110      	bne.n	8008572 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008556:	2208      	movs	r2, #8
 8008558:	4619      	mov	r1, r3
 800855a:	6a38      	ldr	r0, [r7, #32]
 800855c:	f00b fa28 	bl	80139b0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	695a      	ldr	r2, [r3, #20]
 8008564:	69bb      	ldr	r3, [r7, #24]
 8008566:	091b      	lsrs	r3, r3, #4
 8008568:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800856c:	441a      	add	r2, r3
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	699a      	ldr	r2, [r3, #24]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f042 0210 	orr.w	r2, r2, #16
 8008580:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4618      	mov	r0, r3
 8008588:	f00b fba6 	bl	8013cd8 <USB_ReadInterrupts>
 800858c:	4603      	mov	r3, r0
 800858e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008592:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008596:	f040 80a7 	bne.w	80086e8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800859a:	2300      	movs	r3, #0
 800859c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4618      	mov	r0, r3
 80085a4:	f00b fbab 	bl	8013cfe <USB_ReadDevAllOutEpInterrupt>
 80085a8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80085aa:	e099      	b.n	80086e0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80085ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ae:	f003 0301 	and.w	r3, r3, #1
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	f000 808e 	beq.w	80086d4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085be:	b2d2      	uxtb	r2, r2
 80085c0:	4611      	mov	r1, r2
 80085c2:	4618      	mov	r0, r3
 80085c4:	f00b fbcf 	bl	8013d66 <USB_ReadDevOutEPInterrupt>
 80085c8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	f003 0301 	and.w	r3, r3, #1
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00c      	beq.n	80085ee <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80085d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d6:	015a      	lsls	r2, r3, #5
 80085d8:	69fb      	ldr	r3, [r7, #28]
 80085da:	4413      	add	r3, r2
 80085dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085e0:	461a      	mov	r2, r3
 80085e2:	2301      	movs	r3, #1
 80085e4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80085e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 fed1 	bl	8009390 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	f003 0308 	and.w	r3, r3, #8
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00c      	beq.n	8008612 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80085f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fa:	015a      	lsls	r2, r3, #5
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	4413      	add	r3, r2
 8008600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008604:	461a      	mov	r2, r3
 8008606:	2308      	movs	r3, #8
 8008608:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800860a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 ffa7 	bl	8009560 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	f003 0310 	and.w	r3, r3, #16
 8008618:	2b00      	cmp	r3, #0
 800861a:	d008      	beq.n	800862e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800861c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861e:	015a      	lsls	r2, r3, #5
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	4413      	add	r3, r2
 8008624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008628:	461a      	mov	r2, r3
 800862a:	2310      	movs	r3, #16
 800862c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	f003 0302 	and.w	r3, r3, #2
 8008634:	2b00      	cmp	r3, #0
 8008636:	d030      	beq.n	800869a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008638:	6a3b      	ldr	r3, [r7, #32]
 800863a:	695b      	ldr	r3, [r3, #20]
 800863c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008640:	2b80      	cmp	r3, #128	; 0x80
 8008642:	d109      	bne.n	8008658 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008644:	69fb      	ldr	r3, [r7, #28]
 8008646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	69fa      	ldr	r2, [r7, #28]
 800864e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008652:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008656:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800865a:	4613      	mov	r3, r2
 800865c:	00db      	lsls	r3, r3, #3
 800865e:	4413      	add	r3, r2
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	4413      	add	r3, r2
 800866a:	3304      	adds	r3, #4
 800866c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	78db      	ldrb	r3, [r3, #3]
 8008672:	2b01      	cmp	r3, #1
 8008674:	d108      	bne.n	8008688 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	2200      	movs	r2, #0
 800867a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800867c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867e:	b2db      	uxtb	r3, r3
 8008680:	4619      	mov	r1, r3
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f00e fa02 	bl	8016a8c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868a:	015a      	lsls	r2, r3, #5
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	4413      	add	r3, r2
 8008690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008694:	461a      	mov	r2, r3
 8008696:	2302      	movs	r3, #2
 8008698:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	f003 0320 	and.w	r3, r3, #32
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d008      	beq.n	80086b6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80086a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a6:	015a      	lsls	r2, r3, #5
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	4413      	add	r3, r2
 80086ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086b0:	461a      	mov	r2, r3
 80086b2:	2320      	movs	r3, #32
 80086b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d009      	beq.n	80086d4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80086c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c2:	015a      	lsls	r2, r3, #5
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	4413      	add	r3, r2
 80086c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086cc:	461a      	mov	r2, r3
 80086ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80086d2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80086d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d6:	3301      	adds	r3, #1
 80086d8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80086da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086dc:	085b      	lsrs	r3, r3, #1
 80086de:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80086e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f47f af62 	bne.w	80085ac <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4618      	mov	r0, r3
 80086ee:	f00b faf3 	bl	8013cd8 <USB_ReadInterrupts>
 80086f2:	4603      	mov	r3, r0
 80086f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80086fc:	f040 80db 	bne.w	80088b6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4618      	mov	r0, r3
 8008706:	f00b fb14 	bl	8013d32 <USB_ReadDevAllInEpInterrupt>
 800870a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800870c:	2300      	movs	r3, #0
 800870e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008710:	e0cd      	b.n	80088ae <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008714:	f003 0301 	and.w	r3, r3, #1
 8008718:	2b00      	cmp	r3, #0
 800871a:	f000 80c2 	beq.w	80088a2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008724:	b2d2      	uxtb	r2, r2
 8008726:	4611      	mov	r1, r2
 8008728:	4618      	mov	r0, r3
 800872a:	f00b fb3a 	bl	8013da2 <USB_ReadDevInEPInterrupt>
 800872e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	f003 0301 	and.w	r3, r3, #1
 8008736:	2b00      	cmp	r3, #0
 8008738:	d057      	beq.n	80087ea <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800873a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873c:	f003 030f 	and.w	r3, r3, #15
 8008740:	2201      	movs	r2, #1
 8008742:	fa02 f303 	lsl.w	r3, r2, r3
 8008746:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008748:	69fb      	ldr	r3, [r7, #28]
 800874a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800874e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	43db      	mvns	r3, r3
 8008754:	69f9      	ldr	r1, [r7, #28]
 8008756:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800875a:	4013      	ands	r3, r2
 800875c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800875e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008760:	015a      	lsls	r2, r3, #5
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	4413      	add	r3, r2
 8008766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800876a:	461a      	mov	r2, r3
 800876c:	2301      	movs	r3, #1
 800876e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	2b01      	cmp	r3, #1
 8008776:	d132      	bne.n	80087de <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008778:	6879      	ldr	r1, [r7, #4]
 800877a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800877c:	4613      	mov	r3, r2
 800877e:	00db      	lsls	r3, r3, #3
 8008780:	4413      	add	r3, r2
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	440b      	add	r3, r1
 8008786:	3348      	adds	r3, #72	; 0x48
 8008788:	6819      	ldr	r1, [r3, #0]
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800878e:	4613      	mov	r3, r2
 8008790:	00db      	lsls	r3, r3, #3
 8008792:	4413      	add	r3, r2
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	4403      	add	r3, r0
 8008798:	3344      	adds	r3, #68	; 0x44
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4419      	add	r1, r3
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087a2:	4613      	mov	r3, r2
 80087a4:	00db      	lsls	r3, r3, #3
 80087a6:	4413      	add	r3, r2
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	4403      	add	r3, r0
 80087ac:	3348      	adds	r3, #72	; 0x48
 80087ae:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80087b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d113      	bne.n	80087de <HAL_PCD_IRQHandler+0x3a2>
 80087b6:	6879      	ldr	r1, [r7, #4]
 80087b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ba:	4613      	mov	r3, r2
 80087bc:	00db      	lsls	r3, r3, #3
 80087be:	4413      	add	r3, r2
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	440b      	add	r3, r1
 80087c4:	334c      	adds	r3, #76	; 0x4c
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d108      	bne.n	80087de <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6818      	ldr	r0, [r3, #0]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80087d6:	461a      	mov	r2, r3
 80087d8:	2101      	movs	r1, #1
 80087da:	f00b fb43 	bl	8013e64 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80087de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	4619      	mov	r1, r3
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f00e f8cc 	bl	8016982 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	f003 0308 	and.w	r3, r3, #8
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d008      	beq.n	8008806 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80087f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f6:	015a      	lsls	r2, r3, #5
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	4413      	add	r3, r2
 80087fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008800:	461a      	mov	r2, r3
 8008802:	2308      	movs	r3, #8
 8008804:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	f003 0310 	and.w	r3, r3, #16
 800880c:	2b00      	cmp	r3, #0
 800880e:	d008      	beq.n	8008822 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008812:	015a      	lsls	r2, r3, #5
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	4413      	add	r3, r2
 8008818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800881c:	461a      	mov	r2, r3
 800881e:	2310      	movs	r3, #16
 8008820:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008828:	2b00      	cmp	r3, #0
 800882a:	d008      	beq.n	800883e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800882c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882e:	015a      	lsls	r2, r3, #5
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	4413      	add	r3, r2
 8008834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008838:	461a      	mov	r2, r3
 800883a:	2340      	movs	r3, #64	; 0x40
 800883c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	f003 0302 	and.w	r3, r3, #2
 8008844:	2b00      	cmp	r3, #0
 8008846:	d023      	beq.n	8008890 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008848:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800884a:	6a38      	ldr	r0, [r7, #32]
 800884c:	f00a fb22 	bl	8012e94 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008852:	4613      	mov	r3, r2
 8008854:	00db      	lsls	r3, r3, #3
 8008856:	4413      	add	r3, r2
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	3338      	adds	r3, #56	; 0x38
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	4413      	add	r3, r2
 8008860:	3304      	adds	r3, #4
 8008862:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	78db      	ldrb	r3, [r3, #3]
 8008868:	2b01      	cmp	r3, #1
 800886a:	d108      	bne.n	800887e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	2200      	movs	r2, #0
 8008870:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008874:	b2db      	uxtb	r3, r3
 8008876:	4619      	mov	r1, r3
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f00e f919 	bl	8016ab0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800887e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008880:	015a      	lsls	r2, r3, #5
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	4413      	add	r3, r2
 8008886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800888a:	461a      	mov	r2, r3
 800888c:	2302      	movs	r3, #2
 800888e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008896:	2b00      	cmp	r3, #0
 8008898:	d003      	beq.n	80088a2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800889a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 fcea 	bl	8009276 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80088a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a4:	3301      	adds	r3, #1
 80088a6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80088a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088aa:	085b      	lsrs	r3, r3, #1
 80088ac:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80088ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	f47f af2e 	bne.w	8008712 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4618      	mov	r0, r3
 80088bc:	f00b fa0c 	bl	8013cd8 <USB_ReadInterrupts>
 80088c0:	4603      	mov	r3, r0
 80088c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088ca:	d122      	bne.n	8008912 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80088cc:	69fb      	ldr	r3, [r7, #28]
 80088ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	69fa      	ldr	r2, [r7, #28]
 80088d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088da:	f023 0301 	bic.w	r3, r3, #1
 80088de:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d108      	bne.n	80088fc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80088f2:	2100      	movs	r1, #0
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 fef5 	bl	80096e4 <HAL_PCDEx_LPM_Callback>
 80088fa:	e002      	b.n	8008902 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f00e f8b7 	bl	8016a70 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	695a      	ldr	r2, [r3, #20]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008910:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4618      	mov	r0, r3
 8008918:	f00b f9de 	bl	8013cd8 <USB_ReadInterrupts>
 800891c:	4603      	mov	r3, r0
 800891e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008922:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008926:	d112      	bne.n	800894e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	f003 0301 	and.w	r3, r3, #1
 8008934:	2b01      	cmp	r3, #1
 8008936:	d102      	bne.n	800893e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f00e f873 	bl	8016a24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	695a      	ldr	r2, [r3, #20]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800894c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4618      	mov	r0, r3
 8008954:	f00b f9c0 	bl	8013cd8 <USB_ReadInterrupts>
 8008958:	4603      	mov	r3, r0
 800895a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800895e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008962:	d121      	bne.n	80089a8 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	695a      	ldr	r2, [r3, #20]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008972:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800897a:	2b00      	cmp	r3, #0
 800897c:	d111      	bne.n	80089a2 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2201      	movs	r2, #1
 8008982:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800898c:	089b      	lsrs	r3, r3, #2
 800898e:	f003 020f 	and.w	r2, r3, #15
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008998:	2101      	movs	r1, #1
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 fea2 	bl	80096e4 <HAL_PCDEx_LPM_Callback>
 80089a0:	e002      	b.n	80089a8 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f00e f83e 	bl	8016a24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4618      	mov	r0, r3
 80089ae:	f00b f993 	bl	8013cd8 <USB_ReadInterrupts>
 80089b2:	4603      	mov	r3, r0
 80089b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80089b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089bc:	f040 80b7 	bne.w	8008b2e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	69fa      	ldr	r2, [r7, #28]
 80089ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089ce:	f023 0301 	bic.w	r3, r3, #1
 80089d2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	2110      	movs	r1, #16
 80089da:	4618      	mov	r0, r3
 80089dc:	f00a fa5a 	bl	8012e94 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80089e0:	2300      	movs	r3, #0
 80089e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089e4:	e046      	b.n	8008a74 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80089e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e8:	015a      	lsls	r2, r3, #5
 80089ea:	69fb      	ldr	r3, [r7, #28]
 80089ec:	4413      	add	r3, r2
 80089ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089f2:	461a      	mov	r2, r3
 80089f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80089f8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80089fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089fc:	015a      	lsls	r2, r3, #5
 80089fe:	69fb      	ldr	r3, [r7, #28]
 8008a00:	4413      	add	r3, r2
 8008a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a0a:	0151      	lsls	r1, r2, #5
 8008a0c:	69fa      	ldr	r2, [r7, #28]
 8008a0e:	440a      	add	r2, r1
 8008a10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a14:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008a18:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a1c:	015a      	lsls	r2, r3, #5
 8008a1e:	69fb      	ldr	r3, [r7, #28]
 8008a20:	4413      	add	r3, r2
 8008a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a26:	461a      	mov	r2, r3
 8008a28:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008a2c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a30:	015a      	lsls	r2, r3, #5
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	4413      	add	r3, r2
 8008a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a3e:	0151      	lsls	r1, r2, #5
 8008a40:	69fa      	ldr	r2, [r7, #28]
 8008a42:	440a      	add	r2, r1
 8008a44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a48:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008a4c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a50:	015a      	lsls	r2, r3, #5
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	4413      	add	r3, r2
 8008a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a5e:	0151      	lsls	r1, r2, #5
 8008a60:	69fa      	ldr	r2, [r7, #28]
 8008a62:	440a      	add	r2, r1
 8008a64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a68:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008a6c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a70:	3301      	adds	r3, #1
 8008a72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d3b3      	bcc.n	80089e6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008a7e:	69fb      	ldr	r3, [r7, #28]
 8008a80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a84:	69db      	ldr	r3, [r3, #28]
 8008a86:	69fa      	ldr	r2, [r7, #28]
 8008a88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a8c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008a90:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d016      	beq.n	8008ac8 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008aa4:	69fa      	ldr	r2, [r7, #28]
 8008aa6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008aaa:	f043 030b 	orr.w	r3, r3, #11
 8008aae:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aba:	69fa      	ldr	r2, [r7, #28]
 8008abc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ac0:	f043 030b 	orr.w	r3, r3, #11
 8008ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8008ac6:	e015      	b.n	8008af4 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ace:	695a      	ldr	r2, [r3, #20]
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	f242 032b 	movw	r3, #8235	; 0x202b
 8008adc:	4313      	orrs	r3, r2
 8008ade:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008ae0:	69fb      	ldr	r3, [r7, #28]
 8008ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	69fa      	ldr	r2, [r7, #28]
 8008aea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008aee:	f043 030b 	orr.w	r3, r3, #11
 8008af2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	69fa      	ldr	r2, [r7, #28]
 8008afe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b02:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008b06:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6818      	ldr	r0, [r3, #0]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008b18:	461a      	mov	r2, r3
 8008b1a:	f00b f9a3 	bl	8013e64 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	695a      	ldr	r2, [r3, #20]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008b2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4618      	mov	r0, r3
 8008b34:	f00b f8d0 	bl	8013cd8 <USB_ReadInterrupts>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b42:	d124      	bne.n	8008b8e <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f00b f967 	bl	8013e1c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4618      	mov	r0, r3
 8008b54:	f00a fa1b 	bl	8012f8e <USB_GetDevSpeed>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681c      	ldr	r4, [r3, #0]
 8008b64:	f001 fd88 	bl	800a678 <HAL_RCC_GetHCLKFreq>
 8008b68:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	461a      	mov	r2, r3
 8008b72:	4620      	mov	r0, r4
 8008b74:	f009 ff20 	bl	80129b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f00d ff2a 	bl	80169d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	695a      	ldr	r2, [r3, #20]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008b8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4618      	mov	r0, r3
 8008b94:	f00b f8a0 	bl	8013cd8 <USB_ReadInterrupts>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	f003 0308 	and.w	r3, r3, #8
 8008b9e:	2b08      	cmp	r3, #8
 8008ba0:	d10a      	bne.n	8008bb8 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f00d ff07 	bl	80169b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	695a      	ldr	r2, [r3, #20]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f002 0208 	and.w	r2, r2, #8
 8008bb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f00b f88b 	bl	8013cd8 <USB_ReadInterrupts>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bc8:	2b80      	cmp	r3, #128	; 0x80
 8008bca:	d122      	bne.n	8008c12 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008bcc:	6a3b      	ldr	r3, [r7, #32]
 8008bce:	699b      	ldr	r3, [r3, #24]
 8008bd0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008bd4:	6a3b      	ldr	r3, [r7, #32]
 8008bd6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008bd8:	2301      	movs	r3, #1
 8008bda:	627b      	str	r3, [r7, #36]	; 0x24
 8008bdc:	e014      	b.n	8008c08 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008bde:	6879      	ldr	r1, [r7, #4]
 8008be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008be2:	4613      	mov	r3, r2
 8008be4:	00db      	lsls	r3, r3, #3
 8008be6:	4413      	add	r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	440b      	add	r3, r1
 8008bec:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d105      	bne.n	8008c02 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 fb09 	bl	8009214 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c04:	3301      	adds	r3, #1
 8008c06:	627b      	str	r3, [r7, #36]	; 0x24
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d3e5      	bcc.n	8008bde <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4618      	mov	r0, r3
 8008c18:	f00b f85e 	bl	8013cd8 <USB_ReadInterrupts>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c26:	d13b      	bne.n	8008ca0 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008c28:	2301      	movs	r3, #1
 8008c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8008c2c:	e02b      	b.n	8008c86 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c30:	015a      	lsls	r2, r3, #5
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	4413      	add	r3, r2
 8008c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008c3e:	6879      	ldr	r1, [r7, #4]
 8008c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c42:	4613      	mov	r3, r2
 8008c44:	00db      	lsls	r3, r3, #3
 8008c46:	4413      	add	r3, r2
 8008c48:	009b      	lsls	r3, r3, #2
 8008c4a:	440b      	add	r3, r1
 8008c4c:	3340      	adds	r3, #64	; 0x40
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d115      	bne.n	8008c80 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008c54:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	da12      	bge.n	8008c80 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008c5a:	6879      	ldr	r1, [r7, #4]
 8008c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c5e:	4613      	mov	r3, r2
 8008c60:	00db      	lsls	r3, r3, #3
 8008c62:	4413      	add	r3, r2
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	440b      	add	r3, r1
 8008c68:	333f      	adds	r3, #63	; 0x3f
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	4619      	mov	r1, r3
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 faca 	bl	8009214 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c82:	3301      	adds	r3, #1
 8008c84:	627b      	str	r3, [r7, #36]	; 0x24
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d3ce      	bcc.n	8008c2e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	695a      	ldr	r2, [r3, #20]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008c9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f00b f817 	bl	8013cd8 <USB_ReadInterrupts>
 8008caa:	4603      	mov	r3, r0
 8008cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008cb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008cb4:	d155      	bne.n	8008d62 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8008cba:	e045      	b.n	8008d48 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbe:	015a      	lsls	r2, r3, #5
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	4413      	add	r3, r2
 8008cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008ccc:	6879      	ldr	r1, [r7, #4]
 8008cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cd0:	4613      	mov	r3, r2
 8008cd2:	00db      	lsls	r3, r3, #3
 8008cd4:	4413      	add	r3, r2
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	440b      	add	r3, r1
 8008cda:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d12e      	bne.n	8008d42 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008ce4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	da2b      	bge.n	8008d42 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008cf6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d121      	bne.n	8008d42 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008cfe:	6879      	ldr	r1, [r7, #4]
 8008d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d02:	4613      	mov	r3, r2
 8008d04:	00db      	lsls	r3, r3, #3
 8008d06:	4413      	add	r3, r2
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	440b      	add	r3, r1
 8008d0c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008d10:	2201      	movs	r2, #1
 8008d12:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008d14:	6a3b      	ldr	r3, [r7, #32]
 8008d16:	699b      	ldr	r3, [r3, #24]
 8008d18:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008d1c:	6a3b      	ldr	r3, [r7, #32]
 8008d1e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008d20:	6a3b      	ldr	r3, [r7, #32]
 8008d22:	695b      	ldr	r3, [r3, #20]
 8008d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d10a      	bne.n	8008d42 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008d2c:	69fb      	ldr	r3, [r7, #28]
 8008d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	69fa      	ldr	r2, [r7, #28]
 8008d36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008d3e:	6053      	str	r3, [r2, #4]
            break;
 8008d40:	e007      	b.n	8008d52 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d44:	3301      	adds	r3, #1
 8008d46:	627b      	str	r3, [r7, #36]	; 0x24
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d3b4      	bcc.n	8008cbc <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	695a      	ldr	r2, [r3, #20]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008d60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4618      	mov	r0, r3
 8008d68:	f00a ffb6 	bl	8013cd8 <USB_ReadInterrupts>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d76:	d10a      	bne.n	8008d8e <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f00d feab 	bl	8016ad4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	695a      	ldr	r2, [r3, #20]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008d8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4618      	mov	r0, r3
 8008d94:	f00a ffa0 	bl	8013cd8 <USB_ReadInterrupts>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	f003 0304 	and.w	r3, r3, #4
 8008d9e:	2b04      	cmp	r3, #4
 8008da0:	d115      	bne.n	8008dce <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	f003 0304 	and.w	r3, r3, #4
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d002      	beq.n	8008dba <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f00d fe9b 	bl	8016af0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	6859      	ldr	r1, [r3, #4]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	69ba      	ldr	r2, [r7, #24]
 8008dc6:	430a      	orrs	r2, r1
 8008dc8:	605a      	str	r2, [r3, #4]
 8008dca:	e000      	b.n	8008dce <HAL_PCD_IRQHandler+0x992>
      return;
 8008dcc:	bf00      	nop
    }
  }
}
 8008dce:	3734      	adds	r7, #52	; 0x34
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd90      	pop	{r4, r7, pc}

08008dd4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	460b      	mov	r3, r1
 8008dde:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d101      	bne.n	8008dee <HAL_PCD_SetAddress+0x1a>
 8008dea:	2302      	movs	r3, #2
 8008dec:	e013      	b.n	8008e16 <HAL_PCD_SetAddress+0x42>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	78fa      	ldrb	r2, [r7, #3]
 8008dfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	78fa      	ldrb	r2, [r7, #3]
 8008e04:	4611      	mov	r1, r2
 8008e06:	4618      	mov	r0, r3
 8008e08:	f00a fefe 	bl	8013c08 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008e14:	2300      	movs	r3, #0
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3708      	adds	r7, #8
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b084      	sub	sp, #16
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
 8008e26:	4608      	mov	r0, r1
 8008e28:	4611      	mov	r1, r2
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	70fb      	strb	r3, [r7, #3]
 8008e30:	460b      	mov	r3, r1
 8008e32:	803b      	strh	r3, [r7, #0]
 8008e34:	4613      	mov	r3, r2
 8008e36:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008e3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	da0f      	bge.n	8008e64 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e44:	78fb      	ldrb	r3, [r7, #3]
 8008e46:	f003 020f 	and.w	r2, r3, #15
 8008e4a:	4613      	mov	r3, r2
 8008e4c:	00db      	lsls	r3, r3, #3
 8008e4e:	4413      	add	r3, r2
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	3338      	adds	r3, #56	; 0x38
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	4413      	add	r3, r2
 8008e58:	3304      	adds	r3, #4
 8008e5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	705a      	strb	r2, [r3, #1]
 8008e62:	e00f      	b.n	8008e84 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008e64:	78fb      	ldrb	r3, [r7, #3]
 8008e66:	f003 020f 	and.w	r2, r3, #15
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	00db      	lsls	r3, r3, #3
 8008e6e:	4413      	add	r3, r2
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	4413      	add	r3, r2
 8008e7a:	3304      	adds	r3, #4
 8008e7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2200      	movs	r2, #0
 8008e82:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008e84:	78fb      	ldrb	r3, [r7, #3]
 8008e86:	f003 030f 	and.w	r3, r3, #15
 8008e8a:	b2da      	uxtb	r2, r3
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008e90:	883a      	ldrh	r2, [r7, #0]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	78ba      	ldrb	r2, [r7, #2]
 8008e9a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	785b      	ldrb	r3, [r3, #1]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d004      	beq.n	8008eae <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	b29a      	uxth	r2, r3
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008eae:	78bb      	ldrb	r3, [r7, #2]
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	d102      	bne.n	8008eba <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d101      	bne.n	8008ec8 <HAL_PCD_EP_Open+0xaa>
 8008ec4:	2302      	movs	r3, #2
 8008ec6:	e00e      	b.n	8008ee6 <HAL_PCD_EP_Open+0xc8>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	68f9      	ldr	r1, [r7, #12]
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f00a f87e 	bl	8012fd8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8008ee4:	7afb      	ldrb	r3, [r7, #11]
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3710      	adds	r7, #16
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008eee:	b580      	push	{r7, lr}
 8008ef0:	b084      	sub	sp, #16
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008efa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	da0f      	bge.n	8008f22 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f02:	78fb      	ldrb	r3, [r7, #3]
 8008f04:	f003 020f 	and.w	r2, r3, #15
 8008f08:	4613      	mov	r3, r2
 8008f0a:	00db      	lsls	r3, r3, #3
 8008f0c:	4413      	add	r3, r2
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	3338      	adds	r3, #56	; 0x38
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	4413      	add	r3, r2
 8008f16:	3304      	adds	r3, #4
 8008f18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	705a      	strb	r2, [r3, #1]
 8008f20:	e00f      	b.n	8008f42 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f22:	78fb      	ldrb	r3, [r7, #3]
 8008f24:	f003 020f 	and.w	r2, r3, #15
 8008f28:	4613      	mov	r3, r2
 8008f2a:	00db      	lsls	r3, r3, #3
 8008f2c:	4413      	add	r3, r2
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	4413      	add	r3, r2
 8008f38:	3304      	adds	r3, #4
 8008f3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008f42:	78fb      	ldrb	r3, [r7, #3]
 8008f44:	f003 030f 	and.w	r3, r3, #15
 8008f48:	b2da      	uxtb	r2, r3
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d101      	bne.n	8008f5c <HAL_PCD_EP_Close+0x6e>
 8008f58:	2302      	movs	r3, #2
 8008f5a:	e00e      	b.n	8008f7a <HAL_PCD_EP_Close+0x8c>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	68f9      	ldr	r1, [r7, #12]
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f00a f8bc 	bl	80130e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8008f78:	2300      	movs	r3, #0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3710      	adds	r7, #16
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b086      	sub	sp, #24
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	60f8      	str	r0, [r7, #12]
 8008f8a:	607a      	str	r2, [r7, #4]
 8008f8c:	603b      	str	r3, [r7, #0]
 8008f8e:	460b      	mov	r3, r1
 8008f90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f92:	7afb      	ldrb	r3, [r7, #11]
 8008f94:	f003 020f 	and.w	r2, r3, #15
 8008f98:	4613      	mov	r3, r2
 8008f9a:	00db      	lsls	r3, r3, #3
 8008f9c:	4413      	add	r3, r2
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008fa4:	68fa      	ldr	r2, [r7, #12]
 8008fa6:	4413      	add	r3, r2
 8008fa8:	3304      	adds	r3, #4
 8008faa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	683a      	ldr	r2, [r7, #0]
 8008fb6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008fc4:	7afb      	ldrb	r3, [r7, #11]
 8008fc6:	f003 030f 	and.w	r3, r3, #15
 8008fca:	b2da      	uxtb	r2, r3
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d102      	bne.n	8008fde <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6818      	ldr	r0, [r3, #0]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	461a      	mov	r2, r3
 8008fea:	6979      	ldr	r1, [r7, #20]
 8008fec:	f00a f958 	bl	80132a0 <USB_EPStartXfer>

  return HAL_OK;
 8008ff0:	2300      	movs	r3, #0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3718      	adds	r7, #24
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008ffa:	b480      	push	{r7}
 8008ffc:	b083      	sub	sp, #12
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
 8009002:	460b      	mov	r3, r1
 8009004:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009006:	78fb      	ldrb	r3, [r7, #3]
 8009008:	f003 020f 	and.w	r2, r3, #15
 800900c:	6879      	ldr	r1, [r7, #4]
 800900e:	4613      	mov	r3, r2
 8009010:	00db      	lsls	r3, r3, #3
 8009012:	4413      	add	r3, r2
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	440b      	add	r3, r1
 8009018:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800901c:	681b      	ldr	r3, [r3, #0]
}
 800901e:	4618      	mov	r0, r3
 8009020:	370c      	adds	r7, #12
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr

0800902a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b086      	sub	sp, #24
 800902e:	af00      	add	r7, sp, #0
 8009030:	60f8      	str	r0, [r7, #12]
 8009032:	607a      	str	r2, [r7, #4]
 8009034:	603b      	str	r3, [r7, #0]
 8009036:	460b      	mov	r3, r1
 8009038:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800903a:	7afb      	ldrb	r3, [r7, #11]
 800903c:	f003 020f 	and.w	r2, r3, #15
 8009040:	4613      	mov	r3, r2
 8009042:	00db      	lsls	r3, r3, #3
 8009044:	4413      	add	r3, r2
 8009046:	009b      	lsls	r3, r3, #2
 8009048:	3338      	adds	r3, #56	; 0x38
 800904a:	68fa      	ldr	r2, [r7, #12]
 800904c:	4413      	add	r3, r2
 800904e:	3304      	adds	r3, #4
 8009050:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	683a      	ldr	r2, [r7, #0]
 800905c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	2200      	movs	r2, #0
 8009062:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	2201      	movs	r2, #1
 8009068:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800906a:	7afb      	ldrb	r3, [r7, #11]
 800906c:	f003 030f 	and.w	r3, r3, #15
 8009070:	b2da      	uxtb	r2, r3
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	2b01      	cmp	r3, #1
 800907c:	d102      	bne.n	8009084 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6818      	ldr	r0, [r3, #0]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	b2db      	uxtb	r3, r3
 800908e:	461a      	mov	r2, r3
 8009090:	6979      	ldr	r1, [r7, #20]
 8009092:	f00a f905 	bl	80132a0 <USB_EPStartXfer>

  return HAL_OK;
 8009096:	2300      	movs	r3, #0
}
 8009098:	4618      	mov	r0, r3
 800909a:	3718      	adds	r7, #24
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	460b      	mov	r3, r1
 80090aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80090ac:	78fb      	ldrb	r3, [r7, #3]
 80090ae:	f003 020f 	and.w	r2, r3, #15
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d901      	bls.n	80090be <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	e050      	b.n	8009160 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80090be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	da0f      	bge.n	80090e6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80090c6:	78fb      	ldrb	r3, [r7, #3]
 80090c8:	f003 020f 	and.w	r2, r3, #15
 80090cc:	4613      	mov	r3, r2
 80090ce:	00db      	lsls	r3, r3, #3
 80090d0:	4413      	add	r3, r2
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	3338      	adds	r3, #56	; 0x38
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	4413      	add	r3, r2
 80090da:	3304      	adds	r3, #4
 80090dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2201      	movs	r2, #1
 80090e2:	705a      	strb	r2, [r3, #1]
 80090e4:	e00d      	b.n	8009102 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80090e6:	78fa      	ldrb	r2, [r7, #3]
 80090e8:	4613      	mov	r3, r2
 80090ea:	00db      	lsls	r3, r3, #3
 80090ec:	4413      	add	r3, r2
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	4413      	add	r3, r2
 80090f8:	3304      	adds	r3, #4
 80090fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2200      	movs	r2, #0
 8009100:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2201      	movs	r2, #1
 8009106:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009108:	78fb      	ldrb	r3, [r7, #3]
 800910a:	f003 030f 	and.w	r3, r3, #15
 800910e:	b2da      	uxtb	r2, r3
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800911a:	2b01      	cmp	r3, #1
 800911c:	d101      	bne.n	8009122 <HAL_PCD_EP_SetStall+0x82>
 800911e:	2302      	movs	r3, #2
 8009120:	e01e      	b.n	8009160 <HAL_PCD_EP_SetStall+0xc0>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2201      	movs	r2, #1
 8009126:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	68f9      	ldr	r1, [r7, #12]
 8009130:	4618      	mov	r0, r3
 8009132:	f00a fc95 	bl	8013a60 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009136:	78fb      	ldrb	r3, [r7, #3]
 8009138:	f003 030f 	and.w	r3, r3, #15
 800913c:	2b00      	cmp	r3, #0
 800913e:	d10a      	bne.n	8009156 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6818      	ldr	r0, [r3, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	b2d9      	uxtb	r1, r3
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009150:	461a      	mov	r2, r3
 8009152:	f00a fe87 	bl	8013e64 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800915e:	2300      	movs	r3, #0
}
 8009160:	4618      	mov	r0, r3
 8009162:	3710      	adds	r7, #16
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	460b      	mov	r3, r1
 8009172:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009174:	78fb      	ldrb	r3, [r7, #3]
 8009176:	f003 020f 	and.w	r2, r3, #15
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	429a      	cmp	r2, r3
 8009180:	d901      	bls.n	8009186 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009182:	2301      	movs	r3, #1
 8009184:	e042      	b.n	800920c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009186:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800918a:	2b00      	cmp	r3, #0
 800918c:	da0f      	bge.n	80091ae <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800918e:	78fb      	ldrb	r3, [r7, #3]
 8009190:	f003 020f 	and.w	r2, r3, #15
 8009194:	4613      	mov	r3, r2
 8009196:	00db      	lsls	r3, r3, #3
 8009198:	4413      	add	r3, r2
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	3338      	adds	r3, #56	; 0x38
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	4413      	add	r3, r2
 80091a2:	3304      	adds	r3, #4
 80091a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2201      	movs	r2, #1
 80091aa:	705a      	strb	r2, [r3, #1]
 80091ac:	e00f      	b.n	80091ce <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80091ae:	78fb      	ldrb	r3, [r7, #3]
 80091b0:	f003 020f 	and.w	r2, r3, #15
 80091b4:	4613      	mov	r3, r2
 80091b6:	00db      	lsls	r3, r3, #3
 80091b8:	4413      	add	r3, r2
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	4413      	add	r3, r2
 80091c4:	3304      	adds	r3, #4
 80091c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2200      	movs	r2, #0
 80091cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2200      	movs	r2, #0
 80091d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80091d4:	78fb      	ldrb	r3, [r7, #3]
 80091d6:	f003 030f 	and.w	r3, r3, #15
 80091da:	b2da      	uxtb	r2, r3
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d101      	bne.n	80091ee <HAL_PCD_EP_ClrStall+0x86>
 80091ea:	2302      	movs	r3, #2
 80091ec:	e00e      	b.n	800920c <HAL_PCD_EP_ClrStall+0xa4>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2201      	movs	r2, #1
 80091f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	68f9      	ldr	r1, [r7, #12]
 80091fc:	4618      	mov	r0, r3
 80091fe:	f00a fc9d 	bl	8013b3c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800920a:	2300      	movs	r3, #0
}
 800920c:	4618      	mov	r0, r3
 800920e:	3710      	adds	r7, #16
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	460b      	mov	r3, r1
 800921e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009220:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009224:	2b00      	cmp	r3, #0
 8009226:	da0c      	bge.n	8009242 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009228:	78fb      	ldrb	r3, [r7, #3]
 800922a:	f003 020f 	and.w	r2, r3, #15
 800922e:	4613      	mov	r3, r2
 8009230:	00db      	lsls	r3, r3, #3
 8009232:	4413      	add	r3, r2
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	3338      	adds	r3, #56	; 0x38
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	4413      	add	r3, r2
 800923c:	3304      	adds	r3, #4
 800923e:	60fb      	str	r3, [r7, #12]
 8009240:	e00c      	b.n	800925c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009242:	78fb      	ldrb	r3, [r7, #3]
 8009244:	f003 020f 	and.w	r2, r3, #15
 8009248:	4613      	mov	r3, r2
 800924a:	00db      	lsls	r3, r3, #3
 800924c:	4413      	add	r3, r2
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	4413      	add	r3, r2
 8009258:	3304      	adds	r3, #4
 800925a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	68f9      	ldr	r1, [r7, #12]
 8009262:	4618      	mov	r0, r3
 8009264:	f00a fabc 	bl	80137e0 <USB_EPStopXfer>
 8009268:	4603      	mov	r3, r0
 800926a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800926c:	7afb      	ldrb	r3, [r7, #11]
}
 800926e:	4618      	mov	r0, r3
 8009270:	3710      	adds	r7, #16
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}

08009276 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009276:	b580      	push	{r7, lr}
 8009278:	b08a      	sub	sp, #40	; 0x28
 800927a:	af02      	add	r7, sp, #8
 800927c:	6078      	str	r0, [r7, #4]
 800927e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800928a:	683a      	ldr	r2, [r7, #0]
 800928c:	4613      	mov	r3, r2
 800928e:	00db      	lsls	r3, r3, #3
 8009290:	4413      	add	r3, r2
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	3338      	adds	r3, #56	; 0x38
 8009296:	687a      	ldr	r2, [r7, #4]
 8009298:	4413      	add	r3, r2
 800929a:	3304      	adds	r3, #4
 800929c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	695a      	ldr	r2, [r3, #20]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	691b      	ldr	r3, [r3, #16]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d901      	bls.n	80092ae <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80092aa:	2301      	movs	r3, #1
 80092ac:	e06c      	b.n	8009388 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	691a      	ldr	r2, [r3, #16]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	695b      	ldr	r3, [r3, #20]
 80092b6:	1ad3      	subs	r3, r2, r3
 80092b8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	69fa      	ldr	r2, [r7, #28]
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d902      	bls.n	80092ca <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	3303      	adds	r3, #3
 80092ce:	089b      	lsrs	r3, r3, #2
 80092d0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80092d2:	e02b      	b.n	800932c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	691a      	ldr	r2, [r3, #16]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	695b      	ldr	r3, [r3, #20]
 80092dc:	1ad3      	subs	r3, r2, r3
 80092de:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	69fa      	ldr	r2, [r7, #28]
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d902      	bls.n	80092f0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80092f0:	69fb      	ldr	r3, [r7, #28]
 80092f2:	3303      	adds	r3, #3
 80092f4:	089b      	lsrs	r3, r3, #2
 80092f6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	68d9      	ldr	r1, [r3, #12]
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	b2da      	uxtb	r2, r3
 8009300:	69fb      	ldr	r3, [r7, #28]
 8009302:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009308:	b2db      	uxtb	r3, r3
 800930a:	9300      	str	r3, [sp, #0]
 800930c:	4603      	mov	r3, r0
 800930e:	6978      	ldr	r0, [r7, #20]
 8009310:	f00a fb10 	bl	8013934 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	68da      	ldr	r2, [r3, #12]
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	441a      	add	r2, r3
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	695a      	ldr	r2, [r3, #20]
 8009324:	69fb      	ldr	r3, [r7, #28]
 8009326:	441a      	add	r2, r3
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	015a      	lsls	r2, r3, #5
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	4413      	add	r3, r2
 8009334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009338:	699b      	ldr	r3, [r3, #24]
 800933a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800933c:	69ba      	ldr	r2, [r7, #24]
 800933e:	429a      	cmp	r2, r3
 8009340:	d809      	bhi.n	8009356 <PCD_WriteEmptyTxFifo+0xe0>
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	695a      	ldr	r2, [r3, #20]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800934a:	429a      	cmp	r2, r3
 800934c:	d203      	bcs.n	8009356 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	691b      	ldr	r3, [r3, #16]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d1be      	bne.n	80092d4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	691a      	ldr	r2, [r3, #16]
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	695b      	ldr	r3, [r3, #20]
 800935e:	429a      	cmp	r2, r3
 8009360:	d811      	bhi.n	8009386 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	f003 030f 	and.w	r3, r3, #15
 8009368:	2201      	movs	r2, #1
 800936a:	fa02 f303 	lsl.w	r3, r2, r3
 800936e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009376:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	43db      	mvns	r3, r3
 800937c:	6939      	ldr	r1, [r7, #16]
 800937e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009382:	4013      	ands	r3, r2
 8009384:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8009386:	2300      	movs	r3, #0
}
 8009388:	4618      	mov	r0, r3
 800938a:	3720      	adds	r7, #32
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b088      	sub	sp, #32
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093a0:	69fb      	ldr	r3, [r7, #28]
 80093a2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80093a4:	69fb      	ldr	r3, [r7, #28]
 80093a6:	333c      	adds	r3, #60	; 0x3c
 80093a8:	3304      	adds	r3, #4
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	015a      	lsls	r2, r3, #5
 80093b2:	69bb      	ldr	r3, [r7, #24]
 80093b4:	4413      	add	r3, r2
 80093b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d17b      	bne.n	80094be <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	f003 0308 	and.w	r3, r3, #8
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d015      	beq.n	80093fc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	4a61      	ldr	r2, [pc, #388]	; (8009558 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	f240 80b9 	bls.w	800954c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	f000 80b3 	beq.w	800954c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	015a      	lsls	r2, r3, #5
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	4413      	add	r3, r2
 80093ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093f2:	461a      	mov	r2, r3
 80093f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093f8:	6093      	str	r3, [r2, #8]
 80093fa:	e0a7      	b.n	800954c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	f003 0320 	and.w	r3, r3, #32
 8009402:	2b00      	cmp	r3, #0
 8009404:	d009      	beq.n	800941a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	015a      	lsls	r2, r3, #5
 800940a:	69bb      	ldr	r3, [r7, #24]
 800940c:	4413      	add	r3, r2
 800940e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009412:	461a      	mov	r2, r3
 8009414:	2320      	movs	r3, #32
 8009416:	6093      	str	r3, [r2, #8]
 8009418:	e098      	b.n	800954c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009420:	2b00      	cmp	r3, #0
 8009422:	f040 8093 	bne.w	800954c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	4a4b      	ldr	r2, [pc, #300]	; (8009558 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d90f      	bls.n	800944e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009434:	2b00      	cmp	r3, #0
 8009436:	d00a      	beq.n	800944e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	015a      	lsls	r2, r3, #5
 800943c:	69bb      	ldr	r3, [r7, #24]
 800943e:	4413      	add	r3, r2
 8009440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009444:	461a      	mov	r2, r3
 8009446:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800944a:	6093      	str	r3, [r2, #8]
 800944c:	e07e      	b.n	800954c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800944e:	683a      	ldr	r2, [r7, #0]
 8009450:	4613      	mov	r3, r2
 8009452:	00db      	lsls	r3, r3, #3
 8009454:	4413      	add	r3, r2
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800945c:	687a      	ldr	r2, [r7, #4]
 800945e:	4413      	add	r3, r2
 8009460:	3304      	adds	r3, #4
 8009462:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6a1a      	ldr	r2, [r3, #32]
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	0159      	lsls	r1, r3, #5
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	440b      	add	r3, r1
 8009470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009474:	691b      	ldr	r3, [r3, #16]
 8009476:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800947a:	1ad2      	subs	r2, r2, r3
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d114      	bne.n	80094b0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	691b      	ldr	r3, [r3, #16]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d109      	bne.n	80094a2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6818      	ldr	r0, [r3, #0]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009498:	461a      	mov	r2, r3
 800949a:	2101      	movs	r1, #1
 800949c:	f00a fce2 	bl	8013e64 <USB_EP0_OutStart>
 80094a0:	e006      	b.n	80094b0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	68da      	ldr	r2, [r3, #12]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	695b      	ldr	r3, [r3, #20]
 80094aa:	441a      	add	r2, r3
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	b2db      	uxtb	r3, r3
 80094b4:	4619      	mov	r1, r3
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f00d fa48 	bl	801694c <HAL_PCD_DataOutStageCallback>
 80094bc:	e046      	b.n	800954c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	4a26      	ldr	r2, [pc, #152]	; (800955c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d124      	bne.n	8009510 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d00a      	beq.n	80094e6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	015a      	lsls	r2, r3, #5
 80094d4:	69bb      	ldr	r3, [r7, #24]
 80094d6:	4413      	add	r3, r2
 80094d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094dc:	461a      	mov	r2, r3
 80094de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094e2:	6093      	str	r3, [r2, #8]
 80094e4:	e032      	b.n	800954c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	f003 0320 	and.w	r3, r3, #32
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d008      	beq.n	8009502 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	015a      	lsls	r2, r3, #5
 80094f4:	69bb      	ldr	r3, [r7, #24]
 80094f6:	4413      	add	r3, r2
 80094f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094fc:	461a      	mov	r2, r3
 80094fe:	2320      	movs	r3, #32
 8009500:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	b2db      	uxtb	r3, r3
 8009506:	4619      	mov	r1, r3
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f00d fa1f 	bl	801694c <HAL_PCD_DataOutStageCallback>
 800950e:	e01d      	b.n	800954c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d114      	bne.n	8009540 <PCD_EP_OutXfrComplete_int+0x1b0>
 8009516:	6879      	ldr	r1, [r7, #4]
 8009518:	683a      	ldr	r2, [r7, #0]
 800951a:	4613      	mov	r3, r2
 800951c:	00db      	lsls	r3, r3, #3
 800951e:	4413      	add	r3, r2
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	440b      	add	r3, r1
 8009524:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d108      	bne.n	8009540 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6818      	ldr	r0, [r3, #0]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009538:	461a      	mov	r2, r3
 800953a:	2100      	movs	r1, #0
 800953c:	f00a fc92 	bl	8013e64 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	b2db      	uxtb	r3, r3
 8009544:	4619      	mov	r1, r3
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f00d fa00 	bl	801694c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800954c:	2300      	movs	r3, #0
}
 800954e:	4618      	mov	r0, r3
 8009550:	3720      	adds	r7, #32
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	4f54300a 	.word	0x4f54300a
 800955c:	4f54310a 	.word	0x4f54310a

08009560 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b086      	sub	sp, #24
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	333c      	adds	r3, #60	; 0x3c
 8009578:	3304      	adds	r3, #4
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	015a      	lsls	r2, r3, #5
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	4413      	add	r3, r2
 8009586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	4a15      	ldr	r2, [pc, #84]	; (80095e8 <PCD_EP_OutSetupPacket_int+0x88>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d90e      	bls.n	80095b4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800959c:	2b00      	cmp	r3, #0
 800959e:	d009      	beq.n	80095b4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	015a      	lsls	r2, r3, #5
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	4413      	add	r3, r2
 80095a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ac:	461a      	mov	r2, r3
 80095ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095b2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f00d f9b7 	bl	8016928 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	4a0a      	ldr	r2, [pc, #40]	; (80095e8 <PCD_EP_OutSetupPacket_int+0x88>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d90c      	bls.n	80095dc <PCD_EP_OutSetupPacket_int+0x7c>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	68db      	ldr	r3, [r3, #12]
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d108      	bne.n	80095dc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6818      	ldr	r0, [r3, #0]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80095d4:	461a      	mov	r2, r3
 80095d6:	2101      	movs	r1, #1
 80095d8:	f00a fc44 	bl	8013e64 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80095dc:	2300      	movs	r3, #0
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3718      	adds	r7, #24
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	4f54300a 	.word	0x4f54300a

080095ec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b085      	sub	sp, #20
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	460b      	mov	r3, r1
 80095f6:	70fb      	strb	r3, [r7, #3]
 80095f8:	4613      	mov	r3, r2
 80095fa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009602:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009604:	78fb      	ldrb	r3, [r7, #3]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d107      	bne.n	800961a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800960a:	883b      	ldrh	r3, [r7, #0]
 800960c:	0419      	lsls	r1, r3, #16
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	68ba      	ldr	r2, [r7, #8]
 8009614:	430a      	orrs	r2, r1
 8009616:	629a      	str	r2, [r3, #40]	; 0x28
 8009618:	e028      	b.n	800966c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009620:	0c1b      	lsrs	r3, r3, #16
 8009622:	68ba      	ldr	r2, [r7, #8]
 8009624:	4413      	add	r3, r2
 8009626:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009628:	2300      	movs	r3, #0
 800962a:	73fb      	strb	r3, [r7, #15]
 800962c:	e00d      	b.n	800964a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	7bfb      	ldrb	r3, [r7, #15]
 8009634:	3340      	adds	r3, #64	; 0x40
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	4413      	add	r3, r2
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	0c1b      	lsrs	r3, r3, #16
 800963e:	68ba      	ldr	r2, [r7, #8]
 8009640:	4413      	add	r3, r2
 8009642:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009644:	7bfb      	ldrb	r3, [r7, #15]
 8009646:	3301      	adds	r3, #1
 8009648:	73fb      	strb	r3, [r7, #15]
 800964a:	7bfa      	ldrb	r2, [r7, #15]
 800964c:	78fb      	ldrb	r3, [r7, #3]
 800964e:	3b01      	subs	r3, #1
 8009650:	429a      	cmp	r2, r3
 8009652:	d3ec      	bcc.n	800962e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009654:	883b      	ldrh	r3, [r7, #0]
 8009656:	0418      	lsls	r0, r3, #16
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6819      	ldr	r1, [r3, #0]
 800965c:	78fb      	ldrb	r3, [r7, #3]
 800965e:	3b01      	subs	r3, #1
 8009660:	68ba      	ldr	r2, [r7, #8]
 8009662:	4302      	orrs	r2, r0
 8009664:	3340      	adds	r3, #64	; 0x40
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	440b      	add	r3, r1
 800966a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800966c:	2300      	movs	r3, #0
}
 800966e:	4618      	mov	r0, r3
 8009670:	3714      	adds	r7, #20
 8009672:	46bd      	mov	sp, r7
 8009674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009678:	4770      	bx	lr

0800967a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800967a:	b480      	push	{r7}
 800967c:	b083      	sub	sp, #12
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
 8009682:	460b      	mov	r3, r1
 8009684:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	887a      	ldrh	r2, [r7, #2]
 800968c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800968e:	2300      	movs	r3, #0
}
 8009690:	4618      	mov	r0, r3
 8009692:	370c      	adds	r7, #12
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr

0800969c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800969c:	b480      	push	{r7}
 800969e:	b085      	sub	sp, #20
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2201      	movs	r2, #1
 80096ae:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2200      	movs	r2, #0
 80096b6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	699b      	ldr	r3, [r3, #24]
 80096be:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80096ca:	4b05      	ldr	r3, [pc, #20]	; (80096e0 <HAL_PCDEx_ActivateLPM+0x44>)
 80096cc:	4313      	orrs	r3, r2
 80096ce:	68fa      	ldr	r2, [r7, #12]
 80096d0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80096d2:	2300      	movs	r3, #0
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3714      	adds	r7, #20
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr
 80096e0:	10000003 	.word	0x10000003

080096e4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	460b      	mov	r3, r1
 80096ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80096f0:	bf00      	nop
 80096f2:	370c      	adds	r7, #12
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr

080096fc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b084      	sub	sp, #16
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009704:	4b19      	ldr	r3, [pc, #100]	; (800976c <HAL_PWREx_ConfigSupply+0x70>)
 8009706:	68db      	ldr	r3, [r3, #12]
 8009708:	f003 0304 	and.w	r3, r3, #4
 800970c:	2b04      	cmp	r3, #4
 800970e:	d00a      	beq.n	8009726 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009710:	4b16      	ldr	r3, [pc, #88]	; (800976c <HAL_PWREx_ConfigSupply+0x70>)
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	f003 0307 	and.w	r3, r3, #7
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	429a      	cmp	r2, r3
 800971c:	d001      	beq.n	8009722 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800971e:	2301      	movs	r3, #1
 8009720:	e01f      	b.n	8009762 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009722:	2300      	movs	r3, #0
 8009724:	e01d      	b.n	8009762 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009726:	4b11      	ldr	r3, [pc, #68]	; (800976c <HAL_PWREx_ConfigSupply+0x70>)
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	f023 0207 	bic.w	r2, r3, #7
 800972e:	490f      	ldr	r1, [pc, #60]	; (800976c <HAL_PWREx_ConfigSupply+0x70>)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	4313      	orrs	r3, r2
 8009734:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009736:	f7fa f929 	bl	800398c <HAL_GetTick>
 800973a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800973c:	e009      	b.n	8009752 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800973e:	f7fa f925 	bl	800398c <HAL_GetTick>
 8009742:	4602      	mov	r2, r0
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	1ad3      	subs	r3, r2, r3
 8009748:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800974c:	d901      	bls.n	8009752 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	e007      	b.n	8009762 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009752:	4b06      	ldr	r3, [pc, #24]	; (800976c <HAL_PWREx_ConfigSupply+0x70>)
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800975a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800975e:	d1ee      	bne.n	800973e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009760:	2300      	movs	r3, #0
}
 8009762:	4618      	mov	r0, r3
 8009764:	3710      	adds	r7, #16
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	58024800 	.word	0x58024800

08009770 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009770:	b480      	push	{r7}
 8009772:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8009774:	4b05      	ldr	r3, [pc, #20]	; (800978c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009776:	68db      	ldr	r3, [r3, #12]
 8009778:	4a04      	ldr	r2, [pc, #16]	; (800978c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800977a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800977e:	60d3      	str	r3, [r2, #12]
}
 8009780:	bf00      	nop
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop
 800978c:	58024800 	.word	0x58024800

08009790 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b08c      	sub	sp, #48	; 0x30
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d101      	bne.n	80097a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800979e:	2301      	movs	r3, #1
 80097a0:	e3c8      	b.n	8009f34 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f003 0301 	and.w	r3, r3, #1
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	f000 8087 	beq.w	80098be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80097b0:	4b88      	ldr	r3, [pc, #544]	; (80099d4 <HAL_RCC_OscConfig+0x244>)
 80097b2:	691b      	ldr	r3, [r3, #16]
 80097b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80097b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80097ba:	4b86      	ldr	r3, [pc, #536]	; (80099d4 <HAL_RCC_OscConfig+0x244>)
 80097bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097be:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80097c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c2:	2b10      	cmp	r3, #16
 80097c4:	d007      	beq.n	80097d6 <HAL_RCC_OscConfig+0x46>
 80097c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c8:	2b18      	cmp	r3, #24
 80097ca:	d110      	bne.n	80097ee <HAL_RCC_OscConfig+0x5e>
 80097cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ce:	f003 0303 	and.w	r3, r3, #3
 80097d2:	2b02      	cmp	r3, #2
 80097d4:	d10b      	bne.n	80097ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80097d6:	4b7f      	ldr	r3, [pc, #508]	; (80099d4 <HAL_RCC_OscConfig+0x244>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d06c      	beq.n	80098bc <HAL_RCC_OscConfig+0x12c>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d168      	bne.n	80098bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80097ea:	2301      	movs	r3, #1
 80097ec:	e3a2      	b.n	8009f34 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097f6:	d106      	bne.n	8009806 <HAL_RCC_OscConfig+0x76>
 80097f8:	4b76      	ldr	r3, [pc, #472]	; (80099d4 <HAL_RCC_OscConfig+0x244>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4a75      	ldr	r2, [pc, #468]	; (80099d4 <HAL_RCC_OscConfig+0x244>)
 80097fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009802:	6013      	str	r3, [r2, #0]
 8009804:	e02e      	b.n	8009864 <HAL_RCC_OscConfig+0xd4>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d10c      	bne.n	8009828 <HAL_RCC_OscConfig+0x98>
 800980e:	4b71      	ldr	r3, [pc, #452]	; (80099d4 <HAL_RCC_OscConfig+0x244>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a70      	ldr	r2, [pc, #448]	; (80099d4 <HAL_RCC_OscConfig+0x244>)
 8009814:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009818:	6013      	str	r3, [r2, #0]
 800981a:	4b6e      	ldr	r3, [pc, #440]	; (80099d4 <HAL_RCC_OscConfig+0x244>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4a6d      	ldr	r2, [pc, #436]	; (80099d4 <HAL_RCC_OscConfig+0x244>)
 8009820:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009824:	6013      	str	r3, [r2, #0]
 8009826:	e01d      	b.n	8009864 <HAL_RCC_OscConfig+0xd4>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009830:	d10c      	bne.n	800984c <HAL_RCC_OscConfig+0xbc>
 8009832:	4b68      	ldr	r3, [pc, #416]	; (80099d4 <HAL_RCC_OscConfig+0x244>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4a67      	ldr	r2, [pc, #412]	; (80099d4 <HAL_RCC_OscConfig+0x244>)
 8009838:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800983c:	6013      	str	r3, [r2, #0]
 800983e:	4b65      	ldr	r3, [pc, #404]	; (80099d4 <HAL_RCC_OscConfig+0x244>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a64      	ldr	r2, [pc, #400]	; (80099d4 <HAL_RCC_OscConfig+0x244>)
 8009844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009848:	6013      	str	r3, [r2, #0]
 800984a:	e00b      	b.n	8009864 <HAL_RCC_OscConfig+0xd4>
 800984c:	4b61      	ldr	r3, [pc, #388]	; (80099d4 <HAL_RCC_OscConfig+0x244>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a60      	ldr	r2, [pc, #384]	; (80099d4 <HAL_RCC_OscConfig+0x244>)
 8009852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009856:	6013      	str	r3, [r2, #0]
 8009858:	4b5e      	ldr	r3, [pc, #376]	; (80099d4 <HAL_RCC_OscConfig+0x244>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a5d      	ldr	r2, [pc, #372]	; (80099d4 <HAL_RCC_OscConfig+0x244>)
 800985e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009862:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d013      	beq.n	8009894 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800986c:	f7fa f88e 	bl	800398c <HAL_GetTick>
 8009870:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009872:	e008      	b.n	8009886 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009874:	f7fa f88a 	bl	800398c <HAL_GetTick>
 8009878:	4602      	mov	r2, r0
 800987a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987c:	1ad3      	subs	r3, r2, r3
 800987e:	2b64      	cmp	r3, #100	; 0x64
 8009880:	d901      	bls.n	8009886 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009882:	2303      	movs	r3, #3
 8009884:	e356      	b.n	8009f34 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009886:	4b53      	ldr	r3, [pc, #332]	; (80099d4 <HAL_RCC_OscConfig+0x244>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800988e:	2b00      	cmp	r3, #0
 8009890:	d0f0      	beq.n	8009874 <HAL_RCC_OscConfig+0xe4>
 8009892:	e014      	b.n	80098be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009894:	f7fa f87a 	bl	800398c <HAL_GetTick>
 8009898:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800989a:	e008      	b.n	80098ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800989c:	f7fa f876 	bl	800398c <HAL_GetTick>
 80098a0:	4602      	mov	r2, r0
 80098a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a4:	1ad3      	subs	r3, r2, r3
 80098a6:	2b64      	cmp	r3, #100	; 0x64
 80098a8:	d901      	bls.n	80098ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80098aa:	2303      	movs	r3, #3
 80098ac:	e342      	b.n	8009f34 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80098ae:	4b49      	ldr	r3, [pc, #292]	; (80099d4 <HAL_RCC_OscConfig+0x244>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d1f0      	bne.n	800989c <HAL_RCC_OscConfig+0x10c>
 80098ba:	e000      	b.n	80098be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f003 0302 	and.w	r3, r3, #2
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	f000 808c 	beq.w	80099e4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80098cc:	4b41      	ldr	r3, [pc, #260]	; (80099d4 <HAL_RCC_OscConfig+0x244>)
 80098ce:	691b      	ldr	r3, [r3, #16]
 80098d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098d4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80098d6:	4b3f      	ldr	r3, [pc, #252]	; (80099d4 <HAL_RCC_OscConfig+0x244>)
 80098d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098da:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80098dc:	6a3b      	ldr	r3, [r7, #32]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d007      	beq.n	80098f2 <HAL_RCC_OscConfig+0x162>
 80098e2:	6a3b      	ldr	r3, [r7, #32]
 80098e4:	2b18      	cmp	r3, #24
 80098e6:	d137      	bne.n	8009958 <HAL_RCC_OscConfig+0x1c8>
 80098e8:	69fb      	ldr	r3, [r7, #28]
 80098ea:	f003 0303 	and.w	r3, r3, #3
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d132      	bne.n	8009958 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80098f2:	4b38      	ldr	r3, [pc, #224]	; (80099d4 <HAL_RCC_OscConfig+0x244>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f003 0304 	and.w	r3, r3, #4
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d005      	beq.n	800990a <HAL_RCC_OscConfig+0x17a>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	68db      	ldr	r3, [r3, #12]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d101      	bne.n	800990a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009906:	2301      	movs	r3, #1
 8009908:	e314      	b.n	8009f34 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800990a:	4b32      	ldr	r3, [pc, #200]	; (80099d4 <HAL_RCC_OscConfig+0x244>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f023 0219 	bic.w	r2, r3, #25
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	68db      	ldr	r3, [r3, #12]
 8009916:	492f      	ldr	r1, [pc, #188]	; (80099d4 <HAL_RCC_OscConfig+0x244>)
 8009918:	4313      	orrs	r3, r2
 800991a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800991c:	f7fa f836 	bl	800398c <HAL_GetTick>
 8009920:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009922:	e008      	b.n	8009936 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009924:	f7fa f832 	bl	800398c <HAL_GetTick>
 8009928:	4602      	mov	r2, r0
 800992a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992c:	1ad3      	subs	r3, r2, r3
 800992e:	2b02      	cmp	r3, #2
 8009930:	d901      	bls.n	8009936 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009932:	2303      	movs	r3, #3
 8009934:	e2fe      	b.n	8009f34 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009936:	4b27      	ldr	r3, [pc, #156]	; (80099d4 <HAL_RCC_OscConfig+0x244>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f003 0304 	and.w	r3, r3, #4
 800993e:	2b00      	cmp	r3, #0
 8009940:	d0f0      	beq.n	8009924 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009942:	4b24      	ldr	r3, [pc, #144]	; (80099d4 <HAL_RCC_OscConfig+0x244>)
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	691b      	ldr	r3, [r3, #16]
 800994e:	061b      	lsls	r3, r3, #24
 8009950:	4920      	ldr	r1, [pc, #128]	; (80099d4 <HAL_RCC_OscConfig+0x244>)
 8009952:	4313      	orrs	r3, r2
 8009954:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009956:	e045      	b.n	80099e4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	68db      	ldr	r3, [r3, #12]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d026      	beq.n	80099ae <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009960:	4b1c      	ldr	r3, [pc, #112]	; (80099d4 <HAL_RCC_OscConfig+0x244>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f023 0219 	bic.w	r2, r3, #25
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	68db      	ldr	r3, [r3, #12]
 800996c:	4919      	ldr	r1, [pc, #100]	; (80099d4 <HAL_RCC_OscConfig+0x244>)
 800996e:	4313      	orrs	r3, r2
 8009970:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009972:	f7fa f80b 	bl	800398c <HAL_GetTick>
 8009976:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009978:	e008      	b.n	800998c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800997a:	f7fa f807 	bl	800398c <HAL_GetTick>
 800997e:	4602      	mov	r2, r0
 8009980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009982:	1ad3      	subs	r3, r2, r3
 8009984:	2b02      	cmp	r3, #2
 8009986:	d901      	bls.n	800998c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009988:	2303      	movs	r3, #3
 800998a:	e2d3      	b.n	8009f34 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800998c:	4b11      	ldr	r3, [pc, #68]	; (80099d4 <HAL_RCC_OscConfig+0x244>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f003 0304 	and.w	r3, r3, #4
 8009994:	2b00      	cmp	r3, #0
 8009996:	d0f0      	beq.n	800997a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009998:	4b0e      	ldr	r3, [pc, #56]	; (80099d4 <HAL_RCC_OscConfig+0x244>)
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	691b      	ldr	r3, [r3, #16]
 80099a4:	061b      	lsls	r3, r3, #24
 80099a6:	490b      	ldr	r1, [pc, #44]	; (80099d4 <HAL_RCC_OscConfig+0x244>)
 80099a8:	4313      	orrs	r3, r2
 80099aa:	604b      	str	r3, [r1, #4]
 80099ac:	e01a      	b.n	80099e4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80099ae:	4b09      	ldr	r3, [pc, #36]	; (80099d4 <HAL_RCC_OscConfig+0x244>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4a08      	ldr	r2, [pc, #32]	; (80099d4 <HAL_RCC_OscConfig+0x244>)
 80099b4:	f023 0301 	bic.w	r3, r3, #1
 80099b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099ba:	f7f9 ffe7 	bl	800398c <HAL_GetTick>
 80099be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80099c0:	e00a      	b.n	80099d8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80099c2:	f7f9 ffe3 	bl	800398c <HAL_GetTick>
 80099c6:	4602      	mov	r2, r0
 80099c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ca:	1ad3      	subs	r3, r2, r3
 80099cc:	2b02      	cmp	r3, #2
 80099ce:	d903      	bls.n	80099d8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80099d0:	2303      	movs	r3, #3
 80099d2:	e2af      	b.n	8009f34 <HAL_RCC_OscConfig+0x7a4>
 80099d4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80099d8:	4b96      	ldr	r3, [pc, #600]	; (8009c34 <HAL_RCC_OscConfig+0x4a4>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f003 0304 	and.w	r3, r3, #4
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d1ee      	bne.n	80099c2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f003 0310 	and.w	r3, r3, #16
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d06a      	beq.n	8009ac6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099f0:	4b90      	ldr	r3, [pc, #576]	; (8009c34 <HAL_RCC_OscConfig+0x4a4>)
 80099f2:	691b      	ldr	r3, [r3, #16]
 80099f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099f8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80099fa:	4b8e      	ldr	r3, [pc, #568]	; (8009c34 <HAL_RCC_OscConfig+0x4a4>)
 80099fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099fe:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009a00:	69bb      	ldr	r3, [r7, #24]
 8009a02:	2b08      	cmp	r3, #8
 8009a04:	d007      	beq.n	8009a16 <HAL_RCC_OscConfig+0x286>
 8009a06:	69bb      	ldr	r3, [r7, #24]
 8009a08:	2b18      	cmp	r3, #24
 8009a0a:	d11b      	bne.n	8009a44 <HAL_RCC_OscConfig+0x2b4>
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	f003 0303 	and.w	r3, r3, #3
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d116      	bne.n	8009a44 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a16:	4b87      	ldr	r3, [pc, #540]	; (8009c34 <HAL_RCC_OscConfig+0x4a4>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d005      	beq.n	8009a2e <HAL_RCC_OscConfig+0x29e>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	69db      	ldr	r3, [r3, #28]
 8009a26:	2b80      	cmp	r3, #128	; 0x80
 8009a28:	d001      	beq.n	8009a2e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	e282      	b.n	8009f34 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a2e:	4b81      	ldr	r3, [pc, #516]	; (8009c34 <HAL_RCC_OscConfig+0x4a4>)
 8009a30:	68db      	ldr	r3, [r3, #12]
 8009a32:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6a1b      	ldr	r3, [r3, #32]
 8009a3a:	061b      	lsls	r3, r3, #24
 8009a3c:	497d      	ldr	r1, [pc, #500]	; (8009c34 <HAL_RCC_OscConfig+0x4a4>)
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a42:	e040      	b.n	8009ac6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	69db      	ldr	r3, [r3, #28]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d023      	beq.n	8009a94 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009a4c:	4b79      	ldr	r3, [pc, #484]	; (8009c34 <HAL_RCC_OscConfig+0x4a4>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a78      	ldr	r2, [pc, #480]	; (8009c34 <HAL_RCC_OscConfig+0x4a4>)
 8009a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a58:	f7f9 ff98 	bl	800398c <HAL_GetTick>
 8009a5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009a5e:	e008      	b.n	8009a72 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009a60:	f7f9 ff94 	bl	800398c <HAL_GetTick>
 8009a64:	4602      	mov	r2, r0
 8009a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a68:	1ad3      	subs	r3, r2, r3
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	d901      	bls.n	8009a72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009a6e:	2303      	movs	r3, #3
 8009a70:	e260      	b.n	8009f34 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009a72:	4b70      	ldr	r3, [pc, #448]	; (8009c34 <HAL_RCC_OscConfig+0x4a4>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d0f0      	beq.n	8009a60 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a7e:	4b6d      	ldr	r3, [pc, #436]	; (8009c34 <HAL_RCC_OscConfig+0x4a4>)
 8009a80:	68db      	ldr	r3, [r3, #12]
 8009a82:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6a1b      	ldr	r3, [r3, #32]
 8009a8a:	061b      	lsls	r3, r3, #24
 8009a8c:	4969      	ldr	r1, [pc, #420]	; (8009c34 <HAL_RCC_OscConfig+0x4a4>)
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	60cb      	str	r3, [r1, #12]
 8009a92:	e018      	b.n	8009ac6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009a94:	4b67      	ldr	r3, [pc, #412]	; (8009c34 <HAL_RCC_OscConfig+0x4a4>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a66      	ldr	r2, [pc, #408]	; (8009c34 <HAL_RCC_OscConfig+0x4a4>)
 8009a9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009aa0:	f7f9 ff74 	bl	800398c <HAL_GetTick>
 8009aa4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009aa6:	e008      	b.n	8009aba <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009aa8:	f7f9 ff70 	bl	800398c <HAL_GetTick>
 8009aac:	4602      	mov	r2, r0
 8009aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab0:	1ad3      	subs	r3, r2, r3
 8009ab2:	2b02      	cmp	r3, #2
 8009ab4:	d901      	bls.n	8009aba <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009ab6:	2303      	movs	r3, #3
 8009ab8:	e23c      	b.n	8009f34 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009aba:	4b5e      	ldr	r3, [pc, #376]	; (8009c34 <HAL_RCC_OscConfig+0x4a4>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d1f0      	bne.n	8009aa8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f003 0308 	and.w	r3, r3, #8
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d036      	beq.n	8009b40 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	695b      	ldr	r3, [r3, #20]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d019      	beq.n	8009b0e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009ada:	4b56      	ldr	r3, [pc, #344]	; (8009c34 <HAL_RCC_OscConfig+0x4a4>)
 8009adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ade:	4a55      	ldr	r2, [pc, #340]	; (8009c34 <HAL_RCC_OscConfig+0x4a4>)
 8009ae0:	f043 0301 	orr.w	r3, r3, #1
 8009ae4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ae6:	f7f9 ff51 	bl	800398c <HAL_GetTick>
 8009aea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009aec:	e008      	b.n	8009b00 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009aee:	f7f9 ff4d 	bl	800398c <HAL_GetTick>
 8009af2:	4602      	mov	r2, r0
 8009af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af6:	1ad3      	subs	r3, r2, r3
 8009af8:	2b02      	cmp	r3, #2
 8009afa:	d901      	bls.n	8009b00 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009afc:	2303      	movs	r3, #3
 8009afe:	e219      	b.n	8009f34 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009b00:	4b4c      	ldr	r3, [pc, #304]	; (8009c34 <HAL_RCC_OscConfig+0x4a4>)
 8009b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b04:	f003 0302 	and.w	r3, r3, #2
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d0f0      	beq.n	8009aee <HAL_RCC_OscConfig+0x35e>
 8009b0c:	e018      	b.n	8009b40 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009b0e:	4b49      	ldr	r3, [pc, #292]	; (8009c34 <HAL_RCC_OscConfig+0x4a4>)
 8009b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b12:	4a48      	ldr	r2, [pc, #288]	; (8009c34 <HAL_RCC_OscConfig+0x4a4>)
 8009b14:	f023 0301 	bic.w	r3, r3, #1
 8009b18:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b1a:	f7f9 ff37 	bl	800398c <HAL_GetTick>
 8009b1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009b20:	e008      	b.n	8009b34 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009b22:	f7f9 ff33 	bl	800398c <HAL_GetTick>
 8009b26:	4602      	mov	r2, r0
 8009b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2a:	1ad3      	subs	r3, r2, r3
 8009b2c:	2b02      	cmp	r3, #2
 8009b2e:	d901      	bls.n	8009b34 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009b30:	2303      	movs	r3, #3
 8009b32:	e1ff      	b.n	8009f34 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009b34:	4b3f      	ldr	r3, [pc, #252]	; (8009c34 <HAL_RCC_OscConfig+0x4a4>)
 8009b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b38:	f003 0302 	and.w	r3, r3, #2
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d1f0      	bne.n	8009b22 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f003 0320 	and.w	r3, r3, #32
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d036      	beq.n	8009bba <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	699b      	ldr	r3, [r3, #24]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d019      	beq.n	8009b88 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009b54:	4b37      	ldr	r3, [pc, #220]	; (8009c34 <HAL_RCC_OscConfig+0x4a4>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a36      	ldr	r2, [pc, #216]	; (8009c34 <HAL_RCC_OscConfig+0x4a4>)
 8009b5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009b5e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009b60:	f7f9 ff14 	bl	800398c <HAL_GetTick>
 8009b64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009b66:	e008      	b.n	8009b7a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009b68:	f7f9 ff10 	bl	800398c <HAL_GetTick>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b70:	1ad3      	subs	r3, r2, r3
 8009b72:	2b02      	cmp	r3, #2
 8009b74:	d901      	bls.n	8009b7a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009b76:	2303      	movs	r3, #3
 8009b78:	e1dc      	b.n	8009f34 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009b7a:	4b2e      	ldr	r3, [pc, #184]	; (8009c34 <HAL_RCC_OscConfig+0x4a4>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d0f0      	beq.n	8009b68 <HAL_RCC_OscConfig+0x3d8>
 8009b86:	e018      	b.n	8009bba <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009b88:	4b2a      	ldr	r3, [pc, #168]	; (8009c34 <HAL_RCC_OscConfig+0x4a4>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a29      	ldr	r2, [pc, #164]	; (8009c34 <HAL_RCC_OscConfig+0x4a4>)
 8009b8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b92:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009b94:	f7f9 fefa 	bl	800398c <HAL_GetTick>
 8009b98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009b9a:	e008      	b.n	8009bae <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009b9c:	f7f9 fef6 	bl	800398c <HAL_GetTick>
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba4:	1ad3      	subs	r3, r2, r3
 8009ba6:	2b02      	cmp	r3, #2
 8009ba8:	d901      	bls.n	8009bae <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009baa:	2303      	movs	r3, #3
 8009bac:	e1c2      	b.n	8009f34 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009bae:	4b21      	ldr	r3, [pc, #132]	; (8009c34 <HAL_RCC_OscConfig+0x4a4>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d1f0      	bne.n	8009b9c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f003 0304 	and.w	r3, r3, #4
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	f000 8086 	beq.w	8009cd4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009bc8:	4b1b      	ldr	r3, [pc, #108]	; (8009c38 <HAL_RCC_OscConfig+0x4a8>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4a1a      	ldr	r2, [pc, #104]	; (8009c38 <HAL_RCC_OscConfig+0x4a8>)
 8009bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bd2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009bd4:	f7f9 feda 	bl	800398c <HAL_GetTick>
 8009bd8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009bda:	e008      	b.n	8009bee <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009bdc:	f7f9 fed6 	bl	800398c <HAL_GetTick>
 8009be0:	4602      	mov	r2, r0
 8009be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be4:	1ad3      	subs	r3, r2, r3
 8009be6:	2b64      	cmp	r3, #100	; 0x64
 8009be8:	d901      	bls.n	8009bee <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009bea:	2303      	movs	r3, #3
 8009bec:	e1a2      	b.n	8009f34 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009bee:	4b12      	ldr	r3, [pc, #72]	; (8009c38 <HAL_RCC_OscConfig+0x4a8>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d0f0      	beq.n	8009bdc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d106      	bne.n	8009c10 <HAL_RCC_OscConfig+0x480>
 8009c02:	4b0c      	ldr	r3, [pc, #48]	; (8009c34 <HAL_RCC_OscConfig+0x4a4>)
 8009c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c06:	4a0b      	ldr	r2, [pc, #44]	; (8009c34 <HAL_RCC_OscConfig+0x4a4>)
 8009c08:	f043 0301 	orr.w	r3, r3, #1
 8009c0c:	6713      	str	r3, [r2, #112]	; 0x70
 8009c0e:	e032      	b.n	8009c76 <HAL_RCC_OscConfig+0x4e6>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	689b      	ldr	r3, [r3, #8]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d111      	bne.n	8009c3c <HAL_RCC_OscConfig+0x4ac>
 8009c18:	4b06      	ldr	r3, [pc, #24]	; (8009c34 <HAL_RCC_OscConfig+0x4a4>)
 8009c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c1c:	4a05      	ldr	r2, [pc, #20]	; (8009c34 <HAL_RCC_OscConfig+0x4a4>)
 8009c1e:	f023 0301 	bic.w	r3, r3, #1
 8009c22:	6713      	str	r3, [r2, #112]	; 0x70
 8009c24:	4b03      	ldr	r3, [pc, #12]	; (8009c34 <HAL_RCC_OscConfig+0x4a4>)
 8009c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c28:	4a02      	ldr	r2, [pc, #8]	; (8009c34 <HAL_RCC_OscConfig+0x4a4>)
 8009c2a:	f023 0304 	bic.w	r3, r3, #4
 8009c2e:	6713      	str	r3, [r2, #112]	; 0x70
 8009c30:	e021      	b.n	8009c76 <HAL_RCC_OscConfig+0x4e6>
 8009c32:	bf00      	nop
 8009c34:	58024400 	.word	0x58024400
 8009c38:	58024800 	.word	0x58024800
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	2b05      	cmp	r3, #5
 8009c42:	d10c      	bne.n	8009c5e <HAL_RCC_OscConfig+0x4ce>
 8009c44:	4b83      	ldr	r3, [pc, #524]	; (8009e54 <HAL_RCC_OscConfig+0x6c4>)
 8009c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c48:	4a82      	ldr	r2, [pc, #520]	; (8009e54 <HAL_RCC_OscConfig+0x6c4>)
 8009c4a:	f043 0304 	orr.w	r3, r3, #4
 8009c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8009c50:	4b80      	ldr	r3, [pc, #512]	; (8009e54 <HAL_RCC_OscConfig+0x6c4>)
 8009c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c54:	4a7f      	ldr	r2, [pc, #508]	; (8009e54 <HAL_RCC_OscConfig+0x6c4>)
 8009c56:	f043 0301 	orr.w	r3, r3, #1
 8009c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8009c5c:	e00b      	b.n	8009c76 <HAL_RCC_OscConfig+0x4e6>
 8009c5e:	4b7d      	ldr	r3, [pc, #500]	; (8009e54 <HAL_RCC_OscConfig+0x6c4>)
 8009c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c62:	4a7c      	ldr	r2, [pc, #496]	; (8009e54 <HAL_RCC_OscConfig+0x6c4>)
 8009c64:	f023 0301 	bic.w	r3, r3, #1
 8009c68:	6713      	str	r3, [r2, #112]	; 0x70
 8009c6a:	4b7a      	ldr	r3, [pc, #488]	; (8009e54 <HAL_RCC_OscConfig+0x6c4>)
 8009c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c6e:	4a79      	ldr	r2, [pc, #484]	; (8009e54 <HAL_RCC_OscConfig+0x6c4>)
 8009c70:	f023 0304 	bic.w	r3, r3, #4
 8009c74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	689b      	ldr	r3, [r3, #8]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d015      	beq.n	8009caa <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c7e:	f7f9 fe85 	bl	800398c <HAL_GetTick>
 8009c82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c84:	e00a      	b.n	8009c9c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c86:	f7f9 fe81 	bl	800398c <HAL_GetTick>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8e:	1ad3      	subs	r3, r2, r3
 8009c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d901      	bls.n	8009c9c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009c98:	2303      	movs	r3, #3
 8009c9a:	e14b      	b.n	8009f34 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c9c:	4b6d      	ldr	r3, [pc, #436]	; (8009e54 <HAL_RCC_OscConfig+0x6c4>)
 8009c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ca0:	f003 0302 	and.w	r3, r3, #2
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d0ee      	beq.n	8009c86 <HAL_RCC_OscConfig+0x4f6>
 8009ca8:	e014      	b.n	8009cd4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009caa:	f7f9 fe6f 	bl	800398c <HAL_GetTick>
 8009cae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009cb0:	e00a      	b.n	8009cc8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009cb2:	f7f9 fe6b 	bl	800398c <HAL_GetTick>
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cba:	1ad3      	subs	r3, r2, r3
 8009cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d901      	bls.n	8009cc8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009cc4:	2303      	movs	r3, #3
 8009cc6:	e135      	b.n	8009f34 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009cc8:	4b62      	ldr	r3, [pc, #392]	; (8009e54 <HAL_RCC_OscConfig+0x6c4>)
 8009cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ccc:	f003 0302 	and.w	r3, r3, #2
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d1ee      	bne.n	8009cb2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	f000 812a 	beq.w	8009f32 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009cde:	4b5d      	ldr	r3, [pc, #372]	; (8009e54 <HAL_RCC_OscConfig+0x6c4>)
 8009ce0:	691b      	ldr	r3, [r3, #16]
 8009ce2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ce6:	2b18      	cmp	r3, #24
 8009ce8:	f000 80ba 	beq.w	8009e60 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf0:	2b02      	cmp	r3, #2
 8009cf2:	f040 8095 	bne.w	8009e20 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009cf6:	4b57      	ldr	r3, [pc, #348]	; (8009e54 <HAL_RCC_OscConfig+0x6c4>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a56      	ldr	r2, [pc, #344]	; (8009e54 <HAL_RCC_OscConfig+0x6c4>)
 8009cfc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d02:	f7f9 fe43 	bl	800398c <HAL_GetTick>
 8009d06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009d08:	e008      	b.n	8009d1c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d0a:	f7f9 fe3f 	bl	800398c <HAL_GetTick>
 8009d0e:	4602      	mov	r2, r0
 8009d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d12:	1ad3      	subs	r3, r2, r3
 8009d14:	2b02      	cmp	r3, #2
 8009d16:	d901      	bls.n	8009d1c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009d18:	2303      	movs	r3, #3
 8009d1a:	e10b      	b.n	8009f34 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009d1c:	4b4d      	ldr	r3, [pc, #308]	; (8009e54 <HAL_RCC_OscConfig+0x6c4>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d1f0      	bne.n	8009d0a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009d28:	4b4a      	ldr	r3, [pc, #296]	; (8009e54 <HAL_RCC_OscConfig+0x6c4>)
 8009d2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d2c:	4b4a      	ldr	r3, [pc, #296]	; (8009e58 <HAL_RCC_OscConfig+0x6c8>)
 8009d2e:	4013      	ands	r3, r2
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009d38:	0112      	lsls	r2, r2, #4
 8009d3a:	430a      	orrs	r2, r1
 8009d3c:	4945      	ldr	r1, [pc, #276]	; (8009e54 <HAL_RCC_OscConfig+0x6c4>)
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	628b      	str	r3, [r1, #40]	; 0x28
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d46:	3b01      	subs	r3, #1
 8009d48:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d50:	3b01      	subs	r3, #1
 8009d52:	025b      	lsls	r3, r3, #9
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	431a      	orrs	r2, r3
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d5c:	3b01      	subs	r3, #1
 8009d5e:	041b      	lsls	r3, r3, #16
 8009d60:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009d64:	431a      	orrs	r2, r3
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d6a:	3b01      	subs	r3, #1
 8009d6c:	061b      	lsls	r3, r3, #24
 8009d6e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009d72:	4938      	ldr	r1, [pc, #224]	; (8009e54 <HAL_RCC_OscConfig+0x6c4>)
 8009d74:	4313      	orrs	r3, r2
 8009d76:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009d78:	4b36      	ldr	r3, [pc, #216]	; (8009e54 <HAL_RCC_OscConfig+0x6c4>)
 8009d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d7c:	4a35      	ldr	r2, [pc, #212]	; (8009e54 <HAL_RCC_OscConfig+0x6c4>)
 8009d7e:	f023 0301 	bic.w	r3, r3, #1
 8009d82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009d84:	4b33      	ldr	r3, [pc, #204]	; (8009e54 <HAL_RCC_OscConfig+0x6c4>)
 8009d86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d88:	4b34      	ldr	r3, [pc, #208]	; (8009e5c <HAL_RCC_OscConfig+0x6cc>)
 8009d8a:	4013      	ands	r3, r2
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009d90:	00d2      	lsls	r2, r2, #3
 8009d92:	4930      	ldr	r1, [pc, #192]	; (8009e54 <HAL_RCC_OscConfig+0x6c4>)
 8009d94:	4313      	orrs	r3, r2
 8009d96:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009d98:	4b2e      	ldr	r3, [pc, #184]	; (8009e54 <HAL_RCC_OscConfig+0x6c4>)
 8009d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d9c:	f023 020c 	bic.w	r2, r3, #12
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009da4:	492b      	ldr	r1, [pc, #172]	; (8009e54 <HAL_RCC_OscConfig+0x6c4>)
 8009da6:	4313      	orrs	r3, r2
 8009da8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009daa:	4b2a      	ldr	r3, [pc, #168]	; (8009e54 <HAL_RCC_OscConfig+0x6c4>)
 8009dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dae:	f023 0202 	bic.w	r2, r3, #2
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009db6:	4927      	ldr	r1, [pc, #156]	; (8009e54 <HAL_RCC_OscConfig+0x6c4>)
 8009db8:	4313      	orrs	r3, r2
 8009dba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009dbc:	4b25      	ldr	r3, [pc, #148]	; (8009e54 <HAL_RCC_OscConfig+0x6c4>)
 8009dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc0:	4a24      	ldr	r2, [pc, #144]	; (8009e54 <HAL_RCC_OscConfig+0x6c4>)
 8009dc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009dc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dc8:	4b22      	ldr	r3, [pc, #136]	; (8009e54 <HAL_RCC_OscConfig+0x6c4>)
 8009dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dcc:	4a21      	ldr	r2, [pc, #132]	; (8009e54 <HAL_RCC_OscConfig+0x6c4>)
 8009dce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009dd4:	4b1f      	ldr	r3, [pc, #124]	; (8009e54 <HAL_RCC_OscConfig+0x6c4>)
 8009dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd8:	4a1e      	ldr	r2, [pc, #120]	; (8009e54 <HAL_RCC_OscConfig+0x6c4>)
 8009dda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009dde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009de0:	4b1c      	ldr	r3, [pc, #112]	; (8009e54 <HAL_RCC_OscConfig+0x6c4>)
 8009de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de4:	4a1b      	ldr	r2, [pc, #108]	; (8009e54 <HAL_RCC_OscConfig+0x6c4>)
 8009de6:	f043 0301 	orr.w	r3, r3, #1
 8009dea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009dec:	4b19      	ldr	r3, [pc, #100]	; (8009e54 <HAL_RCC_OscConfig+0x6c4>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a18      	ldr	r2, [pc, #96]	; (8009e54 <HAL_RCC_OscConfig+0x6c4>)
 8009df2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009df6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009df8:	f7f9 fdc8 	bl	800398c <HAL_GetTick>
 8009dfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009dfe:	e008      	b.n	8009e12 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e00:	f7f9 fdc4 	bl	800398c <HAL_GetTick>
 8009e04:	4602      	mov	r2, r0
 8009e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e08:	1ad3      	subs	r3, r2, r3
 8009e0a:	2b02      	cmp	r3, #2
 8009e0c:	d901      	bls.n	8009e12 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009e0e:	2303      	movs	r3, #3
 8009e10:	e090      	b.n	8009f34 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009e12:	4b10      	ldr	r3, [pc, #64]	; (8009e54 <HAL_RCC_OscConfig+0x6c4>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d0f0      	beq.n	8009e00 <HAL_RCC_OscConfig+0x670>
 8009e1e:	e088      	b.n	8009f32 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e20:	4b0c      	ldr	r3, [pc, #48]	; (8009e54 <HAL_RCC_OscConfig+0x6c4>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a0b      	ldr	r2, [pc, #44]	; (8009e54 <HAL_RCC_OscConfig+0x6c4>)
 8009e26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e2c:	f7f9 fdae 	bl	800398c <HAL_GetTick>
 8009e30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e32:	e008      	b.n	8009e46 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e34:	f7f9 fdaa 	bl	800398c <HAL_GetTick>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3c:	1ad3      	subs	r3, r2, r3
 8009e3e:	2b02      	cmp	r3, #2
 8009e40:	d901      	bls.n	8009e46 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009e42:	2303      	movs	r3, #3
 8009e44:	e076      	b.n	8009f34 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e46:	4b03      	ldr	r3, [pc, #12]	; (8009e54 <HAL_RCC_OscConfig+0x6c4>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d1f0      	bne.n	8009e34 <HAL_RCC_OscConfig+0x6a4>
 8009e52:	e06e      	b.n	8009f32 <HAL_RCC_OscConfig+0x7a2>
 8009e54:	58024400 	.word	0x58024400
 8009e58:	fffffc0c 	.word	0xfffffc0c
 8009e5c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009e60:	4b36      	ldr	r3, [pc, #216]	; (8009f3c <HAL_RCC_OscConfig+0x7ac>)
 8009e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e64:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009e66:	4b35      	ldr	r3, [pc, #212]	; (8009f3c <HAL_RCC_OscConfig+0x7ac>)
 8009e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e6a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d031      	beq.n	8009ed8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	f003 0203 	and.w	r2, r3, #3
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d12a      	bne.n	8009ed8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	091b      	lsrs	r3, r3, #4
 8009e86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d122      	bne.n	8009ed8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e9c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d11a      	bne.n	8009ed8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	0a5b      	lsrs	r3, r3, #9
 8009ea6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d111      	bne.n	8009ed8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	0c1b      	lsrs	r3, r3, #16
 8009eb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ec0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d108      	bne.n	8009ed8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	0e1b      	lsrs	r3, r3, #24
 8009eca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ed2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	d001      	beq.n	8009edc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	e02b      	b.n	8009f34 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009edc:	4b17      	ldr	r3, [pc, #92]	; (8009f3c <HAL_RCC_OscConfig+0x7ac>)
 8009ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ee0:	08db      	lsrs	r3, r3, #3
 8009ee2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ee6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009eec:	693a      	ldr	r2, [r7, #16]
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d01f      	beq.n	8009f32 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009ef2:	4b12      	ldr	r3, [pc, #72]	; (8009f3c <HAL_RCC_OscConfig+0x7ac>)
 8009ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef6:	4a11      	ldr	r2, [pc, #68]	; (8009f3c <HAL_RCC_OscConfig+0x7ac>)
 8009ef8:	f023 0301 	bic.w	r3, r3, #1
 8009efc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009efe:	f7f9 fd45 	bl	800398c <HAL_GetTick>
 8009f02:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009f04:	bf00      	nop
 8009f06:	f7f9 fd41 	bl	800398c <HAL_GetTick>
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d0f9      	beq.n	8009f06 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009f12:	4b0a      	ldr	r3, [pc, #40]	; (8009f3c <HAL_RCC_OscConfig+0x7ac>)
 8009f14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f16:	4b0a      	ldr	r3, [pc, #40]	; (8009f40 <HAL_RCC_OscConfig+0x7b0>)
 8009f18:	4013      	ands	r3, r2
 8009f1a:	687a      	ldr	r2, [r7, #4]
 8009f1c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009f1e:	00d2      	lsls	r2, r2, #3
 8009f20:	4906      	ldr	r1, [pc, #24]	; (8009f3c <HAL_RCC_OscConfig+0x7ac>)
 8009f22:	4313      	orrs	r3, r2
 8009f24:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009f26:	4b05      	ldr	r3, [pc, #20]	; (8009f3c <HAL_RCC_OscConfig+0x7ac>)
 8009f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f2a:	4a04      	ldr	r2, [pc, #16]	; (8009f3c <HAL_RCC_OscConfig+0x7ac>)
 8009f2c:	f043 0301 	orr.w	r3, r3, #1
 8009f30:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009f32:	2300      	movs	r3, #0
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3730      	adds	r7, #48	; 0x30
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}
 8009f3c:	58024400 	.word	0x58024400
 8009f40:	ffff0007 	.word	0xffff0007

08009f44 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b086      	sub	sp, #24
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d101      	bne.n	8009f58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009f54:	2301      	movs	r3, #1
 8009f56:	e19c      	b.n	800a292 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009f58:	4b8a      	ldr	r3, [pc, #552]	; (800a184 <HAL_RCC_ClockConfig+0x240>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f003 030f 	and.w	r3, r3, #15
 8009f60:	683a      	ldr	r2, [r7, #0]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d910      	bls.n	8009f88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f66:	4b87      	ldr	r3, [pc, #540]	; (800a184 <HAL_RCC_ClockConfig+0x240>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f023 020f 	bic.w	r2, r3, #15
 8009f6e:	4985      	ldr	r1, [pc, #532]	; (800a184 <HAL_RCC_ClockConfig+0x240>)
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	4313      	orrs	r3, r2
 8009f74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f76:	4b83      	ldr	r3, [pc, #524]	; (800a184 <HAL_RCC_ClockConfig+0x240>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f003 030f 	and.w	r3, r3, #15
 8009f7e:	683a      	ldr	r2, [r7, #0]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d001      	beq.n	8009f88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009f84:	2301      	movs	r3, #1
 8009f86:	e184      	b.n	800a292 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f003 0304 	and.w	r3, r3, #4
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d010      	beq.n	8009fb6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	691a      	ldr	r2, [r3, #16]
 8009f98:	4b7b      	ldr	r3, [pc, #492]	; (800a188 <HAL_RCC_ClockConfig+0x244>)
 8009f9a:	699b      	ldr	r3, [r3, #24]
 8009f9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d908      	bls.n	8009fb6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009fa4:	4b78      	ldr	r3, [pc, #480]	; (800a188 <HAL_RCC_ClockConfig+0x244>)
 8009fa6:	699b      	ldr	r3, [r3, #24]
 8009fa8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	691b      	ldr	r3, [r3, #16]
 8009fb0:	4975      	ldr	r1, [pc, #468]	; (800a188 <HAL_RCC_ClockConfig+0x244>)
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f003 0308 	and.w	r3, r3, #8
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d010      	beq.n	8009fe4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	695a      	ldr	r2, [r3, #20]
 8009fc6:	4b70      	ldr	r3, [pc, #448]	; (800a188 <HAL_RCC_ClockConfig+0x244>)
 8009fc8:	69db      	ldr	r3, [r3, #28]
 8009fca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	d908      	bls.n	8009fe4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009fd2:	4b6d      	ldr	r3, [pc, #436]	; (800a188 <HAL_RCC_ClockConfig+0x244>)
 8009fd4:	69db      	ldr	r3, [r3, #28]
 8009fd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	695b      	ldr	r3, [r3, #20]
 8009fde:	496a      	ldr	r1, [pc, #424]	; (800a188 <HAL_RCC_ClockConfig+0x244>)
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f003 0310 	and.w	r3, r3, #16
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d010      	beq.n	800a012 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	699a      	ldr	r2, [r3, #24]
 8009ff4:	4b64      	ldr	r3, [pc, #400]	; (800a188 <HAL_RCC_ClockConfig+0x244>)
 8009ff6:	69db      	ldr	r3, [r3, #28]
 8009ff8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d908      	bls.n	800a012 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a000:	4b61      	ldr	r3, [pc, #388]	; (800a188 <HAL_RCC_ClockConfig+0x244>)
 800a002:	69db      	ldr	r3, [r3, #28]
 800a004:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	699b      	ldr	r3, [r3, #24]
 800a00c:	495e      	ldr	r1, [pc, #376]	; (800a188 <HAL_RCC_ClockConfig+0x244>)
 800a00e:	4313      	orrs	r3, r2
 800a010:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f003 0320 	and.w	r3, r3, #32
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d010      	beq.n	800a040 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	69da      	ldr	r2, [r3, #28]
 800a022:	4b59      	ldr	r3, [pc, #356]	; (800a188 <HAL_RCC_ClockConfig+0x244>)
 800a024:	6a1b      	ldr	r3, [r3, #32]
 800a026:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d908      	bls.n	800a040 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a02e:	4b56      	ldr	r3, [pc, #344]	; (800a188 <HAL_RCC_ClockConfig+0x244>)
 800a030:	6a1b      	ldr	r3, [r3, #32]
 800a032:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	69db      	ldr	r3, [r3, #28]
 800a03a:	4953      	ldr	r1, [pc, #332]	; (800a188 <HAL_RCC_ClockConfig+0x244>)
 800a03c:	4313      	orrs	r3, r2
 800a03e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f003 0302 	and.w	r3, r3, #2
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d010      	beq.n	800a06e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	68da      	ldr	r2, [r3, #12]
 800a050:	4b4d      	ldr	r3, [pc, #308]	; (800a188 <HAL_RCC_ClockConfig+0x244>)
 800a052:	699b      	ldr	r3, [r3, #24]
 800a054:	f003 030f 	and.w	r3, r3, #15
 800a058:	429a      	cmp	r2, r3
 800a05a:	d908      	bls.n	800a06e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a05c:	4b4a      	ldr	r3, [pc, #296]	; (800a188 <HAL_RCC_ClockConfig+0x244>)
 800a05e:	699b      	ldr	r3, [r3, #24]
 800a060:	f023 020f 	bic.w	r2, r3, #15
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	4947      	ldr	r1, [pc, #284]	; (800a188 <HAL_RCC_ClockConfig+0x244>)
 800a06a:	4313      	orrs	r3, r2
 800a06c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f003 0301 	and.w	r3, r3, #1
 800a076:	2b00      	cmp	r3, #0
 800a078:	d055      	beq.n	800a126 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a07a:	4b43      	ldr	r3, [pc, #268]	; (800a188 <HAL_RCC_ClockConfig+0x244>)
 800a07c:	699b      	ldr	r3, [r3, #24]
 800a07e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	689b      	ldr	r3, [r3, #8]
 800a086:	4940      	ldr	r1, [pc, #256]	; (800a188 <HAL_RCC_ClockConfig+0x244>)
 800a088:	4313      	orrs	r3, r2
 800a08a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	2b02      	cmp	r3, #2
 800a092:	d107      	bne.n	800a0a4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a094:	4b3c      	ldr	r3, [pc, #240]	; (800a188 <HAL_RCC_ClockConfig+0x244>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d121      	bne.n	800a0e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	e0f6      	b.n	800a292 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	2b03      	cmp	r3, #3
 800a0aa:	d107      	bne.n	800a0bc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a0ac:	4b36      	ldr	r3, [pc, #216]	; (800a188 <HAL_RCC_ClockConfig+0x244>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d115      	bne.n	800a0e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	e0ea      	b.n	800a292 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	d107      	bne.n	800a0d4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a0c4:	4b30      	ldr	r3, [pc, #192]	; (800a188 <HAL_RCC_ClockConfig+0x244>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d109      	bne.n	800a0e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	e0de      	b.n	800a292 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a0d4:	4b2c      	ldr	r3, [pc, #176]	; (800a188 <HAL_RCC_ClockConfig+0x244>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f003 0304 	and.w	r3, r3, #4
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d101      	bne.n	800a0e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	e0d6      	b.n	800a292 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a0e4:	4b28      	ldr	r3, [pc, #160]	; (800a188 <HAL_RCC_ClockConfig+0x244>)
 800a0e6:	691b      	ldr	r3, [r3, #16]
 800a0e8:	f023 0207 	bic.w	r2, r3, #7
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	4925      	ldr	r1, [pc, #148]	; (800a188 <HAL_RCC_ClockConfig+0x244>)
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0f6:	f7f9 fc49 	bl	800398c <HAL_GetTick>
 800a0fa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a0fc:	e00a      	b.n	800a114 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a0fe:	f7f9 fc45 	bl	800398c <HAL_GetTick>
 800a102:	4602      	mov	r2, r0
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	1ad3      	subs	r3, r2, r3
 800a108:	f241 3288 	movw	r2, #5000	; 0x1388
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d901      	bls.n	800a114 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a110:	2303      	movs	r3, #3
 800a112:	e0be      	b.n	800a292 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a114:	4b1c      	ldr	r3, [pc, #112]	; (800a188 <HAL_RCC_ClockConfig+0x244>)
 800a116:	691b      	ldr	r3, [r3, #16]
 800a118:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	00db      	lsls	r3, r3, #3
 800a122:	429a      	cmp	r2, r3
 800a124:	d1eb      	bne.n	800a0fe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f003 0302 	and.w	r3, r3, #2
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d010      	beq.n	800a154 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	68da      	ldr	r2, [r3, #12]
 800a136:	4b14      	ldr	r3, [pc, #80]	; (800a188 <HAL_RCC_ClockConfig+0x244>)
 800a138:	699b      	ldr	r3, [r3, #24]
 800a13a:	f003 030f 	and.w	r3, r3, #15
 800a13e:	429a      	cmp	r2, r3
 800a140:	d208      	bcs.n	800a154 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a142:	4b11      	ldr	r3, [pc, #68]	; (800a188 <HAL_RCC_ClockConfig+0x244>)
 800a144:	699b      	ldr	r3, [r3, #24]
 800a146:	f023 020f 	bic.w	r2, r3, #15
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	490e      	ldr	r1, [pc, #56]	; (800a188 <HAL_RCC_ClockConfig+0x244>)
 800a150:	4313      	orrs	r3, r2
 800a152:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a154:	4b0b      	ldr	r3, [pc, #44]	; (800a184 <HAL_RCC_ClockConfig+0x240>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f003 030f 	and.w	r3, r3, #15
 800a15c:	683a      	ldr	r2, [r7, #0]
 800a15e:	429a      	cmp	r2, r3
 800a160:	d214      	bcs.n	800a18c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a162:	4b08      	ldr	r3, [pc, #32]	; (800a184 <HAL_RCC_ClockConfig+0x240>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f023 020f 	bic.w	r2, r3, #15
 800a16a:	4906      	ldr	r1, [pc, #24]	; (800a184 <HAL_RCC_ClockConfig+0x240>)
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	4313      	orrs	r3, r2
 800a170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a172:	4b04      	ldr	r3, [pc, #16]	; (800a184 <HAL_RCC_ClockConfig+0x240>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f003 030f 	and.w	r3, r3, #15
 800a17a:	683a      	ldr	r2, [r7, #0]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d005      	beq.n	800a18c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a180:	2301      	movs	r3, #1
 800a182:	e086      	b.n	800a292 <HAL_RCC_ClockConfig+0x34e>
 800a184:	52002000 	.word	0x52002000
 800a188:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f003 0304 	and.w	r3, r3, #4
 800a194:	2b00      	cmp	r3, #0
 800a196:	d010      	beq.n	800a1ba <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	691a      	ldr	r2, [r3, #16]
 800a19c:	4b3f      	ldr	r3, [pc, #252]	; (800a29c <HAL_RCC_ClockConfig+0x358>)
 800a19e:	699b      	ldr	r3, [r3, #24]
 800a1a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d208      	bcs.n	800a1ba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a1a8:	4b3c      	ldr	r3, [pc, #240]	; (800a29c <HAL_RCC_ClockConfig+0x358>)
 800a1aa:	699b      	ldr	r3, [r3, #24]
 800a1ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	691b      	ldr	r3, [r3, #16]
 800a1b4:	4939      	ldr	r1, [pc, #228]	; (800a29c <HAL_RCC_ClockConfig+0x358>)
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f003 0308 	and.w	r3, r3, #8
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d010      	beq.n	800a1e8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	695a      	ldr	r2, [r3, #20]
 800a1ca:	4b34      	ldr	r3, [pc, #208]	; (800a29c <HAL_RCC_ClockConfig+0x358>)
 800a1cc:	69db      	ldr	r3, [r3, #28]
 800a1ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d208      	bcs.n	800a1e8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a1d6:	4b31      	ldr	r3, [pc, #196]	; (800a29c <HAL_RCC_ClockConfig+0x358>)
 800a1d8:	69db      	ldr	r3, [r3, #28]
 800a1da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	695b      	ldr	r3, [r3, #20]
 800a1e2:	492e      	ldr	r1, [pc, #184]	; (800a29c <HAL_RCC_ClockConfig+0x358>)
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f003 0310 	and.w	r3, r3, #16
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d010      	beq.n	800a216 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	699a      	ldr	r2, [r3, #24]
 800a1f8:	4b28      	ldr	r3, [pc, #160]	; (800a29c <HAL_RCC_ClockConfig+0x358>)
 800a1fa:	69db      	ldr	r3, [r3, #28]
 800a1fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a200:	429a      	cmp	r2, r3
 800a202:	d208      	bcs.n	800a216 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a204:	4b25      	ldr	r3, [pc, #148]	; (800a29c <HAL_RCC_ClockConfig+0x358>)
 800a206:	69db      	ldr	r3, [r3, #28]
 800a208:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	699b      	ldr	r3, [r3, #24]
 800a210:	4922      	ldr	r1, [pc, #136]	; (800a29c <HAL_RCC_ClockConfig+0x358>)
 800a212:	4313      	orrs	r3, r2
 800a214:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f003 0320 	and.w	r3, r3, #32
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d010      	beq.n	800a244 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	69da      	ldr	r2, [r3, #28]
 800a226:	4b1d      	ldr	r3, [pc, #116]	; (800a29c <HAL_RCC_ClockConfig+0x358>)
 800a228:	6a1b      	ldr	r3, [r3, #32]
 800a22a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a22e:	429a      	cmp	r2, r3
 800a230:	d208      	bcs.n	800a244 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a232:	4b1a      	ldr	r3, [pc, #104]	; (800a29c <HAL_RCC_ClockConfig+0x358>)
 800a234:	6a1b      	ldr	r3, [r3, #32]
 800a236:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	69db      	ldr	r3, [r3, #28]
 800a23e:	4917      	ldr	r1, [pc, #92]	; (800a29c <HAL_RCC_ClockConfig+0x358>)
 800a240:	4313      	orrs	r3, r2
 800a242:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a244:	f000 f89e 	bl	800a384 <HAL_RCC_GetSysClockFreq>
 800a248:	4602      	mov	r2, r0
 800a24a:	4b14      	ldr	r3, [pc, #80]	; (800a29c <HAL_RCC_ClockConfig+0x358>)
 800a24c:	699b      	ldr	r3, [r3, #24]
 800a24e:	0a1b      	lsrs	r3, r3, #8
 800a250:	f003 030f 	and.w	r3, r3, #15
 800a254:	4912      	ldr	r1, [pc, #72]	; (800a2a0 <HAL_RCC_ClockConfig+0x35c>)
 800a256:	5ccb      	ldrb	r3, [r1, r3]
 800a258:	f003 031f 	and.w	r3, r3, #31
 800a25c:	fa22 f303 	lsr.w	r3, r2, r3
 800a260:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a262:	4b0e      	ldr	r3, [pc, #56]	; (800a29c <HAL_RCC_ClockConfig+0x358>)
 800a264:	699b      	ldr	r3, [r3, #24]
 800a266:	f003 030f 	and.w	r3, r3, #15
 800a26a:	4a0d      	ldr	r2, [pc, #52]	; (800a2a0 <HAL_RCC_ClockConfig+0x35c>)
 800a26c:	5cd3      	ldrb	r3, [r2, r3]
 800a26e:	f003 031f 	and.w	r3, r3, #31
 800a272:	693a      	ldr	r2, [r7, #16]
 800a274:	fa22 f303 	lsr.w	r3, r2, r3
 800a278:	4a0a      	ldr	r2, [pc, #40]	; (800a2a4 <HAL_RCC_ClockConfig+0x360>)
 800a27a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a27c:	4a0a      	ldr	r2, [pc, #40]	; (800a2a8 <HAL_RCC_ClockConfig+0x364>)
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a282:	4b0a      	ldr	r3, [pc, #40]	; (800a2ac <HAL_RCC_ClockConfig+0x368>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4618      	mov	r0, r3
 800a288:	f7f9 fb36 	bl	80038f8 <HAL_InitTick>
 800a28c:	4603      	mov	r3, r0
 800a28e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a290:	7bfb      	ldrb	r3, [r7, #15]
}
 800a292:	4618      	mov	r0, r3
 800a294:	3718      	adds	r7, #24
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	58024400 	.word	0x58024400
 800a2a0:	080183a0 	.word	0x080183a0
 800a2a4:	24000004 	.word	0x24000004
 800a2a8:	24000000 	.word	0x24000000
 800a2ac:	24000008 	.word	0x24000008

0800a2b0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b08c      	sub	sp, #48	; 0x30
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d12a      	bne.n	800a318 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a2c2:	4b2d      	ldr	r3, [pc, #180]	; (800a378 <HAL_RCC_MCOConfig+0xc8>)
 800a2c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a2c8:	4a2b      	ldr	r2, [pc, #172]	; (800a378 <HAL_RCC_MCOConfig+0xc8>)
 800a2ca:	f043 0301 	orr.w	r3, r3, #1
 800a2ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a2d2:	4b29      	ldr	r3, [pc, #164]	; (800a378 <HAL_RCC_MCOConfig+0xc8>)
 800a2d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a2d8:	f003 0301 	and.w	r3, r3, #1
 800a2dc:	61bb      	str	r3, [r7, #24]
 800a2de:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a2e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2e6:	2302      	movs	r3, #2
 800a2e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a2ea:	2303      	movs	r3, #3
 800a2ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a2f6:	f107 031c 	add.w	r3, r7, #28
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	481f      	ldr	r0, [pc, #124]	; (800a37c <HAL_RCC_MCOConfig+0xcc>)
 800a2fe:	f7fd fc43 	bl	8007b88 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a302:	4b1d      	ldr	r3, [pc, #116]	; (800a378 <HAL_RCC_MCOConfig+0xc8>)
 800a304:	691b      	ldr	r3, [r3, #16]
 800a306:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800a30a:	68b9      	ldr	r1, [r7, #8]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	430b      	orrs	r3, r1
 800a310:	4919      	ldr	r1, [pc, #100]	; (800a378 <HAL_RCC_MCOConfig+0xc8>)
 800a312:	4313      	orrs	r3, r2
 800a314:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800a316:	e02a      	b.n	800a36e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800a318:	4b17      	ldr	r3, [pc, #92]	; (800a378 <HAL_RCC_MCOConfig+0xc8>)
 800a31a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a31e:	4a16      	ldr	r2, [pc, #88]	; (800a378 <HAL_RCC_MCOConfig+0xc8>)
 800a320:	f043 0304 	orr.w	r3, r3, #4
 800a324:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a328:	4b13      	ldr	r3, [pc, #76]	; (800a378 <HAL_RCC_MCOConfig+0xc8>)
 800a32a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a32e:	f003 0304 	and.w	r3, r3, #4
 800a332:	617b      	str	r3, [r7, #20]
 800a334:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a336:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a33a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a33c:	2302      	movs	r3, #2
 800a33e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a340:	2303      	movs	r3, #3
 800a342:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a344:	2300      	movs	r3, #0
 800a346:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a348:	2300      	movs	r3, #0
 800a34a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a34c:	f107 031c 	add.w	r3, r7, #28
 800a350:	4619      	mov	r1, r3
 800a352:	480b      	ldr	r0, [pc, #44]	; (800a380 <HAL_RCC_MCOConfig+0xd0>)
 800a354:	f7fd fc18 	bl	8007b88 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a358:	4b07      	ldr	r3, [pc, #28]	; (800a378 <HAL_RCC_MCOConfig+0xc8>)
 800a35a:	691b      	ldr	r3, [r3, #16]
 800a35c:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	01d9      	lsls	r1, r3, #7
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	430b      	orrs	r3, r1
 800a368:	4903      	ldr	r1, [pc, #12]	; (800a378 <HAL_RCC_MCOConfig+0xc8>)
 800a36a:	4313      	orrs	r3, r2
 800a36c:	610b      	str	r3, [r1, #16]
}
 800a36e:	bf00      	nop
 800a370:	3730      	adds	r7, #48	; 0x30
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	58024400 	.word	0x58024400
 800a37c:	58020000 	.word	0x58020000
 800a380:	58020800 	.word	0x58020800

0800a384 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a384:	b480      	push	{r7}
 800a386:	b089      	sub	sp, #36	; 0x24
 800a388:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a38a:	4bb3      	ldr	r3, [pc, #716]	; (800a658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a38c:	691b      	ldr	r3, [r3, #16]
 800a38e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a392:	2b18      	cmp	r3, #24
 800a394:	f200 8155 	bhi.w	800a642 <HAL_RCC_GetSysClockFreq+0x2be>
 800a398:	a201      	add	r2, pc, #4	; (adr r2, 800a3a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a39a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a39e:	bf00      	nop
 800a3a0:	0800a405 	.word	0x0800a405
 800a3a4:	0800a643 	.word	0x0800a643
 800a3a8:	0800a643 	.word	0x0800a643
 800a3ac:	0800a643 	.word	0x0800a643
 800a3b0:	0800a643 	.word	0x0800a643
 800a3b4:	0800a643 	.word	0x0800a643
 800a3b8:	0800a643 	.word	0x0800a643
 800a3bc:	0800a643 	.word	0x0800a643
 800a3c0:	0800a42b 	.word	0x0800a42b
 800a3c4:	0800a643 	.word	0x0800a643
 800a3c8:	0800a643 	.word	0x0800a643
 800a3cc:	0800a643 	.word	0x0800a643
 800a3d0:	0800a643 	.word	0x0800a643
 800a3d4:	0800a643 	.word	0x0800a643
 800a3d8:	0800a643 	.word	0x0800a643
 800a3dc:	0800a643 	.word	0x0800a643
 800a3e0:	0800a431 	.word	0x0800a431
 800a3e4:	0800a643 	.word	0x0800a643
 800a3e8:	0800a643 	.word	0x0800a643
 800a3ec:	0800a643 	.word	0x0800a643
 800a3f0:	0800a643 	.word	0x0800a643
 800a3f4:	0800a643 	.word	0x0800a643
 800a3f8:	0800a643 	.word	0x0800a643
 800a3fc:	0800a643 	.word	0x0800a643
 800a400:	0800a437 	.word	0x0800a437
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a404:	4b94      	ldr	r3, [pc, #592]	; (800a658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f003 0320 	and.w	r3, r3, #32
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d009      	beq.n	800a424 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a410:	4b91      	ldr	r3, [pc, #580]	; (800a658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	08db      	lsrs	r3, r3, #3
 800a416:	f003 0303 	and.w	r3, r3, #3
 800a41a:	4a90      	ldr	r2, [pc, #576]	; (800a65c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a41c:	fa22 f303 	lsr.w	r3, r2, r3
 800a420:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a422:	e111      	b.n	800a648 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a424:	4b8d      	ldr	r3, [pc, #564]	; (800a65c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a426:	61bb      	str	r3, [r7, #24]
      break;
 800a428:	e10e      	b.n	800a648 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a42a:	4b8d      	ldr	r3, [pc, #564]	; (800a660 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a42c:	61bb      	str	r3, [r7, #24]
      break;
 800a42e:	e10b      	b.n	800a648 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a430:	4b8c      	ldr	r3, [pc, #560]	; (800a664 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a432:	61bb      	str	r3, [r7, #24]
      break;
 800a434:	e108      	b.n	800a648 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a436:	4b88      	ldr	r3, [pc, #544]	; (800a658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a43a:	f003 0303 	and.w	r3, r3, #3
 800a43e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a440:	4b85      	ldr	r3, [pc, #532]	; (800a658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a444:	091b      	lsrs	r3, r3, #4
 800a446:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a44a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a44c:	4b82      	ldr	r3, [pc, #520]	; (800a658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a450:	f003 0301 	and.w	r3, r3, #1
 800a454:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a456:	4b80      	ldr	r3, [pc, #512]	; (800a658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a45a:	08db      	lsrs	r3, r3, #3
 800a45c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a460:	68fa      	ldr	r2, [r7, #12]
 800a462:	fb02 f303 	mul.w	r3, r2, r3
 800a466:	ee07 3a90 	vmov	s15, r3
 800a46a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a46e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	2b00      	cmp	r3, #0
 800a476:	f000 80e1 	beq.w	800a63c <HAL_RCC_GetSysClockFreq+0x2b8>
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	2b02      	cmp	r3, #2
 800a47e:	f000 8083 	beq.w	800a588 <HAL_RCC_GetSysClockFreq+0x204>
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	2b02      	cmp	r3, #2
 800a486:	f200 80a1 	bhi.w	800a5cc <HAL_RCC_GetSysClockFreq+0x248>
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d003      	beq.n	800a498 <HAL_RCC_GetSysClockFreq+0x114>
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	2b01      	cmp	r3, #1
 800a494:	d056      	beq.n	800a544 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a496:	e099      	b.n	800a5cc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a498:	4b6f      	ldr	r3, [pc, #444]	; (800a658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f003 0320 	and.w	r3, r3, #32
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d02d      	beq.n	800a500 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4a4:	4b6c      	ldr	r3, [pc, #432]	; (800a658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	08db      	lsrs	r3, r3, #3
 800a4aa:	f003 0303 	and.w	r3, r3, #3
 800a4ae:	4a6b      	ldr	r2, [pc, #428]	; (800a65c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a4b0:	fa22 f303 	lsr.w	r3, r2, r3
 800a4b4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	ee07 3a90 	vmov	s15, r3
 800a4bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	ee07 3a90 	vmov	s15, r3
 800a4c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4ce:	4b62      	ldr	r3, [pc, #392]	; (800a658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4d6:	ee07 3a90 	vmov	s15, r3
 800a4da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4de:	ed97 6a02 	vldr	s12, [r7, #8]
 800a4e2:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a668 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a4e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4fa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a4fe:	e087      	b.n	800a610 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	ee07 3a90 	vmov	s15, r3
 800a506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a50a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a66c <HAL_RCC_GetSysClockFreq+0x2e8>
 800a50e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a512:	4b51      	ldr	r3, [pc, #324]	; (800a658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a51a:	ee07 3a90 	vmov	s15, r3
 800a51e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a522:	ed97 6a02 	vldr	s12, [r7, #8]
 800a526:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a668 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a52a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a52e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a532:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a53a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a53e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a542:	e065      	b.n	800a610 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	ee07 3a90 	vmov	s15, r3
 800a54a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a54e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a670 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a556:	4b40      	ldr	r3, [pc, #256]	; (800a658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a55a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a55e:	ee07 3a90 	vmov	s15, r3
 800a562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a566:	ed97 6a02 	vldr	s12, [r7, #8]
 800a56a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a668 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a56e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a576:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a57a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a57e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a582:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a586:	e043      	b.n	800a610 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	ee07 3a90 	vmov	s15, r3
 800a58e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a592:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a674 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a59a:	4b2f      	ldr	r3, [pc, #188]	; (800a658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a59c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a59e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5a2:	ee07 3a90 	vmov	s15, r3
 800a5a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5aa:	ed97 6a02 	vldr	s12, [r7, #8]
 800a5ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a668 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a5b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a5ca:	e021      	b.n	800a610 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	ee07 3a90 	vmov	s15, r3
 800a5d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a670 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a5da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5de:	4b1e      	ldr	r3, [pc, #120]	; (800a658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5e6:	ee07 3a90 	vmov	s15, r3
 800a5ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5ee:	ed97 6a02 	vldr	s12, [r7, #8]
 800a5f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a668 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a5f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a60a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a60e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a610:	4b11      	ldr	r3, [pc, #68]	; (800a658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a614:	0a5b      	lsrs	r3, r3, #9
 800a616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a61a:	3301      	adds	r3, #1
 800a61c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	ee07 3a90 	vmov	s15, r3
 800a624:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a628:	edd7 6a07 	vldr	s13, [r7, #28]
 800a62c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a630:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a634:	ee17 3a90 	vmov	r3, s15
 800a638:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a63a:	e005      	b.n	800a648 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a63c:	2300      	movs	r3, #0
 800a63e:	61bb      	str	r3, [r7, #24]
      break;
 800a640:	e002      	b.n	800a648 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a642:	4b07      	ldr	r3, [pc, #28]	; (800a660 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a644:	61bb      	str	r3, [r7, #24]
      break;
 800a646:	bf00      	nop
  }

  return sysclockfreq;
 800a648:	69bb      	ldr	r3, [r7, #24]
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3724      	adds	r7, #36	; 0x24
 800a64e:	46bd      	mov	sp, r7
 800a650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a654:	4770      	bx	lr
 800a656:	bf00      	nop
 800a658:	58024400 	.word	0x58024400
 800a65c:	03d09000 	.word	0x03d09000
 800a660:	003d0900 	.word	0x003d0900
 800a664:	02faf080 	.word	0x02faf080
 800a668:	46000000 	.word	0x46000000
 800a66c:	4c742400 	.word	0x4c742400
 800a670:	4a742400 	.word	0x4a742400
 800a674:	4c3ebc20 	.word	0x4c3ebc20

0800a678 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b082      	sub	sp, #8
 800a67c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a67e:	f7ff fe81 	bl	800a384 <HAL_RCC_GetSysClockFreq>
 800a682:	4602      	mov	r2, r0
 800a684:	4b10      	ldr	r3, [pc, #64]	; (800a6c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800a686:	699b      	ldr	r3, [r3, #24]
 800a688:	0a1b      	lsrs	r3, r3, #8
 800a68a:	f003 030f 	and.w	r3, r3, #15
 800a68e:	490f      	ldr	r1, [pc, #60]	; (800a6cc <HAL_RCC_GetHCLKFreq+0x54>)
 800a690:	5ccb      	ldrb	r3, [r1, r3]
 800a692:	f003 031f 	and.w	r3, r3, #31
 800a696:	fa22 f303 	lsr.w	r3, r2, r3
 800a69a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a69c:	4b0a      	ldr	r3, [pc, #40]	; (800a6c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800a69e:	699b      	ldr	r3, [r3, #24]
 800a6a0:	f003 030f 	and.w	r3, r3, #15
 800a6a4:	4a09      	ldr	r2, [pc, #36]	; (800a6cc <HAL_RCC_GetHCLKFreq+0x54>)
 800a6a6:	5cd3      	ldrb	r3, [r2, r3]
 800a6a8:	f003 031f 	and.w	r3, r3, #31
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	fa22 f303 	lsr.w	r3, r2, r3
 800a6b2:	4a07      	ldr	r2, [pc, #28]	; (800a6d0 <HAL_RCC_GetHCLKFreq+0x58>)
 800a6b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a6b6:	4a07      	ldr	r2, [pc, #28]	; (800a6d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a6bc:	4b04      	ldr	r3, [pc, #16]	; (800a6d0 <HAL_RCC_GetHCLKFreq+0x58>)
 800a6be:	681b      	ldr	r3, [r3, #0]
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3708      	adds	r7, #8
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}
 800a6c8:	58024400 	.word	0x58024400
 800a6cc:	080183a0 	.word	0x080183a0
 800a6d0:	24000004 	.word	0x24000004
 800a6d4:	24000000 	.word	0x24000000

0800a6d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a6dc:	f7ff ffcc 	bl	800a678 <HAL_RCC_GetHCLKFreq>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	4b06      	ldr	r3, [pc, #24]	; (800a6fc <HAL_RCC_GetPCLK1Freq+0x24>)
 800a6e4:	69db      	ldr	r3, [r3, #28]
 800a6e6:	091b      	lsrs	r3, r3, #4
 800a6e8:	f003 0307 	and.w	r3, r3, #7
 800a6ec:	4904      	ldr	r1, [pc, #16]	; (800a700 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a6ee:	5ccb      	ldrb	r3, [r1, r3]
 800a6f0:	f003 031f 	and.w	r3, r3, #31
 800a6f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	58024400 	.word	0x58024400
 800a700:	080183a0 	.word	0x080183a0

0800a704 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a708:	f7ff ffb6 	bl	800a678 <HAL_RCC_GetHCLKFreq>
 800a70c:	4602      	mov	r2, r0
 800a70e:	4b06      	ldr	r3, [pc, #24]	; (800a728 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a710:	69db      	ldr	r3, [r3, #28]
 800a712:	0a1b      	lsrs	r3, r3, #8
 800a714:	f003 0307 	and.w	r3, r3, #7
 800a718:	4904      	ldr	r1, [pc, #16]	; (800a72c <HAL_RCC_GetPCLK2Freq+0x28>)
 800a71a:	5ccb      	ldrb	r3, [r1, r3]
 800a71c:	f003 031f 	and.w	r3, r3, #31
 800a720:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a724:	4618      	mov	r0, r3
 800a726:	bd80      	pop	{r7, pc}
 800a728:	58024400 	.word	0x58024400
 800a72c:	080183a0 	.word	0x080183a0

0800a730 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a730:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a734:	b0c6      	sub	sp, #280	; 0x118
 800a736:	af00      	add	r7, sp, #0
 800a738:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a73c:	2300      	movs	r3, #0
 800a73e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a742:	2300      	movs	r3, #0
 800a744:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a748:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a750:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a754:	2500      	movs	r5, #0
 800a756:	ea54 0305 	orrs.w	r3, r4, r5
 800a75a:	d049      	beq.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a75c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a760:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a762:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a766:	d02f      	beq.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a768:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a76c:	d828      	bhi.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a76e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a772:	d01a      	beq.n	800a7aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a774:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a778:	d822      	bhi.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d003      	beq.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a77e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a782:	d007      	beq.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a784:	e01c      	b.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a786:	4bab      	ldr	r3, [pc, #684]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a78a:	4aaa      	ldr	r2, [pc, #680]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a78c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a790:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a792:	e01a      	b.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a794:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a798:	3308      	adds	r3, #8
 800a79a:	2102      	movs	r1, #2
 800a79c:	4618      	mov	r0, r3
 800a79e:	f002 fa49 	bl	800cc34 <RCCEx_PLL2_Config>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a7a8:	e00f      	b.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a7aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7ae:	3328      	adds	r3, #40	; 0x28
 800a7b0:	2102      	movs	r1, #2
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f002 faf0 	bl	800cd98 <RCCEx_PLL3_Config>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a7be:	e004      	b.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a7c6:	e000      	b.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a7c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d10a      	bne.n	800a7e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a7d2:	4b98      	ldr	r3, [pc, #608]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a7d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7d6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a7da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7e0:	4a94      	ldr	r2, [pc, #592]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a7e2:	430b      	orrs	r3, r1
 800a7e4:	6513      	str	r3, [r2, #80]	; 0x50
 800a7e6:	e003      	b.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a7ec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a7f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a7fc:	f04f 0900 	mov.w	r9, #0
 800a800:	ea58 0309 	orrs.w	r3, r8, r9
 800a804:	d047      	beq.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a806:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a80a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a80c:	2b04      	cmp	r3, #4
 800a80e:	d82a      	bhi.n	800a866 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a810:	a201      	add	r2, pc, #4	; (adr r2, 800a818 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a816:	bf00      	nop
 800a818:	0800a82d 	.word	0x0800a82d
 800a81c:	0800a83b 	.word	0x0800a83b
 800a820:	0800a851 	.word	0x0800a851
 800a824:	0800a86f 	.word	0x0800a86f
 800a828:	0800a86f 	.word	0x0800a86f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a82c:	4b81      	ldr	r3, [pc, #516]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a82e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a830:	4a80      	ldr	r2, [pc, #512]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a836:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a838:	e01a      	b.n	800a870 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a83a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a83e:	3308      	adds	r3, #8
 800a840:	2100      	movs	r1, #0
 800a842:	4618      	mov	r0, r3
 800a844:	f002 f9f6 	bl	800cc34 <RCCEx_PLL2_Config>
 800a848:	4603      	mov	r3, r0
 800a84a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a84e:	e00f      	b.n	800a870 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a850:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a854:	3328      	adds	r3, #40	; 0x28
 800a856:	2100      	movs	r1, #0
 800a858:	4618      	mov	r0, r3
 800a85a:	f002 fa9d 	bl	800cd98 <RCCEx_PLL3_Config>
 800a85e:	4603      	mov	r3, r0
 800a860:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a864:	e004      	b.n	800a870 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a866:	2301      	movs	r3, #1
 800a868:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a86c:	e000      	b.n	800a870 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a86e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a870:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a874:	2b00      	cmp	r3, #0
 800a876:	d10a      	bne.n	800a88e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a878:	4b6e      	ldr	r3, [pc, #440]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a87a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a87c:	f023 0107 	bic.w	r1, r3, #7
 800a880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a886:	4a6b      	ldr	r2, [pc, #428]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a888:	430b      	orrs	r3, r1
 800a88a:	6513      	str	r3, [r2, #80]	; 0x50
 800a88c:	e003      	b.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a88e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a892:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a896:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89e:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800a8a2:	f04f 0b00 	mov.w	fp, #0
 800a8a6:	ea5a 030b 	orrs.w	r3, sl, fp
 800a8aa:	d05b      	beq.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a8ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a8b4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a8b8:	d03b      	beq.n	800a932 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a8ba:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a8be:	d834      	bhi.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a8c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a8c4:	d037      	beq.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a8c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a8ca:	d82e      	bhi.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a8cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a8d0:	d033      	beq.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a8d2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a8d6:	d828      	bhi.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a8d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a8dc:	d01a      	beq.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800a8de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a8e2:	d822      	bhi.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d003      	beq.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800a8e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a8ec:	d007      	beq.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800a8ee:	e01c      	b.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8f0:	4b50      	ldr	r3, [pc, #320]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8f4:	4a4f      	ldr	r2, [pc, #316]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a8f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a8fc:	e01e      	b.n	800a93c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a8fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a902:	3308      	adds	r3, #8
 800a904:	2100      	movs	r1, #0
 800a906:	4618      	mov	r0, r3
 800a908:	f002 f994 	bl	800cc34 <RCCEx_PLL2_Config>
 800a90c:	4603      	mov	r3, r0
 800a90e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a912:	e013      	b.n	800a93c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a914:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a918:	3328      	adds	r3, #40	; 0x28
 800a91a:	2100      	movs	r1, #0
 800a91c:	4618      	mov	r0, r3
 800a91e:	f002 fa3b 	bl	800cd98 <RCCEx_PLL3_Config>
 800a922:	4603      	mov	r3, r0
 800a924:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a928:	e008      	b.n	800a93c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a92a:	2301      	movs	r3, #1
 800a92c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a930:	e004      	b.n	800a93c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a932:	bf00      	nop
 800a934:	e002      	b.n	800a93c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a936:	bf00      	nop
 800a938:	e000      	b.n	800a93c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a93a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a93c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a940:	2b00      	cmp	r3, #0
 800a942:	d10b      	bne.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a944:	4b3b      	ldr	r3, [pc, #236]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a948:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800a94c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a950:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a954:	4a37      	ldr	r2, [pc, #220]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a956:	430b      	orrs	r3, r1
 800a958:	6593      	str	r3, [r2, #88]	; 0x58
 800a95a:	e003      	b.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a95c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a960:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800a970:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a974:	2300      	movs	r3, #0
 800a976:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a97a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800a97e:	460b      	mov	r3, r1
 800a980:	4313      	orrs	r3, r2
 800a982:	d05d      	beq.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a984:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a988:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a98c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a990:	d03b      	beq.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800a992:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a996:	d834      	bhi.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a998:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a99c:	d037      	beq.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800a99e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a9a2:	d82e      	bhi.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a9a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a9a8:	d033      	beq.n	800aa12 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800a9aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a9ae:	d828      	bhi.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a9b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9b4:	d01a      	beq.n	800a9ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800a9b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9ba:	d822      	bhi.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d003      	beq.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a9c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a9c4:	d007      	beq.n	800a9d6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a9c6:	e01c      	b.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9c8:	4b1a      	ldr	r3, [pc, #104]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9cc:	4a19      	ldr	r2, [pc, #100]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a9ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a9d4:	e01e      	b.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a9d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9da:	3308      	adds	r3, #8
 800a9dc:	2100      	movs	r1, #0
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f002 f928 	bl	800cc34 <RCCEx_PLL2_Config>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a9ea:	e013      	b.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a9ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9f0:	3328      	adds	r3, #40	; 0x28
 800a9f2:	2100      	movs	r1, #0
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f002 f9cf 	bl	800cd98 <RCCEx_PLL3_Config>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa00:	e008      	b.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800aa02:	2301      	movs	r3, #1
 800aa04:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aa08:	e004      	b.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800aa0a:	bf00      	nop
 800aa0c:	e002      	b.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800aa0e:	bf00      	nop
 800aa10:	e000      	b.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800aa12:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d10d      	bne.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800aa1c:	4b05      	ldr	r3, [pc, #20]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa20:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800aa24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa28:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aa2c:	4a01      	ldr	r2, [pc, #4]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa2e:	430b      	orrs	r3, r1
 800aa30:	6593      	str	r3, [r2, #88]	; 0x58
 800aa32:	e005      	b.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800aa34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa38:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa3c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800aa40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa48:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800aa4c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800aa50:	2300      	movs	r3, #0
 800aa52:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800aa56:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800aa5a:	460b      	mov	r3, r1
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	d03a      	beq.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800aa60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa66:	2b30      	cmp	r3, #48	; 0x30
 800aa68:	d01f      	beq.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800aa6a:	2b30      	cmp	r3, #48	; 0x30
 800aa6c:	d819      	bhi.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800aa6e:	2b20      	cmp	r3, #32
 800aa70:	d00c      	beq.n	800aa8c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800aa72:	2b20      	cmp	r3, #32
 800aa74:	d815      	bhi.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d019      	beq.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800aa7a:	2b10      	cmp	r3, #16
 800aa7c:	d111      	bne.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa7e:	4baa      	ldr	r3, [pc, #680]	; (800ad28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aa80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa82:	4aa9      	ldr	r2, [pc, #676]	; (800ad28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aa84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800aa8a:	e011      	b.n	800aab0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aa8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa90:	3308      	adds	r3, #8
 800aa92:	2102      	movs	r1, #2
 800aa94:	4618      	mov	r0, r3
 800aa96:	f002 f8cd 	bl	800cc34 <RCCEx_PLL2_Config>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800aaa0:	e006      	b.n	800aab0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aaa8:	e002      	b.n	800aab0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800aaaa:	bf00      	nop
 800aaac:	e000      	b.n	800aab0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800aaae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aab0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d10a      	bne.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800aab8:	4b9b      	ldr	r3, [pc, #620]	; (800ad28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aaba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aabc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800aac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aac6:	4a98      	ldr	r2, [pc, #608]	; (800ad28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aac8:	430b      	orrs	r3, r1
 800aaca:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aacc:	e003      	b.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aace:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aad2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800aad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aade:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800aae2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800aae6:	2300      	movs	r3, #0
 800aae8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800aaec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800aaf0:	460b      	mov	r3, r1
 800aaf2:	4313      	orrs	r3, r2
 800aaf4:	d051      	beq.n	800ab9a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800aaf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aafa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aafc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab00:	d035      	beq.n	800ab6e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800ab02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab06:	d82e      	bhi.n	800ab66 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ab08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ab0c:	d031      	beq.n	800ab72 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800ab0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ab12:	d828      	bhi.n	800ab66 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ab14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab18:	d01a      	beq.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800ab1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab1e:	d822      	bhi.n	800ab66 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d003      	beq.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800ab24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab28:	d007      	beq.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800ab2a:	e01c      	b.n	800ab66 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab2c:	4b7e      	ldr	r3, [pc, #504]	; (800ad28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab30:	4a7d      	ldr	r2, [pc, #500]	; (800ad28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ab38:	e01c      	b.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab3e:	3308      	adds	r3, #8
 800ab40:	2100      	movs	r1, #0
 800ab42:	4618      	mov	r0, r3
 800ab44:	f002 f876 	bl	800cc34 <RCCEx_PLL2_Config>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ab4e:	e011      	b.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab54:	3328      	adds	r3, #40	; 0x28
 800ab56:	2100      	movs	r1, #0
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f002 f91d 	bl	800cd98 <RCCEx_PLL3_Config>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ab64:	e006      	b.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab66:	2301      	movs	r3, #1
 800ab68:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ab6c:	e002      	b.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ab6e:	bf00      	nop
 800ab70:	e000      	b.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ab72:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d10a      	bne.n	800ab92 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ab7c:	4b6a      	ldr	r3, [pc, #424]	; (800ad28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab80:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800ab84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab8a:	4a67      	ldr	r2, [pc, #412]	; (800ad28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab8c:	430b      	orrs	r3, r1
 800ab8e:	6513      	str	r3, [r2, #80]	; 0x50
 800ab90:	e003      	b.n	800ab9a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab92:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab96:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ab9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800aba6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800abaa:	2300      	movs	r3, #0
 800abac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800abb0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800abb4:	460b      	mov	r3, r1
 800abb6:	4313      	orrs	r3, r2
 800abb8:	d053      	beq.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800abba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800abc4:	d033      	beq.n	800ac2e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800abc6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800abca:	d82c      	bhi.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800abcc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800abd0:	d02f      	beq.n	800ac32 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800abd2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800abd6:	d826      	bhi.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800abd8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800abdc:	d02b      	beq.n	800ac36 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800abde:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800abe2:	d820      	bhi.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800abe4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abe8:	d012      	beq.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800abea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abee:	d81a      	bhi.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d022      	beq.n	800ac3a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800abf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abf8:	d115      	bne.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800abfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abfe:	3308      	adds	r3, #8
 800ac00:	2101      	movs	r1, #1
 800ac02:	4618      	mov	r0, r3
 800ac04:	f002 f816 	bl	800cc34 <RCCEx_PLL2_Config>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ac0e:	e015      	b.n	800ac3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ac10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac14:	3328      	adds	r3, #40	; 0x28
 800ac16:	2101      	movs	r1, #1
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f002 f8bd 	bl	800cd98 <RCCEx_PLL3_Config>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ac24:	e00a      	b.n	800ac3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac26:	2301      	movs	r3, #1
 800ac28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ac2c:	e006      	b.n	800ac3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ac2e:	bf00      	nop
 800ac30:	e004      	b.n	800ac3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ac32:	bf00      	nop
 800ac34:	e002      	b.n	800ac3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ac36:	bf00      	nop
 800ac38:	e000      	b.n	800ac3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ac3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d10a      	bne.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ac44:	4b38      	ldr	r3, [pc, #224]	; (800ad28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac48:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800ac4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac52:	4a35      	ldr	r2, [pc, #212]	; (800ad28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac54:	430b      	orrs	r3, r1
 800ac56:	6513      	str	r3, [r2, #80]	; 0x50
 800ac58:	e003      	b.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac5a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac5e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ac62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800ac6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ac72:	2300      	movs	r3, #0
 800ac74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ac78:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ac7c:	460b      	mov	r3, r1
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	d058      	beq.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800ac82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ac8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac8e:	d033      	beq.n	800acf8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800ac90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac94:	d82c      	bhi.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ac96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac9a:	d02f      	beq.n	800acfc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800ac9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aca0:	d826      	bhi.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800aca2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aca6:	d02b      	beq.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800aca8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800acac:	d820      	bhi.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800acae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acb2:	d012      	beq.n	800acda <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800acb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acb8:	d81a      	bhi.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d022      	beq.n	800ad04 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800acbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800acc2:	d115      	bne.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800acc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acc8:	3308      	adds	r3, #8
 800acca:	2101      	movs	r1, #1
 800accc:	4618      	mov	r0, r3
 800acce:	f001 ffb1 	bl	800cc34 <RCCEx_PLL2_Config>
 800acd2:	4603      	mov	r3, r0
 800acd4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800acd8:	e015      	b.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800acda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acde:	3328      	adds	r3, #40	; 0x28
 800ace0:	2101      	movs	r1, #1
 800ace2:	4618      	mov	r0, r3
 800ace4:	f002 f858 	bl	800cd98 <RCCEx_PLL3_Config>
 800ace8:	4603      	mov	r3, r0
 800acea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800acee:	e00a      	b.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800acf0:	2301      	movs	r3, #1
 800acf2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800acf6:	e006      	b.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800acf8:	bf00      	nop
 800acfa:	e004      	b.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800acfc:	bf00      	nop
 800acfe:	e002      	b.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ad00:	bf00      	nop
 800ad02:	e000      	b.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ad04:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad06:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d10e      	bne.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ad0e:	4b06      	ldr	r3, [pc, #24]	; (800ad28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad12:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800ad16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ad1e:	4a02      	ldr	r2, [pc, #8]	; (800ad28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad20:	430b      	orrs	r3, r1
 800ad22:	6593      	str	r3, [r2, #88]	; 0x58
 800ad24:	e006      	b.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800ad26:	bf00      	nop
 800ad28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad30:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ad34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad3c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800ad40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ad44:	2300      	movs	r3, #0
 800ad46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ad4a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800ad4e:	460b      	mov	r3, r1
 800ad50:	4313      	orrs	r3, r2
 800ad52:	d037      	beq.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800ad54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad5e:	d00e      	beq.n	800ad7e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800ad60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad64:	d816      	bhi.n	800ad94 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d018      	beq.n	800ad9c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800ad6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad6e:	d111      	bne.n	800ad94 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad70:	4bc4      	ldr	r3, [pc, #784]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad74:	4ac3      	ldr	r2, [pc, #780]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ad7c:	e00f      	b.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ad7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad82:	3308      	adds	r3, #8
 800ad84:	2101      	movs	r1, #1
 800ad86:	4618      	mov	r0, r3
 800ad88:	f001 ff54 	bl	800cc34 <RCCEx_PLL2_Config>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ad92:	e004      	b.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad94:	2301      	movs	r3, #1
 800ad96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ad9a:	e000      	b.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800ad9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad9e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d10a      	bne.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ada6:	4bb7      	ldr	r3, [pc, #732]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ada8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adaa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800adae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adb4:	4ab3      	ldr	r2, [pc, #716]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800adb6:	430b      	orrs	r3, r1
 800adb8:	6513      	str	r3, [r2, #80]	; 0x50
 800adba:	e003      	b.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adbc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800adc0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800adc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adcc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800add0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800add4:	2300      	movs	r3, #0
 800add6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800adda:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800adde:	460b      	mov	r3, r1
 800ade0:	4313      	orrs	r3, r2
 800ade2:	d039      	beq.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800ade4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ade8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adea:	2b03      	cmp	r3, #3
 800adec:	d81c      	bhi.n	800ae28 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800adee:	a201      	add	r2, pc, #4	; (adr r2, 800adf4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800adf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adf4:	0800ae31 	.word	0x0800ae31
 800adf8:	0800ae05 	.word	0x0800ae05
 800adfc:	0800ae13 	.word	0x0800ae13
 800ae00:	0800ae31 	.word	0x0800ae31
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae04:	4b9f      	ldr	r3, [pc, #636]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae08:	4a9e      	ldr	r2, [pc, #632]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ae10:	e00f      	b.n	800ae32 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae16:	3308      	adds	r3, #8
 800ae18:	2102      	movs	r1, #2
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f001 ff0a 	bl	800cc34 <RCCEx_PLL2_Config>
 800ae20:	4603      	mov	r3, r0
 800ae22:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ae26:	e004      	b.n	800ae32 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae2e:	e000      	b.n	800ae32 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800ae30:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae32:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d10a      	bne.n	800ae50 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ae3a:	4b92      	ldr	r3, [pc, #584]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae3e:	f023 0103 	bic.w	r1, r3, #3
 800ae42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae48:	4a8e      	ldr	r2, [pc, #568]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae4a:	430b      	orrs	r3, r1
 800ae4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ae4e:	e003      	b.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae54:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ae58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae60:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800ae64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ae68:	2300      	movs	r3, #0
 800ae6a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ae6e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ae72:	460b      	mov	r3, r1
 800ae74:	4313      	orrs	r3, r2
 800ae76:	f000 8099 	beq.w	800afac <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ae7a:	4b83      	ldr	r3, [pc, #524]	; (800b088 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4a82      	ldr	r2, [pc, #520]	; (800b088 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ae80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae84:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ae86:	f7f8 fd81 	bl	800398c <HAL_GetTick>
 800ae8a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ae8e:	e00b      	b.n	800aea8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae90:	f7f8 fd7c 	bl	800398c <HAL_GetTick>
 800ae94:	4602      	mov	r2, r0
 800ae96:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ae9a:	1ad3      	subs	r3, r2, r3
 800ae9c:	2b64      	cmp	r3, #100	; 0x64
 800ae9e:	d903      	bls.n	800aea8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800aea0:	2303      	movs	r3, #3
 800aea2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aea6:	e005      	b.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aea8:	4b77      	ldr	r3, [pc, #476]	; (800b088 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d0ed      	beq.n	800ae90 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800aeb4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d173      	bne.n	800afa4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800aebc:	4b71      	ldr	r3, [pc, #452]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aebe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aec4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aec8:	4053      	eors	r3, r2
 800aeca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d015      	beq.n	800aefe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800aed2:	4b6c      	ldr	r3, [pc, #432]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aed6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aeda:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800aede:	4b69      	ldr	r3, [pc, #420]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aee2:	4a68      	ldr	r2, [pc, #416]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aee8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aeea:	4b66      	ldr	r3, [pc, #408]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aeec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeee:	4a65      	ldr	r2, [pc, #404]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aef0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aef4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800aef6:	4a63      	ldr	r2, [pc, #396]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aef8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800aefc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800aefe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af0a:	d118      	bne.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af0c:	f7f8 fd3e 	bl	800398c <HAL_GetTick>
 800af10:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af14:	e00d      	b.n	800af32 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af16:	f7f8 fd39 	bl	800398c <HAL_GetTick>
 800af1a:	4602      	mov	r2, r0
 800af1c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800af20:	1ad2      	subs	r2, r2, r3
 800af22:	f241 3388 	movw	r3, #5000	; 0x1388
 800af26:	429a      	cmp	r2, r3
 800af28:	d903      	bls.n	800af32 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800af2a:	2303      	movs	r3, #3
 800af2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800af30:	e005      	b.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af32:	4b54      	ldr	r3, [pc, #336]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af36:	f003 0302 	and.w	r3, r3, #2
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d0eb      	beq.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800af3e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af42:	2b00      	cmp	r3, #0
 800af44:	d129      	bne.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800af46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af56:	d10e      	bne.n	800af76 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800af58:	4b4a      	ldr	r3, [pc, #296]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af5a:	691b      	ldr	r3, [r3, #16]
 800af5c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800af60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af68:	091a      	lsrs	r2, r3, #4
 800af6a:	4b48      	ldr	r3, [pc, #288]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800af6c:	4013      	ands	r3, r2
 800af6e:	4a45      	ldr	r2, [pc, #276]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af70:	430b      	orrs	r3, r1
 800af72:	6113      	str	r3, [r2, #16]
 800af74:	e005      	b.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800af76:	4b43      	ldr	r3, [pc, #268]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af78:	691b      	ldr	r3, [r3, #16]
 800af7a:	4a42      	ldr	r2, [pc, #264]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af7c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800af80:	6113      	str	r3, [r2, #16]
 800af82:	4b40      	ldr	r3, [pc, #256]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af84:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800af86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800af92:	4a3c      	ldr	r2, [pc, #240]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af94:	430b      	orrs	r3, r1
 800af96:	6713      	str	r3, [r2, #112]	; 0x70
 800af98:	e008      	b.n	800afac <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800af9a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af9e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800afa2:	e003      	b.n	800afac <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afa4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afa8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800afac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb4:	f002 0301 	and.w	r3, r2, #1
 800afb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800afbc:	2300      	movs	r3, #0
 800afbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800afc2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800afc6:	460b      	mov	r3, r1
 800afc8:	4313      	orrs	r3, r2
 800afca:	f000 808f 	beq.w	800b0ec <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800afce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800afd4:	2b28      	cmp	r3, #40	; 0x28
 800afd6:	d871      	bhi.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800afd8:	a201      	add	r2, pc, #4	; (adr r2, 800afe0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800afda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afde:	bf00      	nop
 800afe0:	0800b0c5 	.word	0x0800b0c5
 800afe4:	0800b0bd 	.word	0x0800b0bd
 800afe8:	0800b0bd 	.word	0x0800b0bd
 800afec:	0800b0bd 	.word	0x0800b0bd
 800aff0:	0800b0bd 	.word	0x0800b0bd
 800aff4:	0800b0bd 	.word	0x0800b0bd
 800aff8:	0800b0bd 	.word	0x0800b0bd
 800affc:	0800b0bd 	.word	0x0800b0bd
 800b000:	0800b091 	.word	0x0800b091
 800b004:	0800b0bd 	.word	0x0800b0bd
 800b008:	0800b0bd 	.word	0x0800b0bd
 800b00c:	0800b0bd 	.word	0x0800b0bd
 800b010:	0800b0bd 	.word	0x0800b0bd
 800b014:	0800b0bd 	.word	0x0800b0bd
 800b018:	0800b0bd 	.word	0x0800b0bd
 800b01c:	0800b0bd 	.word	0x0800b0bd
 800b020:	0800b0a7 	.word	0x0800b0a7
 800b024:	0800b0bd 	.word	0x0800b0bd
 800b028:	0800b0bd 	.word	0x0800b0bd
 800b02c:	0800b0bd 	.word	0x0800b0bd
 800b030:	0800b0bd 	.word	0x0800b0bd
 800b034:	0800b0bd 	.word	0x0800b0bd
 800b038:	0800b0bd 	.word	0x0800b0bd
 800b03c:	0800b0bd 	.word	0x0800b0bd
 800b040:	0800b0c5 	.word	0x0800b0c5
 800b044:	0800b0bd 	.word	0x0800b0bd
 800b048:	0800b0bd 	.word	0x0800b0bd
 800b04c:	0800b0bd 	.word	0x0800b0bd
 800b050:	0800b0bd 	.word	0x0800b0bd
 800b054:	0800b0bd 	.word	0x0800b0bd
 800b058:	0800b0bd 	.word	0x0800b0bd
 800b05c:	0800b0bd 	.word	0x0800b0bd
 800b060:	0800b0c5 	.word	0x0800b0c5
 800b064:	0800b0bd 	.word	0x0800b0bd
 800b068:	0800b0bd 	.word	0x0800b0bd
 800b06c:	0800b0bd 	.word	0x0800b0bd
 800b070:	0800b0bd 	.word	0x0800b0bd
 800b074:	0800b0bd 	.word	0x0800b0bd
 800b078:	0800b0bd 	.word	0x0800b0bd
 800b07c:	0800b0bd 	.word	0x0800b0bd
 800b080:	0800b0c5 	.word	0x0800b0c5
 800b084:	58024400 	.word	0x58024400
 800b088:	58024800 	.word	0x58024800
 800b08c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b090:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b094:	3308      	adds	r3, #8
 800b096:	2101      	movs	r1, #1
 800b098:	4618      	mov	r0, r3
 800b09a:	f001 fdcb 	bl	800cc34 <RCCEx_PLL2_Config>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b0a4:	e00f      	b.n	800b0c6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b0a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0aa:	3328      	adds	r3, #40	; 0x28
 800b0ac:	2101      	movs	r1, #1
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f001 fe72 	bl	800cd98 <RCCEx_PLL3_Config>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b0ba:	e004      	b.n	800b0c6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b0bc:	2301      	movs	r3, #1
 800b0be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b0c2:	e000      	b.n	800b0c6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b0c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d10a      	bne.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b0ce:	4bbf      	ldr	r3, [pc, #764]	; (800b3cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b0d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0d2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b0d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b0dc:	4abb      	ldr	r2, [pc, #748]	; (800b3cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b0de:	430b      	orrs	r3, r1
 800b0e0:	6553      	str	r3, [r2, #84]	; 0x54
 800b0e2:	e003      	b.n	800b0ec <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0e8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b0ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f4:	f002 0302 	and.w	r3, r2, #2
 800b0f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b102:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b106:	460b      	mov	r3, r1
 800b108:	4313      	orrs	r3, r2
 800b10a:	d041      	beq.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b10c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b112:	2b05      	cmp	r3, #5
 800b114:	d824      	bhi.n	800b160 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800b116:	a201      	add	r2, pc, #4	; (adr r2, 800b11c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800b118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b11c:	0800b169 	.word	0x0800b169
 800b120:	0800b135 	.word	0x0800b135
 800b124:	0800b14b 	.word	0x0800b14b
 800b128:	0800b169 	.word	0x0800b169
 800b12c:	0800b169 	.word	0x0800b169
 800b130:	0800b169 	.word	0x0800b169
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b138:	3308      	adds	r3, #8
 800b13a:	2101      	movs	r1, #1
 800b13c:	4618      	mov	r0, r3
 800b13e:	f001 fd79 	bl	800cc34 <RCCEx_PLL2_Config>
 800b142:	4603      	mov	r3, r0
 800b144:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b148:	e00f      	b.n	800b16a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b14a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b14e:	3328      	adds	r3, #40	; 0x28
 800b150:	2101      	movs	r1, #1
 800b152:	4618      	mov	r0, r3
 800b154:	f001 fe20 	bl	800cd98 <RCCEx_PLL3_Config>
 800b158:	4603      	mov	r3, r0
 800b15a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b15e:	e004      	b.n	800b16a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b160:	2301      	movs	r3, #1
 800b162:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b166:	e000      	b.n	800b16a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800b168:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b16a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d10a      	bne.n	800b188 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b172:	4b96      	ldr	r3, [pc, #600]	; (800b3cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b176:	f023 0107 	bic.w	r1, r3, #7
 800b17a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b17e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b180:	4a92      	ldr	r2, [pc, #584]	; (800b3cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b182:	430b      	orrs	r3, r1
 800b184:	6553      	str	r3, [r2, #84]	; 0x54
 800b186:	e003      	b.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b188:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b18c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b190:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b198:	f002 0304 	and.w	r3, r2, #4
 800b19c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b1a6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b1aa:	460b      	mov	r3, r1
 800b1ac:	4313      	orrs	r3, r2
 800b1ae:	d044      	beq.n	800b23a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b1b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1b8:	2b05      	cmp	r3, #5
 800b1ba:	d825      	bhi.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800b1bc:	a201      	add	r2, pc, #4	; (adr r2, 800b1c4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800b1be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1c2:	bf00      	nop
 800b1c4:	0800b211 	.word	0x0800b211
 800b1c8:	0800b1dd 	.word	0x0800b1dd
 800b1cc:	0800b1f3 	.word	0x0800b1f3
 800b1d0:	0800b211 	.word	0x0800b211
 800b1d4:	0800b211 	.word	0x0800b211
 800b1d8:	0800b211 	.word	0x0800b211
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b1dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1e0:	3308      	adds	r3, #8
 800b1e2:	2101      	movs	r1, #1
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f001 fd25 	bl	800cc34 <RCCEx_PLL2_Config>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b1f0:	e00f      	b.n	800b212 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b1f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1f6:	3328      	adds	r3, #40	; 0x28
 800b1f8:	2101      	movs	r1, #1
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f001 fdcc 	bl	800cd98 <RCCEx_PLL3_Config>
 800b200:	4603      	mov	r3, r0
 800b202:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b206:	e004      	b.n	800b212 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b208:	2301      	movs	r3, #1
 800b20a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b20e:	e000      	b.n	800b212 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800b210:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b212:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b216:	2b00      	cmp	r3, #0
 800b218:	d10b      	bne.n	800b232 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b21a:	4b6c      	ldr	r3, [pc, #432]	; (800b3cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b21c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b21e:	f023 0107 	bic.w	r1, r3, #7
 800b222:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b22a:	4a68      	ldr	r2, [pc, #416]	; (800b3cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b22c:	430b      	orrs	r3, r1
 800b22e:	6593      	str	r3, [r2, #88]	; 0x58
 800b230:	e003      	b.n	800b23a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b232:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b236:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b23a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b242:	f002 0320 	and.w	r3, r2, #32
 800b246:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b24a:	2300      	movs	r3, #0
 800b24c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b250:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b254:	460b      	mov	r3, r1
 800b256:	4313      	orrs	r3, r2
 800b258:	d055      	beq.n	800b306 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b25a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b25e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b262:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b266:	d033      	beq.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800b268:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b26c:	d82c      	bhi.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b26e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b272:	d02f      	beq.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b278:	d826      	bhi.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b27a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b27e:	d02b      	beq.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b280:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b284:	d820      	bhi.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b286:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b28a:	d012      	beq.n	800b2b2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b28c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b290:	d81a      	bhi.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b292:	2b00      	cmp	r3, #0
 800b294:	d022      	beq.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b296:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b29a:	d115      	bne.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b29c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2a0:	3308      	adds	r3, #8
 800b2a2:	2100      	movs	r1, #0
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f001 fcc5 	bl	800cc34 <RCCEx_PLL2_Config>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b2b0:	e015      	b.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b2b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2b6:	3328      	adds	r3, #40	; 0x28
 800b2b8:	2102      	movs	r1, #2
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f001 fd6c 	bl	800cd98 <RCCEx_PLL3_Config>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b2c6:	e00a      	b.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b2ce:	e006      	b.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b2d0:	bf00      	nop
 800b2d2:	e004      	b.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b2d4:	bf00      	nop
 800b2d6:	e002      	b.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b2d8:	bf00      	nop
 800b2da:	e000      	b.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b2dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d10b      	bne.n	800b2fe <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b2e6:	4b39      	ldr	r3, [pc, #228]	; (800b3cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b2e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2ea:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b2ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2f6:	4a35      	ldr	r2, [pc, #212]	; (800b3cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b2f8:	430b      	orrs	r3, r1
 800b2fa:	6553      	str	r3, [r2, #84]	; 0x54
 800b2fc:	e003      	b.n	800b306 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b302:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b30e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b312:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b316:	2300      	movs	r3, #0
 800b318:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b31c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b320:	460b      	mov	r3, r1
 800b322:	4313      	orrs	r3, r2
 800b324:	d058      	beq.n	800b3d8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b326:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b32a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b32e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b332:	d033      	beq.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b334:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b338:	d82c      	bhi.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b33a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b33e:	d02f      	beq.n	800b3a0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b344:	d826      	bhi.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b346:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b34a:	d02b      	beq.n	800b3a4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b34c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b350:	d820      	bhi.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b356:	d012      	beq.n	800b37e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b358:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b35c:	d81a      	bhi.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d022      	beq.n	800b3a8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b366:	d115      	bne.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b36c:	3308      	adds	r3, #8
 800b36e:	2100      	movs	r1, #0
 800b370:	4618      	mov	r0, r3
 800b372:	f001 fc5f 	bl	800cc34 <RCCEx_PLL2_Config>
 800b376:	4603      	mov	r3, r0
 800b378:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b37c:	e015      	b.n	800b3aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b37e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b382:	3328      	adds	r3, #40	; 0x28
 800b384:	2102      	movs	r1, #2
 800b386:	4618      	mov	r0, r3
 800b388:	f001 fd06 	bl	800cd98 <RCCEx_PLL3_Config>
 800b38c:	4603      	mov	r3, r0
 800b38e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b392:	e00a      	b.n	800b3aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b394:	2301      	movs	r3, #1
 800b396:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b39a:	e006      	b.n	800b3aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b39c:	bf00      	nop
 800b39e:	e004      	b.n	800b3aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b3a0:	bf00      	nop
 800b3a2:	e002      	b.n	800b3aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b3a4:	bf00      	nop
 800b3a6:	e000      	b.n	800b3aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b3a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d10e      	bne.n	800b3d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b3b2:	4b06      	ldr	r3, [pc, #24]	; (800b3cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b3b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3b6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b3ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b3c2:	4a02      	ldr	r2, [pc, #8]	; (800b3cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b3c4:	430b      	orrs	r3, r1
 800b3c6:	6593      	str	r3, [r2, #88]	; 0x58
 800b3c8:	e006      	b.n	800b3d8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b3ca:	bf00      	nop
 800b3cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3d4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b3d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b3e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b3ee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b3f2:	460b      	mov	r3, r1
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	d055      	beq.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b3f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b400:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b404:	d033      	beq.n	800b46e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800b406:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b40a:	d82c      	bhi.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b40c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b410:	d02f      	beq.n	800b472 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b412:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b416:	d826      	bhi.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b418:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b41c:	d02b      	beq.n	800b476 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b41e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b422:	d820      	bhi.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b424:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b428:	d012      	beq.n	800b450 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800b42a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b42e:	d81a      	bhi.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b430:	2b00      	cmp	r3, #0
 800b432:	d022      	beq.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b434:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b438:	d115      	bne.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b43a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b43e:	3308      	adds	r3, #8
 800b440:	2100      	movs	r1, #0
 800b442:	4618      	mov	r0, r3
 800b444:	f001 fbf6 	bl	800cc34 <RCCEx_PLL2_Config>
 800b448:	4603      	mov	r3, r0
 800b44a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b44e:	e015      	b.n	800b47c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b450:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b454:	3328      	adds	r3, #40	; 0x28
 800b456:	2102      	movs	r1, #2
 800b458:	4618      	mov	r0, r3
 800b45a:	f001 fc9d 	bl	800cd98 <RCCEx_PLL3_Config>
 800b45e:	4603      	mov	r3, r0
 800b460:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b464:	e00a      	b.n	800b47c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b466:	2301      	movs	r3, #1
 800b468:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b46c:	e006      	b.n	800b47c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b46e:	bf00      	nop
 800b470:	e004      	b.n	800b47c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b472:	bf00      	nop
 800b474:	e002      	b.n	800b47c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b476:	bf00      	nop
 800b478:	e000      	b.n	800b47c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b47a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b47c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b480:	2b00      	cmp	r3, #0
 800b482:	d10b      	bne.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b484:	4ba0      	ldr	r3, [pc, #640]	; (800b708 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b488:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b48c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b490:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b494:	4a9c      	ldr	r2, [pc, #624]	; (800b708 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b496:	430b      	orrs	r3, r1
 800b498:	6593      	str	r3, [r2, #88]	; 0x58
 800b49a:	e003      	b.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b49c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b4a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ac:	f002 0308 	and.w	r3, r2, #8
 800b4b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b4ba:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b4be:	460b      	mov	r3, r1
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	d01e      	beq.n	800b502 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800b4c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b4cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4d0:	d10c      	bne.n	800b4ec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b4d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4d6:	3328      	adds	r3, #40	; 0x28
 800b4d8:	2102      	movs	r1, #2
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f001 fc5c 	bl	800cd98 <RCCEx_PLL3_Config>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d002      	beq.n	800b4ec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b4ec:	4b86      	ldr	r3, [pc, #536]	; (800b708 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b4ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b4f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b4fc:	4a82      	ldr	r2, [pc, #520]	; (800b708 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b4fe:	430b      	orrs	r3, r1
 800b500:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b502:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50a:	f002 0310 	and.w	r3, r2, #16
 800b50e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b512:	2300      	movs	r3, #0
 800b514:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b518:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b51c:	460b      	mov	r3, r1
 800b51e:	4313      	orrs	r3, r2
 800b520:	d01e      	beq.n	800b560 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b522:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b52a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b52e:	d10c      	bne.n	800b54a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b534:	3328      	adds	r3, #40	; 0x28
 800b536:	2102      	movs	r1, #2
 800b538:	4618      	mov	r0, r3
 800b53a:	f001 fc2d 	bl	800cd98 <RCCEx_PLL3_Config>
 800b53e:	4603      	mov	r3, r0
 800b540:	2b00      	cmp	r3, #0
 800b542:	d002      	beq.n	800b54a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800b544:	2301      	movs	r3, #1
 800b546:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b54a:	4b6f      	ldr	r3, [pc, #444]	; (800b708 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b54c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b54e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b552:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b556:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b55a:	4a6b      	ldr	r2, [pc, #428]	; (800b708 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b55c:	430b      	orrs	r3, r1
 800b55e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b568:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b56c:	67bb      	str	r3, [r7, #120]	; 0x78
 800b56e:	2300      	movs	r3, #0
 800b570:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b572:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b576:	460b      	mov	r3, r1
 800b578:	4313      	orrs	r3, r2
 800b57a:	d03e      	beq.n	800b5fa <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b57c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b580:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b584:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b588:	d022      	beq.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b58a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b58e:	d81b      	bhi.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800b590:	2b00      	cmp	r3, #0
 800b592:	d003      	beq.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800b594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b598:	d00b      	beq.n	800b5b2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800b59a:	e015      	b.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b59c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5a0:	3308      	adds	r3, #8
 800b5a2:	2100      	movs	r1, #0
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f001 fb45 	bl	800cc34 <RCCEx_PLL2_Config>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b5b0:	e00f      	b.n	800b5d2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b5b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5b6:	3328      	adds	r3, #40	; 0x28
 800b5b8:	2102      	movs	r1, #2
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f001 fbec 	bl	800cd98 <RCCEx_PLL3_Config>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b5c6:	e004      	b.n	800b5d2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b5ce:	e000      	b.n	800b5d2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800b5d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d10b      	bne.n	800b5f2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b5da:	4b4b      	ldr	r3, [pc, #300]	; (800b708 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b5dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5de:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b5e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b5ea:	4a47      	ldr	r2, [pc, #284]	; (800b708 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b5ec:	430b      	orrs	r3, r1
 800b5ee:	6593      	str	r3, [r2, #88]	; 0x58
 800b5f0:	e003      	b.n	800b5fa <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5f6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b5fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b602:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b606:	673b      	str	r3, [r7, #112]	; 0x70
 800b608:	2300      	movs	r3, #0
 800b60a:	677b      	str	r3, [r7, #116]	; 0x74
 800b60c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b610:	460b      	mov	r3, r1
 800b612:	4313      	orrs	r3, r2
 800b614:	d03b      	beq.n	800b68e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b616:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b61a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b61e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b622:	d01f      	beq.n	800b664 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b624:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b628:	d818      	bhi.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800b62a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b62e:	d003      	beq.n	800b638 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800b630:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b634:	d007      	beq.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800b636:	e011      	b.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b638:	4b33      	ldr	r3, [pc, #204]	; (800b708 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b63c:	4a32      	ldr	r2, [pc, #200]	; (800b708 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b63e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b642:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b644:	e00f      	b.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b64a:	3328      	adds	r3, #40	; 0x28
 800b64c:	2101      	movs	r1, #1
 800b64e:	4618      	mov	r0, r3
 800b650:	f001 fba2 	bl	800cd98 <RCCEx_PLL3_Config>
 800b654:	4603      	mov	r3, r0
 800b656:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800b65a:	e004      	b.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b65c:	2301      	movs	r3, #1
 800b65e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b662:	e000      	b.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800b664:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b666:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d10b      	bne.n	800b686 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b66e:	4b26      	ldr	r3, [pc, #152]	; (800b708 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b672:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b67a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b67e:	4a22      	ldr	r2, [pc, #136]	; (800b708 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b680:	430b      	orrs	r3, r1
 800b682:	6553      	str	r3, [r2, #84]	; 0x54
 800b684:	e003      	b.n	800b68e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b686:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b68a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b68e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b696:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b69a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b69c:	2300      	movs	r3, #0
 800b69e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b6a0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b6a4:	460b      	mov	r3, r1
 800b6a6:	4313      	orrs	r3, r2
 800b6a8:	d034      	beq.n	800b714 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b6aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d003      	beq.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800b6b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6b8:	d007      	beq.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800b6ba:	e011      	b.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6bc:	4b12      	ldr	r3, [pc, #72]	; (800b708 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c0:	4a11      	ldr	r2, [pc, #68]	; (800b708 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b6c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b6c8:	e00e      	b.n	800b6e8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b6ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6ce:	3308      	adds	r3, #8
 800b6d0:	2102      	movs	r1, #2
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f001 faae 	bl	800cc34 <RCCEx_PLL2_Config>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b6de:	e003      	b.n	800b6e8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b6e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d10d      	bne.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b6f0:	4b05      	ldr	r3, [pc, #20]	; (800b708 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b6f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b6f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6fe:	4a02      	ldr	r2, [pc, #8]	; (800b708 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b700:	430b      	orrs	r3, r1
 800b702:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b704:	e006      	b.n	800b714 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800b706:	bf00      	nop
 800b708:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b70c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b710:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b720:	663b      	str	r3, [r7, #96]	; 0x60
 800b722:	2300      	movs	r3, #0
 800b724:	667b      	str	r3, [r7, #100]	; 0x64
 800b726:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b72a:	460b      	mov	r3, r1
 800b72c:	4313      	orrs	r3, r2
 800b72e:	d00c      	beq.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b734:	3328      	adds	r3, #40	; 0x28
 800b736:	2102      	movs	r1, #2
 800b738:	4618      	mov	r0, r3
 800b73a:	f001 fb2d 	bl	800cd98 <RCCEx_PLL3_Config>
 800b73e:	4603      	mov	r3, r0
 800b740:	2b00      	cmp	r3, #0
 800b742:	d002      	beq.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800b744:	2301      	movs	r3, #1
 800b746:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b74a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b752:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b756:	65bb      	str	r3, [r7, #88]	; 0x58
 800b758:	2300      	movs	r3, #0
 800b75a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b75c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b760:	460b      	mov	r3, r1
 800b762:	4313      	orrs	r3, r2
 800b764:	d036      	beq.n	800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b766:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b76a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b76c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b770:	d018      	beq.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800b772:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b776:	d811      	bhi.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b77c:	d014      	beq.n	800b7a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800b77e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b782:	d80b      	bhi.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b784:	2b00      	cmp	r3, #0
 800b786:	d011      	beq.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800b788:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b78c:	d106      	bne.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b78e:	4bb7      	ldr	r3, [pc, #732]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b792:	4ab6      	ldr	r2, [pc, #728]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b798:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b79a:	e008      	b.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b79c:	2301      	movs	r3, #1
 800b79e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b7a2:	e004      	b.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b7a4:	bf00      	nop
 800b7a6:	e002      	b.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b7a8:	bf00      	nop
 800b7aa:	e000      	b.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b7ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7ae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d10a      	bne.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b7b6:	4bad      	ldr	r3, [pc, #692]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b7b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b7be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7c4:	4aa9      	ldr	r2, [pc, #676]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b7c6:	430b      	orrs	r3, r1
 800b7c8:	6553      	str	r3, [r2, #84]	; 0x54
 800b7ca:	e003      	b.n	800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7d0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b7d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7dc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800b7e0:	653b      	str	r3, [r7, #80]	; 0x50
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	657b      	str	r3, [r7, #84]	; 0x54
 800b7e6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b7ea:	460b      	mov	r3, r1
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	d009      	beq.n	800b804 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b7f0:	4b9e      	ldr	r3, [pc, #632]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b7f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7f4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b7f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7fe:	4a9b      	ldr	r2, [pc, #620]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b800:	430b      	orrs	r3, r1
 800b802:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b804:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800b810:	64bb      	str	r3, [r7, #72]	; 0x48
 800b812:	2300      	movs	r3, #0
 800b814:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b816:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800b81a:	460b      	mov	r3, r1
 800b81c:	4313      	orrs	r3, r2
 800b81e:	d009      	beq.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b820:	4b92      	ldr	r3, [pc, #584]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b824:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800b828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b82c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b82e:	4a8f      	ldr	r2, [pc, #572]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b830:	430b      	orrs	r3, r1
 800b832:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b83c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800b840:	643b      	str	r3, [r7, #64]	; 0x40
 800b842:	2300      	movs	r3, #0
 800b844:	647b      	str	r3, [r7, #68]	; 0x44
 800b846:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b84a:	460b      	mov	r3, r1
 800b84c:	4313      	orrs	r3, r2
 800b84e:	d00e      	beq.n	800b86e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b850:	4b86      	ldr	r3, [pc, #536]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b852:	691b      	ldr	r3, [r3, #16]
 800b854:	4a85      	ldr	r2, [pc, #532]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b856:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b85a:	6113      	str	r3, [r2, #16]
 800b85c:	4b83      	ldr	r3, [pc, #524]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b85e:	6919      	ldr	r1, [r3, #16]
 800b860:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b864:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b868:	4a80      	ldr	r2, [pc, #512]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b86a:	430b      	orrs	r3, r1
 800b86c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b86e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b876:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b87a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b87c:	2300      	movs	r3, #0
 800b87e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b880:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b884:	460b      	mov	r3, r1
 800b886:	4313      	orrs	r3, r2
 800b888:	d009      	beq.n	800b89e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b88a:	4b78      	ldr	r3, [pc, #480]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b88c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b88e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b898:	4a74      	ldr	r2, [pc, #464]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b89a:	430b      	orrs	r3, r1
 800b89c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b89e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800b8aa:	633b      	str	r3, [r7, #48]	; 0x30
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	637b      	str	r3, [r7, #52]	; 0x34
 800b8b0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b8b4:	460b      	mov	r3, r1
 800b8b6:	4313      	orrs	r3, r2
 800b8b8:	d00a      	beq.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b8ba:	4b6c      	ldr	r3, [pc, #432]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8be:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800b8c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8ca:	4a68      	ldr	r2, [pc, #416]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8cc:	430b      	orrs	r3, r1
 800b8ce:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b8d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d8:	2100      	movs	r1, #0
 800b8da:	62b9      	str	r1, [r7, #40]	; 0x28
 800b8dc:	f003 0301 	and.w	r3, r3, #1
 800b8e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8e2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800b8e6:	460b      	mov	r3, r1
 800b8e8:	4313      	orrs	r3, r2
 800b8ea:	d011      	beq.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b8ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8f0:	3308      	adds	r3, #8
 800b8f2:	2100      	movs	r1, #0
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f001 f99d 	bl	800cc34 <RCCEx_PLL2_Config>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b900:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b904:	2b00      	cmp	r3, #0
 800b906:	d003      	beq.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b908:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b90c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b910:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b918:	2100      	movs	r1, #0
 800b91a:	6239      	str	r1, [r7, #32]
 800b91c:	f003 0302 	and.w	r3, r3, #2
 800b920:	627b      	str	r3, [r7, #36]	; 0x24
 800b922:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b926:	460b      	mov	r3, r1
 800b928:	4313      	orrs	r3, r2
 800b92a:	d011      	beq.n	800b950 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b92c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b930:	3308      	adds	r3, #8
 800b932:	2101      	movs	r1, #1
 800b934:	4618      	mov	r0, r3
 800b936:	f001 f97d 	bl	800cc34 <RCCEx_PLL2_Config>
 800b93a:	4603      	mov	r3, r0
 800b93c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b940:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b944:	2b00      	cmp	r3, #0
 800b946:	d003      	beq.n	800b950 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b948:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b94c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b958:	2100      	movs	r1, #0
 800b95a:	61b9      	str	r1, [r7, #24]
 800b95c:	f003 0304 	and.w	r3, r3, #4
 800b960:	61fb      	str	r3, [r7, #28]
 800b962:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b966:	460b      	mov	r3, r1
 800b968:	4313      	orrs	r3, r2
 800b96a:	d011      	beq.n	800b990 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b96c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b970:	3308      	adds	r3, #8
 800b972:	2102      	movs	r1, #2
 800b974:	4618      	mov	r0, r3
 800b976:	f001 f95d 	bl	800cc34 <RCCEx_PLL2_Config>
 800b97a:	4603      	mov	r3, r0
 800b97c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b980:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b984:	2b00      	cmp	r3, #0
 800b986:	d003      	beq.n	800b990 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b988:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b98c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b990:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b998:	2100      	movs	r1, #0
 800b99a:	6139      	str	r1, [r7, #16]
 800b99c:	f003 0308 	and.w	r3, r3, #8
 800b9a0:	617b      	str	r3, [r7, #20]
 800b9a2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b9a6:	460b      	mov	r3, r1
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	d011      	beq.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b9ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9b0:	3328      	adds	r3, #40	; 0x28
 800b9b2:	2100      	movs	r1, #0
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f001 f9ef 	bl	800cd98 <RCCEx_PLL3_Config>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800b9c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d003      	beq.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9cc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b9d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d8:	2100      	movs	r1, #0
 800b9da:	60b9      	str	r1, [r7, #8]
 800b9dc:	f003 0310 	and.w	r3, r3, #16
 800b9e0:	60fb      	str	r3, [r7, #12]
 800b9e2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b9e6:	460b      	mov	r3, r1
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	d011      	beq.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b9ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9f0:	3328      	adds	r3, #40	; 0x28
 800b9f2:	2101      	movs	r1, #1
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f001 f9cf 	bl	800cd98 <RCCEx_PLL3_Config>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ba00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d003      	beq.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba0c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ba10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba18:	2100      	movs	r1, #0
 800ba1a:	6039      	str	r1, [r7, #0]
 800ba1c:	f003 0320 	and.w	r3, r3, #32
 800ba20:	607b      	str	r3, [r7, #4]
 800ba22:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ba26:	460b      	mov	r3, r1
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	d011      	beq.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ba2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba30:	3328      	adds	r3, #40	; 0x28
 800ba32:	2102      	movs	r1, #2
 800ba34:	4618      	mov	r0, r3
 800ba36:	f001 f9af 	bl	800cd98 <RCCEx_PLL3_Config>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ba40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d003      	beq.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba4c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800ba50:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d101      	bne.n	800ba5c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	e000      	b.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800ba5c:	2301      	movs	r3, #1
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800ba64:	46bd      	mov	sp, r7
 800ba66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ba6a:	bf00      	nop
 800ba6c:	58024400 	.word	0x58024400

0800ba70 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b090      	sub	sp, #64	; 0x40
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ba7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba7e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800ba82:	430b      	orrs	r3, r1
 800ba84:	f040 8094 	bne.w	800bbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ba88:	4b9b      	ldr	r3, [pc, #620]	; (800bcf8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ba8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba8c:	f003 0307 	and.w	r3, r3, #7
 800ba90:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ba92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba94:	2b04      	cmp	r3, #4
 800ba96:	f200 8087 	bhi.w	800bba8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ba9a:	a201      	add	r2, pc, #4	; (adr r2, 800baa0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ba9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baa0:	0800bab5 	.word	0x0800bab5
 800baa4:	0800badd 	.word	0x0800badd
 800baa8:	0800bb05 	.word	0x0800bb05
 800baac:	0800bba1 	.word	0x0800bba1
 800bab0:	0800bb2d 	.word	0x0800bb2d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bab4:	4b90      	ldr	r3, [pc, #576]	; (800bcf8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800babc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bac0:	d108      	bne.n	800bad4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bac6:	4618      	mov	r0, r3
 800bac8:	f000 ff62 	bl	800c990 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bace:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bad0:	f000 bc93 	b.w	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bad4:	2300      	movs	r3, #0
 800bad6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bad8:	f000 bc8f 	b.w	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800badc:	4b86      	ldr	r3, [pc, #536]	; (800bcf8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bae4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bae8:	d108      	bne.n	800bafc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800baea:	f107 0318 	add.w	r3, r7, #24
 800baee:	4618      	mov	r0, r3
 800baf0:	f000 fca6 	bl	800c440 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800baf4:	69bb      	ldr	r3, [r7, #24]
 800baf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800baf8:	f000 bc7f 	b.w	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bafc:	2300      	movs	r3, #0
 800bafe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb00:	f000 bc7b 	b.w	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bb04:	4b7c      	ldr	r3, [pc, #496]	; (800bcf8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb10:	d108      	bne.n	800bb24 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb12:	f107 030c 	add.w	r3, r7, #12
 800bb16:	4618      	mov	r0, r3
 800bb18:	f000 fde6 	bl	800c6e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb20:	f000 bc6b 	b.w	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb24:	2300      	movs	r3, #0
 800bb26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb28:	f000 bc67 	b.w	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bb2c:	4b72      	ldr	r3, [pc, #456]	; (800bcf8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bb34:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bb36:	4b70      	ldr	r3, [pc, #448]	; (800bcf8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f003 0304 	and.w	r3, r3, #4
 800bb3e:	2b04      	cmp	r3, #4
 800bb40:	d10c      	bne.n	800bb5c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bb42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d109      	bne.n	800bb5c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb48:	4b6b      	ldr	r3, [pc, #428]	; (800bcf8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	08db      	lsrs	r3, r3, #3
 800bb4e:	f003 0303 	and.w	r3, r3, #3
 800bb52:	4a6a      	ldr	r2, [pc, #424]	; (800bcfc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bb54:	fa22 f303 	lsr.w	r3, r2, r3
 800bb58:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb5a:	e01f      	b.n	800bb9c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bb5c:	4b66      	ldr	r3, [pc, #408]	; (800bcf8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb68:	d106      	bne.n	800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800bb6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb70:	d102      	bne.n	800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bb72:	4b63      	ldr	r3, [pc, #396]	; (800bd00 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800bb74:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb76:	e011      	b.n	800bb9c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bb78:	4b5f      	ldr	r3, [pc, #380]	; (800bcf8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb84:	d106      	bne.n	800bb94 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bb86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb8c:	d102      	bne.n	800bb94 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bb8e:	4b5d      	ldr	r3, [pc, #372]	; (800bd04 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bb90:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb92:	e003      	b.n	800bb9c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bb94:	2300      	movs	r3, #0
 800bb96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bb98:	f000 bc2f 	b.w	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bb9c:	f000 bc2d 	b.w	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bba0:	4b59      	ldr	r3, [pc, #356]	; (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bba2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bba4:	f000 bc29 	b.w	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbac:	f000 bc25 	b.w	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800bbb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbb4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800bbb8:	430b      	orrs	r3, r1
 800bbba:	f040 80a7 	bne.w	800bd0c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800bbbe:	4b4e      	ldr	r3, [pc, #312]	; (800bcf8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bbc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbc2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800bbc6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bbc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bbce:	d054      	beq.n	800bc7a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800bbd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bbd6:	f200 808b 	bhi.w	800bcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbdc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bbe0:	f000 8083 	beq.w	800bcea <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800bbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bbea:	f200 8081 	bhi.w	800bcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bbf4:	d02f      	beq.n	800bc56 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800bbf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bbfc:	d878      	bhi.n	800bcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bbfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d004      	beq.n	800bc0e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800bc04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bc0a:	d012      	beq.n	800bc32 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800bc0c:	e070      	b.n	800bcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bc0e:	4b3a      	ldr	r3, [pc, #232]	; (800bcf8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc1a:	d107      	bne.n	800bc2c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bc1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc20:	4618      	mov	r0, r3
 800bc22:	f000 feb5 	bl	800c990 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc2a:	e3e6      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc30:	e3e3      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bc32:	4b31      	ldr	r3, [pc, #196]	; (800bcf8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc3e:	d107      	bne.n	800bc50 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc40:	f107 0318 	add.w	r3, r7, #24
 800bc44:	4618      	mov	r0, r3
 800bc46:	f000 fbfb 	bl	800c440 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bc4a:	69bb      	ldr	r3, [r7, #24]
 800bc4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc4e:	e3d4      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc50:	2300      	movs	r3, #0
 800bc52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc54:	e3d1      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bc56:	4b28      	ldr	r3, [pc, #160]	; (800bcf8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc62:	d107      	bne.n	800bc74 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc64:	f107 030c 	add.w	r3, r7, #12
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f000 fd3d 	bl	800c6e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc72:	e3c2      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc74:	2300      	movs	r3, #0
 800bc76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc78:	e3bf      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bc7a:	4b1f      	ldr	r3, [pc, #124]	; (800bcf8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bc82:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bc84:	4b1c      	ldr	r3, [pc, #112]	; (800bcf8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f003 0304 	and.w	r3, r3, #4
 800bc8c:	2b04      	cmp	r3, #4
 800bc8e:	d10c      	bne.n	800bcaa <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800bc90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d109      	bne.n	800bcaa <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc96:	4b18      	ldr	r3, [pc, #96]	; (800bcf8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	08db      	lsrs	r3, r3, #3
 800bc9c:	f003 0303 	and.w	r3, r3, #3
 800bca0:	4a16      	ldr	r2, [pc, #88]	; (800bcfc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bca2:	fa22 f303 	lsr.w	r3, r2, r3
 800bca6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bca8:	e01e      	b.n	800bce8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bcaa:	4b13      	ldr	r3, [pc, #76]	; (800bcf8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcb6:	d106      	bne.n	800bcc6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800bcb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bcbe:	d102      	bne.n	800bcc6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bcc0:	4b0f      	ldr	r3, [pc, #60]	; (800bd00 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800bcc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcc4:	e010      	b.n	800bce8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bcc6:	4b0c      	ldr	r3, [pc, #48]	; (800bcf8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bcd2:	d106      	bne.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800bcd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcda:	d102      	bne.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bcdc:	4b09      	ldr	r3, [pc, #36]	; (800bd04 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bcde:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bce0:	e002      	b.n	800bce8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bce2:	2300      	movs	r3, #0
 800bce4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bce6:	e388      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bce8:	e387      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bcea:	4b07      	ldr	r3, [pc, #28]	; (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bcec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcee:	e384      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcf4:	e381      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bcf6:	bf00      	nop
 800bcf8:	58024400 	.word	0x58024400
 800bcfc:	03d09000 	.word	0x03d09000
 800bd00:	003d0900 	.word	0x003d0900
 800bd04:	02faf080 	.word	0x02faf080
 800bd08:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800bd0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd10:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800bd14:	430b      	orrs	r3, r1
 800bd16:	f040 809c 	bne.w	800be52 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800bd1a:	4b9e      	ldr	r3, [pc, #632]	; (800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bd1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd1e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800bd22:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bd24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bd2a:	d054      	beq.n	800bdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800bd2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bd32:	f200 808b 	bhi.w	800be4c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bd36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd38:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bd3c:	f000 8083 	beq.w	800be46 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800bd40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd42:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bd46:	f200 8081 	bhi.w	800be4c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bd4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd50:	d02f      	beq.n	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800bd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd58:	d878      	bhi.n	800be4c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d004      	beq.n	800bd6a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800bd60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bd66:	d012      	beq.n	800bd8e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800bd68:	e070      	b.n	800be4c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bd6a:	4b8a      	ldr	r3, [pc, #552]	; (800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd76:	d107      	bne.n	800bd88 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f000 fe07 	bl	800c990 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd86:	e338      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd8c:	e335      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd8e:	4b81      	ldr	r3, [pc, #516]	; (800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd9a:	d107      	bne.n	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd9c:	f107 0318 	add.w	r3, r7, #24
 800bda0:	4618      	mov	r0, r3
 800bda2:	f000 fb4d 	bl	800c440 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bda6:	69bb      	ldr	r3, [r7, #24]
 800bda8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bdaa:	e326      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bdac:	2300      	movs	r3, #0
 800bdae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdb0:	e323      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bdb2:	4b78      	ldr	r3, [pc, #480]	; (800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bdba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdbe:	d107      	bne.n	800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bdc0:	f107 030c 	add.w	r3, r7, #12
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f000 fc8f 	bl	800c6e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bdce:	e314      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdd4:	e311      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bdd6:	4b6f      	ldr	r3, [pc, #444]	; (800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bdd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdda:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bdde:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bde0:	4b6c      	ldr	r3, [pc, #432]	; (800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f003 0304 	and.w	r3, r3, #4
 800bde8:	2b04      	cmp	r3, #4
 800bdea:	d10c      	bne.n	800be06 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800bdec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d109      	bne.n	800be06 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bdf2:	4b68      	ldr	r3, [pc, #416]	; (800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	08db      	lsrs	r3, r3, #3
 800bdf8:	f003 0303 	and.w	r3, r3, #3
 800bdfc:	4a66      	ldr	r2, [pc, #408]	; (800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800bdfe:	fa22 f303 	lsr.w	r3, r2, r3
 800be02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be04:	e01e      	b.n	800be44 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800be06:	4b63      	ldr	r3, [pc, #396]	; (800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be12:	d106      	bne.n	800be22 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800be14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be1a:	d102      	bne.n	800be22 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800be1c:	4b5f      	ldr	r3, [pc, #380]	; (800bf9c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800be1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be20:	e010      	b.n	800be44 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800be22:	4b5c      	ldr	r3, [pc, #368]	; (800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be2e:	d106      	bne.n	800be3e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800be30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be36:	d102      	bne.n	800be3e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800be38:	4b59      	ldr	r3, [pc, #356]	; (800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800be3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be3c:	e002      	b.n	800be44 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800be3e:	2300      	movs	r3, #0
 800be40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800be42:	e2da      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800be44:	e2d9      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800be46:	4b57      	ldr	r3, [pc, #348]	; (800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800be48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be4a:	e2d6      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800be4c:	2300      	movs	r3, #0
 800be4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be50:	e2d3      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800be52:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be56:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800be5a:	430b      	orrs	r3, r1
 800be5c:	f040 80a7 	bne.w	800bfae <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800be60:	4b4c      	ldr	r3, [pc, #304]	; (800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be64:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800be68:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800be6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be70:	d055      	beq.n	800bf1e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800be72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be78:	f200 8096 	bhi.w	800bfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800be7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800be82:	f000 8084 	beq.w	800bf8e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800be86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800be8c:	f200 808c 	bhi.w	800bfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800be90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be96:	d030      	beq.n	800befa <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800be98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be9e:	f200 8083 	bhi.w	800bfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d004      	beq.n	800beb2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800bea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800beae:	d012      	beq.n	800bed6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800beb0:	e07a      	b.n	800bfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800beb2:	4b38      	ldr	r3, [pc, #224]	; (800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800beba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bebe:	d107      	bne.n	800bed0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bec4:	4618      	mov	r0, r3
 800bec6:	f000 fd63 	bl	800c990 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800beca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800becc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bece:	e294      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bed0:	2300      	movs	r3, #0
 800bed2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bed4:	e291      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bed6:	4b2f      	ldr	r3, [pc, #188]	; (800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bede:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bee2:	d107      	bne.n	800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bee4:	f107 0318 	add.w	r3, r7, #24
 800bee8:	4618      	mov	r0, r3
 800beea:	f000 faa9 	bl	800c440 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800beee:	69bb      	ldr	r3, [r7, #24]
 800bef0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bef2:	e282      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bef4:	2300      	movs	r3, #0
 800bef6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bef8:	e27f      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800befa:	4b26      	ldr	r3, [pc, #152]	; (800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf06:	d107      	bne.n	800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf08:	f107 030c 	add.w	r3, r7, #12
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f000 fbeb 	bl	800c6e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf16:	e270      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf1c:	e26d      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bf1e:	4b1d      	ldr	r3, [pc, #116]	; (800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bf26:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bf28:	4b1a      	ldr	r3, [pc, #104]	; (800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	f003 0304 	and.w	r3, r3, #4
 800bf30:	2b04      	cmp	r3, #4
 800bf32:	d10c      	bne.n	800bf4e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800bf34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d109      	bne.n	800bf4e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf3a:	4b16      	ldr	r3, [pc, #88]	; (800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	08db      	lsrs	r3, r3, #3
 800bf40:	f003 0303 	and.w	r3, r3, #3
 800bf44:	4a14      	ldr	r2, [pc, #80]	; (800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800bf46:	fa22 f303 	lsr.w	r3, r2, r3
 800bf4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf4c:	e01e      	b.n	800bf8c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bf4e:	4b11      	ldr	r3, [pc, #68]	; (800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf5a:	d106      	bne.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800bf5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf62:	d102      	bne.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bf64:	4b0d      	ldr	r3, [pc, #52]	; (800bf9c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800bf66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf68:	e010      	b.n	800bf8c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bf6a:	4b0a      	ldr	r3, [pc, #40]	; (800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf76:	d106      	bne.n	800bf86 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800bf78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf7e:	d102      	bne.n	800bf86 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bf80:	4b07      	ldr	r3, [pc, #28]	; (800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf84:	e002      	b.n	800bf8c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bf86:	2300      	movs	r3, #0
 800bf88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bf8a:	e236      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bf8c:	e235      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bf8e:	4b05      	ldr	r3, [pc, #20]	; (800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bf90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf92:	e232      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bf94:	58024400 	.word	0x58024400
 800bf98:	03d09000 	.word	0x03d09000
 800bf9c:	003d0900 	.word	0x003d0900
 800bfa0:	02faf080 	.word	0x02faf080
 800bfa4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfac:	e225      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800bfae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfb2:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800bfb6:	430b      	orrs	r3, r1
 800bfb8:	f040 8085 	bne.w	800c0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800bfbc:	4b9c      	ldr	r3, [pc, #624]	; (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bfbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfc0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800bfc4:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800bfc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bfcc:	d06b      	beq.n	800c0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800bfce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bfd4:	d874      	bhi.n	800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bfd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bfdc:	d056      	beq.n	800c08c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800bfde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bfe4:	d86c      	bhi.n	800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bfe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bfec:	d03b      	beq.n	800c066 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800bfee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bff0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bff4:	d864      	bhi.n	800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bff8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bffc:	d021      	beq.n	800c042 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800bffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c000:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c004:	d85c      	bhi.n	800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d004      	beq.n	800c016 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800c00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c00e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c012:	d004      	beq.n	800c01e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800c014:	e054      	b.n	800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c016:	f7fe fb5f 	bl	800a6d8 <HAL_RCC_GetPCLK1Freq>
 800c01a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c01c:	e1ed      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c01e:	4b84      	ldr	r3, [pc, #528]	; (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c026:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c02a:	d107      	bne.n	800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c02c:	f107 0318 	add.w	r3, r7, #24
 800c030:	4618      	mov	r0, r3
 800c032:	f000 fa05 	bl	800c440 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c036:	69fb      	ldr	r3, [r7, #28]
 800c038:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c03a:	e1de      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c03c:	2300      	movs	r3, #0
 800c03e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c040:	e1db      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c042:	4b7b      	ldr	r3, [pc, #492]	; (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c04a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c04e:	d107      	bne.n	800c060 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c050:	f107 030c 	add.w	r3, r7, #12
 800c054:	4618      	mov	r0, r3
 800c056:	f000 fb47 	bl	800c6e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c05e:	e1cc      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c060:	2300      	movs	r3, #0
 800c062:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c064:	e1c9      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c066:	4b72      	ldr	r3, [pc, #456]	; (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f003 0304 	and.w	r3, r3, #4
 800c06e:	2b04      	cmp	r3, #4
 800c070:	d109      	bne.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c072:	4b6f      	ldr	r3, [pc, #444]	; (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	08db      	lsrs	r3, r3, #3
 800c078:	f003 0303 	and.w	r3, r3, #3
 800c07c:	4a6d      	ldr	r2, [pc, #436]	; (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c07e:	fa22 f303 	lsr.w	r3, r2, r3
 800c082:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c084:	e1b9      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c086:	2300      	movs	r3, #0
 800c088:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c08a:	e1b6      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c08c:	4b68      	ldr	r3, [pc, #416]	; (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c098:	d102      	bne.n	800c0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800c09a:	4b67      	ldr	r3, [pc, #412]	; (800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c09c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c09e:	e1ac      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0a4:	e1a9      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c0a6:	4b62      	ldr	r3, [pc, #392]	; (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0b2:	d102      	bne.n	800c0ba <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800c0b4:	4b61      	ldr	r3, [pc, #388]	; (800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0b8:	e19f      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0be:	e19c      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0c4:	e199      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c0c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0ca:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c0ce:	430b      	orrs	r3, r1
 800c0d0:	d173      	bne.n	800c1ba <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c0d2:	4b57      	ldr	r3, [pc, #348]	; (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c0d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c0da:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0e2:	d02f      	beq.n	800c144 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800c0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0ea:	d863      	bhi.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800c0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d004      	beq.n	800c0fc <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800c0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0f8:	d012      	beq.n	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800c0fa:	e05b      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c0fc:	4b4c      	ldr	r3, [pc, #304]	; (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c104:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c108:	d107      	bne.n	800c11a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c10a:	f107 0318 	add.w	r3, r7, #24
 800c10e:	4618      	mov	r0, r3
 800c110:	f000 f996 	bl	800c440 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c114:	69bb      	ldr	r3, [r7, #24]
 800c116:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c118:	e16f      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c11a:	2300      	movs	r3, #0
 800c11c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c11e:	e16c      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c120:	4b43      	ldr	r3, [pc, #268]	; (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c128:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c12c:	d107      	bne.n	800c13e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c12e:	f107 030c 	add.w	r3, r7, #12
 800c132:	4618      	mov	r0, r3
 800c134:	f000 fad8 	bl	800c6e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c13c:	e15d      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c13e:	2300      	movs	r3, #0
 800c140:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c142:	e15a      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c144:	4b3a      	ldr	r3, [pc, #232]	; (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c148:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c14c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c14e:	4b38      	ldr	r3, [pc, #224]	; (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	f003 0304 	and.w	r3, r3, #4
 800c156:	2b04      	cmp	r3, #4
 800c158:	d10c      	bne.n	800c174 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800c15a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d109      	bne.n	800c174 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c160:	4b33      	ldr	r3, [pc, #204]	; (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	08db      	lsrs	r3, r3, #3
 800c166:	f003 0303 	and.w	r3, r3, #3
 800c16a:	4a32      	ldr	r2, [pc, #200]	; (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c16c:	fa22 f303 	lsr.w	r3, r2, r3
 800c170:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c172:	e01e      	b.n	800c1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c174:	4b2e      	ldr	r3, [pc, #184]	; (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c17c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c180:	d106      	bne.n	800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800c182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c184:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c188:	d102      	bne.n	800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c18a:	4b2b      	ldr	r3, [pc, #172]	; (800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c18c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c18e:	e010      	b.n	800c1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c190:	4b27      	ldr	r3, [pc, #156]	; (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c198:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c19c:	d106      	bne.n	800c1ac <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800c19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1a4:	d102      	bne.n	800c1ac <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c1a6:	4b25      	ldr	r3, [pc, #148]	; (800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c1a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1aa:	e002      	b.n	800c1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c1b0:	e123      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c1b2:	e122      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1b8:	e11f      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c1ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1be:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c1c2:	430b      	orrs	r3, r1
 800c1c4:	d13c      	bne.n	800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c1c6:	4b1a      	ldr	r3, [pc, #104]	; (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c1ce:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d004      	beq.n	800c1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800c1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1dc:	d012      	beq.n	800c204 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800c1de:	e023      	b.n	800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c1e0:	4b13      	ldr	r3, [pc, #76]	; (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c1e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c1ec:	d107      	bne.n	800c1fe <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c1ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f000 fbcc 	bl	800c990 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1fc:	e0fd      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1fe:	2300      	movs	r3, #0
 800c200:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c202:	e0fa      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c204:	4b0a      	ldr	r3, [pc, #40]	; (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c20c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c210:	d107      	bne.n	800c222 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c212:	f107 0318 	add.w	r3, r7, #24
 800c216:	4618      	mov	r0, r3
 800c218:	f000 f912 	bl	800c440 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c21c:	6a3b      	ldr	r3, [r7, #32]
 800c21e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c220:	e0eb      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c222:	2300      	movs	r3, #0
 800c224:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c226:	e0e8      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c228:	2300      	movs	r3, #0
 800c22a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c22c:	e0e5      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c22e:	bf00      	nop
 800c230:	58024400 	.word	0x58024400
 800c234:	03d09000 	.word	0x03d09000
 800c238:	003d0900 	.word	0x003d0900
 800c23c:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c240:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c244:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c248:	430b      	orrs	r3, r1
 800c24a:	f040 8085 	bne.w	800c358 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c24e:	4b6d      	ldr	r3, [pc, #436]	; (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c252:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c256:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c25a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c25e:	d06b      	beq.n	800c338 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800c260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c262:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c266:	d874      	bhi.n	800c352 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c26a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c26e:	d056      	beq.n	800c31e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800c270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c276:	d86c      	bhi.n	800c352 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c27a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c27e:	d03b      	beq.n	800c2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800c280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c282:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c286:	d864      	bhi.n	800c352 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c28a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c28e:	d021      	beq.n	800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c292:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c296:	d85c      	bhi.n	800c352 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d004      	beq.n	800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800c29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c2a4:	d004      	beq.n	800c2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c2a6:	e054      	b.n	800c352 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c2a8:	f000 f8b4 	bl	800c414 <HAL_RCCEx_GetD3PCLK1Freq>
 800c2ac:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c2ae:	e0a4      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c2b0:	4b54      	ldr	r3, [pc, #336]	; (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2bc:	d107      	bne.n	800c2ce <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2be:	f107 0318 	add.w	r3, r7, #24
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f000 f8bc 	bl	800c440 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c2c8:	69fb      	ldr	r3, [r7, #28]
 800c2ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2cc:	e095      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2d2:	e092      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c2d4:	4b4b      	ldr	r3, [pc, #300]	; (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c2dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2e0:	d107      	bne.n	800c2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c2e2:	f107 030c 	add.w	r3, r7, #12
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f000 f9fe 	bl	800c6e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2f0:	e083      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2f6:	e080      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c2f8:	4b42      	ldr	r3, [pc, #264]	; (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	f003 0304 	and.w	r3, r3, #4
 800c300:	2b04      	cmp	r3, #4
 800c302:	d109      	bne.n	800c318 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c304:	4b3f      	ldr	r3, [pc, #252]	; (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	08db      	lsrs	r3, r3, #3
 800c30a:	f003 0303 	and.w	r3, r3, #3
 800c30e:	4a3e      	ldr	r2, [pc, #248]	; (800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c310:	fa22 f303 	lsr.w	r3, r2, r3
 800c314:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c316:	e070      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c318:	2300      	movs	r3, #0
 800c31a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c31c:	e06d      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c31e:	4b39      	ldr	r3, [pc, #228]	; (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c32a:	d102      	bne.n	800c332 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c32c:	4b37      	ldr	r3, [pc, #220]	; (800c40c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c32e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c330:	e063      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c332:	2300      	movs	r3, #0
 800c334:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c336:	e060      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c338:	4b32      	ldr	r3, [pc, #200]	; (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c340:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c344:	d102      	bne.n	800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c346:	4b32      	ldr	r3, [pc, #200]	; (800c410 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c348:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c34a:	e056      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c34c:	2300      	movs	r3, #0
 800c34e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c350:	e053      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c352:	2300      	movs	r3, #0
 800c354:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c356:	e050      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c358:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c35c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c360:	430b      	orrs	r3, r1
 800c362:	d148      	bne.n	800c3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c364:	4b27      	ldr	r3, [pc, #156]	; (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c368:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c36c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c374:	d02a      	beq.n	800c3cc <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c378:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c37c:	d838      	bhi.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c37e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c380:	2b00      	cmp	r3, #0
 800c382:	d004      	beq.n	800c38e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c386:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c38a:	d00d      	beq.n	800c3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c38c:	e030      	b.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c38e:	4b1d      	ldr	r3, [pc, #116]	; (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c396:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c39a:	d102      	bne.n	800c3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800c39c:	4b1c      	ldr	r3, [pc, #112]	; (800c410 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c39e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3a0:	e02b      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3a6:	e028      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c3a8:	4b16      	ldr	r3, [pc, #88]	; (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c3b4:	d107      	bne.n	800c3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c3b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f000 fae8 	bl	800c990 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3c4:	e019      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3ca:	e016      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c3cc:	4b0d      	ldr	r3, [pc, #52]	; (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c3d8:	d107      	bne.n	800c3ea <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3da:	f107 0318 	add.w	r3, r7, #24
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f000 f82e 	bl	800c440 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c3e4:	69fb      	ldr	r3, [r7, #28]
 800c3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3e8:	e007      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3ee:	e004      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3f4:	e001      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c3fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	3740      	adds	r7, #64	; 0x40
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}
 800c404:	58024400 	.word	0x58024400
 800c408:	03d09000 	.word	0x03d09000
 800c40c:	003d0900 	.word	0x003d0900
 800c410:	02faf080 	.word	0x02faf080

0800c414 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c418:	f7fe f92e 	bl	800a678 <HAL_RCC_GetHCLKFreq>
 800c41c:	4602      	mov	r2, r0
 800c41e:	4b06      	ldr	r3, [pc, #24]	; (800c438 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c420:	6a1b      	ldr	r3, [r3, #32]
 800c422:	091b      	lsrs	r3, r3, #4
 800c424:	f003 0307 	and.w	r3, r3, #7
 800c428:	4904      	ldr	r1, [pc, #16]	; (800c43c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c42a:	5ccb      	ldrb	r3, [r1, r3]
 800c42c:	f003 031f 	and.w	r3, r3, #31
 800c430:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c434:	4618      	mov	r0, r3
 800c436:	bd80      	pop	{r7, pc}
 800c438:	58024400 	.word	0x58024400
 800c43c:	080183a0 	.word	0x080183a0

0800c440 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c440:	b480      	push	{r7}
 800c442:	b089      	sub	sp, #36	; 0x24
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c448:	4ba1      	ldr	r3, [pc, #644]	; (800c6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c44a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c44c:	f003 0303 	and.w	r3, r3, #3
 800c450:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c452:	4b9f      	ldr	r3, [pc, #636]	; (800c6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c456:	0b1b      	lsrs	r3, r3, #12
 800c458:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c45c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c45e:	4b9c      	ldr	r3, [pc, #624]	; (800c6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c462:	091b      	lsrs	r3, r3, #4
 800c464:	f003 0301 	and.w	r3, r3, #1
 800c468:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c46a:	4b99      	ldr	r3, [pc, #612]	; (800c6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c46c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c46e:	08db      	lsrs	r3, r3, #3
 800c470:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c474:	693a      	ldr	r2, [r7, #16]
 800c476:	fb02 f303 	mul.w	r3, r2, r3
 800c47a:	ee07 3a90 	vmov	s15, r3
 800c47e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c482:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	f000 8111 	beq.w	800c6b0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c48e:	69bb      	ldr	r3, [r7, #24]
 800c490:	2b02      	cmp	r3, #2
 800c492:	f000 8083 	beq.w	800c59c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c496:	69bb      	ldr	r3, [r7, #24]
 800c498:	2b02      	cmp	r3, #2
 800c49a:	f200 80a1 	bhi.w	800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c49e:	69bb      	ldr	r3, [r7, #24]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d003      	beq.n	800c4ac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c4a4:	69bb      	ldr	r3, [r7, #24]
 800c4a6:	2b01      	cmp	r3, #1
 800c4a8:	d056      	beq.n	800c558 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c4aa:	e099      	b.n	800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c4ac:	4b88      	ldr	r3, [pc, #544]	; (800c6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	f003 0320 	and.w	r3, r3, #32
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d02d      	beq.n	800c514 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c4b8:	4b85      	ldr	r3, [pc, #532]	; (800c6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	08db      	lsrs	r3, r3, #3
 800c4be:	f003 0303 	and.w	r3, r3, #3
 800c4c2:	4a84      	ldr	r2, [pc, #528]	; (800c6d4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c4c4:	fa22 f303 	lsr.w	r3, r2, r3
 800c4c8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c4ca:	68bb      	ldr	r3, [r7, #8]
 800c4cc:	ee07 3a90 	vmov	s15, r3
 800c4d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4d4:	697b      	ldr	r3, [r7, #20]
 800c4d6:	ee07 3a90 	vmov	s15, r3
 800c4da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4e2:	4b7b      	ldr	r3, [pc, #492]	; (800c6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4ea:	ee07 3a90 	vmov	s15, r3
 800c4ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c4f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c6d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c4fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c502:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c50a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c50e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c512:	e087      	b.n	800c624 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c514:	697b      	ldr	r3, [r7, #20]
 800c516:	ee07 3a90 	vmov	s15, r3
 800c51a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c51e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c6dc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c526:	4b6a      	ldr	r3, [pc, #424]	; (800c6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c52a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c52e:	ee07 3a90 	vmov	s15, r3
 800c532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c536:	ed97 6a03 	vldr	s12, [r7, #12]
 800c53a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c6d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c53e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c546:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c54a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c54e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c552:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c556:	e065      	b.n	800c624 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	ee07 3a90 	vmov	s15, r3
 800c55e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c562:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c6e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c56a:	4b59      	ldr	r3, [pc, #356]	; (800c6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c56c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c56e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c572:	ee07 3a90 	vmov	s15, r3
 800c576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c57a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c57e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c6d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c58a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c58e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c592:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c596:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c59a:	e043      	b.n	800c624 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c59c:	697b      	ldr	r3, [r7, #20]
 800c59e:	ee07 3a90 	vmov	s15, r3
 800c5a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5a6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c6e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c5aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5ae:	4b48      	ldr	r3, [pc, #288]	; (800c6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5b6:	ee07 3a90 	vmov	s15, r3
 800c5ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5be:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5c2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c6d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c5c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c5de:	e021      	b.n	800c624 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	ee07 3a90 	vmov	s15, r3
 800c5e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5ea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c6e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c5ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5f2:	4b37      	ldr	r3, [pc, #220]	; (800c6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5fa:	ee07 3a90 	vmov	s15, r3
 800c5fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c602:	ed97 6a03 	vldr	s12, [r7, #12]
 800c606:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c6d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c60a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c60e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c612:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c61a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c61e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c622:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c624:	4b2a      	ldr	r3, [pc, #168]	; (800c6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c628:	0a5b      	lsrs	r3, r3, #9
 800c62a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c62e:	ee07 3a90 	vmov	s15, r3
 800c632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c636:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c63a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c63e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c642:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c646:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c64a:	ee17 2a90 	vmov	r2, s15
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c652:	4b1f      	ldr	r3, [pc, #124]	; (800c6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c656:	0c1b      	lsrs	r3, r3, #16
 800c658:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c65c:	ee07 3a90 	vmov	s15, r3
 800c660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c664:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c668:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c66c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c670:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c674:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c678:	ee17 2a90 	vmov	r2, s15
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c680:	4b13      	ldr	r3, [pc, #76]	; (800c6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c684:	0e1b      	lsrs	r3, r3, #24
 800c686:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c68a:	ee07 3a90 	vmov	s15, r3
 800c68e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c692:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c696:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c69a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c69e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6a6:	ee17 2a90 	vmov	r2, s15
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c6ae:	e008      	b.n	800c6c2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	609a      	str	r2, [r3, #8]
}
 800c6c2:	bf00      	nop
 800c6c4:	3724      	adds	r7, #36	; 0x24
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6cc:	4770      	bx	lr
 800c6ce:	bf00      	nop
 800c6d0:	58024400 	.word	0x58024400
 800c6d4:	03d09000 	.word	0x03d09000
 800c6d8:	46000000 	.word	0x46000000
 800c6dc:	4c742400 	.word	0x4c742400
 800c6e0:	4a742400 	.word	0x4a742400
 800c6e4:	4c3ebc20 	.word	0x4c3ebc20

0800c6e8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c6e8:	b480      	push	{r7}
 800c6ea:	b089      	sub	sp, #36	; 0x24
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c6f0:	4ba1      	ldr	r3, [pc, #644]	; (800c978 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c6f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6f4:	f003 0303 	and.w	r3, r3, #3
 800c6f8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c6fa:	4b9f      	ldr	r3, [pc, #636]	; (800c978 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c6fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6fe:	0d1b      	lsrs	r3, r3, #20
 800c700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c704:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c706:	4b9c      	ldr	r3, [pc, #624]	; (800c978 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c70a:	0a1b      	lsrs	r3, r3, #8
 800c70c:	f003 0301 	and.w	r3, r3, #1
 800c710:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c712:	4b99      	ldr	r3, [pc, #612]	; (800c978 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c716:	08db      	lsrs	r3, r3, #3
 800c718:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c71c:	693a      	ldr	r2, [r7, #16]
 800c71e:	fb02 f303 	mul.w	r3, r2, r3
 800c722:	ee07 3a90 	vmov	s15, r3
 800c726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c72a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	2b00      	cmp	r3, #0
 800c732:	f000 8111 	beq.w	800c958 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c736:	69bb      	ldr	r3, [r7, #24]
 800c738:	2b02      	cmp	r3, #2
 800c73a:	f000 8083 	beq.w	800c844 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c73e:	69bb      	ldr	r3, [r7, #24]
 800c740:	2b02      	cmp	r3, #2
 800c742:	f200 80a1 	bhi.w	800c888 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c746:	69bb      	ldr	r3, [r7, #24]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d003      	beq.n	800c754 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c74c:	69bb      	ldr	r3, [r7, #24]
 800c74e:	2b01      	cmp	r3, #1
 800c750:	d056      	beq.n	800c800 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c752:	e099      	b.n	800c888 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c754:	4b88      	ldr	r3, [pc, #544]	; (800c978 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	f003 0320 	and.w	r3, r3, #32
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d02d      	beq.n	800c7bc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c760:	4b85      	ldr	r3, [pc, #532]	; (800c978 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	08db      	lsrs	r3, r3, #3
 800c766:	f003 0303 	and.w	r3, r3, #3
 800c76a:	4a84      	ldr	r2, [pc, #528]	; (800c97c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c76c:	fa22 f303 	lsr.w	r3, r2, r3
 800c770:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	ee07 3a90 	vmov	s15, r3
 800c778:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	ee07 3a90 	vmov	s15, r3
 800c782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c78a:	4b7b      	ldr	r3, [pc, #492]	; (800c978 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c78c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c78e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c792:	ee07 3a90 	vmov	s15, r3
 800c796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c79a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c79e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c980 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c7a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c7ba:	e087      	b.n	800c8cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	ee07 3a90 	vmov	s15, r3
 800c7c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c984 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c7ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7ce:	4b6a      	ldr	r3, [pc, #424]	; (800c978 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7d6:	ee07 3a90 	vmov	s15, r3
 800c7da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7de:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c980 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c7e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c7fe:	e065      	b.n	800c8cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	ee07 3a90 	vmov	s15, r3
 800c806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c80a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c988 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c80e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c812:	4b59      	ldr	r3, [pc, #356]	; (800c978 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c81a:	ee07 3a90 	vmov	s15, r3
 800c81e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c822:	ed97 6a03 	vldr	s12, [r7, #12]
 800c826:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c980 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c82a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c82e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c832:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c83a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c83e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c842:	e043      	b.n	800c8cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	ee07 3a90 	vmov	s15, r3
 800c84a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c84e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c98c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c856:	4b48      	ldr	r3, [pc, #288]	; (800c978 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c85a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c85e:	ee07 3a90 	vmov	s15, r3
 800c862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c866:	ed97 6a03 	vldr	s12, [r7, #12]
 800c86a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c980 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c86e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c876:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c87a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c87e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c882:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c886:	e021      	b.n	800c8cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	ee07 3a90 	vmov	s15, r3
 800c88e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c892:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c988 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c89a:	4b37      	ldr	r3, [pc, #220]	; (800c978 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c89c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c89e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8a2:	ee07 3a90 	vmov	s15, r3
 800c8a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c980 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c8b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c8ca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c8cc:	4b2a      	ldr	r3, [pc, #168]	; (800c978 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8d0:	0a5b      	lsrs	r3, r3, #9
 800c8d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8d6:	ee07 3a90 	vmov	s15, r3
 800c8da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c8e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c8e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c8ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c8ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8f2:	ee17 2a90 	vmov	r2, s15
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c8fa:	4b1f      	ldr	r3, [pc, #124]	; (800c978 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8fe:	0c1b      	lsrs	r3, r3, #16
 800c900:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c904:	ee07 3a90 	vmov	s15, r3
 800c908:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c90c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c910:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c914:	edd7 6a07 	vldr	s13, [r7, #28]
 800c918:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c91c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c920:	ee17 2a90 	vmov	r2, s15
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c928:	4b13      	ldr	r3, [pc, #76]	; (800c978 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c92a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c92c:	0e1b      	lsrs	r3, r3, #24
 800c92e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c932:	ee07 3a90 	vmov	s15, r3
 800c936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c93a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c93e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c942:	edd7 6a07 	vldr	s13, [r7, #28]
 800c946:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c94a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c94e:	ee17 2a90 	vmov	r2, s15
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c956:	e008      	b.n	800c96a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2200      	movs	r2, #0
 800c95c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2200      	movs	r2, #0
 800c962:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2200      	movs	r2, #0
 800c968:	609a      	str	r2, [r3, #8]
}
 800c96a:	bf00      	nop
 800c96c:	3724      	adds	r7, #36	; 0x24
 800c96e:	46bd      	mov	sp, r7
 800c970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c974:	4770      	bx	lr
 800c976:	bf00      	nop
 800c978:	58024400 	.word	0x58024400
 800c97c:	03d09000 	.word	0x03d09000
 800c980:	46000000 	.word	0x46000000
 800c984:	4c742400 	.word	0x4c742400
 800c988:	4a742400 	.word	0x4a742400
 800c98c:	4c3ebc20 	.word	0x4c3ebc20

0800c990 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c990:	b480      	push	{r7}
 800c992:	b089      	sub	sp, #36	; 0x24
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c998:	4ba0      	ldr	r3, [pc, #640]	; (800cc1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c99a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c99c:	f003 0303 	and.w	r3, r3, #3
 800c9a0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c9a2:	4b9e      	ldr	r3, [pc, #632]	; (800cc1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c9a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9a6:	091b      	lsrs	r3, r3, #4
 800c9a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9ac:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c9ae:	4b9b      	ldr	r3, [pc, #620]	; (800cc1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c9b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9b2:	f003 0301 	and.w	r3, r3, #1
 800c9b6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c9b8:	4b98      	ldr	r3, [pc, #608]	; (800cc1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c9ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9bc:	08db      	lsrs	r3, r3, #3
 800c9be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c9c2:	693a      	ldr	r2, [r7, #16]
 800c9c4:	fb02 f303 	mul.w	r3, r2, r3
 800c9c8:	ee07 3a90 	vmov	s15, r3
 800c9cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9d0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	f000 8111 	beq.w	800cbfe <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c9dc:	69bb      	ldr	r3, [r7, #24]
 800c9de:	2b02      	cmp	r3, #2
 800c9e0:	f000 8083 	beq.w	800caea <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c9e4:	69bb      	ldr	r3, [r7, #24]
 800c9e6:	2b02      	cmp	r3, #2
 800c9e8:	f200 80a1 	bhi.w	800cb2e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c9ec:	69bb      	ldr	r3, [r7, #24]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d003      	beq.n	800c9fa <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c9f2:	69bb      	ldr	r3, [r7, #24]
 800c9f4:	2b01      	cmp	r3, #1
 800c9f6:	d056      	beq.n	800caa6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c9f8:	e099      	b.n	800cb2e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c9fa:	4b88      	ldr	r3, [pc, #544]	; (800cc1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	f003 0320 	and.w	r3, r3, #32
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d02d      	beq.n	800ca62 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca06:	4b85      	ldr	r3, [pc, #532]	; (800cc1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	08db      	lsrs	r3, r3, #3
 800ca0c:	f003 0303 	and.w	r3, r3, #3
 800ca10:	4a83      	ldr	r2, [pc, #524]	; (800cc20 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ca12:	fa22 f303 	lsr.w	r3, r2, r3
 800ca16:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	ee07 3a90 	vmov	s15, r3
 800ca1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	ee07 3a90 	vmov	s15, r3
 800ca28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca30:	4b7a      	ldr	r3, [pc, #488]	; (800cc1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca38:	ee07 3a90 	vmov	s15, r3
 800ca3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca40:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca44:	eddf 5a77 	vldr	s11, [pc, #476]	; 800cc24 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ca48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca58:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca5c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ca60:	e087      	b.n	800cb72 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	ee07 3a90 	vmov	s15, r3
 800ca68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca6c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800cc28 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ca70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca74:	4b69      	ldr	r3, [pc, #420]	; (800cc1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca7c:	ee07 3a90 	vmov	s15, r3
 800ca80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca84:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca88:	eddf 5a66 	vldr	s11, [pc, #408]	; 800cc24 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ca8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800caa0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800caa4:	e065      	b.n	800cb72 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	ee07 3a90 	vmov	s15, r3
 800caac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cab0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800cc2c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800cab4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cab8:	4b58      	ldr	r3, [pc, #352]	; (800cc1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800caba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cabc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cac0:	ee07 3a90 	vmov	s15, r3
 800cac4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cac8:	ed97 6a03 	vldr	s12, [r7, #12]
 800cacc:	eddf 5a55 	vldr	s11, [pc, #340]	; 800cc24 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cad0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cad4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cad8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cadc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cae0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cae4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cae8:	e043      	b.n	800cb72 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	ee07 3a90 	vmov	s15, r3
 800caf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caf4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800cc30 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800caf8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cafc:	4b47      	ldr	r3, [pc, #284]	; (800cc1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cafe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb04:	ee07 3a90 	vmov	s15, r3
 800cb08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb0c:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb10:	eddf 5a44 	vldr	s11, [pc, #272]	; 800cc24 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cb14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb24:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb2c:	e021      	b.n	800cb72 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cb2e:	697b      	ldr	r3, [r7, #20]
 800cb30:	ee07 3a90 	vmov	s15, r3
 800cb34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb38:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800cc28 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cb3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb40:	4b36      	ldr	r3, [pc, #216]	; (800cc1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb48:	ee07 3a90 	vmov	s15, r3
 800cb4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb50:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb54:	eddf 5a33 	vldr	s11, [pc, #204]	; 800cc24 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cb58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb68:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb6c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb70:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800cb72:	4b2a      	ldr	r3, [pc, #168]	; (800cc1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb76:	0a5b      	lsrs	r3, r3, #9
 800cb78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb7c:	ee07 3a90 	vmov	s15, r3
 800cb80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb88:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb8c:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb98:	ee17 2a90 	vmov	r2, s15
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800cba0:	4b1e      	ldr	r3, [pc, #120]	; (800cc1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cba4:	0c1b      	lsrs	r3, r3, #16
 800cba6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbaa:	ee07 3a90 	vmov	s15, r3
 800cbae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cbb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbba:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbc6:	ee17 2a90 	vmov	r2, s15
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800cbce:	4b13      	ldr	r3, [pc, #76]	; (800cc1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cbd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbd2:	0e1b      	lsrs	r3, r3, #24
 800cbd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbd8:	ee07 3a90 	vmov	s15, r3
 800cbdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbe0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cbe4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbe8:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbf4:	ee17 2a90 	vmov	r2, s15
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800cbfc:	e008      	b.n	800cc10 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2200      	movs	r2, #0
 800cc02:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2200      	movs	r2, #0
 800cc08:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	609a      	str	r2, [r3, #8]
}
 800cc10:	bf00      	nop
 800cc12:	3724      	adds	r7, #36	; 0x24
 800cc14:	46bd      	mov	sp, r7
 800cc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1a:	4770      	bx	lr
 800cc1c:	58024400 	.word	0x58024400
 800cc20:	03d09000 	.word	0x03d09000
 800cc24:	46000000 	.word	0x46000000
 800cc28:	4c742400 	.word	0x4c742400
 800cc2c:	4a742400 	.word	0x4a742400
 800cc30:	4c3ebc20 	.word	0x4c3ebc20

0800cc34 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b084      	sub	sp, #16
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
 800cc3c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cc3e:	2300      	movs	r3, #0
 800cc40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cc42:	4b53      	ldr	r3, [pc, #332]	; (800cd90 <RCCEx_PLL2_Config+0x15c>)
 800cc44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc46:	f003 0303 	and.w	r3, r3, #3
 800cc4a:	2b03      	cmp	r3, #3
 800cc4c:	d101      	bne.n	800cc52 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cc4e:	2301      	movs	r3, #1
 800cc50:	e099      	b.n	800cd86 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cc52:	4b4f      	ldr	r3, [pc, #316]	; (800cd90 <RCCEx_PLL2_Config+0x15c>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	4a4e      	ldr	r2, [pc, #312]	; (800cd90 <RCCEx_PLL2_Config+0x15c>)
 800cc58:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cc5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc5e:	f7f6 fe95 	bl	800398c <HAL_GetTick>
 800cc62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cc64:	e008      	b.n	800cc78 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cc66:	f7f6 fe91 	bl	800398c <HAL_GetTick>
 800cc6a:	4602      	mov	r2, r0
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	1ad3      	subs	r3, r2, r3
 800cc70:	2b02      	cmp	r3, #2
 800cc72:	d901      	bls.n	800cc78 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cc74:	2303      	movs	r3, #3
 800cc76:	e086      	b.n	800cd86 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cc78:	4b45      	ldr	r3, [pc, #276]	; (800cd90 <RCCEx_PLL2_Config+0x15c>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d1f0      	bne.n	800cc66 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cc84:	4b42      	ldr	r3, [pc, #264]	; (800cd90 <RCCEx_PLL2_Config+0x15c>)
 800cc86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc88:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	031b      	lsls	r3, r3, #12
 800cc92:	493f      	ldr	r1, [pc, #252]	; (800cd90 <RCCEx_PLL2_Config+0x15c>)
 800cc94:	4313      	orrs	r3, r2
 800cc96:	628b      	str	r3, [r1, #40]	; 0x28
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	685b      	ldr	r3, [r3, #4]
 800cc9c:	3b01      	subs	r3, #1
 800cc9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	689b      	ldr	r3, [r3, #8]
 800cca6:	3b01      	subs	r3, #1
 800cca8:	025b      	lsls	r3, r3, #9
 800ccaa:	b29b      	uxth	r3, r3
 800ccac:	431a      	orrs	r2, r3
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	68db      	ldr	r3, [r3, #12]
 800ccb2:	3b01      	subs	r3, #1
 800ccb4:	041b      	lsls	r3, r3, #16
 800ccb6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ccba:	431a      	orrs	r2, r3
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	691b      	ldr	r3, [r3, #16]
 800ccc0:	3b01      	subs	r3, #1
 800ccc2:	061b      	lsls	r3, r3, #24
 800ccc4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ccc8:	4931      	ldr	r1, [pc, #196]	; (800cd90 <RCCEx_PLL2_Config+0x15c>)
 800ccca:	4313      	orrs	r3, r2
 800cccc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ccce:	4b30      	ldr	r3, [pc, #192]	; (800cd90 <RCCEx_PLL2_Config+0x15c>)
 800ccd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccd2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	695b      	ldr	r3, [r3, #20]
 800ccda:	492d      	ldr	r1, [pc, #180]	; (800cd90 <RCCEx_PLL2_Config+0x15c>)
 800ccdc:	4313      	orrs	r3, r2
 800ccde:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cce0:	4b2b      	ldr	r3, [pc, #172]	; (800cd90 <RCCEx_PLL2_Config+0x15c>)
 800cce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cce4:	f023 0220 	bic.w	r2, r3, #32
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	699b      	ldr	r3, [r3, #24]
 800ccec:	4928      	ldr	r1, [pc, #160]	; (800cd90 <RCCEx_PLL2_Config+0x15c>)
 800ccee:	4313      	orrs	r3, r2
 800ccf0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ccf2:	4b27      	ldr	r3, [pc, #156]	; (800cd90 <RCCEx_PLL2_Config+0x15c>)
 800ccf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccf6:	4a26      	ldr	r2, [pc, #152]	; (800cd90 <RCCEx_PLL2_Config+0x15c>)
 800ccf8:	f023 0310 	bic.w	r3, r3, #16
 800ccfc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ccfe:	4b24      	ldr	r3, [pc, #144]	; (800cd90 <RCCEx_PLL2_Config+0x15c>)
 800cd00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd02:	4b24      	ldr	r3, [pc, #144]	; (800cd94 <RCCEx_PLL2_Config+0x160>)
 800cd04:	4013      	ands	r3, r2
 800cd06:	687a      	ldr	r2, [r7, #4]
 800cd08:	69d2      	ldr	r2, [r2, #28]
 800cd0a:	00d2      	lsls	r2, r2, #3
 800cd0c:	4920      	ldr	r1, [pc, #128]	; (800cd90 <RCCEx_PLL2_Config+0x15c>)
 800cd0e:	4313      	orrs	r3, r2
 800cd10:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cd12:	4b1f      	ldr	r3, [pc, #124]	; (800cd90 <RCCEx_PLL2_Config+0x15c>)
 800cd14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd16:	4a1e      	ldr	r2, [pc, #120]	; (800cd90 <RCCEx_PLL2_Config+0x15c>)
 800cd18:	f043 0310 	orr.w	r3, r3, #16
 800cd1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d106      	bne.n	800cd32 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cd24:	4b1a      	ldr	r3, [pc, #104]	; (800cd90 <RCCEx_PLL2_Config+0x15c>)
 800cd26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd28:	4a19      	ldr	r2, [pc, #100]	; (800cd90 <RCCEx_PLL2_Config+0x15c>)
 800cd2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cd2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cd30:	e00f      	b.n	800cd52 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	2b01      	cmp	r3, #1
 800cd36:	d106      	bne.n	800cd46 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cd38:	4b15      	ldr	r3, [pc, #84]	; (800cd90 <RCCEx_PLL2_Config+0x15c>)
 800cd3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd3c:	4a14      	ldr	r2, [pc, #80]	; (800cd90 <RCCEx_PLL2_Config+0x15c>)
 800cd3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cd42:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cd44:	e005      	b.n	800cd52 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cd46:	4b12      	ldr	r3, [pc, #72]	; (800cd90 <RCCEx_PLL2_Config+0x15c>)
 800cd48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd4a:	4a11      	ldr	r2, [pc, #68]	; (800cd90 <RCCEx_PLL2_Config+0x15c>)
 800cd4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cd50:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cd52:	4b0f      	ldr	r3, [pc, #60]	; (800cd90 <RCCEx_PLL2_Config+0x15c>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	4a0e      	ldr	r2, [pc, #56]	; (800cd90 <RCCEx_PLL2_Config+0x15c>)
 800cd58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cd5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd5e:	f7f6 fe15 	bl	800398c <HAL_GetTick>
 800cd62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cd64:	e008      	b.n	800cd78 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cd66:	f7f6 fe11 	bl	800398c <HAL_GetTick>
 800cd6a:	4602      	mov	r2, r0
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	1ad3      	subs	r3, r2, r3
 800cd70:	2b02      	cmp	r3, #2
 800cd72:	d901      	bls.n	800cd78 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cd74:	2303      	movs	r3, #3
 800cd76:	e006      	b.n	800cd86 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cd78:	4b05      	ldr	r3, [pc, #20]	; (800cd90 <RCCEx_PLL2_Config+0x15c>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d0f0      	beq.n	800cd66 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cd84:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	3710      	adds	r7, #16
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}
 800cd8e:	bf00      	nop
 800cd90:	58024400 	.word	0x58024400
 800cd94:	ffff0007 	.word	0xffff0007

0800cd98 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b084      	sub	sp, #16
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
 800cda0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cda2:	2300      	movs	r3, #0
 800cda4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cda6:	4b53      	ldr	r3, [pc, #332]	; (800cef4 <RCCEx_PLL3_Config+0x15c>)
 800cda8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdaa:	f003 0303 	and.w	r3, r3, #3
 800cdae:	2b03      	cmp	r3, #3
 800cdb0:	d101      	bne.n	800cdb6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	e099      	b.n	800ceea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cdb6:	4b4f      	ldr	r3, [pc, #316]	; (800cef4 <RCCEx_PLL3_Config+0x15c>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	4a4e      	ldr	r2, [pc, #312]	; (800cef4 <RCCEx_PLL3_Config+0x15c>)
 800cdbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cdc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cdc2:	f7f6 fde3 	bl	800398c <HAL_GetTick>
 800cdc6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cdc8:	e008      	b.n	800cddc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cdca:	f7f6 fddf 	bl	800398c <HAL_GetTick>
 800cdce:	4602      	mov	r2, r0
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	1ad3      	subs	r3, r2, r3
 800cdd4:	2b02      	cmp	r3, #2
 800cdd6:	d901      	bls.n	800cddc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cdd8:	2303      	movs	r3, #3
 800cdda:	e086      	b.n	800ceea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cddc:	4b45      	ldr	r3, [pc, #276]	; (800cef4 <RCCEx_PLL3_Config+0x15c>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d1f0      	bne.n	800cdca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cde8:	4b42      	ldr	r3, [pc, #264]	; (800cef4 <RCCEx_PLL3_Config+0x15c>)
 800cdea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdec:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	051b      	lsls	r3, r3, #20
 800cdf6:	493f      	ldr	r1, [pc, #252]	; (800cef4 <RCCEx_PLL3_Config+0x15c>)
 800cdf8:	4313      	orrs	r3, r2
 800cdfa:	628b      	str	r3, [r1, #40]	; 0x28
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	685b      	ldr	r3, [r3, #4]
 800ce00:	3b01      	subs	r3, #1
 800ce02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	689b      	ldr	r3, [r3, #8]
 800ce0a:	3b01      	subs	r3, #1
 800ce0c:	025b      	lsls	r3, r3, #9
 800ce0e:	b29b      	uxth	r3, r3
 800ce10:	431a      	orrs	r2, r3
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	68db      	ldr	r3, [r3, #12]
 800ce16:	3b01      	subs	r3, #1
 800ce18:	041b      	lsls	r3, r3, #16
 800ce1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ce1e:	431a      	orrs	r2, r3
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	691b      	ldr	r3, [r3, #16]
 800ce24:	3b01      	subs	r3, #1
 800ce26:	061b      	lsls	r3, r3, #24
 800ce28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ce2c:	4931      	ldr	r1, [pc, #196]	; (800cef4 <RCCEx_PLL3_Config+0x15c>)
 800ce2e:	4313      	orrs	r3, r2
 800ce30:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ce32:	4b30      	ldr	r3, [pc, #192]	; (800cef4 <RCCEx_PLL3_Config+0x15c>)
 800ce34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	695b      	ldr	r3, [r3, #20]
 800ce3e:	492d      	ldr	r1, [pc, #180]	; (800cef4 <RCCEx_PLL3_Config+0x15c>)
 800ce40:	4313      	orrs	r3, r2
 800ce42:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ce44:	4b2b      	ldr	r3, [pc, #172]	; (800cef4 <RCCEx_PLL3_Config+0x15c>)
 800ce46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce48:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	699b      	ldr	r3, [r3, #24]
 800ce50:	4928      	ldr	r1, [pc, #160]	; (800cef4 <RCCEx_PLL3_Config+0x15c>)
 800ce52:	4313      	orrs	r3, r2
 800ce54:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ce56:	4b27      	ldr	r3, [pc, #156]	; (800cef4 <RCCEx_PLL3_Config+0x15c>)
 800ce58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce5a:	4a26      	ldr	r2, [pc, #152]	; (800cef4 <RCCEx_PLL3_Config+0x15c>)
 800ce5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ce60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ce62:	4b24      	ldr	r3, [pc, #144]	; (800cef4 <RCCEx_PLL3_Config+0x15c>)
 800ce64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce66:	4b24      	ldr	r3, [pc, #144]	; (800cef8 <RCCEx_PLL3_Config+0x160>)
 800ce68:	4013      	ands	r3, r2
 800ce6a:	687a      	ldr	r2, [r7, #4]
 800ce6c:	69d2      	ldr	r2, [r2, #28]
 800ce6e:	00d2      	lsls	r2, r2, #3
 800ce70:	4920      	ldr	r1, [pc, #128]	; (800cef4 <RCCEx_PLL3_Config+0x15c>)
 800ce72:	4313      	orrs	r3, r2
 800ce74:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ce76:	4b1f      	ldr	r3, [pc, #124]	; (800cef4 <RCCEx_PLL3_Config+0x15c>)
 800ce78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce7a:	4a1e      	ldr	r2, [pc, #120]	; (800cef4 <RCCEx_PLL3_Config+0x15c>)
 800ce7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d106      	bne.n	800ce96 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ce88:	4b1a      	ldr	r3, [pc, #104]	; (800cef4 <RCCEx_PLL3_Config+0x15c>)
 800ce8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce8c:	4a19      	ldr	r2, [pc, #100]	; (800cef4 <RCCEx_PLL3_Config+0x15c>)
 800ce8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ce92:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ce94:	e00f      	b.n	800ceb6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	2b01      	cmp	r3, #1
 800ce9a:	d106      	bne.n	800ceaa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ce9c:	4b15      	ldr	r3, [pc, #84]	; (800cef4 <RCCEx_PLL3_Config+0x15c>)
 800ce9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cea0:	4a14      	ldr	r2, [pc, #80]	; (800cef4 <RCCEx_PLL3_Config+0x15c>)
 800cea2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cea6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cea8:	e005      	b.n	800ceb6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ceaa:	4b12      	ldr	r3, [pc, #72]	; (800cef4 <RCCEx_PLL3_Config+0x15c>)
 800ceac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceae:	4a11      	ldr	r2, [pc, #68]	; (800cef4 <RCCEx_PLL3_Config+0x15c>)
 800ceb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ceb4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ceb6:	4b0f      	ldr	r3, [pc, #60]	; (800cef4 <RCCEx_PLL3_Config+0x15c>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	4a0e      	ldr	r2, [pc, #56]	; (800cef4 <RCCEx_PLL3_Config+0x15c>)
 800cebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cec0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cec2:	f7f6 fd63 	bl	800398c <HAL_GetTick>
 800cec6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cec8:	e008      	b.n	800cedc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ceca:	f7f6 fd5f 	bl	800398c <HAL_GetTick>
 800cece:	4602      	mov	r2, r0
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	1ad3      	subs	r3, r2, r3
 800ced4:	2b02      	cmp	r3, #2
 800ced6:	d901      	bls.n	800cedc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ced8:	2303      	movs	r3, #3
 800ceda:	e006      	b.n	800ceea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cedc:	4b05      	ldr	r3, [pc, #20]	; (800cef4 <RCCEx_PLL3_Config+0x15c>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d0f0      	beq.n	800ceca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cee8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	3710      	adds	r7, #16
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}
 800cef2:	bf00      	nop
 800cef4:	58024400 	.word	0x58024400
 800cef8:	ffff0007 	.word	0xffff0007

0800cefc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b08a      	sub	sp, #40	; 0x28
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d101      	bne.n	800cf0e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cf0a:	2301      	movs	r3, #1
 800cf0c:	e075      	b.n	800cffa <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cf14:	b2db      	uxtb	r3, r3
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d105      	bne.n	800cf26 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f7f5 fe9f 	bl	8002c64 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2204      	movs	r2, #4
 800cf2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f000 f868 	bl	800d004 <HAL_SD_InitCard>
 800cf34:	4603      	mov	r3, r0
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d001      	beq.n	800cf3e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	e05d      	b.n	800cffa <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800cf3e:	f107 0308 	add.w	r3, r7, #8
 800cf42:	4619      	mov	r1, r3
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f000 fdaf 	bl	800daa8 <HAL_SD_GetCardStatus>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d001      	beq.n	800cf54 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800cf50:	2301      	movs	r3, #1
 800cf52:	e052      	b.n	800cffa <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800cf54:	7e3b      	ldrb	r3, [r7, #24]
 800cf56:	b2db      	uxtb	r3, r3
 800cf58:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800cf5a:	7e7b      	ldrb	r3, [r7, #25]
 800cf5c:	b2db      	uxtb	r3, r3
 800cf5e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	d10a      	bne.n	800cf7e <HAL_SD_Init+0x82>
 800cf68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d102      	bne.n	800cf74 <HAL_SD_Init+0x78>
 800cf6e:	6a3b      	ldr	r3, [r7, #32]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d004      	beq.n	800cf7e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cf7a:	659a      	str	r2, [r3, #88]	; 0x58
 800cf7c:	e00b      	b.n	800cf96 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf82:	2b01      	cmp	r3, #1
 800cf84:	d104      	bne.n	800cf90 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cf8c:	659a      	str	r2, [r3, #88]	; 0x58
 800cf8e:	e002      	b.n	800cf96 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2200      	movs	r2, #0
 800cf94:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	68db      	ldr	r3, [r3, #12]
 800cf9a:	4619      	mov	r1, r3
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	f000 fe6d 	bl	800dc7c <HAL_SD_ConfigWideBusOperation>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d001      	beq.n	800cfac <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	e026      	b.n	800cffa <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800cfac:	f7f6 fcee 	bl	800398c <HAL_GetTick>
 800cfb0:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cfb2:	e011      	b.n	800cfd8 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cfb4:	f7f6 fcea 	bl	800398c <HAL_GetTick>
 800cfb8:	4602      	mov	r2, r0
 800cfba:	69fb      	ldr	r3, [r7, #28]
 800cfbc:	1ad3      	subs	r3, r2, r3
 800cfbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfc2:	d109      	bne.n	800cfd8 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cfca:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2201      	movs	r2, #1
 800cfd0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800cfd4:	2303      	movs	r3, #3
 800cfd6:	e010      	b.n	800cffa <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f000 ff61 	bl	800dea0 <HAL_SD_GetCardState>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	2b04      	cmp	r3, #4
 800cfe2:	d1e7      	bne.n	800cfb4 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	2200      	movs	r2, #0
 800cfee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2201      	movs	r2, #1
 800cff4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800cff8:	2300      	movs	r3, #0
}
 800cffa:	4618      	mov	r0, r3
 800cffc:	3728      	adds	r7, #40	; 0x28
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd80      	pop	{r7, pc}
	...

0800d004 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d004:	b590      	push	{r4, r7, lr}
 800d006:	b08d      	sub	sp, #52	; 0x34
 800d008:	af02      	add	r7, sp, #8
 800d00a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d00c:	2300      	movs	r3, #0
 800d00e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d010:	2300      	movs	r3, #0
 800d012:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d014:	2300      	movs	r3, #0
 800d016:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d018:	2300      	movs	r3, #0
 800d01a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d01c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d020:	f04f 0100 	mov.w	r1, #0
 800d024:	f7fe fd24 	bl	800ba70 <HAL_RCCEx_GetPeriphCLKFreq>
 800d028:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800d02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d109      	bne.n	800d044 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2201      	movs	r2, #1
 800d034:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d03e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d040:	2301      	movs	r3, #1
 800d042:	e070      	b.n	800d126 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d046:	0a1b      	lsrs	r3, r3, #8
 800d048:	4a39      	ldr	r2, [pc, #228]	; (800d130 <HAL_SD_InitCard+0x12c>)
 800d04a:	fba2 2303 	umull	r2, r3, r2, r3
 800d04e:	091b      	lsrs	r3, r3, #4
 800d050:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681c      	ldr	r4, [r3, #0]
 800d056:	466a      	mov	r2, sp
 800d058:	f107 0318 	add.w	r3, r7, #24
 800d05c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d060:	e882 0003 	stmia.w	r2, {r0, r1}
 800d064:	f107 030c 	add.w	r3, r7, #12
 800d068:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d06a:	4620      	mov	r0, r4
 800d06c:	f004 fe6c 	bl	8011d48 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	4618      	mov	r0, r3
 800d076:	f004 feaf 	bl	8011dd8 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800d07a:	69fb      	ldr	r3, [r7, #28]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d005      	beq.n	800d08c <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800d080:	69fb      	ldr	r3, [r7, #28]
 800d082:	005b      	lsls	r3, r3, #1
 800d084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d086:	fbb2 f3f3 	udiv	r3, r2, r3
 800d08a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800d08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d007      	beq.n	800d0a2 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800d092:	4a28      	ldr	r2, [pc, #160]	; (800d134 <HAL_SD_InitCard+0x130>)
 800d094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d096:	fbb2 f3f3 	udiv	r3, r2, r3
 800d09a:	3301      	adds	r3, #1
 800d09c:	4618      	mov	r0, r3
 800d09e:	f7f6 fc81 	bl	80039a4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	f000 ffea 	bl	800e07c <SD_PowerON>
 800d0a8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d0aa:	6a3b      	ldr	r3, [r7, #32]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d00b      	beq.n	800d0c8 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	2201      	movs	r2, #1
 800d0b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d0bc:	6a3b      	ldr	r3, [r7, #32]
 800d0be:	431a      	orrs	r2, r3
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	e02e      	b.n	800d126 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f000 ff09 	bl	800dee0 <SD_InitCard>
 800d0ce:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d0d0:	6a3b      	ldr	r3, [r7, #32]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d00b      	beq.n	800d0ee <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2201      	movs	r2, #1
 800d0da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d0e2:	6a3b      	ldr	r3, [r7, #32]
 800d0e4:	431a      	orrs	r2, r3
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	e01b      	b.n	800d126 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f004 ff04 	bl	8011f04 <SDMMC_CmdBlockLength>
 800d0fc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d0fe:	6a3b      	ldr	r3, [r7, #32]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d00f      	beq.n	800d124 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	4a0b      	ldr	r2, [pc, #44]	; (800d138 <HAL_SD_InitCard+0x134>)
 800d10a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d110:	6a3b      	ldr	r3, [r7, #32]
 800d112:	431a      	orrs	r2, r3
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2201      	movs	r2, #1
 800d11c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d120:	2301      	movs	r3, #1
 800d122:	e000      	b.n	800d126 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800d124:	2300      	movs	r3, #0
}
 800d126:	4618      	mov	r0, r3
 800d128:	372c      	adds	r7, #44	; 0x2c
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd90      	pop	{r4, r7, pc}
 800d12e:	bf00      	nop
 800d130:	014f8b59 	.word	0x014f8b59
 800d134:	00012110 	.word	0x00012110
 800d138:	1fe00fff 	.word	0x1fe00fff

0800d13c <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b08c      	sub	sp, #48	; 0x30
 800d140:	af00      	add	r7, sp, #0
 800d142:	60f8      	str	r0, [r7, #12]
 800d144:	60b9      	str	r1, [r7, #8]
 800d146:	607a      	str	r2, [r7, #4]
 800d148:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d14e:	68bb      	ldr	r3, [r7, #8]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d107      	bne.n	800d164 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d158:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d160:	2301      	movs	r3, #1
 800d162:	e08d      	b.n	800d280 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d16a:	b2db      	uxtb	r3, r3
 800d16c:	2b01      	cmp	r3, #1
 800d16e:	f040 8086 	bne.w	800d27e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	2200      	movs	r2, #0
 800d176:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d178:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	441a      	add	r2, r3
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d182:	429a      	cmp	r2, r3
 800d184:	d907      	bls.n	800d196 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d18a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d192:	2301      	movs	r3, #1
 800d194:	e074      	b.n	800d280 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	2203      	movs	r2, #3
 800d19a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	68ba      	ldr	r2, [r7, #8]
 800d1aa:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	025a      	lsls	r2, r3, #9
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1b8:	2b01      	cmp	r3, #1
 800d1ba:	d002      	beq.n	800d1c2 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1be:	025b      	lsls	r3, r3, #9
 800d1c0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d1c2:	f04f 33ff 	mov.w	r3, #4294967295
 800d1c6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	025b      	lsls	r3, r3, #9
 800d1cc:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d1ce:	2390      	movs	r3, #144	; 0x90
 800d1d0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d1d2:	2302      	movs	r3, #2
 800d1d4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d1da:	2300      	movs	r3, #0
 800d1dc:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	f107 0210 	add.w	r2, r7, #16
 800d1e6:	4611      	mov	r1, r2
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f004 fe5f 	bl	8011eac <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	68da      	ldr	r2, [r3, #12]
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d1fc:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	68ba      	ldr	r2, [r7, #8]
 800d204:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	2201      	movs	r2, #1
 800d20c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	2b01      	cmp	r3, #1
 800d212:	d90a      	bls.n	800d22a <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	2282      	movs	r2, #130	; 0x82
 800d218:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d220:	4618      	mov	r0, r3
 800d222:	f004 feb5 	bl	8011f90 <SDMMC_CmdReadMultiBlock>
 800d226:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d228:	e009      	b.n	800d23e <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	2281      	movs	r2, #129	; 0x81
 800d22e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d236:	4618      	mov	r0, r3
 800d238:	f004 fe87 	bl	8011f4a <SDMMC_CmdReadSingleBlock>
 800d23c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d240:	2b00      	cmp	r3, #0
 800d242:	d012      	beq.n	800d26a <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	4a0f      	ldr	r2, [pc, #60]	; (800d288 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d24a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d252:	431a      	orrs	r2, r3
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	2201      	movs	r2, #1
 800d25c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	2200      	movs	r2, #0
 800d264:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d266:	2301      	movs	r3, #1
 800d268:	e00a      	b.n	800d280 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d278:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800d27a:	2300      	movs	r3, #0
 800d27c:	e000      	b.n	800d280 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d27e:	2302      	movs	r3, #2
  }
}
 800d280:	4618      	mov	r0, r3
 800d282:	3730      	adds	r7, #48	; 0x30
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}
 800d288:	1fe00fff 	.word	0x1fe00fff

0800d28c <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b08c      	sub	sp, #48	; 0x30
 800d290:	af00      	add	r7, sp, #0
 800d292:	60f8      	str	r0, [r7, #12]
 800d294:	60b9      	str	r1, [r7, #8]
 800d296:	607a      	str	r2, [r7, #4]
 800d298:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d107      	bne.n	800d2b4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2a8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	e08d      	b.n	800d3d0 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d2ba:	b2db      	uxtb	r3, r3
 800d2bc:	2b01      	cmp	r3, #1
 800d2be:	f040 8086 	bne.w	800d3ce <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d2c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	441a      	add	r2, r3
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	d907      	bls.n	800d2e6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2da:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	e074      	b.n	800d3d0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	2203      	movs	r2, #3
 800d2ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	68ba      	ldr	r2, [r7, #8]
 800d2fa:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	025a      	lsls	r2, r3, #9
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d308:	2b01      	cmp	r3, #1
 800d30a:	d002      	beq.n	800d312 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d30e:	025b      	lsls	r3, r3, #9
 800d310:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d312:	f04f 33ff 	mov.w	r3, #4294967295
 800d316:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	025b      	lsls	r3, r3, #9
 800d31c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d31e:	2390      	movs	r3, #144	; 0x90
 800d320:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d322:	2300      	movs	r3, #0
 800d324:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d326:	2300      	movs	r3, #0
 800d328:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d32a:	2300      	movs	r3, #0
 800d32c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	f107 0210 	add.w	r2, r7, #16
 800d336:	4611      	mov	r1, r2
 800d338:	4618      	mov	r0, r3
 800d33a:	f004 fdb7 	bl	8011eac <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	68da      	ldr	r2, [r3, #12]
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d34c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	68ba      	ldr	r2, [r7, #8]
 800d354:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	2201      	movs	r2, #1
 800d35c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	2b01      	cmp	r3, #1
 800d362:	d90a      	bls.n	800d37a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	22a0      	movs	r2, #160	; 0xa0
 800d368:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d370:	4618      	mov	r0, r3
 800d372:	f004 fe53 	bl	801201c <SDMMC_CmdWriteMultiBlock>
 800d376:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d378:	e009      	b.n	800d38e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	2290      	movs	r2, #144	; 0x90
 800d37e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d386:	4618      	mov	r0, r3
 800d388:	f004 fe25 	bl	8011fd6 <SDMMC_CmdWriteSingleBlock>
 800d38c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d390:	2b00      	cmp	r3, #0
 800d392:	d012      	beq.n	800d3ba <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	4a0f      	ldr	r2, [pc, #60]	; (800d3d8 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800d39a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a2:	431a      	orrs	r2, r3
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	2201      	movs	r2, #1
 800d3ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	e00a      	b.n	800d3d0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800d3c8:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	e000      	b.n	800d3d0 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d3ce:	2302      	movs	r3, #2
  }
}
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	3730      	adds	r7, #48	; 0x30
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}
 800d3d8:	1fe00fff 	.word	0x1fe00fff

0800d3dc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b084      	sub	sp, #16
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3e8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d008      	beq.n	800d40a <HAL_SD_IRQHandler+0x2e>
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	f003 0308 	and.w	r3, r3, #8
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d003      	beq.n	800d40a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d402:	6878      	ldr	r0, [r7, #4]
 800d404:	f001 f926 	bl	800e654 <SD_Read_IT>
 800d408:	e19a      	b.n	800d740 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d414:	2b00      	cmp	r3, #0
 800d416:	f000 80ac 	beq.w	800d572 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d422:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681a      	ldr	r2, [r3, #0]
 800d42e:	4b59      	ldr	r3, [pc, #356]	; (800d594 <HAL_SD_IRQHandler+0x1b8>)
 800d430:	400b      	ands	r3, r1
 800d432:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d442:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	68da      	ldr	r2, [r3, #12]
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d452:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	f003 0308 	and.w	r3, r3, #8
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d038      	beq.n	800d4d0 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	f003 0302 	and.w	r3, r3, #2
 800d464:	2b00      	cmp	r3, #0
 800d466:	d104      	bne.n	800d472 <HAL_SD_IRQHandler+0x96>
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	f003 0320 	and.w	r3, r3, #32
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d011      	beq.n	800d496 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	4618      	mov	r0, r3
 800d478:	f004 fdf4 	bl	8012064 <SDMMC_CmdStopTransfer>
 800d47c:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d008      	beq.n	800d496 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	431a      	orrs	r2, r3
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f000 f95b 	bl	800d74c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	4a3f      	ldr	r2, [pc, #252]	; (800d598 <HAL_SD_IRQHandler+0x1bc>)
 800d49c:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	2201      	movs	r2, #1
 800d4a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	f003 0301 	and.w	r3, r3, #1
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d104      	bne.n	800d4c0 <HAL_SD_IRQHandler+0xe4>
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	f003 0302 	and.w	r3, r3, #2
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d003      	beq.n	800d4c8 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f006 fdf5 	bl	80140b0 <HAL_SD_RxCpltCallback>
 800d4c6:	e13b      	b.n	800d740 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f006 fde7 	bl	801409c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d4ce:	e137      	b.n	800d740 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	f000 8132 	beq.w	800d740 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	f003 0302 	and.w	r3, r3, #2
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d104      	bne.n	800d508 <HAL_SD_IRQHandler+0x12c>
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	f003 0320 	and.w	r3, r3, #32
 800d504:	2b00      	cmp	r3, #0
 800d506:	d011      	beq.n	800d52c <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	4618      	mov	r0, r3
 800d50e:	f004 fda9 	bl	8012064 <SDMMC_CmdStopTransfer>
 800d512:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d008      	beq.n	800d52c <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	431a      	orrs	r2, r3
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	f000 f910 	bl	800d74c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2201      	movs	r2, #1
 800d530:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2200      	movs	r2, #0
 800d538:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	f003 0310 	and.w	r3, r3, #16
 800d540:	2b00      	cmp	r3, #0
 800d542:	d104      	bne.n	800d54e <HAL_SD_IRQHandler+0x172>
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	f003 0320 	and.w	r3, r3, #32
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d002      	beq.n	800d554 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f006 fda4 	bl	801409c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	f003 0301 	and.w	r3, r3, #1
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d105      	bne.n	800d56a <HAL_SD_IRQHandler+0x18e>
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	f003 0302 	and.w	r3, r3, #2
 800d564:	2b00      	cmp	r3, #0
 800d566:	f000 80eb 	beq.w	800d740 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	f006 fda0 	bl	80140b0 <HAL_SD_RxCpltCallback>
}
 800d570:	e0e6      	b.n	800d740 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d578:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d00d      	beq.n	800d59c <HAL_SD_IRQHandler+0x1c0>
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	f003 0308 	and.w	r3, r3, #8
 800d586:	2b00      	cmp	r3, #0
 800d588:	d008      	beq.n	800d59c <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f001 f8a8 	bl	800e6e0 <SD_Write_IT>
 800d590:	e0d6      	b.n	800d740 <HAL_SD_IRQHandler+0x364>
 800d592:	bf00      	nop
 800d594:	ffff3ec5 	.word	0xffff3ec5
 800d598:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5a2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	f000 809d 	beq.w	800d6e6 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5b2:	f003 0302 	and.w	r3, r3, #2
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d005      	beq.n	800d5c6 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5be:	f043 0202 	orr.w	r2, r3, #2
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5cc:	f003 0308 	and.w	r3, r3, #8
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d005      	beq.n	800d5e0 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5d8:	f043 0208 	orr.w	r2, r3, #8
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5e6:	f003 0320 	and.w	r3, r3, #32
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d005      	beq.n	800d5fa <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5f2:	f043 0220 	orr.w	r2, r3, #32
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d600:	f003 0310 	and.w	r3, r3, #16
 800d604:	2b00      	cmp	r3, #0
 800d606:	d005      	beq.n	800d614 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d60c:	f043 0210 	orr.w	r2, r3, #16
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	4a4b      	ldr	r2, [pc, #300]	; (800d748 <HAL_SD_IRQHandler+0x36c>)
 800d61a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d62a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	68da      	ldr	r2, [r3, #12]
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d63a:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d64a:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	68da      	ldr	r2, [r3, #12]
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d65a:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	4618      	mov	r0, r3
 800d662:	f004 fcff 	bl	8012064 <SDMMC_CmdStopTransfer>
 800d666:	4602      	mov	r2, r0
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d66c:	431a      	orrs	r2, r3
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	68da      	ldr	r2, [r3, #12]
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d680:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d68a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	f003 0308 	and.w	r3, r3, #8
 800d692:	2b00      	cmp	r3, #0
 800d694:	d00a      	beq.n	800d6ac <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2201      	movs	r2, #1
 800d69a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800d6a4:	6878      	ldr	r0, [r7, #4]
 800d6a6:	f000 f851 	bl	800d74c <HAL_SD_ErrorCallback>
}
 800d6aa:	e049      	b.n	800d740 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d044      	beq.n	800d740 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d040      	beq.n	800d740 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d6cc:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2201      	movs	r2, #1
 800d6da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f000 f834 	bl	800d74c <HAL_SD_ErrorCallback>
}
 800d6e4:	e02c      	b.n	800d740 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d025      	beq.n	800d740 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6fc:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d704:	f003 0304 	and.w	r3, r3, #4
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d10c      	bne.n	800d726 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	f003 0320 	and.w	r3, r3, #32
 800d712:	2b00      	cmp	r3, #0
 800d714:	d003      	beq.n	800d71e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f001 f84a 	bl	800e7b0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800d71c:	e010      	b.n	800d740 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f001 f832 	bl	800e788 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800d724:	e00c      	b.n	800d740 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	f003 0320 	and.w	r3, r3, #32
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d003      	beq.n	800d738 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800d730:	6878      	ldr	r0, [r7, #4]
 800d732:	f001 f833 	bl	800e79c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800d736:	e003      	b.n	800d740 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f001 f81b 	bl	800e774 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800d73e:	e7ff      	b.n	800d740 <HAL_SD_IRQHandler+0x364>
 800d740:	bf00      	nop
 800d742:	3710      	adds	r7, #16
 800d744:	46bd      	mov	sp, r7
 800d746:	bd80      	pop	{r7, pc}
 800d748:	18000f3a 	.word	0x18000f3a

0800d74c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d74c:	b480      	push	{r7}
 800d74e:	b083      	sub	sp, #12
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d754:	bf00      	nop
 800d756:	370c      	adds	r7, #12
 800d758:	46bd      	mov	sp, r7
 800d75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75e:	4770      	bx	lr

0800d760 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d760:	b480      	push	{r7}
 800d762:	b083      	sub	sp, #12
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
 800d768:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d76e:	0f9b      	lsrs	r3, r3, #30
 800d770:	b2da      	uxtb	r2, r3
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d77a:	0e9b      	lsrs	r3, r3, #26
 800d77c:	b2db      	uxtb	r3, r3
 800d77e:	f003 030f 	and.w	r3, r3, #15
 800d782:	b2da      	uxtb	r2, r3
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d78c:	0e1b      	lsrs	r3, r3, #24
 800d78e:	b2db      	uxtb	r3, r3
 800d790:	f003 0303 	and.w	r3, r3, #3
 800d794:	b2da      	uxtb	r2, r3
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d79e:	0c1b      	lsrs	r3, r3, #16
 800d7a0:	b2da      	uxtb	r2, r3
 800d7a2:	683b      	ldr	r3, [r7, #0]
 800d7a4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7aa:	0a1b      	lsrs	r3, r3, #8
 800d7ac:	b2da      	uxtb	r2, r3
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7b6:	b2da      	uxtb	r2, r3
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d7c0:	0d1b      	lsrs	r3, r3, #20
 800d7c2:	b29a      	uxth	r2, r3
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d7cc:	0c1b      	lsrs	r3, r3, #16
 800d7ce:	b2db      	uxtb	r3, r3
 800d7d0:	f003 030f 	and.w	r3, r3, #15
 800d7d4:	b2da      	uxtb	r2, r3
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d7de:	0bdb      	lsrs	r3, r3, #15
 800d7e0:	b2db      	uxtb	r3, r3
 800d7e2:	f003 0301 	and.w	r3, r3, #1
 800d7e6:	b2da      	uxtb	r2, r3
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d7f0:	0b9b      	lsrs	r3, r3, #14
 800d7f2:	b2db      	uxtb	r3, r3
 800d7f4:	f003 0301 	and.w	r3, r3, #1
 800d7f8:	b2da      	uxtb	r2, r3
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d802:	0b5b      	lsrs	r3, r3, #13
 800d804:	b2db      	uxtb	r3, r3
 800d806:	f003 0301 	and.w	r3, r3, #1
 800d80a:	b2da      	uxtb	r2, r3
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d814:	0b1b      	lsrs	r3, r3, #12
 800d816:	b2db      	uxtb	r3, r3
 800d818:	f003 0301 	and.w	r3, r3, #1
 800d81c:	b2da      	uxtb	r2, r3
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d822:	683b      	ldr	r3, [r7, #0]
 800d824:	2200      	movs	r2, #0
 800d826:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d163      	bne.n	800d8f8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d834:	009a      	lsls	r2, r3, #2
 800d836:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d83a:	4013      	ands	r3, r2
 800d83c:	687a      	ldr	r2, [r7, #4]
 800d83e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800d840:	0f92      	lsrs	r2, r2, #30
 800d842:	431a      	orrs	r2, r3
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d84c:	0edb      	lsrs	r3, r3, #27
 800d84e:	b2db      	uxtb	r3, r3
 800d850:	f003 0307 	and.w	r3, r3, #7
 800d854:	b2da      	uxtb	r2, r3
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d85e:	0e1b      	lsrs	r3, r3, #24
 800d860:	b2db      	uxtb	r3, r3
 800d862:	f003 0307 	and.w	r3, r3, #7
 800d866:	b2da      	uxtb	r2, r3
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d870:	0d5b      	lsrs	r3, r3, #21
 800d872:	b2db      	uxtb	r3, r3
 800d874:	f003 0307 	and.w	r3, r3, #7
 800d878:	b2da      	uxtb	r2, r3
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d882:	0c9b      	lsrs	r3, r3, #18
 800d884:	b2db      	uxtb	r3, r3
 800d886:	f003 0307 	and.w	r3, r3, #7
 800d88a:	b2da      	uxtb	r2, r3
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d894:	0bdb      	lsrs	r3, r3, #15
 800d896:	b2db      	uxtb	r3, r3
 800d898:	f003 0307 	and.w	r3, r3, #7
 800d89c:	b2da      	uxtb	r2, r3
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	691b      	ldr	r3, [r3, #16]
 800d8a6:	1c5a      	adds	r2, r3, #1
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	7e1b      	ldrb	r3, [r3, #24]
 800d8b0:	b2db      	uxtb	r3, r3
 800d8b2:	f003 0307 	and.w	r3, r3, #7
 800d8b6:	3302      	adds	r3, #2
 800d8b8:	2201      	movs	r2, #1
 800d8ba:	fa02 f303 	lsl.w	r3, r2, r3
 800d8be:	687a      	ldr	r2, [r7, #4]
 800d8c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d8c2:	fb03 f202 	mul.w	r2, r3, r2
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	7a1b      	ldrb	r3, [r3, #8]
 800d8ce:	b2db      	uxtb	r3, r3
 800d8d0:	f003 030f 	and.w	r3, r3, #15
 800d8d4:	2201      	movs	r2, #1
 800d8d6:	409a      	lsls	r2, r3
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d8e0:	687a      	ldr	r2, [r7, #4]
 800d8e2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800d8e4:	0a52      	lsrs	r2, r2, #9
 800d8e6:	fb03 f202 	mul.w	r2, r3, r2
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d8f4:	655a      	str	r2, [r3, #84]	; 0x54
 800d8f6:	e031      	b.n	800d95c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8fc:	2b01      	cmp	r3, #1
 800d8fe:	d11d      	bne.n	800d93c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d904:	041b      	lsls	r3, r3, #16
 800d906:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d90e:	0c1b      	lsrs	r3, r3, #16
 800d910:	431a      	orrs	r2, r3
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	691b      	ldr	r3, [r3, #16]
 800d91a:	3301      	adds	r3, #1
 800d91c:	029a      	lsls	r2, r3, #10
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d930:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	655a      	str	r2, [r3, #84]	; 0x54
 800d93a:	e00f      	b.n	800d95c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	4a58      	ldr	r2, [pc, #352]	; (800daa4 <HAL_SD_GetCardCSD+0x344>)
 800d942:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d948:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2201      	movs	r2, #1
 800d954:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d958:	2301      	movs	r3, #1
 800d95a:	e09d      	b.n	800da98 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d960:	0b9b      	lsrs	r3, r3, #14
 800d962:	b2db      	uxtb	r3, r3
 800d964:	f003 0301 	and.w	r3, r3, #1
 800d968:	b2da      	uxtb	r2, r3
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d972:	09db      	lsrs	r3, r3, #7
 800d974:	b2db      	uxtb	r3, r3
 800d976:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d97a:	b2da      	uxtb	r2, r3
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d984:	b2db      	uxtb	r3, r3
 800d986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d98a:	b2da      	uxtb	r2, r3
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d994:	0fdb      	lsrs	r3, r3, #31
 800d996:	b2da      	uxtb	r2, r3
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9a0:	0f5b      	lsrs	r3, r3, #29
 800d9a2:	b2db      	uxtb	r3, r3
 800d9a4:	f003 0303 	and.w	r3, r3, #3
 800d9a8:	b2da      	uxtb	r2, r3
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9b2:	0e9b      	lsrs	r3, r3, #26
 800d9b4:	b2db      	uxtb	r3, r3
 800d9b6:	f003 0307 	and.w	r3, r3, #7
 800d9ba:	b2da      	uxtb	r2, r3
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9c4:	0d9b      	lsrs	r3, r3, #22
 800d9c6:	b2db      	uxtb	r3, r3
 800d9c8:	f003 030f 	and.w	r3, r3, #15
 800d9cc:	b2da      	uxtb	r2, r3
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9d6:	0d5b      	lsrs	r3, r3, #21
 800d9d8:	b2db      	uxtb	r3, r3
 800d9da:	f003 0301 	and.w	r3, r3, #1
 800d9de:	b2da      	uxtb	r2, r3
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9f2:	0c1b      	lsrs	r3, r3, #16
 800d9f4:	b2db      	uxtb	r3, r3
 800d9f6:	f003 0301 	and.w	r3, r3, #1
 800d9fa:	b2da      	uxtb	r2, r3
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da06:	0bdb      	lsrs	r3, r3, #15
 800da08:	b2db      	uxtb	r3, r3
 800da0a:	f003 0301 	and.w	r3, r3, #1
 800da0e:	b2da      	uxtb	r2, r3
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da1a:	0b9b      	lsrs	r3, r3, #14
 800da1c:	b2db      	uxtb	r3, r3
 800da1e:	f003 0301 	and.w	r3, r3, #1
 800da22:	b2da      	uxtb	r2, r3
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da2e:	0b5b      	lsrs	r3, r3, #13
 800da30:	b2db      	uxtb	r3, r3
 800da32:	f003 0301 	and.w	r3, r3, #1
 800da36:	b2da      	uxtb	r2, r3
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da42:	0b1b      	lsrs	r3, r3, #12
 800da44:	b2db      	uxtb	r3, r3
 800da46:	f003 0301 	and.w	r3, r3, #1
 800da4a:	b2da      	uxtb	r2, r3
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da56:	0a9b      	lsrs	r3, r3, #10
 800da58:	b2db      	uxtb	r3, r3
 800da5a:	f003 0303 	and.w	r3, r3, #3
 800da5e:	b2da      	uxtb	r2, r3
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da6a:	0a1b      	lsrs	r3, r3, #8
 800da6c:	b2db      	uxtb	r3, r3
 800da6e:	f003 0303 	and.w	r3, r3, #3
 800da72:	b2da      	uxtb	r2, r3
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da7e:	085b      	lsrs	r3, r3, #1
 800da80:	b2db      	uxtb	r3, r3
 800da82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da86:	b2da      	uxtb	r2, r3
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	2201      	movs	r2, #1
 800da92:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800da96:	2300      	movs	r3, #0
}
 800da98:	4618      	mov	r0, r3
 800da9a:	370c      	adds	r7, #12
 800da9c:	46bd      	mov	sp, r7
 800da9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa2:	4770      	bx	lr
 800daa4:	1fe00fff 	.word	0x1fe00fff

0800daa8 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b094      	sub	sp, #80	; 0x50
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800dab2:	2300      	movs	r3, #0
 800dab4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dabe:	b2db      	uxtb	r3, r3
 800dac0:	2b03      	cmp	r3, #3
 800dac2:	d101      	bne.n	800dac8 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800dac4:	2301      	movs	r3, #1
 800dac6:	e0a7      	b.n	800dc18 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800dac8:	f107 0308 	add.w	r3, r7, #8
 800dacc:	4619      	mov	r1, r3
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f000 fb62 	bl	800e198 <SD_SendSDStatus>
 800dad4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800dad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d011      	beq.n	800db00 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	4a4f      	ldr	r2, [pc, #316]	; (800dc20 <HAL_SD_GetCardStatus+0x178>)
 800dae2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dae8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800daea:	431a      	orrs	r2, r3
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2201      	movs	r2, #1
 800daf4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800daf8:	2301      	movs	r3, #1
 800dafa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800dafe:	e070      	b.n	800dbe2 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800db00:	68bb      	ldr	r3, [r7, #8]
 800db02:	099b      	lsrs	r3, r3, #6
 800db04:	b2db      	uxtb	r3, r3
 800db06:	f003 0303 	and.w	r3, r3, #3
 800db0a:	b2da      	uxtb	r2, r3
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800db10:	68bb      	ldr	r3, [r7, #8]
 800db12:	095b      	lsrs	r3, r3, #5
 800db14:	b2db      	uxtb	r3, r3
 800db16:	f003 0301 	and.w	r3, r3, #1
 800db1a:	b2da      	uxtb	r2, r3
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800db20:	68bb      	ldr	r3, [r7, #8]
 800db22:	0a1b      	lsrs	r3, r3, #8
 800db24:	b29b      	uxth	r3, r3
 800db26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800db2a:	b29a      	uxth	r2, r3
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	0e1b      	lsrs	r3, r3, #24
 800db30:	b29b      	uxth	r3, r3
 800db32:	4313      	orrs	r3, r2
 800db34:	b29a      	uxth	r2, r3
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	061a      	lsls	r2, r3, #24
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	021b      	lsls	r3, r3, #8
 800db42:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800db46:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	0a1b      	lsrs	r3, r3, #8
 800db4c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800db50:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	0e1b      	lsrs	r3, r3, #24
 800db56:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800db5c:	693b      	ldr	r3, [r7, #16]
 800db5e:	b2da      	uxtb	r2, r3
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800db64:	693b      	ldr	r3, [r7, #16]
 800db66:	0a1b      	lsrs	r3, r3, #8
 800db68:	b2da      	uxtb	r2, r3
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	0d1b      	lsrs	r3, r3, #20
 800db72:	b2db      	uxtb	r3, r3
 800db74:	f003 030f 	and.w	r3, r3, #15
 800db78:	b2da      	uxtb	r2, r3
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800db7e:	693b      	ldr	r3, [r7, #16]
 800db80:	0c1b      	lsrs	r3, r3, #16
 800db82:	b29b      	uxth	r3, r3
 800db84:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800db88:	b29a      	uxth	r2, r3
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	b29b      	uxth	r3, r3
 800db8e:	b2db      	uxtb	r3, r3
 800db90:	b29b      	uxth	r3, r3
 800db92:	4313      	orrs	r3, r2
 800db94:	b29a      	uxth	r2, r3
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800db9a:	697b      	ldr	r3, [r7, #20]
 800db9c:	0a9b      	lsrs	r3, r3, #10
 800db9e:	b2db      	uxtb	r3, r3
 800dba0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dba4:	b2da      	uxtb	r2, r3
 800dba6:	683b      	ldr	r3, [r7, #0]
 800dba8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	0a1b      	lsrs	r3, r3, #8
 800dbae:	b2db      	uxtb	r3, r3
 800dbb0:	f003 0303 	and.w	r3, r3, #3
 800dbb4:	b2da      	uxtb	r2, r3
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	091b      	lsrs	r3, r3, #4
 800dbbe:	b2db      	uxtb	r3, r3
 800dbc0:	f003 030f 	and.w	r3, r3, #15
 800dbc4:	b2da      	uxtb	r2, r3
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800dbca:	697b      	ldr	r3, [r7, #20]
 800dbcc:	b2db      	uxtb	r3, r3
 800dbce:	f003 030f 	and.w	r3, r3, #15
 800dbd2:	b2da      	uxtb	r2, r3
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800dbd8:	69bb      	ldr	r3, [r7, #24]
 800dbda:	0e1b      	lsrs	r3, r3, #24
 800dbdc:	b2da      	uxtb	r2, r3
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dbea:	4618      	mov	r0, r3
 800dbec:	f004 f98a 	bl	8011f04 <SDMMC_CmdBlockLength>
 800dbf0:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800dbf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d00d      	beq.n	800dc14 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	4a08      	ldr	r2, [pc, #32]	; (800dc20 <HAL_SD_GetCardStatus+0x178>)
 800dbfe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc04:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2201      	movs	r2, #1
 800dc0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800dc0e:	2301      	movs	r3, #1
 800dc10:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800dc14:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	3750      	adds	r7, #80	; 0x50
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bd80      	pop	{r7, pc}
 800dc20:	1fe00fff 	.word	0x1fe00fff

0800dc24 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800dc24:	b480      	push	{r7}
 800dc26:	b083      	sub	sp, #12
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800dc6e:	2300      	movs	r3, #0
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	370c      	adds	r7, #12
 800dc74:	46bd      	mov	sp, r7
 800dc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7a:	4770      	bx	lr

0800dc7c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800dc7c:	b590      	push	{r4, r7, lr}
 800dc7e:	b08d      	sub	sp, #52	; 0x34
 800dc80:	af02      	add	r7, sp, #8
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800dc86:	2300      	movs	r3, #0
 800dc88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2203      	movs	r2, #3
 800dc90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc98:	2b03      	cmp	r3, #3
 800dc9a:	d02e      	beq.n	800dcfa <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dca2:	d106      	bne.n	800dcb2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dca8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	635a      	str	r2, [r3, #52]	; 0x34
 800dcb0:	e029      	b.n	800dd06 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dcb8:	d10a      	bne.n	800dcd0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800dcba:	6878      	ldr	r0, [r7, #4]
 800dcbc:	f000 fb64 	bl	800e388 <SD_WideBus_Enable>
 800dcc0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dcc6:	6a3b      	ldr	r3, [r7, #32]
 800dcc8:	431a      	orrs	r2, r3
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	635a      	str	r2, [r3, #52]	; 0x34
 800dcce:	e01a      	b.n	800dd06 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d10a      	bne.n	800dcec <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f000 fba1 	bl	800e41e <SD_WideBus_Disable>
 800dcdc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dce2:	6a3b      	ldr	r3, [r7, #32]
 800dce4:	431a      	orrs	r2, r3
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	635a      	str	r2, [r3, #52]	; 0x34
 800dcea:	e00c      	b.n	800dd06 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcf0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	635a      	str	r2, [r3, #52]	; 0x34
 800dcf8:	e005      	b.n	800dd06 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcfe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d007      	beq.n	800dd1e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	4a5f      	ldr	r2, [pc, #380]	; (800de90 <HAL_SD_ConfigWideBusOperation+0x214>)
 800dd14:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800dd16:	2301      	movs	r3, #1
 800dd18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dd1c:	e096      	b.n	800de4c <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800dd1e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800dd22:	f04f 0100 	mov.w	r1, #0
 800dd26:	f7fd fea3 	bl	800ba70 <HAL_RCCEx_GetPeriphCLKFreq>
 800dd2a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800dd2c:	69fb      	ldr	r3, [r7, #28]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	f000 8083 	beq.w	800de3a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	685b      	ldr	r3, [r3, #4]
 800dd38:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	689b      	ldr	r3, [r3, #8]
 800dd3e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	691b      	ldr	r3, [r3, #16]
 800dd48:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	695a      	ldr	r2, [r3, #20]
 800dd4e:	69fb      	ldr	r3, [r7, #28]
 800dd50:	4950      	ldr	r1, [pc, #320]	; (800de94 <HAL_SD_ConfigWideBusOperation+0x218>)
 800dd52:	fba1 1303 	umull	r1, r3, r1, r3
 800dd56:	0e1b      	lsrs	r3, r3, #24
 800dd58:	429a      	cmp	r2, r3
 800dd5a:	d303      	bcc.n	800dd64 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	695b      	ldr	r3, [r3, #20]
 800dd60:	61bb      	str	r3, [r7, #24]
 800dd62:	e05a      	b.n	800de1a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd6c:	d103      	bne.n	800dd76 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	695b      	ldr	r3, [r3, #20]
 800dd72:	61bb      	str	r3, [r7, #24]
 800dd74:	e051      	b.n	800de1a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd7e:	d126      	bne.n	800ddce <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	695b      	ldr	r3, [r3, #20]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d10e      	bne.n	800dda6 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800dd88:	69fb      	ldr	r3, [r7, #28]
 800dd8a:	4a43      	ldr	r2, [pc, #268]	; (800de98 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800dd8c:	4293      	cmp	r3, r2
 800dd8e:	d906      	bls.n	800dd9e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800dd90:	69fb      	ldr	r3, [r7, #28]
 800dd92:	4a40      	ldr	r2, [pc, #256]	; (800de94 <HAL_SD_ConfigWideBusOperation+0x218>)
 800dd94:	fba2 2303 	umull	r2, r3, r2, r3
 800dd98:	0e5b      	lsrs	r3, r3, #25
 800dd9a:	61bb      	str	r3, [r7, #24]
 800dd9c:	e03d      	b.n	800de1a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	695b      	ldr	r3, [r3, #20]
 800dda2:	61bb      	str	r3, [r7, #24]
 800dda4:	e039      	b.n	800de1a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	695b      	ldr	r3, [r3, #20]
 800ddaa:	005b      	lsls	r3, r3, #1
 800ddac:	69fa      	ldr	r2, [r7, #28]
 800ddae:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddb2:	4a39      	ldr	r2, [pc, #228]	; (800de98 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ddb4:	4293      	cmp	r3, r2
 800ddb6:	d906      	bls.n	800ddc6 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ddb8:	69fb      	ldr	r3, [r7, #28]
 800ddba:	4a36      	ldr	r2, [pc, #216]	; (800de94 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ddbc:	fba2 2303 	umull	r2, r3, r2, r3
 800ddc0:	0e5b      	lsrs	r3, r3, #25
 800ddc2:	61bb      	str	r3, [r7, #24]
 800ddc4:	e029      	b.n	800de1a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	695b      	ldr	r3, [r3, #20]
 800ddca:	61bb      	str	r3, [r7, #24]
 800ddcc:	e025      	b.n	800de1a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	695b      	ldr	r3, [r3, #20]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d10e      	bne.n	800ddf4 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800ddd6:	69fb      	ldr	r3, [r7, #28]
 800ddd8:	4a30      	ldr	r2, [pc, #192]	; (800de9c <HAL_SD_ConfigWideBusOperation+0x220>)
 800ddda:	4293      	cmp	r3, r2
 800dddc:	d906      	bls.n	800ddec <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ddde:	69fb      	ldr	r3, [r7, #28]
 800dde0:	4a2c      	ldr	r2, [pc, #176]	; (800de94 <HAL_SD_ConfigWideBusOperation+0x218>)
 800dde2:	fba2 2303 	umull	r2, r3, r2, r3
 800dde6:	0e1b      	lsrs	r3, r3, #24
 800dde8:	61bb      	str	r3, [r7, #24]
 800ddea:	e016      	b.n	800de1a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	695b      	ldr	r3, [r3, #20]
 800ddf0:	61bb      	str	r3, [r7, #24]
 800ddf2:	e012      	b.n	800de1a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	695b      	ldr	r3, [r3, #20]
 800ddf8:	005b      	lsls	r3, r3, #1
 800ddfa:	69fa      	ldr	r2, [r7, #28]
 800ddfc:	fbb2 f3f3 	udiv	r3, r2, r3
 800de00:	4a26      	ldr	r2, [pc, #152]	; (800de9c <HAL_SD_ConfigWideBusOperation+0x220>)
 800de02:	4293      	cmp	r3, r2
 800de04:	d906      	bls.n	800de14 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800de06:	69fb      	ldr	r3, [r7, #28]
 800de08:	4a22      	ldr	r2, [pc, #136]	; (800de94 <HAL_SD_ConfigWideBusOperation+0x218>)
 800de0a:	fba2 2303 	umull	r2, r3, r2, r3
 800de0e:	0e1b      	lsrs	r3, r3, #24
 800de10:	61bb      	str	r3, [r7, #24]
 800de12:	e002      	b.n	800de1a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	695b      	ldr	r3, [r3, #20]
 800de18:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681c      	ldr	r4, [r3, #0]
 800de1e:	466a      	mov	r2, sp
 800de20:	f107 0314 	add.w	r3, r7, #20
 800de24:	e893 0003 	ldmia.w	r3, {r0, r1}
 800de28:	e882 0003 	stmia.w	r2, {r0, r1}
 800de2c:	f107 0308 	add.w	r3, r7, #8
 800de30:	cb0e      	ldmia	r3, {r1, r2, r3}
 800de32:	4620      	mov	r0, r4
 800de34:	f003 ff88 	bl	8011d48 <SDMMC_Init>
 800de38:	e008      	b.n	800de4c <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de3e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800de46:	2301      	movs	r3, #1
 800de48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	f44f 7100 	mov.w	r1, #512	; 0x200
 800de54:	4618      	mov	r0, r3
 800de56:	f004 f855 	bl	8011f04 <SDMMC_CmdBlockLength>
 800de5a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800de5c:	6a3b      	ldr	r3, [r7, #32]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d00c      	beq.n	800de7c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	4a0a      	ldr	r2, [pc, #40]	; (800de90 <HAL_SD_ConfigWideBusOperation+0x214>)
 800de68:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800de6e:	6a3b      	ldr	r3, [r7, #32]
 800de70:	431a      	orrs	r2, r3
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800de76:	2301      	movs	r3, #1
 800de78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2201      	movs	r2, #1
 800de80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800de84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800de88:	4618      	mov	r0, r3
 800de8a:	372c      	adds	r7, #44	; 0x2c
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd90      	pop	{r4, r7, pc}
 800de90:	1fe00fff 	.word	0x1fe00fff
 800de94:	55e63b89 	.word	0x55e63b89
 800de98:	02faf080 	.word	0x02faf080
 800de9c:	017d7840 	.word	0x017d7840

0800dea0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b086      	sub	sp, #24
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800dea8:	2300      	movs	r3, #0
 800deaa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800deac:	f107 030c 	add.w	r3, r7, #12
 800deb0:	4619      	mov	r1, r3
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f000 fa40 	bl	800e338 <SD_SendStatus>
 800deb8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d005      	beq.n	800decc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dec4:	697b      	ldr	r3, [r7, #20]
 800dec6:	431a      	orrs	r2, r3
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	0a5b      	lsrs	r3, r3, #9
 800ded0:	f003 030f 	and.w	r3, r3, #15
 800ded4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ded6:	693b      	ldr	r3, [r7, #16]
}
 800ded8:	4618      	mov	r0, r3
 800deda:	3718      	adds	r7, #24
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}

0800dee0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b090      	sub	sp, #64	; 0x40
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800dee8:	2300      	movs	r3, #0
 800deea:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800deec:	f7f5 fd4e 	bl	800398c <HAL_GetTick>
 800def0:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	4618      	mov	r0, r3
 800def8:	f003 ff7f 	bl	8011dfa <SDMMC_GetPowerState>
 800defc:	4603      	mov	r3, r0
 800defe:	2b00      	cmp	r3, #0
 800df00:	d102      	bne.n	800df08 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800df02:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800df06:	e0b5      	b.n	800e074 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df0c:	2b03      	cmp	r3, #3
 800df0e:	d02e      	beq.n	800df6e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	4618      	mov	r0, r3
 800df16:	f004 f9ca 	bl	80122ae <SDMMC_CmdSendCID>
 800df1a:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800df1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d001      	beq.n	800df26 <SD_InitCard+0x46>
    {
      return errorstate;
 800df22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df24:	e0a6      	b.n	800e074 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	2100      	movs	r1, #0
 800df2c:	4618      	mov	r0, r3
 800df2e:	f003 ffaa 	bl	8011e86 <SDMMC_GetResponse>
 800df32:	4602      	mov	r2, r0
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	2104      	movs	r1, #4
 800df3e:	4618      	mov	r0, r3
 800df40:	f003 ffa1 	bl	8011e86 <SDMMC_GetResponse>
 800df44:	4602      	mov	r2, r0
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	2108      	movs	r1, #8
 800df50:	4618      	mov	r0, r3
 800df52:	f003 ff98 	bl	8011e86 <SDMMC_GetResponse>
 800df56:	4602      	mov	r2, r0
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	210c      	movs	r1, #12
 800df62:	4618      	mov	r0, r3
 800df64:	f003 ff8f 	bl	8011e86 <SDMMC_GetResponse>
 800df68:	4602      	mov	r2, r0
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df72:	2b03      	cmp	r3, #3
 800df74:	d01d      	beq.n	800dfb2 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800df76:	e019      	b.n	800dfac <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	f107 020a 	add.w	r2, r7, #10
 800df80:	4611      	mov	r1, r2
 800df82:	4618      	mov	r0, r3
 800df84:	f004 f9d2 	bl	801232c <SDMMC_CmdSetRelAdd>
 800df88:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800df8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d001      	beq.n	800df94 <SD_InitCard+0xb4>
      {
        return errorstate;
 800df90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df92:	e06f      	b.n	800e074 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800df94:	f7f5 fcfa 	bl	800398c <HAL_GetTick>
 800df98:	4602      	mov	r2, r0
 800df9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df9c:	1ad3      	subs	r3, r2, r3
 800df9e:	f241 3287 	movw	r2, #4999	; 0x1387
 800dfa2:	4293      	cmp	r3, r2
 800dfa4:	d902      	bls.n	800dfac <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800dfa6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dfaa:	e063      	b.n	800e074 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800dfac:	897b      	ldrh	r3, [r7, #10]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d0e2      	beq.n	800df78 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfb6:	2b03      	cmp	r3, #3
 800dfb8:	d036      	beq.n	800e028 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800dfba:	897b      	ldrh	r3, [r7, #10]
 800dfbc:	461a      	mov	r2, r3
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681a      	ldr	r2, [r3, #0]
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfca:	041b      	lsls	r3, r3, #16
 800dfcc:	4619      	mov	r1, r3
 800dfce:	4610      	mov	r0, r2
 800dfd0:	f004 f98c 	bl	80122ec <SDMMC_CmdSendCSD>
 800dfd4:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800dfd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d001      	beq.n	800dfe0 <SD_InitCard+0x100>
    {
      return errorstate;
 800dfdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfde:	e049      	b.n	800e074 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	2100      	movs	r1, #0
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f003 ff4d 	bl	8011e86 <SDMMC_GetResponse>
 800dfec:	4602      	mov	r2, r0
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	2104      	movs	r1, #4
 800dff8:	4618      	mov	r0, r3
 800dffa:	f003 ff44 	bl	8011e86 <SDMMC_GetResponse>
 800dffe:	4602      	mov	r2, r0
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	2108      	movs	r1, #8
 800e00a:	4618      	mov	r0, r3
 800e00c:	f003 ff3b 	bl	8011e86 <SDMMC_GetResponse>
 800e010:	4602      	mov	r2, r0
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	210c      	movs	r1, #12
 800e01c:	4618      	mov	r0, r3
 800e01e:	f003 ff32 	bl	8011e86 <SDMMC_GetResponse>
 800e022:	4602      	mov	r2, r0
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	2104      	movs	r1, #4
 800e02e:	4618      	mov	r0, r3
 800e030:	f003 ff29 	bl	8011e86 <SDMMC_GetResponse>
 800e034:	4603      	mov	r3, r0
 800e036:	0d1a      	lsrs	r2, r3, #20
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e03c:	f107 030c 	add.w	r3, r7, #12
 800e040:	4619      	mov	r1, r3
 800e042:	6878      	ldr	r0, [r7, #4]
 800e044:	f7ff fb8c 	bl	800d760 <HAL_SD_GetCardCSD>
 800e048:	4603      	mov	r3, r0
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d002      	beq.n	800e054 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e04e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e052:	e00f      	b.n	800e074 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681a      	ldr	r2, [r3, #0]
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e05c:	041b      	lsls	r3, r3, #16
 800e05e:	4619      	mov	r1, r3
 800e060:	4610      	mov	r0, r2
 800e062:	f004 f83b 	bl	80120dc <SDMMC_CmdSelDesel>
 800e066:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800e068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d001      	beq.n	800e072 <SD_InitCard+0x192>
  {
    return errorstate;
 800e06e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e070:	e000      	b.n	800e074 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e072:	2300      	movs	r3, #0
}
 800e074:	4618      	mov	r0, r3
 800e076:	3740      	adds	r7, #64	; 0x40
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}

0800e07c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b086      	sub	sp, #24
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e084:	2300      	movs	r3, #0
 800e086:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800e088:	2300      	movs	r3, #0
 800e08a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800e08c:	2300      	movs	r3, #0
 800e08e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	4618      	mov	r0, r3
 800e096:	f004 f844 	bl	8012122 <SDMMC_CmdGoIdleState>
 800e09a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d001      	beq.n	800e0a6 <SD_PowerON+0x2a>
  {
    return errorstate;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	e072      	b.n	800e18c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	f004 f857 	bl	801215e <SDMMC_CmdOperCond>
 800e0b0:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e0b8:	d10d      	bne.n	800e0d6 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	2200      	movs	r2, #0
 800e0be:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f004 f82c 	bl	8012122 <SDMMC_CmdGoIdleState>
 800e0ca:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d004      	beq.n	800e0dc <SD_PowerON+0x60>
    {
      return errorstate;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	e05a      	b.n	800e18c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	2201      	movs	r2, #1
 800e0da:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0e0:	2b01      	cmp	r3, #1
 800e0e2:	d137      	bne.n	800e154 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	2100      	movs	r1, #0
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f004 f857 	bl	801219e <SDMMC_CmdAppCommand>
 800e0f0:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d02d      	beq.n	800e154 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e0f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e0fc:	e046      	b.n	800e18c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	2100      	movs	r1, #0
 800e104:	4618      	mov	r0, r3
 800e106:	f004 f84a 	bl	801219e <SDMMC_CmdAppCommand>
 800e10a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d001      	beq.n	800e116 <SD_PowerON+0x9a>
    {
      return errorstate;
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	e03a      	b.n	800e18c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	491e      	ldr	r1, [pc, #120]	; (800e194 <SD_PowerON+0x118>)
 800e11c:	4618      	mov	r0, r3
 800e11e:	f004 f861 	bl	80121e4 <SDMMC_CmdAppOperCommand>
 800e122:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d002      	beq.n	800e130 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e12a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e12e:	e02d      	b.n	800e18c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	2100      	movs	r1, #0
 800e136:	4618      	mov	r0, r3
 800e138:	f003 fea5 	bl	8011e86 <SDMMC_GetResponse>
 800e13c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e13e:	697b      	ldr	r3, [r7, #20]
 800e140:	0fdb      	lsrs	r3, r3, #31
 800e142:	2b01      	cmp	r3, #1
 800e144:	d101      	bne.n	800e14a <SD_PowerON+0xce>
 800e146:	2301      	movs	r3, #1
 800e148:	e000      	b.n	800e14c <SD_PowerON+0xd0>
 800e14a:	2300      	movs	r3, #0
 800e14c:	613b      	str	r3, [r7, #16]

    count++;
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	3301      	adds	r3, #1
 800e152:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e15a:	4293      	cmp	r3, r2
 800e15c:	d802      	bhi.n	800e164 <SD_PowerON+0xe8>
 800e15e:	693b      	ldr	r3, [r7, #16]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d0cc      	beq.n	800e0fe <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e16a:	4293      	cmp	r3, r2
 800e16c:	d902      	bls.n	800e174 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e16e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e172:	e00b      	b.n	800e18c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	2200      	movs	r2, #0
 800e178:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e180:	2b00      	cmp	r3, #0
 800e182:	d002      	beq.n	800e18a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2201      	movs	r2, #1
 800e188:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e18a:	2300      	movs	r3, #0
}
 800e18c:	4618      	mov	r0, r3
 800e18e:	3718      	adds	r7, #24
 800e190:	46bd      	mov	sp, r7
 800e192:	bd80      	pop	{r7, pc}
 800e194:	c1100000 	.word	0xc1100000

0800e198 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b08c      	sub	sp, #48	; 0x30
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
 800e1a0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e1a2:	f7f5 fbf3 	bl	800398c <HAL_GetTick>
 800e1a6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	2100      	movs	r1, #0
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f003 fe67 	bl	8011e86 <SDMMC_GetResponse>
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e1be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e1c2:	d102      	bne.n	800e1ca <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e1c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e1c8:	e0b0      	b.n	800e32c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	2140      	movs	r1, #64	; 0x40
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	f003 fe97 	bl	8011f04 <SDMMC_CmdBlockLength>
 800e1d6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e1d8:	6a3b      	ldr	r3, [r7, #32]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d005      	beq.n	800e1ea <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e1e6:	6a3b      	ldr	r3, [r7, #32]
 800e1e8:	e0a0      	b.n	800e32c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681a      	ldr	r2, [r3, #0]
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1f2:	041b      	lsls	r3, r3, #16
 800e1f4:	4619      	mov	r1, r3
 800e1f6:	4610      	mov	r0, r2
 800e1f8:	f003 ffd1 	bl	801219e <SDMMC_CmdAppCommand>
 800e1fc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e1fe:	6a3b      	ldr	r3, [r7, #32]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d005      	beq.n	800e210 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e20c:	6a3b      	ldr	r3, [r7, #32]
 800e20e:	e08d      	b.n	800e32c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e210:	f04f 33ff 	mov.w	r3, #4294967295
 800e214:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e216:	2340      	movs	r3, #64	; 0x40
 800e218:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e21a:	2360      	movs	r3, #96	; 0x60
 800e21c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e21e:	2302      	movs	r3, #2
 800e220:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e222:	2300      	movs	r3, #0
 800e224:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e226:	2301      	movs	r3, #1
 800e228:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	f107 0208 	add.w	r2, r7, #8
 800e232:	4611      	mov	r1, r2
 800e234:	4618      	mov	r0, r3
 800e236:	f003 fe39 	bl	8011eac <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	4618      	mov	r0, r3
 800e240:	f004 f8b9 	bl	80123b6 <SDMMC_CmdStatusRegister>
 800e244:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e246:	6a3b      	ldr	r3, [r7, #32]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d02b      	beq.n	800e2a4 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e254:	6a3b      	ldr	r3, [r7, #32]
 800e256:	e069      	b.n	800e32c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e25e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e262:	2b00      	cmp	r3, #0
 800e264:	d013      	beq.n	800e28e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800e266:	2300      	movs	r3, #0
 800e268:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e26a:	e00d      	b.n	800e288 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	4618      	mov	r0, r3
 800e272:	f003 fd93 	bl	8011d9c <SDMMC_ReadFIFO>
 800e276:	4602      	mov	r2, r0
 800e278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e27a:	601a      	str	r2, [r3, #0]
        pData++;
 800e27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e27e:	3304      	adds	r3, #4
 800e280:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800e282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e284:	3301      	adds	r3, #1
 800e286:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e28a:	2b07      	cmp	r3, #7
 800e28c:	d9ee      	bls.n	800e26c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e28e:	f7f5 fb7d 	bl	800398c <HAL_GetTick>
 800e292:	4602      	mov	r2, r0
 800e294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e296:	1ad3      	subs	r3, r2, r3
 800e298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e29c:	d102      	bne.n	800e2a4 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e29e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e2a2:	e043      	b.n	800e32c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2aa:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d0d2      	beq.n	800e258 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2b8:	f003 0308 	and.w	r3, r3, #8
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d001      	beq.n	800e2c4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e2c0:	2308      	movs	r3, #8
 800e2c2:	e033      	b.n	800e32c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2ca:	f003 0302 	and.w	r3, r3, #2
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d001      	beq.n	800e2d6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e2d2:	2302      	movs	r3, #2
 800e2d4:	e02a      	b.n	800e32c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2dc:	f003 0320 	and.w	r3, r3, #32
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d017      	beq.n	800e314 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e2e4:	2320      	movs	r3, #32
 800e2e6:	e021      	b.n	800e32c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	f003 fd55 	bl	8011d9c <SDMMC_ReadFIFO>
 800e2f2:	4602      	mov	r2, r0
 800e2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2f6:	601a      	str	r2, [r3, #0]
    pData++;
 800e2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2fa:	3304      	adds	r3, #4
 800e2fc:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e2fe:	f7f5 fb45 	bl	800398c <HAL_GetTick>
 800e302:	4602      	mov	r2, r0
 800e304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e306:	1ad3      	subs	r3, r2, r3
 800e308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e30c:	d102      	bne.n	800e314 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e30e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e312:	e00b      	b.n	800e32c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e31a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d1e2      	bne.n	800e2e8 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	4a03      	ldr	r2, [pc, #12]	; (800e334 <SD_SendSDStatus+0x19c>)
 800e328:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e32a:	2300      	movs	r3, #0
}
 800e32c:	4618      	mov	r0, r3
 800e32e:	3730      	adds	r7, #48	; 0x30
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}
 800e334:	18000f3a 	.word	0x18000f3a

0800e338 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b084      	sub	sp, #16
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
 800e340:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d102      	bne.n	800e34e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e348:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e34c:	e018      	b.n	800e380 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681a      	ldr	r2, [r3, #0]
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e356:	041b      	lsls	r3, r3, #16
 800e358:	4619      	mov	r1, r3
 800e35a:	4610      	mov	r0, r2
 800e35c:	f004 f808 	bl	8012370 <SDMMC_CmdSendStatus>
 800e360:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d001      	beq.n	800e36c <SD_SendStatus+0x34>
  {
    return errorstate;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	e009      	b.n	800e380 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	2100      	movs	r1, #0
 800e372:	4618      	mov	r0, r3
 800e374:	f003 fd87 	bl	8011e86 <SDMMC_GetResponse>
 800e378:	4602      	mov	r2, r0
 800e37a:	683b      	ldr	r3, [r7, #0]
 800e37c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e37e:	2300      	movs	r3, #0
}
 800e380:	4618      	mov	r0, r3
 800e382:	3710      	adds	r7, #16
 800e384:	46bd      	mov	sp, r7
 800e386:	bd80      	pop	{r7, pc}

0800e388 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b086      	sub	sp, #24
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e390:	2300      	movs	r3, #0
 800e392:	60fb      	str	r3, [r7, #12]
 800e394:	2300      	movs	r3, #0
 800e396:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	2100      	movs	r1, #0
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f003 fd71 	bl	8011e86 <SDMMC_GetResponse>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e3aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e3ae:	d102      	bne.n	800e3b6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e3b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e3b4:	e02f      	b.n	800e416 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e3b6:	f107 030c 	add.w	r3, r7, #12
 800e3ba:	4619      	mov	r1, r3
 800e3bc:	6878      	ldr	r0, [r7, #4]
 800e3be:	f000 f879 	bl	800e4b4 <SD_FindSCR>
 800e3c2:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e3c4:	697b      	ldr	r3, [r7, #20]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d001      	beq.n	800e3ce <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e3ca:	697b      	ldr	r3, [r7, #20]
 800e3cc:	e023      	b.n	800e416 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e3ce:	693b      	ldr	r3, [r7, #16]
 800e3d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d01c      	beq.n	800e412 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681a      	ldr	r2, [r3, #0]
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3e0:	041b      	lsls	r3, r3, #16
 800e3e2:	4619      	mov	r1, r3
 800e3e4:	4610      	mov	r0, r2
 800e3e6:	f003 feda 	bl	801219e <SDMMC_CmdAppCommand>
 800e3ea:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e3ec:	697b      	ldr	r3, [r7, #20]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d001      	beq.n	800e3f6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e3f2:	697b      	ldr	r3, [r7, #20]
 800e3f4:	e00f      	b.n	800e416 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	2102      	movs	r1, #2
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	f003 ff11 	bl	8012224 <SDMMC_CmdBusWidth>
 800e402:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e404:	697b      	ldr	r3, [r7, #20]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d001      	beq.n	800e40e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e40a:	697b      	ldr	r3, [r7, #20]
 800e40c:	e003      	b.n	800e416 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e40e:	2300      	movs	r3, #0
 800e410:	e001      	b.n	800e416 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e412:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e416:	4618      	mov	r0, r3
 800e418:	3718      	adds	r7, #24
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd80      	pop	{r7, pc}

0800e41e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e41e:	b580      	push	{r7, lr}
 800e420:	b086      	sub	sp, #24
 800e422:	af00      	add	r7, sp, #0
 800e424:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e426:	2300      	movs	r3, #0
 800e428:	60fb      	str	r3, [r7, #12]
 800e42a:	2300      	movs	r3, #0
 800e42c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	2100      	movs	r1, #0
 800e434:	4618      	mov	r0, r3
 800e436:	f003 fd26 	bl	8011e86 <SDMMC_GetResponse>
 800e43a:	4603      	mov	r3, r0
 800e43c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e440:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e444:	d102      	bne.n	800e44c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e446:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e44a:	e02f      	b.n	800e4ac <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e44c:	f107 030c 	add.w	r3, r7, #12
 800e450:	4619      	mov	r1, r3
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f000 f82e 	bl	800e4b4 <SD_FindSCR>
 800e458:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e45a:	697b      	ldr	r3, [r7, #20]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d001      	beq.n	800e464 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e460:	697b      	ldr	r3, [r7, #20]
 800e462:	e023      	b.n	800e4ac <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e464:	693b      	ldr	r3, [r7, #16]
 800e466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d01c      	beq.n	800e4a8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681a      	ldr	r2, [r3, #0]
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e476:	041b      	lsls	r3, r3, #16
 800e478:	4619      	mov	r1, r3
 800e47a:	4610      	mov	r0, r2
 800e47c:	f003 fe8f 	bl	801219e <SDMMC_CmdAppCommand>
 800e480:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e482:	697b      	ldr	r3, [r7, #20]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d001      	beq.n	800e48c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e488:	697b      	ldr	r3, [r7, #20]
 800e48a:	e00f      	b.n	800e4ac <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	2100      	movs	r1, #0
 800e492:	4618      	mov	r0, r3
 800e494:	f003 fec6 	bl	8012224 <SDMMC_CmdBusWidth>
 800e498:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e49a:	697b      	ldr	r3, [r7, #20]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d001      	beq.n	800e4a4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e4a0:	697b      	ldr	r3, [r7, #20]
 800e4a2:	e003      	b.n	800e4ac <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	e001      	b.n	800e4ac <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e4a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	3718      	adds	r7, #24
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	bd80      	pop	{r7, pc}

0800e4b4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b08e      	sub	sp, #56	; 0x38
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
 800e4bc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e4be:	f7f5 fa65 	bl	800398c <HAL_GetTick>
 800e4c2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	60bb      	str	r3, [r7, #8]
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	2108      	movs	r1, #8
 800e4da:	4618      	mov	r0, r3
 800e4dc:	f003 fd12 	bl	8011f04 <SDMMC_CmdBlockLength>
 800e4e0:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d001      	beq.n	800e4ec <SD_FindSCR+0x38>
  {
    return errorstate;
 800e4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ea:	e0ad      	b.n	800e648 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681a      	ldr	r2, [r3, #0]
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4f4:	041b      	lsls	r3, r3, #16
 800e4f6:	4619      	mov	r1, r3
 800e4f8:	4610      	mov	r0, r2
 800e4fa:	f003 fe50 	bl	801219e <SDMMC_CmdAppCommand>
 800e4fe:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e502:	2b00      	cmp	r3, #0
 800e504:	d001      	beq.n	800e50a <SD_FindSCR+0x56>
  {
    return errorstate;
 800e506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e508:	e09e      	b.n	800e648 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e50a:	f04f 33ff 	mov.w	r3, #4294967295
 800e50e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e510:	2308      	movs	r3, #8
 800e512:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e514:	2330      	movs	r3, #48	; 0x30
 800e516:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e518:	2302      	movs	r3, #2
 800e51a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e51c:	2300      	movs	r3, #0
 800e51e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e520:	2301      	movs	r3, #1
 800e522:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	f107 0210 	add.w	r2, r7, #16
 800e52c:	4611      	mov	r1, r2
 800e52e:	4618      	mov	r0, r3
 800e530:	f003 fcbc 	bl	8011eac <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	4618      	mov	r0, r3
 800e53a:	f003 fe96 	bl	801226a <SDMMC_CmdSendSCR>
 800e53e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e542:	2b00      	cmp	r3, #0
 800e544:	d027      	beq.n	800e596 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800e546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e548:	e07e      	b.n	800e648 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e550:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e554:	2b00      	cmp	r3, #0
 800e556:	d113      	bne.n	800e580 <SD_FindSCR+0xcc>
 800e558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d110      	bne.n	800e580 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	4618      	mov	r0, r3
 800e564:	f003 fc1a 	bl	8011d9c <SDMMC_ReadFIFO>
 800e568:	4603      	mov	r3, r0
 800e56a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	4618      	mov	r0, r3
 800e572:	f003 fc13 	bl	8011d9c <SDMMC_ReadFIFO>
 800e576:	4603      	mov	r3, r0
 800e578:	60fb      	str	r3, [r7, #12]
      index++;
 800e57a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e57c:	3301      	adds	r3, #1
 800e57e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e580:	f7f5 fa04 	bl	800398c <HAL_GetTick>
 800e584:	4602      	mov	r2, r0
 800e586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e588:	1ad3      	subs	r3, r2, r3
 800e58a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e58e:	d102      	bne.n	800e596 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e590:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e594:	e058      	b.n	800e648 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e59c:	f240 532a 	movw	r3, #1322	; 0x52a
 800e5a0:	4013      	ands	r3, r2
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d0d1      	beq.n	800e54a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5ac:	f003 0308 	and.w	r3, r3, #8
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d005      	beq.n	800e5c0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	2208      	movs	r2, #8
 800e5ba:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e5bc:	2308      	movs	r3, #8
 800e5be:	e043      	b.n	800e648 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5c6:	f003 0302 	and.w	r3, r3, #2
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d005      	beq.n	800e5da <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	2202      	movs	r2, #2
 800e5d4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e5d6:	2302      	movs	r3, #2
 800e5d8:	e036      	b.n	800e648 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5e0:	f003 0320 	and.w	r3, r3, #32
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d005      	beq.n	800e5f4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	2220      	movs	r2, #32
 800e5ee:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e5f0:	2320      	movs	r3, #32
 800e5f2:	e029      	b.n	800e648 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	4a15      	ldr	r2, [pc, #84]	; (800e650 <SD_FindSCR+0x19c>)
 800e5fa:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	061a      	lsls	r2, r3, #24
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	021b      	lsls	r3, r3, #8
 800e604:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e608:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	0a1b      	lsrs	r3, r3, #8
 800e60e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e612:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	0e1b      	lsrs	r3, r3, #24
 800e618:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e61c:	601a      	str	r2, [r3, #0]
    scr++;
 800e61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e620:	3304      	adds	r3, #4
 800e622:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	061a      	lsls	r2, r3, #24
 800e628:	68bb      	ldr	r3, [r7, #8]
 800e62a:	021b      	lsls	r3, r3, #8
 800e62c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e630:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e632:	68bb      	ldr	r3, [r7, #8]
 800e634:	0a1b      	lsrs	r3, r3, #8
 800e636:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e63a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	0e1b      	lsrs	r3, r3, #24
 800e640:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e644:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e646:	2300      	movs	r3, #0
}
 800e648:	4618      	mov	r0, r3
 800e64a:	3738      	adds	r7, #56	; 0x38
 800e64c:	46bd      	mov	sp, r7
 800e64e:	bd80      	pop	{r7, pc}
 800e650:	18000f3a 	.word	0x18000f3a

0800e654 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b086      	sub	sp, #24
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e660:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e666:	2b1f      	cmp	r3, #31
 800e668:	d936      	bls.n	800e6d8 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800e66a:	2300      	movs	r3, #0
 800e66c:	617b      	str	r3, [r7, #20]
 800e66e:	e027      	b.n	800e6c0 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	4618      	mov	r0, r3
 800e676:	f003 fb91 	bl	8011d9c <SDMMC_ReadFIFO>
 800e67a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	b2da      	uxtb	r2, r3
 800e680:	693b      	ldr	r3, [r7, #16]
 800e682:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e684:	693b      	ldr	r3, [r7, #16]
 800e686:	3301      	adds	r3, #1
 800e688:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	0a1b      	lsrs	r3, r3, #8
 800e68e:	b2da      	uxtb	r2, r3
 800e690:	693b      	ldr	r3, [r7, #16]
 800e692:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e694:	693b      	ldr	r3, [r7, #16]
 800e696:	3301      	adds	r3, #1
 800e698:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	0c1b      	lsrs	r3, r3, #16
 800e69e:	b2da      	uxtb	r2, r3
 800e6a0:	693b      	ldr	r3, [r7, #16]
 800e6a2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e6a4:	693b      	ldr	r3, [r7, #16]
 800e6a6:	3301      	adds	r3, #1
 800e6a8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	0e1b      	lsrs	r3, r3, #24
 800e6ae:	b2da      	uxtb	r2, r3
 800e6b0:	693b      	ldr	r3, [r7, #16]
 800e6b2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e6b4:	693b      	ldr	r3, [r7, #16]
 800e6b6:	3301      	adds	r3, #1
 800e6b8:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800e6ba:	697b      	ldr	r3, [r7, #20]
 800e6bc:	3301      	adds	r3, #1
 800e6be:	617b      	str	r3, [r7, #20]
 800e6c0:	697b      	ldr	r3, [r7, #20]
 800e6c2:	2b07      	cmp	r3, #7
 800e6c4:	d9d4      	bls.n	800e670 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	693a      	ldr	r2, [r7, #16]
 800e6ca:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6d0:	f1a3 0220 	sub.w	r2, r3, #32
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800e6d8:	bf00      	nop
 800e6da:	3718      	adds	r7, #24
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}

0800e6e0 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b086      	sub	sp, #24
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	69db      	ldr	r3, [r3, #28]
 800e6ec:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	6a1b      	ldr	r3, [r3, #32]
 800e6f2:	2b1f      	cmp	r3, #31
 800e6f4:	d93a      	bls.n	800e76c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	617b      	str	r3, [r7, #20]
 800e6fa:	e02b      	b.n	800e754 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800e6fc:	693b      	ldr	r3, [r7, #16]
 800e6fe:	781b      	ldrb	r3, [r3, #0]
 800e700:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e702:	693b      	ldr	r3, [r7, #16]
 800e704:	3301      	adds	r3, #1
 800e706:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e708:	693b      	ldr	r3, [r7, #16]
 800e70a:	781b      	ldrb	r3, [r3, #0]
 800e70c:	021a      	lsls	r2, r3, #8
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	4313      	orrs	r3, r2
 800e712:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e714:	693b      	ldr	r3, [r7, #16]
 800e716:	3301      	adds	r3, #1
 800e718:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e71a:	693b      	ldr	r3, [r7, #16]
 800e71c:	781b      	ldrb	r3, [r3, #0]
 800e71e:	041a      	lsls	r2, r3, #16
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	4313      	orrs	r3, r2
 800e724:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e726:	693b      	ldr	r3, [r7, #16]
 800e728:	3301      	adds	r3, #1
 800e72a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e72c:	693b      	ldr	r3, [r7, #16]
 800e72e:	781b      	ldrb	r3, [r3, #0]
 800e730:	061a      	lsls	r2, r3, #24
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	4313      	orrs	r3, r2
 800e736:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e738:	693b      	ldr	r3, [r7, #16]
 800e73a:	3301      	adds	r3, #1
 800e73c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	f107 020c 	add.w	r2, r7, #12
 800e746:	4611      	mov	r1, r2
 800e748:	4618      	mov	r0, r3
 800e74a:	f003 fb34 	bl	8011db6 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800e74e:	697b      	ldr	r3, [r7, #20]
 800e750:	3301      	adds	r3, #1
 800e752:	617b      	str	r3, [r7, #20]
 800e754:	697b      	ldr	r3, [r7, #20]
 800e756:	2b07      	cmp	r3, #7
 800e758:	d9d0      	bls.n	800e6fc <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	693a      	ldr	r2, [r7, #16]
 800e75e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	6a1b      	ldr	r3, [r3, #32]
 800e764:	f1a3 0220 	sub.w	r2, r3, #32
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	621a      	str	r2, [r3, #32]
  }
}
 800e76c:	bf00      	nop
 800e76e:	3718      	adds	r7, #24
 800e770:	46bd      	mov	sp, r7
 800e772:	bd80      	pop	{r7, pc}

0800e774 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e774:	b480      	push	{r7}
 800e776:	b083      	sub	sp, #12
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e77c:	bf00      	nop
 800e77e:	370c      	adds	r7, #12
 800e780:	46bd      	mov	sp, r7
 800e782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e786:	4770      	bx	lr

0800e788 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e788:	b480      	push	{r7}
 800e78a:	b083      	sub	sp, #12
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e790:	bf00      	nop
 800e792:	370c      	adds	r7, #12
 800e794:	46bd      	mov	sp, r7
 800e796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79a:	4770      	bx	lr

0800e79c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e79c:	b480      	push	{r7}
 800e79e:	b083      	sub	sp, #12
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e7a4:	bf00      	nop
 800e7a6:	370c      	adds	r7, #12
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ae:	4770      	bx	lr

0800e7b0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e7b0:	b480      	push	{r7}
 800e7b2:	b083      	sub	sp, #12
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e7b8:	bf00      	nop
 800e7ba:	370c      	adds	r7, #12
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c2:	4770      	bx	lr

0800e7c4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b084      	sub	sp, #16
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d101      	bne.n	800e7d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e7d2:	2301      	movs	r3, #1
 800e7d4:	e10f      	b.n	800e9f6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2200      	movs	r2, #0
 800e7da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	4a87      	ldr	r2, [pc, #540]	; (800ea00 <HAL_SPI_Init+0x23c>)
 800e7e2:	4293      	cmp	r3, r2
 800e7e4:	d00f      	beq.n	800e806 <HAL_SPI_Init+0x42>
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	4a86      	ldr	r2, [pc, #536]	; (800ea04 <HAL_SPI_Init+0x240>)
 800e7ec:	4293      	cmp	r3, r2
 800e7ee:	d00a      	beq.n	800e806 <HAL_SPI_Init+0x42>
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	4a84      	ldr	r2, [pc, #528]	; (800ea08 <HAL_SPI_Init+0x244>)
 800e7f6:	4293      	cmp	r3, r2
 800e7f8:	d005      	beq.n	800e806 <HAL_SPI_Init+0x42>
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	68db      	ldr	r3, [r3, #12]
 800e7fe:	2b0f      	cmp	r3, #15
 800e800:	d901      	bls.n	800e806 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e802:	2301      	movs	r3, #1
 800e804:	e0f7      	b.n	800e9f6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	f000 fd5a 	bl	800f2c0 <SPI_GetPacketSize>
 800e80c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	4a7b      	ldr	r2, [pc, #492]	; (800ea00 <HAL_SPI_Init+0x23c>)
 800e814:	4293      	cmp	r3, r2
 800e816:	d00c      	beq.n	800e832 <HAL_SPI_Init+0x6e>
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	4a79      	ldr	r2, [pc, #484]	; (800ea04 <HAL_SPI_Init+0x240>)
 800e81e:	4293      	cmp	r3, r2
 800e820:	d007      	beq.n	800e832 <HAL_SPI_Init+0x6e>
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	4a78      	ldr	r2, [pc, #480]	; (800ea08 <HAL_SPI_Init+0x244>)
 800e828:	4293      	cmp	r3, r2
 800e82a:	d002      	beq.n	800e832 <HAL_SPI_Init+0x6e>
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	2b08      	cmp	r3, #8
 800e830:	d811      	bhi.n	800e856 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e836:	4a72      	ldr	r2, [pc, #456]	; (800ea00 <HAL_SPI_Init+0x23c>)
 800e838:	4293      	cmp	r3, r2
 800e83a:	d009      	beq.n	800e850 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	4a70      	ldr	r2, [pc, #448]	; (800ea04 <HAL_SPI_Init+0x240>)
 800e842:	4293      	cmp	r3, r2
 800e844:	d004      	beq.n	800e850 <HAL_SPI_Init+0x8c>
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	4a6f      	ldr	r2, [pc, #444]	; (800ea08 <HAL_SPI_Init+0x244>)
 800e84c:	4293      	cmp	r3, r2
 800e84e:	d104      	bne.n	800e85a <HAL_SPI_Init+0x96>
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	2b10      	cmp	r3, #16
 800e854:	d901      	bls.n	800e85a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e856:	2301      	movs	r3, #1
 800e858:	e0cd      	b.n	800e9f6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e860:	b2db      	uxtb	r3, r3
 800e862:	2b00      	cmp	r3, #0
 800e864:	d106      	bne.n	800e874 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	2200      	movs	r2, #0
 800e86a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e86e:	6878      	ldr	r0, [r7, #4]
 800e870:	f7f4 fad0 	bl	8002e14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2202      	movs	r2, #2
 800e878:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	681a      	ldr	r2, [r3, #0]
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	f022 0201 	bic.w	r2, r2, #1
 800e88a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	689b      	ldr	r3, [r3, #8]
 800e892:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e896:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	699b      	ldr	r3, [r3, #24]
 800e89c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e8a0:	d119      	bne.n	800e8d6 <HAL_SPI_Init+0x112>
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	685b      	ldr	r3, [r3, #4]
 800e8a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e8aa:	d103      	bne.n	800e8b4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d008      	beq.n	800e8c6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d10c      	bne.n	800e8d6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e8c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e8c4:	d107      	bne.n	800e8d6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	681a      	ldr	r2, [r3, #0]
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e8d4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	685b      	ldr	r3, [r3, #4]
 800e8da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d00f      	beq.n	800e902 <HAL_SPI_Init+0x13e>
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	68db      	ldr	r3, [r3, #12]
 800e8e6:	2b06      	cmp	r3, #6
 800e8e8:	d90b      	bls.n	800e902 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	430a      	orrs	r2, r1
 800e8fe:	601a      	str	r2, [r3, #0]
 800e900:	e007      	b.n	800e912 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	681a      	ldr	r2, [r3, #0]
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e910:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	69da      	ldr	r2, [r3, #28]
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e91a:	431a      	orrs	r2, r3
 800e91c:	68bb      	ldr	r3, [r7, #8]
 800e91e:	431a      	orrs	r2, r3
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e924:	ea42 0103 	orr.w	r1, r2, r3
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	68da      	ldr	r2, [r3, #12]
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	430a      	orrs	r2, r1
 800e932:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e93c:	431a      	orrs	r2, r3
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e942:	431a      	orrs	r2, r3
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	699b      	ldr	r3, [r3, #24]
 800e948:	431a      	orrs	r2, r3
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	691b      	ldr	r3, [r3, #16]
 800e94e:	431a      	orrs	r2, r3
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	695b      	ldr	r3, [r3, #20]
 800e954:	431a      	orrs	r2, r3
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	6a1b      	ldr	r3, [r3, #32]
 800e95a:	431a      	orrs	r2, r3
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	685b      	ldr	r3, [r3, #4]
 800e960:	431a      	orrs	r2, r3
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e966:	431a      	orrs	r2, r3
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	689b      	ldr	r3, [r3, #8]
 800e96c:	431a      	orrs	r2, r3
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e972:	ea42 0103 	orr.w	r1, r2, r3
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	430a      	orrs	r2, r1
 800e980:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	685b      	ldr	r3, [r3, #4]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d113      	bne.n	800e9b2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	689b      	ldr	r3, [r3, #8]
 800e990:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e99c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	689b      	ldr	r3, [r3, #8]
 800e9a4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e9b0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	f022 0201 	bic.w	r2, r2, #1
 800e9c0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	685b      	ldr	r3, [r3, #4]
 800e9c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d00a      	beq.n	800e9e4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	68db      	ldr	r3, [r3, #12]
 800e9d4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	430a      	orrs	r2, r1
 800e9e2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	2201      	movs	r2, #1
 800e9f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e9f4:	2300      	movs	r3, #0
}
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	3710      	adds	r7, #16
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	bd80      	pop	{r7, pc}
 800e9fe:	bf00      	nop
 800ea00:	40013000 	.word	0x40013000
 800ea04:	40003800 	.word	0x40003800
 800ea08:	40003c00 	.word	0x40003c00

0800ea0c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b08a      	sub	sp, #40	; 0x28
 800ea10:	af02      	add	r7, sp, #8
 800ea12:	60f8      	str	r0, [r7, #12]
 800ea14:	60b9      	str	r1, [r7, #8]
 800ea16:	603b      	str	r3, [r7, #0]
 800ea18:	4613      	mov	r3, r2
 800ea1a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	3320      	adds	r3, #32
 800ea22:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ea24:	2300      	movs	r3, #0
 800ea26:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ea2e:	2b01      	cmp	r3, #1
 800ea30:	d101      	bne.n	800ea36 <HAL_SPI_Transmit+0x2a>
 800ea32:	2302      	movs	r3, #2
 800ea34:	e1e1      	b.n	800edfa <HAL_SPI_Transmit+0x3ee>
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	2201      	movs	r2, #1
 800ea3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ea3e:	f7f4 ffa5 	bl	800398c <HAL_GetTick>
 800ea42:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ea4a:	b2db      	uxtb	r3, r3
 800ea4c:	2b01      	cmp	r3, #1
 800ea4e:	d007      	beq.n	800ea60 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800ea50:	2302      	movs	r3, #2
 800ea52:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	2200      	movs	r2, #0
 800ea58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ea5c:	7efb      	ldrb	r3, [r7, #27]
 800ea5e:	e1cc      	b.n	800edfa <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ea60:	68bb      	ldr	r3, [r7, #8]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d002      	beq.n	800ea6c <HAL_SPI_Transmit+0x60>
 800ea66:	88fb      	ldrh	r3, [r7, #6]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d107      	bne.n	800ea7c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800ea6c:	2301      	movs	r3, #1
 800ea6e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	2200      	movs	r2, #0
 800ea74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ea78:	7efb      	ldrb	r3, [r7, #27]
 800ea7a:	e1be      	b.n	800edfa <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	2203      	movs	r2, #3
 800ea80:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	2200      	movs	r2, #0
 800ea88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	68ba      	ldr	r2, [r7, #8]
 800ea90:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	88fa      	ldrh	r2, [r7, #6]
 800ea96:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	88fa      	ldrh	r2, [r7, #6]
 800ea9e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	2200      	movs	r2, #0
 800eaac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	2200      	movs	r2, #0
 800eab4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	2200      	movs	r2, #0
 800eabc:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	2200      	movs	r2, #0
 800eac2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	689b      	ldr	r3, [r3, #8]
 800eac8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800eacc:	d108      	bne.n	800eae0 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	681a      	ldr	r2, [r3, #0]
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eadc:	601a      	str	r2, [r3, #0]
 800eade:	e009      	b.n	800eaf4 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	68db      	ldr	r3, [r3, #12]
 800eae6:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800eaf2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	685a      	ldr	r2, [r3, #4]
 800eafa:	4b96      	ldr	r3, [pc, #600]	; (800ed54 <HAL_SPI_Transmit+0x348>)
 800eafc:	4013      	ands	r3, r2
 800eafe:	88f9      	ldrh	r1, [r7, #6]
 800eb00:	68fa      	ldr	r2, [r7, #12]
 800eb02:	6812      	ldr	r2, [r2, #0]
 800eb04:	430b      	orrs	r3, r1
 800eb06:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	681a      	ldr	r2, [r3, #0]
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	f042 0201 	orr.w	r2, r2, #1
 800eb16:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	685b      	ldr	r3, [r3, #4]
 800eb1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800eb20:	d107      	bne.n	800eb32 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	681a      	ldr	r2, [r3, #0]
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eb30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	68db      	ldr	r3, [r3, #12]
 800eb36:	2b0f      	cmp	r3, #15
 800eb38:	d947      	bls.n	800ebca <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800eb3a:	e03f      	b.n	800ebbc <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	695b      	ldr	r3, [r3, #20]
 800eb42:	f003 0302 	and.w	r3, r3, #2
 800eb46:	2b02      	cmp	r3, #2
 800eb48:	d114      	bne.n	800eb74 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	6812      	ldr	r2, [r2, #0]
 800eb54:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb5a:	1d1a      	adds	r2, r3, #4
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eb66:	b29b      	uxth	r3, r3
 800eb68:	3b01      	subs	r3, #1
 800eb6a:	b29a      	uxth	r2, r3
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800eb72:	e023      	b.n	800ebbc <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eb74:	f7f4 ff0a 	bl	800398c <HAL_GetTick>
 800eb78:	4602      	mov	r2, r0
 800eb7a:	697b      	ldr	r3, [r7, #20]
 800eb7c:	1ad3      	subs	r3, r2, r3
 800eb7e:	683a      	ldr	r2, [r7, #0]
 800eb80:	429a      	cmp	r2, r3
 800eb82:	d803      	bhi.n	800eb8c <HAL_SPI_Transmit+0x180>
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb8a:	d102      	bne.n	800eb92 <HAL_SPI_Transmit+0x186>
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d114      	bne.n	800ebbc <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800eb92:	68f8      	ldr	r0, [r7, #12]
 800eb94:	f000 fac6 	bl	800f124 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eba6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	2201      	movs	r2, #1
 800ebb4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ebb8:	2303      	movs	r3, #3
 800ebba:	e11e      	b.n	800edfa <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ebc2:	b29b      	uxth	r3, r3
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d1b9      	bne.n	800eb3c <HAL_SPI_Transmit+0x130>
 800ebc8:	e0f1      	b.n	800edae <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	68db      	ldr	r3, [r3, #12]
 800ebce:	2b07      	cmp	r3, #7
 800ebd0:	f240 80e6 	bls.w	800eda0 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ebd4:	e05d      	b.n	800ec92 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	695b      	ldr	r3, [r3, #20]
 800ebdc:	f003 0302 	and.w	r3, r3, #2
 800ebe0:	2b02      	cmp	r3, #2
 800ebe2:	d132      	bne.n	800ec4a <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ebea:	b29b      	uxth	r3, r3
 800ebec:	2b01      	cmp	r3, #1
 800ebee:	d918      	bls.n	800ec22 <HAL_SPI_Transmit+0x216>
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d014      	beq.n	800ec22 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	6812      	ldr	r2, [r2, #0]
 800ec02:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec08:	1d1a      	adds	r2, r3, #4
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec14:	b29b      	uxth	r3, r3
 800ec16:	3b02      	subs	r3, #2
 800ec18:	b29a      	uxth	r2, r3
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ec20:	e037      	b.n	800ec92 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec26:	881a      	ldrh	r2, [r3, #0]
 800ec28:	69fb      	ldr	r3, [r7, #28]
 800ec2a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec30:	1c9a      	adds	r2, r3, #2
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec3c:	b29b      	uxth	r3, r3
 800ec3e:	3b01      	subs	r3, #1
 800ec40:	b29a      	uxth	r2, r3
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ec48:	e023      	b.n	800ec92 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ec4a:	f7f4 fe9f 	bl	800398c <HAL_GetTick>
 800ec4e:	4602      	mov	r2, r0
 800ec50:	697b      	ldr	r3, [r7, #20]
 800ec52:	1ad3      	subs	r3, r2, r3
 800ec54:	683a      	ldr	r2, [r7, #0]
 800ec56:	429a      	cmp	r2, r3
 800ec58:	d803      	bhi.n	800ec62 <HAL_SPI_Transmit+0x256>
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec60:	d102      	bne.n	800ec68 <HAL_SPI_Transmit+0x25c>
 800ec62:	683b      	ldr	r3, [r7, #0]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d114      	bne.n	800ec92 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ec68:	68f8      	ldr	r0, [r7, #12]
 800ec6a:	f000 fa5b 	bl	800f124 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	2200      	movs	r2, #0
 800ec72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	2201      	movs	r2, #1
 800ec8a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ec8e:	2303      	movs	r3, #3
 800ec90:	e0b3      	b.n	800edfa <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec98:	b29b      	uxth	r3, r3
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d19b      	bne.n	800ebd6 <HAL_SPI_Transmit+0x1ca>
 800ec9e:	e086      	b.n	800edae <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	695b      	ldr	r3, [r3, #20]
 800eca6:	f003 0302 	and.w	r3, r3, #2
 800ecaa:	2b02      	cmp	r3, #2
 800ecac:	d154      	bne.n	800ed58 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ecb4:	b29b      	uxth	r3, r3
 800ecb6:	2b03      	cmp	r3, #3
 800ecb8:	d918      	bls.n	800ecec <HAL_SPI_Transmit+0x2e0>
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecbe:	2b40      	cmp	r3, #64	; 0x40
 800ecc0:	d914      	bls.n	800ecec <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	6812      	ldr	r2, [r2, #0]
 800eccc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ecd2:	1d1a      	adds	r2, r3, #4
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ecde:	b29b      	uxth	r3, r3
 800ece0:	3b04      	subs	r3, #4
 800ece2:	b29a      	uxth	r2, r3
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ecea:	e059      	b.n	800eda0 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ecf2:	b29b      	uxth	r3, r3
 800ecf4:	2b01      	cmp	r3, #1
 800ecf6:	d917      	bls.n	800ed28 <HAL_SPI_Transmit+0x31c>
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d013      	beq.n	800ed28 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed04:	881a      	ldrh	r2, [r3, #0]
 800ed06:	69fb      	ldr	r3, [r7, #28]
 800ed08:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed0e:	1c9a      	adds	r2, r3, #2
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed1a:	b29b      	uxth	r3, r3
 800ed1c:	3b02      	subs	r3, #2
 800ed1e:	b29a      	uxth	r2, r3
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ed26:	e03b      	b.n	800eda0 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	3320      	adds	r3, #32
 800ed32:	7812      	ldrb	r2, [r2, #0]
 800ed34:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed3a:	1c5a      	adds	r2, r3, #1
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed46:	b29b      	uxth	r3, r3
 800ed48:	3b01      	subs	r3, #1
 800ed4a:	b29a      	uxth	r2, r3
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ed52:	e025      	b.n	800eda0 <HAL_SPI_Transmit+0x394>
 800ed54:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ed58:	f7f4 fe18 	bl	800398c <HAL_GetTick>
 800ed5c:	4602      	mov	r2, r0
 800ed5e:	697b      	ldr	r3, [r7, #20]
 800ed60:	1ad3      	subs	r3, r2, r3
 800ed62:	683a      	ldr	r2, [r7, #0]
 800ed64:	429a      	cmp	r2, r3
 800ed66:	d803      	bhi.n	800ed70 <HAL_SPI_Transmit+0x364>
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed6e:	d102      	bne.n	800ed76 <HAL_SPI_Transmit+0x36a>
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d114      	bne.n	800eda0 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ed76:	68f8      	ldr	r0, [r7, #12]
 800ed78:	f000 f9d4 	bl	800f124 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	2200      	movs	r2, #0
 800ed80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	2201      	movs	r2, #1
 800ed98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ed9c:	2303      	movs	r3, #3
 800ed9e:	e02c      	b.n	800edfa <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eda6:	b29b      	uxth	r3, r3
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	f47f af79 	bne.w	800eca0 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800edae:	697b      	ldr	r3, [r7, #20]
 800edb0:	9300      	str	r3, [sp, #0]
 800edb2:	683b      	ldr	r3, [r7, #0]
 800edb4:	2200      	movs	r2, #0
 800edb6:	2108      	movs	r1, #8
 800edb8:	68f8      	ldr	r0, [r7, #12]
 800edba:	f000 fa53 	bl	800f264 <SPI_WaitOnFlagUntilTimeout>
 800edbe:	4603      	mov	r3, r0
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d007      	beq.n	800edd4 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800edca:	f043 0220 	orr.w	r2, r3, #32
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800edd4:	68f8      	ldr	r0, [r7, #12]
 800edd6:	f000 f9a5 	bl	800f124 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	2200      	movs	r2, #0
 800edde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	2201      	movs	r2, #1
 800ede6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d001      	beq.n	800edf8 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800edf4:	2301      	movs	r3, #1
 800edf6:	e000      	b.n	800edfa <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800edf8:	7efb      	ldrb	r3, [r7, #27]
}
 800edfa:	4618      	mov	r0, r3
 800edfc:	3720      	adds	r7, #32
 800edfe:	46bd      	mov	sp, r7
 800ee00:	bd80      	pop	{r7, pc}
 800ee02:	bf00      	nop

0800ee04 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b088      	sub	sp, #32
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	60f8      	str	r0, [r7, #12]
 800ee0c:	60b9      	str	r1, [r7, #8]
 800ee0e:	603b      	str	r3, [r7, #0]
 800ee10:	4613      	mov	r3, r2
 800ee12:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ee14:	2300      	movs	r3, #0
 800ee16:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	3330      	adds	r3, #48	; 0x30
 800ee1e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ee26:	2b01      	cmp	r3, #1
 800ee28:	d101      	bne.n	800ee2e <HAL_SPI_Receive+0x2a>
 800ee2a:	2302      	movs	r3, #2
 800ee2c:	e173      	b.n	800f116 <HAL_SPI_Receive+0x312>
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	2201      	movs	r2, #1
 800ee32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ee36:	f7f4 fda9 	bl	800398c <HAL_GetTick>
 800ee3a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ee42:	b2db      	uxtb	r3, r3
 800ee44:	2b01      	cmp	r3, #1
 800ee46:	d007      	beq.n	800ee58 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800ee48:	2302      	movs	r3, #2
 800ee4a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	2200      	movs	r2, #0
 800ee50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ee54:	7ffb      	ldrb	r3, [r7, #31]
 800ee56:	e15e      	b.n	800f116 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d002      	beq.n	800ee64 <HAL_SPI_Receive+0x60>
 800ee5e:	88fb      	ldrh	r3, [r7, #6]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d107      	bne.n	800ee74 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800ee64:	2301      	movs	r3, #1
 800ee66:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ee70:	7ffb      	ldrb	r3, [r7, #31]
 800ee72:	e150      	b.n	800f116 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	2204      	movs	r2, #4
 800ee78:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	2200      	movs	r2, #0
 800ee80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	68ba      	ldr	r2, [r7, #8]
 800ee88:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	88fa      	ldrh	r2, [r7, #6]
 800ee8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	88fa      	ldrh	r2, [r7, #6]
 800ee96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	2200      	movs	r2, #0
 800eea4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	2200      	movs	r2, #0
 800eeac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	2200      	movs	r2, #0
 800eeba:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	689b      	ldr	r3, [r3, #8]
 800eec0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800eec4:	d108      	bne.n	800eed8 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	681a      	ldr	r2, [r3, #0]
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800eed4:	601a      	str	r2, [r3, #0]
 800eed6:	e009      	b.n	800eeec <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	68db      	ldr	r3, [r3, #12]
 800eede:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800eeea:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	685a      	ldr	r2, [r3, #4]
 800eef2:	4b8b      	ldr	r3, [pc, #556]	; (800f120 <HAL_SPI_Receive+0x31c>)
 800eef4:	4013      	ands	r3, r2
 800eef6:	88f9      	ldrh	r1, [r7, #6]
 800eef8:	68fa      	ldr	r2, [r7, #12]
 800eefa:	6812      	ldr	r2, [r2, #0]
 800eefc:	430b      	orrs	r3, r1
 800eefe:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	681a      	ldr	r2, [r3, #0]
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	f042 0201 	orr.w	r2, r2, #1
 800ef0e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	685b      	ldr	r3, [r3, #4]
 800ef14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ef18:	d107      	bne.n	800ef2a <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	681a      	ldr	r2, [r3, #0]
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ef28:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	68db      	ldr	r3, [r3, #12]
 800ef2e:	2b0f      	cmp	r3, #15
 800ef30:	d948      	bls.n	800efc4 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ef32:	e040      	b.n	800efb6 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	695a      	ldr	r2, [r3, #20]
 800ef3a:	f248 0308 	movw	r3, #32776	; 0x8008
 800ef3e:	4013      	ands	r3, r2
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d014      	beq.n	800ef6e <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	681a      	ldr	r2, [r3, #0]
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef4c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ef4e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef54:	1d1a      	adds	r2, r3, #4
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ef60:	b29b      	uxth	r3, r3
 800ef62:	3b01      	subs	r3, #1
 800ef64:	b29a      	uxth	r2, r3
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ef6c:	e023      	b.n	800efb6 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ef6e:	f7f4 fd0d 	bl	800398c <HAL_GetTick>
 800ef72:	4602      	mov	r2, r0
 800ef74:	697b      	ldr	r3, [r7, #20]
 800ef76:	1ad3      	subs	r3, r2, r3
 800ef78:	683a      	ldr	r2, [r7, #0]
 800ef7a:	429a      	cmp	r2, r3
 800ef7c:	d803      	bhi.n	800ef86 <HAL_SPI_Receive+0x182>
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef84:	d102      	bne.n	800ef8c <HAL_SPI_Receive+0x188>
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d114      	bne.n	800efb6 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ef8c:	68f8      	ldr	r0, [r7, #12]
 800ef8e:	f000 f8c9 	bl	800f124 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	2200      	movs	r2, #0
 800ef96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800efa0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	2201      	movs	r2, #1
 800efae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800efb2:	2303      	movs	r3, #3
 800efb4:	e0af      	b.n	800f116 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800efbc:	b29b      	uxth	r3, r3
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d1b8      	bne.n	800ef34 <HAL_SPI_Receive+0x130>
 800efc2:	e095      	b.n	800f0f0 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	68db      	ldr	r3, [r3, #12]
 800efc8:	2b07      	cmp	r3, #7
 800efca:	f240 808b 	bls.w	800f0e4 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800efce:	e03f      	b.n	800f050 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	695b      	ldr	r3, [r3, #20]
 800efd6:	f003 0301 	and.w	r3, r3, #1
 800efda:	2b01      	cmp	r3, #1
 800efdc:	d114      	bne.n	800f008 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800efe2:	69ba      	ldr	r2, [r7, #24]
 800efe4:	8812      	ldrh	r2, [r2, #0]
 800efe6:	b292      	uxth	r2, r2
 800efe8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800efee:	1c9a      	adds	r2, r3, #2
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800effa:	b29b      	uxth	r3, r3
 800effc:	3b01      	subs	r3, #1
 800effe:	b29a      	uxth	r2, r3
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f006:	e023      	b.n	800f050 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f008:	f7f4 fcc0 	bl	800398c <HAL_GetTick>
 800f00c:	4602      	mov	r2, r0
 800f00e:	697b      	ldr	r3, [r7, #20]
 800f010:	1ad3      	subs	r3, r2, r3
 800f012:	683a      	ldr	r2, [r7, #0]
 800f014:	429a      	cmp	r2, r3
 800f016:	d803      	bhi.n	800f020 <HAL_SPI_Receive+0x21c>
 800f018:	683b      	ldr	r3, [r7, #0]
 800f01a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f01e:	d102      	bne.n	800f026 <HAL_SPI_Receive+0x222>
 800f020:	683b      	ldr	r3, [r7, #0]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d114      	bne.n	800f050 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f026:	68f8      	ldr	r0, [r7, #12]
 800f028:	f000 f87c 	bl	800f124 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	2200      	movs	r2, #0
 800f030:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f03a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	2201      	movs	r2, #1
 800f048:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f04c:	2303      	movs	r3, #3
 800f04e:	e062      	b.n	800f116 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f056:	b29b      	uxth	r3, r3
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d1b9      	bne.n	800efd0 <HAL_SPI_Receive+0x1cc>
 800f05c:	e048      	b.n	800f0f0 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	695b      	ldr	r3, [r3, #20]
 800f064:	f003 0301 	and.w	r3, r3, #1
 800f068:	2b01      	cmp	r3, #1
 800f06a:	d117      	bne.n	800f09c <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f078:	7812      	ldrb	r2, [r2, #0]
 800f07a:	b2d2      	uxtb	r2, r2
 800f07c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f082:	1c5a      	adds	r2, r3, #1
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f08e:	b29b      	uxth	r3, r3
 800f090:	3b01      	subs	r3, #1
 800f092:	b29a      	uxth	r2, r3
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f09a:	e023      	b.n	800f0e4 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f09c:	f7f4 fc76 	bl	800398c <HAL_GetTick>
 800f0a0:	4602      	mov	r2, r0
 800f0a2:	697b      	ldr	r3, [r7, #20]
 800f0a4:	1ad3      	subs	r3, r2, r3
 800f0a6:	683a      	ldr	r2, [r7, #0]
 800f0a8:	429a      	cmp	r2, r3
 800f0aa:	d803      	bhi.n	800f0b4 <HAL_SPI_Receive+0x2b0>
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0b2:	d102      	bne.n	800f0ba <HAL_SPI_Receive+0x2b6>
 800f0b4:	683b      	ldr	r3, [r7, #0]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d114      	bne.n	800f0e4 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f0ba:	68f8      	ldr	r0, [r7, #12]
 800f0bc:	f000 f832 	bl	800f124 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f0ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	2201      	movs	r2, #1
 800f0dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f0e0:	2303      	movs	r3, #3
 800f0e2:	e018      	b.n	800f116 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f0ea:	b29b      	uxth	r3, r3
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d1b6      	bne.n	800f05e <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f0f0:	68f8      	ldr	r0, [r7, #12]
 800f0f2:	f000 f817 	bl	800f124 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	2201      	movs	r2, #1
 800f102:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d001      	beq.n	800f114 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800f110:	2301      	movs	r3, #1
 800f112:	e000      	b.n	800f116 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800f114:	7ffb      	ldrb	r3, [r7, #31]
}
 800f116:	4618      	mov	r0, r3
 800f118:	3720      	adds	r7, #32
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bd80      	pop	{r7, pc}
 800f11e:	bf00      	nop
 800f120:	ffff0000 	.word	0xffff0000

0800f124 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f124:	b480      	push	{r7}
 800f126:	b085      	sub	sp, #20
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	695b      	ldr	r3, [r3, #20]
 800f132:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	699a      	ldr	r2, [r3, #24]
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	f042 0208 	orr.w	r2, r2, #8
 800f142:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	699a      	ldr	r2, [r3, #24]
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	f042 0210 	orr.w	r2, r2, #16
 800f152:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	681a      	ldr	r2, [r3, #0]
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	f022 0201 	bic.w	r2, r2, #1
 800f162:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	6919      	ldr	r1, [r3, #16]
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	681a      	ldr	r2, [r3, #0]
 800f16e:	4b3c      	ldr	r3, [pc, #240]	; (800f260 <SPI_CloseTransfer+0x13c>)
 800f170:	400b      	ands	r3, r1
 800f172:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	689a      	ldr	r2, [r3, #8]
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f182:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f18a:	b2db      	uxtb	r3, r3
 800f18c:	2b04      	cmp	r3, #4
 800f18e:	d014      	beq.n	800f1ba <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	f003 0320 	and.w	r3, r3, #32
 800f196:	2b00      	cmp	r3, #0
 800f198:	d00f      	beq.n	800f1ba <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	699a      	ldr	r2, [r3, #24]
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	f042 0220 	orr.w	r2, r2, #32
 800f1b8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f1c0:	b2db      	uxtb	r3, r3
 800f1c2:	2b03      	cmp	r3, #3
 800f1c4:	d014      	beq.n	800f1f0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d00f      	beq.n	800f1f0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1d6:	f043 0204 	orr.w	r2, r3, #4
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	699a      	ldr	r2, [r3, #24]
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f1ee:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d00f      	beq.n	800f21a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f200:	f043 0201 	orr.w	r2, r3, #1
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	699a      	ldr	r2, [r3, #24]
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f218:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f220:	2b00      	cmp	r3, #0
 800f222:	d00f      	beq.n	800f244 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f22a:	f043 0208 	orr.w	r2, r3, #8
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	699a      	ldr	r2, [r3, #24]
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f242:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	2200      	movs	r2, #0
 800f248:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2200      	movs	r2, #0
 800f250:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800f254:	bf00      	nop
 800f256:	3714      	adds	r7, #20
 800f258:	46bd      	mov	sp, r7
 800f25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25e:	4770      	bx	lr
 800f260:	fffffc90 	.word	0xfffffc90

0800f264 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b084      	sub	sp, #16
 800f268:	af00      	add	r7, sp, #0
 800f26a:	60f8      	str	r0, [r7, #12]
 800f26c:	60b9      	str	r1, [r7, #8]
 800f26e:	603b      	str	r3, [r7, #0]
 800f270:	4613      	mov	r3, r2
 800f272:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f274:	e010      	b.n	800f298 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f276:	f7f4 fb89 	bl	800398c <HAL_GetTick>
 800f27a:	4602      	mov	r2, r0
 800f27c:	69bb      	ldr	r3, [r7, #24]
 800f27e:	1ad3      	subs	r3, r2, r3
 800f280:	683a      	ldr	r2, [r7, #0]
 800f282:	429a      	cmp	r2, r3
 800f284:	d803      	bhi.n	800f28e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f28c:	d102      	bne.n	800f294 <SPI_WaitOnFlagUntilTimeout+0x30>
 800f28e:	683b      	ldr	r3, [r7, #0]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d101      	bne.n	800f298 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f294:	2303      	movs	r3, #3
 800f296:	e00f      	b.n	800f2b8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	695a      	ldr	r2, [r3, #20]
 800f29e:	68bb      	ldr	r3, [r7, #8]
 800f2a0:	4013      	ands	r3, r2
 800f2a2:	68ba      	ldr	r2, [r7, #8]
 800f2a4:	429a      	cmp	r2, r3
 800f2a6:	bf0c      	ite	eq
 800f2a8:	2301      	moveq	r3, #1
 800f2aa:	2300      	movne	r3, #0
 800f2ac:	b2db      	uxtb	r3, r3
 800f2ae:	461a      	mov	r2, r3
 800f2b0:	79fb      	ldrb	r3, [r7, #7]
 800f2b2:	429a      	cmp	r2, r3
 800f2b4:	d0df      	beq.n	800f276 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f2b6:	2300      	movs	r3, #0
}
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	3710      	adds	r7, #16
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	bd80      	pop	{r7, pc}

0800f2c0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f2c0:	b480      	push	{r7}
 800f2c2:	b085      	sub	sp, #20
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2cc:	095b      	lsrs	r3, r3, #5
 800f2ce:	3301      	adds	r3, #1
 800f2d0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	68db      	ldr	r3, [r3, #12]
 800f2d6:	3301      	adds	r3, #1
 800f2d8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f2da:	68bb      	ldr	r3, [r7, #8]
 800f2dc:	3307      	adds	r3, #7
 800f2de:	08db      	lsrs	r3, r3, #3
 800f2e0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f2e2:	68bb      	ldr	r3, [r7, #8]
 800f2e4:	68fa      	ldr	r2, [r7, #12]
 800f2e6:	fb02 f303 	mul.w	r3, r2, r3
}
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	3714      	adds	r7, #20
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f4:	4770      	bx	lr

0800f2f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f2f6:	b580      	push	{r7, lr}
 800f2f8:	b082      	sub	sp, #8
 800f2fa:	af00      	add	r7, sp, #0
 800f2fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d101      	bne.n	800f308 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f304:	2301      	movs	r3, #1
 800f306:	e049      	b.n	800f39c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f30e:	b2db      	uxtb	r3, r3
 800f310:	2b00      	cmp	r3, #0
 800f312:	d106      	bne.n	800f322 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	2200      	movs	r2, #0
 800f318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f31c:	6878      	ldr	r0, [r7, #4]
 800f31e:	f7f3 fe35 	bl	8002f8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	2202      	movs	r2, #2
 800f326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681a      	ldr	r2, [r3, #0]
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	3304      	adds	r3, #4
 800f332:	4619      	mov	r1, r3
 800f334:	4610      	mov	r0, r2
 800f336:	f000 fed1 	bl	80100dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	2201      	movs	r2, #1
 800f33e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	2201      	movs	r2, #1
 800f346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	2201      	movs	r2, #1
 800f34e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	2201      	movs	r2, #1
 800f356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	2201      	movs	r2, #1
 800f35e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	2201      	movs	r2, #1
 800f366:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	2201      	movs	r2, #1
 800f36e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	2201      	movs	r2, #1
 800f376:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	2201      	movs	r2, #1
 800f37e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	2201      	movs	r2, #1
 800f386:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	2201      	movs	r2, #1
 800f38e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	2201      	movs	r2, #1
 800f396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f39a:	2300      	movs	r3, #0
}
 800f39c:	4618      	mov	r0, r3
 800f39e:	3708      	adds	r7, #8
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	bd80      	pop	{r7, pc}

0800f3a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b084      	sub	sp, #16
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
 800f3ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d109      	bne.n	800f3c8 <HAL_TIM_PWM_Start+0x24>
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f3ba:	b2db      	uxtb	r3, r3
 800f3bc:	2b01      	cmp	r3, #1
 800f3be:	bf14      	ite	ne
 800f3c0:	2301      	movne	r3, #1
 800f3c2:	2300      	moveq	r3, #0
 800f3c4:	b2db      	uxtb	r3, r3
 800f3c6:	e03c      	b.n	800f442 <HAL_TIM_PWM_Start+0x9e>
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	2b04      	cmp	r3, #4
 800f3cc:	d109      	bne.n	800f3e2 <HAL_TIM_PWM_Start+0x3e>
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f3d4:	b2db      	uxtb	r3, r3
 800f3d6:	2b01      	cmp	r3, #1
 800f3d8:	bf14      	ite	ne
 800f3da:	2301      	movne	r3, #1
 800f3dc:	2300      	moveq	r3, #0
 800f3de:	b2db      	uxtb	r3, r3
 800f3e0:	e02f      	b.n	800f442 <HAL_TIM_PWM_Start+0x9e>
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	2b08      	cmp	r3, #8
 800f3e6:	d109      	bne.n	800f3fc <HAL_TIM_PWM_Start+0x58>
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f3ee:	b2db      	uxtb	r3, r3
 800f3f0:	2b01      	cmp	r3, #1
 800f3f2:	bf14      	ite	ne
 800f3f4:	2301      	movne	r3, #1
 800f3f6:	2300      	moveq	r3, #0
 800f3f8:	b2db      	uxtb	r3, r3
 800f3fa:	e022      	b.n	800f442 <HAL_TIM_PWM_Start+0x9e>
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	2b0c      	cmp	r3, #12
 800f400:	d109      	bne.n	800f416 <HAL_TIM_PWM_Start+0x72>
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f408:	b2db      	uxtb	r3, r3
 800f40a:	2b01      	cmp	r3, #1
 800f40c:	bf14      	ite	ne
 800f40e:	2301      	movne	r3, #1
 800f410:	2300      	moveq	r3, #0
 800f412:	b2db      	uxtb	r3, r3
 800f414:	e015      	b.n	800f442 <HAL_TIM_PWM_Start+0x9e>
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	2b10      	cmp	r3, #16
 800f41a:	d109      	bne.n	800f430 <HAL_TIM_PWM_Start+0x8c>
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f422:	b2db      	uxtb	r3, r3
 800f424:	2b01      	cmp	r3, #1
 800f426:	bf14      	ite	ne
 800f428:	2301      	movne	r3, #1
 800f42a:	2300      	moveq	r3, #0
 800f42c:	b2db      	uxtb	r3, r3
 800f42e:	e008      	b.n	800f442 <HAL_TIM_PWM_Start+0x9e>
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f436:	b2db      	uxtb	r3, r3
 800f438:	2b01      	cmp	r3, #1
 800f43a:	bf14      	ite	ne
 800f43c:	2301      	movne	r3, #1
 800f43e:	2300      	moveq	r3, #0
 800f440:	b2db      	uxtb	r3, r3
 800f442:	2b00      	cmp	r3, #0
 800f444:	d001      	beq.n	800f44a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800f446:	2301      	movs	r3, #1
 800f448:	e0ab      	b.n	800f5a2 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d104      	bne.n	800f45a <HAL_TIM_PWM_Start+0xb6>
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	2202      	movs	r2, #2
 800f454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f458:	e023      	b.n	800f4a2 <HAL_TIM_PWM_Start+0xfe>
 800f45a:	683b      	ldr	r3, [r7, #0]
 800f45c:	2b04      	cmp	r3, #4
 800f45e:	d104      	bne.n	800f46a <HAL_TIM_PWM_Start+0xc6>
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	2202      	movs	r2, #2
 800f464:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f468:	e01b      	b.n	800f4a2 <HAL_TIM_PWM_Start+0xfe>
 800f46a:	683b      	ldr	r3, [r7, #0]
 800f46c:	2b08      	cmp	r3, #8
 800f46e:	d104      	bne.n	800f47a <HAL_TIM_PWM_Start+0xd6>
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	2202      	movs	r2, #2
 800f474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f478:	e013      	b.n	800f4a2 <HAL_TIM_PWM_Start+0xfe>
 800f47a:	683b      	ldr	r3, [r7, #0]
 800f47c:	2b0c      	cmp	r3, #12
 800f47e:	d104      	bne.n	800f48a <HAL_TIM_PWM_Start+0xe6>
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2202      	movs	r2, #2
 800f484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f488:	e00b      	b.n	800f4a2 <HAL_TIM_PWM_Start+0xfe>
 800f48a:	683b      	ldr	r3, [r7, #0]
 800f48c:	2b10      	cmp	r3, #16
 800f48e:	d104      	bne.n	800f49a <HAL_TIM_PWM_Start+0xf6>
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2202      	movs	r2, #2
 800f494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f498:	e003      	b.n	800f4a2 <HAL_TIM_PWM_Start+0xfe>
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	2202      	movs	r2, #2
 800f49e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	2201      	movs	r2, #1
 800f4a8:	6839      	ldr	r1, [r7, #0]
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	f001 f992 	bl	80107d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	4a3d      	ldr	r2, [pc, #244]	; (800f5ac <HAL_TIM_PWM_Start+0x208>)
 800f4b6:	4293      	cmp	r3, r2
 800f4b8:	d013      	beq.n	800f4e2 <HAL_TIM_PWM_Start+0x13e>
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	4a3c      	ldr	r2, [pc, #240]	; (800f5b0 <HAL_TIM_PWM_Start+0x20c>)
 800f4c0:	4293      	cmp	r3, r2
 800f4c2:	d00e      	beq.n	800f4e2 <HAL_TIM_PWM_Start+0x13e>
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	4a3a      	ldr	r2, [pc, #232]	; (800f5b4 <HAL_TIM_PWM_Start+0x210>)
 800f4ca:	4293      	cmp	r3, r2
 800f4cc:	d009      	beq.n	800f4e2 <HAL_TIM_PWM_Start+0x13e>
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	4a39      	ldr	r2, [pc, #228]	; (800f5b8 <HAL_TIM_PWM_Start+0x214>)
 800f4d4:	4293      	cmp	r3, r2
 800f4d6:	d004      	beq.n	800f4e2 <HAL_TIM_PWM_Start+0x13e>
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	4a37      	ldr	r2, [pc, #220]	; (800f5bc <HAL_TIM_PWM_Start+0x218>)
 800f4de:	4293      	cmp	r3, r2
 800f4e0:	d101      	bne.n	800f4e6 <HAL_TIM_PWM_Start+0x142>
 800f4e2:	2301      	movs	r3, #1
 800f4e4:	e000      	b.n	800f4e8 <HAL_TIM_PWM_Start+0x144>
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d007      	beq.n	800f4fc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f4fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	4a2a      	ldr	r2, [pc, #168]	; (800f5ac <HAL_TIM_PWM_Start+0x208>)
 800f502:	4293      	cmp	r3, r2
 800f504:	d02c      	beq.n	800f560 <HAL_TIM_PWM_Start+0x1bc>
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f50e:	d027      	beq.n	800f560 <HAL_TIM_PWM_Start+0x1bc>
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	4a2a      	ldr	r2, [pc, #168]	; (800f5c0 <HAL_TIM_PWM_Start+0x21c>)
 800f516:	4293      	cmp	r3, r2
 800f518:	d022      	beq.n	800f560 <HAL_TIM_PWM_Start+0x1bc>
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	4a29      	ldr	r2, [pc, #164]	; (800f5c4 <HAL_TIM_PWM_Start+0x220>)
 800f520:	4293      	cmp	r3, r2
 800f522:	d01d      	beq.n	800f560 <HAL_TIM_PWM_Start+0x1bc>
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	4a27      	ldr	r2, [pc, #156]	; (800f5c8 <HAL_TIM_PWM_Start+0x224>)
 800f52a:	4293      	cmp	r3, r2
 800f52c:	d018      	beq.n	800f560 <HAL_TIM_PWM_Start+0x1bc>
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	4a1f      	ldr	r2, [pc, #124]	; (800f5b0 <HAL_TIM_PWM_Start+0x20c>)
 800f534:	4293      	cmp	r3, r2
 800f536:	d013      	beq.n	800f560 <HAL_TIM_PWM_Start+0x1bc>
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	4a23      	ldr	r2, [pc, #140]	; (800f5cc <HAL_TIM_PWM_Start+0x228>)
 800f53e:	4293      	cmp	r3, r2
 800f540:	d00e      	beq.n	800f560 <HAL_TIM_PWM_Start+0x1bc>
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	4a1b      	ldr	r2, [pc, #108]	; (800f5b4 <HAL_TIM_PWM_Start+0x210>)
 800f548:	4293      	cmp	r3, r2
 800f54a:	d009      	beq.n	800f560 <HAL_TIM_PWM_Start+0x1bc>
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	4a1f      	ldr	r2, [pc, #124]	; (800f5d0 <HAL_TIM_PWM_Start+0x22c>)
 800f552:	4293      	cmp	r3, r2
 800f554:	d004      	beq.n	800f560 <HAL_TIM_PWM_Start+0x1bc>
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	4a1e      	ldr	r2, [pc, #120]	; (800f5d4 <HAL_TIM_PWM_Start+0x230>)
 800f55c:	4293      	cmp	r3, r2
 800f55e:	d115      	bne.n	800f58c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	689a      	ldr	r2, [r3, #8]
 800f566:	4b1c      	ldr	r3, [pc, #112]	; (800f5d8 <HAL_TIM_PWM_Start+0x234>)
 800f568:	4013      	ands	r3, r2
 800f56a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	2b06      	cmp	r3, #6
 800f570:	d015      	beq.n	800f59e <HAL_TIM_PWM_Start+0x1fa>
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f578:	d011      	beq.n	800f59e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	681a      	ldr	r2, [r3, #0]
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	f042 0201 	orr.w	r2, r2, #1
 800f588:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f58a:	e008      	b.n	800f59e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	681a      	ldr	r2, [r3, #0]
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	f042 0201 	orr.w	r2, r2, #1
 800f59a:	601a      	str	r2, [r3, #0]
 800f59c:	e000      	b.n	800f5a0 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f59e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f5a0:	2300      	movs	r3, #0
}
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	3710      	adds	r7, #16
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}
 800f5aa:	bf00      	nop
 800f5ac:	40010000 	.word	0x40010000
 800f5b0:	40010400 	.word	0x40010400
 800f5b4:	40014000 	.word	0x40014000
 800f5b8:	40014400 	.word	0x40014400
 800f5bc:	40014800 	.word	0x40014800
 800f5c0:	40000400 	.word	0x40000400
 800f5c4:	40000800 	.word	0x40000800
 800f5c8:	40000c00 	.word	0x40000c00
 800f5cc:	40001800 	.word	0x40001800
 800f5d0:	4000e000 	.word	0x4000e000
 800f5d4:	4000e400 	.word	0x4000e400
 800f5d8:	00010007 	.word	0x00010007

0800f5dc <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	b086      	sub	sp, #24
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	60f8      	str	r0, [r7, #12]
 800f5e4:	60b9      	str	r1, [r7, #8]
 800f5e6:	607a      	str	r2, [r7, #4]
 800f5e8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800f5ee:	68bb      	ldr	r3, [r7, #8]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d109      	bne.n	800f608 <HAL_TIM_PWM_Start_DMA+0x2c>
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f5fa:	b2db      	uxtb	r3, r3
 800f5fc:	2b02      	cmp	r3, #2
 800f5fe:	bf0c      	ite	eq
 800f600:	2301      	moveq	r3, #1
 800f602:	2300      	movne	r3, #0
 800f604:	b2db      	uxtb	r3, r3
 800f606:	e03c      	b.n	800f682 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f608:	68bb      	ldr	r3, [r7, #8]
 800f60a:	2b04      	cmp	r3, #4
 800f60c:	d109      	bne.n	800f622 <HAL_TIM_PWM_Start_DMA+0x46>
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f614:	b2db      	uxtb	r3, r3
 800f616:	2b02      	cmp	r3, #2
 800f618:	bf0c      	ite	eq
 800f61a:	2301      	moveq	r3, #1
 800f61c:	2300      	movne	r3, #0
 800f61e:	b2db      	uxtb	r3, r3
 800f620:	e02f      	b.n	800f682 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f622:	68bb      	ldr	r3, [r7, #8]
 800f624:	2b08      	cmp	r3, #8
 800f626:	d109      	bne.n	800f63c <HAL_TIM_PWM_Start_DMA+0x60>
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f62e:	b2db      	uxtb	r3, r3
 800f630:	2b02      	cmp	r3, #2
 800f632:	bf0c      	ite	eq
 800f634:	2301      	moveq	r3, #1
 800f636:	2300      	movne	r3, #0
 800f638:	b2db      	uxtb	r3, r3
 800f63a:	e022      	b.n	800f682 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f63c:	68bb      	ldr	r3, [r7, #8]
 800f63e:	2b0c      	cmp	r3, #12
 800f640:	d109      	bne.n	800f656 <HAL_TIM_PWM_Start_DMA+0x7a>
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f648:	b2db      	uxtb	r3, r3
 800f64a:	2b02      	cmp	r3, #2
 800f64c:	bf0c      	ite	eq
 800f64e:	2301      	moveq	r3, #1
 800f650:	2300      	movne	r3, #0
 800f652:	b2db      	uxtb	r3, r3
 800f654:	e015      	b.n	800f682 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f656:	68bb      	ldr	r3, [r7, #8]
 800f658:	2b10      	cmp	r3, #16
 800f65a:	d109      	bne.n	800f670 <HAL_TIM_PWM_Start_DMA+0x94>
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f662:	b2db      	uxtb	r3, r3
 800f664:	2b02      	cmp	r3, #2
 800f666:	bf0c      	ite	eq
 800f668:	2301      	moveq	r3, #1
 800f66a:	2300      	movne	r3, #0
 800f66c:	b2db      	uxtb	r3, r3
 800f66e:	e008      	b.n	800f682 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f676:	b2db      	uxtb	r3, r3
 800f678:	2b02      	cmp	r3, #2
 800f67a:	bf0c      	ite	eq
 800f67c:	2301      	moveq	r3, #1
 800f67e:	2300      	movne	r3, #0
 800f680:	b2db      	uxtb	r3, r3
 800f682:	2b00      	cmp	r3, #0
 800f684:	d001      	beq.n	800f68a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800f686:	2302      	movs	r3, #2
 800f688:	e1ba      	b.n	800fa00 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800f68a:	68bb      	ldr	r3, [r7, #8]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d109      	bne.n	800f6a4 <HAL_TIM_PWM_Start_DMA+0xc8>
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f696:	b2db      	uxtb	r3, r3
 800f698:	2b01      	cmp	r3, #1
 800f69a:	bf0c      	ite	eq
 800f69c:	2301      	moveq	r3, #1
 800f69e:	2300      	movne	r3, #0
 800f6a0:	b2db      	uxtb	r3, r3
 800f6a2:	e03c      	b.n	800f71e <HAL_TIM_PWM_Start_DMA+0x142>
 800f6a4:	68bb      	ldr	r3, [r7, #8]
 800f6a6:	2b04      	cmp	r3, #4
 800f6a8:	d109      	bne.n	800f6be <HAL_TIM_PWM_Start_DMA+0xe2>
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f6b0:	b2db      	uxtb	r3, r3
 800f6b2:	2b01      	cmp	r3, #1
 800f6b4:	bf0c      	ite	eq
 800f6b6:	2301      	moveq	r3, #1
 800f6b8:	2300      	movne	r3, #0
 800f6ba:	b2db      	uxtb	r3, r3
 800f6bc:	e02f      	b.n	800f71e <HAL_TIM_PWM_Start_DMA+0x142>
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	2b08      	cmp	r3, #8
 800f6c2:	d109      	bne.n	800f6d8 <HAL_TIM_PWM_Start_DMA+0xfc>
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f6ca:	b2db      	uxtb	r3, r3
 800f6cc:	2b01      	cmp	r3, #1
 800f6ce:	bf0c      	ite	eq
 800f6d0:	2301      	moveq	r3, #1
 800f6d2:	2300      	movne	r3, #0
 800f6d4:	b2db      	uxtb	r3, r3
 800f6d6:	e022      	b.n	800f71e <HAL_TIM_PWM_Start_DMA+0x142>
 800f6d8:	68bb      	ldr	r3, [r7, #8]
 800f6da:	2b0c      	cmp	r3, #12
 800f6dc:	d109      	bne.n	800f6f2 <HAL_TIM_PWM_Start_DMA+0x116>
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f6e4:	b2db      	uxtb	r3, r3
 800f6e6:	2b01      	cmp	r3, #1
 800f6e8:	bf0c      	ite	eq
 800f6ea:	2301      	moveq	r3, #1
 800f6ec:	2300      	movne	r3, #0
 800f6ee:	b2db      	uxtb	r3, r3
 800f6f0:	e015      	b.n	800f71e <HAL_TIM_PWM_Start_DMA+0x142>
 800f6f2:	68bb      	ldr	r3, [r7, #8]
 800f6f4:	2b10      	cmp	r3, #16
 800f6f6:	d109      	bne.n	800f70c <HAL_TIM_PWM_Start_DMA+0x130>
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f6fe:	b2db      	uxtb	r3, r3
 800f700:	2b01      	cmp	r3, #1
 800f702:	bf0c      	ite	eq
 800f704:	2301      	moveq	r3, #1
 800f706:	2300      	movne	r3, #0
 800f708:	b2db      	uxtb	r3, r3
 800f70a:	e008      	b.n	800f71e <HAL_TIM_PWM_Start_DMA+0x142>
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f712:	b2db      	uxtb	r3, r3
 800f714:	2b01      	cmp	r3, #1
 800f716:	bf0c      	ite	eq
 800f718:	2301      	moveq	r3, #1
 800f71a:	2300      	movne	r3, #0
 800f71c:	b2db      	uxtb	r3, r3
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d034      	beq.n	800f78c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d002      	beq.n	800f72e <HAL_TIM_PWM_Start_DMA+0x152>
 800f728:	887b      	ldrh	r3, [r7, #2]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d101      	bne.n	800f732 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800f72e:	2301      	movs	r3, #1
 800f730:	e166      	b.n	800fa00 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f732:	68bb      	ldr	r3, [r7, #8]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d104      	bne.n	800f742 <HAL_TIM_PWM_Start_DMA+0x166>
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	2202      	movs	r2, #2
 800f73c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f740:	e026      	b.n	800f790 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f742:	68bb      	ldr	r3, [r7, #8]
 800f744:	2b04      	cmp	r3, #4
 800f746:	d104      	bne.n	800f752 <HAL_TIM_PWM_Start_DMA+0x176>
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	2202      	movs	r2, #2
 800f74c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f750:	e01e      	b.n	800f790 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f752:	68bb      	ldr	r3, [r7, #8]
 800f754:	2b08      	cmp	r3, #8
 800f756:	d104      	bne.n	800f762 <HAL_TIM_PWM_Start_DMA+0x186>
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	2202      	movs	r2, #2
 800f75c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f760:	e016      	b.n	800f790 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f762:	68bb      	ldr	r3, [r7, #8]
 800f764:	2b0c      	cmp	r3, #12
 800f766:	d104      	bne.n	800f772 <HAL_TIM_PWM_Start_DMA+0x196>
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	2202      	movs	r2, #2
 800f76c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f770:	e00e      	b.n	800f790 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f772:	68bb      	ldr	r3, [r7, #8]
 800f774:	2b10      	cmp	r3, #16
 800f776:	d104      	bne.n	800f782 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	2202      	movs	r2, #2
 800f77c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f780:	e006      	b.n	800f790 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	2202      	movs	r2, #2
 800f786:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f78a:	e001      	b.n	800f790 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800f78c:	2301      	movs	r3, #1
 800f78e:	e137      	b.n	800fa00 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800f790:	68bb      	ldr	r3, [r7, #8]
 800f792:	2b0c      	cmp	r3, #12
 800f794:	f200 80ae 	bhi.w	800f8f4 <HAL_TIM_PWM_Start_DMA+0x318>
 800f798:	a201      	add	r2, pc, #4	; (adr r2, 800f7a0 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800f79a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f79e:	bf00      	nop
 800f7a0:	0800f7d5 	.word	0x0800f7d5
 800f7a4:	0800f8f5 	.word	0x0800f8f5
 800f7a8:	0800f8f5 	.word	0x0800f8f5
 800f7ac:	0800f8f5 	.word	0x0800f8f5
 800f7b0:	0800f81d 	.word	0x0800f81d
 800f7b4:	0800f8f5 	.word	0x0800f8f5
 800f7b8:	0800f8f5 	.word	0x0800f8f5
 800f7bc:	0800f8f5 	.word	0x0800f8f5
 800f7c0:	0800f865 	.word	0x0800f865
 800f7c4:	0800f8f5 	.word	0x0800f8f5
 800f7c8:	0800f8f5 	.word	0x0800f8f5
 800f7cc:	0800f8f5 	.word	0x0800f8f5
 800f7d0:	0800f8ad 	.word	0x0800f8ad
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7d8:	4a8b      	ldr	r2, [pc, #556]	; (800fa08 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f7da:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7e0:	4a8a      	ldr	r2, [pc, #552]	; (800fa0c <HAL_TIM_PWM_Start_DMA+0x430>)
 800f7e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7e8:	4a89      	ldr	r2, [pc, #548]	; (800fa10 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f7ea:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f7f0:	6879      	ldr	r1, [r7, #4]
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	3334      	adds	r3, #52	; 0x34
 800f7f8:	461a      	mov	r2, r3
 800f7fa:	887b      	ldrh	r3, [r7, #2]
 800f7fc:	f7f6 f8e4 	bl	80059c8 <HAL_DMA_Start_IT>
 800f800:	4603      	mov	r3, r0
 800f802:	2b00      	cmp	r3, #0
 800f804:	d001      	beq.n	800f80a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f806:	2301      	movs	r3, #1
 800f808:	e0fa      	b.n	800fa00 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	68da      	ldr	r2, [r3, #12]
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f818:	60da      	str	r2, [r3, #12]
      break;
 800f81a:	e06e      	b.n	800f8fa <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f820:	4a79      	ldr	r2, [pc, #484]	; (800fa08 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f822:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f828:	4a78      	ldr	r2, [pc, #480]	; (800fa0c <HAL_TIM_PWM_Start_DMA+0x430>)
 800f82a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f830:	4a77      	ldr	r2, [pc, #476]	; (800fa10 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f832:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800f838:	6879      	ldr	r1, [r7, #4]
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	3338      	adds	r3, #56	; 0x38
 800f840:	461a      	mov	r2, r3
 800f842:	887b      	ldrh	r3, [r7, #2]
 800f844:	f7f6 f8c0 	bl	80059c8 <HAL_DMA_Start_IT>
 800f848:	4603      	mov	r3, r0
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d001      	beq.n	800f852 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f84e:	2301      	movs	r3, #1
 800f850:	e0d6      	b.n	800fa00 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	68da      	ldr	r2, [r3, #12]
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f860:	60da      	str	r2, [r3, #12]
      break;
 800f862:	e04a      	b.n	800f8fa <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f868:	4a67      	ldr	r2, [pc, #412]	; (800fa08 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f86a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f870:	4a66      	ldr	r2, [pc, #408]	; (800fa0c <HAL_TIM_PWM_Start_DMA+0x430>)
 800f872:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f878:	4a65      	ldr	r2, [pc, #404]	; (800fa10 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f87a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800f880:	6879      	ldr	r1, [r7, #4]
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	333c      	adds	r3, #60	; 0x3c
 800f888:	461a      	mov	r2, r3
 800f88a:	887b      	ldrh	r3, [r7, #2]
 800f88c:	f7f6 f89c 	bl	80059c8 <HAL_DMA_Start_IT>
 800f890:	4603      	mov	r3, r0
 800f892:	2b00      	cmp	r3, #0
 800f894:	d001      	beq.n	800f89a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f896:	2301      	movs	r3, #1
 800f898:	e0b2      	b.n	800fa00 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	68da      	ldr	r2, [r3, #12]
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f8a8:	60da      	str	r2, [r3, #12]
      break;
 800f8aa:	e026      	b.n	800f8fa <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8b0:	4a55      	ldr	r2, [pc, #340]	; (800fa08 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f8b2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8b8:	4a54      	ldr	r2, [pc, #336]	; (800fa0c <HAL_TIM_PWM_Start_DMA+0x430>)
 800f8ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8c0:	4a53      	ldr	r2, [pc, #332]	; (800fa10 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f8c2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f8c8:	6879      	ldr	r1, [r7, #4]
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	3340      	adds	r3, #64	; 0x40
 800f8d0:	461a      	mov	r2, r3
 800f8d2:	887b      	ldrh	r3, [r7, #2]
 800f8d4:	f7f6 f878 	bl	80059c8 <HAL_DMA_Start_IT>
 800f8d8:	4603      	mov	r3, r0
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d001      	beq.n	800f8e2 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f8de:	2301      	movs	r3, #1
 800f8e0:	e08e      	b.n	800fa00 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	68da      	ldr	r2, [r3, #12]
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f8f0:	60da      	str	r2, [r3, #12]
      break;
 800f8f2:	e002      	b.n	800f8fa <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800f8f4:	2301      	movs	r3, #1
 800f8f6:	75fb      	strb	r3, [r7, #23]
      break;
 800f8f8:	bf00      	nop
  }

  if (status == HAL_OK)
 800f8fa:	7dfb      	ldrb	r3, [r7, #23]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d17e      	bne.n	800f9fe <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	2201      	movs	r2, #1
 800f906:	68b9      	ldr	r1, [r7, #8]
 800f908:	4618      	mov	r0, r3
 800f90a:	f000 ff63 	bl	80107d4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	4a40      	ldr	r2, [pc, #256]	; (800fa14 <HAL_TIM_PWM_Start_DMA+0x438>)
 800f914:	4293      	cmp	r3, r2
 800f916:	d013      	beq.n	800f940 <HAL_TIM_PWM_Start_DMA+0x364>
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	4a3e      	ldr	r2, [pc, #248]	; (800fa18 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800f91e:	4293      	cmp	r3, r2
 800f920:	d00e      	beq.n	800f940 <HAL_TIM_PWM_Start_DMA+0x364>
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	4a3d      	ldr	r2, [pc, #244]	; (800fa1c <HAL_TIM_PWM_Start_DMA+0x440>)
 800f928:	4293      	cmp	r3, r2
 800f92a:	d009      	beq.n	800f940 <HAL_TIM_PWM_Start_DMA+0x364>
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	4a3b      	ldr	r2, [pc, #236]	; (800fa20 <HAL_TIM_PWM_Start_DMA+0x444>)
 800f932:	4293      	cmp	r3, r2
 800f934:	d004      	beq.n	800f940 <HAL_TIM_PWM_Start_DMA+0x364>
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	4a3a      	ldr	r2, [pc, #232]	; (800fa24 <HAL_TIM_PWM_Start_DMA+0x448>)
 800f93c:	4293      	cmp	r3, r2
 800f93e:	d101      	bne.n	800f944 <HAL_TIM_PWM_Start_DMA+0x368>
 800f940:	2301      	movs	r3, #1
 800f942:	e000      	b.n	800f946 <HAL_TIM_PWM_Start_DMA+0x36a>
 800f944:	2300      	movs	r3, #0
 800f946:	2b00      	cmp	r3, #0
 800f948:	d007      	beq.n	800f95a <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f958:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	4a2d      	ldr	r2, [pc, #180]	; (800fa14 <HAL_TIM_PWM_Start_DMA+0x438>)
 800f960:	4293      	cmp	r3, r2
 800f962:	d02c      	beq.n	800f9be <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f96c:	d027      	beq.n	800f9be <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	4a2d      	ldr	r2, [pc, #180]	; (800fa28 <HAL_TIM_PWM_Start_DMA+0x44c>)
 800f974:	4293      	cmp	r3, r2
 800f976:	d022      	beq.n	800f9be <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	4a2b      	ldr	r2, [pc, #172]	; (800fa2c <HAL_TIM_PWM_Start_DMA+0x450>)
 800f97e:	4293      	cmp	r3, r2
 800f980:	d01d      	beq.n	800f9be <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	4a2a      	ldr	r2, [pc, #168]	; (800fa30 <HAL_TIM_PWM_Start_DMA+0x454>)
 800f988:	4293      	cmp	r3, r2
 800f98a:	d018      	beq.n	800f9be <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	4a21      	ldr	r2, [pc, #132]	; (800fa18 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800f992:	4293      	cmp	r3, r2
 800f994:	d013      	beq.n	800f9be <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	4a26      	ldr	r2, [pc, #152]	; (800fa34 <HAL_TIM_PWM_Start_DMA+0x458>)
 800f99c:	4293      	cmp	r3, r2
 800f99e:	d00e      	beq.n	800f9be <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	4a1d      	ldr	r2, [pc, #116]	; (800fa1c <HAL_TIM_PWM_Start_DMA+0x440>)
 800f9a6:	4293      	cmp	r3, r2
 800f9a8:	d009      	beq.n	800f9be <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	4a22      	ldr	r2, [pc, #136]	; (800fa38 <HAL_TIM_PWM_Start_DMA+0x45c>)
 800f9b0:	4293      	cmp	r3, r2
 800f9b2:	d004      	beq.n	800f9be <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	4a20      	ldr	r2, [pc, #128]	; (800fa3c <HAL_TIM_PWM_Start_DMA+0x460>)
 800f9ba:	4293      	cmp	r3, r2
 800f9bc:	d115      	bne.n	800f9ea <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	689a      	ldr	r2, [r3, #8]
 800f9c4:	4b1e      	ldr	r3, [pc, #120]	; (800fa40 <HAL_TIM_PWM_Start_DMA+0x464>)
 800f9c6:	4013      	ands	r3, r2
 800f9c8:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f9ca:	693b      	ldr	r3, [r7, #16]
 800f9cc:	2b06      	cmp	r3, #6
 800f9ce:	d015      	beq.n	800f9fc <HAL_TIM_PWM_Start_DMA+0x420>
 800f9d0:	693b      	ldr	r3, [r7, #16]
 800f9d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f9d6:	d011      	beq.n	800f9fc <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	681a      	ldr	r2, [r3, #0]
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	f042 0201 	orr.w	r2, r2, #1
 800f9e6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f9e8:	e008      	b.n	800f9fc <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	681a      	ldr	r2, [r3, #0]
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	f042 0201 	orr.w	r2, r2, #1
 800f9f8:	601a      	str	r2, [r3, #0]
 800f9fa:	e000      	b.n	800f9fe <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f9fc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800f9fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa00:	4618      	mov	r0, r3
 800fa02:	3718      	adds	r7, #24
 800fa04:	46bd      	mov	sp, r7
 800fa06:	bd80      	pop	{r7, pc}
 800fa08:	0800ffcb 	.word	0x0800ffcb
 800fa0c:	08010073 	.word	0x08010073
 800fa10:	0800ff39 	.word	0x0800ff39
 800fa14:	40010000 	.word	0x40010000
 800fa18:	40010400 	.word	0x40010400
 800fa1c:	40014000 	.word	0x40014000
 800fa20:	40014400 	.word	0x40014400
 800fa24:	40014800 	.word	0x40014800
 800fa28:	40000400 	.word	0x40000400
 800fa2c:	40000800 	.word	0x40000800
 800fa30:	40000c00 	.word	0x40000c00
 800fa34:	40001800 	.word	0x40001800
 800fa38:	4000e000 	.word	0x4000e000
 800fa3c:	4000e400 	.word	0x4000e400
 800fa40:	00010007 	.word	0x00010007

0800fa44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fa44:	b580      	push	{r7, lr}
 800fa46:	b082      	sub	sp, #8
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	691b      	ldr	r3, [r3, #16]
 800fa52:	f003 0302 	and.w	r3, r3, #2
 800fa56:	2b02      	cmp	r3, #2
 800fa58:	d122      	bne.n	800faa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	68db      	ldr	r3, [r3, #12]
 800fa60:	f003 0302 	and.w	r3, r3, #2
 800fa64:	2b02      	cmp	r3, #2
 800fa66:	d11b      	bne.n	800faa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	f06f 0202 	mvn.w	r2, #2
 800fa70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	2201      	movs	r2, #1
 800fa76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	699b      	ldr	r3, [r3, #24]
 800fa7e:	f003 0303 	and.w	r3, r3, #3
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d003      	beq.n	800fa8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fa86:	6878      	ldr	r0, [r7, #4]
 800fa88:	f000 fa24 	bl	800fed4 <HAL_TIM_IC_CaptureCallback>
 800fa8c:	e005      	b.n	800fa9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fa8e:	6878      	ldr	r0, [r7, #4]
 800fa90:	f000 fa16 	bl	800fec0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fa94:	6878      	ldr	r0, [r7, #4]
 800fa96:	f000 fa27 	bl	800fee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	691b      	ldr	r3, [r3, #16]
 800faa6:	f003 0304 	and.w	r3, r3, #4
 800faaa:	2b04      	cmp	r3, #4
 800faac:	d122      	bne.n	800faf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	68db      	ldr	r3, [r3, #12]
 800fab4:	f003 0304 	and.w	r3, r3, #4
 800fab8:	2b04      	cmp	r3, #4
 800faba:	d11b      	bne.n	800faf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	f06f 0204 	mvn.w	r2, #4
 800fac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	2202      	movs	r2, #2
 800faca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	699b      	ldr	r3, [r3, #24]
 800fad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d003      	beq.n	800fae2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fada:	6878      	ldr	r0, [r7, #4]
 800fadc:	f000 f9fa 	bl	800fed4 <HAL_TIM_IC_CaptureCallback>
 800fae0:	e005      	b.n	800faee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fae2:	6878      	ldr	r0, [r7, #4]
 800fae4:	f000 f9ec 	bl	800fec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fae8:	6878      	ldr	r0, [r7, #4]
 800faea:	f000 f9fd 	bl	800fee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	2200      	movs	r2, #0
 800faf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	691b      	ldr	r3, [r3, #16]
 800fafa:	f003 0308 	and.w	r3, r3, #8
 800fafe:	2b08      	cmp	r3, #8
 800fb00:	d122      	bne.n	800fb48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	68db      	ldr	r3, [r3, #12]
 800fb08:	f003 0308 	and.w	r3, r3, #8
 800fb0c:	2b08      	cmp	r3, #8
 800fb0e:	d11b      	bne.n	800fb48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	f06f 0208 	mvn.w	r2, #8
 800fb18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	2204      	movs	r2, #4
 800fb1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	69db      	ldr	r3, [r3, #28]
 800fb26:	f003 0303 	and.w	r3, r3, #3
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d003      	beq.n	800fb36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fb2e:	6878      	ldr	r0, [r7, #4]
 800fb30:	f000 f9d0 	bl	800fed4 <HAL_TIM_IC_CaptureCallback>
 800fb34:	e005      	b.n	800fb42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fb36:	6878      	ldr	r0, [r7, #4]
 800fb38:	f000 f9c2 	bl	800fec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb3c:	6878      	ldr	r0, [r7, #4]
 800fb3e:	f000 f9d3 	bl	800fee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	2200      	movs	r2, #0
 800fb46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	691b      	ldr	r3, [r3, #16]
 800fb4e:	f003 0310 	and.w	r3, r3, #16
 800fb52:	2b10      	cmp	r3, #16
 800fb54:	d122      	bne.n	800fb9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	68db      	ldr	r3, [r3, #12]
 800fb5c:	f003 0310 	and.w	r3, r3, #16
 800fb60:	2b10      	cmp	r3, #16
 800fb62:	d11b      	bne.n	800fb9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	f06f 0210 	mvn.w	r2, #16
 800fb6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	2208      	movs	r2, #8
 800fb72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	69db      	ldr	r3, [r3, #28]
 800fb7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d003      	beq.n	800fb8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fb82:	6878      	ldr	r0, [r7, #4]
 800fb84:	f000 f9a6 	bl	800fed4 <HAL_TIM_IC_CaptureCallback>
 800fb88:	e005      	b.n	800fb96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fb8a:	6878      	ldr	r0, [r7, #4]
 800fb8c:	f000 f998 	bl	800fec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb90:	6878      	ldr	r0, [r7, #4]
 800fb92:	f000 f9a9 	bl	800fee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	2200      	movs	r2, #0
 800fb9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	691b      	ldr	r3, [r3, #16]
 800fba2:	f003 0301 	and.w	r3, r3, #1
 800fba6:	2b01      	cmp	r3, #1
 800fba8:	d10e      	bne.n	800fbc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	68db      	ldr	r3, [r3, #12]
 800fbb0:	f003 0301 	and.w	r3, r3, #1
 800fbb4:	2b01      	cmp	r3, #1
 800fbb6:	d107      	bne.n	800fbc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	f06f 0201 	mvn.w	r2, #1
 800fbc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fbc2:	6878      	ldr	r0, [r7, #4]
 800fbc4:	f000 f972 	bl	800feac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	691b      	ldr	r3, [r3, #16]
 800fbce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fbd2:	2b80      	cmp	r3, #128	; 0x80
 800fbd4:	d10e      	bne.n	800fbf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	68db      	ldr	r3, [r3, #12]
 800fbdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fbe0:	2b80      	cmp	r3, #128	; 0x80
 800fbe2:	d107      	bne.n	800fbf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fbec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fbee:	6878      	ldr	r0, [r7, #4]
 800fbf0:	f000 febc 	bl	801096c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	691b      	ldr	r3, [r3, #16]
 800fbfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fbfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc02:	d10e      	bne.n	800fc22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	68db      	ldr	r3, [r3, #12]
 800fc0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc0e:	2b80      	cmp	r3, #128	; 0x80
 800fc10:	d107      	bne.n	800fc22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800fc1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800fc1c:	6878      	ldr	r0, [r7, #4]
 800fc1e:	f000 feaf 	bl	8010980 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	691b      	ldr	r3, [r3, #16]
 800fc28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc2c:	2b40      	cmp	r3, #64	; 0x40
 800fc2e:	d10e      	bne.n	800fc4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	68db      	ldr	r3, [r3, #12]
 800fc36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc3a:	2b40      	cmp	r3, #64	; 0x40
 800fc3c:	d107      	bne.n	800fc4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fc46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fc48:	6878      	ldr	r0, [r7, #4]
 800fc4a:	f000 f961 	bl	800ff10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	691b      	ldr	r3, [r3, #16]
 800fc54:	f003 0320 	and.w	r3, r3, #32
 800fc58:	2b20      	cmp	r3, #32
 800fc5a:	d10e      	bne.n	800fc7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	68db      	ldr	r3, [r3, #12]
 800fc62:	f003 0320 	and.w	r3, r3, #32
 800fc66:	2b20      	cmp	r3, #32
 800fc68:	d107      	bne.n	800fc7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	f06f 0220 	mvn.w	r2, #32
 800fc72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fc74:	6878      	ldr	r0, [r7, #4]
 800fc76:	f000 fe6f 	bl	8010958 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fc7a:	bf00      	nop
 800fc7c:	3708      	adds	r7, #8
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	bd80      	pop	{r7, pc}
	...

0800fc84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b086      	sub	sp, #24
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	60f8      	str	r0, [r7, #12]
 800fc8c:	60b9      	str	r1, [r7, #8]
 800fc8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fc90:	2300      	movs	r3, #0
 800fc92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fc9a:	2b01      	cmp	r3, #1
 800fc9c:	d101      	bne.n	800fca2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800fc9e:	2302      	movs	r3, #2
 800fca0:	e0ff      	b.n	800fea2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	2201      	movs	r2, #1
 800fca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	2b14      	cmp	r3, #20
 800fcae:	f200 80f0 	bhi.w	800fe92 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800fcb2:	a201      	add	r2, pc, #4	; (adr r2, 800fcb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fcb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcb8:	0800fd0d 	.word	0x0800fd0d
 800fcbc:	0800fe93 	.word	0x0800fe93
 800fcc0:	0800fe93 	.word	0x0800fe93
 800fcc4:	0800fe93 	.word	0x0800fe93
 800fcc8:	0800fd4d 	.word	0x0800fd4d
 800fccc:	0800fe93 	.word	0x0800fe93
 800fcd0:	0800fe93 	.word	0x0800fe93
 800fcd4:	0800fe93 	.word	0x0800fe93
 800fcd8:	0800fd8f 	.word	0x0800fd8f
 800fcdc:	0800fe93 	.word	0x0800fe93
 800fce0:	0800fe93 	.word	0x0800fe93
 800fce4:	0800fe93 	.word	0x0800fe93
 800fce8:	0800fdcf 	.word	0x0800fdcf
 800fcec:	0800fe93 	.word	0x0800fe93
 800fcf0:	0800fe93 	.word	0x0800fe93
 800fcf4:	0800fe93 	.word	0x0800fe93
 800fcf8:	0800fe11 	.word	0x0800fe11
 800fcfc:	0800fe93 	.word	0x0800fe93
 800fd00:	0800fe93 	.word	0x0800fe93
 800fd04:	0800fe93 	.word	0x0800fe93
 800fd08:	0800fe51 	.word	0x0800fe51
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	68b9      	ldr	r1, [r7, #8]
 800fd12:	4618      	mov	r0, r3
 800fd14:	f000 fa88 	bl	8010228 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	699a      	ldr	r2, [r3, #24]
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	f042 0208 	orr.w	r2, r2, #8
 800fd26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	699a      	ldr	r2, [r3, #24]
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	f022 0204 	bic.w	r2, r2, #4
 800fd36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	6999      	ldr	r1, [r3, #24]
 800fd3e:	68bb      	ldr	r3, [r7, #8]
 800fd40:	691a      	ldr	r2, [r3, #16]
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	430a      	orrs	r2, r1
 800fd48:	619a      	str	r2, [r3, #24]
      break;
 800fd4a:	e0a5      	b.n	800fe98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	68b9      	ldr	r1, [r7, #8]
 800fd52:	4618      	mov	r0, r3
 800fd54:	f000 faf8 	bl	8010348 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	699a      	ldr	r2, [r3, #24]
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fd66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	699a      	ldr	r2, [r3, #24]
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fd76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	6999      	ldr	r1, [r3, #24]
 800fd7e:	68bb      	ldr	r3, [r7, #8]
 800fd80:	691b      	ldr	r3, [r3, #16]
 800fd82:	021a      	lsls	r2, r3, #8
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	430a      	orrs	r2, r1
 800fd8a:	619a      	str	r2, [r3, #24]
      break;
 800fd8c:	e084      	b.n	800fe98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	68b9      	ldr	r1, [r7, #8]
 800fd94:	4618      	mov	r0, r3
 800fd96:	f000 fb61 	bl	801045c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	69da      	ldr	r2, [r3, #28]
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	f042 0208 	orr.w	r2, r2, #8
 800fda8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	69da      	ldr	r2, [r3, #28]
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	f022 0204 	bic.w	r2, r2, #4
 800fdb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	69d9      	ldr	r1, [r3, #28]
 800fdc0:	68bb      	ldr	r3, [r7, #8]
 800fdc2:	691a      	ldr	r2, [r3, #16]
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	430a      	orrs	r2, r1
 800fdca:	61da      	str	r2, [r3, #28]
      break;
 800fdcc:	e064      	b.n	800fe98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	68b9      	ldr	r1, [r7, #8]
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	f000 fbc9 	bl	801056c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	69da      	ldr	r2, [r3, #28]
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fde8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	69da      	ldr	r2, [r3, #28]
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fdf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	69d9      	ldr	r1, [r3, #28]
 800fe00:	68bb      	ldr	r3, [r7, #8]
 800fe02:	691b      	ldr	r3, [r3, #16]
 800fe04:	021a      	lsls	r2, r3, #8
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	430a      	orrs	r2, r1
 800fe0c:	61da      	str	r2, [r3, #28]
      break;
 800fe0e:	e043      	b.n	800fe98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	68b9      	ldr	r1, [r7, #8]
 800fe16:	4618      	mov	r0, r3
 800fe18:	f000 fc12 	bl	8010640 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	f042 0208 	orr.w	r2, r2, #8
 800fe2a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	f022 0204 	bic.w	r2, r2, #4
 800fe3a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fe42:	68bb      	ldr	r3, [r7, #8]
 800fe44:	691a      	ldr	r2, [r3, #16]
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	430a      	orrs	r2, r1
 800fe4c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fe4e:	e023      	b.n	800fe98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	68b9      	ldr	r1, [r7, #8]
 800fe56:	4618      	mov	r0, r3
 800fe58:	f000 fc56 	bl	8010708 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fe6a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fe7a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fe82:	68bb      	ldr	r3, [r7, #8]
 800fe84:	691b      	ldr	r3, [r3, #16]
 800fe86:	021a      	lsls	r2, r3, #8
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	430a      	orrs	r2, r1
 800fe8e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fe90:	e002      	b.n	800fe98 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800fe92:	2301      	movs	r3, #1
 800fe94:	75fb      	strb	r3, [r7, #23]
      break;
 800fe96:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800fea0:	7dfb      	ldrb	r3, [r7, #23]
}
 800fea2:	4618      	mov	r0, r3
 800fea4:	3718      	adds	r7, #24
 800fea6:	46bd      	mov	sp, r7
 800fea8:	bd80      	pop	{r7, pc}
 800feaa:	bf00      	nop

0800feac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800feac:	b480      	push	{r7}
 800feae:	b083      	sub	sp, #12
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800feb4:	bf00      	nop
 800feb6:	370c      	adds	r7, #12
 800feb8:	46bd      	mov	sp, r7
 800feba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800febe:	4770      	bx	lr

0800fec0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fec0:	b480      	push	{r7}
 800fec2:	b083      	sub	sp, #12
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fec8:	bf00      	nop
 800feca:	370c      	adds	r7, #12
 800fecc:	46bd      	mov	sp, r7
 800fece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed2:	4770      	bx	lr

0800fed4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fed4:	b480      	push	{r7}
 800fed6:	b083      	sub	sp, #12
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fedc:	bf00      	nop
 800fede:	370c      	adds	r7, #12
 800fee0:	46bd      	mov	sp, r7
 800fee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee6:	4770      	bx	lr

0800fee8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fee8:	b480      	push	{r7}
 800feea:	b083      	sub	sp, #12
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fef0:	bf00      	nop
 800fef2:	370c      	adds	r7, #12
 800fef4:	46bd      	mov	sp, r7
 800fef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefa:	4770      	bx	lr

0800fefc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800fefc:	b480      	push	{r7}
 800fefe:	b083      	sub	sp, #12
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800ff04:	bf00      	nop
 800ff06:	370c      	adds	r7, #12
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0e:	4770      	bx	lr

0800ff10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ff10:	b480      	push	{r7}
 800ff12:	b083      	sub	sp, #12
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ff18:	bf00      	nop
 800ff1a:	370c      	adds	r7, #12
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff22:	4770      	bx	lr

0800ff24 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800ff24:	b480      	push	{r7}
 800ff26:	b083      	sub	sp, #12
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800ff2c:	bf00      	nop
 800ff2e:	370c      	adds	r7, #12
 800ff30:	46bd      	mov	sp, r7
 800ff32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff36:	4770      	bx	lr

0800ff38 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b084      	sub	sp, #16
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff44:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff4a:	687a      	ldr	r2, [r7, #4]
 800ff4c:	429a      	cmp	r2, r3
 800ff4e:	d107      	bne.n	800ff60 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	2201      	movs	r2, #1
 800ff54:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	2201      	movs	r2, #1
 800ff5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ff5e:	e02a      	b.n	800ffb6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff64:	687a      	ldr	r2, [r7, #4]
 800ff66:	429a      	cmp	r2, r3
 800ff68:	d107      	bne.n	800ff7a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	2202      	movs	r2, #2
 800ff6e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	2201      	movs	r2, #1
 800ff74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ff78:	e01d      	b.n	800ffb6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff7e:	687a      	ldr	r2, [r7, #4]
 800ff80:	429a      	cmp	r2, r3
 800ff82:	d107      	bne.n	800ff94 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	2204      	movs	r2, #4
 800ff88:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	2201      	movs	r2, #1
 800ff8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ff92:	e010      	b.n	800ffb6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff98:	687a      	ldr	r2, [r7, #4]
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	d107      	bne.n	800ffae <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	2208      	movs	r2, #8
 800ffa2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	2201      	movs	r2, #1
 800ffa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ffac:	e003      	b.n	800ffb6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	2201      	movs	r2, #1
 800ffb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800ffb6:	68f8      	ldr	r0, [r7, #12]
 800ffb8:	f7ff ffb4 	bl	800ff24 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	771a      	strb	r2, [r3, #28]
}
 800ffc2:	bf00      	nop
 800ffc4:	3710      	adds	r7, #16
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	bd80      	pop	{r7, pc}

0800ffca <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800ffca:	b580      	push	{r7, lr}
 800ffcc:	b084      	sub	sp, #16
 800ffce:	af00      	add	r7, sp, #0
 800ffd0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffd6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffdc:	687a      	ldr	r2, [r7, #4]
 800ffde:	429a      	cmp	r2, r3
 800ffe0:	d10b      	bne.n	800fffa <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	2201      	movs	r2, #1
 800ffe6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	69db      	ldr	r3, [r3, #28]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d136      	bne.n	801005e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	2201      	movs	r2, #1
 800fff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fff8:	e031      	b.n	801005e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fffe:	687a      	ldr	r2, [r7, #4]
 8010000:	429a      	cmp	r2, r3
 8010002:	d10b      	bne.n	801001c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	2202      	movs	r2, #2
 8010008:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	69db      	ldr	r3, [r3, #28]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d125      	bne.n	801005e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	2201      	movs	r2, #1
 8010016:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801001a:	e020      	b.n	801005e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010020:	687a      	ldr	r2, [r7, #4]
 8010022:	429a      	cmp	r2, r3
 8010024:	d10b      	bne.n	801003e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	2204      	movs	r2, #4
 801002a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	69db      	ldr	r3, [r3, #28]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d114      	bne.n	801005e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	2201      	movs	r2, #1
 8010038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801003c:	e00f      	b.n	801005e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010042:	687a      	ldr	r2, [r7, #4]
 8010044:	429a      	cmp	r2, r3
 8010046:	d10a      	bne.n	801005e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	2208      	movs	r2, #8
 801004c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	69db      	ldr	r3, [r3, #28]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d103      	bne.n	801005e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	2201      	movs	r2, #1
 801005a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 801005e:	68f8      	ldr	r0, [r7, #12]
 8010060:	f7ff ff42 	bl	800fee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	2200      	movs	r2, #0
 8010068:	771a      	strb	r2, [r3, #28]
}
 801006a:	bf00      	nop
 801006c:	3710      	adds	r7, #16
 801006e:	46bd      	mov	sp, r7
 8010070:	bd80      	pop	{r7, pc}

08010072 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010072:	b580      	push	{r7, lr}
 8010074:	b084      	sub	sp, #16
 8010076:	af00      	add	r7, sp, #0
 8010078:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801007e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010084:	687a      	ldr	r2, [r7, #4]
 8010086:	429a      	cmp	r2, r3
 8010088:	d103      	bne.n	8010092 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	2201      	movs	r2, #1
 801008e:	771a      	strb	r2, [r3, #28]
 8010090:	e019      	b.n	80100c6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010096:	687a      	ldr	r2, [r7, #4]
 8010098:	429a      	cmp	r2, r3
 801009a:	d103      	bne.n	80100a4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	2202      	movs	r2, #2
 80100a0:	771a      	strb	r2, [r3, #28]
 80100a2:	e010      	b.n	80100c6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100a8:	687a      	ldr	r2, [r7, #4]
 80100aa:	429a      	cmp	r2, r3
 80100ac:	d103      	bne.n	80100b6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	2204      	movs	r2, #4
 80100b2:	771a      	strb	r2, [r3, #28]
 80100b4:	e007      	b.n	80100c6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100ba:	687a      	ldr	r2, [r7, #4]
 80100bc:	429a      	cmp	r2, r3
 80100be:	d102      	bne.n	80100c6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	2208      	movs	r2, #8
 80100c4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80100c6:	68f8      	ldr	r0, [r7, #12]
 80100c8:	f7ff ff18 	bl	800fefc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	2200      	movs	r2, #0
 80100d0:	771a      	strb	r2, [r3, #28]
}
 80100d2:	bf00      	nop
 80100d4:	3710      	adds	r7, #16
 80100d6:	46bd      	mov	sp, r7
 80100d8:	bd80      	pop	{r7, pc}
	...

080100dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80100dc:	b480      	push	{r7}
 80100de:	b085      	sub	sp, #20
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	6078      	str	r0, [r7, #4]
 80100e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	4a44      	ldr	r2, [pc, #272]	; (8010200 <TIM_Base_SetConfig+0x124>)
 80100f0:	4293      	cmp	r3, r2
 80100f2:	d013      	beq.n	801011c <TIM_Base_SetConfig+0x40>
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80100fa:	d00f      	beq.n	801011c <TIM_Base_SetConfig+0x40>
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	4a41      	ldr	r2, [pc, #260]	; (8010204 <TIM_Base_SetConfig+0x128>)
 8010100:	4293      	cmp	r3, r2
 8010102:	d00b      	beq.n	801011c <TIM_Base_SetConfig+0x40>
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	4a40      	ldr	r2, [pc, #256]	; (8010208 <TIM_Base_SetConfig+0x12c>)
 8010108:	4293      	cmp	r3, r2
 801010a:	d007      	beq.n	801011c <TIM_Base_SetConfig+0x40>
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	4a3f      	ldr	r2, [pc, #252]	; (801020c <TIM_Base_SetConfig+0x130>)
 8010110:	4293      	cmp	r3, r2
 8010112:	d003      	beq.n	801011c <TIM_Base_SetConfig+0x40>
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	4a3e      	ldr	r2, [pc, #248]	; (8010210 <TIM_Base_SetConfig+0x134>)
 8010118:	4293      	cmp	r3, r2
 801011a:	d108      	bne.n	801012e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010122:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010124:	683b      	ldr	r3, [r7, #0]
 8010126:	685b      	ldr	r3, [r3, #4]
 8010128:	68fa      	ldr	r2, [r7, #12]
 801012a:	4313      	orrs	r3, r2
 801012c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	4a33      	ldr	r2, [pc, #204]	; (8010200 <TIM_Base_SetConfig+0x124>)
 8010132:	4293      	cmp	r3, r2
 8010134:	d027      	beq.n	8010186 <TIM_Base_SetConfig+0xaa>
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801013c:	d023      	beq.n	8010186 <TIM_Base_SetConfig+0xaa>
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	4a30      	ldr	r2, [pc, #192]	; (8010204 <TIM_Base_SetConfig+0x128>)
 8010142:	4293      	cmp	r3, r2
 8010144:	d01f      	beq.n	8010186 <TIM_Base_SetConfig+0xaa>
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	4a2f      	ldr	r2, [pc, #188]	; (8010208 <TIM_Base_SetConfig+0x12c>)
 801014a:	4293      	cmp	r3, r2
 801014c:	d01b      	beq.n	8010186 <TIM_Base_SetConfig+0xaa>
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	4a2e      	ldr	r2, [pc, #184]	; (801020c <TIM_Base_SetConfig+0x130>)
 8010152:	4293      	cmp	r3, r2
 8010154:	d017      	beq.n	8010186 <TIM_Base_SetConfig+0xaa>
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	4a2d      	ldr	r2, [pc, #180]	; (8010210 <TIM_Base_SetConfig+0x134>)
 801015a:	4293      	cmp	r3, r2
 801015c:	d013      	beq.n	8010186 <TIM_Base_SetConfig+0xaa>
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	4a2c      	ldr	r2, [pc, #176]	; (8010214 <TIM_Base_SetConfig+0x138>)
 8010162:	4293      	cmp	r3, r2
 8010164:	d00f      	beq.n	8010186 <TIM_Base_SetConfig+0xaa>
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	4a2b      	ldr	r2, [pc, #172]	; (8010218 <TIM_Base_SetConfig+0x13c>)
 801016a:	4293      	cmp	r3, r2
 801016c:	d00b      	beq.n	8010186 <TIM_Base_SetConfig+0xaa>
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	4a2a      	ldr	r2, [pc, #168]	; (801021c <TIM_Base_SetConfig+0x140>)
 8010172:	4293      	cmp	r3, r2
 8010174:	d007      	beq.n	8010186 <TIM_Base_SetConfig+0xaa>
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	4a29      	ldr	r2, [pc, #164]	; (8010220 <TIM_Base_SetConfig+0x144>)
 801017a:	4293      	cmp	r3, r2
 801017c:	d003      	beq.n	8010186 <TIM_Base_SetConfig+0xaa>
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	4a28      	ldr	r2, [pc, #160]	; (8010224 <TIM_Base_SetConfig+0x148>)
 8010182:	4293      	cmp	r3, r2
 8010184:	d108      	bne.n	8010198 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801018c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801018e:	683b      	ldr	r3, [r7, #0]
 8010190:	68db      	ldr	r3, [r3, #12]
 8010192:	68fa      	ldr	r2, [r7, #12]
 8010194:	4313      	orrs	r3, r2
 8010196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801019e:	683b      	ldr	r3, [r7, #0]
 80101a0:	695b      	ldr	r3, [r3, #20]
 80101a2:	4313      	orrs	r3, r2
 80101a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	68fa      	ldr	r2, [r7, #12]
 80101aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80101ac:	683b      	ldr	r3, [r7, #0]
 80101ae:	689a      	ldr	r2, [r3, #8]
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80101b4:	683b      	ldr	r3, [r7, #0]
 80101b6:	681a      	ldr	r2, [r3, #0]
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	4a10      	ldr	r2, [pc, #64]	; (8010200 <TIM_Base_SetConfig+0x124>)
 80101c0:	4293      	cmp	r3, r2
 80101c2:	d00f      	beq.n	80101e4 <TIM_Base_SetConfig+0x108>
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	4a12      	ldr	r2, [pc, #72]	; (8010210 <TIM_Base_SetConfig+0x134>)
 80101c8:	4293      	cmp	r3, r2
 80101ca:	d00b      	beq.n	80101e4 <TIM_Base_SetConfig+0x108>
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	4a11      	ldr	r2, [pc, #68]	; (8010214 <TIM_Base_SetConfig+0x138>)
 80101d0:	4293      	cmp	r3, r2
 80101d2:	d007      	beq.n	80101e4 <TIM_Base_SetConfig+0x108>
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	4a10      	ldr	r2, [pc, #64]	; (8010218 <TIM_Base_SetConfig+0x13c>)
 80101d8:	4293      	cmp	r3, r2
 80101da:	d003      	beq.n	80101e4 <TIM_Base_SetConfig+0x108>
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	4a0f      	ldr	r2, [pc, #60]	; (801021c <TIM_Base_SetConfig+0x140>)
 80101e0:	4293      	cmp	r3, r2
 80101e2:	d103      	bne.n	80101ec <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	691a      	ldr	r2, [r3, #16]
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2201      	movs	r2, #1
 80101f0:	615a      	str	r2, [r3, #20]
}
 80101f2:	bf00      	nop
 80101f4:	3714      	adds	r7, #20
 80101f6:	46bd      	mov	sp, r7
 80101f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fc:	4770      	bx	lr
 80101fe:	bf00      	nop
 8010200:	40010000 	.word	0x40010000
 8010204:	40000400 	.word	0x40000400
 8010208:	40000800 	.word	0x40000800
 801020c:	40000c00 	.word	0x40000c00
 8010210:	40010400 	.word	0x40010400
 8010214:	40014000 	.word	0x40014000
 8010218:	40014400 	.word	0x40014400
 801021c:	40014800 	.word	0x40014800
 8010220:	4000e000 	.word	0x4000e000
 8010224:	4000e400 	.word	0x4000e400

08010228 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010228:	b480      	push	{r7}
 801022a:	b087      	sub	sp, #28
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
 8010230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	6a1b      	ldr	r3, [r3, #32]
 8010236:	f023 0201 	bic.w	r2, r3, #1
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	6a1b      	ldr	r3, [r3, #32]
 8010242:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	685b      	ldr	r3, [r3, #4]
 8010248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	699b      	ldr	r3, [r3, #24]
 801024e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010250:	68fa      	ldr	r2, [r7, #12]
 8010252:	4b37      	ldr	r3, [pc, #220]	; (8010330 <TIM_OC1_SetConfig+0x108>)
 8010254:	4013      	ands	r3, r2
 8010256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	f023 0303 	bic.w	r3, r3, #3
 801025e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	68fa      	ldr	r2, [r7, #12]
 8010266:	4313      	orrs	r3, r2
 8010268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801026a:	697b      	ldr	r3, [r7, #20]
 801026c:	f023 0302 	bic.w	r3, r3, #2
 8010270:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010272:	683b      	ldr	r3, [r7, #0]
 8010274:	689b      	ldr	r3, [r3, #8]
 8010276:	697a      	ldr	r2, [r7, #20]
 8010278:	4313      	orrs	r3, r2
 801027a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	4a2d      	ldr	r2, [pc, #180]	; (8010334 <TIM_OC1_SetConfig+0x10c>)
 8010280:	4293      	cmp	r3, r2
 8010282:	d00f      	beq.n	80102a4 <TIM_OC1_SetConfig+0x7c>
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	4a2c      	ldr	r2, [pc, #176]	; (8010338 <TIM_OC1_SetConfig+0x110>)
 8010288:	4293      	cmp	r3, r2
 801028a:	d00b      	beq.n	80102a4 <TIM_OC1_SetConfig+0x7c>
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	4a2b      	ldr	r2, [pc, #172]	; (801033c <TIM_OC1_SetConfig+0x114>)
 8010290:	4293      	cmp	r3, r2
 8010292:	d007      	beq.n	80102a4 <TIM_OC1_SetConfig+0x7c>
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	4a2a      	ldr	r2, [pc, #168]	; (8010340 <TIM_OC1_SetConfig+0x118>)
 8010298:	4293      	cmp	r3, r2
 801029a:	d003      	beq.n	80102a4 <TIM_OC1_SetConfig+0x7c>
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	4a29      	ldr	r2, [pc, #164]	; (8010344 <TIM_OC1_SetConfig+0x11c>)
 80102a0:	4293      	cmp	r3, r2
 80102a2:	d10c      	bne.n	80102be <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80102a4:	697b      	ldr	r3, [r7, #20]
 80102a6:	f023 0308 	bic.w	r3, r3, #8
 80102aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80102ac:	683b      	ldr	r3, [r7, #0]
 80102ae:	68db      	ldr	r3, [r3, #12]
 80102b0:	697a      	ldr	r2, [r7, #20]
 80102b2:	4313      	orrs	r3, r2
 80102b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80102b6:	697b      	ldr	r3, [r7, #20]
 80102b8:	f023 0304 	bic.w	r3, r3, #4
 80102bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	4a1c      	ldr	r2, [pc, #112]	; (8010334 <TIM_OC1_SetConfig+0x10c>)
 80102c2:	4293      	cmp	r3, r2
 80102c4:	d00f      	beq.n	80102e6 <TIM_OC1_SetConfig+0xbe>
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	4a1b      	ldr	r2, [pc, #108]	; (8010338 <TIM_OC1_SetConfig+0x110>)
 80102ca:	4293      	cmp	r3, r2
 80102cc:	d00b      	beq.n	80102e6 <TIM_OC1_SetConfig+0xbe>
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	4a1a      	ldr	r2, [pc, #104]	; (801033c <TIM_OC1_SetConfig+0x114>)
 80102d2:	4293      	cmp	r3, r2
 80102d4:	d007      	beq.n	80102e6 <TIM_OC1_SetConfig+0xbe>
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	4a19      	ldr	r2, [pc, #100]	; (8010340 <TIM_OC1_SetConfig+0x118>)
 80102da:	4293      	cmp	r3, r2
 80102dc:	d003      	beq.n	80102e6 <TIM_OC1_SetConfig+0xbe>
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	4a18      	ldr	r2, [pc, #96]	; (8010344 <TIM_OC1_SetConfig+0x11c>)
 80102e2:	4293      	cmp	r3, r2
 80102e4:	d111      	bne.n	801030a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80102e6:	693b      	ldr	r3, [r7, #16]
 80102e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80102ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80102ee:	693b      	ldr	r3, [r7, #16]
 80102f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80102f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80102f6:	683b      	ldr	r3, [r7, #0]
 80102f8:	695b      	ldr	r3, [r3, #20]
 80102fa:	693a      	ldr	r2, [r7, #16]
 80102fc:	4313      	orrs	r3, r2
 80102fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010300:	683b      	ldr	r3, [r7, #0]
 8010302:	699b      	ldr	r3, [r3, #24]
 8010304:	693a      	ldr	r2, [r7, #16]
 8010306:	4313      	orrs	r3, r2
 8010308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	693a      	ldr	r2, [r7, #16]
 801030e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	68fa      	ldr	r2, [r7, #12]
 8010314:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010316:	683b      	ldr	r3, [r7, #0]
 8010318:	685a      	ldr	r2, [r3, #4]
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	697a      	ldr	r2, [r7, #20]
 8010322:	621a      	str	r2, [r3, #32]
}
 8010324:	bf00      	nop
 8010326:	371c      	adds	r7, #28
 8010328:	46bd      	mov	sp, r7
 801032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801032e:	4770      	bx	lr
 8010330:	fffeff8f 	.word	0xfffeff8f
 8010334:	40010000 	.word	0x40010000
 8010338:	40010400 	.word	0x40010400
 801033c:	40014000 	.word	0x40014000
 8010340:	40014400 	.word	0x40014400
 8010344:	40014800 	.word	0x40014800

08010348 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010348:	b480      	push	{r7}
 801034a:	b087      	sub	sp, #28
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]
 8010350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	6a1b      	ldr	r3, [r3, #32]
 8010356:	f023 0210 	bic.w	r2, r3, #16
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	6a1b      	ldr	r3, [r3, #32]
 8010362:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	685b      	ldr	r3, [r3, #4]
 8010368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	699b      	ldr	r3, [r3, #24]
 801036e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010370:	68fa      	ldr	r2, [r7, #12]
 8010372:	4b34      	ldr	r3, [pc, #208]	; (8010444 <TIM_OC2_SetConfig+0xfc>)
 8010374:	4013      	ands	r3, r2
 8010376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801037e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010380:	683b      	ldr	r3, [r7, #0]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	021b      	lsls	r3, r3, #8
 8010386:	68fa      	ldr	r2, [r7, #12]
 8010388:	4313      	orrs	r3, r2
 801038a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801038c:	697b      	ldr	r3, [r7, #20]
 801038e:	f023 0320 	bic.w	r3, r3, #32
 8010392:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010394:	683b      	ldr	r3, [r7, #0]
 8010396:	689b      	ldr	r3, [r3, #8]
 8010398:	011b      	lsls	r3, r3, #4
 801039a:	697a      	ldr	r2, [r7, #20]
 801039c:	4313      	orrs	r3, r2
 801039e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	4a29      	ldr	r2, [pc, #164]	; (8010448 <TIM_OC2_SetConfig+0x100>)
 80103a4:	4293      	cmp	r3, r2
 80103a6:	d003      	beq.n	80103b0 <TIM_OC2_SetConfig+0x68>
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	4a28      	ldr	r2, [pc, #160]	; (801044c <TIM_OC2_SetConfig+0x104>)
 80103ac:	4293      	cmp	r3, r2
 80103ae:	d10d      	bne.n	80103cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80103b0:	697b      	ldr	r3, [r7, #20]
 80103b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80103b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80103b8:	683b      	ldr	r3, [r7, #0]
 80103ba:	68db      	ldr	r3, [r3, #12]
 80103bc:	011b      	lsls	r3, r3, #4
 80103be:	697a      	ldr	r2, [r7, #20]
 80103c0:	4313      	orrs	r3, r2
 80103c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80103c4:	697b      	ldr	r3, [r7, #20]
 80103c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80103ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	4a1e      	ldr	r2, [pc, #120]	; (8010448 <TIM_OC2_SetConfig+0x100>)
 80103d0:	4293      	cmp	r3, r2
 80103d2:	d00f      	beq.n	80103f4 <TIM_OC2_SetConfig+0xac>
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	4a1d      	ldr	r2, [pc, #116]	; (801044c <TIM_OC2_SetConfig+0x104>)
 80103d8:	4293      	cmp	r3, r2
 80103da:	d00b      	beq.n	80103f4 <TIM_OC2_SetConfig+0xac>
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	4a1c      	ldr	r2, [pc, #112]	; (8010450 <TIM_OC2_SetConfig+0x108>)
 80103e0:	4293      	cmp	r3, r2
 80103e2:	d007      	beq.n	80103f4 <TIM_OC2_SetConfig+0xac>
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	4a1b      	ldr	r2, [pc, #108]	; (8010454 <TIM_OC2_SetConfig+0x10c>)
 80103e8:	4293      	cmp	r3, r2
 80103ea:	d003      	beq.n	80103f4 <TIM_OC2_SetConfig+0xac>
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	4a1a      	ldr	r2, [pc, #104]	; (8010458 <TIM_OC2_SetConfig+0x110>)
 80103f0:	4293      	cmp	r3, r2
 80103f2:	d113      	bne.n	801041c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80103f4:	693b      	ldr	r3, [r7, #16]
 80103f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80103fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80103fc:	693b      	ldr	r3, [r7, #16]
 80103fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010402:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	695b      	ldr	r3, [r3, #20]
 8010408:	009b      	lsls	r3, r3, #2
 801040a:	693a      	ldr	r2, [r7, #16]
 801040c:	4313      	orrs	r3, r2
 801040e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010410:	683b      	ldr	r3, [r7, #0]
 8010412:	699b      	ldr	r3, [r3, #24]
 8010414:	009b      	lsls	r3, r3, #2
 8010416:	693a      	ldr	r2, [r7, #16]
 8010418:	4313      	orrs	r3, r2
 801041a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	693a      	ldr	r2, [r7, #16]
 8010420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	68fa      	ldr	r2, [r7, #12]
 8010426:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010428:	683b      	ldr	r3, [r7, #0]
 801042a:	685a      	ldr	r2, [r3, #4]
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	697a      	ldr	r2, [r7, #20]
 8010434:	621a      	str	r2, [r3, #32]
}
 8010436:	bf00      	nop
 8010438:	371c      	adds	r7, #28
 801043a:	46bd      	mov	sp, r7
 801043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010440:	4770      	bx	lr
 8010442:	bf00      	nop
 8010444:	feff8fff 	.word	0xfeff8fff
 8010448:	40010000 	.word	0x40010000
 801044c:	40010400 	.word	0x40010400
 8010450:	40014000 	.word	0x40014000
 8010454:	40014400 	.word	0x40014400
 8010458:	40014800 	.word	0x40014800

0801045c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801045c:	b480      	push	{r7}
 801045e:	b087      	sub	sp, #28
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
 8010464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	6a1b      	ldr	r3, [r3, #32]
 801046a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	6a1b      	ldr	r3, [r3, #32]
 8010476:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	685b      	ldr	r3, [r3, #4]
 801047c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	69db      	ldr	r3, [r3, #28]
 8010482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010484:	68fa      	ldr	r2, [r7, #12]
 8010486:	4b33      	ldr	r3, [pc, #204]	; (8010554 <TIM_OC3_SetConfig+0xf8>)
 8010488:	4013      	ands	r3, r2
 801048a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	f023 0303 	bic.w	r3, r3, #3
 8010492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010494:	683b      	ldr	r3, [r7, #0]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	68fa      	ldr	r2, [r7, #12]
 801049a:	4313      	orrs	r3, r2
 801049c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801049e:	697b      	ldr	r3, [r7, #20]
 80104a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80104a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80104a6:	683b      	ldr	r3, [r7, #0]
 80104a8:	689b      	ldr	r3, [r3, #8]
 80104aa:	021b      	lsls	r3, r3, #8
 80104ac:	697a      	ldr	r2, [r7, #20]
 80104ae:	4313      	orrs	r3, r2
 80104b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	4a28      	ldr	r2, [pc, #160]	; (8010558 <TIM_OC3_SetConfig+0xfc>)
 80104b6:	4293      	cmp	r3, r2
 80104b8:	d003      	beq.n	80104c2 <TIM_OC3_SetConfig+0x66>
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	4a27      	ldr	r2, [pc, #156]	; (801055c <TIM_OC3_SetConfig+0x100>)
 80104be:	4293      	cmp	r3, r2
 80104c0:	d10d      	bne.n	80104de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80104c2:	697b      	ldr	r3, [r7, #20]
 80104c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80104c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80104ca:	683b      	ldr	r3, [r7, #0]
 80104cc:	68db      	ldr	r3, [r3, #12]
 80104ce:	021b      	lsls	r3, r3, #8
 80104d0:	697a      	ldr	r2, [r7, #20]
 80104d2:	4313      	orrs	r3, r2
 80104d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80104d6:	697b      	ldr	r3, [r7, #20]
 80104d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80104dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	4a1d      	ldr	r2, [pc, #116]	; (8010558 <TIM_OC3_SetConfig+0xfc>)
 80104e2:	4293      	cmp	r3, r2
 80104e4:	d00f      	beq.n	8010506 <TIM_OC3_SetConfig+0xaa>
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	4a1c      	ldr	r2, [pc, #112]	; (801055c <TIM_OC3_SetConfig+0x100>)
 80104ea:	4293      	cmp	r3, r2
 80104ec:	d00b      	beq.n	8010506 <TIM_OC3_SetConfig+0xaa>
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	4a1b      	ldr	r2, [pc, #108]	; (8010560 <TIM_OC3_SetConfig+0x104>)
 80104f2:	4293      	cmp	r3, r2
 80104f4:	d007      	beq.n	8010506 <TIM_OC3_SetConfig+0xaa>
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	4a1a      	ldr	r2, [pc, #104]	; (8010564 <TIM_OC3_SetConfig+0x108>)
 80104fa:	4293      	cmp	r3, r2
 80104fc:	d003      	beq.n	8010506 <TIM_OC3_SetConfig+0xaa>
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	4a19      	ldr	r2, [pc, #100]	; (8010568 <TIM_OC3_SetConfig+0x10c>)
 8010502:	4293      	cmp	r3, r2
 8010504:	d113      	bne.n	801052e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010506:	693b      	ldr	r3, [r7, #16]
 8010508:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801050c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801050e:	693b      	ldr	r3, [r7, #16]
 8010510:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010514:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010516:	683b      	ldr	r3, [r7, #0]
 8010518:	695b      	ldr	r3, [r3, #20]
 801051a:	011b      	lsls	r3, r3, #4
 801051c:	693a      	ldr	r2, [r7, #16]
 801051e:	4313      	orrs	r3, r2
 8010520:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010522:	683b      	ldr	r3, [r7, #0]
 8010524:	699b      	ldr	r3, [r3, #24]
 8010526:	011b      	lsls	r3, r3, #4
 8010528:	693a      	ldr	r2, [r7, #16]
 801052a:	4313      	orrs	r3, r2
 801052c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	693a      	ldr	r2, [r7, #16]
 8010532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	68fa      	ldr	r2, [r7, #12]
 8010538:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801053a:	683b      	ldr	r3, [r7, #0]
 801053c:	685a      	ldr	r2, [r3, #4]
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	697a      	ldr	r2, [r7, #20]
 8010546:	621a      	str	r2, [r3, #32]
}
 8010548:	bf00      	nop
 801054a:	371c      	adds	r7, #28
 801054c:	46bd      	mov	sp, r7
 801054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010552:	4770      	bx	lr
 8010554:	fffeff8f 	.word	0xfffeff8f
 8010558:	40010000 	.word	0x40010000
 801055c:	40010400 	.word	0x40010400
 8010560:	40014000 	.word	0x40014000
 8010564:	40014400 	.word	0x40014400
 8010568:	40014800 	.word	0x40014800

0801056c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801056c:	b480      	push	{r7}
 801056e:	b087      	sub	sp, #28
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
 8010574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	6a1b      	ldr	r3, [r3, #32]
 801057a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	6a1b      	ldr	r3, [r3, #32]
 8010586:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	685b      	ldr	r3, [r3, #4]
 801058c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	69db      	ldr	r3, [r3, #28]
 8010592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010594:	68fa      	ldr	r2, [r7, #12]
 8010596:	4b24      	ldr	r3, [pc, #144]	; (8010628 <TIM_OC4_SetConfig+0xbc>)
 8010598:	4013      	ands	r3, r2
 801059a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80105a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80105a4:	683b      	ldr	r3, [r7, #0]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	021b      	lsls	r3, r3, #8
 80105aa:	68fa      	ldr	r2, [r7, #12]
 80105ac:	4313      	orrs	r3, r2
 80105ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80105b0:	693b      	ldr	r3, [r7, #16]
 80105b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80105b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80105b8:	683b      	ldr	r3, [r7, #0]
 80105ba:	689b      	ldr	r3, [r3, #8]
 80105bc:	031b      	lsls	r3, r3, #12
 80105be:	693a      	ldr	r2, [r7, #16]
 80105c0:	4313      	orrs	r3, r2
 80105c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	4a19      	ldr	r2, [pc, #100]	; (801062c <TIM_OC4_SetConfig+0xc0>)
 80105c8:	4293      	cmp	r3, r2
 80105ca:	d00f      	beq.n	80105ec <TIM_OC4_SetConfig+0x80>
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	4a18      	ldr	r2, [pc, #96]	; (8010630 <TIM_OC4_SetConfig+0xc4>)
 80105d0:	4293      	cmp	r3, r2
 80105d2:	d00b      	beq.n	80105ec <TIM_OC4_SetConfig+0x80>
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	4a17      	ldr	r2, [pc, #92]	; (8010634 <TIM_OC4_SetConfig+0xc8>)
 80105d8:	4293      	cmp	r3, r2
 80105da:	d007      	beq.n	80105ec <TIM_OC4_SetConfig+0x80>
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	4a16      	ldr	r2, [pc, #88]	; (8010638 <TIM_OC4_SetConfig+0xcc>)
 80105e0:	4293      	cmp	r3, r2
 80105e2:	d003      	beq.n	80105ec <TIM_OC4_SetConfig+0x80>
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	4a15      	ldr	r2, [pc, #84]	; (801063c <TIM_OC4_SetConfig+0xd0>)
 80105e8:	4293      	cmp	r3, r2
 80105ea:	d109      	bne.n	8010600 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80105ec:	697b      	ldr	r3, [r7, #20]
 80105ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80105f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80105f4:	683b      	ldr	r3, [r7, #0]
 80105f6:	695b      	ldr	r3, [r3, #20]
 80105f8:	019b      	lsls	r3, r3, #6
 80105fa:	697a      	ldr	r2, [r7, #20]
 80105fc:	4313      	orrs	r3, r2
 80105fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	697a      	ldr	r2, [r7, #20]
 8010604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	68fa      	ldr	r2, [r7, #12]
 801060a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801060c:	683b      	ldr	r3, [r7, #0]
 801060e:	685a      	ldr	r2, [r3, #4]
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	693a      	ldr	r2, [r7, #16]
 8010618:	621a      	str	r2, [r3, #32]
}
 801061a:	bf00      	nop
 801061c:	371c      	adds	r7, #28
 801061e:	46bd      	mov	sp, r7
 8010620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010624:	4770      	bx	lr
 8010626:	bf00      	nop
 8010628:	feff8fff 	.word	0xfeff8fff
 801062c:	40010000 	.word	0x40010000
 8010630:	40010400 	.word	0x40010400
 8010634:	40014000 	.word	0x40014000
 8010638:	40014400 	.word	0x40014400
 801063c:	40014800 	.word	0x40014800

08010640 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010640:	b480      	push	{r7}
 8010642:	b087      	sub	sp, #28
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
 8010648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	6a1b      	ldr	r3, [r3, #32]
 801064e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	6a1b      	ldr	r3, [r3, #32]
 801065a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	685b      	ldr	r3, [r3, #4]
 8010660:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010668:	68fa      	ldr	r2, [r7, #12]
 801066a:	4b21      	ldr	r3, [pc, #132]	; (80106f0 <TIM_OC5_SetConfig+0xb0>)
 801066c:	4013      	ands	r3, r2
 801066e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010670:	683b      	ldr	r3, [r7, #0]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	68fa      	ldr	r2, [r7, #12]
 8010676:	4313      	orrs	r3, r2
 8010678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801067a:	693b      	ldr	r3, [r7, #16]
 801067c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010680:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010682:	683b      	ldr	r3, [r7, #0]
 8010684:	689b      	ldr	r3, [r3, #8]
 8010686:	041b      	lsls	r3, r3, #16
 8010688:	693a      	ldr	r2, [r7, #16]
 801068a:	4313      	orrs	r3, r2
 801068c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	4a18      	ldr	r2, [pc, #96]	; (80106f4 <TIM_OC5_SetConfig+0xb4>)
 8010692:	4293      	cmp	r3, r2
 8010694:	d00f      	beq.n	80106b6 <TIM_OC5_SetConfig+0x76>
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	4a17      	ldr	r2, [pc, #92]	; (80106f8 <TIM_OC5_SetConfig+0xb8>)
 801069a:	4293      	cmp	r3, r2
 801069c:	d00b      	beq.n	80106b6 <TIM_OC5_SetConfig+0x76>
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	4a16      	ldr	r2, [pc, #88]	; (80106fc <TIM_OC5_SetConfig+0xbc>)
 80106a2:	4293      	cmp	r3, r2
 80106a4:	d007      	beq.n	80106b6 <TIM_OC5_SetConfig+0x76>
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	4a15      	ldr	r2, [pc, #84]	; (8010700 <TIM_OC5_SetConfig+0xc0>)
 80106aa:	4293      	cmp	r3, r2
 80106ac:	d003      	beq.n	80106b6 <TIM_OC5_SetConfig+0x76>
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	4a14      	ldr	r2, [pc, #80]	; (8010704 <TIM_OC5_SetConfig+0xc4>)
 80106b2:	4293      	cmp	r3, r2
 80106b4:	d109      	bne.n	80106ca <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80106b6:	697b      	ldr	r3, [r7, #20]
 80106b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80106bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	695b      	ldr	r3, [r3, #20]
 80106c2:	021b      	lsls	r3, r3, #8
 80106c4:	697a      	ldr	r2, [r7, #20]
 80106c6:	4313      	orrs	r3, r2
 80106c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	697a      	ldr	r2, [r7, #20]
 80106ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	68fa      	ldr	r2, [r7, #12]
 80106d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80106d6:	683b      	ldr	r3, [r7, #0]
 80106d8:	685a      	ldr	r2, [r3, #4]
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	693a      	ldr	r2, [r7, #16]
 80106e2:	621a      	str	r2, [r3, #32]
}
 80106e4:	bf00      	nop
 80106e6:	371c      	adds	r7, #28
 80106e8:	46bd      	mov	sp, r7
 80106ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ee:	4770      	bx	lr
 80106f0:	fffeff8f 	.word	0xfffeff8f
 80106f4:	40010000 	.word	0x40010000
 80106f8:	40010400 	.word	0x40010400
 80106fc:	40014000 	.word	0x40014000
 8010700:	40014400 	.word	0x40014400
 8010704:	40014800 	.word	0x40014800

08010708 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010708:	b480      	push	{r7}
 801070a:	b087      	sub	sp, #28
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
 8010710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	6a1b      	ldr	r3, [r3, #32]
 8010716:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	6a1b      	ldr	r3, [r3, #32]
 8010722:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	685b      	ldr	r3, [r3, #4]
 8010728:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801072e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010730:	68fa      	ldr	r2, [r7, #12]
 8010732:	4b22      	ldr	r3, [pc, #136]	; (80107bc <TIM_OC6_SetConfig+0xb4>)
 8010734:	4013      	ands	r3, r2
 8010736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010738:	683b      	ldr	r3, [r7, #0]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	021b      	lsls	r3, r3, #8
 801073e:	68fa      	ldr	r2, [r7, #12]
 8010740:	4313      	orrs	r3, r2
 8010742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010744:	693b      	ldr	r3, [r7, #16]
 8010746:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801074a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801074c:	683b      	ldr	r3, [r7, #0]
 801074e:	689b      	ldr	r3, [r3, #8]
 8010750:	051b      	lsls	r3, r3, #20
 8010752:	693a      	ldr	r2, [r7, #16]
 8010754:	4313      	orrs	r3, r2
 8010756:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	4a19      	ldr	r2, [pc, #100]	; (80107c0 <TIM_OC6_SetConfig+0xb8>)
 801075c:	4293      	cmp	r3, r2
 801075e:	d00f      	beq.n	8010780 <TIM_OC6_SetConfig+0x78>
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	4a18      	ldr	r2, [pc, #96]	; (80107c4 <TIM_OC6_SetConfig+0xbc>)
 8010764:	4293      	cmp	r3, r2
 8010766:	d00b      	beq.n	8010780 <TIM_OC6_SetConfig+0x78>
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	4a17      	ldr	r2, [pc, #92]	; (80107c8 <TIM_OC6_SetConfig+0xc0>)
 801076c:	4293      	cmp	r3, r2
 801076e:	d007      	beq.n	8010780 <TIM_OC6_SetConfig+0x78>
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	4a16      	ldr	r2, [pc, #88]	; (80107cc <TIM_OC6_SetConfig+0xc4>)
 8010774:	4293      	cmp	r3, r2
 8010776:	d003      	beq.n	8010780 <TIM_OC6_SetConfig+0x78>
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	4a15      	ldr	r2, [pc, #84]	; (80107d0 <TIM_OC6_SetConfig+0xc8>)
 801077c:	4293      	cmp	r3, r2
 801077e:	d109      	bne.n	8010794 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010780:	697b      	ldr	r3, [r7, #20]
 8010782:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010786:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010788:	683b      	ldr	r3, [r7, #0]
 801078a:	695b      	ldr	r3, [r3, #20]
 801078c:	029b      	lsls	r3, r3, #10
 801078e:	697a      	ldr	r2, [r7, #20]
 8010790:	4313      	orrs	r3, r2
 8010792:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	697a      	ldr	r2, [r7, #20]
 8010798:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	68fa      	ldr	r2, [r7, #12]
 801079e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80107a0:	683b      	ldr	r3, [r7, #0]
 80107a2:	685a      	ldr	r2, [r3, #4]
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	693a      	ldr	r2, [r7, #16]
 80107ac:	621a      	str	r2, [r3, #32]
}
 80107ae:	bf00      	nop
 80107b0:	371c      	adds	r7, #28
 80107b2:	46bd      	mov	sp, r7
 80107b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b8:	4770      	bx	lr
 80107ba:	bf00      	nop
 80107bc:	feff8fff 	.word	0xfeff8fff
 80107c0:	40010000 	.word	0x40010000
 80107c4:	40010400 	.word	0x40010400
 80107c8:	40014000 	.word	0x40014000
 80107cc:	40014400 	.word	0x40014400
 80107d0:	40014800 	.word	0x40014800

080107d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80107d4:	b480      	push	{r7}
 80107d6:	b087      	sub	sp, #28
 80107d8:	af00      	add	r7, sp, #0
 80107da:	60f8      	str	r0, [r7, #12]
 80107dc:	60b9      	str	r1, [r7, #8]
 80107de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80107e0:	68bb      	ldr	r3, [r7, #8]
 80107e2:	f003 031f 	and.w	r3, r3, #31
 80107e6:	2201      	movs	r2, #1
 80107e8:	fa02 f303 	lsl.w	r3, r2, r3
 80107ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	6a1a      	ldr	r2, [r3, #32]
 80107f2:	697b      	ldr	r3, [r7, #20]
 80107f4:	43db      	mvns	r3, r3
 80107f6:	401a      	ands	r2, r3
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	6a1a      	ldr	r2, [r3, #32]
 8010800:	68bb      	ldr	r3, [r7, #8]
 8010802:	f003 031f 	and.w	r3, r3, #31
 8010806:	6879      	ldr	r1, [r7, #4]
 8010808:	fa01 f303 	lsl.w	r3, r1, r3
 801080c:	431a      	orrs	r2, r3
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	621a      	str	r2, [r3, #32]
}
 8010812:	bf00      	nop
 8010814:	371c      	adds	r7, #28
 8010816:	46bd      	mov	sp, r7
 8010818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081c:	4770      	bx	lr
	...

08010820 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010820:	b480      	push	{r7}
 8010822:	b085      	sub	sp, #20
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
 8010828:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010830:	2b01      	cmp	r3, #1
 8010832:	d101      	bne.n	8010838 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010834:	2302      	movs	r3, #2
 8010836:	e077      	b.n	8010928 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	2201      	movs	r2, #1
 801083c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	2202      	movs	r2, #2
 8010844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	685b      	ldr	r3, [r3, #4]
 801084e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	689b      	ldr	r3, [r3, #8]
 8010856:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	4a35      	ldr	r2, [pc, #212]	; (8010934 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801085e:	4293      	cmp	r3, r2
 8010860:	d004      	beq.n	801086c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	4a34      	ldr	r2, [pc, #208]	; (8010938 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010868:	4293      	cmp	r3, r2
 801086a:	d108      	bne.n	801087e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010872:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010874:	683b      	ldr	r3, [r7, #0]
 8010876:	685b      	ldr	r3, [r3, #4]
 8010878:	68fa      	ldr	r2, [r7, #12]
 801087a:	4313      	orrs	r3, r2
 801087c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010884:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010886:	683b      	ldr	r3, [r7, #0]
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	68fa      	ldr	r2, [r7, #12]
 801088c:	4313      	orrs	r3, r2
 801088e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	68fa      	ldr	r2, [r7, #12]
 8010896:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	4a25      	ldr	r2, [pc, #148]	; (8010934 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801089e:	4293      	cmp	r3, r2
 80108a0:	d02c      	beq.n	80108fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80108aa:	d027      	beq.n	80108fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	4a22      	ldr	r2, [pc, #136]	; (801093c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80108b2:	4293      	cmp	r3, r2
 80108b4:	d022      	beq.n	80108fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	4a21      	ldr	r2, [pc, #132]	; (8010940 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80108bc:	4293      	cmp	r3, r2
 80108be:	d01d      	beq.n	80108fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	4a1f      	ldr	r2, [pc, #124]	; (8010944 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80108c6:	4293      	cmp	r3, r2
 80108c8:	d018      	beq.n	80108fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	4a1a      	ldr	r2, [pc, #104]	; (8010938 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80108d0:	4293      	cmp	r3, r2
 80108d2:	d013      	beq.n	80108fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	4a1b      	ldr	r2, [pc, #108]	; (8010948 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80108da:	4293      	cmp	r3, r2
 80108dc:	d00e      	beq.n	80108fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	4a1a      	ldr	r2, [pc, #104]	; (801094c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80108e4:	4293      	cmp	r3, r2
 80108e6:	d009      	beq.n	80108fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	4a18      	ldr	r2, [pc, #96]	; (8010950 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80108ee:	4293      	cmp	r3, r2
 80108f0:	d004      	beq.n	80108fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	4a17      	ldr	r2, [pc, #92]	; (8010954 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80108f8:	4293      	cmp	r3, r2
 80108fa:	d10c      	bne.n	8010916 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80108fc:	68bb      	ldr	r3, [r7, #8]
 80108fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010902:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010904:	683b      	ldr	r3, [r7, #0]
 8010906:	689b      	ldr	r3, [r3, #8]
 8010908:	68ba      	ldr	r2, [r7, #8]
 801090a:	4313      	orrs	r3, r2
 801090c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	68ba      	ldr	r2, [r7, #8]
 8010914:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	2201      	movs	r2, #1
 801091a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	2200      	movs	r2, #0
 8010922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010926:	2300      	movs	r3, #0
}
 8010928:	4618      	mov	r0, r3
 801092a:	3714      	adds	r7, #20
 801092c:	46bd      	mov	sp, r7
 801092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010932:	4770      	bx	lr
 8010934:	40010000 	.word	0x40010000
 8010938:	40010400 	.word	0x40010400
 801093c:	40000400 	.word	0x40000400
 8010940:	40000800 	.word	0x40000800
 8010944:	40000c00 	.word	0x40000c00
 8010948:	40001800 	.word	0x40001800
 801094c:	40014000 	.word	0x40014000
 8010950:	4000e000 	.word	0x4000e000
 8010954:	4000e400 	.word	0x4000e400

08010958 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010958:	b480      	push	{r7}
 801095a:	b083      	sub	sp, #12
 801095c:	af00      	add	r7, sp, #0
 801095e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010960:	bf00      	nop
 8010962:	370c      	adds	r7, #12
 8010964:	46bd      	mov	sp, r7
 8010966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096a:	4770      	bx	lr

0801096c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801096c:	b480      	push	{r7}
 801096e:	b083      	sub	sp, #12
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010974:	bf00      	nop
 8010976:	370c      	adds	r7, #12
 8010978:	46bd      	mov	sp, r7
 801097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801097e:	4770      	bx	lr

08010980 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010980:	b480      	push	{r7}
 8010982:	b083      	sub	sp, #12
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010988:	bf00      	nop
 801098a:	370c      	adds	r7, #12
 801098c:	46bd      	mov	sp, r7
 801098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010992:	4770      	bx	lr

08010994 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010994:	b580      	push	{r7, lr}
 8010996:	b082      	sub	sp, #8
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d101      	bne.n	80109a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80109a2:	2301      	movs	r3, #1
 80109a4:	e042      	b.n	8010a2c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d106      	bne.n	80109be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	2200      	movs	r2, #0
 80109b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80109b8:	6878      	ldr	r0, [r7, #4]
 80109ba:	f7f2 fd41 	bl	8003440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	2224      	movs	r2, #36	; 0x24
 80109c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	681a      	ldr	r2, [r3, #0]
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	f022 0201 	bic.w	r2, r2, #1
 80109d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80109d6:	6878      	ldr	r0, [r7, #4]
 80109d8:	f000 f82c 	bl	8010a34 <UART_SetConfig>
 80109dc:	4603      	mov	r3, r0
 80109de:	2b01      	cmp	r3, #1
 80109e0:	d101      	bne.n	80109e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80109e2:	2301      	movs	r3, #1
 80109e4:	e022      	b.n	8010a2c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d002      	beq.n	80109f4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80109ee:	6878      	ldr	r0, [r7, #4]
 80109f0:	f000 fe8c 	bl	801170c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	685a      	ldr	r2, [r3, #4]
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010a02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	689a      	ldr	r2, [r3, #8]
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010a12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	681a      	ldr	r2, [r3, #0]
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	f042 0201 	orr.w	r2, r2, #1
 8010a22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010a24:	6878      	ldr	r0, [r7, #4]
 8010a26:	f000 ff13 	bl	8011850 <UART_CheckIdleState>
 8010a2a:	4603      	mov	r3, r0
}
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	3708      	adds	r7, #8
 8010a30:	46bd      	mov	sp, r7
 8010a32:	bd80      	pop	{r7, pc}

08010a34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010a34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010a38:	b092      	sub	sp, #72	; 0x48
 8010a3a:	af00      	add	r7, sp, #0
 8010a3c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010a3e:	2300      	movs	r3, #0
 8010a40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010a44:	697b      	ldr	r3, [r7, #20]
 8010a46:	689a      	ldr	r2, [r3, #8]
 8010a48:	697b      	ldr	r3, [r7, #20]
 8010a4a:	691b      	ldr	r3, [r3, #16]
 8010a4c:	431a      	orrs	r2, r3
 8010a4e:	697b      	ldr	r3, [r7, #20]
 8010a50:	695b      	ldr	r3, [r3, #20]
 8010a52:	431a      	orrs	r2, r3
 8010a54:	697b      	ldr	r3, [r7, #20]
 8010a56:	69db      	ldr	r3, [r3, #28]
 8010a58:	4313      	orrs	r3, r2
 8010a5a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010a5c:	697b      	ldr	r3, [r7, #20]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	681a      	ldr	r2, [r3, #0]
 8010a62:	4bbe      	ldr	r3, [pc, #760]	; (8010d5c <UART_SetConfig+0x328>)
 8010a64:	4013      	ands	r3, r2
 8010a66:	697a      	ldr	r2, [r7, #20]
 8010a68:	6812      	ldr	r2, [r2, #0]
 8010a6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010a6c:	430b      	orrs	r3, r1
 8010a6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010a70:	697b      	ldr	r3, [r7, #20]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	685b      	ldr	r3, [r3, #4]
 8010a76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010a7a:	697b      	ldr	r3, [r7, #20]
 8010a7c:	68da      	ldr	r2, [r3, #12]
 8010a7e:	697b      	ldr	r3, [r7, #20]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	430a      	orrs	r2, r1
 8010a84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010a86:	697b      	ldr	r3, [r7, #20]
 8010a88:	699b      	ldr	r3, [r3, #24]
 8010a8a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010a8c:	697b      	ldr	r3, [r7, #20]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	4ab3      	ldr	r2, [pc, #716]	; (8010d60 <UART_SetConfig+0x32c>)
 8010a92:	4293      	cmp	r3, r2
 8010a94:	d004      	beq.n	8010aa0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010a96:	697b      	ldr	r3, [r7, #20]
 8010a98:	6a1b      	ldr	r3, [r3, #32]
 8010a9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010a9c:	4313      	orrs	r3, r2
 8010a9e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010aa0:	697b      	ldr	r3, [r7, #20]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	689a      	ldr	r2, [r3, #8]
 8010aa6:	4baf      	ldr	r3, [pc, #700]	; (8010d64 <UART_SetConfig+0x330>)
 8010aa8:	4013      	ands	r3, r2
 8010aaa:	697a      	ldr	r2, [r7, #20]
 8010aac:	6812      	ldr	r2, [r2, #0]
 8010aae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010ab0:	430b      	orrs	r3, r1
 8010ab2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010ab4:	697b      	ldr	r3, [r7, #20]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010aba:	f023 010f 	bic.w	r1, r3, #15
 8010abe:	697b      	ldr	r3, [r7, #20]
 8010ac0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ac2:	697b      	ldr	r3, [r7, #20]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	430a      	orrs	r2, r1
 8010ac8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010aca:	697b      	ldr	r3, [r7, #20]
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	4aa6      	ldr	r2, [pc, #664]	; (8010d68 <UART_SetConfig+0x334>)
 8010ad0:	4293      	cmp	r3, r2
 8010ad2:	d177      	bne.n	8010bc4 <UART_SetConfig+0x190>
 8010ad4:	4ba5      	ldr	r3, [pc, #660]	; (8010d6c <UART_SetConfig+0x338>)
 8010ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ad8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010adc:	2b28      	cmp	r3, #40	; 0x28
 8010ade:	d86d      	bhi.n	8010bbc <UART_SetConfig+0x188>
 8010ae0:	a201      	add	r2, pc, #4	; (adr r2, 8010ae8 <UART_SetConfig+0xb4>)
 8010ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ae6:	bf00      	nop
 8010ae8:	08010b8d 	.word	0x08010b8d
 8010aec:	08010bbd 	.word	0x08010bbd
 8010af0:	08010bbd 	.word	0x08010bbd
 8010af4:	08010bbd 	.word	0x08010bbd
 8010af8:	08010bbd 	.word	0x08010bbd
 8010afc:	08010bbd 	.word	0x08010bbd
 8010b00:	08010bbd 	.word	0x08010bbd
 8010b04:	08010bbd 	.word	0x08010bbd
 8010b08:	08010b95 	.word	0x08010b95
 8010b0c:	08010bbd 	.word	0x08010bbd
 8010b10:	08010bbd 	.word	0x08010bbd
 8010b14:	08010bbd 	.word	0x08010bbd
 8010b18:	08010bbd 	.word	0x08010bbd
 8010b1c:	08010bbd 	.word	0x08010bbd
 8010b20:	08010bbd 	.word	0x08010bbd
 8010b24:	08010bbd 	.word	0x08010bbd
 8010b28:	08010b9d 	.word	0x08010b9d
 8010b2c:	08010bbd 	.word	0x08010bbd
 8010b30:	08010bbd 	.word	0x08010bbd
 8010b34:	08010bbd 	.word	0x08010bbd
 8010b38:	08010bbd 	.word	0x08010bbd
 8010b3c:	08010bbd 	.word	0x08010bbd
 8010b40:	08010bbd 	.word	0x08010bbd
 8010b44:	08010bbd 	.word	0x08010bbd
 8010b48:	08010ba5 	.word	0x08010ba5
 8010b4c:	08010bbd 	.word	0x08010bbd
 8010b50:	08010bbd 	.word	0x08010bbd
 8010b54:	08010bbd 	.word	0x08010bbd
 8010b58:	08010bbd 	.word	0x08010bbd
 8010b5c:	08010bbd 	.word	0x08010bbd
 8010b60:	08010bbd 	.word	0x08010bbd
 8010b64:	08010bbd 	.word	0x08010bbd
 8010b68:	08010bad 	.word	0x08010bad
 8010b6c:	08010bbd 	.word	0x08010bbd
 8010b70:	08010bbd 	.word	0x08010bbd
 8010b74:	08010bbd 	.word	0x08010bbd
 8010b78:	08010bbd 	.word	0x08010bbd
 8010b7c:	08010bbd 	.word	0x08010bbd
 8010b80:	08010bbd 	.word	0x08010bbd
 8010b84:	08010bbd 	.word	0x08010bbd
 8010b88:	08010bb5 	.word	0x08010bb5
 8010b8c:	2301      	movs	r3, #1
 8010b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b92:	e326      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010b94:	2304      	movs	r3, #4
 8010b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b9a:	e322      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010b9c:	2308      	movs	r3, #8
 8010b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ba2:	e31e      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010ba4:	2310      	movs	r3, #16
 8010ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010baa:	e31a      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010bac:	2320      	movs	r3, #32
 8010bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bb2:	e316      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010bb4:	2340      	movs	r3, #64	; 0x40
 8010bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bba:	e312      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010bbc:	2380      	movs	r3, #128	; 0x80
 8010bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bc2:	e30e      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010bc4:	697b      	ldr	r3, [r7, #20]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	4a69      	ldr	r2, [pc, #420]	; (8010d70 <UART_SetConfig+0x33c>)
 8010bca:	4293      	cmp	r3, r2
 8010bcc:	d130      	bne.n	8010c30 <UART_SetConfig+0x1fc>
 8010bce:	4b67      	ldr	r3, [pc, #412]	; (8010d6c <UART_SetConfig+0x338>)
 8010bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bd2:	f003 0307 	and.w	r3, r3, #7
 8010bd6:	2b05      	cmp	r3, #5
 8010bd8:	d826      	bhi.n	8010c28 <UART_SetConfig+0x1f4>
 8010bda:	a201      	add	r2, pc, #4	; (adr r2, 8010be0 <UART_SetConfig+0x1ac>)
 8010bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010be0:	08010bf9 	.word	0x08010bf9
 8010be4:	08010c01 	.word	0x08010c01
 8010be8:	08010c09 	.word	0x08010c09
 8010bec:	08010c11 	.word	0x08010c11
 8010bf0:	08010c19 	.word	0x08010c19
 8010bf4:	08010c21 	.word	0x08010c21
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bfe:	e2f0      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010c00:	2304      	movs	r3, #4
 8010c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c06:	e2ec      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010c08:	2308      	movs	r3, #8
 8010c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c0e:	e2e8      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010c10:	2310      	movs	r3, #16
 8010c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c16:	e2e4      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010c18:	2320      	movs	r3, #32
 8010c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c1e:	e2e0      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010c20:	2340      	movs	r3, #64	; 0x40
 8010c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c26:	e2dc      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010c28:	2380      	movs	r3, #128	; 0x80
 8010c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c2e:	e2d8      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010c30:	697b      	ldr	r3, [r7, #20]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	4a4f      	ldr	r2, [pc, #316]	; (8010d74 <UART_SetConfig+0x340>)
 8010c36:	4293      	cmp	r3, r2
 8010c38:	d130      	bne.n	8010c9c <UART_SetConfig+0x268>
 8010c3a:	4b4c      	ldr	r3, [pc, #304]	; (8010d6c <UART_SetConfig+0x338>)
 8010c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c3e:	f003 0307 	and.w	r3, r3, #7
 8010c42:	2b05      	cmp	r3, #5
 8010c44:	d826      	bhi.n	8010c94 <UART_SetConfig+0x260>
 8010c46:	a201      	add	r2, pc, #4	; (adr r2, 8010c4c <UART_SetConfig+0x218>)
 8010c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c4c:	08010c65 	.word	0x08010c65
 8010c50:	08010c6d 	.word	0x08010c6d
 8010c54:	08010c75 	.word	0x08010c75
 8010c58:	08010c7d 	.word	0x08010c7d
 8010c5c:	08010c85 	.word	0x08010c85
 8010c60:	08010c8d 	.word	0x08010c8d
 8010c64:	2300      	movs	r3, #0
 8010c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c6a:	e2ba      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010c6c:	2304      	movs	r3, #4
 8010c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c72:	e2b6      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010c74:	2308      	movs	r3, #8
 8010c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c7a:	e2b2      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010c7c:	2310      	movs	r3, #16
 8010c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c82:	e2ae      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010c84:	2320      	movs	r3, #32
 8010c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c8a:	e2aa      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010c8c:	2340      	movs	r3, #64	; 0x40
 8010c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c92:	e2a6      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010c94:	2380      	movs	r3, #128	; 0x80
 8010c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c9a:	e2a2      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010c9c:	697b      	ldr	r3, [r7, #20]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	4a35      	ldr	r2, [pc, #212]	; (8010d78 <UART_SetConfig+0x344>)
 8010ca2:	4293      	cmp	r3, r2
 8010ca4:	d130      	bne.n	8010d08 <UART_SetConfig+0x2d4>
 8010ca6:	4b31      	ldr	r3, [pc, #196]	; (8010d6c <UART_SetConfig+0x338>)
 8010ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010caa:	f003 0307 	and.w	r3, r3, #7
 8010cae:	2b05      	cmp	r3, #5
 8010cb0:	d826      	bhi.n	8010d00 <UART_SetConfig+0x2cc>
 8010cb2:	a201      	add	r2, pc, #4	; (adr r2, 8010cb8 <UART_SetConfig+0x284>)
 8010cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cb8:	08010cd1 	.word	0x08010cd1
 8010cbc:	08010cd9 	.word	0x08010cd9
 8010cc0:	08010ce1 	.word	0x08010ce1
 8010cc4:	08010ce9 	.word	0x08010ce9
 8010cc8:	08010cf1 	.word	0x08010cf1
 8010ccc:	08010cf9 	.word	0x08010cf9
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cd6:	e284      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010cd8:	2304      	movs	r3, #4
 8010cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cde:	e280      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010ce0:	2308      	movs	r3, #8
 8010ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ce6:	e27c      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010ce8:	2310      	movs	r3, #16
 8010cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cee:	e278      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010cf0:	2320      	movs	r3, #32
 8010cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cf6:	e274      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010cf8:	2340      	movs	r3, #64	; 0x40
 8010cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cfe:	e270      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010d00:	2380      	movs	r3, #128	; 0x80
 8010d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d06:	e26c      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010d08:	697b      	ldr	r3, [r7, #20]
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	4a1b      	ldr	r2, [pc, #108]	; (8010d7c <UART_SetConfig+0x348>)
 8010d0e:	4293      	cmp	r3, r2
 8010d10:	d142      	bne.n	8010d98 <UART_SetConfig+0x364>
 8010d12:	4b16      	ldr	r3, [pc, #88]	; (8010d6c <UART_SetConfig+0x338>)
 8010d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d16:	f003 0307 	and.w	r3, r3, #7
 8010d1a:	2b05      	cmp	r3, #5
 8010d1c:	d838      	bhi.n	8010d90 <UART_SetConfig+0x35c>
 8010d1e:	a201      	add	r2, pc, #4	; (adr r2, 8010d24 <UART_SetConfig+0x2f0>)
 8010d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d24:	08010d3d 	.word	0x08010d3d
 8010d28:	08010d45 	.word	0x08010d45
 8010d2c:	08010d4d 	.word	0x08010d4d
 8010d30:	08010d55 	.word	0x08010d55
 8010d34:	08010d81 	.word	0x08010d81
 8010d38:	08010d89 	.word	0x08010d89
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d42:	e24e      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010d44:	2304      	movs	r3, #4
 8010d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d4a:	e24a      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010d4c:	2308      	movs	r3, #8
 8010d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d52:	e246      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010d54:	2310      	movs	r3, #16
 8010d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d5a:	e242      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010d5c:	cfff69f3 	.word	0xcfff69f3
 8010d60:	58000c00 	.word	0x58000c00
 8010d64:	11fff4ff 	.word	0x11fff4ff
 8010d68:	40011000 	.word	0x40011000
 8010d6c:	58024400 	.word	0x58024400
 8010d70:	40004400 	.word	0x40004400
 8010d74:	40004800 	.word	0x40004800
 8010d78:	40004c00 	.word	0x40004c00
 8010d7c:	40005000 	.word	0x40005000
 8010d80:	2320      	movs	r3, #32
 8010d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d86:	e22c      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010d88:	2340      	movs	r3, #64	; 0x40
 8010d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d8e:	e228      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010d90:	2380      	movs	r3, #128	; 0x80
 8010d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d96:	e224      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010d98:	697b      	ldr	r3, [r7, #20]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	4ab1      	ldr	r2, [pc, #708]	; (8011064 <UART_SetConfig+0x630>)
 8010d9e:	4293      	cmp	r3, r2
 8010da0:	d176      	bne.n	8010e90 <UART_SetConfig+0x45c>
 8010da2:	4bb1      	ldr	r3, [pc, #708]	; (8011068 <UART_SetConfig+0x634>)
 8010da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010da6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010daa:	2b28      	cmp	r3, #40	; 0x28
 8010dac:	d86c      	bhi.n	8010e88 <UART_SetConfig+0x454>
 8010dae:	a201      	add	r2, pc, #4	; (adr r2, 8010db4 <UART_SetConfig+0x380>)
 8010db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010db4:	08010e59 	.word	0x08010e59
 8010db8:	08010e89 	.word	0x08010e89
 8010dbc:	08010e89 	.word	0x08010e89
 8010dc0:	08010e89 	.word	0x08010e89
 8010dc4:	08010e89 	.word	0x08010e89
 8010dc8:	08010e89 	.word	0x08010e89
 8010dcc:	08010e89 	.word	0x08010e89
 8010dd0:	08010e89 	.word	0x08010e89
 8010dd4:	08010e61 	.word	0x08010e61
 8010dd8:	08010e89 	.word	0x08010e89
 8010ddc:	08010e89 	.word	0x08010e89
 8010de0:	08010e89 	.word	0x08010e89
 8010de4:	08010e89 	.word	0x08010e89
 8010de8:	08010e89 	.word	0x08010e89
 8010dec:	08010e89 	.word	0x08010e89
 8010df0:	08010e89 	.word	0x08010e89
 8010df4:	08010e69 	.word	0x08010e69
 8010df8:	08010e89 	.word	0x08010e89
 8010dfc:	08010e89 	.word	0x08010e89
 8010e00:	08010e89 	.word	0x08010e89
 8010e04:	08010e89 	.word	0x08010e89
 8010e08:	08010e89 	.word	0x08010e89
 8010e0c:	08010e89 	.word	0x08010e89
 8010e10:	08010e89 	.word	0x08010e89
 8010e14:	08010e71 	.word	0x08010e71
 8010e18:	08010e89 	.word	0x08010e89
 8010e1c:	08010e89 	.word	0x08010e89
 8010e20:	08010e89 	.word	0x08010e89
 8010e24:	08010e89 	.word	0x08010e89
 8010e28:	08010e89 	.word	0x08010e89
 8010e2c:	08010e89 	.word	0x08010e89
 8010e30:	08010e89 	.word	0x08010e89
 8010e34:	08010e79 	.word	0x08010e79
 8010e38:	08010e89 	.word	0x08010e89
 8010e3c:	08010e89 	.word	0x08010e89
 8010e40:	08010e89 	.word	0x08010e89
 8010e44:	08010e89 	.word	0x08010e89
 8010e48:	08010e89 	.word	0x08010e89
 8010e4c:	08010e89 	.word	0x08010e89
 8010e50:	08010e89 	.word	0x08010e89
 8010e54:	08010e81 	.word	0x08010e81
 8010e58:	2301      	movs	r3, #1
 8010e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e5e:	e1c0      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010e60:	2304      	movs	r3, #4
 8010e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e66:	e1bc      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010e68:	2308      	movs	r3, #8
 8010e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e6e:	e1b8      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010e70:	2310      	movs	r3, #16
 8010e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e76:	e1b4      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010e78:	2320      	movs	r3, #32
 8010e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e7e:	e1b0      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010e80:	2340      	movs	r3, #64	; 0x40
 8010e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e86:	e1ac      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010e88:	2380      	movs	r3, #128	; 0x80
 8010e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e8e:	e1a8      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010e90:	697b      	ldr	r3, [r7, #20]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	4a75      	ldr	r2, [pc, #468]	; (801106c <UART_SetConfig+0x638>)
 8010e96:	4293      	cmp	r3, r2
 8010e98:	d130      	bne.n	8010efc <UART_SetConfig+0x4c8>
 8010e9a:	4b73      	ldr	r3, [pc, #460]	; (8011068 <UART_SetConfig+0x634>)
 8010e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e9e:	f003 0307 	and.w	r3, r3, #7
 8010ea2:	2b05      	cmp	r3, #5
 8010ea4:	d826      	bhi.n	8010ef4 <UART_SetConfig+0x4c0>
 8010ea6:	a201      	add	r2, pc, #4	; (adr r2, 8010eac <UART_SetConfig+0x478>)
 8010ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010eac:	08010ec5 	.word	0x08010ec5
 8010eb0:	08010ecd 	.word	0x08010ecd
 8010eb4:	08010ed5 	.word	0x08010ed5
 8010eb8:	08010edd 	.word	0x08010edd
 8010ebc:	08010ee5 	.word	0x08010ee5
 8010ec0:	08010eed 	.word	0x08010eed
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eca:	e18a      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010ecc:	2304      	movs	r3, #4
 8010ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ed2:	e186      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010ed4:	2308      	movs	r3, #8
 8010ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eda:	e182      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010edc:	2310      	movs	r3, #16
 8010ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ee2:	e17e      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010ee4:	2320      	movs	r3, #32
 8010ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eea:	e17a      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010eec:	2340      	movs	r3, #64	; 0x40
 8010eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ef2:	e176      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010ef4:	2380      	movs	r3, #128	; 0x80
 8010ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010efa:	e172      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010efc:	697b      	ldr	r3, [r7, #20]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	4a5b      	ldr	r2, [pc, #364]	; (8011070 <UART_SetConfig+0x63c>)
 8010f02:	4293      	cmp	r3, r2
 8010f04:	d130      	bne.n	8010f68 <UART_SetConfig+0x534>
 8010f06:	4b58      	ldr	r3, [pc, #352]	; (8011068 <UART_SetConfig+0x634>)
 8010f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f0a:	f003 0307 	and.w	r3, r3, #7
 8010f0e:	2b05      	cmp	r3, #5
 8010f10:	d826      	bhi.n	8010f60 <UART_SetConfig+0x52c>
 8010f12:	a201      	add	r2, pc, #4	; (adr r2, 8010f18 <UART_SetConfig+0x4e4>)
 8010f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f18:	08010f31 	.word	0x08010f31
 8010f1c:	08010f39 	.word	0x08010f39
 8010f20:	08010f41 	.word	0x08010f41
 8010f24:	08010f49 	.word	0x08010f49
 8010f28:	08010f51 	.word	0x08010f51
 8010f2c:	08010f59 	.word	0x08010f59
 8010f30:	2300      	movs	r3, #0
 8010f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f36:	e154      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010f38:	2304      	movs	r3, #4
 8010f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f3e:	e150      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010f40:	2308      	movs	r3, #8
 8010f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f46:	e14c      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010f48:	2310      	movs	r3, #16
 8010f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f4e:	e148      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010f50:	2320      	movs	r3, #32
 8010f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f56:	e144      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010f58:	2340      	movs	r3, #64	; 0x40
 8010f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f5e:	e140      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010f60:	2380      	movs	r3, #128	; 0x80
 8010f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f66:	e13c      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8010f68:	697b      	ldr	r3, [r7, #20]
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	4a41      	ldr	r2, [pc, #260]	; (8011074 <UART_SetConfig+0x640>)
 8010f6e:	4293      	cmp	r3, r2
 8010f70:	f040 8082 	bne.w	8011078 <UART_SetConfig+0x644>
 8010f74:	4b3c      	ldr	r3, [pc, #240]	; (8011068 <UART_SetConfig+0x634>)
 8010f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010f7c:	2b28      	cmp	r3, #40	; 0x28
 8010f7e:	d86d      	bhi.n	801105c <UART_SetConfig+0x628>
 8010f80:	a201      	add	r2, pc, #4	; (adr r2, 8010f88 <UART_SetConfig+0x554>)
 8010f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f86:	bf00      	nop
 8010f88:	0801102d 	.word	0x0801102d
 8010f8c:	0801105d 	.word	0x0801105d
 8010f90:	0801105d 	.word	0x0801105d
 8010f94:	0801105d 	.word	0x0801105d
 8010f98:	0801105d 	.word	0x0801105d
 8010f9c:	0801105d 	.word	0x0801105d
 8010fa0:	0801105d 	.word	0x0801105d
 8010fa4:	0801105d 	.word	0x0801105d
 8010fa8:	08011035 	.word	0x08011035
 8010fac:	0801105d 	.word	0x0801105d
 8010fb0:	0801105d 	.word	0x0801105d
 8010fb4:	0801105d 	.word	0x0801105d
 8010fb8:	0801105d 	.word	0x0801105d
 8010fbc:	0801105d 	.word	0x0801105d
 8010fc0:	0801105d 	.word	0x0801105d
 8010fc4:	0801105d 	.word	0x0801105d
 8010fc8:	0801103d 	.word	0x0801103d
 8010fcc:	0801105d 	.word	0x0801105d
 8010fd0:	0801105d 	.word	0x0801105d
 8010fd4:	0801105d 	.word	0x0801105d
 8010fd8:	0801105d 	.word	0x0801105d
 8010fdc:	0801105d 	.word	0x0801105d
 8010fe0:	0801105d 	.word	0x0801105d
 8010fe4:	0801105d 	.word	0x0801105d
 8010fe8:	08011045 	.word	0x08011045
 8010fec:	0801105d 	.word	0x0801105d
 8010ff0:	0801105d 	.word	0x0801105d
 8010ff4:	0801105d 	.word	0x0801105d
 8010ff8:	0801105d 	.word	0x0801105d
 8010ffc:	0801105d 	.word	0x0801105d
 8011000:	0801105d 	.word	0x0801105d
 8011004:	0801105d 	.word	0x0801105d
 8011008:	0801104d 	.word	0x0801104d
 801100c:	0801105d 	.word	0x0801105d
 8011010:	0801105d 	.word	0x0801105d
 8011014:	0801105d 	.word	0x0801105d
 8011018:	0801105d 	.word	0x0801105d
 801101c:	0801105d 	.word	0x0801105d
 8011020:	0801105d 	.word	0x0801105d
 8011024:	0801105d 	.word	0x0801105d
 8011028:	08011055 	.word	0x08011055
 801102c:	2301      	movs	r3, #1
 801102e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011032:	e0d6      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8011034:	2304      	movs	r3, #4
 8011036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801103a:	e0d2      	b.n	80111e2 <UART_SetConfig+0x7ae>
 801103c:	2308      	movs	r3, #8
 801103e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011042:	e0ce      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8011044:	2310      	movs	r3, #16
 8011046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801104a:	e0ca      	b.n	80111e2 <UART_SetConfig+0x7ae>
 801104c:	2320      	movs	r3, #32
 801104e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011052:	e0c6      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8011054:	2340      	movs	r3, #64	; 0x40
 8011056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801105a:	e0c2      	b.n	80111e2 <UART_SetConfig+0x7ae>
 801105c:	2380      	movs	r3, #128	; 0x80
 801105e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011062:	e0be      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8011064:	40011400 	.word	0x40011400
 8011068:	58024400 	.word	0x58024400
 801106c:	40007800 	.word	0x40007800
 8011070:	40007c00 	.word	0x40007c00
 8011074:	40011800 	.word	0x40011800
 8011078:	697b      	ldr	r3, [r7, #20]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	4aad      	ldr	r2, [pc, #692]	; (8011334 <UART_SetConfig+0x900>)
 801107e:	4293      	cmp	r3, r2
 8011080:	d176      	bne.n	8011170 <UART_SetConfig+0x73c>
 8011082:	4bad      	ldr	r3, [pc, #692]	; (8011338 <UART_SetConfig+0x904>)
 8011084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011086:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801108a:	2b28      	cmp	r3, #40	; 0x28
 801108c:	d86c      	bhi.n	8011168 <UART_SetConfig+0x734>
 801108e:	a201      	add	r2, pc, #4	; (adr r2, 8011094 <UART_SetConfig+0x660>)
 8011090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011094:	08011139 	.word	0x08011139
 8011098:	08011169 	.word	0x08011169
 801109c:	08011169 	.word	0x08011169
 80110a0:	08011169 	.word	0x08011169
 80110a4:	08011169 	.word	0x08011169
 80110a8:	08011169 	.word	0x08011169
 80110ac:	08011169 	.word	0x08011169
 80110b0:	08011169 	.word	0x08011169
 80110b4:	08011141 	.word	0x08011141
 80110b8:	08011169 	.word	0x08011169
 80110bc:	08011169 	.word	0x08011169
 80110c0:	08011169 	.word	0x08011169
 80110c4:	08011169 	.word	0x08011169
 80110c8:	08011169 	.word	0x08011169
 80110cc:	08011169 	.word	0x08011169
 80110d0:	08011169 	.word	0x08011169
 80110d4:	08011149 	.word	0x08011149
 80110d8:	08011169 	.word	0x08011169
 80110dc:	08011169 	.word	0x08011169
 80110e0:	08011169 	.word	0x08011169
 80110e4:	08011169 	.word	0x08011169
 80110e8:	08011169 	.word	0x08011169
 80110ec:	08011169 	.word	0x08011169
 80110f0:	08011169 	.word	0x08011169
 80110f4:	08011151 	.word	0x08011151
 80110f8:	08011169 	.word	0x08011169
 80110fc:	08011169 	.word	0x08011169
 8011100:	08011169 	.word	0x08011169
 8011104:	08011169 	.word	0x08011169
 8011108:	08011169 	.word	0x08011169
 801110c:	08011169 	.word	0x08011169
 8011110:	08011169 	.word	0x08011169
 8011114:	08011159 	.word	0x08011159
 8011118:	08011169 	.word	0x08011169
 801111c:	08011169 	.word	0x08011169
 8011120:	08011169 	.word	0x08011169
 8011124:	08011169 	.word	0x08011169
 8011128:	08011169 	.word	0x08011169
 801112c:	08011169 	.word	0x08011169
 8011130:	08011169 	.word	0x08011169
 8011134:	08011161 	.word	0x08011161
 8011138:	2301      	movs	r3, #1
 801113a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801113e:	e050      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8011140:	2304      	movs	r3, #4
 8011142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011146:	e04c      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8011148:	2308      	movs	r3, #8
 801114a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801114e:	e048      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8011150:	2310      	movs	r3, #16
 8011152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011156:	e044      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8011158:	2320      	movs	r3, #32
 801115a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801115e:	e040      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8011160:	2340      	movs	r3, #64	; 0x40
 8011162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011166:	e03c      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8011168:	2380      	movs	r3, #128	; 0x80
 801116a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801116e:	e038      	b.n	80111e2 <UART_SetConfig+0x7ae>
 8011170:	697b      	ldr	r3, [r7, #20]
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	4a71      	ldr	r2, [pc, #452]	; (801133c <UART_SetConfig+0x908>)
 8011176:	4293      	cmp	r3, r2
 8011178:	d130      	bne.n	80111dc <UART_SetConfig+0x7a8>
 801117a:	4b6f      	ldr	r3, [pc, #444]	; (8011338 <UART_SetConfig+0x904>)
 801117c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801117e:	f003 0307 	and.w	r3, r3, #7
 8011182:	2b05      	cmp	r3, #5
 8011184:	d826      	bhi.n	80111d4 <UART_SetConfig+0x7a0>
 8011186:	a201      	add	r2, pc, #4	; (adr r2, 801118c <UART_SetConfig+0x758>)
 8011188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801118c:	080111a5 	.word	0x080111a5
 8011190:	080111ad 	.word	0x080111ad
 8011194:	080111b5 	.word	0x080111b5
 8011198:	080111bd 	.word	0x080111bd
 801119c:	080111c5 	.word	0x080111c5
 80111a0:	080111cd 	.word	0x080111cd
 80111a4:	2302      	movs	r3, #2
 80111a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111aa:	e01a      	b.n	80111e2 <UART_SetConfig+0x7ae>
 80111ac:	2304      	movs	r3, #4
 80111ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111b2:	e016      	b.n	80111e2 <UART_SetConfig+0x7ae>
 80111b4:	2308      	movs	r3, #8
 80111b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ba:	e012      	b.n	80111e2 <UART_SetConfig+0x7ae>
 80111bc:	2310      	movs	r3, #16
 80111be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111c2:	e00e      	b.n	80111e2 <UART_SetConfig+0x7ae>
 80111c4:	2320      	movs	r3, #32
 80111c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ca:	e00a      	b.n	80111e2 <UART_SetConfig+0x7ae>
 80111cc:	2340      	movs	r3, #64	; 0x40
 80111ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111d2:	e006      	b.n	80111e2 <UART_SetConfig+0x7ae>
 80111d4:	2380      	movs	r3, #128	; 0x80
 80111d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111da:	e002      	b.n	80111e2 <UART_SetConfig+0x7ae>
 80111dc:	2380      	movs	r3, #128	; 0x80
 80111de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80111e2:	697b      	ldr	r3, [r7, #20]
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	4a55      	ldr	r2, [pc, #340]	; (801133c <UART_SetConfig+0x908>)
 80111e8:	4293      	cmp	r3, r2
 80111ea:	f040 80f8 	bne.w	80113de <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80111ee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80111f2:	2b20      	cmp	r3, #32
 80111f4:	dc46      	bgt.n	8011284 <UART_SetConfig+0x850>
 80111f6:	2b02      	cmp	r3, #2
 80111f8:	db75      	blt.n	80112e6 <UART_SetConfig+0x8b2>
 80111fa:	3b02      	subs	r3, #2
 80111fc:	2b1e      	cmp	r3, #30
 80111fe:	d872      	bhi.n	80112e6 <UART_SetConfig+0x8b2>
 8011200:	a201      	add	r2, pc, #4	; (adr r2, 8011208 <UART_SetConfig+0x7d4>)
 8011202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011206:	bf00      	nop
 8011208:	0801128b 	.word	0x0801128b
 801120c:	080112e7 	.word	0x080112e7
 8011210:	08011293 	.word	0x08011293
 8011214:	080112e7 	.word	0x080112e7
 8011218:	080112e7 	.word	0x080112e7
 801121c:	080112e7 	.word	0x080112e7
 8011220:	080112a3 	.word	0x080112a3
 8011224:	080112e7 	.word	0x080112e7
 8011228:	080112e7 	.word	0x080112e7
 801122c:	080112e7 	.word	0x080112e7
 8011230:	080112e7 	.word	0x080112e7
 8011234:	080112e7 	.word	0x080112e7
 8011238:	080112e7 	.word	0x080112e7
 801123c:	080112e7 	.word	0x080112e7
 8011240:	080112b3 	.word	0x080112b3
 8011244:	080112e7 	.word	0x080112e7
 8011248:	080112e7 	.word	0x080112e7
 801124c:	080112e7 	.word	0x080112e7
 8011250:	080112e7 	.word	0x080112e7
 8011254:	080112e7 	.word	0x080112e7
 8011258:	080112e7 	.word	0x080112e7
 801125c:	080112e7 	.word	0x080112e7
 8011260:	080112e7 	.word	0x080112e7
 8011264:	080112e7 	.word	0x080112e7
 8011268:	080112e7 	.word	0x080112e7
 801126c:	080112e7 	.word	0x080112e7
 8011270:	080112e7 	.word	0x080112e7
 8011274:	080112e7 	.word	0x080112e7
 8011278:	080112e7 	.word	0x080112e7
 801127c:	080112e7 	.word	0x080112e7
 8011280:	080112d9 	.word	0x080112d9
 8011284:	2b40      	cmp	r3, #64	; 0x40
 8011286:	d02a      	beq.n	80112de <UART_SetConfig+0x8aa>
 8011288:	e02d      	b.n	80112e6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801128a:	f7fb f8c3 	bl	800c414 <HAL_RCCEx_GetD3PCLK1Freq>
 801128e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011290:	e02f      	b.n	80112f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011296:	4618      	mov	r0, r3
 8011298:	f7fb f8d2 	bl	800c440 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801129c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801129e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112a0:	e027      	b.n	80112f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80112a2:	f107 0318 	add.w	r3, r7, #24
 80112a6:	4618      	mov	r0, r3
 80112a8:	f7fb fa1e 	bl	800c6e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80112ac:	69fb      	ldr	r3, [r7, #28]
 80112ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112b0:	e01f      	b.n	80112f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80112b2:	4b21      	ldr	r3, [pc, #132]	; (8011338 <UART_SetConfig+0x904>)
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	f003 0320 	and.w	r3, r3, #32
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d009      	beq.n	80112d2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80112be:	4b1e      	ldr	r3, [pc, #120]	; (8011338 <UART_SetConfig+0x904>)
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	08db      	lsrs	r3, r3, #3
 80112c4:	f003 0303 	and.w	r3, r3, #3
 80112c8:	4a1d      	ldr	r2, [pc, #116]	; (8011340 <UART_SetConfig+0x90c>)
 80112ca:	fa22 f303 	lsr.w	r3, r2, r3
 80112ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80112d0:	e00f      	b.n	80112f2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80112d2:	4b1b      	ldr	r3, [pc, #108]	; (8011340 <UART_SetConfig+0x90c>)
 80112d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112d6:	e00c      	b.n	80112f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80112d8:	4b1a      	ldr	r3, [pc, #104]	; (8011344 <UART_SetConfig+0x910>)
 80112da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112dc:	e009      	b.n	80112f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80112de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80112e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112e4:	e005      	b.n	80112f2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80112e6:	2300      	movs	r3, #0
 80112e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80112ea:	2301      	movs	r3, #1
 80112ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80112f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80112f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	f000 81ee 	beq.w	80116d6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80112fa:	697b      	ldr	r3, [r7, #20]
 80112fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112fe:	4a12      	ldr	r2, [pc, #72]	; (8011348 <UART_SetConfig+0x914>)
 8011300:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011304:	461a      	mov	r2, r3
 8011306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011308:	fbb3 f3f2 	udiv	r3, r3, r2
 801130c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801130e:	697b      	ldr	r3, [r7, #20]
 8011310:	685a      	ldr	r2, [r3, #4]
 8011312:	4613      	mov	r3, r2
 8011314:	005b      	lsls	r3, r3, #1
 8011316:	4413      	add	r3, r2
 8011318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801131a:	429a      	cmp	r2, r3
 801131c:	d305      	bcc.n	801132a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801131e:	697b      	ldr	r3, [r7, #20]
 8011320:	685b      	ldr	r3, [r3, #4]
 8011322:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011326:	429a      	cmp	r2, r3
 8011328:	d910      	bls.n	801134c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 801132a:	2301      	movs	r3, #1
 801132c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011330:	e1d1      	b.n	80116d6 <UART_SetConfig+0xca2>
 8011332:	bf00      	nop
 8011334:	40011c00 	.word	0x40011c00
 8011338:	58024400 	.word	0x58024400
 801133c:	58000c00 	.word	0x58000c00
 8011340:	03d09000 	.word	0x03d09000
 8011344:	003d0900 	.word	0x003d0900
 8011348:	080183b8 	.word	0x080183b8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801134c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801134e:	2200      	movs	r2, #0
 8011350:	60bb      	str	r3, [r7, #8]
 8011352:	60fa      	str	r2, [r7, #12]
 8011354:	697b      	ldr	r3, [r7, #20]
 8011356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011358:	4ac0      	ldr	r2, [pc, #768]	; (801165c <UART_SetConfig+0xc28>)
 801135a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801135e:	b29b      	uxth	r3, r3
 8011360:	2200      	movs	r2, #0
 8011362:	603b      	str	r3, [r7, #0]
 8011364:	607a      	str	r2, [r7, #4]
 8011366:	e9d7 2300 	ldrd	r2, r3, [r7]
 801136a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801136e:	f7ef f837 	bl	80003e0 <__aeabi_uldivmod>
 8011372:	4602      	mov	r2, r0
 8011374:	460b      	mov	r3, r1
 8011376:	4610      	mov	r0, r2
 8011378:	4619      	mov	r1, r3
 801137a:	f04f 0200 	mov.w	r2, #0
 801137e:	f04f 0300 	mov.w	r3, #0
 8011382:	020b      	lsls	r3, r1, #8
 8011384:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011388:	0202      	lsls	r2, r0, #8
 801138a:	6979      	ldr	r1, [r7, #20]
 801138c:	6849      	ldr	r1, [r1, #4]
 801138e:	0849      	lsrs	r1, r1, #1
 8011390:	2000      	movs	r0, #0
 8011392:	460c      	mov	r4, r1
 8011394:	4605      	mov	r5, r0
 8011396:	eb12 0804 	adds.w	r8, r2, r4
 801139a:	eb43 0905 	adc.w	r9, r3, r5
 801139e:	697b      	ldr	r3, [r7, #20]
 80113a0:	685b      	ldr	r3, [r3, #4]
 80113a2:	2200      	movs	r2, #0
 80113a4:	469a      	mov	sl, r3
 80113a6:	4693      	mov	fp, r2
 80113a8:	4652      	mov	r2, sl
 80113aa:	465b      	mov	r3, fp
 80113ac:	4640      	mov	r0, r8
 80113ae:	4649      	mov	r1, r9
 80113b0:	f7ef f816 	bl	80003e0 <__aeabi_uldivmod>
 80113b4:	4602      	mov	r2, r0
 80113b6:	460b      	mov	r3, r1
 80113b8:	4613      	mov	r3, r2
 80113ba:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80113bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80113c2:	d308      	bcc.n	80113d6 <UART_SetConfig+0x9a2>
 80113c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80113ca:	d204      	bcs.n	80113d6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80113cc:	697b      	ldr	r3, [r7, #20]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80113d2:	60da      	str	r2, [r3, #12]
 80113d4:	e17f      	b.n	80116d6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80113d6:	2301      	movs	r3, #1
 80113d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80113dc:	e17b      	b.n	80116d6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80113de:	697b      	ldr	r3, [r7, #20]
 80113e0:	69db      	ldr	r3, [r3, #28]
 80113e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80113e6:	f040 80bd 	bne.w	8011564 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80113ea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80113ee:	2b20      	cmp	r3, #32
 80113f0:	dc48      	bgt.n	8011484 <UART_SetConfig+0xa50>
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	db7b      	blt.n	80114ee <UART_SetConfig+0xaba>
 80113f6:	2b20      	cmp	r3, #32
 80113f8:	d879      	bhi.n	80114ee <UART_SetConfig+0xaba>
 80113fa:	a201      	add	r2, pc, #4	; (adr r2, 8011400 <UART_SetConfig+0x9cc>)
 80113fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011400:	0801148b 	.word	0x0801148b
 8011404:	08011493 	.word	0x08011493
 8011408:	080114ef 	.word	0x080114ef
 801140c:	080114ef 	.word	0x080114ef
 8011410:	0801149b 	.word	0x0801149b
 8011414:	080114ef 	.word	0x080114ef
 8011418:	080114ef 	.word	0x080114ef
 801141c:	080114ef 	.word	0x080114ef
 8011420:	080114ab 	.word	0x080114ab
 8011424:	080114ef 	.word	0x080114ef
 8011428:	080114ef 	.word	0x080114ef
 801142c:	080114ef 	.word	0x080114ef
 8011430:	080114ef 	.word	0x080114ef
 8011434:	080114ef 	.word	0x080114ef
 8011438:	080114ef 	.word	0x080114ef
 801143c:	080114ef 	.word	0x080114ef
 8011440:	080114bb 	.word	0x080114bb
 8011444:	080114ef 	.word	0x080114ef
 8011448:	080114ef 	.word	0x080114ef
 801144c:	080114ef 	.word	0x080114ef
 8011450:	080114ef 	.word	0x080114ef
 8011454:	080114ef 	.word	0x080114ef
 8011458:	080114ef 	.word	0x080114ef
 801145c:	080114ef 	.word	0x080114ef
 8011460:	080114ef 	.word	0x080114ef
 8011464:	080114ef 	.word	0x080114ef
 8011468:	080114ef 	.word	0x080114ef
 801146c:	080114ef 	.word	0x080114ef
 8011470:	080114ef 	.word	0x080114ef
 8011474:	080114ef 	.word	0x080114ef
 8011478:	080114ef 	.word	0x080114ef
 801147c:	080114ef 	.word	0x080114ef
 8011480:	080114e1 	.word	0x080114e1
 8011484:	2b40      	cmp	r3, #64	; 0x40
 8011486:	d02e      	beq.n	80114e6 <UART_SetConfig+0xab2>
 8011488:	e031      	b.n	80114ee <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801148a:	f7f9 f925 	bl	800a6d8 <HAL_RCC_GetPCLK1Freq>
 801148e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011490:	e033      	b.n	80114fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011492:	f7f9 f937 	bl	800a704 <HAL_RCC_GetPCLK2Freq>
 8011496:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011498:	e02f      	b.n	80114fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801149a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801149e:	4618      	mov	r0, r3
 80114a0:	f7fa ffce 	bl	800c440 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80114a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114a8:	e027      	b.n	80114fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80114aa:	f107 0318 	add.w	r3, r7, #24
 80114ae:	4618      	mov	r0, r3
 80114b0:	f7fb f91a 	bl	800c6e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80114b4:	69fb      	ldr	r3, [r7, #28]
 80114b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114b8:	e01f      	b.n	80114fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80114ba:	4b69      	ldr	r3, [pc, #420]	; (8011660 <UART_SetConfig+0xc2c>)
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	f003 0320 	and.w	r3, r3, #32
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d009      	beq.n	80114da <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80114c6:	4b66      	ldr	r3, [pc, #408]	; (8011660 <UART_SetConfig+0xc2c>)
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	08db      	lsrs	r3, r3, #3
 80114cc:	f003 0303 	and.w	r3, r3, #3
 80114d0:	4a64      	ldr	r2, [pc, #400]	; (8011664 <UART_SetConfig+0xc30>)
 80114d2:	fa22 f303 	lsr.w	r3, r2, r3
 80114d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80114d8:	e00f      	b.n	80114fa <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80114da:	4b62      	ldr	r3, [pc, #392]	; (8011664 <UART_SetConfig+0xc30>)
 80114dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114de:	e00c      	b.n	80114fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80114e0:	4b61      	ldr	r3, [pc, #388]	; (8011668 <UART_SetConfig+0xc34>)
 80114e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114e4:	e009      	b.n	80114fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80114e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80114ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114ec:	e005      	b.n	80114fa <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80114ee:	2300      	movs	r3, #0
 80114f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80114f2:	2301      	movs	r3, #1
 80114f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80114f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80114fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	f000 80ea 	beq.w	80116d6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011502:	697b      	ldr	r3, [r7, #20]
 8011504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011506:	4a55      	ldr	r2, [pc, #340]	; (801165c <UART_SetConfig+0xc28>)
 8011508:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801150c:	461a      	mov	r2, r3
 801150e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011510:	fbb3 f3f2 	udiv	r3, r3, r2
 8011514:	005a      	lsls	r2, r3, #1
 8011516:	697b      	ldr	r3, [r7, #20]
 8011518:	685b      	ldr	r3, [r3, #4]
 801151a:	085b      	lsrs	r3, r3, #1
 801151c:	441a      	add	r2, r3
 801151e:	697b      	ldr	r3, [r7, #20]
 8011520:	685b      	ldr	r3, [r3, #4]
 8011522:	fbb2 f3f3 	udiv	r3, r2, r3
 8011526:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801152a:	2b0f      	cmp	r3, #15
 801152c:	d916      	bls.n	801155c <UART_SetConfig+0xb28>
 801152e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011534:	d212      	bcs.n	801155c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011538:	b29b      	uxth	r3, r3
 801153a:	f023 030f 	bic.w	r3, r3, #15
 801153e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011542:	085b      	lsrs	r3, r3, #1
 8011544:	b29b      	uxth	r3, r3
 8011546:	f003 0307 	and.w	r3, r3, #7
 801154a:	b29a      	uxth	r2, r3
 801154c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801154e:	4313      	orrs	r3, r2
 8011550:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011552:	697b      	ldr	r3, [r7, #20]
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011558:	60da      	str	r2, [r3, #12]
 801155a:	e0bc      	b.n	80116d6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 801155c:	2301      	movs	r3, #1
 801155e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011562:	e0b8      	b.n	80116d6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011564:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011568:	2b20      	cmp	r3, #32
 801156a:	dc4b      	bgt.n	8011604 <UART_SetConfig+0xbd0>
 801156c:	2b00      	cmp	r3, #0
 801156e:	f2c0 8087 	blt.w	8011680 <UART_SetConfig+0xc4c>
 8011572:	2b20      	cmp	r3, #32
 8011574:	f200 8084 	bhi.w	8011680 <UART_SetConfig+0xc4c>
 8011578:	a201      	add	r2, pc, #4	; (adr r2, 8011580 <UART_SetConfig+0xb4c>)
 801157a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801157e:	bf00      	nop
 8011580:	0801160b 	.word	0x0801160b
 8011584:	08011613 	.word	0x08011613
 8011588:	08011681 	.word	0x08011681
 801158c:	08011681 	.word	0x08011681
 8011590:	0801161b 	.word	0x0801161b
 8011594:	08011681 	.word	0x08011681
 8011598:	08011681 	.word	0x08011681
 801159c:	08011681 	.word	0x08011681
 80115a0:	0801162b 	.word	0x0801162b
 80115a4:	08011681 	.word	0x08011681
 80115a8:	08011681 	.word	0x08011681
 80115ac:	08011681 	.word	0x08011681
 80115b0:	08011681 	.word	0x08011681
 80115b4:	08011681 	.word	0x08011681
 80115b8:	08011681 	.word	0x08011681
 80115bc:	08011681 	.word	0x08011681
 80115c0:	0801163b 	.word	0x0801163b
 80115c4:	08011681 	.word	0x08011681
 80115c8:	08011681 	.word	0x08011681
 80115cc:	08011681 	.word	0x08011681
 80115d0:	08011681 	.word	0x08011681
 80115d4:	08011681 	.word	0x08011681
 80115d8:	08011681 	.word	0x08011681
 80115dc:	08011681 	.word	0x08011681
 80115e0:	08011681 	.word	0x08011681
 80115e4:	08011681 	.word	0x08011681
 80115e8:	08011681 	.word	0x08011681
 80115ec:	08011681 	.word	0x08011681
 80115f0:	08011681 	.word	0x08011681
 80115f4:	08011681 	.word	0x08011681
 80115f8:	08011681 	.word	0x08011681
 80115fc:	08011681 	.word	0x08011681
 8011600:	08011673 	.word	0x08011673
 8011604:	2b40      	cmp	r3, #64	; 0x40
 8011606:	d037      	beq.n	8011678 <UART_SetConfig+0xc44>
 8011608:	e03a      	b.n	8011680 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801160a:	f7f9 f865 	bl	800a6d8 <HAL_RCC_GetPCLK1Freq>
 801160e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011610:	e03c      	b.n	801168c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011612:	f7f9 f877 	bl	800a704 <HAL_RCC_GetPCLK2Freq>
 8011616:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011618:	e038      	b.n	801168c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801161a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801161e:	4618      	mov	r0, r3
 8011620:	f7fa ff0e 	bl	800c440 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011626:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011628:	e030      	b.n	801168c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801162a:	f107 0318 	add.w	r3, r7, #24
 801162e:	4618      	mov	r0, r3
 8011630:	f7fb f85a 	bl	800c6e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011634:	69fb      	ldr	r3, [r7, #28]
 8011636:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011638:	e028      	b.n	801168c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801163a:	4b09      	ldr	r3, [pc, #36]	; (8011660 <UART_SetConfig+0xc2c>)
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	f003 0320 	and.w	r3, r3, #32
 8011642:	2b00      	cmp	r3, #0
 8011644:	d012      	beq.n	801166c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011646:	4b06      	ldr	r3, [pc, #24]	; (8011660 <UART_SetConfig+0xc2c>)
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	08db      	lsrs	r3, r3, #3
 801164c:	f003 0303 	and.w	r3, r3, #3
 8011650:	4a04      	ldr	r2, [pc, #16]	; (8011664 <UART_SetConfig+0xc30>)
 8011652:	fa22 f303 	lsr.w	r3, r2, r3
 8011656:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011658:	e018      	b.n	801168c <UART_SetConfig+0xc58>
 801165a:	bf00      	nop
 801165c:	080183b8 	.word	0x080183b8
 8011660:	58024400 	.word	0x58024400
 8011664:	03d09000 	.word	0x03d09000
 8011668:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 801166c:	4b24      	ldr	r3, [pc, #144]	; (8011700 <UART_SetConfig+0xccc>)
 801166e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011670:	e00c      	b.n	801168c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011672:	4b24      	ldr	r3, [pc, #144]	; (8011704 <UART_SetConfig+0xcd0>)
 8011674:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011676:	e009      	b.n	801168c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011678:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801167c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801167e:	e005      	b.n	801168c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8011680:	2300      	movs	r3, #0
 8011682:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011684:	2301      	movs	r3, #1
 8011686:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801168a:	bf00      	nop
    }

    if (pclk != 0U)
 801168c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801168e:	2b00      	cmp	r3, #0
 8011690:	d021      	beq.n	80116d6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011692:	697b      	ldr	r3, [r7, #20]
 8011694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011696:	4a1c      	ldr	r2, [pc, #112]	; (8011708 <UART_SetConfig+0xcd4>)
 8011698:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801169c:	461a      	mov	r2, r3
 801169e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116a0:	fbb3 f2f2 	udiv	r2, r3, r2
 80116a4:	697b      	ldr	r3, [r7, #20]
 80116a6:	685b      	ldr	r3, [r3, #4]
 80116a8:	085b      	lsrs	r3, r3, #1
 80116aa:	441a      	add	r2, r3
 80116ac:	697b      	ldr	r3, [r7, #20]
 80116ae:	685b      	ldr	r3, [r3, #4]
 80116b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80116b4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80116b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116b8:	2b0f      	cmp	r3, #15
 80116ba:	d909      	bls.n	80116d0 <UART_SetConfig+0xc9c>
 80116bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80116c2:	d205      	bcs.n	80116d0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80116c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116c6:	b29a      	uxth	r2, r3
 80116c8:	697b      	ldr	r3, [r7, #20]
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	60da      	str	r2, [r3, #12]
 80116ce:	e002      	b.n	80116d6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80116d0:	2301      	movs	r3, #1
 80116d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80116d6:	697b      	ldr	r3, [r7, #20]
 80116d8:	2201      	movs	r2, #1
 80116da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80116de:	697b      	ldr	r3, [r7, #20]
 80116e0:	2201      	movs	r2, #1
 80116e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80116e6:	697b      	ldr	r3, [r7, #20]
 80116e8:	2200      	movs	r2, #0
 80116ea:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80116ec:	697b      	ldr	r3, [r7, #20]
 80116ee:	2200      	movs	r2, #0
 80116f0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80116f2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80116f6:	4618      	mov	r0, r3
 80116f8:	3748      	adds	r7, #72	; 0x48
 80116fa:	46bd      	mov	sp, r7
 80116fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011700:	03d09000 	.word	0x03d09000
 8011704:	003d0900 	.word	0x003d0900
 8011708:	080183b8 	.word	0x080183b8

0801170c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801170c:	b480      	push	{r7}
 801170e:	b083      	sub	sp, #12
 8011710:	af00      	add	r7, sp, #0
 8011712:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011718:	f003 0301 	and.w	r3, r3, #1
 801171c:	2b00      	cmp	r3, #0
 801171e:	d00a      	beq.n	8011736 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	685b      	ldr	r3, [r3, #4]
 8011726:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	430a      	orrs	r2, r1
 8011734:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801173a:	f003 0302 	and.w	r3, r3, #2
 801173e:	2b00      	cmp	r3, #0
 8011740:	d00a      	beq.n	8011758 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	685b      	ldr	r3, [r3, #4]
 8011748:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	430a      	orrs	r2, r1
 8011756:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801175c:	f003 0304 	and.w	r3, r3, #4
 8011760:	2b00      	cmp	r3, #0
 8011762:	d00a      	beq.n	801177a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	685b      	ldr	r3, [r3, #4]
 801176a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	430a      	orrs	r2, r1
 8011778:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801177e:	f003 0308 	and.w	r3, r3, #8
 8011782:	2b00      	cmp	r3, #0
 8011784:	d00a      	beq.n	801179c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	685b      	ldr	r3, [r3, #4]
 801178c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	430a      	orrs	r2, r1
 801179a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117a0:	f003 0310 	and.w	r3, r3, #16
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d00a      	beq.n	80117be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	689b      	ldr	r3, [r3, #8]
 80117ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	430a      	orrs	r2, r1
 80117bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117c2:	f003 0320 	and.w	r3, r3, #32
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d00a      	beq.n	80117e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	689b      	ldr	r3, [r3, #8]
 80117d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	430a      	orrs	r2, r1
 80117de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d01a      	beq.n	8011822 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	685b      	ldr	r3, [r3, #4]
 80117f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	430a      	orrs	r2, r1
 8011800:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011806:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801180a:	d10a      	bne.n	8011822 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	685b      	ldr	r3, [r3, #4]
 8011812:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	430a      	orrs	r2, r1
 8011820:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801182a:	2b00      	cmp	r3, #0
 801182c:	d00a      	beq.n	8011844 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	685b      	ldr	r3, [r3, #4]
 8011834:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	430a      	orrs	r2, r1
 8011842:	605a      	str	r2, [r3, #4]
  }
}
 8011844:	bf00      	nop
 8011846:	370c      	adds	r7, #12
 8011848:	46bd      	mov	sp, r7
 801184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184e:	4770      	bx	lr

08011850 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011850:	b580      	push	{r7, lr}
 8011852:	b098      	sub	sp, #96	; 0x60
 8011854:	af02      	add	r7, sp, #8
 8011856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	2200      	movs	r2, #0
 801185c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011860:	f7f2 f894 	bl	800398c <HAL_GetTick>
 8011864:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	f003 0308 	and.w	r3, r3, #8
 8011870:	2b08      	cmp	r3, #8
 8011872:	d12f      	bne.n	80118d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011874:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011878:	9300      	str	r3, [sp, #0]
 801187a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801187c:	2200      	movs	r2, #0
 801187e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011882:	6878      	ldr	r0, [r7, #4]
 8011884:	f000 f88e 	bl	80119a4 <UART_WaitOnFlagUntilTimeout>
 8011888:	4603      	mov	r3, r0
 801188a:	2b00      	cmp	r3, #0
 801188c:	d022      	beq.n	80118d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011896:	e853 3f00 	ldrex	r3, [r3]
 801189a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801189c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801189e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80118a2:	653b      	str	r3, [r7, #80]	; 0x50
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	461a      	mov	r2, r3
 80118aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118ac:	647b      	str	r3, [r7, #68]	; 0x44
 80118ae:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80118b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80118b4:	e841 2300 	strex	r3, r2, [r1]
 80118b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80118ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d1e6      	bne.n	801188e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	2220      	movs	r2, #32
 80118c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	2200      	movs	r2, #0
 80118cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80118d0:	2303      	movs	r3, #3
 80118d2:	e063      	b.n	801199c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	f003 0304 	and.w	r3, r3, #4
 80118de:	2b04      	cmp	r3, #4
 80118e0:	d149      	bne.n	8011976 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80118e2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80118e6:	9300      	str	r3, [sp, #0]
 80118e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80118ea:	2200      	movs	r2, #0
 80118ec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80118f0:	6878      	ldr	r0, [r7, #4]
 80118f2:	f000 f857 	bl	80119a4 <UART_WaitOnFlagUntilTimeout>
 80118f6:	4603      	mov	r3, r0
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d03c      	beq.n	8011976 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011904:	e853 3f00 	ldrex	r3, [r3]
 8011908:	623b      	str	r3, [r7, #32]
   return(result);
 801190a:	6a3b      	ldr	r3, [r7, #32]
 801190c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011910:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	461a      	mov	r2, r3
 8011918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801191a:	633b      	str	r3, [r7, #48]	; 0x30
 801191c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801191e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011922:	e841 2300 	strex	r3, r2, [r1]
 8011926:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801192a:	2b00      	cmp	r3, #0
 801192c:	d1e6      	bne.n	80118fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	3308      	adds	r3, #8
 8011934:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011936:	693b      	ldr	r3, [r7, #16]
 8011938:	e853 3f00 	ldrex	r3, [r3]
 801193c:	60fb      	str	r3, [r7, #12]
   return(result);
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	f023 0301 	bic.w	r3, r3, #1
 8011944:	64bb      	str	r3, [r7, #72]	; 0x48
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	3308      	adds	r3, #8
 801194c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801194e:	61fa      	str	r2, [r7, #28]
 8011950:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011952:	69b9      	ldr	r1, [r7, #24]
 8011954:	69fa      	ldr	r2, [r7, #28]
 8011956:	e841 2300 	strex	r3, r2, [r1]
 801195a:	617b      	str	r3, [r7, #20]
   return(result);
 801195c:	697b      	ldr	r3, [r7, #20]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d1e5      	bne.n	801192e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	2220      	movs	r2, #32
 8011966:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	2200      	movs	r2, #0
 801196e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011972:	2303      	movs	r3, #3
 8011974:	e012      	b.n	801199c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	2220      	movs	r2, #32
 801197a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	2220      	movs	r2, #32
 8011982:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	2200      	movs	r2, #0
 801198a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	2200      	movs	r2, #0
 8011990:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	2200      	movs	r2, #0
 8011996:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801199a:	2300      	movs	r3, #0
}
 801199c:	4618      	mov	r0, r3
 801199e:	3758      	adds	r7, #88	; 0x58
 80119a0:	46bd      	mov	sp, r7
 80119a2:	bd80      	pop	{r7, pc}

080119a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b084      	sub	sp, #16
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	60f8      	str	r0, [r7, #12]
 80119ac:	60b9      	str	r1, [r7, #8]
 80119ae:	603b      	str	r3, [r7, #0]
 80119b0:	4613      	mov	r3, r2
 80119b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80119b4:	e049      	b.n	8011a4a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80119b6:	69bb      	ldr	r3, [r7, #24]
 80119b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119bc:	d045      	beq.n	8011a4a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80119be:	f7f1 ffe5 	bl	800398c <HAL_GetTick>
 80119c2:	4602      	mov	r2, r0
 80119c4:	683b      	ldr	r3, [r7, #0]
 80119c6:	1ad3      	subs	r3, r2, r3
 80119c8:	69ba      	ldr	r2, [r7, #24]
 80119ca:	429a      	cmp	r2, r3
 80119cc:	d302      	bcc.n	80119d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80119ce:	69bb      	ldr	r3, [r7, #24]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d101      	bne.n	80119d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80119d4:	2303      	movs	r3, #3
 80119d6:	e048      	b.n	8011a6a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	f003 0304 	and.w	r3, r3, #4
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d031      	beq.n	8011a4a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	69db      	ldr	r3, [r3, #28]
 80119ec:	f003 0308 	and.w	r3, r3, #8
 80119f0:	2b08      	cmp	r3, #8
 80119f2:	d110      	bne.n	8011a16 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	2208      	movs	r2, #8
 80119fa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80119fc:	68f8      	ldr	r0, [r7, #12]
 80119fe:	f000 f839 	bl	8011a74 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	2208      	movs	r2, #8
 8011a06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	2200      	movs	r2, #0
 8011a0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8011a12:	2301      	movs	r3, #1
 8011a14:	e029      	b.n	8011a6a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	69db      	ldr	r3, [r3, #28]
 8011a1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011a20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011a24:	d111      	bne.n	8011a4a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011a2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011a30:	68f8      	ldr	r0, [r7, #12]
 8011a32:	f000 f81f 	bl	8011a74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	2220      	movs	r2, #32
 8011a3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	2200      	movs	r2, #0
 8011a42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011a46:	2303      	movs	r3, #3
 8011a48:	e00f      	b.n	8011a6a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	69da      	ldr	r2, [r3, #28]
 8011a50:	68bb      	ldr	r3, [r7, #8]
 8011a52:	4013      	ands	r3, r2
 8011a54:	68ba      	ldr	r2, [r7, #8]
 8011a56:	429a      	cmp	r2, r3
 8011a58:	bf0c      	ite	eq
 8011a5a:	2301      	moveq	r3, #1
 8011a5c:	2300      	movne	r3, #0
 8011a5e:	b2db      	uxtb	r3, r3
 8011a60:	461a      	mov	r2, r3
 8011a62:	79fb      	ldrb	r3, [r7, #7]
 8011a64:	429a      	cmp	r2, r3
 8011a66:	d0a6      	beq.n	80119b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011a68:	2300      	movs	r3, #0
}
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	3710      	adds	r7, #16
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	bd80      	pop	{r7, pc}
	...

08011a74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011a74:	b480      	push	{r7}
 8011a76:	b095      	sub	sp, #84	; 0x54
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a84:	e853 3f00 	ldrex	r3, [r3]
 8011a88:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011a90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	461a      	mov	r2, r3
 8011a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a9a:	643b      	str	r3, [r7, #64]	; 0x40
 8011a9c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011aa0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011aa2:	e841 2300 	strex	r3, r2, [r1]
 8011aa6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d1e6      	bne.n	8011a7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	3308      	adds	r3, #8
 8011ab4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ab6:	6a3b      	ldr	r3, [r7, #32]
 8011ab8:	e853 3f00 	ldrex	r3, [r3]
 8011abc:	61fb      	str	r3, [r7, #28]
   return(result);
 8011abe:	69fa      	ldr	r2, [r7, #28]
 8011ac0:	4b1e      	ldr	r3, [pc, #120]	; (8011b3c <UART_EndRxTransfer+0xc8>)
 8011ac2:	4013      	ands	r3, r2
 8011ac4:	64bb      	str	r3, [r7, #72]	; 0x48
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	3308      	adds	r3, #8
 8011acc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011ace:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011ad0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ad2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011ad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ad6:	e841 2300 	strex	r3, r2, [r1]
 8011ada:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d1e5      	bne.n	8011aae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ae6:	2b01      	cmp	r3, #1
 8011ae8:	d118      	bne.n	8011b1c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	e853 3f00 	ldrex	r3, [r3]
 8011af6:	60bb      	str	r3, [r7, #8]
   return(result);
 8011af8:	68bb      	ldr	r3, [r7, #8]
 8011afa:	f023 0310 	bic.w	r3, r3, #16
 8011afe:	647b      	str	r3, [r7, #68]	; 0x44
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	461a      	mov	r2, r3
 8011b06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b08:	61bb      	str	r3, [r7, #24]
 8011b0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b0c:	6979      	ldr	r1, [r7, #20]
 8011b0e:	69ba      	ldr	r2, [r7, #24]
 8011b10:	e841 2300 	strex	r3, r2, [r1]
 8011b14:	613b      	str	r3, [r7, #16]
   return(result);
 8011b16:	693b      	ldr	r3, [r7, #16]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d1e6      	bne.n	8011aea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	2220      	movs	r2, #32
 8011b20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	2200      	movs	r2, #0
 8011b28:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	2200      	movs	r2, #0
 8011b2e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011b30:	bf00      	nop
 8011b32:	3754      	adds	r7, #84	; 0x54
 8011b34:	46bd      	mov	sp, r7
 8011b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b3a:	4770      	bx	lr
 8011b3c:	effffffe 	.word	0xeffffffe

08011b40 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011b40:	b480      	push	{r7}
 8011b42:	b085      	sub	sp, #20
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011b4e:	2b01      	cmp	r3, #1
 8011b50:	d101      	bne.n	8011b56 <HAL_UARTEx_DisableFifoMode+0x16>
 8011b52:	2302      	movs	r3, #2
 8011b54:	e027      	b.n	8011ba6 <HAL_UARTEx_DisableFifoMode+0x66>
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	2201      	movs	r2, #1
 8011b5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	2224      	movs	r2, #36	; 0x24
 8011b62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	681a      	ldr	r2, [r3, #0]
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	f022 0201 	bic.w	r2, r2, #1
 8011b7c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011b84:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	2200      	movs	r2, #0
 8011b8a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	68fa      	ldr	r2, [r7, #12]
 8011b92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	2220      	movs	r2, #32
 8011b98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011ba4:	2300      	movs	r3, #0
}
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	3714      	adds	r7, #20
 8011baa:	46bd      	mov	sp, r7
 8011bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb0:	4770      	bx	lr

08011bb2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011bb2:	b580      	push	{r7, lr}
 8011bb4:	b084      	sub	sp, #16
 8011bb6:	af00      	add	r7, sp, #0
 8011bb8:	6078      	str	r0, [r7, #4]
 8011bba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011bc2:	2b01      	cmp	r3, #1
 8011bc4:	d101      	bne.n	8011bca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011bc6:	2302      	movs	r3, #2
 8011bc8:	e02d      	b.n	8011c26 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	2201      	movs	r2, #1
 8011bce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	2224      	movs	r2, #36	; 0x24
 8011bd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	681a      	ldr	r2, [r3, #0]
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	f022 0201 	bic.w	r2, r2, #1
 8011bf0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	689b      	ldr	r3, [r3, #8]
 8011bf8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	683a      	ldr	r2, [r7, #0]
 8011c02:	430a      	orrs	r2, r1
 8011c04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011c06:	6878      	ldr	r0, [r7, #4]
 8011c08:	f000 f850 	bl	8011cac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	68fa      	ldr	r2, [r7, #12]
 8011c12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	2220      	movs	r2, #32
 8011c18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	2200      	movs	r2, #0
 8011c20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011c24:	2300      	movs	r3, #0
}
 8011c26:	4618      	mov	r0, r3
 8011c28:	3710      	adds	r7, #16
 8011c2a:	46bd      	mov	sp, r7
 8011c2c:	bd80      	pop	{r7, pc}

08011c2e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011c2e:	b580      	push	{r7, lr}
 8011c30:	b084      	sub	sp, #16
 8011c32:	af00      	add	r7, sp, #0
 8011c34:	6078      	str	r0, [r7, #4]
 8011c36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011c3e:	2b01      	cmp	r3, #1
 8011c40:	d101      	bne.n	8011c46 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011c42:	2302      	movs	r3, #2
 8011c44:	e02d      	b.n	8011ca2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	2201      	movs	r2, #1
 8011c4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	2224      	movs	r2, #36	; 0x24
 8011c52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	681a      	ldr	r2, [r3, #0]
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	f022 0201 	bic.w	r2, r2, #1
 8011c6c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	689b      	ldr	r3, [r3, #8]
 8011c74:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	683a      	ldr	r2, [r7, #0]
 8011c7e:	430a      	orrs	r2, r1
 8011c80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011c82:	6878      	ldr	r0, [r7, #4]
 8011c84:	f000 f812 	bl	8011cac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	68fa      	ldr	r2, [r7, #12]
 8011c8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	2220      	movs	r2, #32
 8011c94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	2200      	movs	r2, #0
 8011c9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011ca0:	2300      	movs	r3, #0
}
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	3710      	adds	r7, #16
 8011ca6:	46bd      	mov	sp, r7
 8011ca8:	bd80      	pop	{r7, pc}
	...

08011cac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011cac:	b480      	push	{r7}
 8011cae:	b085      	sub	sp, #20
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d108      	bne.n	8011cce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	2201      	movs	r2, #1
 8011cc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	2201      	movs	r2, #1
 8011cc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011ccc:	e031      	b.n	8011d32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011cce:	2310      	movs	r3, #16
 8011cd0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011cd2:	2310      	movs	r3, #16
 8011cd4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	689b      	ldr	r3, [r3, #8]
 8011cdc:	0e5b      	lsrs	r3, r3, #25
 8011cde:	b2db      	uxtb	r3, r3
 8011ce0:	f003 0307 	and.w	r3, r3, #7
 8011ce4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	689b      	ldr	r3, [r3, #8]
 8011cec:	0f5b      	lsrs	r3, r3, #29
 8011cee:	b2db      	uxtb	r3, r3
 8011cf0:	f003 0307 	and.w	r3, r3, #7
 8011cf4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011cf6:	7bbb      	ldrb	r3, [r7, #14]
 8011cf8:	7b3a      	ldrb	r2, [r7, #12]
 8011cfa:	4911      	ldr	r1, [pc, #68]	; (8011d40 <UARTEx_SetNbDataToProcess+0x94>)
 8011cfc:	5c8a      	ldrb	r2, [r1, r2]
 8011cfe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011d02:	7b3a      	ldrb	r2, [r7, #12]
 8011d04:	490f      	ldr	r1, [pc, #60]	; (8011d44 <UARTEx_SetNbDataToProcess+0x98>)
 8011d06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011d08:	fb93 f3f2 	sdiv	r3, r3, r2
 8011d0c:	b29a      	uxth	r2, r3
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011d14:	7bfb      	ldrb	r3, [r7, #15]
 8011d16:	7b7a      	ldrb	r2, [r7, #13]
 8011d18:	4909      	ldr	r1, [pc, #36]	; (8011d40 <UARTEx_SetNbDataToProcess+0x94>)
 8011d1a:	5c8a      	ldrb	r2, [r1, r2]
 8011d1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011d20:	7b7a      	ldrb	r2, [r7, #13]
 8011d22:	4908      	ldr	r1, [pc, #32]	; (8011d44 <UARTEx_SetNbDataToProcess+0x98>)
 8011d24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011d26:	fb93 f3f2 	sdiv	r3, r3, r2
 8011d2a:	b29a      	uxth	r2, r3
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011d32:	bf00      	nop
 8011d34:	3714      	adds	r7, #20
 8011d36:	46bd      	mov	sp, r7
 8011d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3c:	4770      	bx	lr
 8011d3e:	bf00      	nop
 8011d40:	080183d0 	.word	0x080183d0
 8011d44:	080183d8 	.word	0x080183d8

08011d48 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8011d48:	b084      	sub	sp, #16
 8011d4a:	b480      	push	{r7}
 8011d4c:	b085      	sub	sp, #20
 8011d4e:	af00      	add	r7, sp, #0
 8011d50:	6078      	str	r0, [r7, #4]
 8011d52:	f107 001c 	add.w	r0, r7, #28
 8011d56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8011d5e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8011d60:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8011d62:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8011d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8011d66:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8011d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8011d6a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8011d6e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8011d70:	68fa      	ldr	r2, [r7, #12]
 8011d72:	4313      	orrs	r3, r2
 8011d74:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	685a      	ldr	r2, [r3, #4]
 8011d7a:	4b07      	ldr	r3, [pc, #28]	; (8011d98 <SDMMC_Init+0x50>)
 8011d7c:	4013      	ands	r3, r2
 8011d7e:	68fa      	ldr	r2, [r7, #12]
 8011d80:	431a      	orrs	r2, r3
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011d86:	2300      	movs	r3, #0
}
 8011d88:	4618      	mov	r0, r3
 8011d8a:	3714      	adds	r7, #20
 8011d8c:	46bd      	mov	sp, r7
 8011d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d92:	b004      	add	sp, #16
 8011d94:	4770      	bx	lr
 8011d96:	bf00      	nop
 8011d98:	ffc02c00 	.word	0xffc02c00

08011d9c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8011d9c:	b480      	push	{r7}
 8011d9e:	b083      	sub	sp, #12
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011daa:	4618      	mov	r0, r3
 8011dac:	370c      	adds	r7, #12
 8011dae:	46bd      	mov	sp, r7
 8011db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db4:	4770      	bx	lr

08011db6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8011db6:	b480      	push	{r7}
 8011db8:	b083      	sub	sp, #12
 8011dba:	af00      	add	r7, sp, #0
 8011dbc:	6078      	str	r0, [r7, #4]
 8011dbe:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8011dc0:	683b      	ldr	r3, [r7, #0]
 8011dc2:	681a      	ldr	r2, [r3, #0]
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011dca:	2300      	movs	r3, #0
}
 8011dcc:	4618      	mov	r0, r3
 8011dce:	370c      	adds	r7, #12
 8011dd0:	46bd      	mov	sp, r7
 8011dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd6:	4770      	bx	lr

08011dd8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8011dd8:	b480      	push	{r7}
 8011dda:	b083      	sub	sp, #12
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	f043 0203 	orr.w	r2, r3, #3
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8011dec:	2300      	movs	r3, #0
}
 8011dee:	4618      	mov	r0, r3
 8011df0:	370c      	adds	r7, #12
 8011df2:	46bd      	mov	sp, r7
 8011df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df8:	4770      	bx	lr

08011dfa <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8011dfa:	b480      	push	{r7}
 8011dfc:	b083      	sub	sp, #12
 8011dfe:	af00      	add	r7, sp, #0
 8011e00:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	f003 0303 	and.w	r3, r3, #3
}
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	370c      	adds	r7, #12
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e14:	4770      	bx	lr
	...

08011e18 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8011e18:	b480      	push	{r7}
 8011e1a:	b085      	sub	sp, #20
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	6078      	str	r0, [r7, #4]
 8011e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011e22:	2300      	movs	r3, #0
 8011e24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8011e26:	683b      	ldr	r3, [r7, #0]
 8011e28:	681a      	ldr	r2, [r3, #0]
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011e2e:	683b      	ldr	r3, [r7, #0]
 8011e30:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8011e32:	683b      	ldr	r3, [r7, #0]
 8011e34:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011e36:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8011e38:	683b      	ldr	r3, [r7, #0]
 8011e3a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8011e3c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8011e3e:	683b      	ldr	r3, [r7, #0]
 8011e40:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8011e42:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011e44:	68fa      	ldr	r2, [r7, #12]
 8011e46:	4313      	orrs	r3, r2
 8011e48:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	68da      	ldr	r2, [r3, #12]
 8011e4e:	4b06      	ldr	r3, [pc, #24]	; (8011e68 <SDMMC_SendCommand+0x50>)
 8011e50:	4013      	ands	r3, r2
 8011e52:	68fa      	ldr	r2, [r7, #12]
 8011e54:	431a      	orrs	r2, r3
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011e5a:	2300      	movs	r3, #0
}
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	3714      	adds	r7, #20
 8011e60:	46bd      	mov	sp, r7
 8011e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e66:	4770      	bx	lr
 8011e68:	fffee0c0 	.word	0xfffee0c0

08011e6c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8011e6c:	b480      	push	{r7}
 8011e6e:	b083      	sub	sp, #12
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	691b      	ldr	r3, [r3, #16]
 8011e78:	b2db      	uxtb	r3, r3
}
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	370c      	adds	r7, #12
 8011e7e:	46bd      	mov	sp, r7
 8011e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e84:	4770      	bx	lr

08011e86 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8011e86:	b480      	push	{r7}
 8011e88:	b085      	sub	sp, #20
 8011e8a:	af00      	add	r7, sp, #0
 8011e8c:	6078      	str	r0, [r7, #4]
 8011e8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	3314      	adds	r3, #20
 8011e94:	461a      	mov	r2, r3
 8011e96:	683b      	ldr	r3, [r7, #0]
 8011e98:	4413      	add	r3, r2
 8011e9a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	681b      	ldr	r3, [r3, #0]
}
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	3714      	adds	r7, #20
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eaa:	4770      	bx	lr

08011eac <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8011eac:	b480      	push	{r7}
 8011eae:	b085      	sub	sp, #20
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	6078      	str	r0, [r7, #4]
 8011eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8011eba:	683b      	ldr	r3, [r7, #0]
 8011ebc:	681a      	ldr	r2, [r3, #0]
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8011ec2:	683b      	ldr	r3, [r7, #0]
 8011ec4:	685a      	ldr	r2, [r3, #4]
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011eca:	683b      	ldr	r3, [r7, #0]
 8011ecc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8011ece:	683b      	ldr	r3, [r7, #0]
 8011ed0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011ed2:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8011ed4:	683b      	ldr	r3, [r7, #0]
 8011ed6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8011ed8:	431a      	orrs	r2, r3
                       Data->DPSM);
 8011eda:	683b      	ldr	r3, [r7, #0]
 8011edc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8011ede:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011ee0:	68fa      	ldr	r2, [r7, #12]
 8011ee2:	4313      	orrs	r3, r2
 8011ee4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011eea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	431a      	orrs	r2, r3
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8011ef6:	2300      	movs	r3, #0

}
 8011ef8:	4618      	mov	r0, r3
 8011efa:	3714      	adds	r7, #20
 8011efc:	46bd      	mov	sp, r7
 8011efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f02:	4770      	bx	lr

08011f04 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8011f04:	b580      	push	{r7, lr}
 8011f06:	b088      	sub	sp, #32
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	6078      	str	r0, [r7, #4]
 8011f0c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8011f0e:	683b      	ldr	r3, [r7, #0]
 8011f10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8011f12:	2310      	movs	r3, #16
 8011f14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011f16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011f1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011f24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f26:	f107 0308 	add.w	r3, r7, #8
 8011f2a:	4619      	mov	r1, r3
 8011f2c:	6878      	ldr	r0, [r7, #4]
 8011f2e:	f7ff ff73 	bl	8011e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8011f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f36:	2110      	movs	r1, #16
 8011f38:	6878      	ldr	r0, [r7, #4]
 8011f3a:	f000 fa5f 	bl	80123fc <SDMMC_GetCmdResp1>
 8011f3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f40:	69fb      	ldr	r3, [r7, #28]
}
 8011f42:	4618      	mov	r0, r3
 8011f44:	3720      	adds	r7, #32
 8011f46:	46bd      	mov	sp, r7
 8011f48:	bd80      	pop	{r7, pc}

08011f4a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011f4a:	b580      	push	{r7, lr}
 8011f4c:	b088      	sub	sp, #32
 8011f4e:	af00      	add	r7, sp, #0
 8011f50:	6078      	str	r0, [r7, #4]
 8011f52:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011f54:	683b      	ldr	r3, [r7, #0]
 8011f56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8011f58:	2311      	movs	r3, #17
 8011f5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011f5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011f60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011f62:	2300      	movs	r3, #0
 8011f64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011f6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f6c:	f107 0308 	add.w	r3, r7, #8
 8011f70:	4619      	mov	r1, r3
 8011f72:	6878      	ldr	r0, [r7, #4]
 8011f74:	f7ff ff50 	bl	8011e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f7c:	2111      	movs	r1, #17
 8011f7e:	6878      	ldr	r0, [r7, #4]
 8011f80:	f000 fa3c 	bl	80123fc <SDMMC_GetCmdResp1>
 8011f84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f86:	69fb      	ldr	r3, [r7, #28]
}
 8011f88:	4618      	mov	r0, r3
 8011f8a:	3720      	adds	r7, #32
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	bd80      	pop	{r7, pc}

08011f90 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011f90:	b580      	push	{r7, lr}
 8011f92:	b088      	sub	sp, #32
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	6078      	str	r0, [r7, #4]
 8011f98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011f9a:	683b      	ldr	r3, [r7, #0]
 8011f9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8011f9e:	2312      	movs	r3, #18
 8011fa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011fa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011fa6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011fa8:	2300      	movs	r3, #0
 8011faa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011fb0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011fb2:	f107 0308 	add.w	r3, r7, #8
 8011fb6:	4619      	mov	r1, r3
 8011fb8:	6878      	ldr	r0, [r7, #4]
 8011fba:	f7ff ff2d 	bl	8011e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8011fc2:	2112      	movs	r1, #18
 8011fc4:	6878      	ldr	r0, [r7, #4]
 8011fc6:	f000 fa19 	bl	80123fc <SDMMC_GetCmdResp1>
 8011fca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011fcc:	69fb      	ldr	r3, [r7, #28]
}
 8011fce:	4618      	mov	r0, r3
 8011fd0:	3720      	adds	r7, #32
 8011fd2:	46bd      	mov	sp, r7
 8011fd4:	bd80      	pop	{r7, pc}

08011fd6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011fd6:	b580      	push	{r7, lr}
 8011fd8:	b088      	sub	sp, #32
 8011fda:	af00      	add	r7, sp, #0
 8011fdc:	6078      	str	r0, [r7, #4]
 8011fde:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011fe0:	683b      	ldr	r3, [r7, #0]
 8011fe2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8011fe4:	2318      	movs	r3, #24
 8011fe6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011fe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011fec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011fee:	2300      	movs	r3, #0
 8011ff0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011ff2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011ff6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011ff8:	f107 0308 	add.w	r3, r7, #8
 8011ffc:	4619      	mov	r1, r3
 8011ffe:	6878      	ldr	r0, [r7, #4]
 8012000:	f7ff ff0a 	bl	8011e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012004:	f241 3288 	movw	r2, #5000	; 0x1388
 8012008:	2118      	movs	r1, #24
 801200a:	6878      	ldr	r0, [r7, #4]
 801200c:	f000 f9f6 	bl	80123fc <SDMMC_GetCmdResp1>
 8012010:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012012:	69fb      	ldr	r3, [r7, #28]
}
 8012014:	4618      	mov	r0, r3
 8012016:	3720      	adds	r7, #32
 8012018:	46bd      	mov	sp, r7
 801201a:	bd80      	pop	{r7, pc}

0801201c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801201c:	b580      	push	{r7, lr}
 801201e:	b088      	sub	sp, #32
 8012020:	af00      	add	r7, sp, #0
 8012022:	6078      	str	r0, [r7, #4]
 8012024:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012026:	683b      	ldr	r3, [r7, #0]
 8012028:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801202a:	2319      	movs	r3, #25
 801202c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801202e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012032:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012034:	2300      	movs	r3, #0
 8012036:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801203c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801203e:	f107 0308 	add.w	r3, r7, #8
 8012042:	4619      	mov	r1, r3
 8012044:	6878      	ldr	r0, [r7, #4]
 8012046:	f7ff fee7 	bl	8011e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801204a:	f241 3288 	movw	r2, #5000	; 0x1388
 801204e:	2119      	movs	r1, #25
 8012050:	6878      	ldr	r0, [r7, #4]
 8012052:	f000 f9d3 	bl	80123fc <SDMMC_GetCmdResp1>
 8012056:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012058:	69fb      	ldr	r3, [r7, #28]
}
 801205a:	4618      	mov	r0, r3
 801205c:	3720      	adds	r7, #32
 801205e:	46bd      	mov	sp, r7
 8012060:	bd80      	pop	{r7, pc}
	...

08012064 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8012064:	b580      	push	{r7, lr}
 8012066:	b088      	sub	sp, #32
 8012068:	af00      	add	r7, sp, #0
 801206a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801206c:	2300      	movs	r3, #0
 801206e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8012070:	230c      	movs	r3, #12
 8012072:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012074:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012078:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801207a:	2300      	movs	r3, #0
 801207c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801207e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012082:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	68db      	ldr	r3, [r3, #12]
 8012088:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	68db      	ldr	r3, [r3, #12]
 8012094:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801209c:	f107 0308 	add.w	r3, r7, #8
 80120a0:	4619      	mov	r1, r3
 80120a2:	6878      	ldr	r0, [r7, #4]
 80120a4:	f7ff feb8 	bl	8011e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80120a8:	4a0b      	ldr	r2, [pc, #44]	; (80120d8 <SDMMC_CmdStopTransfer+0x74>)
 80120aa:	210c      	movs	r1, #12
 80120ac:	6878      	ldr	r0, [r7, #4]
 80120ae:	f000 f9a5 	bl	80123fc <SDMMC_GetCmdResp1>
 80120b2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	68db      	ldr	r3, [r3, #12]
 80120b8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80120c0:	69fb      	ldr	r3, [r7, #28]
 80120c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80120c6:	d101      	bne.n	80120cc <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80120c8:	2300      	movs	r3, #0
 80120ca:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80120cc:	69fb      	ldr	r3, [r7, #28]
}
 80120ce:	4618      	mov	r0, r3
 80120d0:	3720      	adds	r7, #32
 80120d2:	46bd      	mov	sp, r7
 80120d4:	bd80      	pop	{r7, pc}
 80120d6:	bf00      	nop
 80120d8:	05f5e100 	.word	0x05f5e100

080120dc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80120dc:	b580      	push	{r7, lr}
 80120de:	b088      	sub	sp, #32
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	6078      	str	r0, [r7, #4]
 80120e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80120e6:	683b      	ldr	r3, [r7, #0]
 80120e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80120ea:	2307      	movs	r3, #7
 80120ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80120ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80120f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80120f4:	2300      	movs	r3, #0
 80120f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80120f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80120fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80120fe:	f107 0308 	add.w	r3, r7, #8
 8012102:	4619      	mov	r1, r3
 8012104:	6878      	ldr	r0, [r7, #4]
 8012106:	f7ff fe87 	bl	8011e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 801210a:	f241 3288 	movw	r2, #5000	; 0x1388
 801210e:	2107      	movs	r1, #7
 8012110:	6878      	ldr	r0, [r7, #4]
 8012112:	f000 f973 	bl	80123fc <SDMMC_GetCmdResp1>
 8012116:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012118:	69fb      	ldr	r3, [r7, #28]
}
 801211a:	4618      	mov	r0, r3
 801211c:	3720      	adds	r7, #32
 801211e:	46bd      	mov	sp, r7
 8012120:	bd80      	pop	{r7, pc}

08012122 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8012122:	b580      	push	{r7, lr}
 8012124:	b088      	sub	sp, #32
 8012126:	af00      	add	r7, sp, #0
 8012128:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801212a:	2300      	movs	r3, #0
 801212c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801212e:	2300      	movs	r3, #0
 8012130:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8012132:	2300      	movs	r3, #0
 8012134:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012136:	2300      	movs	r3, #0
 8012138:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801213a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801213e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012140:	f107 0308 	add.w	r3, r7, #8
 8012144:	4619      	mov	r1, r3
 8012146:	6878      	ldr	r0, [r7, #4]
 8012148:	f7ff fe66 	bl	8011e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 801214c:	6878      	ldr	r0, [r7, #4]
 801214e:	f000 fb97 	bl	8012880 <SDMMC_GetCmdError>
 8012152:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012154:	69fb      	ldr	r3, [r7, #28]
}
 8012156:	4618      	mov	r0, r3
 8012158:	3720      	adds	r7, #32
 801215a:	46bd      	mov	sp, r7
 801215c:	bd80      	pop	{r7, pc}

0801215e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801215e:	b580      	push	{r7, lr}
 8012160:	b088      	sub	sp, #32
 8012162:	af00      	add	r7, sp, #0
 8012164:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8012166:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801216a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 801216c:	2308      	movs	r3, #8
 801216e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012170:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012174:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012176:	2300      	movs	r3, #0
 8012178:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801217a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801217e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012180:	f107 0308 	add.w	r3, r7, #8
 8012184:	4619      	mov	r1, r3
 8012186:	6878      	ldr	r0, [r7, #4]
 8012188:	f7ff fe46 	bl	8011e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801218c:	6878      	ldr	r0, [r7, #4]
 801218e:	f000 fb29 	bl	80127e4 <SDMMC_GetCmdResp7>
 8012192:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012194:	69fb      	ldr	r3, [r7, #28]
}
 8012196:	4618      	mov	r0, r3
 8012198:	3720      	adds	r7, #32
 801219a:	46bd      	mov	sp, r7
 801219c:	bd80      	pop	{r7, pc}

0801219e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801219e:	b580      	push	{r7, lr}
 80121a0:	b088      	sub	sp, #32
 80121a2:	af00      	add	r7, sp, #0
 80121a4:	6078      	str	r0, [r7, #4]
 80121a6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80121a8:	683b      	ldr	r3, [r7, #0]
 80121aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80121ac:	2337      	movs	r3, #55	; 0x37
 80121ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80121b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80121b6:	2300      	movs	r3, #0
 80121b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80121ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80121be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80121c0:	f107 0308 	add.w	r3, r7, #8
 80121c4:	4619      	mov	r1, r3
 80121c6:	6878      	ldr	r0, [r7, #4]
 80121c8:	f7ff fe26 	bl	8011e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80121cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80121d0:	2137      	movs	r1, #55	; 0x37
 80121d2:	6878      	ldr	r0, [r7, #4]
 80121d4:	f000 f912 	bl	80123fc <SDMMC_GetCmdResp1>
 80121d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80121da:	69fb      	ldr	r3, [r7, #28]
}
 80121dc:	4618      	mov	r0, r3
 80121de:	3720      	adds	r7, #32
 80121e0:	46bd      	mov	sp, r7
 80121e2:	bd80      	pop	{r7, pc}

080121e4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b088      	sub	sp, #32
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	6078      	str	r0, [r7, #4]
 80121ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80121ee:	683b      	ldr	r3, [r7, #0]
 80121f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80121f2:	2329      	movs	r3, #41	; 0x29
 80121f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80121f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80121fc:	2300      	movs	r3, #0
 80121fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012204:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012206:	f107 0308 	add.w	r3, r7, #8
 801220a:	4619      	mov	r1, r3
 801220c:	6878      	ldr	r0, [r7, #4]
 801220e:	f7ff fe03 	bl	8011e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8012212:	6878      	ldr	r0, [r7, #4]
 8012214:	f000 fa2e 	bl	8012674 <SDMMC_GetCmdResp3>
 8012218:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801221a:	69fb      	ldr	r3, [r7, #28]
}
 801221c:	4618      	mov	r0, r3
 801221e:	3720      	adds	r7, #32
 8012220:	46bd      	mov	sp, r7
 8012222:	bd80      	pop	{r7, pc}

08012224 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8012224:	b580      	push	{r7, lr}
 8012226:	b088      	sub	sp, #32
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]
 801222c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801222e:	683b      	ldr	r3, [r7, #0]
 8012230:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8012232:	2306      	movs	r3, #6
 8012234:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012236:	f44f 7380 	mov.w	r3, #256	; 0x100
 801223a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801223c:	2300      	movs	r3, #0
 801223e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012244:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012246:	f107 0308 	add.w	r3, r7, #8
 801224a:	4619      	mov	r1, r3
 801224c:	6878      	ldr	r0, [r7, #4]
 801224e:	f7ff fde3 	bl	8011e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8012252:	f241 3288 	movw	r2, #5000	; 0x1388
 8012256:	2106      	movs	r1, #6
 8012258:	6878      	ldr	r0, [r7, #4]
 801225a:	f000 f8cf 	bl	80123fc <SDMMC_GetCmdResp1>
 801225e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012260:	69fb      	ldr	r3, [r7, #28]
}
 8012262:	4618      	mov	r0, r3
 8012264:	3720      	adds	r7, #32
 8012266:	46bd      	mov	sp, r7
 8012268:	bd80      	pop	{r7, pc}

0801226a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801226a:	b580      	push	{r7, lr}
 801226c:	b088      	sub	sp, #32
 801226e:	af00      	add	r7, sp, #0
 8012270:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8012272:	2300      	movs	r3, #0
 8012274:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8012276:	2333      	movs	r3, #51	; 0x33
 8012278:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801227a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801227e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012280:	2300      	movs	r3, #0
 8012282:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012288:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801228a:	f107 0308 	add.w	r3, r7, #8
 801228e:	4619      	mov	r1, r3
 8012290:	6878      	ldr	r0, [r7, #4]
 8012292:	f7ff fdc1 	bl	8011e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8012296:	f241 3288 	movw	r2, #5000	; 0x1388
 801229a:	2133      	movs	r1, #51	; 0x33
 801229c:	6878      	ldr	r0, [r7, #4]
 801229e:	f000 f8ad 	bl	80123fc <SDMMC_GetCmdResp1>
 80122a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80122a4:	69fb      	ldr	r3, [r7, #28]
}
 80122a6:	4618      	mov	r0, r3
 80122a8:	3720      	adds	r7, #32
 80122aa:	46bd      	mov	sp, r7
 80122ac:	bd80      	pop	{r7, pc}

080122ae <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80122ae:	b580      	push	{r7, lr}
 80122b0:	b088      	sub	sp, #32
 80122b2:	af00      	add	r7, sp, #0
 80122b4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80122b6:	2300      	movs	r3, #0
 80122b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80122ba:	2302      	movs	r3, #2
 80122bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80122be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80122c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80122c4:	2300      	movs	r3, #0
 80122c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80122c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80122cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80122ce:	f107 0308 	add.w	r3, r7, #8
 80122d2:	4619      	mov	r1, r3
 80122d4:	6878      	ldr	r0, [r7, #4]
 80122d6:	f7ff fd9f 	bl	8011e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80122da:	6878      	ldr	r0, [r7, #4]
 80122dc:	f000 f980 	bl	80125e0 <SDMMC_GetCmdResp2>
 80122e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80122e2:	69fb      	ldr	r3, [r7, #28]
}
 80122e4:	4618      	mov	r0, r3
 80122e6:	3720      	adds	r7, #32
 80122e8:	46bd      	mov	sp, r7
 80122ea:	bd80      	pop	{r7, pc}

080122ec <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b088      	sub	sp, #32
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
 80122f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80122f6:	683b      	ldr	r3, [r7, #0]
 80122f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80122fa:	2309      	movs	r3, #9
 80122fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80122fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012302:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012304:	2300      	movs	r3, #0
 8012306:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801230c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801230e:	f107 0308 	add.w	r3, r7, #8
 8012312:	4619      	mov	r1, r3
 8012314:	6878      	ldr	r0, [r7, #4]
 8012316:	f7ff fd7f 	bl	8011e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801231a:	6878      	ldr	r0, [r7, #4]
 801231c:	f000 f960 	bl	80125e0 <SDMMC_GetCmdResp2>
 8012320:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012322:	69fb      	ldr	r3, [r7, #28]
}
 8012324:	4618      	mov	r0, r3
 8012326:	3720      	adds	r7, #32
 8012328:	46bd      	mov	sp, r7
 801232a:	bd80      	pop	{r7, pc}

0801232c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 801232c:	b580      	push	{r7, lr}
 801232e:	b088      	sub	sp, #32
 8012330:	af00      	add	r7, sp, #0
 8012332:	6078      	str	r0, [r7, #4]
 8012334:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8012336:	2300      	movs	r3, #0
 8012338:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801233a:	2303      	movs	r3, #3
 801233c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801233e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012342:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012344:	2300      	movs	r3, #0
 8012346:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801234c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801234e:	f107 0308 	add.w	r3, r7, #8
 8012352:	4619      	mov	r1, r3
 8012354:	6878      	ldr	r0, [r7, #4]
 8012356:	f7ff fd5f 	bl	8011e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801235a:	683a      	ldr	r2, [r7, #0]
 801235c:	2103      	movs	r1, #3
 801235e:	6878      	ldr	r0, [r7, #4]
 8012360:	f000 f9c8 	bl	80126f4 <SDMMC_GetCmdResp6>
 8012364:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012366:	69fb      	ldr	r3, [r7, #28]
}
 8012368:	4618      	mov	r0, r3
 801236a:	3720      	adds	r7, #32
 801236c:	46bd      	mov	sp, r7
 801236e:	bd80      	pop	{r7, pc}

08012370 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012370:	b580      	push	{r7, lr}
 8012372:	b088      	sub	sp, #32
 8012374:	af00      	add	r7, sp, #0
 8012376:	6078      	str	r0, [r7, #4]
 8012378:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801237a:	683b      	ldr	r3, [r7, #0]
 801237c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801237e:	230d      	movs	r3, #13
 8012380:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012382:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012386:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012388:	2300      	movs	r3, #0
 801238a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801238c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012390:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012392:	f107 0308 	add.w	r3, r7, #8
 8012396:	4619      	mov	r1, r3
 8012398:	6878      	ldr	r0, [r7, #4]
 801239a:	f7ff fd3d 	bl	8011e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801239e:	f241 3288 	movw	r2, #5000	; 0x1388
 80123a2:	210d      	movs	r1, #13
 80123a4:	6878      	ldr	r0, [r7, #4]
 80123a6:	f000 f829 	bl	80123fc <SDMMC_GetCmdResp1>
 80123aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80123ac:	69fb      	ldr	r3, [r7, #28]
}
 80123ae:	4618      	mov	r0, r3
 80123b0:	3720      	adds	r7, #32
 80123b2:	46bd      	mov	sp, r7
 80123b4:	bd80      	pop	{r7, pc}

080123b6 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80123b6:	b580      	push	{r7, lr}
 80123b8:	b088      	sub	sp, #32
 80123ba:	af00      	add	r7, sp, #0
 80123bc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80123be:	2300      	movs	r3, #0
 80123c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80123c2:	230d      	movs	r3, #13
 80123c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80123c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80123ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80123cc:	2300      	movs	r3, #0
 80123ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80123d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80123d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80123d6:	f107 0308 	add.w	r3, r7, #8
 80123da:	4619      	mov	r1, r3
 80123dc:	6878      	ldr	r0, [r7, #4]
 80123de:	f7ff fd1b 	bl	8011e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80123e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80123e6:	210d      	movs	r1, #13
 80123e8:	6878      	ldr	r0, [r7, #4]
 80123ea:	f000 f807 	bl	80123fc <SDMMC_GetCmdResp1>
 80123ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80123f0:	69fb      	ldr	r3, [r7, #28]
}
 80123f2:	4618      	mov	r0, r3
 80123f4:	3720      	adds	r7, #32
 80123f6:	46bd      	mov	sp, r7
 80123f8:	bd80      	pop	{r7, pc}
	...

080123fc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80123fc:	b580      	push	{r7, lr}
 80123fe:	b088      	sub	sp, #32
 8012400:	af00      	add	r7, sp, #0
 8012402:	60f8      	str	r0, [r7, #12]
 8012404:	460b      	mov	r3, r1
 8012406:	607a      	str	r2, [r7, #4]
 8012408:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801240a:	4b70      	ldr	r3, [pc, #448]	; (80125cc <SDMMC_GetCmdResp1+0x1d0>)
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	4a70      	ldr	r2, [pc, #448]	; (80125d0 <SDMMC_GetCmdResp1+0x1d4>)
 8012410:	fba2 2303 	umull	r2, r3, r2, r3
 8012414:	0a5a      	lsrs	r2, r3, #9
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	fb02 f303 	mul.w	r3, r2, r3
 801241c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801241e:	69fb      	ldr	r3, [r7, #28]
 8012420:	1e5a      	subs	r2, r3, #1
 8012422:	61fa      	str	r2, [r7, #28]
 8012424:	2b00      	cmp	r3, #0
 8012426:	d102      	bne.n	801242e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012428:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801242c:	e0c9      	b.n	80125c2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012432:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8012434:	69ba      	ldr	r2, [r7, #24]
 8012436:	4b67      	ldr	r3, [pc, #412]	; (80125d4 <SDMMC_GetCmdResp1+0x1d8>)
 8012438:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801243a:	2b00      	cmp	r3, #0
 801243c:	d0ef      	beq.n	801241e <SDMMC_GetCmdResp1+0x22>
 801243e:	69bb      	ldr	r3, [r7, #24]
 8012440:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012444:	2b00      	cmp	r3, #0
 8012446:	d1ea      	bne.n	801241e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801244c:	f003 0304 	and.w	r3, r3, #4
 8012450:	2b00      	cmp	r3, #0
 8012452:	d004      	beq.n	801245e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	2204      	movs	r2, #4
 8012458:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801245a:	2304      	movs	r3, #4
 801245c:	e0b1      	b.n	80125c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012462:	f003 0301 	and.w	r3, r3, #1
 8012466:	2b00      	cmp	r3, #0
 8012468:	d004      	beq.n	8012474 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	2201      	movs	r2, #1
 801246e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012470:	2301      	movs	r3, #1
 8012472:	e0a6      	b.n	80125c2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	4a58      	ldr	r2, [pc, #352]	; (80125d8 <SDMMC_GetCmdResp1+0x1dc>)
 8012478:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801247a:	68f8      	ldr	r0, [r7, #12]
 801247c:	f7ff fcf6 	bl	8011e6c <SDMMC_GetCommandResponse>
 8012480:	4603      	mov	r3, r0
 8012482:	461a      	mov	r2, r3
 8012484:	7afb      	ldrb	r3, [r7, #11]
 8012486:	4293      	cmp	r3, r2
 8012488:	d001      	beq.n	801248e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801248a:	2301      	movs	r3, #1
 801248c:	e099      	b.n	80125c2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801248e:	2100      	movs	r1, #0
 8012490:	68f8      	ldr	r0, [r7, #12]
 8012492:	f7ff fcf8 	bl	8011e86 <SDMMC_GetResponse>
 8012496:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012498:	697a      	ldr	r2, [r7, #20]
 801249a:	4b50      	ldr	r3, [pc, #320]	; (80125dc <SDMMC_GetCmdResp1+0x1e0>)
 801249c:	4013      	ands	r3, r2
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d101      	bne.n	80124a6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80124a2:	2300      	movs	r3, #0
 80124a4:	e08d      	b.n	80125c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80124a6:	697b      	ldr	r3, [r7, #20]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	da02      	bge.n	80124b2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80124ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80124b0:	e087      	b.n	80125c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80124b2:	697b      	ldr	r3, [r7, #20]
 80124b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d001      	beq.n	80124c0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80124bc:	2340      	movs	r3, #64	; 0x40
 80124be:	e080      	b.n	80125c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80124c0:	697b      	ldr	r3, [r7, #20]
 80124c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d001      	beq.n	80124ce <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80124ca:	2380      	movs	r3, #128	; 0x80
 80124cc:	e079      	b.n	80125c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80124ce:	697b      	ldr	r3, [r7, #20]
 80124d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d002      	beq.n	80124de <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80124d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80124dc:	e071      	b.n	80125c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80124de:	697b      	ldr	r3, [r7, #20]
 80124e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d002      	beq.n	80124ee <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80124e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80124ec:	e069      	b.n	80125c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80124ee:	697b      	ldr	r3, [r7, #20]
 80124f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d002      	beq.n	80124fe <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80124f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80124fc:	e061      	b.n	80125c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80124fe:	697b      	ldr	r3, [r7, #20]
 8012500:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012504:	2b00      	cmp	r3, #0
 8012506:	d002      	beq.n	801250e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012508:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801250c:	e059      	b.n	80125c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801250e:	697b      	ldr	r3, [r7, #20]
 8012510:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012514:	2b00      	cmp	r3, #0
 8012516:	d002      	beq.n	801251e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801251c:	e051      	b.n	80125c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801251e:	697b      	ldr	r3, [r7, #20]
 8012520:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012524:	2b00      	cmp	r3, #0
 8012526:	d002      	beq.n	801252e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012528:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801252c:	e049      	b.n	80125c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801252e:	697b      	ldr	r3, [r7, #20]
 8012530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012534:	2b00      	cmp	r3, #0
 8012536:	d002      	beq.n	801253e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012538:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801253c:	e041      	b.n	80125c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801253e:	697b      	ldr	r3, [r7, #20]
 8012540:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012544:	2b00      	cmp	r3, #0
 8012546:	d002      	beq.n	801254e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8012548:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801254c:	e039      	b.n	80125c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801254e:	697b      	ldr	r3, [r7, #20]
 8012550:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012554:	2b00      	cmp	r3, #0
 8012556:	d002      	beq.n	801255e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012558:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801255c:	e031      	b.n	80125c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801255e:	697b      	ldr	r3, [r7, #20]
 8012560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012564:	2b00      	cmp	r3, #0
 8012566:	d002      	beq.n	801256e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012568:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801256c:	e029      	b.n	80125c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801256e:	697b      	ldr	r3, [r7, #20]
 8012570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012574:	2b00      	cmp	r3, #0
 8012576:	d002      	beq.n	801257e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012578:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801257c:	e021      	b.n	80125c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801257e:	697b      	ldr	r3, [r7, #20]
 8012580:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012584:	2b00      	cmp	r3, #0
 8012586:	d002      	beq.n	801258e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012588:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801258c:	e019      	b.n	80125c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801258e:	697b      	ldr	r3, [r7, #20]
 8012590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012594:	2b00      	cmp	r3, #0
 8012596:	d002      	beq.n	801259e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012598:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801259c:	e011      	b.n	80125c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801259e:	697b      	ldr	r3, [r7, #20]
 80125a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d002      	beq.n	80125ae <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80125a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80125ac:	e009      	b.n	80125c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80125ae:	697b      	ldr	r3, [r7, #20]
 80125b0:	f003 0308 	and.w	r3, r3, #8
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d002      	beq.n	80125be <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80125b8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80125bc:	e001      	b.n	80125c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80125be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80125c2:	4618      	mov	r0, r3
 80125c4:	3720      	adds	r7, #32
 80125c6:	46bd      	mov	sp, r7
 80125c8:	bd80      	pop	{r7, pc}
 80125ca:	bf00      	nop
 80125cc:	24000000 	.word	0x24000000
 80125d0:	10624dd3 	.word	0x10624dd3
 80125d4:	00200045 	.word	0x00200045
 80125d8:	002000c5 	.word	0x002000c5
 80125dc:	fdffe008 	.word	0xfdffe008

080125e0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80125e0:	b480      	push	{r7}
 80125e2:	b085      	sub	sp, #20
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80125e8:	4b1f      	ldr	r3, [pc, #124]	; (8012668 <SDMMC_GetCmdResp2+0x88>)
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	4a1f      	ldr	r2, [pc, #124]	; (801266c <SDMMC_GetCmdResp2+0x8c>)
 80125ee:	fba2 2303 	umull	r2, r3, r2, r3
 80125f2:	0a5b      	lsrs	r3, r3, #9
 80125f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80125f8:	fb02 f303 	mul.w	r3, r2, r3
 80125fc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	1e5a      	subs	r2, r3, #1
 8012602:	60fa      	str	r2, [r7, #12]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d102      	bne.n	801260e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012608:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801260c:	e026      	b.n	801265c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012612:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012614:	68bb      	ldr	r3, [r7, #8]
 8012616:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801261a:	2b00      	cmp	r3, #0
 801261c:	d0ef      	beq.n	80125fe <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801261e:	68bb      	ldr	r3, [r7, #8]
 8012620:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012624:	2b00      	cmp	r3, #0
 8012626:	d1ea      	bne.n	80125fe <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801262c:	f003 0304 	and.w	r3, r3, #4
 8012630:	2b00      	cmp	r3, #0
 8012632:	d004      	beq.n	801263e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	2204      	movs	r2, #4
 8012638:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801263a:	2304      	movs	r3, #4
 801263c:	e00e      	b.n	801265c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012642:	f003 0301 	and.w	r3, r3, #1
 8012646:	2b00      	cmp	r3, #0
 8012648:	d004      	beq.n	8012654 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	2201      	movs	r2, #1
 801264e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012650:	2301      	movs	r3, #1
 8012652:	e003      	b.n	801265c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	4a06      	ldr	r2, [pc, #24]	; (8012670 <SDMMC_GetCmdResp2+0x90>)
 8012658:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801265a:	2300      	movs	r3, #0
}
 801265c:	4618      	mov	r0, r3
 801265e:	3714      	adds	r7, #20
 8012660:	46bd      	mov	sp, r7
 8012662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012666:	4770      	bx	lr
 8012668:	24000000 	.word	0x24000000
 801266c:	10624dd3 	.word	0x10624dd3
 8012670:	002000c5 	.word	0x002000c5

08012674 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8012674:	b480      	push	{r7}
 8012676:	b085      	sub	sp, #20
 8012678:	af00      	add	r7, sp, #0
 801267a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801267c:	4b1a      	ldr	r3, [pc, #104]	; (80126e8 <SDMMC_GetCmdResp3+0x74>)
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	4a1a      	ldr	r2, [pc, #104]	; (80126ec <SDMMC_GetCmdResp3+0x78>)
 8012682:	fba2 2303 	umull	r2, r3, r2, r3
 8012686:	0a5b      	lsrs	r3, r3, #9
 8012688:	f241 3288 	movw	r2, #5000	; 0x1388
 801268c:	fb02 f303 	mul.w	r3, r2, r3
 8012690:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	1e5a      	subs	r2, r3, #1
 8012696:	60fa      	str	r2, [r7, #12]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d102      	bne.n	80126a2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801269c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80126a0:	e01b      	b.n	80126da <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126a6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80126a8:	68bb      	ldr	r3, [r7, #8]
 80126aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d0ef      	beq.n	8012692 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80126b2:	68bb      	ldr	r3, [r7, #8]
 80126b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d1ea      	bne.n	8012692 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126c0:	f003 0304 	and.w	r3, r3, #4
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d004      	beq.n	80126d2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	2204      	movs	r2, #4
 80126cc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80126ce:	2304      	movs	r3, #4
 80126d0:	e003      	b.n	80126da <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	4a06      	ldr	r2, [pc, #24]	; (80126f0 <SDMMC_GetCmdResp3+0x7c>)
 80126d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80126d8:	2300      	movs	r3, #0
}
 80126da:	4618      	mov	r0, r3
 80126dc:	3714      	adds	r7, #20
 80126de:	46bd      	mov	sp, r7
 80126e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e4:	4770      	bx	lr
 80126e6:	bf00      	nop
 80126e8:	24000000 	.word	0x24000000
 80126ec:	10624dd3 	.word	0x10624dd3
 80126f0:	002000c5 	.word	0x002000c5

080126f4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b088      	sub	sp, #32
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	60f8      	str	r0, [r7, #12]
 80126fc:	460b      	mov	r3, r1
 80126fe:	607a      	str	r2, [r7, #4]
 8012700:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012702:	4b35      	ldr	r3, [pc, #212]	; (80127d8 <SDMMC_GetCmdResp6+0xe4>)
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	4a35      	ldr	r2, [pc, #212]	; (80127dc <SDMMC_GetCmdResp6+0xe8>)
 8012708:	fba2 2303 	umull	r2, r3, r2, r3
 801270c:	0a5b      	lsrs	r3, r3, #9
 801270e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012712:	fb02 f303 	mul.w	r3, r2, r3
 8012716:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012718:	69fb      	ldr	r3, [r7, #28]
 801271a:	1e5a      	subs	r2, r3, #1
 801271c:	61fa      	str	r2, [r7, #28]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d102      	bne.n	8012728 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012722:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012726:	e052      	b.n	80127ce <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801272c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801272e:	69bb      	ldr	r3, [r7, #24]
 8012730:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012734:	2b00      	cmp	r3, #0
 8012736:	d0ef      	beq.n	8012718 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012738:	69bb      	ldr	r3, [r7, #24]
 801273a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801273e:	2b00      	cmp	r3, #0
 8012740:	d1ea      	bne.n	8012718 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012746:	f003 0304 	and.w	r3, r3, #4
 801274a:	2b00      	cmp	r3, #0
 801274c:	d004      	beq.n	8012758 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	2204      	movs	r2, #4
 8012752:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012754:	2304      	movs	r3, #4
 8012756:	e03a      	b.n	80127ce <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801275c:	f003 0301 	and.w	r3, r3, #1
 8012760:	2b00      	cmp	r3, #0
 8012762:	d004      	beq.n	801276e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	2201      	movs	r2, #1
 8012768:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801276a:	2301      	movs	r3, #1
 801276c:	e02f      	b.n	80127ce <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801276e:	68f8      	ldr	r0, [r7, #12]
 8012770:	f7ff fb7c 	bl	8011e6c <SDMMC_GetCommandResponse>
 8012774:	4603      	mov	r3, r0
 8012776:	461a      	mov	r2, r3
 8012778:	7afb      	ldrb	r3, [r7, #11]
 801277a:	4293      	cmp	r3, r2
 801277c:	d001      	beq.n	8012782 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801277e:	2301      	movs	r3, #1
 8012780:	e025      	b.n	80127ce <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	4a16      	ldr	r2, [pc, #88]	; (80127e0 <SDMMC_GetCmdResp6+0xec>)
 8012786:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012788:	2100      	movs	r1, #0
 801278a:	68f8      	ldr	r0, [r7, #12]
 801278c:	f7ff fb7b 	bl	8011e86 <SDMMC_GetResponse>
 8012790:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8012792:	697b      	ldr	r3, [r7, #20]
 8012794:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012798:	2b00      	cmp	r3, #0
 801279a:	d106      	bne.n	80127aa <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 801279c:	697b      	ldr	r3, [r7, #20]
 801279e:	0c1b      	lsrs	r3, r3, #16
 80127a0:	b29a      	uxth	r2, r3
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80127a6:	2300      	movs	r3, #0
 80127a8:	e011      	b.n	80127ce <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80127aa:	697b      	ldr	r3, [r7, #20]
 80127ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d002      	beq.n	80127ba <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80127b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80127b8:	e009      	b.n	80127ce <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80127ba:	697b      	ldr	r3, [r7, #20]
 80127bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d002      	beq.n	80127ca <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80127c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80127c8:	e001      	b.n	80127ce <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80127ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80127ce:	4618      	mov	r0, r3
 80127d0:	3720      	adds	r7, #32
 80127d2:	46bd      	mov	sp, r7
 80127d4:	bd80      	pop	{r7, pc}
 80127d6:	bf00      	nop
 80127d8:	24000000 	.word	0x24000000
 80127dc:	10624dd3 	.word	0x10624dd3
 80127e0:	002000c5 	.word	0x002000c5

080127e4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80127e4:	b480      	push	{r7}
 80127e6:	b085      	sub	sp, #20
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80127ec:	4b22      	ldr	r3, [pc, #136]	; (8012878 <SDMMC_GetCmdResp7+0x94>)
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	4a22      	ldr	r2, [pc, #136]	; (801287c <SDMMC_GetCmdResp7+0x98>)
 80127f2:	fba2 2303 	umull	r2, r3, r2, r3
 80127f6:	0a5b      	lsrs	r3, r3, #9
 80127f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80127fc:	fb02 f303 	mul.w	r3, r2, r3
 8012800:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	1e5a      	subs	r2, r3, #1
 8012806:	60fa      	str	r2, [r7, #12]
 8012808:	2b00      	cmp	r3, #0
 801280a:	d102      	bne.n	8012812 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801280c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012810:	e02c      	b.n	801286c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012816:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012818:	68bb      	ldr	r3, [r7, #8]
 801281a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801281e:	2b00      	cmp	r3, #0
 8012820:	d0ef      	beq.n	8012802 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012822:	68bb      	ldr	r3, [r7, #8]
 8012824:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012828:	2b00      	cmp	r3, #0
 801282a:	d1ea      	bne.n	8012802 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012830:	f003 0304 	and.w	r3, r3, #4
 8012834:	2b00      	cmp	r3, #0
 8012836:	d004      	beq.n	8012842 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	2204      	movs	r2, #4
 801283c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801283e:	2304      	movs	r3, #4
 8012840:	e014      	b.n	801286c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012846:	f003 0301 	and.w	r3, r3, #1
 801284a:	2b00      	cmp	r3, #0
 801284c:	d004      	beq.n	8012858 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	2201      	movs	r2, #1
 8012852:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012854:	2301      	movs	r3, #1
 8012856:	e009      	b.n	801286c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801285c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012860:	2b00      	cmp	r3, #0
 8012862:	d002      	beq.n	801286a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	2240      	movs	r2, #64	; 0x40
 8012868:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801286a:	2300      	movs	r3, #0

}
 801286c:	4618      	mov	r0, r3
 801286e:	3714      	adds	r7, #20
 8012870:	46bd      	mov	sp, r7
 8012872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012876:	4770      	bx	lr
 8012878:	24000000 	.word	0x24000000
 801287c:	10624dd3 	.word	0x10624dd3

08012880 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8012880:	b480      	push	{r7}
 8012882:	b085      	sub	sp, #20
 8012884:	af00      	add	r7, sp, #0
 8012886:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012888:	4b11      	ldr	r3, [pc, #68]	; (80128d0 <SDMMC_GetCmdError+0x50>)
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	4a11      	ldr	r2, [pc, #68]	; (80128d4 <SDMMC_GetCmdError+0x54>)
 801288e:	fba2 2303 	umull	r2, r3, r2, r3
 8012892:	0a5b      	lsrs	r3, r3, #9
 8012894:	f241 3288 	movw	r2, #5000	; 0x1388
 8012898:	fb02 f303 	mul.w	r3, r2, r3
 801289c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	1e5a      	subs	r2, r3, #1
 80128a2:	60fa      	str	r2, [r7, #12]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d102      	bne.n	80128ae <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80128a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80128ac:	e009      	b.n	80128c2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d0f1      	beq.n	801289e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	4a06      	ldr	r2, [pc, #24]	; (80128d8 <SDMMC_GetCmdError+0x58>)
 80128be:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80128c0:	2300      	movs	r3, #0
}
 80128c2:	4618      	mov	r0, r3
 80128c4:	3714      	adds	r7, #20
 80128c6:	46bd      	mov	sp, r7
 80128c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128cc:	4770      	bx	lr
 80128ce:	bf00      	nop
 80128d0:	24000000 	.word	0x24000000
 80128d4:	10624dd3 	.word	0x10624dd3
 80128d8:	002000c5 	.word	0x002000c5

080128dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80128dc:	b084      	sub	sp, #16
 80128de:	b580      	push	{r7, lr}
 80128e0:	b084      	sub	sp, #16
 80128e2:	af00      	add	r7, sp, #0
 80128e4:	6078      	str	r0, [r7, #4]
 80128e6:	f107 001c 	add.w	r0, r7, #28
 80128ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80128ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128f0:	2b01      	cmp	r3, #1
 80128f2:	d120      	bne.n	8012936 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	68da      	ldr	r2, [r3, #12]
 8012904:	4b2a      	ldr	r3, [pc, #168]	; (80129b0 <USB_CoreInit+0xd4>)
 8012906:	4013      	ands	r3, r2
 8012908:	687a      	ldr	r2, [r7, #4]
 801290a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	68db      	ldr	r3, [r3, #12]
 8012910:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801291a:	2b01      	cmp	r3, #1
 801291c:	d105      	bne.n	801292a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	68db      	ldr	r3, [r3, #12]
 8012922:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801292a:	6878      	ldr	r0, [r7, #4]
 801292c:	f001 faf8 	bl	8013f20 <USB_CoreReset>
 8012930:	4603      	mov	r3, r0
 8012932:	73fb      	strb	r3, [r7, #15]
 8012934:	e01a      	b.n	801296c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	68db      	ldr	r3, [r3, #12]
 801293a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012942:	6878      	ldr	r0, [r7, #4]
 8012944:	f001 faec 	bl	8013f20 <USB_CoreReset>
 8012948:	4603      	mov	r3, r0
 801294a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801294c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801294e:	2b00      	cmp	r3, #0
 8012950:	d106      	bne.n	8012960 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012956:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	639a      	str	r2, [r3, #56]	; 0x38
 801295e:	e005      	b.n	801296c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012964:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801296e:	2b01      	cmp	r3, #1
 8012970:	d116      	bne.n	80129a0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012976:	b29a      	uxth	r2, r3
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012980:	4b0c      	ldr	r3, [pc, #48]	; (80129b4 <USB_CoreInit+0xd8>)
 8012982:	4313      	orrs	r3, r2
 8012984:	687a      	ldr	r2, [r7, #4]
 8012986:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	689b      	ldr	r3, [r3, #8]
 801298c:	f043 0206 	orr.w	r2, r3, #6
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	689b      	ldr	r3, [r3, #8]
 8012998:	f043 0220 	orr.w	r2, r3, #32
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80129a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80129a2:	4618      	mov	r0, r3
 80129a4:	3710      	adds	r7, #16
 80129a6:	46bd      	mov	sp, r7
 80129a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80129ac:	b004      	add	sp, #16
 80129ae:	4770      	bx	lr
 80129b0:	ffbdffbf 	.word	0xffbdffbf
 80129b4:	03ee0000 	.word	0x03ee0000

080129b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80129b8:	b480      	push	{r7}
 80129ba:	b087      	sub	sp, #28
 80129bc:	af00      	add	r7, sp, #0
 80129be:	60f8      	str	r0, [r7, #12]
 80129c0:	60b9      	str	r1, [r7, #8]
 80129c2:	4613      	mov	r3, r2
 80129c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80129c6:	79fb      	ldrb	r3, [r7, #7]
 80129c8:	2b02      	cmp	r3, #2
 80129ca:	d165      	bne.n	8012a98 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80129cc:	68bb      	ldr	r3, [r7, #8]
 80129ce:	4a41      	ldr	r2, [pc, #260]	; (8012ad4 <USB_SetTurnaroundTime+0x11c>)
 80129d0:	4293      	cmp	r3, r2
 80129d2:	d906      	bls.n	80129e2 <USB_SetTurnaroundTime+0x2a>
 80129d4:	68bb      	ldr	r3, [r7, #8]
 80129d6:	4a40      	ldr	r2, [pc, #256]	; (8012ad8 <USB_SetTurnaroundTime+0x120>)
 80129d8:	4293      	cmp	r3, r2
 80129da:	d202      	bcs.n	80129e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80129dc:	230f      	movs	r3, #15
 80129de:	617b      	str	r3, [r7, #20]
 80129e0:	e062      	b.n	8012aa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80129e2:	68bb      	ldr	r3, [r7, #8]
 80129e4:	4a3c      	ldr	r2, [pc, #240]	; (8012ad8 <USB_SetTurnaroundTime+0x120>)
 80129e6:	4293      	cmp	r3, r2
 80129e8:	d306      	bcc.n	80129f8 <USB_SetTurnaroundTime+0x40>
 80129ea:	68bb      	ldr	r3, [r7, #8]
 80129ec:	4a3b      	ldr	r2, [pc, #236]	; (8012adc <USB_SetTurnaroundTime+0x124>)
 80129ee:	4293      	cmp	r3, r2
 80129f0:	d202      	bcs.n	80129f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80129f2:	230e      	movs	r3, #14
 80129f4:	617b      	str	r3, [r7, #20]
 80129f6:	e057      	b.n	8012aa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80129f8:	68bb      	ldr	r3, [r7, #8]
 80129fa:	4a38      	ldr	r2, [pc, #224]	; (8012adc <USB_SetTurnaroundTime+0x124>)
 80129fc:	4293      	cmp	r3, r2
 80129fe:	d306      	bcc.n	8012a0e <USB_SetTurnaroundTime+0x56>
 8012a00:	68bb      	ldr	r3, [r7, #8]
 8012a02:	4a37      	ldr	r2, [pc, #220]	; (8012ae0 <USB_SetTurnaroundTime+0x128>)
 8012a04:	4293      	cmp	r3, r2
 8012a06:	d202      	bcs.n	8012a0e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8012a08:	230d      	movs	r3, #13
 8012a0a:	617b      	str	r3, [r7, #20]
 8012a0c:	e04c      	b.n	8012aa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8012a0e:	68bb      	ldr	r3, [r7, #8]
 8012a10:	4a33      	ldr	r2, [pc, #204]	; (8012ae0 <USB_SetTurnaroundTime+0x128>)
 8012a12:	4293      	cmp	r3, r2
 8012a14:	d306      	bcc.n	8012a24 <USB_SetTurnaroundTime+0x6c>
 8012a16:	68bb      	ldr	r3, [r7, #8]
 8012a18:	4a32      	ldr	r2, [pc, #200]	; (8012ae4 <USB_SetTurnaroundTime+0x12c>)
 8012a1a:	4293      	cmp	r3, r2
 8012a1c:	d802      	bhi.n	8012a24 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8012a1e:	230c      	movs	r3, #12
 8012a20:	617b      	str	r3, [r7, #20]
 8012a22:	e041      	b.n	8012aa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012a24:	68bb      	ldr	r3, [r7, #8]
 8012a26:	4a2f      	ldr	r2, [pc, #188]	; (8012ae4 <USB_SetTurnaroundTime+0x12c>)
 8012a28:	4293      	cmp	r3, r2
 8012a2a:	d906      	bls.n	8012a3a <USB_SetTurnaroundTime+0x82>
 8012a2c:	68bb      	ldr	r3, [r7, #8]
 8012a2e:	4a2e      	ldr	r2, [pc, #184]	; (8012ae8 <USB_SetTurnaroundTime+0x130>)
 8012a30:	4293      	cmp	r3, r2
 8012a32:	d802      	bhi.n	8012a3a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012a34:	230b      	movs	r3, #11
 8012a36:	617b      	str	r3, [r7, #20]
 8012a38:	e036      	b.n	8012aa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8012a3a:	68bb      	ldr	r3, [r7, #8]
 8012a3c:	4a2a      	ldr	r2, [pc, #168]	; (8012ae8 <USB_SetTurnaroundTime+0x130>)
 8012a3e:	4293      	cmp	r3, r2
 8012a40:	d906      	bls.n	8012a50 <USB_SetTurnaroundTime+0x98>
 8012a42:	68bb      	ldr	r3, [r7, #8]
 8012a44:	4a29      	ldr	r2, [pc, #164]	; (8012aec <USB_SetTurnaroundTime+0x134>)
 8012a46:	4293      	cmp	r3, r2
 8012a48:	d802      	bhi.n	8012a50 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8012a4a:	230a      	movs	r3, #10
 8012a4c:	617b      	str	r3, [r7, #20]
 8012a4e:	e02b      	b.n	8012aa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012a50:	68bb      	ldr	r3, [r7, #8]
 8012a52:	4a26      	ldr	r2, [pc, #152]	; (8012aec <USB_SetTurnaroundTime+0x134>)
 8012a54:	4293      	cmp	r3, r2
 8012a56:	d906      	bls.n	8012a66 <USB_SetTurnaroundTime+0xae>
 8012a58:	68bb      	ldr	r3, [r7, #8]
 8012a5a:	4a25      	ldr	r2, [pc, #148]	; (8012af0 <USB_SetTurnaroundTime+0x138>)
 8012a5c:	4293      	cmp	r3, r2
 8012a5e:	d202      	bcs.n	8012a66 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012a60:	2309      	movs	r3, #9
 8012a62:	617b      	str	r3, [r7, #20]
 8012a64:	e020      	b.n	8012aa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8012a66:	68bb      	ldr	r3, [r7, #8]
 8012a68:	4a21      	ldr	r2, [pc, #132]	; (8012af0 <USB_SetTurnaroundTime+0x138>)
 8012a6a:	4293      	cmp	r3, r2
 8012a6c:	d306      	bcc.n	8012a7c <USB_SetTurnaroundTime+0xc4>
 8012a6e:	68bb      	ldr	r3, [r7, #8]
 8012a70:	4a20      	ldr	r2, [pc, #128]	; (8012af4 <USB_SetTurnaroundTime+0x13c>)
 8012a72:	4293      	cmp	r3, r2
 8012a74:	d802      	bhi.n	8012a7c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8012a76:	2308      	movs	r3, #8
 8012a78:	617b      	str	r3, [r7, #20]
 8012a7a:	e015      	b.n	8012aa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012a7c:	68bb      	ldr	r3, [r7, #8]
 8012a7e:	4a1d      	ldr	r2, [pc, #116]	; (8012af4 <USB_SetTurnaroundTime+0x13c>)
 8012a80:	4293      	cmp	r3, r2
 8012a82:	d906      	bls.n	8012a92 <USB_SetTurnaroundTime+0xda>
 8012a84:	68bb      	ldr	r3, [r7, #8]
 8012a86:	4a1c      	ldr	r2, [pc, #112]	; (8012af8 <USB_SetTurnaroundTime+0x140>)
 8012a88:	4293      	cmp	r3, r2
 8012a8a:	d202      	bcs.n	8012a92 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8012a8c:	2307      	movs	r3, #7
 8012a8e:	617b      	str	r3, [r7, #20]
 8012a90:	e00a      	b.n	8012aa8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8012a92:	2306      	movs	r3, #6
 8012a94:	617b      	str	r3, [r7, #20]
 8012a96:	e007      	b.n	8012aa8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012a98:	79fb      	ldrb	r3, [r7, #7]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d102      	bne.n	8012aa4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8012a9e:	2309      	movs	r3, #9
 8012aa0:	617b      	str	r3, [r7, #20]
 8012aa2:	e001      	b.n	8012aa8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8012aa4:	2309      	movs	r3, #9
 8012aa6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	68db      	ldr	r3, [r3, #12]
 8012aac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	68da      	ldr	r2, [r3, #12]
 8012ab8:	697b      	ldr	r3, [r7, #20]
 8012aba:	029b      	lsls	r3, r3, #10
 8012abc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8012ac0:	431a      	orrs	r2, r3
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012ac6:	2300      	movs	r3, #0
}
 8012ac8:	4618      	mov	r0, r3
 8012aca:	371c      	adds	r7, #28
 8012acc:	46bd      	mov	sp, r7
 8012ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad2:	4770      	bx	lr
 8012ad4:	00d8acbf 	.word	0x00d8acbf
 8012ad8:	00e4e1c0 	.word	0x00e4e1c0
 8012adc:	00f42400 	.word	0x00f42400
 8012ae0:	01067380 	.word	0x01067380
 8012ae4:	011a499f 	.word	0x011a499f
 8012ae8:	01312cff 	.word	0x01312cff
 8012aec:	014ca43f 	.word	0x014ca43f
 8012af0:	016e3600 	.word	0x016e3600
 8012af4:	01a6ab1f 	.word	0x01a6ab1f
 8012af8:	01e84800 	.word	0x01e84800

08012afc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012afc:	b480      	push	{r7}
 8012afe:	b083      	sub	sp, #12
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	689b      	ldr	r3, [r3, #8]
 8012b08:	f043 0201 	orr.w	r2, r3, #1
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012b10:	2300      	movs	r3, #0
}
 8012b12:	4618      	mov	r0, r3
 8012b14:	370c      	adds	r7, #12
 8012b16:	46bd      	mov	sp, r7
 8012b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b1c:	4770      	bx	lr

08012b1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012b1e:	b480      	push	{r7}
 8012b20:	b083      	sub	sp, #12
 8012b22:	af00      	add	r7, sp, #0
 8012b24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	689b      	ldr	r3, [r3, #8]
 8012b2a:	f023 0201 	bic.w	r2, r3, #1
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012b32:	2300      	movs	r3, #0
}
 8012b34:	4618      	mov	r0, r3
 8012b36:	370c      	adds	r7, #12
 8012b38:	46bd      	mov	sp, r7
 8012b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b3e:	4770      	bx	lr

08012b40 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012b40:	b580      	push	{r7, lr}
 8012b42:	b084      	sub	sp, #16
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	6078      	str	r0, [r7, #4]
 8012b48:	460b      	mov	r3, r1
 8012b4a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8012b4c:	2300      	movs	r3, #0
 8012b4e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	68db      	ldr	r3, [r3, #12]
 8012b54:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012b5c:	78fb      	ldrb	r3, [r7, #3]
 8012b5e:	2b01      	cmp	r3, #1
 8012b60:	d115      	bne.n	8012b8e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	68db      	ldr	r3, [r3, #12]
 8012b66:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012b6e:	2001      	movs	r0, #1
 8012b70:	f7f0 ff18 	bl	80039a4 <HAL_Delay>
      ms++;
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	3301      	adds	r3, #1
 8012b78:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8012b7a:	6878      	ldr	r0, [r7, #4]
 8012b7c:	f001 f93f 	bl	8013dfe <USB_GetMode>
 8012b80:	4603      	mov	r3, r0
 8012b82:	2b01      	cmp	r3, #1
 8012b84:	d01e      	beq.n	8012bc4 <USB_SetCurrentMode+0x84>
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	2b31      	cmp	r3, #49	; 0x31
 8012b8a:	d9f0      	bls.n	8012b6e <USB_SetCurrentMode+0x2e>
 8012b8c:	e01a      	b.n	8012bc4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8012b8e:	78fb      	ldrb	r3, [r7, #3]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d115      	bne.n	8012bc0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	68db      	ldr	r3, [r3, #12]
 8012b98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012ba0:	2001      	movs	r0, #1
 8012ba2:	f7f0 feff 	bl	80039a4 <HAL_Delay>
      ms++;
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	3301      	adds	r3, #1
 8012baa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8012bac:	6878      	ldr	r0, [r7, #4]
 8012bae:	f001 f926 	bl	8013dfe <USB_GetMode>
 8012bb2:	4603      	mov	r3, r0
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d005      	beq.n	8012bc4 <USB_SetCurrentMode+0x84>
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	2b31      	cmp	r3, #49	; 0x31
 8012bbc:	d9f0      	bls.n	8012ba0 <USB_SetCurrentMode+0x60>
 8012bbe:	e001      	b.n	8012bc4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8012bc0:	2301      	movs	r3, #1
 8012bc2:	e005      	b.n	8012bd0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	2b32      	cmp	r3, #50	; 0x32
 8012bc8:	d101      	bne.n	8012bce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8012bca:	2301      	movs	r3, #1
 8012bcc:	e000      	b.n	8012bd0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8012bce:	2300      	movs	r3, #0
}
 8012bd0:	4618      	mov	r0, r3
 8012bd2:	3710      	adds	r7, #16
 8012bd4:	46bd      	mov	sp, r7
 8012bd6:	bd80      	pop	{r7, pc}

08012bd8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012bd8:	b084      	sub	sp, #16
 8012bda:	b580      	push	{r7, lr}
 8012bdc:	b086      	sub	sp, #24
 8012bde:	af00      	add	r7, sp, #0
 8012be0:	6078      	str	r0, [r7, #4]
 8012be2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8012be6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8012bea:	2300      	movs	r3, #0
 8012bec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	613b      	str	r3, [r7, #16]
 8012bf6:	e009      	b.n	8012c0c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8012bf8:	687a      	ldr	r2, [r7, #4]
 8012bfa:	693b      	ldr	r3, [r7, #16]
 8012bfc:	3340      	adds	r3, #64	; 0x40
 8012bfe:	009b      	lsls	r3, r3, #2
 8012c00:	4413      	add	r3, r2
 8012c02:	2200      	movs	r2, #0
 8012c04:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8012c06:	693b      	ldr	r3, [r7, #16]
 8012c08:	3301      	adds	r3, #1
 8012c0a:	613b      	str	r3, [r7, #16]
 8012c0c:	693b      	ldr	r3, [r7, #16]
 8012c0e:	2b0e      	cmp	r3, #14
 8012c10:	d9f2      	bls.n	8012bf8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8012c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d11c      	bne.n	8012c52 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c1e:	685b      	ldr	r3, [r3, #4]
 8012c20:	68fa      	ldr	r2, [r7, #12]
 8012c22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012c26:	f043 0302 	orr.w	r3, r3, #2
 8012c2a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c30:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	601a      	str	r2, [r3, #0]
 8012c50:	e005      	b.n	8012c5e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c56:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012c64:	461a      	mov	r2, r3
 8012c66:	2300      	movs	r3, #0
 8012c68:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c70:	4619      	mov	r1, r3
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c78:	461a      	mov	r2, r3
 8012c7a:	680b      	ldr	r3, [r1, #0]
 8012c7c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c80:	2b01      	cmp	r3, #1
 8012c82:	d10c      	bne.n	8012c9e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8012c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d104      	bne.n	8012c94 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8012c8a:	2100      	movs	r1, #0
 8012c8c:	6878      	ldr	r0, [r7, #4]
 8012c8e:	f000 f965 	bl	8012f5c <USB_SetDevSpeed>
 8012c92:	e008      	b.n	8012ca6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8012c94:	2101      	movs	r1, #1
 8012c96:	6878      	ldr	r0, [r7, #4]
 8012c98:	f000 f960 	bl	8012f5c <USB_SetDevSpeed>
 8012c9c:	e003      	b.n	8012ca6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012c9e:	2103      	movs	r1, #3
 8012ca0:	6878      	ldr	r0, [r7, #4]
 8012ca2:	f000 f95b 	bl	8012f5c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012ca6:	2110      	movs	r1, #16
 8012ca8:	6878      	ldr	r0, [r7, #4]
 8012caa:	f000 f8f3 	bl	8012e94 <USB_FlushTxFifo>
 8012cae:	4603      	mov	r3, r0
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d001      	beq.n	8012cb8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8012cb4:	2301      	movs	r3, #1
 8012cb6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012cb8:	6878      	ldr	r0, [r7, #4]
 8012cba:	f000 f91f 	bl	8012efc <USB_FlushRxFifo>
 8012cbe:	4603      	mov	r3, r0
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d001      	beq.n	8012cc8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8012cc4:	2301      	movs	r3, #1
 8012cc6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012cce:	461a      	mov	r2, r3
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012cda:	461a      	mov	r2, r3
 8012cdc:	2300      	movs	r3, #0
 8012cde:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ce6:	461a      	mov	r2, r3
 8012ce8:	2300      	movs	r3, #0
 8012cea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012cec:	2300      	movs	r3, #0
 8012cee:	613b      	str	r3, [r7, #16]
 8012cf0:	e043      	b.n	8012d7a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012cf2:	693b      	ldr	r3, [r7, #16]
 8012cf4:	015a      	lsls	r2, r3, #5
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	4413      	add	r3, r2
 8012cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012d04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012d08:	d118      	bne.n	8012d3c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8012d0a:	693b      	ldr	r3, [r7, #16]
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d10a      	bne.n	8012d26 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012d10:	693b      	ldr	r3, [r7, #16]
 8012d12:	015a      	lsls	r2, r3, #5
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	4413      	add	r3, r2
 8012d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d1c:	461a      	mov	r2, r3
 8012d1e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012d22:	6013      	str	r3, [r2, #0]
 8012d24:	e013      	b.n	8012d4e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012d26:	693b      	ldr	r3, [r7, #16]
 8012d28:	015a      	lsls	r2, r3, #5
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	4413      	add	r3, r2
 8012d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d32:	461a      	mov	r2, r3
 8012d34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012d38:	6013      	str	r3, [r2, #0]
 8012d3a:	e008      	b.n	8012d4e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012d3c:	693b      	ldr	r3, [r7, #16]
 8012d3e:	015a      	lsls	r2, r3, #5
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	4413      	add	r3, r2
 8012d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d48:	461a      	mov	r2, r3
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012d4e:	693b      	ldr	r3, [r7, #16]
 8012d50:	015a      	lsls	r2, r3, #5
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	4413      	add	r3, r2
 8012d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d5a:	461a      	mov	r2, r3
 8012d5c:	2300      	movs	r3, #0
 8012d5e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012d60:	693b      	ldr	r3, [r7, #16]
 8012d62:	015a      	lsls	r2, r3, #5
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	4413      	add	r3, r2
 8012d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d6c:	461a      	mov	r2, r3
 8012d6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012d72:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012d74:	693b      	ldr	r3, [r7, #16]
 8012d76:	3301      	adds	r3, #1
 8012d78:	613b      	str	r3, [r7, #16]
 8012d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d7c:	693a      	ldr	r2, [r7, #16]
 8012d7e:	429a      	cmp	r2, r3
 8012d80:	d3b7      	bcc.n	8012cf2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012d82:	2300      	movs	r3, #0
 8012d84:	613b      	str	r3, [r7, #16]
 8012d86:	e043      	b.n	8012e10 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012d88:	693b      	ldr	r3, [r7, #16]
 8012d8a:	015a      	lsls	r2, r3, #5
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	4413      	add	r3, r2
 8012d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012d9e:	d118      	bne.n	8012dd2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8012da0:	693b      	ldr	r3, [r7, #16]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d10a      	bne.n	8012dbc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012da6:	693b      	ldr	r3, [r7, #16]
 8012da8:	015a      	lsls	r2, r3, #5
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	4413      	add	r3, r2
 8012dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012db2:	461a      	mov	r2, r3
 8012db4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012db8:	6013      	str	r3, [r2, #0]
 8012dba:	e013      	b.n	8012de4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012dbc:	693b      	ldr	r3, [r7, #16]
 8012dbe:	015a      	lsls	r2, r3, #5
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	4413      	add	r3, r2
 8012dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012dc8:	461a      	mov	r2, r3
 8012dca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012dce:	6013      	str	r3, [r2, #0]
 8012dd0:	e008      	b.n	8012de4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012dd2:	693b      	ldr	r3, [r7, #16]
 8012dd4:	015a      	lsls	r2, r3, #5
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	4413      	add	r3, r2
 8012dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012dde:	461a      	mov	r2, r3
 8012de0:	2300      	movs	r3, #0
 8012de2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012de4:	693b      	ldr	r3, [r7, #16]
 8012de6:	015a      	lsls	r2, r3, #5
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	4413      	add	r3, r2
 8012dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012df0:	461a      	mov	r2, r3
 8012df2:	2300      	movs	r3, #0
 8012df4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012df6:	693b      	ldr	r3, [r7, #16]
 8012df8:	015a      	lsls	r2, r3, #5
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	4413      	add	r3, r2
 8012dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e02:	461a      	mov	r2, r3
 8012e04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012e08:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012e0a:	693b      	ldr	r3, [r7, #16]
 8012e0c:	3301      	adds	r3, #1
 8012e0e:	613b      	str	r3, [r7, #16]
 8012e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e12:	693a      	ldr	r2, [r7, #16]
 8012e14:	429a      	cmp	r2, r3
 8012e16:	d3b7      	bcc.n	8012d88 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e1e:	691b      	ldr	r3, [r3, #16]
 8012e20:	68fa      	ldr	r2, [r7, #12]
 8012e22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012e26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012e2a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	2200      	movs	r2, #0
 8012e30:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8012e38:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d105      	bne.n	8012e4c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	699b      	ldr	r3, [r3, #24]
 8012e44:	f043 0210 	orr.w	r2, r3, #16
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	699a      	ldr	r2, [r3, #24]
 8012e50:	4b0e      	ldr	r3, [pc, #56]	; (8012e8c <USB_DevInit+0x2b4>)
 8012e52:	4313      	orrs	r3, r2
 8012e54:	687a      	ldr	r2, [r7, #4]
 8012e56:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8012e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d005      	beq.n	8012e6a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	699b      	ldr	r3, [r3, #24]
 8012e62:	f043 0208 	orr.w	r2, r3, #8
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8012e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e6c:	2b01      	cmp	r3, #1
 8012e6e:	d105      	bne.n	8012e7c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	699a      	ldr	r2, [r3, #24]
 8012e74:	4b06      	ldr	r3, [pc, #24]	; (8012e90 <USB_DevInit+0x2b8>)
 8012e76:	4313      	orrs	r3, r2
 8012e78:	687a      	ldr	r2, [r7, #4]
 8012e7a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e7e:	4618      	mov	r0, r3
 8012e80:	3718      	adds	r7, #24
 8012e82:	46bd      	mov	sp, r7
 8012e84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012e88:	b004      	add	sp, #16
 8012e8a:	4770      	bx	lr
 8012e8c:	803c3800 	.word	0x803c3800
 8012e90:	40000004 	.word	0x40000004

08012e94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012e94:	b480      	push	{r7}
 8012e96:	b085      	sub	sp, #20
 8012e98:	af00      	add	r7, sp, #0
 8012e9a:	6078      	str	r0, [r7, #4]
 8012e9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	3301      	adds	r3, #1
 8012ea6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	4a13      	ldr	r2, [pc, #76]	; (8012ef8 <USB_FlushTxFifo+0x64>)
 8012eac:	4293      	cmp	r3, r2
 8012eae:	d901      	bls.n	8012eb4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8012eb0:	2303      	movs	r3, #3
 8012eb2:	e01b      	b.n	8012eec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	691b      	ldr	r3, [r3, #16]
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	daf2      	bge.n	8012ea2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8012ebc:	2300      	movs	r3, #0
 8012ebe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012ec0:	683b      	ldr	r3, [r7, #0]
 8012ec2:	019b      	lsls	r3, r3, #6
 8012ec4:	f043 0220 	orr.w	r2, r3, #32
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	3301      	adds	r3, #1
 8012ed0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	4a08      	ldr	r2, [pc, #32]	; (8012ef8 <USB_FlushTxFifo+0x64>)
 8012ed6:	4293      	cmp	r3, r2
 8012ed8:	d901      	bls.n	8012ede <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8012eda:	2303      	movs	r3, #3
 8012edc:	e006      	b.n	8012eec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	691b      	ldr	r3, [r3, #16]
 8012ee2:	f003 0320 	and.w	r3, r3, #32
 8012ee6:	2b20      	cmp	r3, #32
 8012ee8:	d0f0      	beq.n	8012ecc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8012eea:	2300      	movs	r3, #0
}
 8012eec:	4618      	mov	r0, r3
 8012eee:	3714      	adds	r7, #20
 8012ef0:	46bd      	mov	sp, r7
 8012ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ef6:	4770      	bx	lr
 8012ef8:	00030d40 	.word	0x00030d40

08012efc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012efc:	b480      	push	{r7}
 8012efe:	b085      	sub	sp, #20
 8012f00:	af00      	add	r7, sp, #0
 8012f02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012f04:	2300      	movs	r3, #0
 8012f06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	3301      	adds	r3, #1
 8012f0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	4a11      	ldr	r2, [pc, #68]	; (8012f58 <USB_FlushRxFifo+0x5c>)
 8012f12:	4293      	cmp	r3, r2
 8012f14:	d901      	bls.n	8012f1a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8012f16:	2303      	movs	r3, #3
 8012f18:	e018      	b.n	8012f4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	691b      	ldr	r3, [r3, #16]
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	daf2      	bge.n	8012f08 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8012f22:	2300      	movs	r3, #0
 8012f24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	2210      	movs	r2, #16
 8012f2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	3301      	adds	r3, #1
 8012f30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	4a08      	ldr	r2, [pc, #32]	; (8012f58 <USB_FlushRxFifo+0x5c>)
 8012f36:	4293      	cmp	r3, r2
 8012f38:	d901      	bls.n	8012f3e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8012f3a:	2303      	movs	r3, #3
 8012f3c:	e006      	b.n	8012f4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	691b      	ldr	r3, [r3, #16]
 8012f42:	f003 0310 	and.w	r3, r3, #16
 8012f46:	2b10      	cmp	r3, #16
 8012f48:	d0f0      	beq.n	8012f2c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8012f4a:	2300      	movs	r3, #0
}
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	3714      	adds	r7, #20
 8012f50:	46bd      	mov	sp, r7
 8012f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f56:	4770      	bx	lr
 8012f58:	00030d40 	.word	0x00030d40

08012f5c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8012f5c:	b480      	push	{r7}
 8012f5e:	b085      	sub	sp, #20
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	6078      	str	r0, [r7, #4]
 8012f64:	460b      	mov	r3, r1
 8012f66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f72:	681a      	ldr	r2, [r3, #0]
 8012f74:	78fb      	ldrb	r3, [r7, #3]
 8012f76:	68f9      	ldr	r1, [r7, #12]
 8012f78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012f7c:	4313      	orrs	r3, r2
 8012f7e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8012f80:	2300      	movs	r3, #0
}
 8012f82:	4618      	mov	r0, r3
 8012f84:	3714      	adds	r7, #20
 8012f86:	46bd      	mov	sp, r7
 8012f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f8c:	4770      	bx	lr

08012f8e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8012f8e:	b480      	push	{r7}
 8012f90:	b087      	sub	sp, #28
 8012f92:	af00      	add	r7, sp, #0
 8012f94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8012f9a:	693b      	ldr	r3, [r7, #16]
 8012f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fa0:	689b      	ldr	r3, [r3, #8]
 8012fa2:	f003 0306 	and.w	r3, r3, #6
 8012fa6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d102      	bne.n	8012fb4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8012fae:	2300      	movs	r3, #0
 8012fb0:	75fb      	strb	r3, [r7, #23]
 8012fb2:	e00a      	b.n	8012fca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	2b02      	cmp	r3, #2
 8012fb8:	d002      	beq.n	8012fc0 <USB_GetDevSpeed+0x32>
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	2b06      	cmp	r3, #6
 8012fbe:	d102      	bne.n	8012fc6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8012fc0:	2302      	movs	r3, #2
 8012fc2:	75fb      	strb	r3, [r7, #23]
 8012fc4:	e001      	b.n	8012fca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8012fc6:	230f      	movs	r3, #15
 8012fc8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8012fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8012fcc:	4618      	mov	r0, r3
 8012fce:	371c      	adds	r7, #28
 8012fd0:	46bd      	mov	sp, r7
 8012fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fd6:	4770      	bx	lr

08012fd8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012fd8:	b480      	push	{r7}
 8012fda:	b085      	sub	sp, #20
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	6078      	str	r0, [r7, #4]
 8012fe0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012fe6:	683b      	ldr	r3, [r7, #0]
 8012fe8:	781b      	ldrb	r3, [r3, #0]
 8012fea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012fec:	683b      	ldr	r3, [r7, #0]
 8012fee:	785b      	ldrb	r3, [r3, #1]
 8012ff0:	2b01      	cmp	r3, #1
 8012ff2:	d139      	bne.n	8013068 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ffa:	69da      	ldr	r2, [r3, #28]
 8012ffc:	683b      	ldr	r3, [r7, #0]
 8012ffe:	781b      	ldrb	r3, [r3, #0]
 8013000:	f003 030f 	and.w	r3, r3, #15
 8013004:	2101      	movs	r1, #1
 8013006:	fa01 f303 	lsl.w	r3, r1, r3
 801300a:	b29b      	uxth	r3, r3
 801300c:	68f9      	ldr	r1, [r7, #12]
 801300e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013012:	4313      	orrs	r3, r2
 8013014:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8013016:	68bb      	ldr	r3, [r7, #8]
 8013018:	015a      	lsls	r2, r3, #5
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	4413      	add	r3, r2
 801301e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013028:	2b00      	cmp	r3, #0
 801302a:	d153      	bne.n	80130d4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801302c:	68bb      	ldr	r3, [r7, #8]
 801302e:	015a      	lsls	r2, r3, #5
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	4413      	add	r3, r2
 8013034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013038:	681a      	ldr	r2, [r3, #0]
 801303a:	683b      	ldr	r3, [r7, #0]
 801303c:	689b      	ldr	r3, [r3, #8]
 801303e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013042:	683b      	ldr	r3, [r7, #0]
 8013044:	791b      	ldrb	r3, [r3, #4]
 8013046:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013048:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801304a:	68bb      	ldr	r3, [r7, #8]
 801304c:	059b      	lsls	r3, r3, #22
 801304e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013050:	431a      	orrs	r2, r3
 8013052:	68bb      	ldr	r3, [r7, #8]
 8013054:	0159      	lsls	r1, r3, #5
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	440b      	add	r3, r1
 801305a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801305e:	4619      	mov	r1, r3
 8013060:	4b20      	ldr	r3, [pc, #128]	; (80130e4 <USB_ActivateEndpoint+0x10c>)
 8013062:	4313      	orrs	r3, r2
 8013064:	600b      	str	r3, [r1, #0]
 8013066:	e035      	b.n	80130d4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801306e:	69da      	ldr	r2, [r3, #28]
 8013070:	683b      	ldr	r3, [r7, #0]
 8013072:	781b      	ldrb	r3, [r3, #0]
 8013074:	f003 030f 	and.w	r3, r3, #15
 8013078:	2101      	movs	r1, #1
 801307a:	fa01 f303 	lsl.w	r3, r1, r3
 801307e:	041b      	lsls	r3, r3, #16
 8013080:	68f9      	ldr	r1, [r7, #12]
 8013082:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013086:	4313      	orrs	r3, r2
 8013088:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801308a:	68bb      	ldr	r3, [r7, #8]
 801308c:	015a      	lsls	r2, r3, #5
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	4413      	add	r3, r2
 8013092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801309c:	2b00      	cmp	r3, #0
 801309e:	d119      	bne.n	80130d4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80130a0:	68bb      	ldr	r3, [r7, #8]
 80130a2:	015a      	lsls	r2, r3, #5
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	4413      	add	r3, r2
 80130a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80130ac:	681a      	ldr	r2, [r3, #0]
 80130ae:	683b      	ldr	r3, [r7, #0]
 80130b0:	689b      	ldr	r3, [r3, #8]
 80130b2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80130b6:	683b      	ldr	r3, [r7, #0]
 80130b8:	791b      	ldrb	r3, [r3, #4]
 80130ba:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80130bc:	430b      	orrs	r3, r1
 80130be:	431a      	orrs	r2, r3
 80130c0:	68bb      	ldr	r3, [r7, #8]
 80130c2:	0159      	lsls	r1, r3, #5
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	440b      	add	r3, r1
 80130c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80130cc:	4619      	mov	r1, r3
 80130ce:	4b05      	ldr	r3, [pc, #20]	; (80130e4 <USB_ActivateEndpoint+0x10c>)
 80130d0:	4313      	orrs	r3, r2
 80130d2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80130d4:	2300      	movs	r3, #0
}
 80130d6:	4618      	mov	r0, r3
 80130d8:	3714      	adds	r7, #20
 80130da:	46bd      	mov	sp, r7
 80130dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130e0:	4770      	bx	lr
 80130e2:	bf00      	nop
 80130e4:	10008000 	.word	0x10008000

080130e8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80130e8:	b480      	push	{r7}
 80130ea:	b085      	sub	sp, #20
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	6078      	str	r0, [r7, #4]
 80130f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80130f6:	683b      	ldr	r3, [r7, #0]
 80130f8:	781b      	ldrb	r3, [r3, #0]
 80130fa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80130fc:	683b      	ldr	r3, [r7, #0]
 80130fe:	785b      	ldrb	r3, [r3, #1]
 8013100:	2b01      	cmp	r3, #1
 8013102:	d161      	bne.n	80131c8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013104:	68bb      	ldr	r3, [r7, #8]
 8013106:	015a      	lsls	r2, r3, #5
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	4413      	add	r3, r2
 801310c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013116:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801311a:	d11f      	bne.n	801315c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801311c:	68bb      	ldr	r3, [r7, #8]
 801311e:	015a      	lsls	r2, r3, #5
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	4413      	add	r3, r2
 8013124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	68ba      	ldr	r2, [r7, #8]
 801312c:	0151      	lsls	r1, r2, #5
 801312e:	68fa      	ldr	r2, [r7, #12]
 8013130:	440a      	add	r2, r1
 8013132:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013136:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801313a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801313c:	68bb      	ldr	r3, [r7, #8]
 801313e:	015a      	lsls	r2, r3, #5
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	4413      	add	r3, r2
 8013144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	68ba      	ldr	r2, [r7, #8]
 801314c:	0151      	lsls	r1, r2, #5
 801314e:	68fa      	ldr	r2, [r7, #12]
 8013150:	440a      	add	r2, r1
 8013152:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013156:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801315a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013162:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013164:	683b      	ldr	r3, [r7, #0]
 8013166:	781b      	ldrb	r3, [r3, #0]
 8013168:	f003 030f 	and.w	r3, r3, #15
 801316c:	2101      	movs	r1, #1
 801316e:	fa01 f303 	lsl.w	r3, r1, r3
 8013172:	b29b      	uxth	r3, r3
 8013174:	43db      	mvns	r3, r3
 8013176:	68f9      	ldr	r1, [r7, #12]
 8013178:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801317c:	4013      	ands	r3, r2
 801317e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013186:	69da      	ldr	r2, [r3, #28]
 8013188:	683b      	ldr	r3, [r7, #0]
 801318a:	781b      	ldrb	r3, [r3, #0]
 801318c:	f003 030f 	and.w	r3, r3, #15
 8013190:	2101      	movs	r1, #1
 8013192:	fa01 f303 	lsl.w	r3, r1, r3
 8013196:	b29b      	uxth	r3, r3
 8013198:	43db      	mvns	r3, r3
 801319a:	68f9      	ldr	r1, [r7, #12]
 801319c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80131a0:	4013      	ands	r3, r2
 80131a2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80131a4:	68bb      	ldr	r3, [r7, #8]
 80131a6:	015a      	lsls	r2, r3, #5
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	4413      	add	r3, r2
 80131ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131b0:	681a      	ldr	r2, [r3, #0]
 80131b2:	68bb      	ldr	r3, [r7, #8]
 80131b4:	0159      	lsls	r1, r3, #5
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	440b      	add	r3, r1
 80131ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131be:	4619      	mov	r1, r3
 80131c0:	4b35      	ldr	r3, [pc, #212]	; (8013298 <USB_DeactivateEndpoint+0x1b0>)
 80131c2:	4013      	ands	r3, r2
 80131c4:	600b      	str	r3, [r1, #0]
 80131c6:	e060      	b.n	801328a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80131c8:	68bb      	ldr	r3, [r7, #8]
 80131ca:	015a      	lsls	r2, r3, #5
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	4413      	add	r3, r2
 80131d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80131da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80131de:	d11f      	bne.n	8013220 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80131e0:	68bb      	ldr	r3, [r7, #8]
 80131e2:	015a      	lsls	r2, r3, #5
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	4413      	add	r3, r2
 80131e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	68ba      	ldr	r2, [r7, #8]
 80131f0:	0151      	lsls	r1, r2, #5
 80131f2:	68fa      	ldr	r2, [r7, #12]
 80131f4:	440a      	add	r2, r1
 80131f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80131fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80131fe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8013200:	68bb      	ldr	r3, [r7, #8]
 8013202:	015a      	lsls	r2, r3, #5
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	4413      	add	r3, r2
 8013208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	68ba      	ldr	r2, [r7, #8]
 8013210:	0151      	lsls	r1, r2, #5
 8013212:	68fa      	ldr	r2, [r7, #12]
 8013214:	440a      	add	r2, r1
 8013216:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801321a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801321e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013226:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013228:	683b      	ldr	r3, [r7, #0]
 801322a:	781b      	ldrb	r3, [r3, #0]
 801322c:	f003 030f 	and.w	r3, r3, #15
 8013230:	2101      	movs	r1, #1
 8013232:	fa01 f303 	lsl.w	r3, r1, r3
 8013236:	041b      	lsls	r3, r3, #16
 8013238:	43db      	mvns	r3, r3
 801323a:	68f9      	ldr	r1, [r7, #12]
 801323c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013240:	4013      	ands	r3, r2
 8013242:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801324a:	69da      	ldr	r2, [r3, #28]
 801324c:	683b      	ldr	r3, [r7, #0]
 801324e:	781b      	ldrb	r3, [r3, #0]
 8013250:	f003 030f 	and.w	r3, r3, #15
 8013254:	2101      	movs	r1, #1
 8013256:	fa01 f303 	lsl.w	r3, r1, r3
 801325a:	041b      	lsls	r3, r3, #16
 801325c:	43db      	mvns	r3, r3
 801325e:	68f9      	ldr	r1, [r7, #12]
 8013260:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013264:	4013      	ands	r3, r2
 8013266:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013268:	68bb      	ldr	r3, [r7, #8]
 801326a:	015a      	lsls	r2, r3, #5
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	4413      	add	r3, r2
 8013270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013274:	681a      	ldr	r2, [r3, #0]
 8013276:	68bb      	ldr	r3, [r7, #8]
 8013278:	0159      	lsls	r1, r3, #5
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	440b      	add	r3, r1
 801327e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013282:	4619      	mov	r1, r3
 8013284:	4b05      	ldr	r3, [pc, #20]	; (801329c <USB_DeactivateEndpoint+0x1b4>)
 8013286:	4013      	ands	r3, r2
 8013288:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801328a:	2300      	movs	r3, #0
}
 801328c:	4618      	mov	r0, r3
 801328e:	3714      	adds	r7, #20
 8013290:	46bd      	mov	sp, r7
 8013292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013296:	4770      	bx	lr
 8013298:	ec337800 	.word	0xec337800
 801329c:	eff37800 	.word	0xeff37800

080132a0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b08a      	sub	sp, #40	; 0x28
 80132a4:	af02      	add	r7, sp, #8
 80132a6:	60f8      	str	r0, [r7, #12]
 80132a8:	60b9      	str	r1, [r7, #8]
 80132aa:	4613      	mov	r3, r2
 80132ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80132b2:	68bb      	ldr	r3, [r7, #8]
 80132b4:	781b      	ldrb	r3, [r3, #0]
 80132b6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80132b8:	68bb      	ldr	r3, [r7, #8]
 80132ba:	785b      	ldrb	r3, [r3, #1]
 80132bc:	2b01      	cmp	r3, #1
 80132be:	f040 8181 	bne.w	80135c4 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80132c2:	68bb      	ldr	r3, [r7, #8]
 80132c4:	691b      	ldr	r3, [r3, #16]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d132      	bne.n	8013330 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80132ca:	69bb      	ldr	r3, [r7, #24]
 80132cc:	015a      	lsls	r2, r3, #5
 80132ce:	69fb      	ldr	r3, [r7, #28]
 80132d0:	4413      	add	r3, r2
 80132d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132d6:	691a      	ldr	r2, [r3, #16]
 80132d8:	69bb      	ldr	r3, [r7, #24]
 80132da:	0159      	lsls	r1, r3, #5
 80132dc:	69fb      	ldr	r3, [r7, #28]
 80132de:	440b      	add	r3, r1
 80132e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132e4:	4619      	mov	r1, r3
 80132e6:	4ba5      	ldr	r3, [pc, #660]	; (801357c <USB_EPStartXfer+0x2dc>)
 80132e8:	4013      	ands	r3, r2
 80132ea:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80132ec:	69bb      	ldr	r3, [r7, #24]
 80132ee:	015a      	lsls	r2, r3, #5
 80132f0:	69fb      	ldr	r3, [r7, #28]
 80132f2:	4413      	add	r3, r2
 80132f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132f8:	691b      	ldr	r3, [r3, #16]
 80132fa:	69ba      	ldr	r2, [r7, #24]
 80132fc:	0151      	lsls	r1, r2, #5
 80132fe:	69fa      	ldr	r2, [r7, #28]
 8013300:	440a      	add	r2, r1
 8013302:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013306:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801330a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801330c:	69bb      	ldr	r3, [r7, #24]
 801330e:	015a      	lsls	r2, r3, #5
 8013310:	69fb      	ldr	r3, [r7, #28]
 8013312:	4413      	add	r3, r2
 8013314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013318:	691a      	ldr	r2, [r3, #16]
 801331a:	69bb      	ldr	r3, [r7, #24]
 801331c:	0159      	lsls	r1, r3, #5
 801331e:	69fb      	ldr	r3, [r7, #28]
 8013320:	440b      	add	r3, r1
 8013322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013326:	4619      	mov	r1, r3
 8013328:	4b95      	ldr	r3, [pc, #596]	; (8013580 <USB_EPStartXfer+0x2e0>)
 801332a:	4013      	ands	r3, r2
 801332c:	610b      	str	r3, [r1, #16]
 801332e:	e092      	b.n	8013456 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013330:	69bb      	ldr	r3, [r7, #24]
 8013332:	015a      	lsls	r2, r3, #5
 8013334:	69fb      	ldr	r3, [r7, #28]
 8013336:	4413      	add	r3, r2
 8013338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801333c:	691a      	ldr	r2, [r3, #16]
 801333e:	69bb      	ldr	r3, [r7, #24]
 8013340:	0159      	lsls	r1, r3, #5
 8013342:	69fb      	ldr	r3, [r7, #28]
 8013344:	440b      	add	r3, r1
 8013346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801334a:	4619      	mov	r1, r3
 801334c:	4b8c      	ldr	r3, [pc, #560]	; (8013580 <USB_EPStartXfer+0x2e0>)
 801334e:	4013      	ands	r3, r2
 8013350:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013352:	69bb      	ldr	r3, [r7, #24]
 8013354:	015a      	lsls	r2, r3, #5
 8013356:	69fb      	ldr	r3, [r7, #28]
 8013358:	4413      	add	r3, r2
 801335a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801335e:	691a      	ldr	r2, [r3, #16]
 8013360:	69bb      	ldr	r3, [r7, #24]
 8013362:	0159      	lsls	r1, r3, #5
 8013364:	69fb      	ldr	r3, [r7, #28]
 8013366:	440b      	add	r3, r1
 8013368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801336c:	4619      	mov	r1, r3
 801336e:	4b83      	ldr	r3, [pc, #524]	; (801357c <USB_EPStartXfer+0x2dc>)
 8013370:	4013      	ands	r3, r2
 8013372:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8013374:	69bb      	ldr	r3, [r7, #24]
 8013376:	2b00      	cmp	r3, #0
 8013378:	d11a      	bne.n	80133b0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 801337a:	68bb      	ldr	r3, [r7, #8]
 801337c:	691a      	ldr	r2, [r3, #16]
 801337e:	68bb      	ldr	r3, [r7, #8]
 8013380:	689b      	ldr	r3, [r3, #8]
 8013382:	429a      	cmp	r2, r3
 8013384:	d903      	bls.n	801338e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8013386:	68bb      	ldr	r3, [r7, #8]
 8013388:	689a      	ldr	r2, [r3, #8]
 801338a:	68bb      	ldr	r3, [r7, #8]
 801338c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801338e:	69bb      	ldr	r3, [r7, #24]
 8013390:	015a      	lsls	r2, r3, #5
 8013392:	69fb      	ldr	r3, [r7, #28]
 8013394:	4413      	add	r3, r2
 8013396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801339a:	691b      	ldr	r3, [r3, #16]
 801339c:	69ba      	ldr	r2, [r7, #24]
 801339e:	0151      	lsls	r1, r2, #5
 80133a0:	69fa      	ldr	r2, [r7, #28]
 80133a2:	440a      	add	r2, r1
 80133a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80133a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80133ac:	6113      	str	r3, [r2, #16]
 80133ae:	e01b      	b.n	80133e8 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80133b0:	69bb      	ldr	r3, [r7, #24]
 80133b2:	015a      	lsls	r2, r3, #5
 80133b4:	69fb      	ldr	r3, [r7, #28]
 80133b6:	4413      	add	r3, r2
 80133b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80133bc:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80133be:	68bb      	ldr	r3, [r7, #8]
 80133c0:	6919      	ldr	r1, [r3, #16]
 80133c2:	68bb      	ldr	r3, [r7, #8]
 80133c4:	689b      	ldr	r3, [r3, #8]
 80133c6:	440b      	add	r3, r1
 80133c8:	1e59      	subs	r1, r3, #1
 80133ca:	68bb      	ldr	r3, [r7, #8]
 80133cc:	689b      	ldr	r3, [r3, #8]
 80133ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80133d2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80133d4:	4b6b      	ldr	r3, [pc, #428]	; (8013584 <USB_EPStartXfer+0x2e4>)
 80133d6:	400b      	ands	r3, r1
 80133d8:	69b9      	ldr	r1, [r7, #24]
 80133da:	0148      	lsls	r0, r1, #5
 80133dc:	69f9      	ldr	r1, [r7, #28]
 80133de:	4401      	add	r1, r0
 80133e0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80133e4:	4313      	orrs	r3, r2
 80133e6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80133e8:	69bb      	ldr	r3, [r7, #24]
 80133ea:	015a      	lsls	r2, r3, #5
 80133ec:	69fb      	ldr	r3, [r7, #28]
 80133ee:	4413      	add	r3, r2
 80133f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80133f4:	691a      	ldr	r2, [r3, #16]
 80133f6:	68bb      	ldr	r3, [r7, #8]
 80133f8:	691b      	ldr	r3, [r3, #16]
 80133fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80133fe:	69b9      	ldr	r1, [r7, #24]
 8013400:	0148      	lsls	r0, r1, #5
 8013402:	69f9      	ldr	r1, [r7, #28]
 8013404:	4401      	add	r1, r0
 8013406:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801340a:	4313      	orrs	r3, r2
 801340c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801340e:	68bb      	ldr	r3, [r7, #8]
 8013410:	791b      	ldrb	r3, [r3, #4]
 8013412:	2b01      	cmp	r3, #1
 8013414:	d11f      	bne.n	8013456 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8013416:	69bb      	ldr	r3, [r7, #24]
 8013418:	015a      	lsls	r2, r3, #5
 801341a:	69fb      	ldr	r3, [r7, #28]
 801341c:	4413      	add	r3, r2
 801341e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013422:	691b      	ldr	r3, [r3, #16]
 8013424:	69ba      	ldr	r2, [r7, #24]
 8013426:	0151      	lsls	r1, r2, #5
 8013428:	69fa      	ldr	r2, [r7, #28]
 801342a:	440a      	add	r2, r1
 801342c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013430:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8013434:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8013436:	69bb      	ldr	r3, [r7, #24]
 8013438:	015a      	lsls	r2, r3, #5
 801343a:	69fb      	ldr	r3, [r7, #28]
 801343c:	4413      	add	r3, r2
 801343e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013442:	691b      	ldr	r3, [r3, #16]
 8013444:	69ba      	ldr	r2, [r7, #24]
 8013446:	0151      	lsls	r1, r2, #5
 8013448:	69fa      	ldr	r2, [r7, #28]
 801344a:	440a      	add	r2, r1
 801344c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013450:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013454:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8013456:	79fb      	ldrb	r3, [r7, #7]
 8013458:	2b01      	cmp	r3, #1
 801345a:	d14b      	bne.n	80134f4 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801345c:	68bb      	ldr	r3, [r7, #8]
 801345e:	69db      	ldr	r3, [r3, #28]
 8013460:	2b00      	cmp	r3, #0
 8013462:	d009      	beq.n	8013478 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013464:	69bb      	ldr	r3, [r7, #24]
 8013466:	015a      	lsls	r2, r3, #5
 8013468:	69fb      	ldr	r3, [r7, #28]
 801346a:	4413      	add	r3, r2
 801346c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013470:	461a      	mov	r2, r3
 8013472:	68bb      	ldr	r3, [r7, #8]
 8013474:	69db      	ldr	r3, [r3, #28]
 8013476:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8013478:	68bb      	ldr	r3, [r7, #8]
 801347a:	791b      	ldrb	r3, [r3, #4]
 801347c:	2b01      	cmp	r3, #1
 801347e:	d128      	bne.n	80134d2 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013480:	69fb      	ldr	r3, [r7, #28]
 8013482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013486:	689b      	ldr	r3, [r3, #8]
 8013488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801348c:	2b00      	cmp	r3, #0
 801348e:	d110      	bne.n	80134b2 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013490:	69bb      	ldr	r3, [r7, #24]
 8013492:	015a      	lsls	r2, r3, #5
 8013494:	69fb      	ldr	r3, [r7, #28]
 8013496:	4413      	add	r3, r2
 8013498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	69ba      	ldr	r2, [r7, #24]
 80134a0:	0151      	lsls	r1, r2, #5
 80134a2:	69fa      	ldr	r2, [r7, #28]
 80134a4:	440a      	add	r2, r1
 80134a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80134aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80134ae:	6013      	str	r3, [r2, #0]
 80134b0:	e00f      	b.n	80134d2 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80134b2:	69bb      	ldr	r3, [r7, #24]
 80134b4:	015a      	lsls	r2, r3, #5
 80134b6:	69fb      	ldr	r3, [r7, #28]
 80134b8:	4413      	add	r3, r2
 80134ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	69ba      	ldr	r2, [r7, #24]
 80134c2:	0151      	lsls	r1, r2, #5
 80134c4:	69fa      	ldr	r2, [r7, #28]
 80134c6:	440a      	add	r2, r1
 80134c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80134cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80134d0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80134d2:	69bb      	ldr	r3, [r7, #24]
 80134d4:	015a      	lsls	r2, r3, #5
 80134d6:	69fb      	ldr	r3, [r7, #28]
 80134d8:	4413      	add	r3, r2
 80134da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	69ba      	ldr	r2, [r7, #24]
 80134e2:	0151      	lsls	r1, r2, #5
 80134e4:	69fa      	ldr	r2, [r7, #28]
 80134e6:	440a      	add	r2, r1
 80134e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80134ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80134f0:	6013      	str	r3, [r2, #0]
 80134f2:	e16a      	b.n	80137ca <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80134f4:	69bb      	ldr	r3, [r7, #24]
 80134f6:	015a      	lsls	r2, r3, #5
 80134f8:	69fb      	ldr	r3, [r7, #28]
 80134fa:	4413      	add	r3, r2
 80134fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	69ba      	ldr	r2, [r7, #24]
 8013504:	0151      	lsls	r1, r2, #5
 8013506:	69fa      	ldr	r2, [r7, #28]
 8013508:	440a      	add	r2, r1
 801350a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801350e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013512:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013514:	68bb      	ldr	r3, [r7, #8]
 8013516:	791b      	ldrb	r3, [r3, #4]
 8013518:	2b01      	cmp	r3, #1
 801351a:	d015      	beq.n	8013548 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801351c:	68bb      	ldr	r3, [r7, #8]
 801351e:	691b      	ldr	r3, [r3, #16]
 8013520:	2b00      	cmp	r3, #0
 8013522:	f000 8152 	beq.w	80137ca <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013526:	69fb      	ldr	r3, [r7, #28]
 8013528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801352c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801352e:	68bb      	ldr	r3, [r7, #8]
 8013530:	781b      	ldrb	r3, [r3, #0]
 8013532:	f003 030f 	and.w	r3, r3, #15
 8013536:	2101      	movs	r1, #1
 8013538:	fa01 f303 	lsl.w	r3, r1, r3
 801353c:	69f9      	ldr	r1, [r7, #28]
 801353e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013542:	4313      	orrs	r3, r2
 8013544:	634b      	str	r3, [r1, #52]	; 0x34
 8013546:	e140      	b.n	80137ca <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013548:	69fb      	ldr	r3, [r7, #28]
 801354a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801354e:	689b      	ldr	r3, [r3, #8]
 8013550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013554:	2b00      	cmp	r3, #0
 8013556:	d117      	bne.n	8013588 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013558:	69bb      	ldr	r3, [r7, #24]
 801355a:	015a      	lsls	r2, r3, #5
 801355c:	69fb      	ldr	r3, [r7, #28]
 801355e:	4413      	add	r3, r2
 8013560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	69ba      	ldr	r2, [r7, #24]
 8013568:	0151      	lsls	r1, r2, #5
 801356a:	69fa      	ldr	r2, [r7, #28]
 801356c:	440a      	add	r2, r1
 801356e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013572:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013576:	6013      	str	r3, [r2, #0]
 8013578:	e016      	b.n	80135a8 <USB_EPStartXfer+0x308>
 801357a:	bf00      	nop
 801357c:	e007ffff 	.word	0xe007ffff
 8013580:	fff80000 	.word	0xfff80000
 8013584:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013588:	69bb      	ldr	r3, [r7, #24]
 801358a:	015a      	lsls	r2, r3, #5
 801358c:	69fb      	ldr	r3, [r7, #28]
 801358e:	4413      	add	r3, r2
 8013590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	69ba      	ldr	r2, [r7, #24]
 8013598:	0151      	lsls	r1, r2, #5
 801359a:	69fa      	ldr	r2, [r7, #28]
 801359c:	440a      	add	r2, r1
 801359e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80135a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80135a6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80135a8:	68bb      	ldr	r3, [r7, #8]
 80135aa:	68d9      	ldr	r1, [r3, #12]
 80135ac:	68bb      	ldr	r3, [r7, #8]
 80135ae:	781a      	ldrb	r2, [r3, #0]
 80135b0:	68bb      	ldr	r3, [r7, #8]
 80135b2:	691b      	ldr	r3, [r3, #16]
 80135b4:	b298      	uxth	r0, r3
 80135b6:	79fb      	ldrb	r3, [r7, #7]
 80135b8:	9300      	str	r3, [sp, #0]
 80135ba:	4603      	mov	r3, r0
 80135bc:	68f8      	ldr	r0, [r7, #12]
 80135be:	f000 f9b9 	bl	8013934 <USB_WritePacket>
 80135c2:	e102      	b.n	80137ca <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80135c4:	69bb      	ldr	r3, [r7, #24]
 80135c6:	015a      	lsls	r2, r3, #5
 80135c8:	69fb      	ldr	r3, [r7, #28]
 80135ca:	4413      	add	r3, r2
 80135cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135d0:	691a      	ldr	r2, [r3, #16]
 80135d2:	69bb      	ldr	r3, [r7, #24]
 80135d4:	0159      	lsls	r1, r3, #5
 80135d6:	69fb      	ldr	r3, [r7, #28]
 80135d8:	440b      	add	r3, r1
 80135da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135de:	4619      	mov	r1, r3
 80135e0:	4b7c      	ldr	r3, [pc, #496]	; (80137d4 <USB_EPStartXfer+0x534>)
 80135e2:	4013      	ands	r3, r2
 80135e4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80135e6:	69bb      	ldr	r3, [r7, #24]
 80135e8:	015a      	lsls	r2, r3, #5
 80135ea:	69fb      	ldr	r3, [r7, #28]
 80135ec:	4413      	add	r3, r2
 80135ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135f2:	691a      	ldr	r2, [r3, #16]
 80135f4:	69bb      	ldr	r3, [r7, #24]
 80135f6:	0159      	lsls	r1, r3, #5
 80135f8:	69fb      	ldr	r3, [r7, #28]
 80135fa:	440b      	add	r3, r1
 80135fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013600:	4619      	mov	r1, r3
 8013602:	4b75      	ldr	r3, [pc, #468]	; (80137d8 <USB_EPStartXfer+0x538>)
 8013604:	4013      	ands	r3, r2
 8013606:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8013608:	69bb      	ldr	r3, [r7, #24]
 801360a:	2b00      	cmp	r3, #0
 801360c:	d12f      	bne.n	801366e <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 801360e:	68bb      	ldr	r3, [r7, #8]
 8013610:	691b      	ldr	r3, [r3, #16]
 8013612:	2b00      	cmp	r3, #0
 8013614:	d003      	beq.n	801361e <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8013616:	68bb      	ldr	r3, [r7, #8]
 8013618:	689a      	ldr	r2, [r3, #8]
 801361a:	68bb      	ldr	r3, [r7, #8]
 801361c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 801361e:	68bb      	ldr	r3, [r7, #8]
 8013620:	689a      	ldr	r2, [r3, #8]
 8013622:	68bb      	ldr	r3, [r7, #8]
 8013624:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8013626:	69bb      	ldr	r3, [r7, #24]
 8013628:	015a      	lsls	r2, r3, #5
 801362a:	69fb      	ldr	r3, [r7, #28]
 801362c:	4413      	add	r3, r2
 801362e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013632:	691a      	ldr	r2, [r3, #16]
 8013634:	68bb      	ldr	r3, [r7, #8]
 8013636:	6a1b      	ldr	r3, [r3, #32]
 8013638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801363c:	69b9      	ldr	r1, [r7, #24]
 801363e:	0148      	lsls	r0, r1, #5
 8013640:	69f9      	ldr	r1, [r7, #28]
 8013642:	4401      	add	r1, r0
 8013644:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013648:	4313      	orrs	r3, r2
 801364a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801364c:	69bb      	ldr	r3, [r7, #24]
 801364e:	015a      	lsls	r2, r3, #5
 8013650:	69fb      	ldr	r3, [r7, #28]
 8013652:	4413      	add	r3, r2
 8013654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013658:	691b      	ldr	r3, [r3, #16]
 801365a:	69ba      	ldr	r2, [r7, #24]
 801365c:	0151      	lsls	r1, r2, #5
 801365e:	69fa      	ldr	r2, [r7, #28]
 8013660:	440a      	add	r2, r1
 8013662:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013666:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801366a:	6113      	str	r3, [r2, #16]
 801366c:	e05f      	b.n	801372e <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 801366e:	68bb      	ldr	r3, [r7, #8]
 8013670:	691b      	ldr	r3, [r3, #16]
 8013672:	2b00      	cmp	r3, #0
 8013674:	d123      	bne.n	80136be <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8013676:	69bb      	ldr	r3, [r7, #24]
 8013678:	015a      	lsls	r2, r3, #5
 801367a:	69fb      	ldr	r3, [r7, #28]
 801367c:	4413      	add	r3, r2
 801367e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013682:	691a      	ldr	r2, [r3, #16]
 8013684:	68bb      	ldr	r3, [r7, #8]
 8013686:	689b      	ldr	r3, [r3, #8]
 8013688:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801368c:	69b9      	ldr	r1, [r7, #24]
 801368e:	0148      	lsls	r0, r1, #5
 8013690:	69f9      	ldr	r1, [r7, #28]
 8013692:	4401      	add	r1, r0
 8013694:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013698:	4313      	orrs	r3, r2
 801369a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801369c:	69bb      	ldr	r3, [r7, #24]
 801369e:	015a      	lsls	r2, r3, #5
 80136a0:	69fb      	ldr	r3, [r7, #28]
 80136a2:	4413      	add	r3, r2
 80136a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136a8:	691b      	ldr	r3, [r3, #16]
 80136aa:	69ba      	ldr	r2, [r7, #24]
 80136ac:	0151      	lsls	r1, r2, #5
 80136ae:	69fa      	ldr	r2, [r7, #28]
 80136b0:	440a      	add	r2, r1
 80136b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80136b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80136ba:	6113      	str	r3, [r2, #16]
 80136bc:	e037      	b.n	801372e <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80136be:	68bb      	ldr	r3, [r7, #8]
 80136c0:	691a      	ldr	r2, [r3, #16]
 80136c2:	68bb      	ldr	r3, [r7, #8]
 80136c4:	689b      	ldr	r3, [r3, #8]
 80136c6:	4413      	add	r3, r2
 80136c8:	1e5a      	subs	r2, r3, #1
 80136ca:	68bb      	ldr	r3, [r7, #8]
 80136cc:	689b      	ldr	r3, [r3, #8]
 80136ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80136d2:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80136d4:	68bb      	ldr	r3, [r7, #8]
 80136d6:	689b      	ldr	r3, [r3, #8]
 80136d8:	8afa      	ldrh	r2, [r7, #22]
 80136da:	fb03 f202 	mul.w	r2, r3, r2
 80136de:	68bb      	ldr	r3, [r7, #8]
 80136e0:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80136e2:	69bb      	ldr	r3, [r7, #24]
 80136e4:	015a      	lsls	r2, r3, #5
 80136e6:	69fb      	ldr	r3, [r7, #28]
 80136e8:	4413      	add	r3, r2
 80136ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136ee:	691a      	ldr	r2, [r3, #16]
 80136f0:	8afb      	ldrh	r3, [r7, #22]
 80136f2:	04d9      	lsls	r1, r3, #19
 80136f4:	4b39      	ldr	r3, [pc, #228]	; (80137dc <USB_EPStartXfer+0x53c>)
 80136f6:	400b      	ands	r3, r1
 80136f8:	69b9      	ldr	r1, [r7, #24]
 80136fa:	0148      	lsls	r0, r1, #5
 80136fc:	69f9      	ldr	r1, [r7, #28]
 80136fe:	4401      	add	r1, r0
 8013700:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013704:	4313      	orrs	r3, r2
 8013706:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8013708:	69bb      	ldr	r3, [r7, #24]
 801370a:	015a      	lsls	r2, r3, #5
 801370c:	69fb      	ldr	r3, [r7, #28]
 801370e:	4413      	add	r3, r2
 8013710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013714:	691a      	ldr	r2, [r3, #16]
 8013716:	68bb      	ldr	r3, [r7, #8]
 8013718:	6a1b      	ldr	r3, [r3, #32]
 801371a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801371e:	69b9      	ldr	r1, [r7, #24]
 8013720:	0148      	lsls	r0, r1, #5
 8013722:	69f9      	ldr	r1, [r7, #28]
 8013724:	4401      	add	r1, r0
 8013726:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801372a:	4313      	orrs	r3, r2
 801372c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 801372e:	79fb      	ldrb	r3, [r7, #7]
 8013730:	2b01      	cmp	r3, #1
 8013732:	d10d      	bne.n	8013750 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8013734:	68bb      	ldr	r3, [r7, #8]
 8013736:	68db      	ldr	r3, [r3, #12]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d009      	beq.n	8013750 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801373c:	68bb      	ldr	r3, [r7, #8]
 801373e:	68d9      	ldr	r1, [r3, #12]
 8013740:	69bb      	ldr	r3, [r7, #24]
 8013742:	015a      	lsls	r2, r3, #5
 8013744:	69fb      	ldr	r3, [r7, #28]
 8013746:	4413      	add	r3, r2
 8013748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801374c:	460a      	mov	r2, r1
 801374e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013750:	68bb      	ldr	r3, [r7, #8]
 8013752:	791b      	ldrb	r3, [r3, #4]
 8013754:	2b01      	cmp	r3, #1
 8013756:	d128      	bne.n	80137aa <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013758:	69fb      	ldr	r3, [r7, #28]
 801375a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801375e:	689b      	ldr	r3, [r3, #8]
 8013760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013764:	2b00      	cmp	r3, #0
 8013766:	d110      	bne.n	801378a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8013768:	69bb      	ldr	r3, [r7, #24]
 801376a:	015a      	lsls	r2, r3, #5
 801376c:	69fb      	ldr	r3, [r7, #28]
 801376e:	4413      	add	r3, r2
 8013770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	69ba      	ldr	r2, [r7, #24]
 8013778:	0151      	lsls	r1, r2, #5
 801377a:	69fa      	ldr	r2, [r7, #28]
 801377c:	440a      	add	r2, r1
 801377e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013782:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013786:	6013      	str	r3, [r2, #0]
 8013788:	e00f      	b.n	80137aa <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801378a:	69bb      	ldr	r3, [r7, #24]
 801378c:	015a      	lsls	r2, r3, #5
 801378e:	69fb      	ldr	r3, [r7, #28]
 8013790:	4413      	add	r3, r2
 8013792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	69ba      	ldr	r2, [r7, #24]
 801379a:	0151      	lsls	r1, r2, #5
 801379c:	69fa      	ldr	r2, [r7, #28]
 801379e:	440a      	add	r2, r1
 80137a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80137a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80137a8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80137aa:	69bb      	ldr	r3, [r7, #24]
 80137ac:	015a      	lsls	r2, r3, #5
 80137ae:	69fb      	ldr	r3, [r7, #28]
 80137b0:	4413      	add	r3, r2
 80137b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	69ba      	ldr	r2, [r7, #24]
 80137ba:	0151      	lsls	r1, r2, #5
 80137bc:	69fa      	ldr	r2, [r7, #28]
 80137be:	440a      	add	r2, r1
 80137c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80137c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80137c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80137ca:	2300      	movs	r3, #0
}
 80137cc:	4618      	mov	r0, r3
 80137ce:	3720      	adds	r7, #32
 80137d0:	46bd      	mov	sp, r7
 80137d2:	bd80      	pop	{r7, pc}
 80137d4:	fff80000 	.word	0xfff80000
 80137d8:	e007ffff 	.word	0xe007ffff
 80137dc:	1ff80000 	.word	0x1ff80000

080137e0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80137e0:	b480      	push	{r7}
 80137e2:	b087      	sub	sp, #28
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	6078      	str	r0, [r7, #4]
 80137e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80137ea:	2300      	movs	r3, #0
 80137ec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80137ee:	2300      	movs	r3, #0
 80137f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80137f6:	683b      	ldr	r3, [r7, #0]
 80137f8:	785b      	ldrb	r3, [r3, #1]
 80137fa:	2b01      	cmp	r3, #1
 80137fc:	d14a      	bne.n	8013894 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80137fe:	683b      	ldr	r3, [r7, #0]
 8013800:	781b      	ldrb	r3, [r3, #0]
 8013802:	015a      	lsls	r2, r3, #5
 8013804:	693b      	ldr	r3, [r7, #16]
 8013806:	4413      	add	r3, r2
 8013808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013812:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013816:	f040 8086 	bne.w	8013926 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801381a:	683b      	ldr	r3, [r7, #0]
 801381c:	781b      	ldrb	r3, [r3, #0]
 801381e:	015a      	lsls	r2, r3, #5
 8013820:	693b      	ldr	r3, [r7, #16]
 8013822:	4413      	add	r3, r2
 8013824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	683a      	ldr	r2, [r7, #0]
 801382c:	7812      	ldrb	r2, [r2, #0]
 801382e:	0151      	lsls	r1, r2, #5
 8013830:	693a      	ldr	r2, [r7, #16]
 8013832:	440a      	add	r2, r1
 8013834:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013838:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801383c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801383e:	683b      	ldr	r3, [r7, #0]
 8013840:	781b      	ldrb	r3, [r3, #0]
 8013842:	015a      	lsls	r2, r3, #5
 8013844:	693b      	ldr	r3, [r7, #16]
 8013846:	4413      	add	r3, r2
 8013848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	683a      	ldr	r2, [r7, #0]
 8013850:	7812      	ldrb	r2, [r2, #0]
 8013852:	0151      	lsls	r1, r2, #5
 8013854:	693a      	ldr	r2, [r7, #16]
 8013856:	440a      	add	r2, r1
 8013858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801385c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013860:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	3301      	adds	r3, #1
 8013866:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	f242 7210 	movw	r2, #10000	; 0x2710
 801386e:	4293      	cmp	r3, r2
 8013870:	d902      	bls.n	8013878 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8013872:	2301      	movs	r3, #1
 8013874:	75fb      	strb	r3, [r7, #23]
          break;
 8013876:	e056      	b.n	8013926 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8013878:	683b      	ldr	r3, [r7, #0]
 801387a:	781b      	ldrb	r3, [r3, #0]
 801387c:	015a      	lsls	r2, r3, #5
 801387e:	693b      	ldr	r3, [r7, #16]
 8013880:	4413      	add	r3, r2
 8013882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801388c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013890:	d0e7      	beq.n	8013862 <USB_EPStopXfer+0x82>
 8013892:	e048      	b.n	8013926 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013894:	683b      	ldr	r3, [r7, #0]
 8013896:	781b      	ldrb	r3, [r3, #0]
 8013898:	015a      	lsls	r2, r3, #5
 801389a:	693b      	ldr	r3, [r7, #16]
 801389c:	4413      	add	r3, r2
 801389e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80138a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80138ac:	d13b      	bne.n	8013926 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80138ae:	683b      	ldr	r3, [r7, #0]
 80138b0:	781b      	ldrb	r3, [r3, #0]
 80138b2:	015a      	lsls	r2, r3, #5
 80138b4:	693b      	ldr	r3, [r7, #16]
 80138b6:	4413      	add	r3, r2
 80138b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	683a      	ldr	r2, [r7, #0]
 80138c0:	7812      	ldrb	r2, [r2, #0]
 80138c2:	0151      	lsls	r1, r2, #5
 80138c4:	693a      	ldr	r2, [r7, #16]
 80138c6:	440a      	add	r2, r1
 80138c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80138cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80138d0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80138d2:	683b      	ldr	r3, [r7, #0]
 80138d4:	781b      	ldrb	r3, [r3, #0]
 80138d6:	015a      	lsls	r2, r3, #5
 80138d8:	693b      	ldr	r3, [r7, #16]
 80138da:	4413      	add	r3, r2
 80138dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	683a      	ldr	r2, [r7, #0]
 80138e4:	7812      	ldrb	r2, [r2, #0]
 80138e6:	0151      	lsls	r1, r2, #5
 80138e8:	693a      	ldr	r2, [r7, #16]
 80138ea:	440a      	add	r2, r1
 80138ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80138f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80138f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	3301      	adds	r3, #1
 80138fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8013902:	4293      	cmp	r3, r2
 8013904:	d902      	bls.n	801390c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8013906:	2301      	movs	r3, #1
 8013908:	75fb      	strb	r3, [r7, #23]
          break;
 801390a:	e00c      	b.n	8013926 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 801390c:	683b      	ldr	r3, [r7, #0]
 801390e:	781b      	ldrb	r3, [r3, #0]
 8013910:	015a      	lsls	r2, r3, #5
 8013912:	693b      	ldr	r3, [r7, #16]
 8013914:	4413      	add	r3, r2
 8013916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013920:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013924:	d0e7      	beq.n	80138f6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8013926:	7dfb      	ldrb	r3, [r7, #23]
}
 8013928:	4618      	mov	r0, r3
 801392a:	371c      	adds	r7, #28
 801392c:	46bd      	mov	sp, r7
 801392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013932:	4770      	bx	lr

08013934 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013934:	b480      	push	{r7}
 8013936:	b089      	sub	sp, #36	; 0x24
 8013938:	af00      	add	r7, sp, #0
 801393a:	60f8      	str	r0, [r7, #12]
 801393c:	60b9      	str	r1, [r7, #8]
 801393e:	4611      	mov	r1, r2
 8013940:	461a      	mov	r2, r3
 8013942:	460b      	mov	r3, r1
 8013944:	71fb      	strb	r3, [r7, #7]
 8013946:	4613      	mov	r3, r2
 8013948:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801394e:	68bb      	ldr	r3, [r7, #8]
 8013950:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8013952:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013956:	2b00      	cmp	r3, #0
 8013958:	d123      	bne.n	80139a2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801395a:	88bb      	ldrh	r3, [r7, #4]
 801395c:	3303      	adds	r3, #3
 801395e:	089b      	lsrs	r3, r3, #2
 8013960:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8013962:	2300      	movs	r3, #0
 8013964:	61bb      	str	r3, [r7, #24]
 8013966:	e018      	b.n	801399a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013968:	79fb      	ldrb	r3, [r7, #7]
 801396a:	031a      	lsls	r2, r3, #12
 801396c:	697b      	ldr	r3, [r7, #20]
 801396e:	4413      	add	r3, r2
 8013970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013974:	461a      	mov	r2, r3
 8013976:	69fb      	ldr	r3, [r7, #28]
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	6013      	str	r3, [r2, #0]
      pSrc++;
 801397c:	69fb      	ldr	r3, [r7, #28]
 801397e:	3301      	adds	r3, #1
 8013980:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013982:	69fb      	ldr	r3, [r7, #28]
 8013984:	3301      	adds	r3, #1
 8013986:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013988:	69fb      	ldr	r3, [r7, #28]
 801398a:	3301      	adds	r3, #1
 801398c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801398e:	69fb      	ldr	r3, [r7, #28]
 8013990:	3301      	adds	r3, #1
 8013992:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8013994:	69bb      	ldr	r3, [r7, #24]
 8013996:	3301      	adds	r3, #1
 8013998:	61bb      	str	r3, [r7, #24]
 801399a:	69ba      	ldr	r2, [r7, #24]
 801399c:	693b      	ldr	r3, [r7, #16]
 801399e:	429a      	cmp	r2, r3
 80139a0:	d3e2      	bcc.n	8013968 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80139a2:	2300      	movs	r3, #0
}
 80139a4:	4618      	mov	r0, r3
 80139a6:	3724      	adds	r7, #36	; 0x24
 80139a8:	46bd      	mov	sp, r7
 80139aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ae:	4770      	bx	lr

080139b0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80139b0:	b480      	push	{r7}
 80139b2:	b08b      	sub	sp, #44	; 0x2c
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	60f8      	str	r0, [r7, #12]
 80139b8:	60b9      	str	r1, [r7, #8]
 80139ba:	4613      	mov	r3, r2
 80139bc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80139c2:	68bb      	ldr	r3, [r7, #8]
 80139c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80139c6:	88fb      	ldrh	r3, [r7, #6]
 80139c8:	089b      	lsrs	r3, r3, #2
 80139ca:	b29b      	uxth	r3, r3
 80139cc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80139ce:	88fb      	ldrh	r3, [r7, #6]
 80139d0:	f003 0303 	and.w	r3, r3, #3
 80139d4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80139d6:	2300      	movs	r3, #0
 80139d8:	623b      	str	r3, [r7, #32]
 80139da:	e014      	b.n	8013a06 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80139dc:	69bb      	ldr	r3, [r7, #24]
 80139de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80139e2:	681a      	ldr	r2, [r3, #0]
 80139e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139e6:	601a      	str	r2, [r3, #0]
    pDest++;
 80139e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139ea:	3301      	adds	r3, #1
 80139ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80139ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139f0:	3301      	adds	r3, #1
 80139f2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80139f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139f6:	3301      	adds	r3, #1
 80139f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80139fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139fc:	3301      	adds	r3, #1
 80139fe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8013a00:	6a3b      	ldr	r3, [r7, #32]
 8013a02:	3301      	adds	r3, #1
 8013a04:	623b      	str	r3, [r7, #32]
 8013a06:	6a3a      	ldr	r2, [r7, #32]
 8013a08:	697b      	ldr	r3, [r7, #20]
 8013a0a:	429a      	cmp	r2, r3
 8013a0c:	d3e6      	bcc.n	80139dc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8013a0e:	8bfb      	ldrh	r3, [r7, #30]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d01e      	beq.n	8013a52 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013a14:	2300      	movs	r3, #0
 8013a16:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013a18:	69bb      	ldr	r3, [r7, #24]
 8013a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013a1e:	461a      	mov	r2, r3
 8013a20:	f107 0310 	add.w	r3, r7, #16
 8013a24:	6812      	ldr	r2, [r2, #0]
 8013a26:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013a28:	693a      	ldr	r2, [r7, #16]
 8013a2a:	6a3b      	ldr	r3, [r7, #32]
 8013a2c:	b2db      	uxtb	r3, r3
 8013a2e:	00db      	lsls	r3, r3, #3
 8013a30:	fa22 f303 	lsr.w	r3, r2, r3
 8013a34:	b2da      	uxtb	r2, r3
 8013a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a38:	701a      	strb	r2, [r3, #0]
      i++;
 8013a3a:	6a3b      	ldr	r3, [r7, #32]
 8013a3c:	3301      	adds	r3, #1
 8013a3e:	623b      	str	r3, [r7, #32]
      pDest++;
 8013a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a42:	3301      	adds	r3, #1
 8013a44:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8013a46:	8bfb      	ldrh	r3, [r7, #30]
 8013a48:	3b01      	subs	r3, #1
 8013a4a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8013a4c:	8bfb      	ldrh	r3, [r7, #30]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d1ea      	bne.n	8013a28 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8013a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013a54:	4618      	mov	r0, r3
 8013a56:	372c      	adds	r7, #44	; 0x2c
 8013a58:	46bd      	mov	sp, r7
 8013a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a5e:	4770      	bx	lr

08013a60 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013a60:	b480      	push	{r7}
 8013a62:	b085      	sub	sp, #20
 8013a64:	af00      	add	r7, sp, #0
 8013a66:	6078      	str	r0, [r7, #4]
 8013a68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013a6e:	683b      	ldr	r3, [r7, #0]
 8013a70:	781b      	ldrb	r3, [r3, #0]
 8013a72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013a74:	683b      	ldr	r3, [r7, #0]
 8013a76:	785b      	ldrb	r3, [r3, #1]
 8013a78:	2b01      	cmp	r3, #1
 8013a7a:	d12c      	bne.n	8013ad6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013a7c:	68bb      	ldr	r3, [r7, #8]
 8013a7e:	015a      	lsls	r2, r3, #5
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	4413      	add	r3, r2
 8013a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	db12      	blt.n	8013ab4 <USB_EPSetStall+0x54>
 8013a8e:	68bb      	ldr	r3, [r7, #8]
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d00f      	beq.n	8013ab4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013a94:	68bb      	ldr	r3, [r7, #8]
 8013a96:	015a      	lsls	r2, r3, #5
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	4413      	add	r3, r2
 8013a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	68ba      	ldr	r2, [r7, #8]
 8013aa4:	0151      	lsls	r1, r2, #5
 8013aa6:	68fa      	ldr	r2, [r7, #12]
 8013aa8:	440a      	add	r2, r1
 8013aaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013aae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013ab2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013ab4:	68bb      	ldr	r3, [r7, #8]
 8013ab6:	015a      	lsls	r2, r3, #5
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	4413      	add	r3, r2
 8013abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	68ba      	ldr	r2, [r7, #8]
 8013ac4:	0151      	lsls	r1, r2, #5
 8013ac6:	68fa      	ldr	r2, [r7, #12]
 8013ac8:	440a      	add	r2, r1
 8013aca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013ace:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013ad2:	6013      	str	r3, [r2, #0]
 8013ad4:	e02b      	b.n	8013b2e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013ad6:	68bb      	ldr	r3, [r7, #8]
 8013ad8:	015a      	lsls	r2, r3, #5
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	4413      	add	r3, r2
 8013ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	db12      	blt.n	8013b0e <USB_EPSetStall+0xae>
 8013ae8:	68bb      	ldr	r3, [r7, #8]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d00f      	beq.n	8013b0e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013aee:	68bb      	ldr	r3, [r7, #8]
 8013af0:	015a      	lsls	r2, r3, #5
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	4413      	add	r3, r2
 8013af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013afa:	681b      	ldr	r3, [r3, #0]
 8013afc:	68ba      	ldr	r2, [r7, #8]
 8013afe:	0151      	lsls	r1, r2, #5
 8013b00:	68fa      	ldr	r2, [r7, #12]
 8013b02:	440a      	add	r2, r1
 8013b04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013b08:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013b0c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013b0e:	68bb      	ldr	r3, [r7, #8]
 8013b10:	015a      	lsls	r2, r3, #5
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	4413      	add	r3, r2
 8013b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	68ba      	ldr	r2, [r7, #8]
 8013b1e:	0151      	lsls	r1, r2, #5
 8013b20:	68fa      	ldr	r2, [r7, #12]
 8013b22:	440a      	add	r2, r1
 8013b24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013b28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013b2c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013b2e:	2300      	movs	r3, #0
}
 8013b30:	4618      	mov	r0, r3
 8013b32:	3714      	adds	r7, #20
 8013b34:	46bd      	mov	sp, r7
 8013b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b3a:	4770      	bx	lr

08013b3c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013b3c:	b480      	push	{r7}
 8013b3e:	b085      	sub	sp, #20
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	6078      	str	r0, [r7, #4]
 8013b44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013b4a:	683b      	ldr	r3, [r7, #0]
 8013b4c:	781b      	ldrb	r3, [r3, #0]
 8013b4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013b50:	683b      	ldr	r3, [r7, #0]
 8013b52:	785b      	ldrb	r3, [r3, #1]
 8013b54:	2b01      	cmp	r3, #1
 8013b56:	d128      	bne.n	8013baa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013b58:	68bb      	ldr	r3, [r7, #8]
 8013b5a:	015a      	lsls	r2, r3, #5
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	4413      	add	r3, r2
 8013b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	68ba      	ldr	r2, [r7, #8]
 8013b68:	0151      	lsls	r1, r2, #5
 8013b6a:	68fa      	ldr	r2, [r7, #12]
 8013b6c:	440a      	add	r2, r1
 8013b6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013b72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013b76:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013b78:	683b      	ldr	r3, [r7, #0]
 8013b7a:	791b      	ldrb	r3, [r3, #4]
 8013b7c:	2b03      	cmp	r3, #3
 8013b7e:	d003      	beq.n	8013b88 <USB_EPClearStall+0x4c>
 8013b80:	683b      	ldr	r3, [r7, #0]
 8013b82:	791b      	ldrb	r3, [r3, #4]
 8013b84:	2b02      	cmp	r3, #2
 8013b86:	d138      	bne.n	8013bfa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013b88:	68bb      	ldr	r3, [r7, #8]
 8013b8a:	015a      	lsls	r2, r3, #5
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	4413      	add	r3, r2
 8013b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	68ba      	ldr	r2, [r7, #8]
 8013b98:	0151      	lsls	r1, r2, #5
 8013b9a:	68fa      	ldr	r2, [r7, #12]
 8013b9c:	440a      	add	r2, r1
 8013b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013ba6:	6013      	str	r3, [r2, #0]
 8013ba8:	e027      	b.n	8013bfa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013baa:	68bb      	ldr	r3, [r7, #8]
 8013bac:	015a      	lsls	r2, r3, #5
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	4413      	add	r3, r2
 8013bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	68ba      	ldr	r2, [r7, #8]
 8013bba:	0151      	lsls	r1, r2, #5
 8013bbc:	68fa      	ldr	r2, [r7, #12]
 8013bbe:	440a      	add	r2, r1
 8013bc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013bc4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013bc8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013bca:	683b      	ldr	r3, [r7, #0]
 8013bcc:	791b      	ldrb	r3, [r3, #4]
 8013bce:	2b03      	cmp	r3, #3
 8013bd0:	d003      	beq.n	8013bda <USB_EPClearStall+0x9e>
 8013bd2:	683b      	ldr	r3, [r7, #0]
 8013bd4:	791b      	ldrb	r3, [r3, #4]
 8013bd6:	2b02      	cmp	r3, #2
 8013bd8:	d10f      	bne.n	8013bfa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013bda:	68bb      	ldr	r3, [r7, #8]
 8013bdc:	015a      	lsls	r2, r3, #5
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	4413      	add	r3, r2
 8013be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	68ba      	ldr	r2, [r7, #8]
 8013bea:	0151      	lsls	r1, r2, #5
 8013bec:	68fa      	ldr	r2, [r7, #12]
 8013bee:	440a      	add	r2, r1
 8013bf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013bf8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8013bfa:	2300      	movs	r3, #0
}
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	3714      	adds	r7, #20
 8013c00:	46bd      	mov	sp, r7
 8013c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c06:	4770      	bx	lr

08013c08 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8013c08:	b480      	push	{r7}
 8013c0a:	b085      	sub	sp, #20
 8013c0c:	af00      	add	r7, sp, #0
 8013c0e:	6078      	str	r0, [r7, #4]
 8013c10:	460b      	mov	r3, r1
 8013c12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	68fa      	ldr	r2, [r7, #12]
 8013c22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013c26:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8013c2a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013c2c:	68fb      	ldr	r3, [r7, #12]
 8013c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c32:	681a      	ldr	r2, [r3, #0]
 8013c34:	78fb      	ldrb	r3, [r7, #3]
 8013c36:	011b      	lsls	r3, r3, #4
 8013c38:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8013c3c:	68f9      	ldr	r1, [r7, #12]
 8013c3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013c42:	4313      	orrs	r3, r2
 8013c44:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8013c46:	2300      	movs	r3, #0
}
 8013c48:	4618      	mov	r0, r3
 8013c4a:	3714      	adds	r7, #20
 8013c4c:	46bd      	mov	sp, r7
 8013c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c52:	4770      	bx	lr

08013c54 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013c54:	b480      	push	{r7}
 8013c56:	b085      	sub	sp, #20
 8013c58:	af00      	add	r7, sp, #0
 8013c5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	68fa      	ldr	r2, [r7, #12]
 8013c6a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013c6e:	f023 0303 	bic.w	r3, r3, #3
 8013c72:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c7a:	685b      	ldr	r3, [r3, #4]
 8013c7c:	68fa      	ldr	r2, [r7, #12]
 8013c7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013c82:	f023 0302 	bic.w	r3, r3, #2
 8013c86:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013c88:	2300      	movs	r3, #0
}
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	3714      	adds	r7, #20
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c94:	4770      	bx	lr

08013c96 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013c96:	b480      	push	{r7}
 8013c98:	b085      	sub	sp, #20
 8013c9a:	af00      	add	r7, sp, #0
 8013c9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	68fa      	ldr	r2, [r7, #12]
 8013cac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013cb0:	f023 0303 	bic.w	r3, r3, #3
 8013cb4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013cbc:	685b      	ldr	r3, [r3, #4]
 8013cbe:	68fa      	ldr	r2, [r7, #12]
 8013cc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013cc4:	f043 0302 	orr.w	r3, r3, #2
 8013cc8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013cca:	2300      	movs	r3, #0
}
 8013ccc:	4618      	mov	r0, r3
 8013cce:	3714      	adds	r7, #20
 8013cd0:	46bd      	mov	sp, r7
 8013cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cd6:	4770      	bx	lr

08013cd8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013cd8:	b480      	push	{r7}
 8013cda:	b085      	sub	sp, #20
 8013cdc:	af00      	add	r7, sp, #0
 8013cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	695b      	ldr	r3, [r3, #20]
 8013ce4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	699b      	ldr	r3, [r3, #24]
 8013cea:	68fa      	ldr	r2, [r7, #12]
 8013cec:	4013      	ands	r3, r2
 8013cee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013cf0:	68fb      	ldr	r3, [r7, #12]
}
 8013cf2:	4618      	mov	r0, r3
 8013cf4:	3714      	adds	r7, #20
 8013cf6:	46bd      	mov	sp, r7
 8013cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cfc:	4770      	bx	lr

08013cfe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013cfe:	b480      	push	{r7}
 8013d00:	b085      	sub	sp, #20
 8013d02:	af00      	add	r7, sp, #0
 8013d04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d10:	699b      	ldr	r3, [r3, #24]
 8013d12:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d1a:	69db      	ldr	r3, [r3, #28]
 8013d1c:	68ba      	ldr	r2, [r7, #8]
 8013d1e:	4013      	ands	r3, r2
 8013d20:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8013d22:	68bb      	ldr	r3, [r7, #8]
 8013d24:	0c1b      	lsrs	r3, r3, #16
}
 8013d26:	4618      	mov	r0, r3
 8013d28:	3714      	adds	r7, #20
 8013d2a:	46bd      	mov	sp, r7
 8013d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d30:	4770      	bx	lr

08013d32 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013d32:	b480      	push	{r7}
 8013d34:	b085      	sub	sp, #20
 8013d36:	af00      	add	r7, sp, #0
 8013d38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d44:	699b      	ldr	r3, [r3, #24]
 8013d46:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d4e:	69db      	ldr	r3, [r3, #28]
 8013d50:	68ba      	ldr	r2, [r7, #8]
 8013d52:	4013      	ands	r3, r2
 8013d54:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8013d56:	68bb      	ldr	r3, [r7, #8]
 8013d58:	b29b      	uxth	r3, r3
}
 8013d5a:	4618      	mov	r0, r3
 8013d5c:	3714      	adds	r7, #20
 8013d5e:	46bd      	mov	sp, r7
 8013d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d64:	4770      	bx	lr

08013d66 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013d66:	b480      	push	{r7}
 8013d68:	b085      	sub	sp, #20
 8013d6a:	af00      	add	r7, sp, #0
 8013d6c:	6078      	str	r0, [r7, #4]
 8013d6e:	460b      	mov	r3, r1
 8013d70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013d76:	78fb      	ldrb	r3, [r7, #3]
 8013d78:	015a      	lsls	r2, r3, #5
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	4413      	add	r3, r2
 8013d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d82:	689b      	ldr	r3, [r3, #8]
 8013d84:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d8c:	695b      	ldr	r3, [r3, #20]
 8013d8e:	68ba      	ldr	r2, [r7, #8]
 8013d90:	4013      	ands	r3, r2
 8013d92:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013d94:	68bb      	ldr	r3, [r7, #8]
}
 8013d96:	4618      	mov	r0, r3
 8013d98:	3714      	adds	r7, #20
 8013d9a:	46bd      	mov	sp, r7
 8013d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da0:	4770      	bx	lr

08013da2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013da2:	b480      	push	{r7}
 8013da4:	b087      	sub	sp, #28
 8013da6:	af00      	add	r7, sp, #0
 8013da8:	6078      	str	r0, [r7, #4]
 8013daa:	460b      	mov	r3, r1
 8013dac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8013db2:	697b      	ldr	r3, [r7, #20]
 8013db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013db8:	691b      	ldr	r3, [r3, #16]
 8013dba:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013dbc:	697b      	ldr	r3, [r7, #20]
 8013dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013dc4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013dc6:	78fb      	ldrb	r3, [r7, #3]
 8013dc8:	f003 030f 	and.w	r3, r3, #15
 8013dcc:	68fa      	ldr	r2, [r7, #12]
 8013dce:	fa22 f303 	lsr.w	r3, r2, r3
 8013dd2:	01db      	lsls	r3, r3, #7
 8013dd4:	b2db      	uxtb	r3, r3
 8013dd6:	693a      	ldr	r2, [r7, #16]
 8013dd8:	4313      	orrs	r3, r2
 8013dda:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013ddc:	78fb      	ldrb	r3, [r7, #3]
 8013dde:	015a      	lsls	r2, r3, #5
 8013de0:	697b      	ldr	r3, [r7, #20]
 8013de2:	4413      	add	r3, r2
 8013de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013de8:	689b      	ldr	r3, [r3, #8]
 8013dea:	693a      	ldr	r2, [r7, #16]
 8013dec:	4013      	ands	r3, r2
 8013dee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013df0:	68bb      	ldr	r3, [r7, #8]
}
 8013df2:	4618      	mov	r0, r3
 8013df4:	371c      	adds	r7, #28
 8013df6:	46bd      	mov	sp, r7
 8013df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dfc:	4770      	bx	lr

08013dfe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013dfe:	b480      	push	{r7}
 8013e00:	b083      	sub	sp, #12
 8013e02:	af00      	add	r7, sp, #0
 8013e04:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	695b      	ldr	r3, [r3, #20]
 8013e0a:	f003 0301 	and.w	r3, r3, #1
}
 8013e0e:	4618      	mov	r0, r3
 8013e10:	370c      	adds	r7, #12
 8013e12:	46bd      	mov	sp, r7
 8013e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e18:	4770      	bx	lr
	...

08013e1c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8013e1c:	b480      	push	{r7}
 8013e1e:	b085      	sub	sp, #20
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e2e:	681a      	ldr	r2, [r3, #0]
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e36:	4619      	mov	r1, r3
 8013e38:	4b09      	ldr	r3, [pc, #36]	; (8013e60 <USB_ActivateSetup+0x44>)
 8013e3a:	4013      	ands	r3, r2
 8013e3c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e44:	685b      	ldr	r3, [r3, #4]
 8013e46:	68fa      	ldr	r2, [r7, #12]
 8013e48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013e50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013e52:	2300      	movs	r3, #0
}
 8013e54:	4618      	mov	r0, r3
 8013e56:	3714      	adds	r7, #20
 8013e58:	46bd      	mov	sp, r7
 8013e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e5e:	4770      	bx	lr
 8013e60:	fffff800 	.word	0xfffff800

08013e64 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8013e64:	b480      	push	{r7}
 8013e66:	b087      	sub	sp, #28
 8013e68:	af00      	add	r7, sp, #0
 8013e6a:	60f8      	str	r0, [r7, #12]
 8013e6c:	460b      	mov	r3, r1
 8013e6e:	607a      	str	r2, [r7, #4]
 8013e70:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	333c      	adds	r3, #60	; 0x3c
 8013e7a:	3304      	adds	r3, #4
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013e80:	693b      	ldr	r3, [r7, #16]
 8013e82:	4a26      	ldr	r2, [pc, #152]	; (8013f1c <USB_EP0_OutStart+0xb8>)
 8013e84:	4293      	cmp	r3, r2
 8013e86:	d90a      	bls.n	8013e9e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013e88:	697b      	ldr	r3, [r7, #20]
 8013e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013e94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013e98:	d101      	bne.n	8013e9e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8013e9a:	2300      	movs	r3, #0
 8013e9c:	e037      	b.n	8013f0e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8013e9e:	697b      	ldr	r3, [r7, #20]
 8013ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ea4:	461a      	mov	r2, r3
 8013ea6:	2300      	movs	r3, #0
 8013ea8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013eaa:	697b      	ldr	r3, [r7, #20]
 8013eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013eb0:	691b      	ldr	r3, [r3, #16]
 8013eb2:	697a      	ldr	r2, [r7, #20]
 8013eb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013eb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013ebc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8013ebe:	697b      	ldr	r3, [r7, #20]
 8013ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ec4:	691b      	ldr	r3, [r3, #16]
 8013ec6:	697a      	ldr	r2, [r7, #20]
 8013ec8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013ecc:	f043 0318 	orr.w	r3, r3, #24
 8013ed0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8013ed2:	697b      	ldr	r3, [r7, #20]
 8013ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ed8:	691b      	ldr	r3, [r3, #16]
 8013eda:	697a      	ldr	r2, [r7, #20]
 8013edc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013ee0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8013ee4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8013ee6:	7afb      	ldrb	r3, [r7, #11]
 8013ee8:	2b01      	cmp	r3, #1
 8013eea:	d10f      	bne.n	8013f0c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8013eec:	697b      	ldr	r3, [r7, #20]
 8013eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ef2:	461a      	mov	r2, r3
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8013ef8:	697b      	ldr	r3, [r7, #20]
 8013efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	697a      	ldr	r2, [r7, #20]
 8013f02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013f06:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8013f0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013f0c:	2300      	movs	r3, #0
}
 8013f0e:	4618      	mov	r0, r3
 8013f10:	371c      	adds	r7, #28
 8013f12:	46bd      	mov	sp, r7
 8013f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f18:	4770      	bx	lr
 8013f1a:	bf00      	nop
 8013f1c:	4f54300a 	.word	0x4f54300a

08013f20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013f20:	b480      	push	{r7}
 8013f22:	b085      	sub	sp, #20
 8013f24:	af00      	add	r7, sp, #0
 8013f26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013f28:	2300      	movs	r3, #0
 8013f2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	3301      	adds	r3, #1
 8013f30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	4a13      	ldr	r2, [pc, #76]	; (8013f84 <USB_CoreReset+0x64>)
 8013f36:	4293      	cmp	r3, r2
 8013f38:	d901      	bls.n	8013f3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8013f3a:	2303      	movs	r3, #3
 8013f3c:	e01b      	b.n	8013f76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	691b      	ldr	r3, [r3, #16]
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	daf2      	bge.n	8013f2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8013f46:	2300      	movs	r3, #0
 8013f48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	691b      	ldr	r3, [r3, #16]
 8013f4e:	f043 0201 	orr.w	r2, r3, #1
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	3301      	adds	r3, #1
 8013f5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	4a09      	ldr	r2, [pc, #36]	; (8013f84 <USB_CoreReset+0x64>)
 8013f60:	4293      	cmp	r3, r2
 8013f62:	d901      	bls.n	8013f68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8013f64:	2303      	movs	r3, #3
 8013f66:	e006      	b.n	8013f76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	691b      	ldr	r3, [r3, #16]
 8013f6c:	f003 0301 	and.w	r3, r3, #1
 8013f70:	2b01      	cmp	r3, #1
 8013f72:	d0f0      	beq.n	8013f56 <USB_CoreReset+0x36>

  return HAL_OK;
 8013f74:	2300      	movs	r3, #0
}
 8013f76:	4618      	mov	r0, r3
 8013f78:	3714      	adds	r7, #20
 8013f7a:	46bd      	mov	sp, r7
 8013f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f80:	4770      	bx	lr
 8013f82:	bf00      	nop
 8013f84:	00030d40 	.word	0x00030d40

08013f88 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8013f88:	b580      	push	{r7, lr}
 8013f8a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8013f8c:	4904      	ldr	r1, [pc, #16]	; (8013fa0 <MX_FATFS_Init+0x18>)
 8013f8e:	4805      	ldr	r0, [pc, #20]	; (8013fa4 <MX_FATFS_Init+0x1c>)
 8013f90:	f002 fa56 	bl	8016440 <FATFS_LinkDriver>
 8013f94:	4603      	mov	r3, r0
 8013f96:	461a      	mov	r2, r3
 8013f98:	4b03      	ldr	r3, [pc, #12]	; (8013fa8 <MX_FATFS_Init+0x20>)
 8013f9a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8013f9c:	bf00      	nop
 8013f9e:	bd80      	pop	{r7, pc}
 8013fa0:	2400158c 	.word	0x2400158c
 8013fa4:	080183e0 	.word	0x080183e0
 8013fa8:	24001588 	.word	0x24001588

08013fac <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8013fac:	b580      	push	{r7, lr}
 8013fae:	b082      	sub	sp, #8
 8013fb0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8013fb2:	2300      	movs	r3, #0
 8013fb4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8013fb6:	f000 f885 	bl	80140c4 <BSP_SD_IsDetected>
 8013fba:	4603      	mov	r3, r0
 8013fbc:	2b01      	cmp	r3, #1
 8013fbe:	d001      	beq.n	8013fc4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8013fc0:	2302      	movs	r3, #2
 8013fc2:	e012      	b.n	8013fea <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 8013fc4:	480b      	ldr	r0, [pc, #44]	; (8013ff4 <BSP_SD_Init+0x48>)
 8013fc6:	f7f8 ff99 	bl	800cefc <HAL_SD_Init>
 8013fca:	4603      	mov	r3, r0
 8013fcc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8013fce:	79fb      	ldrb	r3, [r7, #7]
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d109      	bne.n	8013fe8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8013fd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8013fd8:	4806      	ldr	r0, [pc, #24]	; (8013ff4 <BSP_SD_Init+0x48>)
 8013fda:	f7f9 fe4f 	bl	800dc7c <HAL_SD_ConfigWideBusOperation>
 8013fde:	4603      	mov	r3, r0
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d001      	beq.n	8013fe8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8013fe4:	2301      	movs	r3, #1
 8013fe6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8013fe8:	79fb      	ldrb	r3, [r7, #7]
}
 8013fea:	4618      	mov	r0, r3
 8013fec:	3708      	adds	r7, #8
 8013fee:	46bd      	mov	sp, r7
 8013ff0:	bd80      	pop	{r7, pc}
 8013ff2:	bf00      	nop
 8013ff4:	24000ebc 	.word	0x24000ebc

08013ff8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8013ff8:	b580      	push	{r7, lr}
 8013ffa:	b086      	sub	sp, #24
 8013ffc:	af00      	add	r7, sp, #0
 8013ffe:	60f8      	str	r0, [r7, #12]
 8014000:	60b9      	str	r1, [r7, #8]
 8014002:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014004:	2300      	movs	r3, #0
 8014006:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	68ba      	ldr	r2, [r7, #8]
 801400c:	68f9      	ldr	r1, [r7, #12]
 801400e:	4806      	ldr	r0, [pc, #24]	; (8014028 <BSP_SD_ReadBlocks_DMA+0x30>)
 8014010:	f7f9 f894 	bl	800d13c <HAL_SD_ReadBlocks_DMA>
 8014014:	4603      	mov	r3, r0
 8014016:	2b00      	cmp	r3, #0
 8014018:	d001      	beq.n	801401e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801401a:	2301      	movs	r3, #1
 801401c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801401e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014020:	4618      	mov	r0, r3
 8014022:	3718      	adds	r7, #24
 8014024:	46bd      	mov	sp, r7
 8014026:	bd80      	pop	{r7, pc}
 8014028:	24000ebc 	.word	0x24000ebc

0801402c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801402c:	b580      	push	{r7, lr}
 801402e:	b086      	sub	sp, #24
 8014030:	af00      	add	r7, sp, #0
 8014032:	60f8      	str	r0, [r7, #12]
 8014034:	60b9      	str	r1, [r7, #8]
 8014036:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014038:	2300      	movs	r3, #0
 801403a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	68ba      	ldr	r2, [r7, #8]
 8014040:	68f9      	ldr	r1, [r7, #12]
 8014042:	4806      	ldr	r0, [pc, #24]	; (801405c <BSP_SD_WriteBlocks_DMA+0x30>)
 8014044:	f7f9 f922 	bl	800d28c <HAL_SD_WriteBlocks_DMA>
 8014048:	4603      	mov	r3, r0
 801404a:	2b00      	cmp	r3, #0
 801404c:	d001      	beq.n	8014052 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801404e:	2301      	movs	r3, #1
 8014050:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014052:	7dfb      	ldrb	r3, [r7, #23]
}
 8014054:	4618      	mov	r0, r3
 8014056:	3718      	adds	r7, #24
 8014058:	46bd      	mov	sp, r7
 801405a:	bd80      	pop	{r7, pc}
 801405c:	24000ebc 	.word	0x24000ebc

08014060 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8014060:	b580      	push	{r7, lr}
 8014062:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8014064:	4805      	ldr	r0, [pc, #20]	; (801407c <BSP_SD_GetCardState+0x1c>)
 8014066:	f7f9 ff1b 	bl	800dea0 <HAL_SD_GetCardState>
 801406a:	4603      	mov	r3, r0
 801406c:	2b04      	cmp	r3, #4
 801406e:	bf14      	ite	ne
 8014070:	2301      	movne	r3, #1
 8014072:	2300      	moveq	r3, #0
 8014074:	b2db      	uxtb	r3, r3
}
 8014076:	4618      	mov	r0, r3
 8014078:	bd80      	pop	{r7, pc}
 801407a:	bf00      	nop
 801407c:	24000ebc 	.word	0x24000ebc

08014080 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8014080:	b580      	push	{r7, lr}
 8014082:	b082      	sub	sp, #8
 8014084:	af00      	add	r7, sp, #0
 8014086:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 8014088:	6879      	ldr	r1, [r7, #4]
 801408a:	4803      	ldr	r0, [pc, #12]	; (8014098 <BSP_SD_GetCardInfo+0x18>)
 801408c:	f7f9 fdca 	bl	800dc24 <HAL_SD_GetCardInfo>
}
 8014090:	bf00      	nop
 8014092:	3708      	adds	r7, #8
 8014094:	46bd      	mov	sp, r7
 8014096:	bd80      	pop	{r7, pc}
 8014098:	24000ebc 	.word	0x24000ebc

0801409c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801409c:	b580      	push	{r7, lr}
 801409e:	b082      	sub	sp, #8
 80140a0:	af00      	add	r7, sp, #0
 80140a2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80140a4:	f000 f9a0 	bl	80143e8 <BSP_SD_WriteCpltCallback>
}
 80140a8:	bf00      	nop
 80140aa:	3708      	adds	r7, #8
 80140ac:	46bd      	mov	sp, r7
 80140ae:	bd80      	pop	{r7, pc}

080140b0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80140b0:	b580      	push	{r7, lr}
 80140b2:	b082      	sub	sp, #8
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80140b8:	f000 f9a2 	bl	8014400 <BSP_SD_ReadCpltCallback>
}
 80140bc:	bf00      	nop
 80140be:	3708      	adds	r7, #8
 80140c0:	46bd      	mov	sp, r7
 80140c2:	bd80      	pop	{r7, pc}

080140c4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80140c4:	b580      	push	{r7, lr}
 80140c6:	b082      	sub	sp, #8
 80140c8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80140ca:	2301      	movs	r3, #1
 80140cc:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80140ce:	f000 f80b 	bl	80140e8 <BSP_PlatformIsDetected>
 80140d2:	4603      	mov	r3, r0
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d101      	bne.n	80140dc <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80140d8:	2300      	movs	r3, #0
 80140da:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80140dc:	79fb      	ldrb	r3, [r7, #7]
 80140de:	b2db      	uxtb	r3, r3
}
 80140e0:	4618      	mov	r0, r3
 80140e2:	3708      	adds	r7, #8
 80140e4:	46bd      	mov	sp, r7
 80140e6:	bd80      	pop	{r7, pc}

080140e8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80140e8:	b580      	push	{r7, lr}
 80140ea:	b082      	sub	sp, #8
 80140ec:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80140ee:	2301      	movs	r3, #1
 80140f0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80140f2:	2104      	movs	r1, #4
 80140f4:	4806      	ldr	r0, [pc, #24]	; (8014110 <BSP_PlatformIsDetected+0x28>)
 80140f6:	f7f3 feef 	bl	8007ed8 <HAL_GPIO_ReadPin>
 80140fa:	4603      	mov	r3, r0
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d001      	beq.n	8014104 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8014100:	2300      	movs	r3, #0
 8014102:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8014104:	79fb      	ldrb	r3, [r7, #7]
}
 8014106:	4618      	mov	r0, r3
 8014108:	3708      	adds	r7, #8
 801410a:	46bd      	mov	sp, r7
 801410c:	bd80      	pop	{r7, pc}
 801410e:	bf00      	nop
 8014110:	58020400 	.word	0x58020400

08014114 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8014114:	b580      	push	{r7, lr}
 8014116:	b084      	sub	sp, #16
 8014118:	af00      	add	r7, sp, #0
 801411a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 801411c:	f7ef fc36 	bl	800398c <HAL_GetTick>
 8014120:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8014122:	e006      	b.n	8014132 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014124:	f7ff ff9c 	bl	8014060 <BSP_SD_GetCardState>
 8014128:	4603      	mov	r3, r0
 801412a:	2b00      	cmp	r3, #0
 801412c:	d101      	bne.n	8014132 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801412e:	2300      	movs	r3, #0
 8014130:	e009      	b.n	8014146 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8014132:	f7ef fc2b 	bl	800398c <HAL_GetTick>
 8014136:	4602      	mov	r2, r0
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	1ad3      	subs	r3, r2, r3
 801413c:	687a      	ldr	r2, [r7, #4]
 801413e:	429a      	cmp	r2, r3
 8014140:	d8f0      	bhi.n	8014124 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8014142:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014146:	4618      	mov	r0, r3
 8014148:	3710      	adds	r7, #16
 801414a:	46bd      	mov	sp, r7
 801414c:	bd80      	pop	{r7, pc}
	...

08014150 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8014150:	b580      	push	{r7, lr}
 8014152:	b082      	sub	sp, #8
 8014154:	af00      	add	r7, sp, #0
 8014156:	4603      	mov	r3, r0
 8014158:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801415a:	4b0b      	ldr	r3, [pc, #44]	; (8014188 <SD_CheckStatus+0x38>)
 801415c:	2201      	movs	r2, #1
 801415e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8014160:	f7ff ff7e 	bl	8014060 <BSP_SD_GetCardState>
 8014164:	4603      	mov	r3, r0
 8014166:	2b00      	cmp	r3, #0
 8014168:	d107      	bne.n	801417a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801416a:	4b07      	ldr	r3, [pc, #28]	; (8014188 <SD_CheckStatus+0x38>)
 801416c:	781b      	ldrb	r3, [r3, #0]
 801416e:	b2db      	uxtb	r3, r3
 8014170:	f023 0301 	bic.w	r3, r3, #1
 8014174:	b2da      	uxtb	r2, r3
 8014176:	4b04      	ldr	r3, [pc, #16]	; (8014188 <SD_CheckStatus+0x38>)
 8014178:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801417a:	4b03      	ldr	r3, [pc, #12]	; (8014188 <SD_CheckStatus+0x38>)
 801417c:	781b      	ldrb	r3, [r3, #0]
 801417e:	b2db      	uxtb	r3, r3
}
 8014180:	4618      	mov	r0, r3
 8014182:	3708      	adds	r7, #8
 8014184:	46bd      	mov	sp, r7
 8014186:	bd80      	pop	{r7, pc}
 8014188:	2400000d 	.word	0x2400000d

0801418c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801418c:	b580      	push	{r7, lr}
 801418e:	b082      	sub	sp, #8
 8014190:	af00      	add	r7, sp, #0
 8014192:	4603      	mov	r3, r0
 8014194:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8014196:	f7ff ff09 	bl	8013fac <BSP_SD_Init>
 801419a:	4603      	mov	r3, r0
 801419c:	2b00      	cmp	r3, #0
 801419e:	d107      	bne.n	80141b0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80141a0:	79fb      	ldrb	r3, [r7, #7]
 80141a2:	4618      	mov	r0, r3
 80141a4:	f7ff ffd4 	bl	8014150 <SD_CheckStatus>
 80141a8:	4603      	mov	r3, r0
 80141aa:	461a      	mov	r2, r3
 80141ac:	4b04      	ldr	r3, [pc, #16]	; (80141c0 <SD_initialize+0x34>)
 80141ae:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80141b0:	4b03      	ldr	r3, [pc, #12]	; (80141c0 <SD_initialize+0x34>)
 80141b2:	781b      	ldrb	r3, [r3, #0]
 80141b4:	b2db      	uxtb	r3, r3
}
 80141b6:	4618      	mov	r0, r3
 80141b8:	3708      	adds	r7, #8
 80141ba:	46bd      	mov	sp, r7
 80141bc:	bd80      	pop	{r7, pc}
 80141be:	bf00      	nop
 80141c0:	2400000d 	.word	0x2400000d

080141c4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80141c4:	b580      	push	{r7, lr}
 80141c6:	b082      	sub	sp, #8
 80141c8:	af00      	add	r7, sp, #0
 80141ca:	4603      	mov	r3, r0
 80141cc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80141ce:	79fb      	ldrb	r3, [r7, #7]
 80141d0:	4618      	mov	r0, r3
 80141d2:	f7ff ffbd 	bl	8014150 <SD_CheckStatus>
 80141d6:	4603      	mov	r3, r0
}
 80141d8:	4618      	mov	r0, r3
 80141da:	3708      	adds	r7, #8
 80141dc:	46bd      	mov	sp, r7
 80141de:	bd80      	pop	{r7, pc}

080141e0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80141e0:	b580      	push	{r7, lr}
 80141e2:	b086      	sub	sp, #24
 80141e4:	af00      	add	r7, sp, #0
 80141e6:	60b9      	str	r1, [r7, #8]
 80141e8:	607a      	str	r2, [r7, #4]
 80141ea:	603b      	str	r3, [r7, #0]
 80141ec:	4603      	mov	r3, r0
 80141ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80141f0:	2301      	movs	r3, #1
 80141f2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80141f4:	f247 5030 	movw	r0, #30000	; 0x7530
 80141f8:	f7ff ff8c 	bl	8014114 <SD_CheckStatusWithTimeout>
 80141fc:	4603      	mov	r3, r0
 80141fe:	2b00      	cmp	r3, #0
 8014200:	da01      	bge.n	8014206 <SD_read+0x26>
  {
    return res;
 8014202:	7dfb      	ldrb	r3, [r7, #23]
 8014204:	e03b      	b.n	801427e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8014206:	683a      	ldr	r2, [r7, #0]
 8014208:	6879      	ldr	r1, [r7, #4]
 801420a:	68b8      	ldr	r0, [r7, #8]
 801420c:	f7ff fef4 	bl	8013ff8 <BSP_SD_ReadBlocks_DMA>
 8014210:	4603      	mov	r3, r0
 8014212:	2b00      	cmp	r3, #0
 8014214:	d132      	bne.n	801427c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8014216:	4b1c      	ldr	r3, [pc, #112]	; (8014288 <SD_read+0xa8>)
 8014218:	2200      	movs	r2, #0
 801421a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 801421c:	f7ef fbb6 	bl	800398c <HAL_GetTick>
 8014220:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8014222:	bf00      	nop
 8014224:	4b18      	ldr	r3, [pc, #96]	; (8014288 <SD_read+0xa8>)
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	2b00      	cmp	r3, #0
 801422a:	d108      	bne.n	801423e <SD_read+0x5e>
 801422c:	f7ef fbae 	bl	800398c <HAL_GetTick>
 8014230:	4602      	mov	r2, r0
 8014232:	693b      	ldr	r3, [r7, #16]
 8014234:	1ad3      	subs	r3, r2, r3
 8014236:	f247 522f 	movw	r2, #29999	; 0x752f
 801423a:	4293      	cmp	r3, r2
 801423c:	d9f2      	bls.n	8014224 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 801423e:	4b12      	ldr	r3, [pc, #72]	; (8014288 <SD_read+0xa8>)
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	2b00      	cmp	r3, #0
 8014244:	d102      	bne.n	801424c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8014246:	2301      	movs	r3, #1
 8014248:	75fb      	strb	r3, [r7, #23]
 801424a:	e017      	b.n	801427c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 801424c:	4b0e      	ldr	r3, [pc, #56]	; (8014288 <SD_read+0xa8>)
 801424e:	2200      	movs	r2, #0
 8014250:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014252:	f7ef fb9b 	bl	800398c <HAL_GetTick>
 8014256:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014258:	e007      	b.n	801426a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801425a:	f7ff ff01 	bl	8014060 <BSP_SD_GetCardState>
 801425e:	4603      	mov	r3, r0
 8014260:	2b00      	cmp	r3, #0
 8014262:	d102      	bne.n	801426a <SD_read+0x8a>
          {
            res = RES_OK;
 8014264:	2300      	movs	r3, #0
 8014266:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8014268:	e008      	b.n	801427c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801426a:	f7ef fb8f 	bl	800398c <HAL_GetTick>
 801426e:	4602      	mov	r2, r0
 8014270:	693b      	ldr	r3, [r7, #16]
 8014272:	1ad3      	subs	r3, r2, r3
 8014274:	f247 522f 	movw	r2, #29999	; 0x752f
 8014278:	4293      	cmp	r3, r2
 801427a:	d9ee      	bls.n	801425a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 801427c:	7dfb      	ldrb	r3, [r7, #23]
}
 801427e:	4618      	mov	r0, r3
 8014280:	3718      	adds	r7, #24
 8014282:	46bd      	mov	sp, r7
 8014284:	bd80      	pop	{r7, pc}
 8014286:	bf00      	nop
 8014288:	24001594 	.word	0x24001594

0801428c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801428c:	b580      	push	{r7, lr}
 801428e:	b086      	sub	sp, #24
 8014290:	af00      	add	r7, sp, #0
 8014292:	60b9      	str	r1, [r7, #8]
 8014294:	607a      	str	r2, [r7, #4]
 8014296:	603b      	str	r3, [r7, #0]
 8014298:	4603      	mov	r3, r0
 801429a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801429c:	2301      	movs	r3, #1
 801429e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80142a0:	4b24      	ldr	r3, [pc, #144]	; (8014334 <SD_write+0xa8>)
 80142a2:	2200      	movs	r2, #0
 80142a4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80142a6:	f247 5030 	movw	r0, #30000	; 0x7530
 80142aa:	f7ff ff33 	bl	8014114 <SD_CheckStatusWithTimeout>
 80142ae:	4603      	mov	r3, r0
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	da01      	bge.n	80142b8 <SD_write+0x2c>
  {
    return res;
 80142b4:	7dfb      	ldrb	r3, [r7, #23]
 80142b6:	e038      	b.n	801432a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80142b8:	683a      	ldr	r2, [r7, #0]
 80142ba:	6879      	ldr	r1, [r7, #4]
 80142bc:	68b8      	ldr	r0, [r7, #8]
 80142be:	f7ff feb5 	bl	801402c <BSP_SD_WriteBlocks_DMA>
 80142c2:	4603      	mov	r3, r0
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d12f      	bne.n	8014328 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80142c8:	f7ef fb60 	bl	800398c <HAL_GetTick>
 80142cc:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80142ce:	bf00      	nop
 80142d0:	4b18      	ldr	r3, [pc, #96]	; (8014334 <SD_write+0xa8>)
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d108      	bne.n	80142ea <SD_write+0x5e>
 80142d8:	f7ef fb58 	bl	800398c <HAL_GetTick>
 80142dc:	4602      	mov	r2, r0
 80142de:	693b      	ldr	r3, [r7, #16]
 80142e0:	1ad3      	subs	r3, r2, r3
 80142e2:	f247 522f 	movw	r2, #29999	; 0x752f
 80142e6:	4293      	cmp	r3, r2
 80142e8:	d9f2      	bls.n	80142d0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80142ea:	4b12      	ldr	r3, [pc, #72]	; (8014334 <SD_write+0xa8>)
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d102      	bne.n	80142f8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80142f2:	2301      	movs	r3, #1
 80142f4:	75fb      	strb	r3, [r7, #23]
 80142f6:	e017      	b.n	8014328 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80142f8:	4b0e      	ldr	r3, [pc, #56]	; (8014334 <SD_write+0xa8>)
 80142fa:	2200      	movs	r2, #0
 80142fc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80142fe:	f7ef fb45 	bl	800398c <HAL_GetTick>
 8014302:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014304:	e007      	b.n	8014316 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014306:	f7ff feab 	bl	8014060 <BSP_SD_GetCardState>
 801430a:	4603      	mov	r3, r0
 801430c:	2b00      	cmp	r3, #0
 801430e:	d102      	bne.n	8014316 <SD_write+0x8a>
          {
            res = RES_OK;
 8014310:	2300      	movs	r3, #0
 8014312:	75fb      	strb	r3, [r7, #23]
            break;
 8014314:	e008      	b.n	8014328 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014316:	f7ef fb39 	bl	800398c <HAL_GetTick>
 801431a:	4602      	mov	r2, r0
 801431c:	693b      	ldr	r3, [r7, #16]
 801431e:	1ad3      	subs	r3, r2, r3
 8014320:	f247 522f 	movw	r2, #29999	; 0x752f
 8014324:	4293      	cmp	r3, r2
 8014326:	d9ee      	bls.n	8014306 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8014328:	7dfb      	ldrb	r3, [r7, #23]
}
 801432a:	4618      	mov	r0, r3
 801432c:	3718      	adds	r7, #24
 801432e:	46bd      	mov	sp, r7
 8014330:	bd80      	pop	{r7, pc}
 8014332:	bf00      	nop
 8014334:	24001590 	.word	0x24001590

08014338 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8014338:	b580      	push	{r7, lr}
 801433a:	b08c      	sub	sp, #48	; 0x30
 801433c:	af00      	add	r7, sp, #0
 801433e:	4603      	mov	r3, r0
 8014340:	603a      	str	r2, [r7, #0]
 8014342:	71fb      	strb	r3, [r7, #7]
 8014344:	460b      	mov	r3, r1
 8014346:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8014348:	2301      	movs	r3, #1
 801434a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801434e:	4b25      	ldr	r3, [pc, #148]	; (80143e4 <SD_ioctl+0xac>)
 8014350:	781b      	ldrb	r3, [r3, #0]
 8014352:	b2db      	uxtb	r3, r3
 8014354:	f003 0301 	and.w	r3, r3, #1
 8014358:	2b00      	cmp	r3, #0
 801435a:	d001      	beq.n	8014360 <SD_ioctl+0x28>
 801435c:	2303      	movs	r3, #3
 801435e:	e03c      	b.n	80143da <SD_ioctl+0xa2>

  switch (cmd)
 8014360:	79bb      	ldrb	r3, [r7, #6]
 8014362:	2b03      	cmp	r3, #3
 8014364:	d834      	bhi.n	80143d0 <SD_ioctl+0x98>
 8014366:	a201      	add	r2, pc, #4	; (adr r2, 801436c <SD_ioctl+0x34>)
 8014368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801436c:	0801437d 	.word	0x0801437d
 8014370:	08014385 	.word	0x08014385
 8014374:	0801439d 	.word	0x0801439d
 8014378:	080143b7 	.word	0x080143b7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801437c:	2300      	movs	r3, #0
 801437e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014382:	e028      	b.n	80143d6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8014384:	f107 0308 	add.w	r3, r7, #8
 8014388:	4618      	mov	r0, r3
 801438a:	f7ff fe79 	bl	8014080 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801438e:	6a3a      	ldr	r2, [r7, #32]
 8014390:	683b      	ldr	r3, [r7, #0]
 8014392:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014394:	2300      	movs	r3, #0
 8014396:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801439a:	e01c      	b.n	80143d6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801439c:	f107 0308 	add.w	r3, r7, #8
 80143a0:	4618      	mov	r0, r3
 80143a2:	f7ff fe6d 	bl	8014080 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80143a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143a8:	b29a      	uxth	r2, r3
 80143aa:	683b      	ldr	r3, [r7, #0]
 80143ac:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80143ae:	2300      	movs	r3, #0
 80143b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80143b4:	e00f      	b.n	80143d6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80143b6:	f107 0308 	add.w	r3, r7, #8
 80143ba:	4618      	mov	r0, r3
 80143bc:	f7ff fe60 	bl	8014080 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80143c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143c2:	0a5a      	lsrs	r2, r3, #9
 80143c4:	683b      	ldr	r3, [r7, #0]
 80143c6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80143c8:	2300      	movs	r3, #0
 80143ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80143ce:	e002      	b.n	80143d6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80143d0:	2304      	movs	r3, #4
 80143d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80143d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80143da:	4618      	mov	r0, r3
 80143dc:	3730      	adds	r7, #48	; 0x30
 80143de:	46bd      	mov	sp, r7
 80143e0:	bd80      	pop	{r7, pc}
 80143e2:	bf00      	nop
 80143e4:	2400000d 	.word	0x2400000d

080143e8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80143e8:	b480      	push	{r7}
 80143ea:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80143ec:	4b03      	ldr	r3, [pc, #12]	; (80143fc <BSP_SD_WriteCpltCallback+0x14>)
 80143ee:	2201      	movs	r2, #1
 80143f0:	601a      	str	r2, [r3, #0]
}
 80143f2:	bf00      	nop
 80143f4:	46bd      	mov	sp, r7
 80143f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143fa:	4770      	bx	lr
 80143fc:	24001590 	.word	0x24001590

08014400 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8014400:	b480      	push	{r7}
 8014402:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8014404:	4b03      	ldr	r3, [pc, #12]	; (8014414 <BSP_SD_ReadCpltCallback+0x14>)
 8014406:	2201      	movs	r2, #1
 8014408:	601a      	str	r2, [r3, #0]
}
 801440a:	bf00      	nop
 801440c:	46bd      	mov	sp, r7
 801440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014412:	4770      	bx	lr
 8014414:	24001594 	.word	0x24001594

08014418 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014418:	b580      	push	{r7, lr}
 801441a:	b084      	sub	sp, #16
 801441c:	af00      	add	r7, sp, #0
 801441e:	6078      	str	r0, [r7, #4]
 8014420:	460b      	mov	r3, r1
 8014422:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014424:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8014428:	f002 fd00 	bl	8016e2c <USBD_static_malloc>
 801442c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d109      	bne.n	8014448 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	32b0      	adds	r2, #176	; 0xb0
 801443e:	2100      	movs	r1, #0
 8014440:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8014444:	2302      	movs	r3, #2
 8014446:	e0d4      	b.n	80145f2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8014448:	f44f 7207 	mov.w	r2, #540	; 0x21c
 801444c:	2100      	movs	r1, #0
 801444e:	68f8      	ldr	r0, [r7, #12]
 8014450:	f002 fd7e 	bl	8016f50 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	32b0      	adds	r2, #176	; 0xb0
 801445e:	68f9      	ldr	r1, [r7, #12]
 8014460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	32b0      	adds	r2, #176	; 0xb0
 801446e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	7c1b      	ldrb	r3, [r3, #16]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d138      	bne.n	80144f2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014480:	4b5e      	ldr	r3, [pc, #376]	; (80145fc <USBD_CDC_Init+0x1e4>)
 8014482:	7819      	ldrb	r1, [r3, #0]
 8014484:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014488:	2202      	movs	r2, #2
 801448a:	6878      	ldr	r0, [r7, #4]
 801448c:	f002 fbab 	bl	8016be6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014490:	4b5a      	ldr	r3, [pc, #360]	; (80145fc <USBD_CDC_Init+0x1e4>)
 8014492:	781b      	ldrb	r3, [r3, #0]
 8014494:	f003 020f 	and.w	r2, r3, #15
 8014498:	6879      	ldr	r1, [r7, #4]
 801449a:	4613      	mov	r3, r2
 801449c:	009b      	lsls	r3, r3, #2
 801449e:	4413      	add	r3, r2
 80144a0:	009b      	lsls	r3, r3, #2
 80144a2:	440b      	add	r3, r1
 80144a4:	3324      	adds	r3, #36	; 0x24
 80144a6:	2201      	movs	r2, #1
 80144a8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80144aa:	4b55      	ldr	r3, [pc, #340]	; (8014600 <USBD_CDC_Init+0x1e8>)
 80144ac:	7819      	ldrb	r1, [r3, #0]
 80144ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80144b2:	2202      	movs	r2, #2
 80144b4:	6878      	ldr	r0, [r7, #4]
 80144b6:	f002 fb96 	bl	8016be6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80144ba:	4b51      	ldr	r3, [pc, #324]	; (8014600 <USBD_CDC_Init+0x1e8>)
 80144bc:	781b      	ldrb	r3, [r3, #0]
 80144be:	f003 020f 	and.w	r2, r3, #15
 80144c2:	6879      	ldr	r1, [r7, #4]
 80144c4:	4613      	mov	r3, r2
 80144c6:	009b      	lsls	r3, r3, #2
 80144c8:	4413      	add	r3, r2
 80144ca:	009b      	lsls	r3, r3, #2
 80144cc:	440b      	add	r3, r1
 80144ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80144d2:	2201      	movs	r2, #1
 80144d4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80144d6:	4b4b      	ldr	r3, [pc, #300]	; (8014604 <USBD_CDC_Init+0x1ec>)
 80144d8:	781b      	ldrb	r3, [r3, #0]
 80144da:	f003 020f 	and.w	r2, r3, #15
 80144de:	6879      	ldr	r1, [r7, #4]
 80144e0:	4613      	mov	r3, r2
 80144e2:	009b      	lsls	r3, r3, #2
 80144e4:	4413      	add	r3, r2
 80144e6:	009b      	lsls	r3, r3, #2
 80144e8:	440b      	add	r3, r1
 80144ea:	3326      	adds	r3, #38	; 0x26
 80144ec:	2210      	movs	r2, #16
 80144ee:	801a      	strh	r2, [r3, #0]
 80144f0:	e035      	b.n	801455e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80144f2:	4b42      	ldr	r3, [pc, #264]	; (80145fc <USBD_CDC_Init+0x1e4>)
 80144f4:	7819      	ldrb	r1, [r3, #0]
 80144f6:	2340      	movs	r3, #64	; 0x40
 80144f8:	2202      	movs	r2, #2
 80144fa:	6878      	ldr	r0, [r7, #4]
 80144fc:	f002 fb73 	bl	8016be6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014500:	4b3e      	ldr	r3, [pc, #248]	; (80145fc <USBD_CDC_Init+0x1e4>)
 8014502:	781b      	ldrb	r3, [r3, #0]
 8014504:	f003 020f 	and.w	r2, r3, #15
 8014508:	6879      	ldr	r1, [r7, #4]
 801450a:	4613      	mov	r3, r2
 801450c:	009b      	lsls	r3, r3, #2
 801450e:	4413      	add	r3, r2
 8014510:	009b      	lsls	r3, r3, #2
 8014512:	440b      	add	r3, r1
 8014514:	3324      	adds	r3, #36	; 0x24
 8014516:	2201      	movs	r2, #1
 8014518:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801451a:	4b39      	ldr	r3, [pc, #228]	; (8014600 <USBD_CDC_Init+0x1e8>)
 801451c:	7819      	ldrb	r1, [r3, #0]
 801451e:	2340      	movs	r3, #64	; 0x40
 8014520:	2202      	movs	r2, #2
 8014522:	6878      	ldr	r0, [r7, #4]
 8014524:	f002 fb5f 	bl	8016be6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014528:	4b35      	ldr	r3, [pc, #212]	; (8014600 <USBD_CDC_Init+0x1e8>)
 801452a:	781b      	ldrb	r3, [r3, #0]
 801452c:	f003 020f 	and.w	r2, r3, #15
 8014530:	6879      	ldr	r1, [r7, #4]
 8014532:	4613      	mov	r3, r2
 8014534:	009b      	lsls	r3, r3, #2
 8014536:	4413      	add	r3, r2
 8014538:	009b      	lsls	r3, r3, #2
 801453a:	440b      	add	r3, r1
 801453c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014540:	2201      	movs	r2, #1
 8014542:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014544:	4b2f      	ldr	r3, [pc, #188]	; (8014604 <USBD_CDC_Init+0x1ec>)
 8014546:	781b      	ldrb	r3, [r3, #0]
 8014548:	f003 020f 	and.w	r2, r3, #15
 801454c:	6879      	ldr	r1, [r7, #4]
 801454e:	4613      	mov	r3, r2
 8014550:	009b      	lsls	r3, r3, #2
 8014552:	4413      	add	r3, r2
 8014554:	009b      	lsls	r3, r3, #2
 8014556:	440b      	add	r3, r1
 8014558:	3326      	adds	r3, #38	; 0x26
 801455a:	2210      	movs	r2, #16
 801455c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801455e:	4b29      	ldr	r3, [pc, #164]	; (8014604 <USBD_CDC_Init+0x1ec>)
 8014560:	7819      	ldrb	r1, [r3, #0]
 8014562:	2308      	movs	r3, #8
 8014564:	2203      	movs	r2, #3
 8014566:	6878      	ldr	r0, [r7, #4]
 8014568:	f002 fb3d 	bl	8016be6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801456c:	4b25      	ldr	r3, [pc, #148]	; (8014604 <USBD_CDC_Init+0x1ec>)
 801456e:	781b      	ldrb	r3, [r3, #0]
 8014570:	f003 020f 	and.w	r2, r3, #15
 8014574:	6879      	ldr	r1, [r7, #4]
 8014576:	4613      	mov	r3, r2
 8014578:	009b      	lsls	r3, r3, #2
 801457a:	4413      	add	r3, r2
 801457c:	009b      	lsls	r3, r3, #2
 801457e:	440b      	add	r3, r1
 8014580:	3324      	adds	r3, #36	; 0x24
 8014582:	2201      	movs	r2, #1
 8014584:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	2200      	movs	r2, #0
 801458a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014594:	687a      	ldr	r2, [r7, #4]
 8014596:	33b0      	adds	r3, #176	; 0xb0
 8014598:	009b      	lsls	r3, r3, #2
 801459a:	4413      	add	r3, r2
 801459c:	685b      	ldr	r3, [r3, #4]
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	2200      	movs	r2, #0
 80145a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	2200      	movs	r2, #0
 80145ae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d101      	bne.n	80145c0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80145bc:	2302      	movs	r3, #2
 80145be:	e018      	b.n	80145f2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	7c1b      	ldrb	r3, [r3, #16]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d10a      	bne.n	80145de <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80145c8:	4b0d      	ldr	r3, [pc, #52]	; (8014600 <USBD_CDC_Init+0x1e8>)
 80145ca:	7819      	ldrb	r1, [r3, #0]
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80145d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80145d6:	6878      	ldr	r0, [r7, #4]
 80145d8:	f002 fbf4 	bl	8016dc4 <USBD_LL_PrepareReceive>
 80145dc:	e008      	b.n	80145f0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80145de:	4b08      	ldr	r3, [pc, #32]	; (8014600 <USBD_CDC_Init+0x1e8>)
 80145e0:	7819      	ldrb	r1, [r3, #0]
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80145e8:	2340      	movs	r3, #64	; 0x40
 80145ea:	6878      	ldr	r0, [r7, #4]
 80145ec:	f002 fbea 	bl	8016dc4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80145f0:	2300      	movs	r3, #0
}
 80145f2:	4618      	mov	r0, r3
 80145f4:	3710      	adds	r7, #16
 80145f6:	46bd      	mov	sp, r7
 80145f8:	bd80      	pop	{r7, pc}
 80145fa:	bf00      	nop
 80145fc:	24000097 	.word	0x24000097
 8014600:	24000098 	.word	0x24000098
 8014604:	24000099 	.word	0x24000099

08014608 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014608:	b580      	push	{r7, lr}
 801460a:	b082      	sub	sp, #8
 801460c:	af00      	add	r7, sp, #0
 801460e:	6078      	str	r0, [r7, #4]
 8014610:	460b      	mov	r3, r1
 8014612:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8014614:	4b3a      	ldr	r3, [pc, #232]	; (8014700 <USBD_CDC_DeInit+0xf8>)
 8014616:	781b      	ldrb	r3, [r3, #0]
 8014618:	4619      	mov	r1, r3
 801461a:	6878      	ldr	r0, [r7, #4]
 801461c:	f002 fb09 	bl	8016c32 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8014620:	4b37      	ldr	r3, [pc, #220]	; (8014700 <USBD_CDC_DeInit+0xf8>)
 8014622:	781b      	ldrb	r3, [r3, #0]
 8014624:	f003 020f 	and.w	r2, r3, #15
 8014628:	6879      	ldr	r1, [r7, #4]
 801462a:	4613      	mov	r3, r2
 801462c:	009b      	lsls	r3, r3, #2
 801462e:	4413      	add	r3, r2
 8014630:	009b      	lsls	r3, r3, #2
 8014632:	440b      	add	r3, r1
 8014634:	3324      	adds	r3, #36	; 0x24
 8014636:	2200      	movs	r2, #0
 8014638:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801463a:	4b32      	ldr	r3, [pc, #200]	; (8014704 <USBD_CDC_DeInit+0xfc>)
 801463c:	781b      	ldrb	r3, [r3, #0]
 801463e:	4619      	mov	r1, r3
 8014640:	6878      	ldr	r0, [r7, #4]
 8014642:	f002 faf6 	bl	8016c32 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8014646:	4b2f      	ldr	r3, [pc, #188]	; (8014704 <USBD_CDC_DeInit+0xfc>)
 8014648:	781b      	ldrb	r3, [r3, #0]
 801464a:	f003 020f 	and.w	r2, r3, #15
 801464e:	6879      	ldr	r1, [r7, #4]
 8014650:	4613      	mov	r3, r2
 8014652:	009b      	lsls	r3, r3, #2
 8014654:	4413      	add	r3, r2
 8014656:	009b      	lsls	r3, r3, #2
 8014658:	440b      	add	r3, r1
 801465a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801465e:	2200      	movs	r2, #0
 8014660:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8014662:	4b29      	ldr	r3, [pc, #164]	; (8014708 <USBD_CDC_DeInit+0x100>)
 8014664:	781b      	ldrb	r3, [r3, #0]
 8014666:	4619      	mov	r1, r3
 8014668:	6878      	ldr	r0, [r7, #4]
 801466a:	f002 fae2 	bl	8016c32 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801466e:	4b26      	ldr	r3, [pc, #152]	; (8014708 <USBD_CDC_DeInit+0x100>)
 8014670:	781b      	ldrb	r3, [r3, #0]
 8014672:	f003 020f 	and.w	r2, r3, #15
 8014676:	6879      	ldr	r1, [r7, #4]
 8014678:	4613      	mov	r3, r2
 801467a:	009b      	lsls	r3, r3, #2
 801467c:	4413      	add	r3, r2
 801467e:	009b      	lsls	r3, r3, #2
 8014680:	440b      	add	r3, r1
 8014682:	3324      	adds	r3, #36	; 0x24
 8014684:	2200      	movs	r2, #0
 8014686:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8014688:	4b1f      	ldr	r3, [pc, #124]	; (8014708 <USBD_CDC_DeInit+0x100>)
 801468a:	781b      	ldrb	r3, [r3, #0]
 801468c:	f003 020f 	and.w	r2, r3, #15
 8014690:	6879      	ldr	r1, [r7, #4]
 8014692:	4613      	mov	r3, r2
 8014694:	009b      	lsls	r3, r3, #2
 8014696:	4413      	add	r3, r2
 8014698:	009b      	lsls	r3, r3, #2
 801469a:	440b      	add	r3, r1
 801469c:	3326      	adds	r3, #38	; 0x26
 801469e:	2200      	movs	r2, #0
 80146a0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	32b0      	adds	r2, #176	; 0xb0
 80146ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d01f      	beq.n	80146f4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80146ba:	687a      	ldr	r2, [r7, #4]
 80146bc:	33b0      	adds	r3, #176	; 0xb0
 80146be:	009b      	lsls	r3, r3, #2
 80146c0:	4413      	add	r3, r2
 80146c2:	685b      	ldr	r3, [r3, #4]
 80146c4:	685b      	ldr	r3, [r3, #4]
 80146c6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	32b0      	adds	r2, #176	; 0xb0
 80146d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146d6:	4618      	mov	r0, r3
 80146d8:	f002 fbb6 	bl	8016e48 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	32b0      	adds	r2, #176	; 0xb0
 80146e6:	2100      	movs	r1, #0
 80146e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	2200      	movs	r2, #0
 80146f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80146f4:	2300      	movs	r3, #0
}
 80146f6:	4618      	mov	r0, r3
 80146f8:	3708      	adds	r7, #8
 80146fa:	46bd      	mov	sp, r7
 80146fc:	bd80      	pop	{r7, pc}
 80146fe:	bf00      	nop
 8014700:	24000097 	.word	0x24000097
 8014704:	24000098 	.word	0x24000098
 8014708:	24000099 	.word	0x24000099

0801470c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801470c:	b580      	push	{r7, lr}
 801470e:	b086      	sub	sp, #24
 8014710:	af00      	add	r7, sp, #0
 8014712:	6078      	str	r0, [r7, #4]
 8014714:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	32b0      	adds	r2, #176	; 0xb0
 8014720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014724:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8014726:	2300      	movs	r3, #0
 8014728:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801472a:	2300      	movs	r3, #0
 801472c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801472e:	2300      	movs	r3, #0
 8014730:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014732:	693b      	ldr	r3, [r7, #16]
 8014734:	2b00      	cmp	r3, #0
 8014736:	d101      	bne.n	801473c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8014738:	2303      	movs	r3, #3
 801473a:	e0bf      	b.n	80148bc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801473c:	683b      	ldr	r3, [r7, #0]
 801473e:	781b      	ldrb	r3, [r3, #0]
 8014740:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014744:	2b00      	cmp	r3, #0
 8014746:	d050      	beq.n	80147ea <USBD_CDC_Setup+0xde>
 8014748:	2b20      	cmp	r3, #32
 801474a:	f040 80af 	bne.w	80148ac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801474e:	683b      	ldr	r3, [r7, #0]
 8014750:	88db      	ldrh	r3, [r3, #6]
 8014752:	2b00      	cmp	r3, #0
 8014754:	d03a      	beq.n	80147cc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8014756:	683b      	ldr	r3, [r7, #0]
 8014758:	781b      	ldrb	r3, [r3, #0]
 801475a:	b25b      	sxtb	r3, r3
 801475c:	2b00      	cmp	r3, #0
 801475e:	da1b      	bge.n	8014798 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014766:	687a      	ldr	r2, [r7, #4]
 8014768:	33b0      	adds	r3, #176	; 0xb0
 801476a:	009b      	lsls	r3, r3, #2
 801476c:	4413      	add	r3, r2
 801476e:	685b      	ldr	r3, [r3, #4]
 8014770:	689b      	ldr	r3, [r3, #8]
 8014772:	683a      	ldr	r2, [r7, #0]
 8014774:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8014776:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014778:	683a      	ldr	r2, [r7, #0]
 801477a:	88d2      	ldrh	r2, [r2, #6]
 801477c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801477e:	683b      	ldr	r3, [r7, #0]
 8014780:	88db      	ldrh	r3, [r3, #6]
 8014782:	2b07      	cmp	r3, #7
 8014784:	bf28      	it	cs
 8014786:	2307      	movcs	r3, #7
 8014788:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801478a:	693b      	ldr	r3, [r7, #16]
 801478c:	89fa      	ldrh	r2, [r7, #14]
 801478e:	4619      	mov	r1, r3
 8014790:	6878      	ldr	r0, [r7, #4]
 8014792:	f001 fd89 	bl	80162a8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8014796:	e090      	b.n	80148ba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8014798:	683b      	ldr	r3, [r7, #0]
 801479a:	785a      	ldrb	r2, [r3, #1]
 801479c:	693b      	ldr	r3, [r7, #16]
 801479e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80147a2:	683b      	ldr	r3, [r7, #0]
 80147a4:	88db      	ldrh	r3, [r3, #6]
 80147a6:	2b3f      	cmp	r3, #63	; 0x3f
 80147a8:	d803      	bhi.n	80147b2 <USBD_CDC_Setup+0xa6>
 80147aa:	683b      	ldr	r3, [r7, #0]
 80147ac:	88db      	ldrh	r3, [r3, #6]
 80147ae:	b2da      	uxtb	r2, r3
 80147b0:	e000      	b.n	80147b4 <USBD_CDC_Setup+0xa8>
 80147b2:	2240      	movs	r2, #64	; 0x40
 80147b4:	693b      	ldr	r3, [r7, #16]
 80147b6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80147ba:	6939      	ldr	r1, [r7, #16]
 80147bc:	693b      	ldr	r3, [r7, #16]
 80147be:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80147c2:	461a      	mov	r2, r3
 80147c4:	6878      	ldr	r0, [r7, #4]
 80147c6:	f001 fd9b 	bl	8016300 <USBD_CtlPrepareRx>
      break;
 80147ca:	e076      	b.n	80148ba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80147d2:	687a      	ldr	r2, [r7, #4]
 80147d4:	33b0      	adds	r3, #176	; 0xb0
 80147d6:	009b      	lsls	r3, r3, #2
 80147d8:	4413      	add	r3, r2
 80147da:	685b      	ldr	r3, [r3, #4]
 80147dc:	689b      	ldr	r3, [r3, #8]
 80147de:	683a      	ldr	r2, [r7, #0]
 80147e0:	7850      	ldrb	r0, [r2, #1]
 80147e2:	2200      	movs	r2, #0
 80147e4:	6839      	ldr	r1, [r7, #0]
 80147e6:	4798      	blx	r3
      break;
 80147e8:	e067      	b.n	80148ba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80147ea:	683b      	ldr	r3, [r7, #0]
 80147ec:	785b      	ldrb	r3, [r3, #1]
 80147ee:	2b0b      	cmp	r3, #11
 80147f0:	d851      	bhi.n	8014896 <USBD_CDC_Setup+0x18a>
 80147f2:	a201      	add	r2, pc, #4	; (adr r2, 80147f8 <USBD_CDC_Setup+0xec>)
 80147f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147f8:	08014829 	.word	0x08014829
 80147fc:	080148a5 	.word	0x080148a5
 8014800:	08014897 	.word	0x08014897
 8014804:	08014897 	.word	0x08014897
 8014808:	08014897 	.word	0x08014897
 801480c:	08014897 	.word	0x08014897
 8014810:	08014897 	.word	0x08014897
 8014814:	08014897 	.word	0x08014897
 8014818:	08014897 	.word	0x08014897
 801481c:	08014897 	.word	0x08014897
 8014820:	08014853 	.word	0x08014853
 8014824:	0801487d 	.word	0x0801487d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801482e:	b2db      	uxtb	r3, r3
 8014830:	2b03      	cmp	r3, #3
 8014832:	d107      	bne.n	8014844 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014834:	f107 030a 	add.w	r3, r7, #10
 8014838:	2202      	movs	r2, #2
 801483a:	4619      	mov	r1, r3
 801483c:	6878      	ldr	r0, [r7, #4]
 801483e:	f001 fd33 	bl	80162a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014842:	e032      	b.n	80148aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014844:	6839      	ldr	r1, [r7, #0]
 8014846:	6878      	ldr	r0, [r7, #4]
 8014848:	f001 fcbd 	bl	80161c6 <USBD_CtlError>
            ret = USBD_FAIL;
 801484c:	2303      	movs	r3, #3
 801484e:	75fb      	strb	r3, [r7, #23]
          break;
 8014850:	e02b      	b.n	80148aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014858:	b2db      	uxtb	r3, r3
 801485a:	2b03      	cmp	r3, #3
 801485c:	d107      	bne.n	801486e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801485e:	f107 030d 	add.w	r3, r7, #13
 8014862:	2201      	movs	r2, #1
 8014864:	4619      	mov	r1, r3
 8014866:	6878      	ldr	r0, [r7, #4]
 8014868:	f001 fd1e 	bl	80162a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801486c:	e01d      	b.n	80148aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801486e:	6839      	ldr	r1, [r7, #0]
 8014870:	6878      	ldr	r0, [r7, #4]
 8014872:	f001 fca8 	bl	80161c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8014876:	2303      	movs	r3, #3
 8014878:	75fb      	strb	r3, [r7, #23]
          break;
 801487a:	e016      	b.n	80148aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014882:	b2db      	uxtb	r3, r3
 8014884:	2b03      	cmp	r3, #3
 8014886:	d00f      	beq.n	80148a8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8014888:	6839      	ldr	r1, [r7, #0]
 801488a:	6878      	ldr	r0, [r7, #4]
 801488c:	f001 fc9b 	bl	80161c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8014890:	2303      	movs	r3, #3
 8014892:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014894:	e008      	b.n	80148a8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8014896:	6839      	ldr	r1, [r7, #0]
 8014898:	6878      	ldr	r0, [r7, #4]
 801489a:	f001 fc94 	bl	80161c6 <USBD_CtlError>
          ret = USBD_FAIL;
 801489e:	2303      	movs	r3, #3
 80148a0:	75fb      	strb	r3, [r7, #23]
          break;
 80148a2:	e002      	b.n	80148aa <USBD_CDC_Setup+0x19e>
          break;
 80148a4:	bf00      	nop
 80148a6:	e008      	b.n	80148ba <USBD_CDC_Setup+0x1ae>
          break;
 80148a8:	bf00      	nop
      }
      break;
 80148aa:	e006      	b.n	80148ba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80148ac:	6839      	ldr	r1, [r7, #0]
 80148ae:	6878      	ldr	r0, [r7, #4]
 80148b0:	f001 fc89 	bl	80161c6 <USBD_CtlError>
      ret = USBD_FAIL;
 80148b4:	2303      	movs	r3, #3
 80148b6:	75fb      	strb	r3, [r7, #23]
      break;
 80148b8:	bf00      	nop
  }

  return (uint8_t)ret;
 80148ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80148bc:	4618      	mov	r0, r3
 80148be:	3718      	adds	r7, #24
 80148c0:	46bd      	mov	sp, r7
 80148c2:	bd80      	pop	{r7, pc}

080148c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80148c4:	b580      	push	{r7, lr}
 80148c6:	b084      	sub	sp, #16
 80148c8:	af00      	add	r7, sp, #0
 80148ca:	6078      	str	r0, [r7, #4]
 80148cc:	460b      	mov	r3, r1
 80148ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80148d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	32b0      	adds	r2, #176	; 0xb0
 80148e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d101      	bne.n	80148ee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80148ea:	2303      	movs	r3, #3
 80148ec:	e065      	b.n	80149ba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	32b0      	adds	r2, #176	; 0xb0
 80148f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80148fe:	78fb      	ldrb	r3, [r7, #3]
 8014900:	f003 020f 	and.w	r2, r3, #15
 8014904:	6879      	ldr	r1, [r7, #4]
 8014906:	4613      	mov	r3, r2
 8014908:	009b      	lsls	r3, r3, #2
 801490a:	4413      	add	r3, r2
 801490c:	009b      	lsls	r3, r3, #2
 801490e:	440b      	add	r3, r1
 8014910:	3318      	adds	r3, #24
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	2b00      	cmp	r3, #0
 8014916:	d02f      	beq.n	8014978 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8014918:	78fb      	ldrb	r3, [r7, #3]
 801491a:	f003 020f 	and.w	r2, r3, #15
 801491e:	6879      	ldr	r1, [r7, #4]
 8014920:	4613      	mov	r3, r2
 8014922:	009b      	lsls	r3, r3, #2
 8014924:	4413      	add	r3, r2
 8014926:	009b      	lsls	r3, r3, #2
 8014928:	440b      	add	r3, r1
 801492a:	3318      	adds	r3, #24
 801492c:	681a      	ldr	r2, [r3, #0]
 801492e:	78fb      	ldrb	r3, [r7, #3]
 8014930:	f003 010f 	and.w	r1, r3, #15
 8014934:	68f8      	ldr	r0, [r7, #12]
 8014936:	460b      	mov	r3, r1
 8014938:	00db      	lsls	r3, r3, #3
 801493a:	440b      	add	r3, r1
 801493c:	009b      	lsls	r3, r3, #2
 801493e:	4403      	add	r3, r0
 8014940:	3344      	adds	r3, #68	; 0x44
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	fbb2 f1f3 	udiv	r1, r2, r3
 8014948:	fb01 f303 	mul.w	r3, r1, r3
 801494c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801494e:	2b00      	cmp	r3, #0
 8014950:	d112      	bne.n	8014978 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8014952:	78fb      	ldrb	r3, [r7, #3]
 8014954:	f003 020f 	and.w	r2, r3, #15
 8014958:	6879      	ldr	r1, [r7, #4]
 801495a:	4613      	mov	r3, r2
 801495c:	009b      	lsls	r3, r3, #2
 801495e:	4413      	add	r3, r2
 8014960:	009b      	lsls	r3, r3, #2
 8014962:	440b      	add	r3, r1
 8014964:	3318      	adds	r3, #24
 8014966:	2200      	movs	r2, #0
 8014968:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801496a:	78f9      	ldrb	r1, [r7, #3]
 801496c:	2300      	movs	r3, #0
 801496e:	2200      	movs	r2, #0
 8014970:	6878      	ldr	r0, [r7, #4]
 8014972:	f002 fa06 	bl	8016d82 <USBD_LL_Transmit>
 8014976:	e01f      	b.n	80149b8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8014978:	68bb      	ldr	r3, [r7, #8]
 801497a:	2200      	movs	r2, #0
 801497c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014986:	687a      	ldr	r2, [r7, #4]
 8014988:	33b0      	adds	r3, #176	; 0xb0
 801498a:	009b      	lsls	r3, r3, #2
 801498c:	4413      	add	r3, r2
 801498e:	685b      	ldr	r3, [r3, #4]
 8014990:	691b      	ldr	r3, [r3, #16]
 8014992:	2b00      	cmp	r3, #0
 8014994:	d010      	beq.n	80149b8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801499c:	687a      	ldr	r2, [r7, #4]
 801499e:	33b0      	adds	r3, #176	; 0xb0
 80149a0:	009b      	lsls	r3, r3, #2
 80149a2:	4413      	add	r3, r2
 80149a4:	685b      	ldr	r3, [r3, #4]
 80149a6:	691b      	ldr	r3, [r3, #16]
 80149a8:	68ba      	ldr	r2, [r7, #8]
 80149aa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80149ae:	68ba      	ldr	r2, [r7, #8]
 80149b0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80149b4:	78fa      	ldrb	r2, [r7, #3]
 80149b6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80149b8:	2300      	movs	r3, #0
}
 80149ba:	4618      	mov	r0, r3
 80149bc:	3710      	adds	r7, #16
 80149be:	46bd      	mov	sp, r7
 80149c0:	bd80      	pop	{r7, pc}

080149c2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80149c2:	b580      	push	{r7, lr}
 80149c4:	b084      	sub	sp, #16
 80149c6:	af00      	add	r7, sp, #0
 80149c8:	6078      	str	r0, [r7, #4]
 80149ca:	460b      	mov	r3, r1
 80149cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	32b0      	adds	r2, #176	; 0xb0
 80149d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149dc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	32b0      	adds	r2, #176	; 0xb0
 80149e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d101      	bne.n	80149f4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80149f0:	2303      	movs	r3, #3
 80149f2:	e01a      	b.n	8014a2a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80149f4:	78fb      	ldrb	r3, [r7, #3]
 80149f6:	4619      	mov	r1, r3
 80149f8:	6878      	ldr	r0, [r7, #4]
 80149fa:	f002 fa04 	bl	8016e06 <USBD_LL_GetRxDataSize>
 80149fe:	4602      	mov	r2, r0
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014a0c:	687a      	ldr	r2, [r7, #4]
 8014a0e:	33b0      	adds	r3, #176	; 0xb0
 8014a10:	009b      	lsls	r3, r3, #2
 8014a12:	4413      	add	r3, r2
 8014a14:	685b      	ldr	r3, [r3, #4]
 8014a16:	68db      	ldr	r3, [r3, #12]
 8014a18:	68fa      	ldr	r2, [r7, #12]
 8014a1a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8014a1e:	68fa      	ldr	r2, [r7, #12]
 8014a20:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8014a24:	4611      	mov	r1, r2
 8014a26:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014a28:	2300      	movs	r3, #0
}
 8014a2a:	4618      	mov	r0, r3
 8014a2c:	3710      	adds	r7, #16
 8014a2e:	46bd      	mov	sp, r7
 8014a30:	bd80      	pop	{r7, pc}

08014a32 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014a32:	b580      	push	{r7, lr}
 8014a34:	b084      	sub	sp, #16
 8014a36:	af00      	add	r7, sp, #0
 8014a38:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	32b0      	adds	r2, #176	; 0xb0
 8014a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a48:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d101      	bne.n	8014a54 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014a50:	2303      	movs	r3, #3
 8014a52:	e025      	b.n	8014aa0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014a5a:	687a      	ldr	r2, [r7, #4]
 8014a5c:	33b0      	adds	r3, #176	; 0xb0
 8014a5e:	009b      	lsls	r3, r3, #2
 8014a60:	4413      	add	r3, r2
 8014a62:	685b      	ldr	r3, [r3, #4]
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d01a      	beq.n	8014a9e <USBD_CDC_EP0_RxReady+0x6c>
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8014a6e:	2bff      	cmp	r3, #255	; 0xff
 8014a70:	d015      	beq.n	8014a9e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014a78:	687a      	ldr	r2, [r7, #4]
 8014a7a:	33b0      	adds	r3, #176	; 0xb0
 8014a7c:	009b      	lsls	r3, r3, #2
 8014a7e:	4413      	add	r3, r2
 8014a80:	685b      	ldr	r3, [r3, #4]
 8014a82:	689b      	ldr	r3, [r3, #8]
 8014a84:	68fa      	ldr	r2, [r7, #12]
 8014a86:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8014a8a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8014a8c:	68fa      	ldr	r2, [r7, #12]
 8014a8e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014a92:	b292      	uxth	r2, r2
 8014a94:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	22ff      	movs	r2, #255	; 0xff
 8014a9a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8014a9e:	2300      	movs	r3, #0
}
 8014aa0:	4618      	mov	r0, r3
 8014aa2:	3710      	adds	r7, #16
 8014aa4:	46bd      	mov	sp, r7
 8014aa6:	bd80      	pop	{r7, pc}

08014aa8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014aa8:	b580      	push	{r7, lr}
 8014aaa:	b086      	sub	sp, #24
 8014aac:	af00      	add	r7, sp, #0
 8014aae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014ab0:	2182      	movs	r1, #130	; 0x82
 8014ab2:	4818      	ldr	r0, [pc, #96]	; (8014b14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014ab4:	f000 fd4f 	bl	8015556 <USBD_GetEpDesc>
 8014ab8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014aba:	2101      	movs	r1, #1
 8014abc:	4815      	ldr	r0, [pc, #84]	; (8014b14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014abe:	f000 fd4a 	bl	8015556 <USBD_GetEpDesc>
 8014ac2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014ac4:	2181      	movs	r1, #129	; 0x81
 8014ac6:	4813      	ldr	r0, [pc, #76]	; (8014b14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014ac8:	f000 fd45 	bl	8015556 <USBD_GetEpDesc>
 8014acc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014ace:	697b      	ldr	r3, [r7, #20]
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	d002      	beq.n	8014ada <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014ad4:	697b      	ldr	r3, [r7, #20]
 8014ad6:	2210      	movs	r2, #16
 8014ad8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014ada:	693b      	ldr	r3, [r7, #16]
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d006      	beq.n	8014aee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014ae0:	693b      	ldr	r3, [r7, #16]
 8014ae2:	2200      	movs	r2, #0
 8014ae4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014ae8:	711a      	strb	r2, [r3, #4]
 8014aea:	2200      	movs	r2, #0
 8014aec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014aee:	68fb      	ldr	r3, [r7, #12]
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d006      	beq.n	8014b02 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	2200      	movs	r2, #0
 8014af8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014afc:	711a      	strb	r2, [r3, #4]
 8014afe:	2200      	movs	r2, #0
 8014b00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	2243      	movs	r2, #67	; 0x43
 8014b06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014b08:	4b02      	ldr	r3, [pc, #8]	; (8014b14 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8014b0a:	4618      	mov	r0, r3
 8014b0c:	3718      	adds	r7, #24
 8014b0e:	46bd      	mov	sp, r7
 8014b10:	bd80      	pop	{r7, pc}
 8014b12:	bf00      	nop
 8014b14:	24000054 	.word	0x24000054

08014b18 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014b18:	b580      	push	{r7, lr}
 8014b1a:	b086      	sub	sp, #24
 8014b1c:	af00      	add	r7, sp, #0
 8014b1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014b20:	2182      	movs	r1, #130	; 0x82
 8014b22:	4818      	ldr	r0, [pc, #96]	; (8014b84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014b24:	f000 fd17 	bl	8015556 <USBD_GetEpDesc>
 8014b28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014b2a:	2101      	movs	r1, #1
 8014b2c:	4815      	ldr	r0, [pc, #84]	; (8014b84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014b2e:	f000 fd12 	bl	8015556 <USBD_GetEpDesc>
 8014b32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014b34:	2181      	movs	r1, #129	; 0x81
 8014b36:	4813      	ldr	r0, [pc, #76]	; (8014b84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014b38:	f000 fd0d 	bl	8015556 <USBD_GetEpDesc>
 8014b3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014b3e:	697b      	ldr	r3, [r7, #20]
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d002      	beq.n	8014b4a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8014b44:	697b      	ldr	r3, [r7, #20]
 8014b46:	2210      	movs	r2, #16
 8014b48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014b4a:	693b      	ldr	r3, [r7, #16]
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d006      	beq.n	8014b5e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014b50:	693b      	ldr	r3, [r7, #16]
 8014b52:	2200      	movs	r2, #0
 8014b54:	711a      	strb	r2, [r3, #4]
 8014b56:	2200      	movs	r2, #0
 8014b58:	f042 0202 	orr.w	r2, r2, #2
 8014b5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d006      	beq.n	8014b72 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014b64:	68fb      	ldr	r3, [r7, #12]
 8014b66:	2200      	movs	r2, #0
 8014b68:	711a      	strb	r2, [r3, #4]
 8014b6a:	2200      	movs	r2, #0
 8014b6c:	f042 0202 	orr.w	r2, r2, #2
 8014b70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	2243      	movs	r2, #67	; 0x43
 8014b76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014b78:	4b02      	ldr	r3, [pc, #8]	; (8014b84 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8014b7a:	4618      	mov	r0, r3
 8014b7c:	3718      	adds	r7, #24
 8014b7e:	46bd      	mov	sp, r7
 8014b80:	bd80      	pop	{r7, pc}
 8014b82:	bf00      	nop
 8014b84:	24000054 	.word	0x24000054

08014b88 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014b88:	b580      	push	{r7, lr}
 8014b8a:	b086      	sub	sp, #24
 8014b8c:	af00      	add	r7, sp, #0
 8014b8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014b90:	2182      	movs	r1, #130	; 0x82
 8014b92:	4818      	ldr	r0, [pc, #96]	; (8014bf4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014b94:	f000 fcdf 	bl	8015556 <USBD_GetEpDesc>
 8014b98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014b9a:	2101      	movs	r1, #1
 8014b9c:	4815      	ldr	r0, [pc, #84]	; (8014bf4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014b9e:	f000 fcda 	bl	8015556 <USBD_GetEpDesc>
 8014ba2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014ba4:	2181      	movs	r1, #129	; 0x81
 8014ba6:	4813      	ldr	r0, [pc, #76]	; (8014bf4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014ba8:	f000 fcd5 	bl	8015556 <USBD_GetEpDesc>
 8014bac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014bae:	697b      	ldr	r3, [r7, #20]
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d002      	beq.n	8014bba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014bb4:	697b      	ldr	r3, [r7, #20]
 8014bb6:	2210      	movs	r2, #16
 8014bb8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014bba:	693b      	ldr	r3, [r7, #16]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d006      	beq.n	8014bce <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014bc0:	693b      	ldr	r3, [r7, #16]
 8014bc2:	2200      	movs	r2, #0
 8014bc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014bc8:	711a      	strb	r2, [r3, #4]
 8014bca:	2200      	movs	r2, #0
 8014bcc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d006      	beq.n	8014be2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	2200      	movs	r2, #0
 8014bd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014bdc:	711a      	strb	r2, [r3, #4]
 8014bde:	2200      	movs	r2, #0
 8014be0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	2243      	movs	r2, #67	; 0x43
 8014be6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014be8:	4b02      	ldr	r3, [pc, #8]	; (8014bf4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8014bea:	4618      	mov	r0, r3
 8014bec:	3718      	adds	r7, #24
 8014bee:	46bd      	mov	sp, r7
 8014bf0:	bd80      	pop	{r7, pc}
 8014bf2:	bf00      	nop
 8014bf4:	24000054 	.word	0x24000054

08014bf8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014bf8:	b480      	push	{r7}
 8014bfa:	b083      	sub	sp, #12
 8014bfc:	af00      	add	r7, sp, #0
 8014bfe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	220a      	movs	r2, #10
 8014c04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014c06:	4b03      	ldr	r3, [pc, #12]	; (8014c14 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014c08:	4618      	mov	r0, r3
 8014c0a:	370c      	adds	r7, #12
 8014c0c:	46bd      	mov	sp, r7
 8014c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c12:	4770      	bx	lr
 8014c14:	24000010 	.word	0x24000010

08014c18 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014c18:	b480      	push	{r7}
 8014c1a:	b083      	sub	sp, #12
 8014c1c:	af00      	add	r7, sp, #0
 8014c1e:	6078      	str	r0, [r7, #4]
 8014c20:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014c22:	683b      	ldr	r3, [r7, #0]
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d101      	bne.n	8014c2c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014c28:	2303      	movs	r3, #3
 8014c2a:	e009      	b.n	8014c40 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014c32:	687a      	ldr	r2, [r7, #4]
 8014c34:	33b0      	adds	r3, #176	; 0xb0
 8014c36:	009b      	lsls	r3, r3, #2
 8014c38:	4413      	add	r3, r2
 8014c3a:	683a      	ldr	r2, [r7, #0]
 8014c3c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8014c3e:	2300      	movs	r3, #0
}
 8014c40:	4618      	mov	r0, r3
 8014c42:	370c      	adds	r7, #12
 8014c44:	46bd      	mov	sp, r7
 8014c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c4a:	4770      	bx	lr

08014c4c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014c4c:	b480      	push	{r7}
 8014c4e:	b087      	sub	sp, #28
 8014c50:	af00      	add	r7, sp, #0
 8014c52:	60f8      	str	r0, [r7, #12]
 8014c54:	60b9      	str	r1, [r7, #8]
 8014c56:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	32b0      	adds	r2, #176	; 0xb0
 8014c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c66:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014c68:	697b      	ldr	r3, [r7, #20]
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d101      	bne.n	8014c72 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014c6e:	2303      	movs	r3, #3
 8014c70:	e008      	b.n	8014c84 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8014c72:	697b      	ldr	r3, [r7, #20]
 8014c74:	68ba      	ldr	r2, [r7, #8]
 8014c76:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8014c7a:	697b      	ldr	r3, [r7, #20]
 8014c7c:	687a      	ldr	r2, [r7, #4]
 8014c7e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8014c82:	2300      	movs	r3, #0
}
 8014c84:	4618      	mov	r0, r3
 8014c86:	371c      	adds	r7, #28
 8014c88:	46bd      	mov	sp, r7
 8014c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c8e:	4770      	bx	lr

08014c90 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014c90:	b480      	push	{r7}
 8014c92:	b085      	sub	sp, #20
 8014c94:	af00      	add	r7, sp, #0
 8014c96:	6078      	str	r0, [r7, #4]
 8014c98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	32b0      	adds	r2, #176	; 0xb0
 8014ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ca8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d101      	bne.n	8014cb4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8014cb0:	2303      	movs	r3, #3
 8014cb2:	e004      	b.n	8014cbe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	683a      	ldr	r2, [r7, #0]
 8014cb8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8014cbc:	2300      	movs	r3, #0
}
 8014cbe:	4618      	mov	r0, r3
 8014cc0:	3714      	adds	r7, #20
 8014cc2:	46bd      	mov	sp, r7
 8014cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cc8:	4770      	bx	lr
	...

08014ccc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8014ccc:	b580      	push	{r7, lr}
 8014cce:	b084      	sub	sp, #16
 8014cd0:	af00      	add	r7, sp, #0
 8014cd2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	32b0      	adds	r2, #176	; 0xb0
 8014cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ce2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8014ce4:	2301      	movs	r3, #1
 8014ce6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014ce8:	68bb      	ldr	r3, [r7, #8]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d101      	bne.n	8014cf2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014cee:	2303      	movs	r3, #3
 8014cf0:	e025      	b.n	8014d3e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8014cf2:	68bb      	ldr	r3, [r7, #8]
 8014cf4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d11f      	bne.n	8014d3c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014cfc:	68bb      	ldr	r3, [r7, #8]
 8014cfe:	2201      	movs	r2, #1
 8014d00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8014d04:	4b10      	ldr	r3, [pc, #64]	; (8014d48 <USBD_CDC_TransmitPacket+0x7c>)
 8014d06:	781b      	ldrb	r3, [r3, #0]
 8014d08:	f003 020f 	and.w	r2, r3, #15
 8014d0c:	68bb      	ldr	r3, [r7, #8]
 8014d0e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8014d12:	6878      	ldr	r0, [r7, #4]
 8014d14:	4613      	mov	r3, r2
 8014d16:	009b      	lsls	r3, r3, #2
 8014d18:	4413      	add	r3, r2
 8014d1a:	009b      	lsls	r3, r3, #2
 8014d1c:	4403      	add	r3, r0
 8014d1e:	3318      	adds	r3, #24
 8014d20:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8014d22:	4b09      	ldr	r3, [pc, #36]	; (8014d48 <USBD_CDC_TransmitPacket+0x7c>)
 8014d24:	7819      	ldrb	r1, [r3, #0]
 8014d26:	68bb      	ldr	r3, [r7, #8]
 8014d28:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014d2c:	68bb      	ldr	r3, [r7, #8]
 8014d2e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014d32:	6878      	ldr	r0, [r7, #4]
 8014d34:	f002 f825 	bl	8016d82 <USBD_LL_Transmit>

    ret = USBD_OK;
 8014d38:	2300      	movs	r3, #0
 8014d3a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8014d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d3e:	4618      	mov	r0, r3
 8014d40:	3710      	adds	r7, #16
 8014d42:	46bd      	mov	sp, r7
 8014d44:	bd80      	pop	{r7, pc}
 8014d46:	bf00      	nop
 8014d48:	24000097 	.word	0x24000097

08014d4c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014d4c:	b580      	push	{r7, lr}
 8014d4e:	b084      	sub	sp, #16
 8014d50:	af00      	add	r7, sp, #0
 8014d52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	32b0      	adds	r2, #176	; 0xb0
 8014d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d62:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	32b0      	adds	r2, #176	; 0xb0
 8014d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d101      	bne.n	8014d7a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8014d76:	2303      	movs	r3, #3
 8014d78:	e018      	b.n	8014dac <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	7c1b      	ldrb	r3, [r3, #16]
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d10a      	bne.n	8014d98 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014d82:	4b0c      	ldr	r3, [pc, #48]	; (8014db4 <USBD_CDC_ReceivePacket+0x68>)
 8014d84:	7819      	ldrb	r1, [r3, #0]
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014d8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014d90:	6878      	ldr	r0, [r7, #4]
 8014d92:	f002 f817 	bl	8016dc4 <USBD_LL_PrepareReceive>
 8014d96:	e008      	b.n	8014daa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014d98:	4b06      	ldr	r3, [pc, #24]	; (8014db4 <USBD_CDC_ReceivePacket+0x68>)
 8014d9a:	7819      	ldrb	r1, [r3, #0]
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014da2:	2340      	movs	r3, #64	; 0x40
 8014da4:	6878      	ldr	r0, [r7, #4]
 8014da6:	f002 f80d 	bl	8016dc4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014daa:	2300      	movs	r3, #0
}
 8014dac:	4618      	mov	r0, r3
 8014dae:	3710      	adds	r7, #16
 8014db0:	46bd      	mov	sp, r7
 8014db2:	bd80      	pop	{r7, pc}
 8014db4:	24000098 	.word	0x24000098

08014db8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014db8:	b580      	push	{r7, lr}
 8014dba:	b086      	sub	sp, #24
 8014dbc:	af00      	add	r7, sp, #0
 8014dbe:	60f8      	str	r0, [r7, #12]
 8014dc0:	60b9      	str	r1, [r7, #8]
 8014dc2:	4613      	mov	r3, r2
 8014dc4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d101      	bne.n	8014dd0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014dcc:	2303      	movs	r3, #3
 8014dce:	e01f      	b.n	8014e10 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	2200      	movs	r2, #0
 8014dd4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	2200      	movs	r2, #0
 8014ddc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8014de0:	68fb      	ldr	r3, [r7, #12]
 8014de2:	2200      	movs	r2, #0
 8014de4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014de8:	68bb      	ldr	r3, [r7, #8]
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d003      	beq.n	8014df6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	68ba      	ldr	r2, [r7, #8]
 8014df2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	2201      	movs	r2, #1
 8014dfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	79fa      	ldrb	r2, [r7, #7]
 8014e02:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014e04:	68f8      	ldr	r0, [r7, #12]
 8014e06:	f001 fe81 	bl	8016b0c <USBD_LL_Init>
 8014e0a:	4603      	mov	r3, r0
 8014e0c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014e10:	4618      	mov	r0, r3
 8014e12:	3718      	adds	r7, #24
 8014e14:	46bd      	mov	sp, r7
 8014e16:	bd80      	pop	{r7, pc}

08014e18 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014e18:	b580      	push	{r7, lr}
 8014e1a:	b084      	sub	sp, #16
 8014e1c:	af00      	add	r7, sp, #0
 8014e1e:	6078      	str	r0, [r7, #4]
 8014e20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014e22:	2300      	movs	r3, #0
 8014e24:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014e26:	683b      	ldr	r3, [r7, #0]
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d101      	bne.n	8014e30 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014e2c:	2303      	movs	r3, #3
 8014e2e:	e025      	b.n	8014e7c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	683a      	ldr	r2, [r7, #0]
 8014e34:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	32ae      	adds	r2, #174	; 0xae
 8014e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d00f      	beq.n	8014e6c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	32ae      	adds	r2, #174	; 0xae
 8014e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e5c:	f107 020e 	add.w	r2, r7, #14
 8014e60:	4610      	mov	r0, r2
 8014e62:	4798      	blx	r3
 8014e64:	4602      	mov	r2, r0
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8014e72:	1c5a      	adds	r2, r3, #1
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8014e7a:	2300      	movs	r3, #0
}
 8014e7c:	4618      	mov	r0, r3
 8014e7e:	3710      	adds	r7, #16
 8014e80:	46bd      	mov	sp, r7
 8014e82:	bd80      	pop	{r7, pc}

08014e84 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014e84:	b580      	push	{r7, lr}
 8014e86:	b082      	sub	sp, #8
 8014e88:	af00      	add	r7, sp, #0
 8014e8a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8014e8c:	6878      	ldr	r0, [r7, #4]
 8014e8e:	f001 fe8f 	bl	8016bb0 <USBD_LL_Start>
 8014e92:	4603      	mov	r3, r0
}
 8014e94:	4618      	mov	r0, r3
 8014e96:	3708      	adds	r7, #8
 8014e98:	46bd      	mov	sp, r7
 8014e9a:	bd80      	pop	{r7, pc}

08014e9c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8014e9c:	b480      	push	{r7}
 8014e9e:	b083      	sub	sp, #12
 8014ea0:	af00      	add	r7, sp, #0
 8014ea2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014ea4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8014ea6:	4618      	mov	r0, r3
 8014ea8:	370c      	adds	r7, #12
 8014eaa:	46bd      	mov	sp, r7
 8014eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eb0:	4770      	bx	lr

08014eb2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014eb2:	b580      	push	{r7, lr}
 8014eb4:	b084      	sub	sp, #16
 8014eb6:	af00      	add	r7, sp, #0
 8014eb8:	6078      	str	r0, [r7, #4]
 8014eba:	460b      	mov	r3, r1
 8014ebc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014ebe:	2300      	movs	r3, #0
 8014ec0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d009      	beq.n	8014ee0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	78fa      	ldrb	r2, [r7, #3]
 8014ed6:	4611      	mov	r1, r2
 8014ed8:	6878      	ldr	r0, [r7, #4]
 8014eda:	4798      	blx	r3
 8014edc:	4603      	mov	r3, r0
 8014ede:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ee2:	4618      	mov	r0, r3
 8014ee4:	3710      	adds	r7, #16
 8014ee6:	46bd      	mov	sp, r7
 8014ee8:	bd80      	pop	{r7, pc}

08014eea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014eea:	b580      	push	{r7, lr}
 8014eec:	b084      	sub	sp, #16
 8014eee:	af00      	add	r7, sp, #0
 8014ef0:	6078      	str	r0, [r7, #4]
 8014ef2:	460b      	mov	r3, r1
 8014ef4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014ef6:	2300      	movs	r3, #0
 8014ef8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014f00:	685b      	ldr	r3, [r3, #4]
 8014f02:	78fa      	ldrb	r2, [r7, #3]
 8014f04:	4611      	mov	r1, r2
 8014f06:	6878      	ldr	r0, [r7, #4]
 8014f08:	4798      	blx	r3
 8014f0a:	4603      	mov	r3, r0
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d001      	beq.n	8014f14 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8014f10:	2303      	movs	r3, #3
 8014f12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f16:	4618      	mov	r0, r3
 8014f18:	3710      	adds	r7, #16
 8014f1a:	46bd      	mov	sp, r7
 8014f1c:	bd80      	pop	{r7, pc}

08014f1e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014f1e:	b580      	push	{r7, lr}
 8014f20:	b084      	sub	sp, #16
 8014f22:	af00      	add	r7, sp, #0
 8014f24:	6078      	str	r0, [r7, #4]
 8014f26:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014f2e:	6839      	ldr	r1, [r7, #0]
 8014f30:	4618      	mov	r0, r3
 8014f32:	f001 f90e 	bl	8016152 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	2201      	movs	r2, #1
 8014f3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8014f44:	461a      	mov	r2, r3
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014f52:	f003 031f 	and.w	r3, r3, #31
 8014f56:	2b02      	cmp	r3, #2
 8014f58:	d01a      	beq.n	8014f90 <USBD_LL_SetupStage+0x72>
 8014f5a:	2b02      	cmp	r3, #2
 8014f5c:	d822      	bhi.n	8014fa4 <USBD_LL_SetupStage+0x86>
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d002      	beq.n	8014f68 <USBD_LL_SetupStage+0x4a>
 8014f62:	2b01      	cmp	r3, #1
 8014f64:	d00a      	beq.n	8014f7c <USBD_LL_SetupStage+0x5e>
 8014f66:	e01d      	b.n	8014fa4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014f6e:	4619      	mov	r1, r3
 8014f70:	6878      	ldr	r0, [r7, #4]
 8014f72:	f000 fb65 	bl	8015640 <USBD_StdDevReq>
 8014f76:	4603      	mov	r3, r0
 8014f78:	73fb      	strb	r3, [r7, #15]
      break;
 8014f7a:	e020      	b.n	8014fbe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014f82:	4619      	mov	r1, r3
 8014f84:	6878      	ldr	r0, [r7, #4]
 8014f86:	f000 fbcd 	bl	8015724 <USBD_StdItfReq>
 8014f8a:	4603      	mov	r3, r0
 8014f8c:	73fb      	strb	r3, [r7, #15]
      break;
 8014f8e:	e016      	b.n	8014fbe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014f96:	4619      	mov	r1, r3
 8014f98:	6878      	ldr	r0, [r7, #4]
 8014f9a:	f000 fc2f 	bl	80157fc <USBD_StdEPReq>
 8014f9e:	4603      	mov	r3, r0
 8014fa0:	73fb      	strb	r3, [r7, #15]
      break;
 8014fa2:	e00c      	b.n	8014fbe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014faa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014fae:	b2db      	uxtb	r3, r3
 8014fb0:	4619      	mov	r1, r3
 8014fb2:	6878      	ldr	r0, [r7, #4]
 8014fb4:	f001 fe5c 	bl	8016c70 <USBD_LL_StallEP>
 8014fb8:	4603      	mov	r3, r0
 8014fba:	73fb      	strb	r3, [r7, #15]
      break;
 8014fbc:	bf00      	nop
  }

  return ret;
 8014fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8014fc0:	4618      	mov	r0, r3
 8014fc2:	3710      	adds	r7, #16
 8014fc4:	46bd      	mov	sp, r7
 8014fc6:	bd80      	pop	{r7, pc}

08014fc8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8014fc8:	b580      	push	{r7, lr}
 8014fca:	b086      	sub	sp, #24
 8014fcc:	af00      	add	r7, sp, #0
 8014fce:	60f8      	str	r0, [r7, #12]
 8014fd0:	460b      	mov	r3, r1
 8014fd2:	607a      	str	r2, [r7, #4]
 8014fd4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8014fd6:	2300      	movs	r3, #0
 8014fd8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8014fda:	7afb      	ldrb	r3, [r7, #11]
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d16e      	bne.n	80150be <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8014fe6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014fee:	2b03      	cmp	r3, #3
 8014ff0:	f040 8098 	bne.w	8015124 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8014ff4:	693b      	ldr	r3, [r7, #16]
 8014ff6:	689a      	ldr	r2, [r3, #8]
 8014ff8:	693b      	ldr	r3, [r7, #16]
 8014ffa:	68db      	ldr	r3, [r3, #12]
 8014ffc:	429a      	cmp	r2, r3
 8014ffe:	d913      	bls.n	8015028 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8015000:	693b      	ldr	r3, [r7, #16]
 8015002:	689a      	ldr	r2, [r3, #8]
 8015004:	693b      	ldr	r3, [r7, #16]
 8015006:	68db      	ldr	r3, [r3, #12]
 8015008:	1ad2      	subs	r2, r2, r3
 801500a:	693b      	ldr	r3, [r7, #16]
 801500c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801500e:	693b      	ldr	r3, [r7, #16]
 8015010:	68da      	ldr	r2, [r3, #12]
 8015012:	693b      	ldr	r3, [r7, #16]
 8015014:	689b      	ldr	r3, [r3, #8]
 8015016:	4293      	cmp	r3, r2
 8015018:	bf28      	it	cs
 801501a:	4613      	movcs	r3, r2
 801501c:	461a      	mov	r2, r3
 801501e:	6879      	ldr	r1, [r7, #4]
 8015020:	68f8      	ldr	r0, [r7, #12]
 8015022:	f001 f98a 	bl	801633a <USBD_CtlContinueRx>
 8015026:	e07d      	b.n	8015124 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801502e:	f003 031f 	and.w	r3, r3, #31
 8015032:	2b02      	cmp	r3, #2
 8015034:	d014      	beq.n	8015060 <USBD_LL_DataOutStage+0x98>
 8015036:	2b02      	cmp	r3, #2
 8015038:	d81d      	bhi.n	8015076 <USBD_LL_DataOutStage+0xae>
 801503a:	2b00      	cmp	r3, #0
 801503c:	d002      	beq.n	8015044 <USBD_LL_DataOutStage+0x7c>
 801503e:	2b01      	cmp	r3, #1
 8015040:	d003      	beq.n	801504a <USBD_LL_DataOutStage+0x82>
 8015042:	e018      	b.n	8015076 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8015044:	2300      	movs	r3, #0
 8015046:	75bb      	strb	r3, [r7, #22]
            break;
 8015048:	e018      	b.n	801507c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015050:	b2db      	uxtb	r3, r3
 8015052:	4619      	mov	r1, r3
 8015054:	68f8      	ldr	r0, [r7, #12]
 8015056:	f000 fa64 	bl	8015522 <USBD_CoreFindIF>
 801505a:	4603      	mov	r3, r0
 801505c:	75bb      	strb	r3, [r7, #22]
            break;
 801505e:	e00d      	b.n	801507c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015066:	b2db      	uxtb	r3, r3
 8015068:	4619      	mov	r1, r3
 801506a:	68f8      	ldr	r0, [r7, #12]
 801506c:	f000 fa66 	bl	801553c <USBD_CoreFindEP>
 8015070:	4603      	mov	r3, r0
 8015072:	75bb      	strb	r3, [r7, #22]
            break;
 8015074:	e002      	b.n	801507c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8015076:	2300      	movs	r3, #0
 8015078:	75bb      	strb	r3, [r7, #22]
            break;
 801507a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801507c:	7dbb      	ldrb	r3, [r7, #22]
 801507e:	2b00      	cmp	r3, #0
 8015080:	d119      	bne.n	80150b6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015088:	b2db      	uxtb	r3, r3
 801508a:	2b03      	cmp	r3, #3
 801508c:	d113      	bne.n	80150b6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801508e:	7dba      	ldrb	r2, [r7, #22]
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	32ae      	adds	r2, #174	; 0xae
 8015094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015098:	691b      	ldr	r3, [r3, #16]
 801509a:	2b00      	cmp	r3, #0
 801509c:	d00b      	beq.n	80150b6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801509e:	7dba      	ldrb	r2, [r7, #22]
 80150a0:	68fb      	ldr	r3, [r7, #12]
 80150a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80150a6:	7dba      	ldrb	r2, [r7, #22]
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	32ae      	adds	r2, #174	; 0xae
 80150ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150b0:	691b      	ldr	r3, [r3, #16]
 80150b2:	68f8      	ldr	r0, [r7, #12]
 80150b4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80150b6:	68f8      	ldr	r0, [r7, #12]
 80150b8:	f001 f950 	bl	801635c <USBD_CtlSendStatus>
 80150bc:	e032      	b.n	8015124 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80150be:	7afb      	ldrb	r3, [r7, #11]
 80150c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80150c4:	b2db      	uxtb	r3, r3
 80150c6:	4619      	mov	r1, r3
 80150c8:	68f8      	ldr	r0, [r7, #12]
 80150ca:	f000 fa37 	bl	801553c <USBD_CoreFindEP>
 80150ce:	4603      	mov	r3, r0
 80150d0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80150d2:	7dbb      	ldrb	r3, [r7, #22]
 80150d4:	2bff      	cmp	r3, #255	; 0xff
 80150d6:	d025      	beq.n	8015124 <USBD_LL_DataOutStage+0x15c>
 80150d8:	7dbb      	ldrb	r3, [r7, #22]
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d122      	bne.n	8015124 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80150e4:	b2db      	uxtb	r3, r3
 80150e6:	2b03      	cmp	r3, #3
 80150e8:	d117      	bne.n	801511a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80150ea:	7dba      	ldrb	r2, [r7, #22]
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	32ae      	adds	r2, #174	; 0xae
 80150f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150f4:	699b      	ldr	r3, [r3, #24]
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d00f      	beq.n	801511a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80150fa:	7dba      	ldrb	r2, [r7, #22]
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8015102:	7dba      	ldrb	r2, [r7, #22]
 8015104:	68fb      	ldr	r3, [r7, #12]
 8015106:	32ae      	adds	r2, #174	; 0xae
 8015108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801510c:	699b      	ldr	r3, [r3, #24]
 801510e:	7afa      	ldrb	r2, [r7, #11]
 8015110:	4611      	mov	r1, r2
 8015112:	68f8      	ldr	r0, [r7, #12]
 8015114:	4798      	blx	r3
 8015116:	4603      	mov	r3, r0
 8015118:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801511a:	7dfb      	ldrb	r3, [r7, #23]
 801511c:	2b00      	cmp	r3, #0
 801511e:	d001      	beq.n	8015124 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8015120:	7dfb      	ldrb	r3, [r7, #23]
 8015122:	e000      	b.n	8015126 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8015124:	2300      	movs	r3, #0
}
 8015126:	4618      	mov	r0, r3
 8015128:	3718      	adds	r7, #24
 801512a:	46bd      	mov	sp, r7
 801512c:	bd80      	pop	{r7, pc}

0801512e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801512e:	b580      	push	{r7, lr}
 8015130:	b086      	sub	sp, #24
 8015132:	af00      	add	r7, sp, #0
 8015134:	60f8      	str	r0, [r7, #12]
 8015136:	460b      	mov	r3, r1
 8015138:	607a      	str	r2, [r7, #4]
 801513a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801513c:	7afb      	ldrb	r3, [r7, #11]
 801513e:	2b00      	cmp	r3, #0
 8015140:	d16f      	bne.n	8015222 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	3314      	adds	r3, #20
 8015146:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801514e:	2b02      	cmp	r3, #2
 8015150:	d15a      	bne.n	8015208 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8015152:	693b      	ldr	r3, [r7, #16]
 8015154:	689a      	ldr	r2, [r3, #8]
 8015156:	693b      	ldr	r3, [r7, #16]
 8015158:	68db      	ldr	r3, [r3, #12]
 801515a:	429a      	cmp	r2, r3
 801515c:	d914      	bls.n	8015188 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801515e:	693b      	ldr	r3, [r7, #16]
 8015160:	689a      	ldr	r2, [r3, #8]
 8015162:	693b      	ldr	r3, [r7, #16]
 8015164:	68db      	ldr	r3, [r3, #12]
 8015166:	1ad2      	subs	r2, r2, r3
 8015168:	693b      	ldr	r3, [r7, #16]
 801516a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801516c:	693b      	ldr	r3, [r7, #16]
 801516e:	689b      	ldr	r3, [r3, #8]
 8015170:	461a      	mov	r2, r3
 8015172:	6879      	ldr	r1, [r7, #4]
 8015174:	68f8      	ldr	r0, [r7, #12]
 8015176:	f001 f8b2 	bl	80162de <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801517a:	2300      	movs	r3, #0
 801517c:	2200      	movs	r2, #0
 801517e:	2100      	movs	r1, #0
 8015180:	68f8      	ldr	r0, [r7, #12]
 8015182:	f001 fe1f 	bl	8016dc4 <USBD_LL_PrepareReceive>
 8015186:	e03f      	b.n	8015208 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8015188:	693b      	ldr	r3, [r7, #16]
 801518a:	68da      	ldr	r2, [r3, #12]
 801518c:	693b      	ldr	r3, [r7, #16]
 801518e:	689b      	ldr	r3, [r3, #8]
 8015190:	429a      	cmp	r2, r3
 8015192:	d11c      	bne.n	80151ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8015194:	693b      	ldr	r3, [r7, #16]
 8015196:	685a      	ldr	r2, [r3, #4]
 8015198:	693b      	ldr	r3, [r7, #16]
 801519a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801519c:	429a      	cmp	r2, r3
 801519e:	d316      	bcc.n	80151ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80151a0:	693b      	ldr	r3, [r7, #16]
 80151a2:	685a      	ldr	r2, [r3, #4]
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80151aa:	429a      	cmp	r2, r3
 80151ac:	d20f      	bcs.n	80151ce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80151ae:	2200      	movs	r2, #0
 80151b0:	2100      	movs	r1, #0
 80151b2:	68f8      	ldr	r0, [r7, #12]
 80151b4:	f001 f893 	bl	80162de <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	2200      	movs	r2, #0
 80151bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80151c0:	2300      	movs	r3, #0
 80151c2:	2200      	movs	r2, #0
 80151c4:	2100      	movs	r1, #0
 80151c6:	68f8      	ldr	r0, [r7, #12]
 80151c8:	f001 fdfc 	bl	8016dc4 <USBD_LL_PrepareReceive>
 80151cc:	e01c      	b.n	8015208 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80151d4:	b2db      	uxtb	r3, r3
 80151d6:	2b03      	cmp	r3, #3
 80151d8:	d10f      	bne.n	80151fa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80151e0:	68db      	ldr	r3, [r3, #12]
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d009      	beq.n	80151fa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	2200      	movs	r2, #0
 80151ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80151f4:	68db      	ldr	r3, [r3, #12]
 80151f6:	68f8      	ldr	r0, [r7, #12]
 80151f8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80151fa:	2180      	movs	r1, #128	; 0x80
 80151fc:	68f8      	ldr	r0, [r7, #12]
 80151fe:	f001 fd37 	bl	8016c70 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015202:	68f8      	ldr	r0, [r7, #12]
 8015204:	f001 f8bd 	bl	8016382 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801520e:	2b00      	cmp	r3, #0
 8015210:	d03a      	beq.n	8015288 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8015212:	68f8      	ldr	r0, [r7, #12]
 8015214:	f7ff fe42 	bl	8014e9c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	2200      	movs	r2, #0
 801521c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015220:	e032      	b.n	8015288 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8015222:	7afb      	ldrb	r3, [r7, #11]
 8015224:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015228:	b2db      	uxtb	r3, r3
 801522a:	4619      	mov	r1, r3
 801522c:	68f8      	ldr	r0, [r7, #12]
 801522e:	f000 f985 	bl	801553c <USBD_CoreFindEP>
 8015232:	4603      	mov	r3, r0
 8015234:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015236:	7dfb      	ldrb	r3, [r7, #23]
 8015238:	2bff      	cmp	r3, #255	; 0xff
 801523a:	d025      	beq.n	8015288 <USBD_LL_DataInStage+0x15a>
 801523c:	7dfb      	ldrb	r3, [r7, #23]
 801523e:	2b00      	cmp	r3, #0
 8015240:	d122      	bne.n	8015288 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015248:	b2db      	uxtb	r3, r3
 801524a:	2b03      	cmp	r3, #3
 801524c:	d11c      	bne.n	8015288 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801524e:	7dfa      	ldrb	r2, [r7, #23]
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	32ae      	adds	r2, #174	; 0xae
 8015254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015258:	695b      	ldr	r3, [r3, #20]
 801525a:	2b00      	cmp	r3, #0
 801525c:	d014      	beq.n	8015288 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801525e:	7dfa      	ldrb	r2, [r7, #23]
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8015266:	7dfa      	ldrb	r2, [r7, #23]
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	32ae      	adds	r2, #174	; 0xae
 801526c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015270:	695b      	ldr	r3, [r3, #20]
 8015272:	7afa      	ldrb	r2, [r7, #11]
 8015274:	4611      	mov	r1, r2
 8015276:	68f8      	ldr	r0, [r7, #12]
 8015278:	4798      	blx	r3
 801527a:	4603      	mov	r3, r0
 801527c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801527e:	7dbb      	ldrb	r3, [r7, #22]
 8015280:	2b00      	cmp	r3, #0
 8015282:	d001      	beq.n	8015288 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8015284:	7dbb      	ldrb	r3, [r7, #22]
 8015286:	e000      	b.n	801528a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8015288:	2300      	movs	r3, #0
}
 801528a:	4618      	mov	r0, r3
 801528c:	3718      	adds	r7, #24
 801528e:	46bd      	mov	sp, r7
 8015290:	bd80      	pop	{r7, pc}

08015292 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015292:	b580      	push	{r7, lr}
 8015294:	b084      	sub	sp, #16
 8015296:	af00      	add	r7, sp, #0
 8015298:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801529a:	2300      	movs	r3, #0
 801529c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	2201      	movs	r2, #1
 80152a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	2200      	movs	r2, #0
 80152aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	2200      	movs	r2, #0
 80152b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	2200      	movs	r2, #0
 80152b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	2200      	movs	r2, #0
 80152c0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d014      	beq.n	80152f8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80152d4:	685b      	ldr	r3, [r3, #4]
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d00e      	beq.n	80152f8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80152e0:	685b      	ldr	r3, [r3, #4]
 80152e2:	687a      	ldr	r2, [r7, #4]
 80152e4:	6852      	ldr	r2, [r2, #4]
 80152e6:	b2d2      	uxtb	r2, r2
 80152e8:	4611      	mov	r1, r2
 80152ea:	6878      	ldr	r0, [r7, #4]
 80152ec:	4798      	blx	r3
 80152ee:	4603      	mov	r3, r0
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d001      	beq.n	80152f8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80152f4:	2303      	movs	r3, #3
 80152f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80152f8:	2340      	movs	r3, #64	; 0x40
 80152fa:	2200      	movs	r2, #0
 80152fc:	2100      	movs	r1, #0
 80152fe:	6878      	ldr	r0, [r7, #4]
 8015300:	f001 fc71 	bl	8016be6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	2201      	movs	r2, #1
 8015308:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	2240      	movs	r2, #64	; 0x40
 8015310:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015314:	2340      	movs	r3, #64	; 0x40
 8015316:	2200      	movs	r2, #0
 8015318:	2180      	movs	r1, #128	; 0x80
 801531a:	6878      	ldr	r0, [r7, #4]
 801531c:	f001 fc63 	bl	8016be6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	2201      	movs	r2, #1
 8015324:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	2240      	movs	r2, #64	; 0x40
 801532a:	621a      	str	r2, [r3, #32]

  return ret;
 801532c:	7bfb      	ldrb	r3, [r7, #15]
}
 801532e:	4618      	mov	r0, r3
 8015330:	3710      	adds	r7, #16
 8015332:	46bd      	mov	sp, r7
 8015334:	bd80      	pop	{r7, pc}

08015336 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015336:	b480      	push	{r7}
 8015338:	b083      	sub	sp, #12
 801533a:	af00      	add	r7, sp, #0
 801533c:	6078      	str	r0, [r7, #4]
 801533e:	460b      	mov	r3, r1
 8015340:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	78fa      	ldrb	r2, [r7, #3]
 8015346:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015348:	2300      	movs	r3, #0
}
 801534a:	4618      	mov	r0, r3
 801534c:	370c      	adds	r7, #12
 801534e:	46bd      	mov	sp, r7
 8015350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015354:	4770      	bx	lr

08015356 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015356:	b480      	push	{r7}
 8015358:	b083      	sub	sp, #12
 801535a:	af00      	add	r7, sp, #0
 801535c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015364:	b2db      	uxtb	r3, r3
 8015366:	2b04      	cmp	r3, #4
 8015368:	d006      	beq.n	8015378 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015370:	b2da      	uxtb	r2, r3
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	2204      	movs	r2, #4
 801537c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015380:	2300      	movs	r3, #0
}
 8015382:	4618      	mov	r0, r3
 8015384:	370c      	adds	r7, #12
 8015386:	46bd      	mov	sp, r7
 8015388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801538c:	4770      	bx	lr

0801538e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801538e:	b480      	push	{r7}
 8015390:	b083      	sub	sp, #12
 8015392:	af00      	add	r7, sp, #0
 8015394:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801539c:	b2db      	uxtb	r3, r3
 801539e:	2b04      	cmp	r3, #4
 80153a0:	d106      	bne.n	80153b0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80153a8:	b2da      	uxtb	r2, r3
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80153b0:	2300      	movs	r3, #0
}
 80153b2:	4618      	mov	r0, r3
 80153b4:	370c      	adds	r7, #12
 80153b6:	46bd      	mov	sp, r7
 80153b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153bc:	4770      	bx	lr

080153be <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80153be:	b580      	push	{r7, lr}
 80153c0:	b082      	sub	sp, #8
 80153c2:	af00      	add	r7, sp, #0
 80153c4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80153cc:	b2db      	uxtb	r3, r3
 80153ce:	2b03      	cmp	r3, #3
 80153d0:	d110      	bne.n	80153f4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d00b      	beq.n	80153f4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153e2:	69db      	ldr	r3, [r3, #28]
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d005      	beq.n	80153f4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153ee:	69db      	ldr	r3, [r3, #28]
 80153f0:	6878      	ldr	r0, [r7, #4]
 80153f2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80153f4:	2300      	movs	r3, #0
}
 80153f6:	4618      	mov	r0, r3
 80153f8:	3708      	adds	r7, #8
 80153fa:	46bd      	mov	sp, r7
 80153fc:	bd80      	pop	{r7, pc}

080153fe <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80153fe:	b580      	push	{r7, lr}
 8015400:	b082      	sub	sp, #8
 8015402:	af00      	add	r7, sp, #0
 8015404:	6078      	str	r0, [r7, #4]
 8015406:	460b      	mov	r3, r1
 8015408:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	32ae      	adds	r2, #174	; 0xae
 8015414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015418:	2b00      	cmp	r3, #0
 801541a:	d101      	bne.n	8015420 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801541c:	2303      	movs	r3, #3
 801541e:	e01c      	b.n	801545a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015426:	b2db      	uxtb	r3, r3
 8015428:	2b03      	cmp	r3, #3
 801542a:	d115      	bne.n	8015458 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	32ae      	adds	r2, #174	; 0xae
 8015436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801543a:	6a1b      	ldr	r3, [r3, #32]
 801543c:	2b00      	cmp	r3, #0
 801543e:	d00b      	beq.n	8015458 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	32ae      	adds	r2, #174	; 0xae
 801544a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801544e:	6a1b      	ldr	r3, [r3, #32]
 8015450:	78fa      	ldrb	r2, [r7, #3]
 8015452:	4611      	mov	r1, r2
 8015454:	6878      	ldr	r0, [r7, #4]
 8015456:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015458:	2300      	movs	r3, #0
}
 801545a:	4618      	mov	r0, r3
 801545c:	3708      	adds	r7, #8
 801545e:	46bd      	mov	sp, r7
 8015460:	bd80      	pop	{r7, pc}

08015462 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015462:	b580      	push	{r7, lr}
 8015464:	b082      	sub	sp, #8
 8015466:	af00      	add	r7, sp, #0
 8015468:	6078      	str	r0, [r7, #4]
 801546a:	460b      	mov	r3, r1
 801546c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	32ae      	adds	r2, #174	; 0xae
 8015478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801547c:	2b00      	cmp	r3, #0
 801547e:	d101      	bne.n	8015484 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015480:	2303      	movs	r3, #3
 8015482:	e01c      	b.n	80154be <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801548a:	b2db      	uxtb	r3, r3
 801548c:	2b03      	cmp	r3, #3
 801548e:	d115      	bne.n	80154bc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	32ae      	adds	r2, #174	; 0xae
 801549a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d00b      	beq.n	80154bc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	32ae      	adds	r2, #174	; 0xae
 80154ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154b4:	78fa      	ldrb	r2, [r7, #3]
 80154b6:	4611      	mov	r1, r2
 80154b8:	6878      	ldr	r0, [r7, #4]
 80154ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80154bc:	2300      	movs	r3, #0
}
 80154be:	4618      	mov	r0, r3
 80154c0:	3708      	adds	r7, #8
 80154c2:	46bd      	mov	sp, r7
 80154c4:	bd80      	pop	{r7, pc}

080154c6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80154c6:	b480      	push	{r7}
 80154c8:	b083      	sub	sp, #12
 80154ca:	af00      	add	r7, sp, #0
 80154cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80154ce:	2300      	movs	r3, #0
}
 80154d0:	4618      	mov	r0, r3
 80154d2:	370c      	adds	r7, #12
 80154d4:	46bd      	mov	sp, r7
 80154d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154da:	4770      	bx	lr

080154dc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80154dc:	b580      	push	{r7, lr}
 80154de:	b084      	sub	sp, #16
 80154e0:	af00      	add	r7, sp, #0
 80154e2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80154e4:	2300      	movs	r3, #0
 80154e6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	2201      	movs	r2, #1
 80154ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d00e      	beq.n	8015518 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015500:	685b      	ldr	r3, [r3, #4]
 8015502:	687a      	ldr	r2, [r7, #4]
 8015504:	6852      	ldr	r2, [r2, #4]
 8015506:	b2d2      	uxtb	r2, r2
 8015508:	4611      	mov	r1, r2
 801550a:	6878      	ldr	r0, [r7, #4]
 801550c:	4798      	blx	r3
 801550e:	4603      	mov	r3, r0
 8015510:	2b00      	cmp	r3, #0
 8015512:	d001      	beq.n	8015518 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8015514:	2303      	movs	r3, #3
 8015516:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015518:	7bfb      	ldrb	r3, [r7, #15]
}
 801551a:	4618      	mov	r0, r3
 801551c:	3710      	adds	r7, #16
 801551e:	46bd      	mov	sp, r7
 8015520:	bd80      	pop	{r7, pc}

08015522 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015522:	b480      	push	{r7}
 8015524:	b083      	sub	sp, #12
 8015526:	af00      	add	r7, sp, #0
 8015528:	6078      	str	r0, [r7, #4]
 801552a:	460b      	mov	r3, r1
 801552c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801552e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015530:	4618      	mov	r0, r3
 8015532:	370c      	adds	r7, #12
 8015534:	46bd      	mov	sp, r7
 8015536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801553a:	4770      	bx	lr

0801553c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801553c:	b480      	push	{r7}
 801553e:	b083      	sub	sp, #12
 8015540:	af00      	add	r7, sp, #0
 8015542:	6078      	str	r0, [r7, #4]
 8015544:	460b      	mov	r3, r1
 8015546:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015548:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801554a:	4618      	mov	r0, r3
 801554c:	370c      	adds	r7, #12
 801554e:	46bd      	mov	sp, r7
 8015550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015554:	4770      	bx	lr

08015556 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8015556:	b580      	push	{r7, lr}
 8015558:	b086      	sub	sp, #24
 801555a:	af00      	add	r7, sp, #0
 801555c:	6078      	str	r0, [r7, #4]
 801555e:	460b      	mov	r3, r1
 8015560:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801556a:	2300      	movs	r3, #0
 801556c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	885b      	ldrh	r3, [r3, #2]
 8015572:	b29a      	uxth	r2, r3
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	781b      	ldrb	r3, [r3, #0]
 8015578:	b29b      	uxth	r3, r3
 801557a:	429a      	cmp	r2, r3
 801557c:	d920      	bls.n	80155c0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	781b      	ldrb	r3, [r3, #0]
 8015582:	b29b      	uxth	r3, r3
 8015584:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8015586:	e013      	b.n	80155b0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015588:	f107 030a 	add.w	r3, r7, #10
 801558c:	4619      	mov	r1, r3
 801558e:	6978      	ldr	r0, [r7, #20]
 8015590:	f000 f81b 	bl	80155ca <USBD_GetNextDesc>
 8015594:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8015596:	697b      	ldr	r3, [r7, #20]
 8015598:	785b      	ldrb	r3, [r3, #1]
 801559a:	2b05      	cmp	r3, #5
 801559c:	d108      	bne.n	80155b0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801559e:	697b      	ldr	r3, [r7, #20]
 80155a0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80155a2:	693b      	ldr	r3, [r7, #16]
 80155a4:	789b      	ldrb	r3, [r3, #2]
 80155a6:	78fa      	ldrb	r2, [r7, #3]
 80155a8:	429a      	cmp	r2, r3
 80155aa:	d008      	beq.n	80155be <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80155ac:	2300      	movs	r3, #0
 80155ae:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	885b      	ldrh	r3, [r3, #2]
 80155b4:	b29a      	uxth	r2, r3
 80155b6:	897b      	ldrh	r3, [r7, #10]
 80155b8:	429a      	cmp	r2, r3
 80155ba:	d8e5      	bhi.n	8015588 <USBD_GetEpDesc+0x32>
 80155bc:	e000      	b.n	80155c0 <USBD_GetEpDesc+0x6a>
          break;
 80155be:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80155c0:	693b      	ldr	r3, [r7, #16]
}
 80155c2:	4618      	mov	r0, r3
 80155c4:	3718      	adds	r7, #24
 80155c6:	46bd      	mov	sp, r7
 80155c8:	bd80      	pop	{r7, pc}

080155ca <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80155ca:	b480      	push	{r7}
 80155cc:	b085      	sub	sp, #20
 80155ce:	af00      	add	r7, sp, #0
 80155d0:	6078      	str	r0, [r7, #4]
 80155d2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80155d8:	683b      	ldr	r3, [r7, #0]
 80155da:	881a      	ldrh	r2, [r3, #0]
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	781b      	ldrb	r3, [r3, #0]
 80155e0:	b29b      	uxth	r3, r3
 80155e2:	4413      	add	r3, r2
 80155e4:	b29a      	uxth	r2, r3
 80155e6:	683b      	ldr	r3, [r7, #0]
 80155e8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80155ea:	68fb      	ldr	r3, [r7, #12]
 80155ec:	781b      	ldrb	r3, [r3, #0]
 80155ee:	461a      	mov	r2, r3
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	4413      	add	r3, r2
 80155f4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80155f6:	68fb      	ldr	r3, [r7, #12]
}
 80155f8:	4618      	mov	r0, r3
 80155fa:	3714      	adds	r7, #20
 80155fc:	46bd      	mov	sp, r7
 80155fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015602:	4770      	bx	lr

08015604 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015604:	b480      	push	{r7}
 8015606:	b087      	sub	sp, #28
 8015608:	af00      	add	r7, sp, #0
 801560a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015610:	697b      	ldr	r3, [r7, #20]
 8015612:	781b      	ldrb	r3, [r3, #0]
 8015614:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015616:	697b      	ldr	r3, [r7, #20]
 8015618:	3301      	adds	r3, #1
 801561a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801561c:	697b      	ldr	r3, [r7, #20]
 801561e:	781b      	ldrb	r3, [r3, #0]
 8015620:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015622:	8a3b      	ldrh	r3, [r7, #16]
 8015624:	021b      	lsls	r3, r3, #8
 8015626:	b21a      	sxth	r2, r3
 8015628:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801562c:	4313      	orrs	r3, r2
 801562e:	b21b      	sxth	r3, r3
 8015630:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015632:	89fb      	ldrh	r3, [r7, #14]
}
 8015634:	4618      	mov	r0, r3
 8015636:	371c      	adds	r7, #28
 8015638:	46bd      	mov	sp, r7
 801563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801563e:	4770      	bx	lr

08015640 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015640:	b580      	push	{r7, lr}
 8015642:	b084      	sub	sp, #16
 8015644:	af00      	add	r7, sp, #0
 8015646:	6078      	str	r0, [r7, #4]
 8015648:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801564a:	2300      	movs	r3, #0
 801564c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801564e:	683b      	ldr	r3, [r7, #0]
 8015650:	781b      	ldrb	r3, [r3, #0]
 8015652:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015656:	2b40      	cmp	r3, #64	; 0x40
 8015658:	d005      	beq.n	8015666 <USBD_StdDevReq+0x26>
 801565a:	2b40      	cmp	r3, #64	; 0x40
 801565c:	d857      	bhi.n	801570e <USBD_StdDevReq+0xce>
 801565e:	2b00      	cmp	r3, #0
 8015660:	d00f      	beq.n	8015682 <USBD_StdDevReq+0x42>
 8015662:	2b20      	cmp	r3, #32
 8015664:	d153      	bne.n	801570e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	32ae      	adds	r2, #174	; 0xae
 8015670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015674:	689b      	ldr	r3, [r3, #8]
 8015676:	6839      	ldr	r1, [r7, #0]
 8015678:	6878      	ldr	r0, [r7, #4]
 801567a:	4798      	blx	r3
 801567c:	4603      	mov	r3, r0
 801567e:	73fb      	strb	r3, [r7, #15]
      break;
 8015680:	e04a      	b.n	8015718 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015682:	683b      	ldr	r3, [r7, #0]
 8015684:	785b      	ldrb	r3, [r3, #1]
 8015686:	2b09      	cmp	r3, #9
 8015688:	d83b      	bhi.n	8015702 <USBD_StdDevReq+0xc2>
 801568a:	a201      	add	r2, pc, #4	; (adr r2, 8015690 <USBD_StdDevReq+0x50>)
 801568c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015690:	080156e5 	.word	0x080156e5
 8015694:	080156f9 	.word	0x080156f9
 8015698:	08015703 	.word	0x08015703
 801569c:	080156ef 	.word	0x080156ef
 80156a0:	08015703 	.word	0x08015703
 80156a4:	080156c3 	.word	0x080156c3
 80156a8:	080156b9 	.word	0x080156b9
 80156ac:	08015703 	.word	0x08015703
 80156b0:	080156db 	.word	0x080156db
 80156b4:	080156cd 	.word	0x080156cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80156b8:	6839      	ldr	r1, [r7, #0]
 80156ba:	6878      	ldr	r0, [r7, #4]
 80156bc:	f000 fa3c 	bl	8015b38 <USBD_GetDescriptor>
          break;
 80156c0:	e024      	b.n	801570c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80156c2:	6839      	ldr	r1, [r7, #0]
 80156c4:	6878      	ldr	r0, [r7, #4]
 80156c6:	f000 fba1 	bl	8015e0c <USBD_SetAddress>
          break;
 80156ca:	e01f      	b.n	801570c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80156cc:	6839      	ldr	r1, [r7, #0]
 80156ce:	6878      	ldr	r0, [r7, #4]
 80156d0:	f000 fbe0 	bl	8015e94 <USBD_SetConfig>
 80156d4:	4603      	mov	r3, r0
 80156d6:	73fb      	strb	r3, [r7, #15]
          break;
 80156d8:	e018      	b.n	801570c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80156da:	6839      	ldr	r1, [r7, #0]
 80156dc:	6878      	ldr	r0, [r7, #4]
 80156de:	f000 fc83 	bl	8015fe8 <USBD_GetConfig>
          break;
 80156e2:	e013      	b.n	801570c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80156e4:	6839      	ldr	r1, [r7, #0]
 80156e6:	6878      	ldr	r0, [r7, #4]
 80156e8:	f000 fcb4 	bl	8016054 <USBD_GetStatus>
          break;
 80156ec:	e00e      	b.n	801570c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80156ee:	6839      	ldr	r1, [r7, #0]
 80156f0:	6878      	ldr	r0, [r7, #4]
 80156f2:	f000 fce3 	bl	80160bc <USBD_SetFeature>
          break;
 80156f6:	e009      	b.n	801570c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80156f8:	6839      	ldr	r1, [r7, #0]
 80156fa:	6878      	ldr	r0, [r7, #4]
 80156fc:	f000 fd07 	bl	801610e <USBD_ClrFeature>
          break;
 8015700:	e004      	b.n	801570c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8015702:	6839      	ldr	r1, [r7, #0]
 8015704:	6878      	ldr	r0, [r7, #4]
 8015706:	f000 fd5e 	bl	80161c6 <USBD_CtlError>
          break;
 801570a:	bf00      	nop
      }
      break;
 801570c:	e004      	b.n	8015718 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801570e:	6839      	ldr	r1, [r7, #0]
 8015710:	6878      	ldr	r0, [r7, #4]
 8015712:	f000 fd58 	bl	80161c6 <USBD_CtlError>
      break;
 8015716:	bf00      	nop
  }

  return ret;
 8015718:	7bfb      	ldrb	r3, [r7, #15]
}
 801571a:	4618      	mov	r0, r3
 801571c:	3710      	adds	r7, #16
 801571e:	46bd      	mov	sp, r7
 8015720:	bd80      	pop	{r7, pc}
 8015722:	bf00      	nop

08015724 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015724:	b580      	push	{r7, lr}
 8015726:	b084      	sub	sp, #16
 8015728:	af00      	add	r7, sp, #0
 801572a:	6078      	str	r0, [r7, #4]
 801572c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801572e:	2300      	movs	r3, #0
 8015730:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015732:	683b      	ldr	r3, [r7, #0]
 8015734:	781b      	ldrb	r3, [r3, #0]
 8015736:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801573a:	2b40      	cmp	r3, #64	; 0x40
 801573c:	d005      	beq.n	801574a <USBD_StdItfReq+0x26>
 801573e:	2b40      	cmp	r3, #64	; 0x40
 8015740:	d852      	bhi.n	80157e8 <USBD_StdItfReq+0xc4>
 8015742:	2b00      	cmp	r3, #0
 8015744:	d001      	beq.n	801574a <USBD_StdItfReq+0x26>
 8015746:	2b20      	cmp	r3, #32
 8015748:	d14e      	bne.n	80157e8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015750:	b2db      	uxtb	r3, r3
 8015752:	3b01      	subs	r3, #1
 8015754:	2b02      	cmp	r3, #2
 8015756:	d840      	bhi.n	80157da <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015758:	683b      	ldr	r3, [r7, #0]
 801575a:	889b      	ldrh	r3, [r3, #4]
 801575c:	b2db      	uxtb	r3, r3
 801575e:	2b01      	cmp	r3, #1
 8015760:	d836      	bhi.n	80157d0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015762:	683b      	ldr	r3, [r7, #0]
 8015764:	889b      	ldrh	r3, [r3, #4]
 8015766:	b2db      	uxtb	r3, r3
 8015768:	4619      	mov	r1, r3
 801576a:	6878      	ldr	r0, [r7, #4]
 801576c:	f7ff fed9 	bl	8015522 <USBD_CoreFindIF>
 8015770:	4603      	mov	r3, r0
 8015772:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015774:	7bbb      	ldrb	r3, [r7, #14]
 8015776:	2bff      	cmp	r3, #255	; 0xff
 8015778:	d01d      	beq.n	80157b6 <USBD_StdItfReq+0x92>
 801577a:	7bbb      	ldrb	r3, [r7, #14]
 801577c:	2b00      	cmp	r3, #0
 801577e:	d11a      	bne.n	80157b6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015780:	7bba      	ldrb	r2, [r7, #14]
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	32ae      	adds	r2, #174	; 0xae
 8015786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801578a:	689b      	ldr	r3, [r3, #8]
 801578c:	2b00      	cmp	r3, #0
 801578e:	d00f      	beq.n	80157b0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8015790:	7bba      	ldrb	r2, [r7, #14]
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015798:	7bba      	ldrb	r2, [r7, #14]
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	32ae      	adds	r2, #174	; 0xae
 801579e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80157a2:	689b      	ldr	r3, [r3, #8]
 80157a4:	6839      	ldr	r1, [r7, #0]
 80157a6:	6878      	ldr	r0, [r7, #4]
 80157a8:	4798      	blx	r3
 80157aa:	4603      	mov	r3, r0
 80157ac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80157ae:	e004      	b.n	80157ba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80157b0:	2303      	movs	r3, #3
 80157b2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80157b4:	e001      	b.n	80157ba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80157b6:	2303      	movs	r3, #3
 80157b8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80157ba:	683b      	ldr	r3, [r7, #0]
 80157bc:	88db      	ldrh	r3, [r3, #6]
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d110      	bne.n	80157e4 <USBD_StdItfReq+0xc0>
 80157c2:	7bfb      	ldrb	r3, [r7, #15]
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d10d      	bne.n	80157e4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80157c8:	6878      	ldr	r0, [r7, #4]
 80157ca:	f000 fdc7 	bl	801635c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80157ce:	e009      	b.n	80157e4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80157d0:	6839      	ldr	r1, [r7, #0]
 80157d2:	6878      	ldr	r0, [r7, #4]
 80157d4:	f000 fcf7 	bl	80161c6 <USBD_CtlError>
          break;
 80157d8:	e004      	b.n	80157e4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80157da:	6839      	ldr	r1, [r7, #0]
 80157dc:	6878      	ldr	r0, [r7, #4]
 80157de:	f000 fcf2 	bl	80161c6 <USBD_CtlError>
          break;
 80157e2:	e000      	b.n	80157e6 <USBD_StdItfReq+0xc2>
          break;
 80157e4:	bf00      	nop
      }
      break;
 80157e6:	e004      	b.n	80157f2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80157e8:	6839      	ldr	r1, [r7, #0]
 80157ea:	6878      	ldr	r0, [r7, #4]
 80157ec:	f000 fceb 	bl	80161c6 <USBD_CtlError>
      break;
 80157f0:	bf00      	nop
  }

  return ret;
 80157f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80157f4:	4618      	mov	r0, r3
 80157f6:	3710      	adds	r7, #16
 80157f8:	46bd      	mov	sp, r7
 80157fa:	bd80      	pop	{r7, pc}

080157fc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80157fc:	b580      	push	{r7, lr}
 80157fe:	b084      	sub	sp, #16
 8015800:	af00      	add	r7, sp, #0
 8015802:	6078      	str	r0, [r7, #4]
 8015804:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8015806:	2300      	movs	r3, #0
 8015808:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801580a:	683b      	ldr	r3, [r7, #0]
 801580c:	889b      	ldrh	r3, [r3, #4]
 801580e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015810:	683b      	ldr	r3, [r7, #0]
 8015812:	781b      	ldrb	r3, [r3, #0]
 8015814:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015818:	2b40      	cmp	r3, #64	; 0x40
 801581a:	d007      	beq.n	801582c <USBD_StdEPReq+0x30>
 801581c:	2b40      	cmp	r3, #64	; 0x40
 801581e:	f200 817f 	bhi.w	8015b20 <USBD_StdEPReq+0x324>
 8015822:	2b00      	cmp	r3, #0
 8015824:	d02a      	beq.n	801587c <USBD_StdEPReq+0x80>
 8015826:	2b20      	cmp	r3, #32
 8015828:	f040 817a 	bne.w	8015b20 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801582c:	7bbb      	ldrb	r3, [r7, #14]
 801582e:	4619      	mov	r1, r3
 8015830:	6878      	ldr	r0, [r7, #4]
 8015832:	f7ff fe83 	bl	801553c <USBD_CoreFindEP>
 8015836:	4603      	mov	r3, r0
 8015838:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801583a:	7b7b      	ldrb	r3, [r7, #13]
 801583c:	2bff      	cmp	r3, #255	; 0xff
 801583e:	f000 8174 	beq.w	8015b2a <USBD_StdEPReq+0x32e>
 8015842:	7b7b      	ldrb	r3, [r7, #13]
 8015844:	2b00      	cmp	r3, #0
 8015846:	f040 8170 	bne.w	8015b2a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801584a:	7b7a      	ldrb	r2, [r7, #13]
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8015852:	7b7a      	ldrb	r2, [r7, #13]
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	32ae      	adds	r2, #174	; 0xae
 8015858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801585c:	689b      	ldr	r3, [r3, #8]
 801585e:	2b00      	cmp	r3, #0
 8015860:	f000 8163 	beq.w	8015b2a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015864:	7b7a      	ldrb	r2, [r7, #13]
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	32ae      	adds	r2, #174	; 0xae
 801586a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801586e:	689b      	ldr	r3, [r3, #8]
 8015870:	6839      	ldr	r1, [r7, #0]
 8015872:	6878      	ldr	r0, [r7, #4]
 8015874:	4798      	blx	r3
 8015876:	4603      	mov	r3, r0
 8015878:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801587a:	e156      	b.n	8015b2a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801587c:	683b      	ldr	r3, [r7, #0]
 801587e:	785b      	ldrb	r3, [r3, #1]
 8015880:	2b03      	cmp	r3, #3
 8015882:	d008      	beq.n	8015896 <USBD_StdEPReq+0x9a>
 8015884:	2b03      	cmp	r3, #3
 8015886:	f300 8145 	bgt.w	8015b14 <USBD_StdEPReq+0x318>
 801588a:	2b00      	cmp	r3, #0
 801588c:	f000 809b 	beq.w	80159c6 <USBD_StdEPReq+0x1ca>
 8015890:	2b01      	cmp	r3, #1
 8015892:	d03c      	beq.n	801590e <USBD_StdEPReq+0x112>
 8015894:	e13e      	b.n	8015b14 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801589c:	b2db      	uxtb	r3, r3
 801589e:	2b02      	cmp	r3, #2
 80158a0:	d002      	beq.n	80158a8 <USBD_StdEPReq+0xac>
 80158a2:	2b03      	cmp	r3, #3
 80158a4:	d016      	beq.n	80158d4 <USBD_StdEPReq+0xd8>
 80158a6:	e02c      	b.n	8015902 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80158a8:	7bbb      	ldrb	r3, [r7, #14]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d00d      	beq.n	80158ca <USBD_StdEPReq+0xce>
 80158ae:	7bbb      	ldrb	r3, [r7, #14]
 80158b0:	2b80      	cmp	r3, #128	; 0x80
 80158b2:	d00a      	beq.n	80158ca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80158b4:	7bbb      	ldrb	r3, [r7, #14]
 80158b6:	4619      	mov	r1, r3
 80158b8:	6878      	ldr	r0, [r7, #4]
 80158ba:	f001 f9d9 	bl	8016c70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80158be:	2180      	movs	r1, #128	; 0x80
 80158c0:	6878      	ldr	r0, [r7, #4]
 80158c2:	f001 f9d5 	bl	8016c70 <USBD_LL_StallEP>
 80158c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80158c8:	e020      	b.n	801590c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80158ca:	6839      	ldr	r1, [r7, #0]
 80158cc:	6878      	ldr	r0, [r7, #4]
 80158ce:	f000 fc7a 	bl	80161c6 <USBD_CtlError>
              break;
 80158d2:	e01b      	b.n	801590c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80158d4:	683b      	ldr	r3, [r7, #0]
 80158d6:	885b      	ldrh	r3, [r3, #2]
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d10e      	bne.n	80158fa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80158dc:	7bbb      	ldrb	r3, [r7, #14]
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d00b      	beq.n	80158fa <USBD_StdEPReq+0xfe>
 80158e2:	7bbb      	ldrb	r3, [r7, #14]
 80158e4:	2b80      	cmp	r3, #128	; 0x80
 80158e6:	d008      	beq.n	80158fa <USBD_StdEPReq+0xfe>
 80158e8:	683b      	ldr	r3, [r7, #0]
 80158ea:	88db      	ldrh	r3, [r3, #6]
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d104      	bne.n	80158fa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80158f0:	7bbb      	ldrb	r3, [r7, #14]
 80158f2:	4619      	mov	r1, r3
 80158f4:	6878      	ldr	r0, [r7, #4]
 80158f6:	f001 f9bb 	bl	8016c70 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80158fa:	6878      	ldr	r0, [r7, #4]
 80158fc:	f000 fd2e 	bl	801635c <USBD_CtlSendStatus>

              break;
 8015900:	e004      	b.n	801590c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015902:	6839      	ldr	r1, [r7, #0]
 8015904:	6878      	ldr	r0, [r7, #4]
 8015906:	f000 fc5e 	bl	80161c6 <USBD_CtlError>
              break;
 801590a:	bf00      	nop
          }
          break;
 801590c:	e107      	b.n	8015b1e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015914:	b2db      	uxtb	r3, r3
 8015916:	2b02      	cmp	r3, #2
 8015918:	d002      	beq.n	8015920 <USBD_StdEPReq+0x124>
 801591a:	2b03      	cmp	r3, #3
 801591c:	d016      	beq.n	801594c <USBD_StdEPReq+0x150>
 801591e:	e04b      	b.n	80159b8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015920:	7bbb      	ldrb	r3, [r7, #14]
 8015922:	2b00      	cmp	r3, #0
 8015924:	d00d      	beq.n	8015942 <USBD_StdEPReq+0x146>
 8015926:	7bbb      	ldrb	r3, [r7, #14]
 8015928:	2b80      	cmp	r3, #128	; 0x80
 801592a:	d00a      	beq.n	8015942 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801592c:	7bbb      	ldrb	r3, [r7, #14]
 801592e:	4619      	mov	r1, r3
 8015930:	6878      	ldr	r0, [r7, #4]
 8015932:	f001 f99d 	bl	8016c70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015936:	2180      	movs	r1, #128	; 0x80
 8015938:	6878      	ldr	r0, [r7, #4]
 801593a:	f001 f999 	bl	8016c70 <USBD_LL_StallEP>
 801593e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015940:	e040      	b.n	80159c4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015942:	6839      	ldr	r1, [r7, #0]
 8015944:	6878      	ldr	r0, [r7, #4]
 8015946:	f000 fc3e 	bl	80161c6 <USBD_CtlError>
              break;
 801594a:	e03b      	b.n	80159c4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801594c:	683b      	ldr	r3, [r7, #0]
 801594e:	885b      	ldrh	r3, [r3, #2]
 8015950:	2b00      	cmp	r3, #0
 8015952:	d136      	bne.n	80159c2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015954:	7bbb      	ldrb	r3, [r7, #14]
 8015956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801595a:	2b00      	cmp	r3, #0
 801595c:	d004      	beq.n	8015968 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801595e:	7bbb      	ldrb	r3, [r7, #14]
 8015960:	4619      	mov	r1, r3
 8015962:	6878      	ldr	r0, [r7, #4]
 8015964:	f001 f9a3 	bl	8016cae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015968:	6878      	ldr	r0, [r7, #4]
 801596a:	f000 fcf7 	bl	801635c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801596e:	7bbb      	ldrb	r3, [r7, #14]
 8015970:	4619      	mov	r1, r3
 8015972:	6878      	ldr	r0, [r7, #4]
 8015974:	f7ff fde2 	bl	801553c <USBD_CoreFindEP>
 8015978:	4603      	mov	r3, r0
 801597a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801597c:	7b7b      	ldrb	r3, [r7, #13]
 801597e:	2bff      	cmp	r3, #255	; 0xff
 8015980:	d01f      	beq.n	80159c2 <USBD_StdEPReq+0x1c6>
 8015982:	7b7b      	ldrb	r3, [r7, #13]
 8015984:	2b00      	cmp	r3, #0
 8015986:	d11c      	bne.n	80159c2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8015988:	7b7a      	ldrb	r2, [r7, #13]
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8015990:	7b7a      	ldrb	r2, [r7, #13]
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	32ae      	adds	r2, #174	; 0xae
 8015996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801599a:	689b      	ldr	r3, [r3, #8]
 801599c:	2b00      	cmp	r3, #0
 801599e:	d010      	beq.n	80159c2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80159a0:	7b7a      	ldrb	r2, [r7, #13]
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	32ae      	adds	r2, #174	; 0xae
 80159a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159aa:	689b      	ldr	r3, [r3, #8]
 80159ac:	6839      	ldr	r1, [r7, #0]
 80159ae:	6878      	ldr	r0, [r7, #4]
 80159b0:	4798      	blx	r3
 80159b2:	4603      	mov	r3, r0
 80159b4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80159b6:	e004      	b.n	80159c2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80159b8:	6839      	ldr	r1, [r7, #0]
 80159ba:	6878      	ldr	r0, [r7, #4]
 80159bc:	f000 fc03 	bl	80161c6 <USBD_CtlError>
              break;
 80159c0:	e000      	b.n	80159c4 <USBD_StdEPReq+0x1c8>
              break;
 80159c2:	bf00      	nop
          }
          break;
 80159c4:	e0ab      	b.n	8015b1e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80159cc:	b2db      	uxtb	r3, r3
 80159ce:	2b02      	cmp	r3, #2
 80159d0:	d002      	beq.n	80159d8 <USBD_StdEPReq+0x1dc>
 80159d2:	2b03      	cmp	r3, #3
 80159d4:	d032      	beq.n	8015a3c <USBD_StdEPReq+0x240>
 80159d6:	e097      	b.n	8015b08 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80159d8:	7bbb      	ldrb	r3, [r7, #14]
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d007      	beq.n	80159ee <USBD_StdEPReq+0x1f2>
 80159de:	7bbb      	ldrb	r3, [r7, #14]
 80159e0:	2b80      	cmp	r3, #128	; 0x80
 80159e2:	d004      	beq.n	80159ee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80159e4:	6839      	ldr	r1, [r7, #0]
 80159e6:	6878      	ldr	r0, [r7, #4]
 80159e8:	f000 fbed 	bl	80161c6 <USBD_CtlError>
                break;
 80159ec:	e091      	b.n	8015b12 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80159ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	da0b      	bge.n	8015a0e <USBD_StdEPReq+0x212>
 80159f6:	7bbb      	ldrb	r3, [r7, #14]
 80159f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80159fc:	4613      	mov	r3, r2
 80159fe:	009b      	lsls	r3, r3, #2
 8015a00:	4413      	add	r3, r2
 8015a02:	009b      	lsls	r3, r3, #2
 8015a04:	3310      	adds	r3, #16
 8015a06:	687a      	ldr	r2, [r7, #4]
 8015a08:	4413      	add	r3, r2
 8015a0a:	3304      	adds	r3, #4
 8015a0c:	e00b      	b.n	8015a26 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015a0e:	7bbb      	ldrb	r3, [r7, #14]
 8015a10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015a14:	4613      	mov	r3, r2
 8015a16:	009b      	lsls	r3, r3, #2
 8015a18:	4413      	add	r3, r2
 8015a1a:	009b      	lsls	r3, r3, #2
 8015a1c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015a20:	687a      	ldr	r2, [r7, #4]
 8015a22:	4413      	add	r3, r2
 8015a24:	3304      	adds	r3, #4
 8015a26:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015a28:	68bb      	ldr	r3, [r7, #8]
 8015a2a:	2200      	movs	r2, #0
 8015a2c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015a2e:	68bb      	ldr	r3, [r7, #8]
 8015a30:	2202      	movs	r2, #2
 8015a32:	4619      	mov	r1, r3
 8015a34:	6878      	ldr	r0, [r7, #4]
 8015a36:	f000 fc37 	bl	80162a8 <USBD_CtlSendData>
              break;
 8015a3a:	e06a      	b.n	8015b12 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015a3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	da11      	bge.n	8015a68 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015a44:	7bbb      	ldrb	r3, [r7, #14]
 8015a46:	f003 020f 	and.w	r2, r3, #15
 8015a4a:	6879      	ldr	r1, [r7, #4]
 8015a4c:	4613      	mov	r3, r2
 8015a4e:	009b      	lsls	r3, r3, #2
 8015a50:	4413      	add	r3, r2
 8015a52:	009b      	lsls	r3, r3, #2
 8015a54:	440b      	add	r3, r1
 8015a56:	3324      	adds	r3, #36	; 0x24
 8015a58:	881b      	ldrh	r3, [r3, #0]
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d117      	bne.n	8015a8e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015a5e:	6839      	ldr	r1, [r7, #0]
 8015a60:	6878      	ldr	r0, [r7, #4]
 8015a62:	f000 fbb0 	bl	80161c6 <USBD_CtlError>
                  break;
 8015a66:	e054      	b.n	8015b12 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015a68:	7bbb      	ldrb	r3, [r7, #14]
 8015a6a:	f003 020f 	and.w	r2, r3, #15
 8015a6e:	6879      	ldr	r1, [r7, #4]
 8015a70:	4613      	mov	r3, r2
 8015a72:	009b      	lsls	r3, r3, #2
 8015a74:	4413      	add	r3, r2
 8015a76:	009b      	lsls	r3, r3, #2
 8015a78:	440b      	add	r3, r1
 8015a7a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015a7e:	881b      	ldrh	r3, [r3, #0]
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d104      	bne.n	8015a8e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015a84:	6839      	ldr	r1, [r7, #0]
 8015a86:	6878      	ldr	r0, [r7, #4]
 8015a88:	f000 fb9d 	bl	80161c6 <USBD_CtlError>
                  break;
 8015a8c:	e041      	b.n	8015b12 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015a8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	da0b      	bge.n	8015aae <USBD_StdEPReq+0x2b2>
 8015a96:	7bbb      	ldrb	r3, [r7, #14]
 8015a98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015a9c:	4613      	mov	r3, r2
 8015a9e:	009b      	lsls	r3, r3, #2
 8015aa0:	4413      	add	r3, r2
 8015aa2:	009b      	lsls	r3, r3, #2
 8015aa4:	3310      	adds	r3, #16
 8015aa6:	687a      	ldr	r2, [r7, #4]
 8015aa8:	4413      	add	r3, r2
 8015aaa:	3304      	adds	r3, #4
 8015aac:	e00b      	b.n	8015ac6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015aae:	7bbb      	ldrb	r3, [r7, #14]
 8015ab0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015ab4:	4613      	mov	r3, r2
 8015ab6:	009b      	lsls	r3, r3, #2
 8015ab8:	4413      	add	r3, r2
 8015aba:	009b      	lsls	r3, r3, #2
 8015abc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015ac0:	687a      	ldr	r2, [r7, #4]
 8015ac2:	4413      	add	r3, r2
 8015ac4:	3304      	adds	r3, #4
 8015ac6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015ac8:	7bbb      	ldrb	r3, [r7, #14]
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d002      	beq.n	8015ad4 <USBD_StdEPReq+0x2d8>
 8015ace:	7bbb      	ldrb	r3, [r7, #14]
 8015ad0:	2b80      	cmp	r3, #128	; 0x80
 8015ad2:	d103      	bne.n	8015adc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015ad4:	68bb      	ldr	r3, [r7, #8]
 8015ad6:	2200      	movs	r2, #0
 8015ad8:	601a      	str	r2, [r3, #0]
 8015ada:	e00e      	b.n	8015afa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015adc:	7bbb      	ldrb	r3, [r7, #14]
 8015ade:	4619      	mov	r1, r3
 8015ae0:	6878      	ldr	r0, [r7, #4]
 8015ae2:	f001 f903 	bl	8016cec <USBD_LL_IsStallEP>
 8015ae6:	4603      	mov	r3, r0
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d003      	beq.n	8015af4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8015aec:	68bb      	ldr	r3, [r7, #8]
 8015aee:	2201      	movs	r2, #1
 8015af0:	601a      	str	r2, [r3, #0]
 8015af2:	e002      	b.n	8015afa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015af4:	68bb      	ldr	r3, [r7, #8]
 8015af6:	2200      	movs	r2, #0
 8015af8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015afa:	68bb      	ldr	r3, [r7, #8]
 8015afc:	2202      	movs	r2, #2
 8015afe:	4619      	mov	r1, r3
 8015b00:	6878      	ldr	r0, [r7, #4]
 8015b02:	f000 fbd1 	bl	80162a8 <USBD_CtlSendData>
              break;
 8015b06:	e004      	b.n	8015b12 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8015b08:	6839      	ldr	r1, [r7, #0]
 8015b0a:	6878      	ldr	r0, [r7, #4]
 8015b0c:	f000 fb5b 	bl	80161c6 <USBD_CtlError>
              break;
 8015b10:	bf00      	nop
          }
          break;
 8015b12:	e004      	b.n	8015b1e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015b14:	6839      	ldr	r1, [r7, #0]
 8015b16:	6878      	ldr	r0, [r7, #4]
 8015b18:	f000 fb55 	bl	80161c6 <USBD_CtlError>
          break;
 8015b1c:	bf00      	nop
      }
      break;
 8015b1e:	e005      	b.n	8015b2c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015b20:	6839      	ldr	r1, [r7, #0]
 8015b22:	6878      	ldr	r0, [r7, #4]
 8015b24:	f000 fb4f 	bl	80161c6 <USBD_CtlError>
      break;
 8015b28:	e000      	b.n	8015b2c <USBD_StdEPReq+0x330>
      break;
 8015b2a:	bf00      	nop
  }

  return ret;
 8015b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b2e:	4618      	mov	r0, r3
 8015b30:	3710      	adds	r7, #16
 8015b32:	46bd      	mov	sp, r7
 8015b34:	bd80      	pop	{r7, pc}
	...

08015b38 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015b38:	b580      	push	{r7, lr}
 8015b3a:	b084      	sub	sp, #16
 8015b3c:	af00      	add	r7, sp, #0
 8015b3e:	6078      	str	r0, [r7, #4]
 8015b40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015b42:	2300      	movs	r3, #0
 8015b44:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015b46:	2300      	movs	r3, #0
 8015b48:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015b4a:	2300      	movs	r3, #0
 8015b4c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015b4e:	683b      	ldr	r3, [r7, #0]
 8015b50:	885b      	ldrh	r3, [r3, #2]
 8015b52:	0a1b      	lsrs	r3, r3, #8
 8015b54:	b29b      	uxth	r3, r3
 8015b56:	3b01      	subs	r3, #1
 8015b58:	2b06      	cmp	r3, #6
 8015b5a:	f200 8128 	bhi.w	8015dae <USBD_GetDescriptor+0x276>
 8015b5e:	a201      	add	r2, pc, #4	; (adr r2, 8015b64 <USBD_GetDescriptor+0x2c>)
 8015b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b64:	08015b81 	.word	0x08015b81
 8015b68:	08015b99 	.word	0x08015b99
 8015b6c:	08015bd9 	.word	0x08015bd9
 8015b70:	08015daf 	.word	0x08015daf
 8015b74:	08015daf 	.word	0x08015daf
 8015b78:	08015d4f 	.word	0x08015d4f
 8015b7c:	08015d7b 	.word	0x08015d7b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015b86:	681b      	ldr	r3, [r3, #0]
 8015b88:	687a      	ldr	r2, [r7, #4]
 8015b8a:	7c12      	ldrb	r2, [r2, #16]
 8015b8c:	f107 0108 	add.w	r1, r7, #8
 8015b90:	4610      	mov	r0, r2
 8015b92:	4798      	blx	r3
 8015b94:	60f8      	str	r0, [r7, #12]
      break;
 8015b96:	e112      	b.n	8015dbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	7c1b      	ldrb	r3, [r3, #16]
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d10d      	bne.n	8015bbc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ba8:	f107 0208 	add.w	r2, r7, #8
 8015bac:	4610      	mov	r0, r2
 8015bae:	4798      	blx	r3
 8015bb0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	3301      	adds	r3, #1
 8015bb6:	2202      	movs	r2, #2
 8015bb8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015bba:	e100      	b.n	8015dbe <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015bc4:	f107 0208 	add.w	r2, r7, #8
 8015bc8:	4610      	mov	r0, r2
 8015bca:	4798      	blx	r3
 8015bcc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015bce:	68fb      	ldr	r3, [r7, #12]
 8015bd0:	3301      	adds	r3, #1
 8015bd2:	2202      	movs	r2, #2
 8015bd4:	701a      	strb	r2, [r3, #0]
      break;
 8015bd6:	e0f2      	b.n	8015dbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015bd8:	683b      	ldr	r3, [r7, #0]
 8015bda:	885b      	ldrh	r3, [r3, #2]
 8015bdc:	b2db      	uxtb	r3, r3
 8015bde:	2b05      	cmp	r3, #5
 8015be0:	f200 80ac 	bhi.w	8015d3c <USBD_GetDescriptor+0x204>
 8015be4:	a201      	add	r2, pc, #4	; (adr r2, 8015bec <USBD_GetDescriptor+0xb4>)
 8015be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015bea:	bf00      	nop
 8015bec:	08015c05 	.word	0x08015c05
 8015bf0:	08015c39 	.word	0x08015c39
 8015bf4:	08015c6d 	.word	0x08015c6d
 8015bf8:	08015ca1 	.word	0x08015ca1
 8015bfc:	08015cd5 	.word	0x08015cd5
 8015c00:	08015d09 	.word	0x08015d09
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c0a:	685b      	ldr	r3, [r3, #4]
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d00b      	beq.n	8015c28 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c16:	685b      	ldr	r3, [r3, #4]
 8015c18:	687a      	ldr	r2, [r7, #4]
 8015c1a:	7c12      	ldrb	r2, [r2, #16]
 8015c1c:	f107 0108 	add.w	r1, r7, #8
 8015c20:	4610      	mov	r0, r2
 8015c22:	4798      	blx	r3
 8015c24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015c26:	e091      	b.n	8015d4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015c28:	6839      	ldr	r1, [r7, #0]
 8015c2a:	6878      	ldr	r0, [r7, #4]
 8015c2c:	f000 facb 	bl	80161c6 <USBD_CtlError>
            err++;
 8015c30:	7afb      	ldrb	r3, [r7, #11]
 8015c32:	3301      	adds	r3, #1
 8015c34:	72fb      	strb	r3, [r7, #11]
          break;
 8015c36:	e089      	b.n	8015d4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c3e:	689b      	ldr	r3, [r3, #8]
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d00b      	beq.n	8015c5c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c4a:	689b      	ldr	r3, [r3, #8]
 8015c4c:	687a      	ldr	r2, [r7, #4]
 8015c4e:	7c12      	ldrb	r2, [r2, #16]
 8015c50:	f107 0108 	add.w	r1, r7, #8
 8015c54:	4610      	mov	r0, r2
 8015c56:	4798      	blx	r3
 8015c58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015c5a:	e077      	b.n	8015d4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015c5c:	6839      	ldr	r1, [r7, #0]
 8015c5e:	6878      	ldr	r0, [r7, #4]
 8015c60:	f000 fab1 	bl	80161c6 <USBD_CtlError>
            err++;
 8015c64:	7afb      	ldrb	r3, [r7, #11]
 8015c66:	3301      	adds	r3, #1
 8015c68:	72fb      	strb	r3, [r7, #11]
          break;
 8015c6a:	e06f      	b.n	8015d4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c72:	68db      	ldr	r3, [r3, #12]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d00b      	beq.n	8015c90 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c7e:	68db      	ldr	r3, [r3, #12]
 8015c80:	687a      	ldr	r2, [r7, #4]
 8015c82:	7c12      	ldrb	r2, [r2, #16]
 8015c84:	f107 0108 	add.w	r1, r7, #8
 8015c88:	4610      	mov	r0, r2
 8015c8a:	4798      	blx	r3
 8015c8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015c8e:	e05d      	b.n	8015d4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015c90:	6839      	ldr	r1, [r7, #0]
 8015c92:	6878      	ldr	r0, [r7, #4]
 8015c94:	f000 fa97 	bl	80161c6 <USBD_CtlError>
            err++;
 8015c98:	7afb      	ldrb	r3, [r7, #11]
 8015c9a:	3301      	adds	r3, #1
 8015c9c:	72fb      	strb	r3, [r7, #11]
          break;
 8015c9e:	e055      	b.n	8015d4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ca6:	691b      	ldr	r3, [r3, #16]
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d00b      	beq.n	8015cc4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015cb2:	691b      	ldr	r3, [r3, #16]
 8015cb4:	687a      	ldr	r2, [r7, #4]
 8015cb6:	7c12      	ldrb	r2, [r2, #16]
 8015cb8:	f107 0108 	add.w	r1, r7, #8
 8015cbc:	4610      	mov	r0, r2
 8015cbe:	4798      	blx	r3
 8015cc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015cc2:	e043      	b.n	8015d4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015cc4:	6839      	ldr	r1, [r7, #0]
 8015cc6:	6878      	ldr	r0, [r7, #4]
 8015cc8:	f000 fa7d 	bl	80161c6 <USBD_CtlError>
            err++;
 8015ccc:	7afb      	ldrb	r3, [r7, #11]
 8015cce:	3301      	adds	r3, #1
 8015cd0:	72fb      	strb	r3, [r7, #11]
          break;
 8015cd2:	e03b      	b.n	8015d4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015cda:	695b      	ldr	r3, [r3, #20]
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d00b      	beq.n	8015cf8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ce6:	695b      	ldr	r3, [r3, #20]
 8015ce8:	687a      	ldr	r2, [r7, #4]
 8015cea:	7c12      	ldrb	r2, [r2, #16]
 8015cec:	f107 0108 	add.w	r1, r7, #8
 8015cf0:	4610      	mov	r0, r2
 8015cf2:	4798      	blx	r3
 8015cf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015cf6:	e029      	b.n	8015d4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015cf8:	6839      	ldr	r1, [r7, #0]
 8015cfa:	6878      	ldr	r0, [r7, #4]
 8015cfc:	f000 fa63 	bl	80161c6 <USBD_CtlError>
            err++;
 8015d00:	7afb      	ldrb	r3, [r7, #11]
 8015d02:	3301      	adds	r3, #1
 8015d04:	72fb      	strb	r3, [r7, #11]
          break;
 8015d06:	e021      	b.n	8015d4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d0e:	699b      	ldr	r3, [r3, #24]
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d00b      	beq.n	8015d2c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d1a:	699b      	ldr	r3, [r3, #24]
 8015d1c:	687a      	ldr	r2, [r7, #4]
 8015d1e:	7c12      	ldrb	r2, [r2, #16]
 8015d20:	f107 0108 	add.w	r1, r7, #8
 8015d24:	4610      	mov	r0, r2
 8015d26:	4798      	blx	r3
 8015d28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015d2a:	e00f      	b.n	8015d4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015d2c:	6839      	ldr	r1, [r7, #0]
 8015d2e:	6878      	ldr	r0, [r7, #4]
 8015d30:	f000 fa49 	bl	80161c6 <USBD_CtlError>
            err++;
 8015d34:	7afb      	ldrb	r3, [r7, #11]
 8015d36:	3301      	adds	r3, #1
 8015d38:	72fb      	strb	r3, [r7, #11]
          break;
 8015d3a:	e007      	b.n	8015d4c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015d3c:	6839      	ldr	r1, [r7, #0]
 8015d3e:	6878      	ldr	r0, [r7, #4]
 8015d40:	f000 fa41 	bl	80161c6 <USBD_CtlError>
          err++;
 8015d44:	7afb      	ldrb	r3, [r7, #11]
 8015d46:	3301      	adds	r3, #1
 8015d48:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8015d4a:	bf00      	nop
      }
      break;
 8015d4c:	e037      	b.n	8015dbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	7c1b      	ldrb	r3, [r3, #16]
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d109      	bne.n	8015d6a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015d5e:	f107 0208 	add.w	r2, r7, #8
 8015d62:	4610      	mov	r0, r2
 8015d64:	4798      	blx	r3
 8015d66:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015d68:	e029      	b.n	8015dbe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015d6a:	6839      	ldr	r1, [r7, #0]
 8015d6c:	6878      	ldr	r0, [r7, #4]
 8015d6e:	f000 fa2a 	bl	80161c6 <USBD_CtlError>
        err++;
 8015d72:	7afb      	ldrb	r3, [r7, #11]
 8015d74:	3301      	adds	r3, #1
 8015d76:	72fb      	strb	r3, [r7, #11]
      break;
 8015d78:	e021      	b.n	8015dbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	7c1b      	ldrb	r3, [r3, #16]
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d10d      	bne.n	8015d9e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d8a:	f107 0208 	add.w	r2, r7, #8
 8015d8e:	4610      	mov	r0, r2
 8015d90:	4798      	blx	r3
 8015d92:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015d94:	68fb      	ldr	r3, [r7, #12]
 8015d96:	3301      	adds	r3, #1
 8015d98:	2207      	movs	r2, #7
 8015d9a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015d9c:	e00f      	b.n	8015dbe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015d9e:	6839      	ldr	r1, [r7, #0]
 8015da0:	6878      	ldr	r0, [r7, #4]
 8015da2:	f000 fa10 	bl	80161c6 <USBD_CtlError>
        err++;
 8015da6:	7afb      	ldrb	r3, [r7, #11]
 8015da8:	3301      	adds	r3, #1
 8015daa:	72fb      	strb	r3, [r7, #11]
      break;
 8015dac:	e007      	b.n	8015dbe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8015dae:	6839      	ldr	r1, [r7, #0]
 8015db0:	6878      	ldr	r0, [r7, #4]
 8015db2:	f000 fa08 	bl	80161c6 <USBD_CtlError>
      err++;
 8015db6:	7afb      	ldrb	r3, [r7, #11]
 8015db8:	3301      	adds	r3, #1
 8015dba:	72fb      	strb	r3, [r7, #11]
      break;
 8015dbc:	bf00      	nop
  }

  if (err != 0U)
 8015dbe:	7afb      	ldrb	r3, [r7, #11]
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d11e      	bne.n	8015e02 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8015dc4:	683b      	ldr	r3, [r7, #0]
 8015dc6:	88db      	ldrh	r3, [r3, #6]
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d016      	beq.n	8015dfa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8015dcc:	893b      	ldrh	r3, [r7, #8]
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d00e      	beq.n	8015df0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8015dd2:	683b      	ldr	r3, [r7, #0]
 8015dd4:	88da      	ldrh	r2, [r3, #6]
 8015dd6:	893b      	ldrh	r3, [r7, #8]
 8015dd8:	4293      	cmp	r3, r2
 8015dda:	bf28      	it	cs
 8015ddc:	4613      	movcs	r3, r2
 8015dde:	b29b      	uxth	r3, r3
 8015de0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015de2:	893b      	ldrh	r3, [r7, #8]
 8015de4:	461a      	mov	r2, r3
 8015de6:	68f9      	ldr	r1, [r7, #12]
 8015de8:	6878      	ldr	r0, [r7, #4]
 8015dea:	f000 fa5d 	bl	80162a8 <USBD_CtlSendData>
 8015dee:	e009      	b.n	8015e04 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015df0:	6839      	ldr	r1, [r7, #0]
 8015df2:	6878      	ldr	r0, [r7, #4]
 8015df4:	f000 f9e7 	bl	80161c6 <USBD_CtlError>
 8015df8:	e004      	b.n	8015e04 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015dfa:	6878      	ldr	r0, [r7, #4]
 8015dfc:	f000 faae 	bl	801635c <USBD_CtlSendStatus>
 8015e00:	e000      	b.n	8015e04 <USBD_GetDescriptor+0x2cc>
    return;
 8015e02:	bf00      	nop
  }
}
 8015e04:	3710      	adds	r7, #16
 8015e06:	46bd      	mov	sp, r7
 8015e08:	bd80      	pop	{r7, pc}
 8015e0a:	bf00      	nop

08015e0c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e0c:	b580      	push	{r7, lr}
 8015e0e:	b084      	sub	sp, #16
 8015e10:	af00      	add	r7, sp, #0
 8015e12:	6078      	str	r0, [r7, #4]
 8015e14:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015e16:	683b      	ldr	r3, [r7, #0]
 8015e18:	889b      	ldrh	r3, [r3, #4]
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d131      	bne.n	8015e82 <USBD_SetAddress+0x76>
 8015e1e:	683b      	ldr	r3, [r7, #0]
 8015e20:	88db      	ldrh	r3, [r3, #6]
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d12d      	bne.n	8015e82 <USBD_SetAddress+0x76>
 8015e26:	683b      	ldr	r3, [r7, #0]
 8015e28:	885b      	ldrh	r3, [r3, #2]
 8015e2a:	2b7f      	cmp	r3, #127	; 0x7f
 8015e2c:	d829      	bhi.n	8015e82 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015e2e:	683b      	ldr	r3, [r7, #0]
 8015e30:	885b      	ldrh	r3, [r3, #2]
 8015e32:	b2db      	uxtb	r3, r3
 8015e34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015e38:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015e40:	b2db      	uxtb	r3, r3
 8015e42:	2b03      	cmp	r3, #3
 8015e44:	d104      	bne.n	8015e50 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8015e46:	6839      	ldr	r1, [r7, #0]
 8015e48:	6878      	ldr	r0, [r7, #4]
 8015e4a:	f000 f9bc 	bl	80161c6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e4e:	e01d      	b.n	8015e8c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	7bfa      	ldrb	r2, [r7, #15]
 8015e54:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015e58:	7bfb      	ldrb	r3, [r7, #15]
 8015e5a:	4619      	mov	r1, r3
 8015e5c:	6878      	ldr	r0, [r7, #4]
 8015e5e:	f000 ff71 	bl	8016d44 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015e62:	6878      	ldr	r0, [r7, #4]
 8015e64:	f000 fa7a 	bl	801635c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015e68:	7bfb      	ldrb	r3, [r7, #15]
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d004      	beq.n	8015e78 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	2202      	movs	r2, #2
 8015e72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e76:	e009      	b.n	8015e8c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	2201      	movs	r2, #1
 8015e7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e80:	e004      	b.n	8015e8c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015e82:	6839      	ldr	r1, [r7, #0]
 8015e84:	6878      	ldr	r0, [r7, #4]
 8015e86:	f000 f99e 	bl	80161c6 <USBD_CtlError>
  }
}
 8015e8a:	bf00      	nop
 8015e8c:	bf00      	nop
 8015e8e:	3710      	adds	r7, #16
 8015e90:	46bd      	mov	sp, r7
 8015e92:	bd80      	pop	{r7, pc}

08015e94 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e94:	b580      	push	{r7, lr}
 8015e96:	b084      	sub	sp, #16
 8015e98:	af00      	add	r7, sp, #0
 8015e9a:	6078      	str	r0, [r7, #4]
 8015e9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015e9e:	2300      	movs	r3, #0
 8015ea0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015ea2:	683b      	ldr	r3, [r7, #0]
 8015ea4:	885b      	ldrh	r3, [r3, #2]
 8015ea6:	b2da      	uxtb	r2, r3
 8015ea8:	4b4e      	ldr	r3, [pc, #312]	; (8015fe4 <USBD_SetConfig+0x150>)
 8015eaa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015eac:	4b4d      	ldr	r3, [pc, #308]	; (8015fe4 <USBD_SetConfig+0x150>)
 8015eae:	781b      	ldrb	r3, [r3, #0]
 8015eb0:	2b01      	cmp	r3, #1
 8015eb2:	d905      	bls.n	8015ec0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015eb4:	6839      	ldr	r1, [r7, #0]
 8015eb6:	6878      	ldr	r0, [r7, #4]
 8015eb8:	f000 f985 	bl	80161c6 <USBD_CtlError>
    return USBD_FAIL;
 8015ebc:	2303      	movs	r3, #3
 8015ebe:	e08c      	b.n	8015fda <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ec6:	b2db      	uxtb	r3, r3
 8015ec8:	2b02      	cmp	r3, #2
 8015eca:	d002      	beq.n	8015ed2 <USBD_SetConfig+0x3e>
 8015ecc:	2b03      	cmp	r3, #3
 8015ece:	d029      	beq.n	8015f24 <USBD_SetConfig+0x90>
 8015ed0:	e075      	b.n	8015fbe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8015ed2:	4b44      	ldr	r3, [pc, #272]	; (8015fe4 <USBD_SetConfig+0x150>)
 8015ed4:	781b      	ldrb	r3, [r3, #0]
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d020      	beq.n	8015f1c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8015eda:	4b42      	ldr	r3, [pc, #264]	; (8015fe4 <USBD_SetConfig+0x150>)
 8015edc:	781b      	ldrb	r3, [r3, #0]
 8015ede:	461a      	mov	r2, r3
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015ee4:	4b3f      	ldr	r3, [pc, #252]	; (8015fe4 <USBD_SetConfig+0x150>)
 8015ee6:	781b      	ldrb	r3, [r3, #0]
 8015ee8:	4619      	mov	r1, r3
 8015eea:	6878      	ldr	r0, [r7, #4]
 8015eec:	f7fe ffe1 	bl	8014eb2 <USBD_SetClassConfig>
 8015ef0:	4603      	mov	r3, r0
 8015ef2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8015ef4:	7bfb      	ldrb	r3, [r7, #15]
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d008      	beq.n	8015f0c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8015efa:	6839      	ldr	r1, [r7, #0]
 8015efc:	6878      	ldr	r0, [r7, #4]
 8015efe:	f000 f962 	bl	80161c6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	2202      	movs	r2, #2
 8015f06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015f0a:	e065      	b.n	8015fd8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015f0c:	6878      	ldr	r0, [r7, #4]
 8015f0e:	f000 fa25 	bl	801635c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	2203      	movs	r2, #3
 8015f16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015f1a:	e05d      	b.n	8015fd8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015f1c:	6878      	ldr	r0, [r7, #4]
 8015f1e:	f000 fa1d 	bl	801635c <USBD_CtlSendStatus>
      break;
 8015f22:	e059      	b.n	8015fd8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8015f24:	4b2f      	ldr	r3, [pc, #188]	; (8015fe4 <USBD_SetConfig+0x150>)
 8015f26:	781b      	ldrb	r3, [r3, #0]
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d112      	bne.n	8015f52 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	2202      	movs	r2, #2
 8015f30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8015f34:	4b2b      	ldr	r3, [pc, #172]	; (8015fe4 <USBD_SetConfig+0x150>)
 8015f36:	781b      	ldrb	r3, [r3, #0]
 8015f38:	461a      	mov	r2, r3
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015f3e:	4b29      	ldr	r3, [pc, #164]	; (8015fe4 <USBD_SetConfig+0x150>)
 8015f40:	781b      	ldrb	r3, [r3, #0]
 8015f42:	4619      	mov	r1, r3
 8015f44:	6878      	ldr	r0, [r7, #4]
 8015f46:	f7fe ffd0 	bl	8014eea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8015f4a:	6878      	ldr	r0, [r7, #4]
 8015f4c:	f000 fa06 	bl	801635c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015f50:	e042      	b.n	8015fd8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8015f52:	4b24      	ldr	r3, [pc, #144]	; (8015fe4 <USBD_SetConfig+0x150>)
 8015f54:	781b      	ldrb	r3, [r3, #0]
 8015f56:	461a      	mov	r2, r3
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	685b      	ldr	r3, [r3, #4]
 8015f5c:	429a      	cmp	r2, r3
 8015f5e:	d02a      	beq.n	8015fb6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	685b      	ldr	r3, [r3, #4]
 8015f64:	b2db      	uxtb	r3, r3
 8015f66:	4619      	mov	r1, r3
 8015f68:	6878      	ldr	r0, [r7, #4]
 8015f6a:	f7fe ffbe 	bl	8014eea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8015f6e:	4b1d      	ldr	r3, [pc, #116]	; (8015fe4 <USBD_SetConfig+0x150>)
 8015f70:	781b      	ldrb	r3, [r3, #0]
 8015f72:	461a      	mov	r2, r3
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015f78:	4b1a      	ldr	r3, [pc, #104]	; (8015fe4 <USBD_SetConfig+0x150>)
 8015f7a:	781b      	ldrb	r3, [r3, #0]
 8015f7c:	4619      	mov	r1, r3
 8015f7e:	6878      	ldr	r0, [r7, #4]
 8015f80:	f7fe ff97 	bl	8014eb2 <USBD_SetClassConfig>
 8015f84:	4603      	mov	r3, r0
 8015f86:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8015f88:	7bfb      	ldrb	r3, [r7, #15]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d00f      	beq.n	8015fae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8015f8e:	6839      	ldr	r1, [r7, #0]
 8015f90:	6878      	ldr	r0, [r7, #4]
 8015f92:	f000 f918 	bl	80161c6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	685b      	ldr	r3, [r3, #4]
 8015f9a:	b2db      	uxtb	r3, r3
 8015f9c:	4619      	mov	r1, r3
 8015f9e:	6878      	ldr	r0, [r7, #4]
 8015fa0:	f7fe ffa3 	bl	8014eea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	2202      	movs	r2, #2
 8015fa8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015fac:	e014      	b.n	8015fd8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015fae:	6878      	ldr	r0, [r7, #4]
 8015fb0:	f000 f9d4 	bl	801635c <USBD_CtlSendStatus>
      break;
 8015fb4:	e010      	b.n	8015fd8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015fb6:	6878      	ldr	r0, [r7, #4]
 8015fb8:	f000 f9d0 	bl	801635c <USBD_CtlSendStatus>
      break;
 8015fbc:	e00c      	b.n	8015fd8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8015fbe:	6839      	ldr	r1, [r7, #0]
 8015fc0:	6878      	ldr	r0, [r7, #4]
 8015fc2:	f000 f900 	bl	80161c6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015fc6:	4b07      	ldr	r3, [pc, #28]	; (8015fe4 <USBD_SetConfig+0x150>)
 8015fc8:	781b      	ldrb	r3, [r3, #0]
 8015fca:	4619      	mov	r1, r3
 8015fcc:	6878      	ldr	r0, [r7, #4]
 8015fce:	f7fe ff8c 	bl	8014eea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8015fd2:	2303      	movs	r3, #3
 8015fd4:	73fb      	strb	r3, [r7, #15]
      break;
 8015fd6:	bf00      	nop
  }

  return ret;
 8015fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8015fda:	4618      	mov	r0, r3
 8015fdc:	3710      	adds	r7, #16
 8015fde:	46bd      	mov	sp, r7
 8015fe0:	bd80      	pop	{r7, pc}
 8015fe2:	bf00      	nop
 8015fe4:	24001598 	.word	0x24001598

08015fe8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015fe8:	b580      	push	{r7, lr}
 8015fea:	b082      	sub	sp, #8
 8015fec:	af00      	add	r7, sp, #0
 8015fee:	6078      	str	r0, [r7, #4]
 8015ff0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8015ff2:	683b      	ldr	r3, [r7, #0]
 8015ff4:	88db      	ldrh	r3, [r3, #6]
 8015ff6:	2b01      	cmp	r3, #1
 8015ff8:	d004      	beq.n	8016004 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8015ffa:	6839      	ldr	r1, [r7, #0]
 8015ffc:	6878      	ldr	r0, [r7, #4]
 8015ffe:	f000 f8e2 	bl	80161c6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8016002:	e023      	b.n	801604c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801600a:	b2db      	uxtb	r3, r3
 801600c:	2b02      	cmp	r3, #2
 801600e:	dc02      	bgt.n	8016016 <USBD_GetConfig+0x2e>
 8016010:	2b00      	cmp	r3, #0
 8016012:	dc03      	bgt.n	801601c <USBD_GetConfig+0x34>
 8016014:	e015      	b.n	8016042 <USBD_GetConfig+0x5a>
 8016016:	2b03      	cmp	r3, #3
 8016018:	d00b      	beq.n	8016032 <USBD_GetConfig+0x4a>
 801601a:	e012      	b.n	8016042 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	2200      	movs	r2, #0
 8016020:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	3308      	adds	r3, #8
 8016026:	2201      	movs	r2, #1
 8016028:	4619      	mov	r1, r3
 801602a:	6878      	ldr	r0, [r7, #4]
 801602c:	f000 f93c 	bl	80162a8 <USBD_CtlSendData>
        break;
 8016030:	e00c      	b.n	801604c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	3304      	adds	r3, #4
 8016036:	2201      	movs	r2, #1
 8016038:	4619      	mov	r1, r3
 801603a:	6878      	ldr	r0, [r7, #4]
 801603c:	f000 f934 	bl	80162a8 <USBD_CtlSendData>
        break;
 8016040:	e004      	b.n	801604c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8016042:	6839      	ldr	r1, [r7, #0]
 8016044:	6878      	ldr	r0, [r7, #4]
 8016046:	f000 f8be 	bl	80161c6 <USBD_CtlError>
        break;
 801604a:	bf00      	nop
}
 801604c:	bf00      	nop
 801604e:	3708      	adds	r7, #8
 8016050:	46bd      	mov	sp, r7
 8016052:	bd80      	pop	{r7, pc}

08016054 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016054:	b580      	push	{r7, lr}
 8016056:	b082      	sub	sp, #8
 8016058:	af00      	add	r7, sp, #0
 801605a:	6078      	str	r0, [r7, #4]
 801605c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016064:	b2db      	uxtb	r3, r3
 8016066:	3b01      	subs	r3, #1
 8016068:	2b02      	cmp	r3, #2
 801606a:	d81e      	bhi.n	80160aa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801606c:	683b      	ldr	r3, [r7, #0]
 801606e:	88db      	ldrh	r3, [r3, #6]
 8016070:	2b02      	cmp	r3, #2
 8016072:	d004      	beq.n	801607e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8016074:	6839      	ldr	r1, [r7, #0]
 8016076:	6878      	ldr	r0, [r7, #4]
 8016078:	f000 f8a5 	bl	80161c6 <USBD_CtlError>
        break;
 801607c:	e01a      	b.n	80160b4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	2201      	movs	r2, #1
 8016082:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801608a:	2b00      	cmp	r3, #0
 801608c:	d005      	beq.n	801609a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	68db      	ldr	r3, [r3, #12]
 8016092:	f043 0202 	orr.w	r2, r3, #2
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	330c      	adds	r3, #12
 801609e:	2202      	movs	r2, #2
 80160a0:	4619      	mov	r1, r3
 80160a2:	6878      	ldr	r0, [r7, #4]
 80160a4:	f000 f900 	bl	80162a8 <USBD_CtlSendData>
      break;
 80160a8:	e004      	b.n	80160b4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80160aa:	6839      	ldr	r1, [r7, #0]
 80160ac:	6878      	ldr	r0, [r7, #4]
 80160ae:	f000 f88a 	bl	80161c6 <USBD_CtlError>
      break;
 80160b2:	bf00      	nop
  }
}
 80160b4:	bf00      	nop
 80160b6:	3708      	adds	r7, #8
 80160b8:	46bd      	mov	sp, r7
 80160ba:	bd80      	pop	{r7, pc}

080160bc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80160bc:	b580      	push	{r7, lr}
 80160be:	b082      	sub	sp, #8
 80160c0:	af00      	add	r7, sp, #0
 80160c2:	6078      	str	r0, [r7, #4]
 80160c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80160c6:	683b      	ldr	r3, [r7, #0]
 80160c8:	885b      	ldrh	r3, [r3, #2]
 80160ca:	2b01      	cmp	r3, #1
 80160cc:	d107      	bne.n	80160de <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	2201      	movs	r2, #1
 80160d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80160d6:	6878      	ldr	r0, [r7, #4]
 80160d8:	f000 f940 	bl	801635c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80160dc:	e013      	b.n	8016106 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80160de:	683b      	ldr	r3, [r7, #0]
 80160e0:	885b      	ldrh	r3, [r3, #2]
 80160e2:	2b02      	cmp	r3, #2
 80160e4:	d10b      	bne.n	80160fe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80160e6:	683b      	ldr	r3, [r7, #0]
 80160e8:	889b      	ldrh	r3, [r3, #4]
 80160ea:	0a1b      	lsrs	r3, r3, #8
 80160ec:	b29b      	uxth	r3, r3
 80160ee:	b2da      	uxtb	r2, r3
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80160f6:	6878      	ldr	r0, [r7, #4]
 80160f8:	f000 f930 	bl	801635c <USBD_CtlSendStatus>
}
 80160fc:	e003      	b.n	8016106 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80160fe:	6839      	ldr	r1, [r7, #0]
 8016100:	6878      	ldr	r0, [r7, #4]
 8016102:	f000 f860 	bl	80161c6 <USBD_CtlError>
}
 8016106:	bf00      	nop
 8016108:	3708      	adds	r7, #8
 801610a:	46bd      	mov	sp, r7
 801610c:	bd80      	pop	{r7, pc}

0801610e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801610e:	b580      	push	{r7, lr}
 8016110:	b082      	sub	sp, #8
 8016112:	af00      	add	r7, sp, #0
 8016114:	6078      	str	r0, [r7, #4]
 8016116:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801611e:	b2db      	uxtb	r3, r3
 8016120:	3b01      	subs	r3, #1
 8016122:	2b02      	cmp	r3, #2
 8016124:	d80b      	bhi.n	801613e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016126:	683b      	ldr	r3, [r7, #0]
 8016128:	885b      	ldrh	r3, [r3, #2]
 801612a:	2b01      	cmp	r3, #1
 801612c:	d10c      	bne.n	8016148 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	2200      	movs	r2, #0
 8016132:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8016136:	6878      	ldr	r0, [r7, #4]
 8016138:	f000 f910 	bl	801635c <USBD_CtlSendStatus>
      }
      break;
 801613c:	e004      	b.n	8016148 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801613e:	6839      	ldr	r1, [r7, #0]
 8016140:	6878      	ldr	r0, [r7, #4]
 8016142:	f000 f840 	bl	80161c6 <USBD_CtlError>
      break;
 8016146:	e000      	b.n	801614a <USBD_ClrFeature+0x3c>
      break;
 8016148:	bf00      	nop
  }
}
 801614a:	bf00      	nop
 801614c:	3708      	adds	r7, #8
 801614e:	46bd      	mov	sp, r7
 8016150:	bd80      	pop	{r7, pc}

08016152 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016152:	b580      	push	{r7, lr}
 8016154:	b084      	sub	sp, #16
 8016156:	af00      	add	r7, sp, #0
 8016158:	6078      	str	r0, [r7, #4]
 801615a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801615c:	683b      	ldr	r3, [r7, #0]
 801615e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	781a      	ldrb	r2, [r3, #0]
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8016168:	68fb      	ldr	r3, [r7, #12]
 801616a:	3301      	adds	r3, #1
 801616c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	781a      	ldrb	r2, [r3, #0]
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	3301      	adds	r3, #1
 801617a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801617c:	68f8      	ldr	r0, [r7, #12]
 801617e:	f7ff fa41 	bl	8015604 <SWAPBYTE>
 8016182:	4603      	mov	r3, r0
 8016184:	461a      	mov	r2, r3
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	3301      	adds	r3, #1
 801618e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	3301      	adds	r3, #1
 8016194:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8016196:	68f8      	ldr	r0, [r7, #12]
 8016198:	f7ff fa34 	bl	8015604 <SWAPBYTE>
 801619c:	4603      	mov	r3, r0
 801619e:	461a      	mov	r2, r3
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	3301      	adds	r3, #1
 80161a8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80161aa:	68fb      	ldr	r3, [r7, #12]
 80161ac:	3301      	adds	r3, #1
 80161ae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80161b0:	68f8      	ldr	r0, [r7, #12]
 80161b2:	f7ff fa27 	bl	8015604 <SWAPBYTE>
 80161b6:	4603      	mov	r3, r0
 80161b8:	461a      	mov	r2, r3
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	80da      	strh	r2, [r3, #6]
}
 80161be:	bf00      	nop
 80161c0:	3710      	adds	r7, #16
 80161c2:	46bd      	mov	sp, r7
 80161c4:	bd80      	pop	{r7, pc}

080161c6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80161c6:	b580      	push	{r7, lr}
 80161c8:	b082      	sub	sp, #8
 80161ca:	af00      	add	r7, sp, #0
 80161cc:	6078      	str	r0, [r7, #4]
 80161ce:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80161d0:	2180      	movs	r1, #128	; 0x80
 80161d2:	6878      	ldr	r0, [r7, #4]
 80161d4:	f000 fd4c 	bl	8016c70 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80161d8:	2100      	movs	r1, #0
 80161da:	6878      	ldr	r0, [r7, #4]
 80161dc:	f000 fd48 	bl	8016c70 <USBD_LL_StallEP>
}
 80161e0:	bf00      	nop
 80161e2:	3708      	adds	r7, #8
 80161e4:	46bd      	mov	sp, r7
 80161e6:	bd80      	pop	{r7, pc}

080161e8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80161e8:	b580      	push	{r7, lr}
 80161ea:	b086      	sub	sp, #24
 80161ec:	af00      	add	r7, sp, #0
 80161ee:	60f8      	str	r0, [r7, #12]
 80161f0:	60b9      	str	r1, [r7, #8]
 80161f2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80161f4:	2300      	movs	r3, #0
 80161f6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80161f8:	68fb      	ldr	r3, [r7, #12]
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d036      	beq.n	801626c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016202:	6938      	ldr	r0, [r7, #16]
 8016204:	f000 f836 	bl	8016274 <USBD_GetLen>
 8016208:	4603      	mov	r3, r0
 801620a:	3301      	adds	r3, #1
 801620c:	b29b      	uxth	r3, r3
 801620e:	005b      	lsls	r3, r3, #1
 8016210:	b29a      	uxth	r2, r3
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8016216:	7dfb      	ldrb	r3, [r7, #23]
 8016218:	68ba      	ldr	r2, [r7, #8]
 801621a:	4413      	add	r3, r2
 801621c:	687a      	ldr	r2, [r7, #4]
 801621e:	7812      	ldrb	r2, [r2, #0]
 8016220:	701a      	strb	r2, [r3, #0]
  idx++;
 8016222:	7dfb      	ldrb	r3, [r7, #23]
 8016224:	3301      	adds	r3, #1
 8016226:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016228:	7dfb      	ldrb	r3, [r7, #23]
 801622a:	68ba      	ldr	r2, [r7, #8]
 801622c:	4413      	add	r3, r2
 801622e:	2203      	movs	r2, #3
 8016230:	701a      	strb	r2, [r3, #0]
  idx++;
 8016232:	7dfb      	ldrb	r3, [r7, #23]
 8016234:	3301      	adds	r3, #1
 8016236:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016238:	e013      	b.n	8016262 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801623a:	7dfb      	ldrb	r3, [r7, #23]
 801623c:	68ba      	ldr	r2, [r7, #8]
 801623e:	4413      	add	r3, r2
 8016240:	693a      	ldr	r2, [r7, #16]
 8016242:	7812      	ldrb	r2, [r2, #0]
 8016244:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016246:	693b      	ldr	r3, [r7, #16]
 8016248:	3301      	adds	r3, #1
 801624a:	613b      	str	r3, [r7, #16]
    idx++;
 801624c:	7dfb      	ldrb	r3, [r7, #23]
 801624e:	3301      	adds	r3, #1
 8016250:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016252:	7dfb      	ldrb	r3, [r7, #23]
 8016254:	68ba      	ldr	r2, [r7, #8]
 8016256:	4413      	add	r3, r2
 8016258:	2200      	movs	r2, #0
 801625a:	701a      	strb	r2, [r3, #0]
    idx++;
 801625c:	7dfb      	ldrb	r3, [r7, #23]
 801625e:	3301      	adds	r3, #1
 8016260:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016262:	693b      	ldr	r3, [r7, #16]
 8016264:	781b      	ldrb	r3, [r3, #0]
 8016266:	2b00      	cmp	r3, #0
 8016268:	d1e7      	bne.n	801623a <USBD_GetString+0x52>
 801626a:	e000      	b.n	801626e <USBD_GetString+0x86>
    return;
 801626c:	bf00      	nop
  }
}
 801626e:	3718      	adds	r7, #24
 8016270:	46bd      	mov	sp, r7
 8016272:	bd80      	pop	{r7, pc}

08016274 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016274:	b480      	push	{r7}
 8016276:	b085      	sub	sp, #20
 8016278:	af00      	add	r7, sp, #0
 801627a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801627c:	2300      	movs	r3, #0
 801627e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016284:	e005      	b.n	8016292 <USBD_GetLen+0x1e>
  {
    len++;
 8016286:	7bfb      	ldrb	r3, [r7, #15]
 8016288:	3301      	adds	r3, #1
 801628a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801628c:	68bb      	ldr	r3, [r7, #8]
 801628e:	3301      	adds	r3, #1
 8016290:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016292:	68bb      	ldr	r3, [r7, #8]
 8016294:	781b      	ldrb	r3, [r3, #0]
 8016296:	2b00      	cmp	r3, #0
 8016298:	d1f5      	bne.n	8016286 <USBD_GetLen+0x12>
  }

  return len;
 801629a:	7bfb      	ldrb	r3, [r7, #15]
}
 801629c:	4618      	mov	r0, r3
 801629e:	3714      	adds	r7, #20
 80162a0:	46bd      	mov	sp, r7
 80162a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162a6:	4770      	bx	lr

080162a8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80162a8:	b580      	push	{r7, lr}
 80162aa:	b084      	sub	sp, #16
 80162ac:	af00      	add	r7, sp, #0
 80162ae:	60f8      	str	r0, [r7, #12]
 80162b0:	60b9      	str	r1, [r7, #8]
 80162b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80162b4:	68fb      	ldr	r3, [r7, #12]
 80162b6:	2202      	movs	r2, #2
 80162b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	687a      	ldr	r2, [r7, #4]
 80162c0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80162c2:	68fb      	ldr	r3, [r7, #12]
 80162c4:	687a      	ldr	r2, [r7, #4]
 80162c6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	68ba      	ldr	r2, [r7, #8]
 80162cc:	2100      	movs	r1, #0
 80162ce:	68f8      	ldr	r0, [r7, #12]
 80162d0:	f000 fd57 	bl	8016d82 <USBD_LL_Transmit>

  return USBD_OK;
 80162d4:	2300      	movs	r3, #0
}
 80162d6:	4618      	mov	r0, r3
 80162d8:	3710      	adds	r7, #16
 80162da:	46bd      	mov	sp, r7
 80162dc:	bd80      	pop	{r7, pc}

080162de <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80162de:	b580      	push	{r7, lr}
 80162e0:	b084      	sub	sp, #16
 80162e2:	af00      	add	r7, sp, #0
 80162e4:	60f8      	str	r0, [r7, #12]
 80162e6:	60b9      	str	r1, [r7, #8]
 80162e8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	68ba      	ldr	r2, [r7, #8]
 80162ee:	2100      	movs	r1, #0
 80162f0:	68f8      	ldr	r0, [r7, #12]
 80162f2:	f000 fd46 	bl	8016d82 <USBD_LL_Transmit>

  return USBD_OK;
 80162f6:	2300      	movs	r3, #0
}
 80162f8:	4618      	mov	r0, r3
 80162fa:	3710      	adds	r7, #16
 80162fc:	46bd      	mov	sp, r7
 80162fe:	bd80      	pop	{r7, pc}

08016300 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8016300:	b580      	push	{r7, lr}
 8016302:	b084      	sub	sp, #16
 8016304:	af00      	add	r7, sp, #0
 8016306:	60f8      	str	r0, [r7, #12]
 8016308:	60b9      	str	r1, [r7, #8]
 801630a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	2203      	movs	r2, #3
 8016310:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	687a      	ldr	r2, [r7, #4]
 8016318:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	687a      	ldr	r2, [r7, #4]
 8016320:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	68ba      	ldr	r2, [r7, #8]
 8016328:	2100      	movs	r1, #0
 801632a:	68f8      	ldr	r0, [r7, #12]
 801632c:	f000 fd4a 	bl	8016dc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016330:	2300      	movs	r3, #0
}
 8016332:	4618      	mov	r0, r3
 8016334:	3710      	adds	r7, #16
 8016336:	46bd      	mov	sp, r7
 8016338:	bd80      	pop	{r7, pc}

0801633a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801633a:	b580      	push	{r7, lr}
 801633c:	b084      	sub	sp, #16
 801633e:	af00      	add	r7, sp, #0
 8016340:	60f8      	str	r0, [r7, #12]
 8016342:	60b9      	str	r1, [r7, #8]
 8016344:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	68ba      	ldr	r2, [r7, #8]
 801634a:	2100      	movs	r1, #0
 801634c:	68f8      	ldr	r0, [r7, #12]
 801634e:	f000 fd39 	bl	8016dc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016352:	2300      	movs	r3, #0
}
 8016354:	4618      	mov	r0, r3
 8016356:	3710      	adds	r7, #16
 8016358:	46bd      	mov	sp, r7
 801635a:	bd80      	pop	{r7, pc}

0801635c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801635c:	b580      	push	{r7, lr}
 801635e:	b082      	sub	sp, #8
 8016360:	af00      	add	r7, sp, #0
 8016362:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	2204      	movs	r2, #4
 8016368:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801636c:	2300      	movs	r3, #0
 801636e:	2200      	movs	r2, #0
 8016370:	2100      	movs	r1, #0
 8016372:	6878      	ldr	r0, [r7, #4]
 8016374:	f000 fd05 	bl	8016d82 <USBD_LL_Transmit>

  return USBD_OK;
 8016378:	2300      	movs	r3, #0
}
 801637a:	4618      	mov	r0, r3
 801637c:	3708      	adds	r7, #8
 801637e:	46bd      	mov	sp, r7
 8016380:	bd80      	pop	{r7, pc}

08016382 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016382:	b580      	push	{r7, lr}
 8016384:	b082      	sub	sp, #8
 8016386:	af00      	add	r7, sp, #0
 8016388:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	2205      	movs	r2, #5
 801638e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016392:	2300      	movs	r3, #0
 8016394:	2200      	movs	r2, #0
 8016396:	2100      	movs	r1, #0
 8016398:	6878      	ldr	r0, [r7, #4]
 801639a:	f000 fd13 	bl	8016dc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801639e:	2300      	movs	r3, #0
}
 80163a0:	4618      	mov	r0, r3
 80163a2:	3708      	adds	r7, #8
 80163a4:	46bd      	mov	sp, r7
 80163a6:	bd80      	pop	{r7, pc}

080163a8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80163a8:	b480      	push	{r7}
 80163aa:	b087      	sub	sp, #28
 80163ac:	af00      	add	r7, sp, #0
 80163ae:	60f8      	str	r0, [r7, #12]
 80163b0:	60b9      	str	r1, [r7, #8]
 80163b2:	4613      	mov	r3, r2
 80163b4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80163b6:	2301      	movs	r3, #1
 80163b8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80163ba:	2300      	movs	r3, #0
 80163bc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80163be:	4b1f      	ldr	r3, [pc, #124]	; (801643c <FATFS_LinkDriverEx+0x94>)
 80163c0:	7a5b      	ldrb	r3, [r3, #9]
 80163c2:	b2db      	uxtb	r3, r3
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d131      	bne.n	801642c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80163c8:	4b1c      	ldr	r3, [pc, #112]	; (801643c <FATFS_LinkDriverEx+0x94>)
 80163ca:	7a5b      	ldrb	r3, [r3, #9]
 80163cc:	b2db      	uxtb	r3, r3
 80163ce:	461a      	mov	r2, r3
 80163d0:	4b1a      	ldr	r3, [pc, #104]	; (801643c <FATFS_LinkDriverEx+0x94>)
 80163d2:	2100      	movs	r1, #0
 80163d4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80163d6:	4b19      	ldr	r3, [pc, #100]	; (801643c <FATFS_LinkDriverEx+0x94>)
 80163d8:	7a5b      	ldrb	r3, [r3, #9]
 80163da:	b2db      	uxtb	r3, r3
 80163dc:	4a17      	ldr	r2, [pc, #92]	; (801643c <FATFS_LinkDriverEx+0x94>)
 80163de:	009b      	lsls	r3, r3, #2
 80163e0:	4413      	add	r3, r2
 80163e2:	68fa      	ldr	r2, [r7, #12]
 80163e4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80163e6:	4b15      	ldr	r3, [pc, #84]	; (801643c <FATFS_LinkDriverEx+0x94>)
 80163e8:	7a5b      	ldrb	r3, [r3, #9]
 80163ea:	b2db      	uxtb	r3, r3
 80163ec:	461a      	mov	r2, r3
 80163ee:	4b13      	ldr	r3, [pc, #76]	; (801643c <FATFS_LinkDriverEx+0x94>)
 80163f0:	4413      	add	r3, r2
 80163f2:	79fa      	ldrb	r2, [r7, #7]
 80163f4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80163f6:	4b11      	ldr	r3, [pc, #68]	; (801643c <FATFS_LinkDriverEx+0x94>)
 80163f8:	7a5b      	ldrb	r3, [r3, #9]
 80163fa:	b2db      	uxtb	r3, r3
 80163fc:	1c5a      	adds	r2, r3, #1
 80163fe:	b2d1      	uxtb	r1, r2
 8016400:	4a0e      	ldr	r2, [pc, #56]	; (801643c <FATFS_LinkDriverEx+0x94>)
 8016402:	7251      	strb	r1, [r2, #9]
 8016404:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8016406:	7dbb      	ldrb	r3, [r7, #22]
 8016408:	3330      	adds	r3, #48	; 0x30
 801640a:	b2da      	uxtb	r2, r3
 801640c:	68bb      	ldr	r3, [r7, #8]
 801640e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016410:	68bb      	ldr	r3, [r7, #8]
 8016412:	3301      	adds	r3, #1
 8016414:	223a      	movs	r2, #58	; 0x3a
 8016416:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016418:	68bb      	ldr	r3, [r7, #8]
 801641a:	3302      	adds	r3, #2
 801641c:	222f      	movs	r2, #47	; 0x2f
 801641e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016420:	68bb      	ldr	r3, [r7, #8]
 8016422:	3303      	adds	r3, #3
 8016424:	2200      	movs	r2, #0
 8016426:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8016428:	2300      	movs	r3, #0
 801642a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801642c:	7dfb      	ldrb	r3, [r7, #23]
}
 801642e:	4618      	mov	r0, r3
 8016430:	371c      	adds	r7, #28
 8016432:	46bd      	mov	sp, r7
 8016434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016438:	4770      	bx	lr
 801643a:	bf00      	nop
 801643c:	2400159c 	.word	0x2400159c

08016440 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016440:	b580      	push	{r7, lr}
 8016442:	b082      	sub	sp, #8
 8016444:	af00      	add	r7, sp, #0
 8016446:	6078      	str	r0, [r7, #4]
 8016448:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801644a:	2200      	movs	r2, #0
 801644c:	6839      	ldr	r1, [r7, #0]
 801644e:	6878      	ldr	r0, [r7, #4]
 8016450:	f7ff ffaa 	bl	80163a8 <FATFS_LinkDriverEx>
 8016454:	4603      	mov	r3, r0
}
 8016456:	4618      	mov	r0, r3
 8016458:	3708      	adds	r7, #8
 801645a:	46bd      	mov	sp, r7
 801645c:	bd80      	pop	{r7, pc}
	...

08016460 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016460:	b580      	push	{r7, lr}
 8016462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8016464:	2201      	movs	r2, #1
 8016466:	4913      	ldr	r1, [pc, #76]	; (80164b4 <MX_USB_DEVICE_Init+0x54>)
 8016468:	4813      	ldr	r0, [pc, #76]	; (80164b8 <MX_USB_DEVICE_Init+0x58>)
 801646a:	f7fe fca5 	bl	8014db8 <USBD_Init>
 801646e:	4603      	mov	r3, r0
 8016470:	2b00      	cmp	r3, #0
 8016472:	d001      	beq.n	8016478 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016474:	f7ec fa2c 	bl	80028d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8016478:	4910      	ldr	r1, [pc, #64]	; (80164bc <MX_USB_DEVICE_Init+0x5c>)
 801647a:	480f      	ldr	r0, [pc, #60]	; (80164b8 <MX_USB_DEVICE_Init+0x58>)
 801647c:	f7fe fccc 	bl	8014e18 <USBD_RegisterClass>
 8016480:	4603      	mov	r3, r0
 8016482:	2b00      	cmp	r3, #0
 8016484:	d001      	beq.n	801648a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016486:	f7ec fa23 	bl	80028d0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 801648a:	490d      	ldr	r1, [pc, #52]	; (80164c0 <MX_USB_DEVICE_Init+0x60>)
 801648c:	480a      	ldr	r0, [pc, #40]	; (80164b8 <MX_USB_DEVICE_Init+0x58>)
 801648e:	f7fe fbc3 	bl	8014c18 <USBD_CDC_RegisterInterface>
 8016492:	4603      	mov	r3, r0
 8016494:	2b00      	cmp	r3, #0
 8016496:	d001      	beq.n	801649c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016498:	f7ec fa1a 	bl	80028d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 801649c:	4806      	ldr	r0, [pc, #24]	; (80164b8 <MX_USB_DEVICE_Init+0x58>)
 801649e:	f7fe fcf1 	bl	8014e84 <USBD_Start>
 80164a2:	4603      	mov	r3, r0
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d001      	beq.n	80164ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80164a8:	f7ec fa12 	bl	80028d0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80164ac:	f7f3 f960 	bl	8009770 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80164b0:	bf00      	nop
 80164b2:	bd80      	pop	{r7, pc}
 80164b4:	240000b0 	.word	0x240000b0
 80164b8:	240015a8 	.word	0x240015a8
 80164bc:	2400001c 	.word	0x2400001c
 80164c0:	2400009c 	.word	0x2400009c

080164c4 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80164c4:	b580      	push	{r7, lr}
 80164c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80164c8:	2200      	movs	r2, #0
 80164ca:	4905      	ldr	r1, [pc, #20]	; (80164e0 <CDC_Init_HS+0x1c>)
 80164cc:	4805      	ldr	r0, [pc, #20]	; (80164e4 <CDC_Init_HS+0x20>)
 80164ce:	f7fe fbbd 	bl	8014c4c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80164d2:	4905      	ldr	r1, [pc, #20]	; (80164e8 <CDC_Init_HS+0x24>)
 80164d4:	4803      	ldr	r0, [pc, #12]	; (80164e4 <CDC_Init_HS+0x20>)
 80164d6:	f7fe fbdb 	bl	8014c90 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80164da:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80164dc:	4618      	mov	r0, r3
 80164de:	bd80      	pop	{r7, pc}
 80164e0:	24002084 	.word	0x24002084
 80164e4:	240015a8 	.word	0x240015a8
 80164e8:	24001884 	.word	0x24001884

080164ec <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80164ec:	b480      	push	{r7}
 80164ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 80164f0:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80164f2:	4618      	mov	r0, r3
 80164f4:	46bd      	mov	sp, r7
 80164f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164fa:	4770      	bx	lr

080164fc <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80164fc:	b480      	push	{r7}
 80164fe:	b083      	sub	sp, #12
 8016500:	af00      	add	r7, sp, #0
 8016502:	4603      	mov	r3, r0
 8016504:	6039      	str	r1, [r7, #0]
 8016506:	71fb      	strb	r3, [r7, #7]
 8016508:	4613      	mov	r3, r2
 801650a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 801650c:	79fb      	ldrb	r3, [r7, #7]
 801650e:	2b23      	cmp	r3, #35	; 0x23
 8016510:	d84a      	bhi.n	80165a8 <CDC_Control_HS+0xac>
 8016512:	a201      	add	r2, pc, #4	; (adr r2, 8016518 <CDC_Control_HS+0x1c>)
 8016514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016518:	080165a9 	.word	0x080165a9
 801651c:	080165a9 	.word	0x080165a9
 8016520:	080165a9 	.word	0x080165a9
 8016524:	080165a9 	.word	0x080165a9
 8016528:	080165a9 	.word	0x080165a9
 801652c:	080165a9 	.word	0x080165a9
 8016530:	080165a9 	.word	0x080165a9
 8016534:	080165a9 	.word	0x080165a9
 8016538:	080165a9 	.word	0x080165a9
 801653c:	080165a9 	.word	0x080165a9
 8016540:	080165a9 	.word	0x080165a9
 8016544:	080165a9 	.word	0x080165a9
 8016548:	080165a9 	.word	0x080165a9
 801654c:	080165a9 	.word	0x080165a9
 8016550:	080165a9 	.word	0x080165a9
 8016554:	080165a9 	.word	0x080165a9
 8016558:	080165a9 	.word	0x080165a9
 801655c:	080165a9 	.word	0x080165a9
 8016560:	080165a9 	.word	0x080165a9
 8016564:	080165a9 	.word	0x080165a9
 8016568:	080165a9 	.word	0x080165a9
 801656c:	080165a9 	.word	0x080165a9
 8016570:	080165a9 	.word	0x080165a9
 8016574:	080165a9 	.word	0x080165a9
 8016578:	080165a9 	.word	0x080165a9
 801657c:	080165a9 	.word	0x080165a9
 8016580:	080165a9 	.word	0x080165a9
 8016584:	080165a9 	.word	0x080165a9
 8016588:	080165a9 	.word	0x080165a9
 801658c:	080165a9 	.word	0x080165a9
 8016590:	080165a9 	.word	0x080165a9
 8016594:	080165a9 	.word	0x080165a9
 8016598:	080165a9 	.word	0x080165a9
 801659c:	080165a9 	.word	0x080165a9
 80165a0:	080165a9 	.word	0x080165a9
 80165a4:	080165a9 	.word	0x080165a9
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80165a8:	bf00      	nop
  }

  return (USBD_OK);
 80165aa:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80165ac:	4618      	mov	r0, r3
 80165ae:	370c      	adds	r7, #12
 80165b0:	46bd      	mov	sp, r7
 80165b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165b6:	4770      	bx	lr

080165b8 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80165b8:	b580      	push	{r7, lr}
 80165ba:	b084      	sub	sp, #16
 80165bc:	af00      	add	r7, sp, #0
 80165be:	6078      	str	r0, [r7, #4]
 80165c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80165c2:	6879      	ldr	r1, [r7, #4]
 80165c4:	480e      	ldr	r0, [pc, #56]	; (8016600 <CDC_Receive_HS+0x48>)
 80165c6:	f7fe fb63 	bl	8014c90 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80165ca:	480d      	ldr	r0, [pc, #52]	; (8016600 <CDC_Receive_HS+0x48>)
 80165cc:	f7fe fbbe 	bl	8014d4c <USBD_CDC_ReceivePacket>

  extern uint8_t usbDataBuffer[usbBufferLen];
  extern uint32_t usbBytesReady;

  uint32_t cpyLen = *Len;
 80165d0:	683b      	ldr	r3, [r7, #0]
 80165d2:	681b      	ldr	r3, [r3, #0]
 80165d4:	60fb      	str	r3, [r7, #12]
  memcpy(usbDataBuffer + usbBytesReady, Buf, cpyLen);
 80165d6:	4b0b      	ldr	r3, [pc, #44]	; (8016604 <CDC_Receive_HS+0x4c>)
 80165d8:	681b      	ldr	r3, [r3, #0]
 80165da:	4a0b      	ldr	r2, [pc, #44]	; (8016608 <CDC_Receive_HS+0x50>)
 80165dc:	4413      	add	r3, r2
 80165de:	68fa      	ldr	r2, [r7, #12]
 80165e0:	6879      	ldr	r1, [r7, #4]
 80165e2:	4618      	mov	r0, r3
 80165e4:	f000 fcf0 	bl	8016fc8 <memcpy>
  usbBytesReady += cpyLen;
 80165e8:	4b06      	ldr	r3, [pc, #24]	; (8016604 <CDC_Receive_HS+0x4c>)
 80165ea:	681a      	ldr	r2, [r3, #0]
 80165ec:	68fb      	ldr	r3, [r7, #12]
 80165ee:	4413      	add	r3, r2
 80165f0:	4a04      	ldr	r2, [pc, #16]	; (8016604 <CDC_Receive_HS+0x4c>)
 80165f2:	6013      	str	r3, [r2, #0]
  
  return (USBD_OK);
 80165f4:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80165f6:	4618      	mov	r0, r3
 80165f8:	3710      	adds	r7, #16
 80165fa:	46bd      	mov	sp, r7
 80165fc:	bd80      	pop	{r7, pc}
 80165fe:	bf00      	nop
 8016600:	240015a8 	.word	0x240015a8
 8016604:	2400026c 	.word	0x2400026c
 8016608:	2400016c 	.word	0x2400016c

0801660c <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 801660c:	b580      	push	{r7, lr}
 801660e:	b084      	sub	sp, #16
 8016610:	af00      	add	r7, sp, #0
 8016612:	6078      	str	r0, [r7, #4]
 8016614:	460b      	mov	r3, r1
 8016616:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8016618:	2300      	movs	r3, #0
 801661a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 801661c:	4b0d      	ldr	r3, [pc, #52]	; (8016654 <CDC_Transmit_HS+0x48>)
 801661e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016622:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016624:	68bb      	ldr	r3, [r7, #8]
 8016626:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801662a:	2b00      	cmp	r3, #0
 801662c:	d001      	beq.n	8016632 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 801662e:	2301      	movs	r3, #1
 8016630:	e00b      	b.n	801664a <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8016632:	887b      	ldrh	r3, [r7, #2]
 8016634:	461a      	mov	r2, r3
 8016636:	6879      	ldr	r1, [r7, #4]
 8016638:	4806      	ldr	r0, [pc, #24]	; (8016654 <CDC_Transmit_HS+0x48>)
 801663a:	f7fe fb07 	bl	8014c4c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 801663e:	4805      	ldr	r0, [pc, #20]	; (8016654 <CDC_Transmit_HS+0x48>)
 8016640:	f7fe fb44 	bl	8014ccc <USBD_CDC_TransmitPacket>
 8016644:	4603      	mov	r3, r0
 8016646:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8016648:	7bfb      	ldrb	r3, [r7, #15]
}
 801664a:	4618      	mov	r0, r3
 801664c:	3710      	adds	r7, #16
 801664e:	46bd      	mov	sp, r7
 8016650:	bd80      	pop	{r7, pc}
 8016652:	bf00      	nop
 8016654:	240015a8 	.word	0x240015a8

08016658 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016658:	b480      	push	{r7}
 801665a:	b087      	sub	sp, #28
 801665c:	af00      	add	r7, sp, #0
 801665e:	60f8      	str	r0, [r7, #12]
 8016660:	60b9      	str	r1, [r7, #8]
 8016662:	4613      	mov	r3, r2
 8016664:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8016666:	2300      	movs	r3, #0
 8016668:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801666a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801666e:	4618      	mov	r0, r3
 8016670:	371c      	adds	r7, #28
 8016672:	46bd      	mov	sp, r7
 8016674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016678:	4770      	bx	lr
	...

0801667c <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801667c:	b480      	push	{r7}
 801667e:	b083      	sub	sp, #12
 8016680:	af00      	add	r7, sp, #0
 8016682:	4603      	mov	r3, r0
 8016684:	6039      	str	r1, [r7, #0]
 8016686:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8016688:	683b      	ldr	r3, [r7, #0]
 801668a:	2212      	movs	r2, #18
 801668c:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 801668e:	4b03      	ldr	r3, [pc, #12]	; (801669c <USBD_HS_DeviceDescriptor+0x20>)
}
 8016690:	4618      	mov	r0, r3
 8016692:	370c      	adds	r7, #12
 8016694:	46bd      	mov	sp, r7
 8016696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801669a:	4770      	bx	lr
 801669c:	240000cc 	.word	0x240000cc

080166a0 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80166a0:	b480      	push	{r7}
 80166a2:	b083      	sub	sp, #12
 80166a4:	af00      	add	r7, sp, #0
 80166a6:	4603      	mov	r3, r0
 80166a8:	6039      	str	r1, [r7, #0]
 80166aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80166ac:	683b      	ldr	r3, [r7, #0]
 80166ae:	2204      	movs	r2, #4
 80166b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80166b2:	4b03      	ldr	r3, [pc, #12]	; (80166c0 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80166b4:	4618      	mov	r0, r3
 80166b6:	370c      	adds	r7, #12
 80166b8:	46bd      	mov	sp, r7
 80166ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166be:	4770      	bx	lr
 80166c0:	240000e0 	.word	0x240000e0

080166c4 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80166c4:	b580      	push	{r7, lr}
 80166c6:	b082      	sub	sp, #8
 80166c8:	af00      	add	r7, sp, #0
 80166ca:	4603      	mov	r3, r0
 80166cc:	6039      	str	r1, [r7, #0]
 80166ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80166d0:	79fb      	ldrb	r3, [r7, #7]
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d105      	bne.n	80166e2 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80166d6:	683a      	ldr	r2, [r7, #0]
 80166d8:	4907      	ldr	r1, [pc, #28]	; (80166f8 <USBD_HS_ProductStrDescriptor+0x34>)
 80166da:	4808      	ldr	r0, [pc, #32]	; (80166fc <USBD_HS_ProductStrDescriptor+0x38>)
 80166dc:	f7ff fd84 	bl	80161e8 <USBD_GetString>
 80166e0:	e004      	b.n	80166ec <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80166e2:	683a      	ldr	r2, [r7, #0]
 80166e4:	4904      	ldr	r1, [pc, #16]	; (80166f8 <USBD_HS_ProductStrDescriptor+0x34>)
 80166e6:	4805      	ldr	r0, [pc, #20]	; (80166fc <USBD_HS_ProductStrDescriptor+0x38>)
 80166e8:	f7ff fd7e 	bl	80161e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80166ec:	4b02      	ldr	r3, [pc, #8]	; (80166f8 <USBD_HS_ProductStrDescriptor+0x34>)
}
 80166ee:	4618      	mov	r0, r3
 80166f0:	3708      	adds	r7, #8
 80166f2:	46bd      	mov	sp, r7
 80166f4:	bd80      	pop	{r7, pc}
 80166f6:	bf00      	nop
 80166f8:	24002884 	.word	0x24002884
 80166fc:	080182e8 	.word	0x080182e8

08016700 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016700:	b580      	push	{r7, lr}
 8016702:	b082      	sub	sp, #8
 8016704:	af00      	add	r7, sp, #0
 8016706:	4603      	mov	r3, r0
 8016708:	6039      	str	r1, [r7, #0]
 801670a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801670c:	683a      	ldr	r2, [r7, #0]
 801670e:	4904      	ldr	r1, [pc, #16]	; (8016720 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8016710:	4804      	ldr	r0, [pc, #16]	; (8016724 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8016712:	f7ff fd69 	bl	80161e8 <USBD_GetString>
  return USBD_StrDesc;
 8016716:	4b02      	ldr	r3, [pc, #8]	; (8016720 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8016718:	4618      	mov	r0, r3
 801671a:	3708      	adds	r7, #8
 801671c:	46bd      	mov	sp, r7
 801671e:	bd80      	pop	{r7, pc}
 8016720:	24002884 	.word	0x24002884
 8016724:	08018304 	.word	0x08018304

08016728 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016728:	b580      	push	{r7, lr}
 801672a:	b082      	sub	sp, #8
 801672c:	af00      	add	r7, sp, #0
 801672e:	4603      	mov	r3, r0
 8016730:	6039      	str	r1, [r7, #0]
 8016732:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016734:	683b      	ldr	r3, [r7, #0]
 8016736:	221a      	movs	r2, #26
 8016738:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801673a:	f000 f843 	bl	80167c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801673e:	4b02      	ldr	r3, [pc, #8]	; (8016748 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8016740:	4618      	mov	r0, r3
 8016742:	3708      	adds	r7, #8
 8016744:	46bd      	mov	sp, r7
 8016746:	bd80      	pop	{r7, pc}
 8016748:	240000e4 	.word	0x240000e4

0801674c <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801674c:	b580      	push	{r7, lr}
 801674e:	b082      	sub	sp, #8
 8016750:	af00      	add	r7, sp, #0
 8016752:	4603      	mov	r3, r0
 8016754:	6039      	str	r1, [r7, #0]
 8016756:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016758:	79fb      	ldrb	r3, [r7, #7]
 801675a:	2b00      	cmp	r3, #0
 801675c:	d105      	bne.n	801676a <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801675e:	683a      	ldr	r2, [r7, #0]
 8016760:	4907      	ldr	r1, [pc, #28]	; (8016780 <USBD_HS_ConfigStrDescriptor+0x34>)
 8016762:	4808      	ldr	r0, [pc, #32]	; (8016784 <USBD_HS_ConfigStrDescriptor+0x38>)
 8016764:	f7ff fd40 	bl	80161e8 <USBD_GetString>
 8016768:	e004      	b.n	8016774 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801676a:	683a      	ldr	r2, [r7, #0]
 801676c:	4904      	ldr	r1, [pc, #16]	; (8016780 <USBD_HS_ConfigStrDescriptor+0x34>)
 801676e:	4805      	ldr	r0, [pc, #20]	; (8016784 <USBD_HS_ConfigStrDescriptor+0x38>)
 8016770:	f7ff fd3a 	bl	80161e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016774:	4b02      	ldr	r3, [pc, #8]	; (8016780 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8016776:	4618      	mov	r0, r3
 8016778:	3708      	adds	r7, #8
 801677a:	46bd      	mov	sp, r7
 801677c:	bd80      	pop	{r7, pc}
 801677e:	bf00      	nop
 8016780:	24002884 	.word	0x24002884
 8016784:	08018308 	.word	0x08018308

08016788 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016788:	b580      	push	{r7, lr}
 801678a:	b082      	sub	sp, #8
 801678c:	af00      	add	r7, sp, #0
 801678e:	4603      	mov	r3, r0
 8016790:	6039      	str	r1, [r7, #0]
 8016792:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016794:	79fb      	ldrb	r3, [r7, #7]
 8016796:	2b00      	cmp	r3, #0
 8016798:	d105      	bne.n	80167a6 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801679a:	683a      	ldr	r2, [r7, #0]
 801679c:	4907      	ldr	r1, [pc, #28]	; (80167bc <USBD_HS_InterfaceStrDescriptor+0x34>)
 801679e:	4808      	ldr	r0, [pc, #32]	; (80167c0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80167a0:	f7ff fd22 	bl	80161e8 <USBD_GetString>
 80167a4:	e004      	b.n	80167b0 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80167a6:	683a      	ldr	r2, [r7, #0]
 80167a8:	4904      	ldr	r1, [pc, #16]	; (80167bc <USBD_HS_InterfaceStrDescriptor+0x34>)
 80167aa:	4805      	ldr	r0, [pc, #20]	; (80167c0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80167ac:	f7ff fd1c 	bl	80161e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80167b0:	4b02      	ldr	r3, [pc, #8]	; (80167bc <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80167b2:	4618      	mov	r0, r3
 80167b4:	3708      	adds	r7, #8
 80167b6:	46bd      	mov	sp, r7
 80167b8:	bd80      	pop	{r7, pc}
 80167ba:	bf00      	nop
 80167bc:	24002884 	.word	0x24002884
 80167c0:	08018314 	.word	0x08018314

080167c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80167c4:	b580      	push	{r7, lr}
 80167c6:	b084      	sub	sp, #16
 80167c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80167ca:	4b0f      	ldr	r3, [pc, #60]	; (8016808 <Get_SerialNum+0x44>)
 80167cc:	681b      	ldr	r3, [r3, #0]
 80167ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80167d0:	4b0e      	ldr	r3, [pc, #56]	; (801680c <Get_SerialNum+0x48>)
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80167d6:	4b0e      	ldr	r3, [pc, #56]	; (8016810 <Get_SerialNum+0x4c>)
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80167dc:	68fa      	ldr	r2, [r7, #12]
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	4413      	add	r3, r2
 80167e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80167e4:	68fb      	ldr	r3, [r7, #12]
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d009      	beq.n	80167fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80167ea:	2208      	movs	r2, #8
 80167ec:	4909      	ldr	r1, [pc, #36]	; (8016814 <Get_SerialNum+0x50>)
 80167ee:	68f8      	ldr	r0, [r7, #12]
 80167f0:	f000 f814 	bl	801681c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80167f4:	2204      	movs	r2, #4
 80167f6:	4908      	ldr	r1, [pc, #32]	; (8016818 <Get_SerialNum+0x54>)
 80167f8:	68b8      	ldr	r0, [r7, #8]
 80167fa:	f000 f80f 	bl	801681c <IntToUnicode>
  }
}
 80167fe:	bf00      	nop
 8016800:	3710      	adds	r7, #16
 8016802:	46bd      	mov	sp, r7
 8016804:	bd80      	pop	{r7, pc}
 8016806:	bf00      	nop
 8016808:	1ff1e800 	.word	0x1ff1e800
 801680c:	1ff1e804 	.word	0x1ff1e804
 8016810:	1ff1e808 	.word	0x1ff1e808
 8016814:	240000e6 	.word	0x240000e6
 8016818:	240000f6 	.word	0x240000f6

0801681c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801681c:	b480      	push	{r7}
 801681e:	b087      	sub	sp, #28
 8016820:	af00      	add	r7, sp, #0
 8016822:	60f8      	str	r0, [r7, #12]
 8016824:	60b9      	str	r1, [r7, #8]
 8016826:	4613      	mov	r3, r2
 8016828:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801682a:	2300      	movs	r3, #0
 801682c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801682e:	2300      	movs	r3, #0
 8016830:	75fb      	strb	r3, [r7, #23]
 8016832:	e027      	b.n	8016884 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016834:	68fb      	ldr	r3, [r7, #12]
 8016836:	0f1b      	lsrs	r3, r3, #28
 8016838:	2b09      	cmp	r3, #9
 801683a:	d80b      	bhi.n	8016854 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801683c:	68fb      	ldr	r3, [r7, #12]
 801683e:	0f1b      	lsrs	r3, r3, #28
 8016840:	b2da      	uxtb	r2, r3
 8016842:	7dfb      	ldrb	r3, [r7, #23]
 8016844:	005b      	lsls	r3, r3, #1
 8016846:	4619      	mov	r1, r3
 8016848:	68bb      	ldr	r3, [r7, #8]
 801684a:	440b      	add	r3, r1
 801684c:	3230      	adds	r2, #48	; 0x30
 801684e:	b2d2      	uxtb	r2, r2
 8016850:	701a      	strb	r2, [r3, #0]
 8016852:	e00a      	b.n	801686a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016854:	68fb      	ldr	r3, [r7, #12]
 8016856:	0f1b      	lsrs	r3, r3, #28
 8016858:	b2da      	uxtb	r2, r3
 801685a:	7dfb      	ldrb	r3, [r7, #23]
 801685c:	005b      	lsls	r3, r3, #1
 801685e:	4619      	mov	r1, r3
 8016860:	68bb      	ldr	r3, [r7, #8]
 8016862:	440b      	add	r3, r1
 8016864:	3237      	adds	r2, #55	; 0x37
 8016866:	b2d2      	uxtb	r2, r2
 8016868:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801686a:	68fb      	ldr	r3, [r7, #12]
 801686c:	011b      	lsls	r3, r3, #4
 801686e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016870:	7dfb      	ldrb	r3, [r7, #23]
 8016872:	005b      	lsls	r3, r3, #1
 8016874:	3301      	adds	r3, #1
 8016876:	68ba      	ldr	r2, [r7, #8]
 8016878:	4413      	add	r3, r2
 801687a:	2200      	movs	r2, #0
 801687c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801687e:	7dfb      	ldrb	r3, [r7, #23]
 8016880:	3301      	adds	r3, #1
 8016882:	75fb      	strb	r3, [r7, #23]
 8016884:	7dfa      	ldrb	r2, [r7, #23]
 8016886:	79fb      	ldrb	r3, [r7, #7]
 8016888:	429a      	cmp	r2, r3
 801688a:	d3d3      	bcc.n	8016834 <IntToUnicode+0x18>
  }
}
 801688c:	bf00      	nop
 801688e:	bf00      	nop
 8016890:	371c      	adds	r7, #28
 8016892:	46bd      	mov	sp, r7
 8016894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016898:	4770      	bx	lr
	...

0801689c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801689c:	b580      	push	{r7, lr}
 801689e:	b0b2      	sub	sp, #200	; 0xc8
 80168a0:	af00      	add	r7, sp, #0
 80168a2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80168a4:	f107 0310 	add.w	r3, r7, #16
 80168a8:	22b8      	movs	r2, #184	; 0xb8
 80168aa:	2100      	movs	r1, #0
 80168ac:	4618      	mov	r0, r3
 80168ae:	f000 fb4f 	bl	8016f50 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	681b      	ldr	r3, [r3, #0]
 80168b6:	4a1a      	ldr	r2, [pc, #104]	; (8016920 <HAL_PCD_MspInit+0x84>)
 80168b8:	4293      	cmp	r3, r2
 80168ba:	d12c      	bne.n	8016916 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80168bc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80168c0:	f04f 0300 	mov.w	r3, #0
 80168c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80168c8:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80168cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80168d0:	f107 0310 	add.w	r3, r7, #16
 80168d4:	4618      	mov	r0, r3
 80168d6:	f7f3 ff2b 	bl	800a730 <HAL_RCCEx_PeriphCLKConfig>
 80168da:	4603      	mov	r3, r0
 80168dc:	2b00      	cmp	r3, #0
 80168de:	d001      	beq.n	80168e4 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 80168e0:	f7eb fff6 	bl	80028d0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80168e4:	f7f2 ff44 	bl	8009770 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80168e8:	4b0e      	ldr	r3, [pc, #56]	; (8016924 <HAL_PCD_MspInit+0x88>)
 80168ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80168ee:	4a0d      	ldr	r2, [pc, #52]	; (8016924 <HAL_PCD_MspInit+0x88>)
 80168f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80168f4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80168f8:	4b0a      	ldr	r3, [pc, #40]	; (8016924 <HAL_PCD_MspInit+0x88>)
 80168fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80168fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016902:	60fb      	str	r3, [r7, #12]
 8016904:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8016906:	2200      	movs	r2, #0
 8016908:	2100      	movs	r1, #0
 801690a:	204d      	movs	r0, #77	; 0x4d
 801690c:	f7ee fccf 	bl	80052ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8016910:	204d      	movs	r0, #77	; 0x4d
 8016912:	f7ee fce6 	bl	80052e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8016916:	bf00      	nop
 8016918:	37c8      	adds	r7, #200	; 0xc8
 801691a:	46bd      	mov	sp, r7
 801691c:	bd80      	pop	{r7, pc}
 801691e:	bf00      	nop
 8016920:	40040000 	.word	0x40040000
 8016924:	58024400 	.word	0x58024400

08016928 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016928:	b580      	push	{r7, lr}
 801692a:	b082      	sub	sp, #8
 801692c:	af00      	add	r7, sp, #0
 801692e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801693c:	4619      	mov	r1, r3
 801693e:	4610      	mov	r0, r2
 8016940:	f7fe faed 	bl	8014f1e <USBD_LL_SetupStage>
}
 8016944:	bf00      	nop
 8016946:	3708      	adds	r7, #8
 8016948:	46bd      	mov	sp, r7
 801694a:	bd80      	pop	{r7, pc}

0801694c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801694c:	b580      	push	{r7, lr}
 801694e:	b082      	sub	sp, #8
 8016950:	af00      	add	r7, sp, #0
 8016952:	6078      	str	r0, [r7, #4]
 8016954:	460b      	mov	r3, r1
 8016956:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801695e:	78fa      	ldrb	r2, [r7, #3]
 8016960:	6879      	ldr	r1, [r7, #4]
 8016962:	4613      	mov	r3, r2
 8016964:	00db      	lsls	r3, r3, #3
 8016966:	4413      	add	r3, r2
 8016968:	009b      	lsls	r3, r3, #2
 801696a:	440b      	add	r3, r1
 801696c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8016970:	681a      	ldr	r2, [r3, #0]
 8016972:	78fb      	ldrb	r3, [r7, #3]
 8016974:	4619      	mov	r1, r3
 8016976:	f7fe fb27 	bl	8014fc8 <USBD_LL_DataOutStage>
}
 801697a:	bf00      	nop
 801697c:	3708      	adds	r7, #8
 801697e:	46bd      	mov	sp, r7
 8016980:	bd80      	pop	{r7, pc}

08016982 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016982:	b580      	push	{r7, lr}
 8016984:	b082      	sub	sp, #8
 8016986:	af00      	add	r7, sp, #0
 8016988:	6078      	str	r0, [r7, #4]
 801698a:	460b      	mov	r3, r1
 801698c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016994:	78fa      	ldrb	r2, [r7, #3]
 8016996:	6879      	ldr	r1, [r7, #4]
 8016998:	4613      	mov	r3, r2
 801699a:	00db      	lsls	r3, r3, #3
 801699c:	4413      	add	r3, r2
 801699e:	009b      	lsls	r3, r3, #2
 80169a0:	440b      	add	r3, r1
 80169a2:	3348      	adds	r3, #72	; 0x48
 80169a4:	681a      	ldr	r2, [r3, #0]
 80169a6:	78fb      	ldrb	r3, [r7, #3]
 80169a8:	4619      	mov	r1, r3
 80169aa:	f7fe fbc0 	bl	801512e <USBD_LL_DataInStage>
}
 80169ae:	bf00      	nop
 80169b0:	3708      	adds	r7, #8
 80169b2:	46bd      	mov	sp, r7
 80169b4:	bd80      	pop	{r7, pc}

080169b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80169b6:	b580      	push	{r7, lr}
 80169b8:	b082      	sub	sp, #8
 80169ba:	af00      	add	r7, sp, #0
 80169bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80169c4:	4618      	mov	r0, r3
 80169c6:	f7fe fcfa 	bl	80153be <USBD_LL_SOF>
}
 80169ca:	bf00      	nop
 80169cc:	3708      	adds	r7, #8
 80169ce:	46bd      	mov	sp, r7
 80169d0:	bd80      	pop	{r7, pc}

080169d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80169d2:	b580      	push	{r7, lr}
 80169d4:	b084      	sub	sp, #16
 80169d6:	af00      	add	r7, sp, #0
 80169d8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80169da:	2301      	movs	r3, #1
 80169dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	691b      	ldr	r3, [r3, #16]
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d102      	bne.n	80169ec <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80169e6:	2300      	movs	r3, #0
 80169e8:	73fb      	strb	r3, [r7, #15]
 80169ea:	e008      	b.n	80169fe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	691b      	ldr	r3, [r3, #16]
 80169f0:	2b02      	cmp	r3, #2
 80169f2:	d102      	bne.n	80169fa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80169f4:	2301      	movs	r3, #1
 80169f6:	73fb      	strb	r3, [r7, #15]
 80169f8:	e001      	b.n	80169fe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80169fa:	f7eb ff69 	bl	80028d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016a04:	7bfa      	ldrb	r2, [r7, #15]
 8016a06:	4611      	mov	r1, r2
 8016a08:	4618      	mov	r0, r3
 8016a0a:	f7fe fc94 	bl	8015336 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016a14:	4618      	mov	r0, r3
 8016a16:	f7fe fc3c 	bl	8015292 <USBD_LL_Reset>
}
 8016a1a:	bf00      	nop
 8016a1c:	3710      	adds	r7, #16
 8016a1e:	46bd      	mov	sp, r7
 8016a20:	bd80      	pop	{r7, pc}
	...

08016a24 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a24:	b580      	push	{r7, lr}
 8016a26:	b082      	sub	sp, #8
 8016a28:	af00      	add	r7, sp, #0
 8016a2a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016a32:	4618      	mov	r0, r3
 8016a34:	f7fe fc8f 	bl	8015356 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	681b      	ldr	r3, [r3, #0]
 8016a3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	687a      	ldr	r2, [r7, #4]
 8016a44:	6812      	ldr	r2, [r2, #0]
 8016a46:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016a4a:	f043 0301 	orr.w	r3, r3, #1
 8016a4e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	6a1b      	ldr	r3, [r3, #32]
 8016a54:	2b00      	cmp	r3, #0
 8016a56:	d005      	beq.n	8016a64 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016a58:	4b04      	ldr	r3, [pc, #16]	; (8016a6c <HAL_PCD_SuspendCallback+0x48>)
 8016a5a:	691b      	ldr	r3, [r3, #16]
 8016a5c:	4a03      	ldr	r2, [pc, #12]	; (8016a6c <HAL_PCD_SuspendCallback+0x48>)
 8016a5e:	f043 0306 	orr.w	r3, r3, #6
 8016a62:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016a64:	bf00      	nop
 8016a66:	3708      	adds	r7, #8
 8016a68:	46bd      	mov	sp, r7
 8016a6a:	bd80      	pop	{r7, pc}
 8016a6c:	e000ed00 	.word	0xe000ed00

08016a70 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a70:	b580      	push	{r7, lr}
 8016a72:	b082      	sub	sp, #8
 8016a74:	af00      	add	r7, sp, #0
 8016a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016a7e:	4618      	mov	r0, r3
 8016a80:	f7fe fc85 	bl	801538e <USBD_LL_Resume>
}
 8016a84:	bf00      	nop
 8016a86:	3708      	adds	r7, #8
 8016a88:	46bd      	mov	sp, r7
 8016a8a:	bd80      	pop	{r7, pc}

08016a8c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a8c:	b580      	push	{r7, lr}
 8016a8e:	b082      	sub	sp, #8
 8016a90:	af00      	add	r7, sp, #0
 8016a92:	6078      	str	r0, [r7, #4]
 8016a94:	460b      	mov	r3, r1
 8016a96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016a9e:	78fa      	ldrb	r2, [r7, #3]
 8016aa0:	4611      	mov	r1, r2
 8016aa2:	4618      	mov	r0, r3
 8016aa4:	f7fe fcdd 	bl	8015462 <USBD_LL_IsoOUTIncomplete>
}
 8016aa8:	bf00      	nop
 8016aaa:	3708      	adds	r7, #8
 8016aac:	46bd      	mov	sp, r7
 8016aae:	bd80      	pop	{r7, pc}

08016ab0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ab0:	b580      	push	{r7, lr}
 8016ab2:	b082      	sub	sp, #8
 8016ab4:	af00      	add	r7, sp, #0
 8016ab6:	6078      	str	r0, [r7, #4]
 8016ab8:	460b      	mov	r3, r1
 8016aba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016ac2:	78fa      	ldrb	r2, [r7, #3]
 8016ac4:	4611      	mov	r1, r2
 8016ac6:	4618      	mov	r0, r3
 8016ac8:	f7fe fc99 	bl	80153fe <USBD_LL_IsoINIncomplete>
}
 8016acc:	bf00      	nop
 8016ace:	3708      	adds	r7, #8
 8016ad0:	46bd      	mov	sp, r7
 8016ad2:	bd80      	pop	{r7, pc}

08016ad4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ad4:	b580      	push	{r7, lr}
 8016ad6:	b082      	sub	sp, #8
 8016ad8:	af00      	add	r7, sp, #0
 8016ada:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016ae2:	4618      	mov	r0, r3
 8016ae4:	f7fe fcef 	bl	80154c6 <USBD_LL_DevConnected>
}
 8016ae8:	bf00      	nop
 8016aea:	3708      	adds	r7, #8
 8016aec:	46bd      	mov	sp, r7
 8016aee:	bd80      	pop	{r7, pc}

08016af0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016af0:	b580      	push	{r7, lr}
 8016af2:	b082      	sub	sp, #8
 8016af4:	af00      	add	r7, sp, #0
 8016af6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016afe:	4618      	mov	r0, r3
 8016b00:	f7fe fcec 	bl	80154dc <USBD_LL_DevDisconnected>
}
 8016b04:	bf00      	nop
 8016b06:	3708      	adds	r7, #8
 8016b08:	46bd      	mov	sp, r7
 8016b0a:	bd80      	pop	{r7, pc}

08016b0c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016b0c:	b580      	push	{r7, lr}
 8016b0e:	b082      	sub	sp, #8
 8016b10:	af00      	add	r7, sp, #0
 8016b12:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	781b      	ldrb	r3, [r3, #0]
 8016b18:	2b01      	cmp	r3, #1
 8016b1a:	d140      	bne.n	8016b9e <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8016b1c:	4a22      	ldr	r2, [pc, #136]	; (8016ba8 <USBD_LL_Init+0x9c>)
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	4a20      	ldr	r2, [pc, #128]	; (8016ba8 <USBD_LL_Init+0x9c>)
 8016b28:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8016b2c:	4b1e      	ldr	r3, [pc, #120]	; (8016ba8 <USBD_LL_Init+0x9c>)
 8016b2e:	4a1f      	ldr	r2, [pc, #124]	; (8016bac <USBD_LL_Init+0xa0>)
 8016b30:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8016b32:	4b1d      	ldr	r3, [pc, #116]	; (8016ba8 <USBD_LL_Init+0x9c>)
 8016b34:	2209      	movs	r2, #9
 8016b36:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8016b38:	4b1b      	ldr	r3, [pc, #108]	; (8016ba8 <USBD_LL_Init+0x9c>)
 8016b3a:	2202      	movs	r2, #2
 8016b3c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8016b3e:	4b1a      	ldr	r3, [pc, #104]	; (8016ba8 <USBD_LL_Init+0x9c>)
 8016b40:	2200      	movs	r2, #0
 8016b42:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8016b44:	4b18      	ldr	r3, [pc, #96]	; (8016ba8 <USBD_LL_Init+0x9c>)
 8016b46:	2202      	movs	r2, #2
 8016b48:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8016b4a:	4b17      	ldr	r3, [pc, #92]	; (8016ba8 <USBD_LL_Init+0x9c>)
 8016b4c:	2200      	movs	r2, #0
 8016b4e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8016b50:	4b15      	ldr	r3, [pc, #84]	; (8016ba8 <USBD_LL_Init+0x9c>)
 8016b52:	2200      	movs	r2, #0
 8016b54:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8016b56:	4b14      	ldr	r3, [pc, #80]	; (8016ba8 <USBD_LL_Init+0x9c>)
 8016b58:	2200      	movs	r2, #0
 8016b5a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8016b5c:	4b12      	ldr	r3, [pc, #72]	; (8016ba8 <USBD_LL_Init+0x9c>)
 8016b5e:	2200      	movs	r2, #0
 8016b60:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8016b62:	4b11      	ldr	r3, [pc, #68]	; (8016ba8 <USBD_LL_Init+0x9c>)
 8016b64:	2200      	movs	r2, #0
 8016b66:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8016b68:	4b0f      	ldr	r3, [pc, #60]	; (8016ba8 <USBD_LL_Init+0x9c>)
 8016b6a:	2200      	movs	r2, #0
 8016b6c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8016b6e:	480e      	ldr	r0, [pc, #56]	; (8016ba8 <USBD_LL_Init+0x9c>)
 8016b70:	f7f1 fb0b 	bl	800818a <HAL_PCD_Init>
 8016b74:	4603      	mov	r3, r0
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	d001      	beq.n	8016b7e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8016b7a:	f7eb fea9 	bl	80028d0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8016b7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8016b82:	4809      	ldr	r0, [pc, #36]	; (8016ba8 <USBD_LL_Init+0x9c>)
 8016b84:	f7f2 fd79 	bl	800967a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8016b88:	2280      	movs	r2, #128	; 0x80
 8016b8a:	2100      	movs	r1, #0
 8016b8c:	4806      	ldr	r0, [pc, #24]	; (8016ba8 <USBD_LL_Init+0x9c>)
 8016b8e:	f7f2 fd2d 	bl	80095ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8016b92:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8016b96:	2101      	movs	r1, #1
 8016b98:	4803      	ldr	r0, [pc, #12]	; (8016ba8 <USBD_LL_Init+0x9c>)
 8016b9a:	f7f2 fd27 	bl	80095ec <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8016b9e:	2300      	movs	r3, #0
}
 8016ba0:	4618      	mov	r0, r3
 8016ba2:	3708      	adds	r7, #8
 8016ba4:	46bd      	mov	sp, r7
 8016ba6:	bd80      	pop	{r7, pc}
 8016ba8:	24002a84 	.word	0x24002a84
 8016bac:	40040000 	.word	0x40040000

08016bb0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016bb0:	b580      	push	{r7, lr}
 8016bb2:	b084      	sub	sp, #16
 8016bb4:	af00      	add	r7, sp, #0
 8016bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016bb8:	2300      	movs	r3, #0
 8016bba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016bbc:	2300      	movs	r3, #0
 8016bbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016bc6:	4618      	mov	r0, r3
 8016bc8:	f7f1 fc03 	bl	80083d2 <HAL_PCD_Start>
 8016bcc:	4603      	mov	r3, r0
 8016bce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016bd0:	7bfb      	ldrb	r3, [r7, #15]
 8016bd2:	4618      	mov	r0, r3
 8016bd4:	f000 f942 	bl	8016e5c <USBD_Get_USB_Status>
 8016bd8:	4603      	mov	r3, r0
 8016bda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016bdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8016bde:	4618      	mov	r0, r3
 8016be0:	3710      	adds	r7, #16
 8016be2:	46bd      	mov	sp, r7
 8016be4:	bd80      	pop	{r7, pc}

08016be6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016be6:	b580      	push	{r7, lr}
 8016be8:	b084      	sub	sp, #16
 8016bea:	af00      	add	r7, sp, #0
 8016bec:	6078      	str	r0, [r7, #4]
 8016bee:	4608      	mov	r0, r1
 8016bf0:	4611      	mov	r1, r2
 8016bf2:	461a      	mov	r2, r3
 8016bf4:	4603      	mov	r3, r0
 8016bf6:	70fb      	strb	r3, [r7, #3]
 8016bf8:	460b      	mov	r3, r1
 8016bfa:	70bb      	strb	r3, [r7, #2]
 8016bfc:	4613      	mov	r3, r2
 8016bfe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c00:	2300      	movs	r3, #0
 8016c02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c04:	2300      	movs	r3, #0
 8016c06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016c0e:	78bb      	ldrb	r3, [r7, #2]
 8016c10:	883a      	ldrh	r2, [r7, #0]
 8016c12:	78f9      	ldrb	r1, [r7, #3]
 8016c14:	f7f2 f903 	bl	8008e1e <HAL_PCD_EP_Open>
 8016c18:	4603      	mov	r3, r0
 8016c1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c1c:	7bfb      	ldrb	r3, [r7, #15]
 8016c1e:	4618      	mov	r0, r3
 8016c20:	f000 f91c 	bl	8016e5c <USBD_Get_USB_Status>
 8016c24:	4603      	mov	r3, r0
 8016c26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016c28:	7bbb      	ldrb	r3, [r7, #14]
}
 8016c2a:	4618      	mov	r0, r3
 8016c2c:	3710      	adds	r7, #16
 8016c2e:	46bd      	mov	sp, r7
 8016c30:	bd80      	pop	{r7, pc}

08016c32 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016c32:	b580      	push	{r7, lr}
 8016c34:	b084      	sub	sp, #16
 8016c36:	af00      	add	r7, sp, #0
 8016c38:	6078      	str	r0, [r7, #4]
 8016c3a:	460b      	mov	r3, r1
 8016c3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c3e:	2300      	movs	r3, #0
 8016c40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c42:	2300      	movs	r3, #0
 8016c44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016c4c:	78fa      	ldrb	r2, [r7, #3]
 8016c4e:	4611      	mov	r1, r2
 8016c50:	4618      	mov	r0, r3
 8016c52:	f7f2 f94c 	bl	8008eee <HAL_PCD_EP_Close>
 8016c56:	4603      	mov	r3, r0
 8016c58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c5a:	7bfb      	ldrb	r3, [r7, #15]
 8016c5c:	4618      	mov	r0, r3
 8016c5e:	f000 f8fd 	bl	8016e5c <USBD_Get_USB_Status>
 8016c62:	4603      	mov	r3, r0
 8016c64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016c66:	7bbb      	ldrb	r3, [r7, #14]
}
 8016c68:	4618      	mov	r0, r3
 8016c6a:	3710      	adds	r7, #16
 8016c6c:	46bd      	mov	sp, r7
 8016c6e:	bd80      	pop	{r7, pc}

08016c70 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016c70:	b580      	push	{r7, lr}
 8016c72:	b084      	sub	sp, #16
 8016c74:	af00      	add	r7, sp, #0
 8016c76:	6078      	str	r0, [r7, #4]
 8016c78:	460b      	mov	r3, r1
 8016c7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c7c:	2300      	movs	r3, #0
 8016c7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c80:	2300      	movs	r3, #0
 8016c82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016c8a:	78fa      	ldrb	r2, [r7, #3]
 8016c8c:	4611      	mov	r1, r2
 8016c8e:	4618      	mov	r0, r3
 8016c90:	f7f2 fa06 	bl	80090a0 <HAL_PCD_EP_SetStall>
 8016c94:	4603      	mov	r3, r0
 8016c96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c98:	7bfb      	ldrb	r3, [r7, #15]
 8016c9a:	4618      	mov	r0, r3
 8016c9c:	f000 f8de 	bl	8016e5c <USBD_Get_USB_Status>
 8016ca0:	4603      	mov	r3, r0
 8016ca2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016ca4:	7bbb      	ldrb	r3, [r7, #14]
}
 8016ca6:	4618      	mov	r0, r3
 8016ca8:	3710      	adds	r7, #16
 8016caa:	46bd      	mov	sp, r7
 8016cac:	bd80      	pop	{r7, pc}

08016cae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016cae:	b580      	push	{r7, lr}
 8016cb0:	b084      	sub	sp, #16
 8016cb2:	af00      	add	r7, sp, #0
 8016cb4:	6078      	str	r0, [r7, #4]
 8016cb6:	460b      	mov	r3, r1
 8016cb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016cba:	2300      	movs	r3, #0
 8016cbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016cbe:	2300      	movs	r3, #0
 8016cc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016cc8:	78fa      	ldrb	r2, [r7, #3]
 8016cca:	4611      	mov	r1, r2
 8016ccc:	4618      	mov	r0, r3
 8016cce:	f7f2 fa4b 	bl	8009168 <HAL_PCD_EP_ClrStall>
 8016cd2:	4603      	mov	r3, r0
 8016cd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016cd6:	7bfb      	ldrb	r3, [r7, #15]
 8016cd8:	4618      	mov	r0, r3
 8016cda:	f000 f8bf 	bl	8016e5c <USBD_Get_USB_Status>
 8016cde:	4603      	mov	r3, r0
 8016ce0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016ce2:	7bbb      	ldrb	r3, [r7, #14]
}
 8016ce4:	4618      	mov	r0, r3
 8016ce6:	3710      	adds	r7, #16
 8016ce8:	46bd      	mov	sp, r7
 8016cea:	bd80      	pop	{r7, pc}

08016cec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016cec:	b480      	push	{r7}
 8016cee:	b085      	sub	sp, #20
 8016cf0:	af00      	add	r7, sp, #0
 8016cf2:	6078      	str	r0, [r7, #4]
 8016cf4:	460b      	mov	r3, r1
 8016cf6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016cfe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016d00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	da0b      	bge.n	8016d20 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016d08:	78fb      	ldrb	r3, [r7, #3]
 8016d0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016d0e:	68f9      	ldr	r1, [r7, #12]
 8016d10:	4613      	mov	r3, r2
 8016d12:	00db      	lsls	r3, r3, #3
 8016d14:	4413      	add	r3, r2
 8016d16:	009b      	lsls	r3, r3, #2
 8016d18:	440b      	add	r3, r1
 8016d1a:	333e      	adds	r3, #62	; 0x3e
 8016d1c:	781b      	ldrb	r3, [r3, #0]
 8016d1e:	e00b      	b.n	8016d38 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016d20:	78fb      	ldrb	r3, [r7, #3]
 8016d22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016d26:	68f9      	ldr	r1, [r7, #12]
 8016d28:	4613      	mov	r3, r2
 8016d2a:	00db      	lsls	r3, r3, #3
 8016d2c:	4413      	add	r3, r2
 8016d2e:	009b      	lsls	r3, r3, #2
 8016d30:	440b      	add	r3, r1
 8016d32:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8016d36:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016d38:	4618      	mov	r0, r3
 8016d3a:	3714      	adds	r7, #20
 8016d3c:	46bd      	mov	sp, r7
 8016d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d42:	4770      	bx	lr

08016d44 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016d44:	b580      	push	{r7, lr}
 8016d46:	b084      	sub	sp, #16
 8016d48:	af00      	add	r7, sp, #0
 8016d4a:	6078      	str	r0, [r7, #4]
 8016d4c:	460b      	mov	r3, r1
 8016d4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d50:	2300      	movs	r3, #0
 8016d52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d54:	2300      	movs	r3, #0
 8016d56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016d5e:	78fa      	ldrb	r2, [r7, #3]
 8016d60:	4611      	mov	r1, r2
 8016d62:	4618      	mov	r0, r3
 8016d64:	f7f2 f836 	bl	8008dd4 <HAL_PCD_SetAddress>
 8016d68:	4603      	mov	r3, r0
 8016d6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d6c:	7bfb      	ldrb	r3, [r7, #15]
 8016d6e:	4618      	mov	r0, r3
 8016d70:	f000 f874 	bl	8016e5c <USBD_Get_USB_Status>
 8016d74:	4603      	mov	r3, r0
 8016d76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016d78:	7bbb      	ldrb	r3, [r7, #14]
}
 8016d7a:	4618      	mov	r0, r3
 8016d7c:	3710      	adds	r7, #16
 8016d7e:	46bd      	mov	sp, r7
 8016d80:	bd80      	pop	{r7, pc}

08016d82 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016d82:	b580      	push	{r7, lr}
 8016d84:	b086      	sub	sp, #24
 8016d86:	af00      	add	r7, sp, #0
 8016d88:	60f8      	str	r0, [r7, #12]
 8016d8a:	607a      	str	r2, [r7, #4]
 8016d8c:	603b      	str	r3, [r7, #0]
 8016d8e:	460b      	mov	r3, r1
 8016d90:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d92:	2300      	movs	r3, #0
 8016d94:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d96:	2300      	movs	r3, #0
 8016d98:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016d9a:	68fb      	ldr	r3, [r7, #12]
 8016d9c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016da0:	7af9      	ldrb	r1, [r7, #11]
 8016da2:	683b      	ldr	r3, [r7, #0]
 8016da4:	687a      	ldr	r2, [r7, #4]
 8016da6:	f7f2 f940 	bl	800902a <HAL_PCD_EP_Transmit>
 8016daa:	4603      	mov	r3, r0
 8016dac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016dae:	7dfb      	ldrb	r3, [r7, #23]
 8016db0:	4618      	mov	r0, r3
 8016db2:	f000 f853 	bl	8016e5c <USBD_Get_USB_Status>
 8016db6:	4603      	mov	r3, r0
 8016db8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016dba:	7dbb      	ldrb	r3, [r7, #22]
}
 8016dbc:	4618      	mov	r0, r3
 8016dbe:	3718      	adds	r7, #24
 8016dc0:	46bd      	mov	sp, r7
 8016dc2:	bd80      	pop	{r7, pc}

08016dc4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016dc4:	b580      	push	{r7, lr}
 8016dc6:	b086      	sub	sp, #24
 8016dc8:	af00      	add	r7, sp, #0
 8016dca:	60f8      	str	r0, [r7, #12]
 8016dcc:	607a      	str	r2, [r7, #4]
 8016dce:	603b      	str	r3, [r7, #0]
 8016dd0:	460b      	mov	r3, r1
 8016dd2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016dd4:	2300      	movs	r3, #0
 8016dd6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016dd8:	2300      	movs	r3, #0
 8016dda:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016ddc:	68fb      	ldr	r3, [r7, #12]
 8016dde:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016de2:	7af9      	ldrb	r1, [r7, #11]
 8016de4:	683b      	ldr	r3, [r7, #0]
 8016de6:	687a      	ldr	r2, [r7, #4]
 8016de8:	f7f2 f8cb 	bl	8008f82 <HAL_PCD_EP_Receive>
 8016dec:	4603      	mov	r3, r0
 8016dee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016df0:	7dfb      	ldrb	r3, [r7, #23]
 8016df2:	4618      	mov	r0, r3
 8016df4:	f000 f832 	bl	8016e5c <USBD_Get_USB_Status>
 8016df8:	4603      	mov	r3, r0
 8016dfa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016dfc:	7dbb      	ldrb	r3, [r7, #22]
}
 8016dfe:	4618      	mov	r0, r3
 8016e00:	3718      	adds	r7, #24
 8016e02:	46bd      	mov	sp, r7
 8016e04:	bd80      	pop	{r7, pc}

08016e06 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e06:	b580      	push	{r7, lr}
 8016e08:	b082      	sub	sp, #8
 8016e0a:	af00      	add	r7, sp, #0
 8016e0c:	6078      	str	r0, [r7, #4]
 8016e0e:	460b      	mov	r3, r1
 8016e10:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016e18:	78fa      	ldrb	r2, [r7, #3]
 8016e1a:	4611      	mov	r1, r2
 8016e1c:	4618      	mov	r0, r3
 8016e1e:	f7f2 f8ec 	bl	8008ffa <HAL_PCD_EP_GetRxCount>
 8016e22:	4603      	mov	r3, r0
}
 8016e24:	4618      	mov	r0, r3
 8016e26:	3708      	adds	r7, #8
 8016e28:	46bd      	mov	sp, r7
 8016e2a:	bd80      	pop	{r7, pc}

08016e2c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016e2c:	b480      	push	{r7}
 8016e2e:	b083      	sub	sp, #12
 8016e30:	af00      	add	r7, sp, #0
 8016e32:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016e34:	4b03      	ldr	r3, [pc, #12]	; (8016e44 <USBD_static_malloc+0x18>)
}
 8016e36:	4618      	mov	r0, r3
 8016e38:	370c      	adds	r7, #12
 8016e3a:	46bd      	mov	sp, r7
 8016e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e40:	4770      	bx	lr
 8016e42:	bf00      	nop
 8016e44:	24002f90 	.word	0x24002f90

08016e48 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016e48:	b480      	push	{r7}
 8016e4a:	b083      	sub	sp, #12
 8016e4c:	af00      	add	r7, sp, #0
 8016e4e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8016e50:	bf00      	nop
 8016e52:	370c      	adds	r7, #12
 8016e54:	46bd      	mov	sp, r7
 8016e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e5a:	4770      	bx	lr

08016e5c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016e5c:	b480      	push	{r7}
 8016e5e:	b085      	sub	sp, #20
 8016e60:	af00      	add	r7, sp, #0
 8016e62:	4603      	mov	r3, r0
 8016e64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e66:	2300      	movs	r3, #0
 8016e68:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016e6a:	79fb      	ldrb	r3, [r7, #7]
 8016e6c:	2b03      	cmp	r3, #3
 8016e6e:	d817      	bhi.n	8016ea0 <USBD_Get_USB_Status+0x44>
 8016e70:	a201      	add	r2, pc, #4	; (adr r2, 8016e78 <USBD_Get_USB_Status+0x1c>)
 8016e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e76:	bf00      	nop
 8016e78:	08016e89 	.word	0x08016e89
 8016e7c:	08016e8f 	.word	0x08016e8f
 8016e80:	08016e95 	.word	0x08016e95
 8016e84:	08016e9b 	.word	0x08016e9b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016e88:	2300      	movs	r3, #0
 8016e8a:	73fb      	strb	r3, [r7, #15]
    break;
 8016e8c:	e00b      	b.n	8016ea6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016e8e:	2303      	movs	r3, #3
 8016e90:	73fb      	strb	r3, [r7, #15]
    break;
 8016e92:	e008      	b.n	8016ea6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016e94:	2301      	movs	r3, #1
 8016e96:	73fb      	strb	r3, [r7, #15]
    break;
 8016e98:	e005      	b.n	8016ea6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016e9a:	2303      	movs	r3, #3
 8016e9c:	73fb      	strb	r3, [r7, #15]
    break;
 8016e9e:	e002      	b.n	8016ea6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016ea0:	2303      	movs	r3, #3
 8016ea2:	73fb      	strb	r3, [r7, #15]
    break;
 8016ea4:	bf00      	nop
  }
  return usb_status;
 8016ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ea8:	4618      	mov	r0, r3
 8016eaa:	3714      	adds	r7, #20
 8016eac:	46bd      	mov	sp, r7
 8016eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eb2:	4770      	bx	lr

08016eb4 <siprintf>:
 8016eb4:	b40e      	push	{r1, r2, r3}
 8016eb6:	b500      	push	{lr}
 8016eb8:	b09c      	sub	sp, #112	; 0x70
 8016eba:	ab1d      	add	r3, sp, #116	; 0x74
 8016ebc:	9002      	str	r0, [sp, #8]
 8016ebe:	9006      	str	r0, [sp, #24]
 8016ec0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016ec4:	4809      	ldr	r0, [pc, #36]	; (8016eec <siprintf+0x38>)
 8016ec6:	9107      	str	r1, [sp, #28]
 8016ec8:	9104      	str	r1, [sp, #16]
 8016eca:	4909      	ldr	r1, [pc, #36]	; (8016ef0 <siprintf+0x3c>)
 8016ecc:	f853 2b04 	ldr.w	r2, [r3], #4
 8016ed0:	9105      	str	r1, [sp, #20]
 8016ed2:	6800      	ldr	r0, [r0, #0]
 8016ed4:	9301      	str	r3, [sp, #4]
 8016ed6:	a902      	add	r1, sp, #8
 8016ed8:	f000 f9d6 	bl	8017288 <_svfiprintf_r>
 8016edc:	9b02      	ldr	r3, [sp, #8]
 8016ede:	2200      	movs	r2, #0
 8016ee0:	701a      	strb	r2, [r3, #0]
 8016ee2:	b01c      	add	sp, #112	; 0x70
 8016ee4:	f85d eb04 	ldr.w	lr, [sp], #4
 8016ee8:	b003      	add	sp, #12
 8016eea:	4770      	bx	lr
 8016eec:	2400014c 	.word	0x2400014c
 8016ef0:	ffff0208 	.word	0xffff0208

08016ef4 <siscanf>:
 8016ef4:	b40e      	push	{r1, r2, r3}
 8016ef6:	b510      	push	{r4, lr}
 8016ef8:	b09f      	sub	sp, #124	; 0x7c
 8016efa:	ac21      	add	r4, sp, #132	; 0x84
 8016efc:	f44f 7101 	mov.w	r1, #516	; 0x204
 8016f00:	f854 2b04 	ldr.w	r2, [r4], #4
 8016f04:	9201      	str	r2, [sp, #4]
 8016f06:	f8ad 101c 	strh.w	r1, [sp, #28]
 8016f0a:	9004      	str	r0, [sp, #16]
 8016f0c:	9008      	str	r0, [sp, #32]
 8016f0e:	f7e9 fa09 	bl	8000324 <strlen>
 8016f12:	4b0c      	ldr	r3, [pc, #48]	; (8016f44 <siscanf+0x50>)
 8016f14:	9005      	str	r0, [sp, #20]
 8016f16:	9009      	str	r0, [sp, #36]	; 0x24
 8016f18:	930d      	str	r3, [sp, #52]	; 0x34
 8016f1a:	480b      	ldr	r0, [pc, #44]	; (8016f48 <siscanf+0x54>)
 8016f1c:	9a01      	ldr	r2, [sp, #4]
 8016f1e:	6800      	ldr	r0, [r0, #0]
 8016f20:	9403      	str	r4, [sp, #12]
 8016f22:	2300      	movs	r3, #0
 8016f24:	9311      	str	r3, [sp, #68]	; 0x44
 8016f26:	9316      	str	r3, [sp, #88]	; 0x58
 8016f28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016f2c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016f30:	a904      	add	r1, sp, #16
 8016f32:	4623      	mov	r3, r4
 8016f34:	f000 fb00 	bl	8017538 <__ssvfiscanf_r>
 8016f38:	b01f      	add	sp, #124	; 0x7c
 8016f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f3e:	b003      	add	sp, #12
 8016f40:	4770      	bx	lr
 8016f42:	bf00      	nop
 8016f44:	08016f4d 	.word	0x08016f4d
 8016f48:	2400014c 	.word	0x2400014c

08016f4c <__seofread>:
 8016f4c:	2000      	movs	r0, #0
 8016f4e:	4770      	bx	lr

08016f50 <memset>:
 8016f50:	4402      	add	r2, r0
 8016f52:	4603      	mov	r3, r0
 8016f54:	4293      	cmp	r3, r2
 8016f56:	d100      	bne.n	8016f5a <memset+0xa>
 8016f58:	4770      	bx	lr
 8016f5a:	f803 1b01 	strb.w	r1, [r3], #1
 8016f5e:	e7f9      	b.n	8016f54 <memset+0x4>

08016f60 <__errno>:
 8016f60:	4b01      	ldr	r3, [pc, #4]	; (8016f68 <__errno+0x8>)
 8016f62:	6818      	ldr	r0, [r3, #0]
 8016f64:	4770      	bx	lr
 8016f66:	bf00      	nop
 8016f68:	2400014c 	.word	0x2400014c

08016f6c <__libc_init_array>:
 8016f6c:	b570      	push	{r4, r5, r6, lr}
 8016f6e:	4d0d      	ldr	r5, [pc, #52]	; (8016fa4 <__libc_init_array+0x38>)
 8016f70:	4c0d      	ldr	r4, [pc, #52]	; (8016fa8 <__libc_init_array+0x3c>)
 8016f72:	1b64      	subs	r4, r4, r5
 8016f74:	10a4      	asrs	r4, r4, #2
 8016f76:	2600      	movs	r6, #0
 8016f78:	42a6      	cmp	r6, r4
 8016f7a:	d109      	bne.n	8016f90 <__libc_init_array+0x24>
 8016f7c:	4d0b      	ldr	r5, [pc, #44]	; (8016fac <__libc_init_array+0x40>)
 8016f7e:	4c0c      	ldr	r4, [pc, #48]	; (8016fb0 <__libc_init_array+0x44>)
 8016f80:	f001 f8fe 	bl	8018180 <_init>
 8016f84:	1b64      	subs	r4, r4, r5
 8016f86:	10a4      	asrs	r4, r4, #2
 8016f88:	2600      	movs	r6, #0
 8016f8a:	42a6      	cmp	r6, r4
 8016f8c:	d105      	bne.n	8016f9a <__libc_init_array+0x2e>
 8016f8e:	bd70      	pop	{r4, r5, r6, pc}
 8016f90:	f855 3b04 	ldr.w	r3, [r5], #4
 8016f94:	4798      	blx	r3
 8016f96:	3601      	adds	r6, #1
 8016f98:	e7ee      	b.n	8016f78 <__libc_init_array+0xc>
 8016f9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8016f9e:	4798      	blx	r3
 8016fa0:	3601      	adds	r6, #1
 8016fa2:	e7f2      	b.n	8016f8a <__libc_init_array+0x1e>
 8016fa4:	0801854c 	.word	0x0801854c
 8016fa8:	0801854c 	.word	0x0801854c
 8016fac:	0801854c 	.word	0x0801854c
 8016fb0:	08018550 	.word	0x08018550

08016fb4 <__retarget_lock_acquire_recursive>:
 8016fb4:	4770      	bx	lr

08016fb6 <__retarget_lock_release_recursive>:
 8016fb6:	4770      	bx	lr

08016fb8 <strcpy>:
 8016fb8:	4603      	mov	r3, r0
 8016fba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016fbe:	f803 2b01 	strb.w	r2, [r3], #1
 8016fc2:	2a00      	cmp	r2, #0
 8016fc4:	d1f9      	bne.n	8016fba <strcpy+0x2>
 8016fc6:	4770      	bx	lr

08016fc8 <memcpy>:
 8016fc8:	440a      	add	r2, r1
 8016fca:	4291      	cmp	r1, r2
 8016fcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8016fd0:	d100      	bne.n	8016fd4 <memcpy+0xc>
 8016fd2:	4770      	bx	lr
 8016fd4:	b510      	push	{r4, lr}
 8016fd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016fda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016fde:	4291      	cmp	r1, r2
 8016fe0:	d1f9      	bne.n	8016fd6 <memcpy+0xe>
 8016fe2:	bd10      	pop	{r4, pc}

08016fe4 <_free_r>:
 8016fe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016fe6:	2900      	cmp	r1, #0
 8016fe8:	d044      	beq.n	8017074 <_free_r+0x90>
 8016fea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016fee:	9001      	str	r0, [sp, #4]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	f1a1 0404 	sub.w	r4, r1, #4
 8016ff6:	bfb8      	it	lt
 8016ff8:	18e4      	addlt	r4, r4, r3
 8016ffa:	f000 f8df 	bl	80171bc <__malloc_lock>
 8016ffe:	4a1e      	ldr	r2, [pc, #120]	; (8017078 <_free_r+0x94>)
 8017000:	9801      	ldr	r0, [sp, #4]
 8017002:	6813      	ldr	r3, [r2, #0]
 8017004:	b933      	cbnz	r3, 8017014 <_free_r+0x30>
 8017006:	6063      	str	r3, [r4, #4]
 8017008:	6014      	str	r4, [r2, #0]
 801700a:	b003      	add	sp, #12
 801700c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017010:	f000 b8da 	b.w	80171c8 <__malloc_unlock>
 8017014:	42a3      	cmp	r3, r4
 8017016:	d908      	bls.n	801702a <_free_r+0x46>
 8017018:	6825      	ldr	r5, [r4, #0]
 801701a:	1961      	adds	r1, r4, r5
 801701c:	428b      	cmp	r3, r1
 801701e:	bf01      	itttt	eq
 8017020:	6819      	ldreq	r1, [r3, #0]
 8017022:	685b      	ldreq	r3, [r3, #4]
 8017024:	1949      	addeq	r1, r1, r5
 8017026:	6021      	streq	r1, [r4, #0]
 8017028:	e7ed      	b.n	8017006 <_free_r+0x22>
 801702a:	461a      	mov	r2, r3
 801702c:	685b      	ldr	r3, [r3, #4]
 801702e:	b10b      	cbz	r3, 8017034 <_free_r+0x50>
 8017030:	42a3      	cmp	r3, r4
 8017032:	d9fa      	bls.n	801702a <_free_r+0x46>
 8017034:	6811      	ldr	r1, [r2, #0]
 8017036:	1855      	adds	r5, r2, r1
 8017038:	42a5      	cmp	r5, r4
 801703a:	d10b      	bne.n	8017054 <_free_r+0x70>
 801703c:	6824      	ldr	r4, [r4, #0]
 801703e:	4421      	add	r1, r4
 8017040:	1854      	adds	r4, r2, r1
 8017042:	42a3      	cmp	r3, r4
 8017044:	6011      	str	r1, [r2, #0]
 8017046:	d1e0      	bne.n	801700a <_free_r+0x26>
 8017048:	681c      	ldr	r4, [r3, #0]
 801704a:	685b      	ldr	r3, [r3, #4]
 801704c:	6053      	str	r3, [r2, #4]
 801704e:	440c      	add	r4, r1
 8017050:	6014      	str	r4, [r2, #0]
 8017052:	e7da      	b.n	801700a <_free_r+0x26>
 8017054:	d902      	bls.n	801705c <_free_r+0x78>
 8017056:	230c      	movs	r3, #12
 8017058:	6003      	str	r3, [r0, #0]
 801705a:	e7d6      	b.n	801700a <_free_r+0x26>
 801705c:	6825      	ldr	r5, [r4, #0]
 801705e:	1961      	adds	r1, r4, r5
 8017060:	428b      	cmp	r3, r1
 8017062:	bf04      	itt	eq
 8017064:	6819      	ldreq	r1, [r3, #0]
 8017066:	685b      	ldreq	r3, [r3, #4]
 8017068:	6063      	str	r3, [r4, #4]
 801706a:	bf04      	itt	eq
 801706c:	1949      	addeq	r1, r1, r5
 801706e:	6021      	streq	r1, [r4, #0]
 8017070:	6054      	str	r4, [r2, #4]
 8017072:	e7ca      	b.n	801700a <_free_r+0x26>
 8017074:	b003      	add	sp, #12
 8017076:	bd30      	pop	{r4, r5, pc}
 8017078:	240032f0 	.word	0x240032f0

0801707c <sbrk_aligned>:
 801707c:	b570      	push	{r4, r5, r6, lr}
 801707e:	4e0e      	ldr	r6, [pc, #56]	; (80170b8 <sbrk_aligned+0x3c>)
 8017080:	460c      	mov	r4, r1
 8017082:	6831      	ldr	r1, [r6, #0]
 8017084:	4605      	mov	r5, r0
 8017086:	b911      	cbnz	r1, 801708e <sbrk_aligned+0x12>
 8017088:	f000 ff3a 	bl	8017f00 <_sbrk_r>
 801708c:	6030      	str	r0, [r6, #0]
 801708e:	4621      	mov	r1, r4
 8017090:	4628      	mov	r0, r5
 8017092:	f000 ff35 	bl	8017f00 <_sbrk_r>
 8017096:	1c43      	adds	r3, r0, #1
 8017098:	d00a      	beq.n	80170b0 <sbrk_aligned+0x34>
 801709a:	1cc4      	adds	r4, r0, #3
 801709c:	f024 0403 	bic.w	r4, r4, #3
 80170a0:	42a0      	cmp	r0, r4
 80170a2:	d007      	beq.n	80170b4 <sbrk_aligned+0x38>
 80170a4:	1a21      	subs	r1, r4, r0
 80170a6:	4628      	mov	r0, r5
 80170a8:	f000 ff2a 	bl	8017f00 <_sbrk_r>
 80170ac:	3001      	adds	r0, #1
 80170ae:	d101      	bne.n	80170b4 <sbrk_aligned+0x38>
 80170b0:	f04f 34ff 	mov.w	r4, #4294967295
 80170b4:	4620      	mov	r0, r4
 80170b6:	bd70      	pop	{r4, r5, r6, pc}
 80170b8:	240032f4 	.word	0x240032f4

080170bc <_malloc_r>:
 80170bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80170c0:	1ccd      	adds	r5, r1, #3
 80170c2:	f025 0503 	bic.w	r5, r5, #3
 80170c6:	3508      	adds	r5, #8
 80170c8:	2d0c      	cmp	r5, #12
 80170ca:	bf38      	it	cc
 80170cc:	250c      	movcc	r5, #12
 80170ce:	2d00      	cmp	r5, #0
 80170d0:	4607      	mov	r7, r0
 80170d2:	db01      	blt.n	80170d8 <_malloc_r+0x1c>
 80170d4:	42a9      	cmp	r1, r5
 80170d6:	d905      	bls.n	80170e4 <_malloc_r+0x28>
 80170d8:	230c      	movs	r3, #12
 80170da:	603b      	str	r3, [r7, #0]
 80170dc:	2600      	movs	r6, #0
 80170de:	4630      	mov	r0, r6
 80170e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80170e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80171b8 <_malloc_r+0xfc>
 80170e8:	f000 f868 	bl	80171bc <__malloc_lock>
 80170ec:	f8d8 3000 	ldr.w	r3, [r8]
 80170f0:	461c      	mov	r4, r3
 80170f2:	bb5c      	cbnz	r4, 801714c <_malloc_r+0x90>
 80170f4:	4629      	mov	r1, r5
 80170f6:	4638      	mov	r0, r7
 80170f8:	f7ff ffc0 	bl	801707c <sbrk_aligned>
 80170fc:	1c43      	adds	r3, r0, #1
 80170fe:	4604      	mov	r4, r0
 8017100:	d155      	bne.n	80171ae <_malloc_r+0xf2>
 8017102:	f8d8 4000 	ldr.w	r4, [r8]
 8017106:	4626      	mov	r6, r4
 8017108:	2e00      	cmp	r6, #0
 801710a:	d145      	bne.n	8017198 <_malloc_r+0xdc>
 801710c:	2c00      	cmp	r4, #0
 801710e:	d048      	beq.n	80171a2 <_malloc_r+0xe6>
 8017110:	6823      	ldr	r3, [r4, #0]
 8017112:	4631      	mov	r1, r6
 8017114:	4638      	mov	r0, r7
 8017116:	eb04 0903 	add.w	r9, r4, r3
 801711a:	f000 fef1 	bl	8017f00 <_sbrk_r>
 801711e:	4581      	cmp	r9, r0
 8017120:	d13f      	bne.n	80171a2 <_malloc_r+0xe6>
 8017122:	6821      	ldr	r1, [r4, #0]
 8017124:	1a6d      	subs	r5, r5, r1
 8017126:	4629      	mov	r1, r5
 8017128:	4638      	mov	r0, r7
 801712a:	f7ff ffa7 	bl	801707c <sbrk_aligned>
 801712e:	3001      	adds	r0, #1
 8017130:	d037      	beq.n	80171a2 <_malloc_r+0xe6>
 8017132:	6823      	ldr	r3, [r4, #0]
 8017134:	442b      	add	r3, r5
 8017136:	6023      	str	r3, [r4, #0]
 8017138:	f8d8 3000 	ldr.w	r3, [r8]
 801713c:	2b00      	cmp	r3, #0
 801713e:	d038      	beq.n	80171b2 <_malloc_r+0xf6>
 8017140:	685a      	ldr	r2, [r3, #4]
 8017142:	42a2      	cmp	r2, r4
 8017144:	d12b      	bne.n	801719e <_malloc_r+0xe2>
 8017146:	2200      	movs	r2, #0
 8017148:	605a      	str	r2, [r3, #4]
 801714a:	e00f      	b.n	801716c <_malloc_r+0xb0>
 801714c:	6822      	ldr	r2, [r4, #0]
 801714e:	1b52      	subs	r2, r2, r5
 8017150:	d41f      	bmi.n	8017192 <_malloc_r+0xd6>
 8017152:	2a0b      	cmp	r2, #11
 8017154:	d917      	bls.n	8017186 <_malloc_r+0xca>
 8017156:	1961      	adds	r1, r4, r5
 8017158:	42a3      	cmp	r3, r4
 801715a:	6025      	str	r5, [r4, #0]
 801715c:	bf18      	it	ne
 801715e:	6059      	strne	r1, [r3, #4]
 8017160:	6863      	ldr	r3, [r4, #4]
 8017162:	bf08      	it	eq
 8017164:	f8c8 1000 	streq.w	r1, [r8]
 8017168:	5162      	str	r2, [r4, r5]
 801716a:	604b      	str	r3, [r1, #4]
 801716c:	4638      	mov	r0, r7
 801716e:	f104 060b 	add.w	r6, r4, #11
 8017172:	f000 f829 	bl	80171c8 <__malloc_unlock>
 8017176:	f026 0607 	bic.w	r6, r6, #7
 801717a:	1d23      	adds	r3, r4, #4
 801717c:	1af2      	subs	r2, r6, r3
 801717e:	d0ae      	beq.n	80170de <_malloc_r+0x22>
 8017180:	1b9b      	subs	r3, r3, r6
 8017182:	50a3      	str	r3, [r4, r2]
 8017184:	e7ab      	b.n	80170de <_malloc_r+0x22>
 8017186:	42a3      	cmp	r3, r4
 8017188:	6862      	ldr	r2, [r4, #4]
 801718a:	d1dd      	bne.n	8017148 <_malloc_r+0x8c>
 801718c:	f8c8 2000 	str.w	r2, [r8]
 8017190:	e7ec      	b.n	801716c <_malloc_r+0xb0>
 8017192:	4623      	mov	r3, r4
 8017194:	6864      	ldr	r4, [r4, #4]
 8017196:	e7ac      	b.n	80170f2 <_malloc_r+0x36>
 8017198:	4634      	mov	r4, r6
 801719a:	6876      	ldr	r6, [r6, #4]
 801719c:	e7b4      	b.n	8017108 <_malloc_r+0x4c>
 801719e:	4613      	mov	r3, r2
 80171a0:	e7cc      	b.n	801713c <_malloc_r+0x80>
 80171a2:	230c      	movs	r3, #12
 80171a4:	603b      	str	r3, [r7, #0]
 80171a6:	4638      	mov	r0, r7
 80171a8:	f000 f80e 	bl	80171c8 <__malloc_unlock>
 80171ac:	e797      	b.n	80170de <_malloc_r+0x22>
 80171ae:	6025      	str	r5, [r4, #0]
 80171b0:	e7dc      	b.n	801716c <_malloc_r+0xb0>
 80171b2:	605b      	str	r3, [r3, #4]
 80171b4:	deff      	udf	#255	; 0xff
 80171b6:	bf00      	nop
 80171b8:	240032f0 	.word	0x240032f0

080171bc <__malloc_lock>:
 80171bc:	4801      	ldr	r0, [pc, #4]	; (80171c4 <__malloc_lock+0x8>)
 80171be:	f7ff bef9 	b.w	8016fb4 <__retarget_lock_acquire_recursive>
 80171c2:	bf00      	nop
 80171c4:	240032ec 	.word	0x240032ec

080171c8 <__malloc_unlock>:
 80171c8:	4801      	ldr	r0, [pc, #4]	; (80171d0 <__malloc_unlock+0x8>)
 80171ca:	f7ff bef4 	b.w	8016fb6 <__retarget_lock_release_recursive>
 80171ce:	bf00      	nop
 80171d0:	240032ec 	.word	0x240032ec

080171d4 <__ssputs_r>:
 80171d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80171d8:	688e      	ldr	r6, [r1, #8]
 80171da:	461f      	mov	r7, r3
 80171dc:	42be      	cmp	r6, r7
 80171de:	680b      	ldr	r3, [r1, #0]
 80171e0:	4682      	mov	sl, r0
 80171e2:	460c      	mov	r4, r1
 80171e4:	4690      	mov	r8, r2
 80171e6:	d82c      	bhi.n	8017242 <__ssputs_r+0x6e>
 80171e8:	898a      	ldrh	r2, [r1, #12]
 80171ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80171ee:	d026      	beq.n	801723e <__ssputs_r+0x6a>
 80171f0:	6965      	ldr	r5, [r4, #20]
 80171f2:	6909      	ldr	r1, [r1, #16]
 80171f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80171f8:	eba3 0901 	sub.w	r9, r3, r1
 80171fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017200:	1c7b      	adds	r3, r7, #1
 8017202:	444b      	add	r3, r9
 8017204:	106d      	asrs	r5, r5, #1
 8017206:	429d      	cmp	r5, r3
 8017208:	bf38      	it	cc
 801720a:	461d      	movcc	r5, r3
 801720c:	0553      	lsls	r3, r2, #21
 801720e:	d527      	bpl.n	8017260 <__ssputs_r+0x8c>
 8017210:	4629      	mov	r1, r5
 8017212:	f7ff ff53 	bl	80170bc <_malloc_r>
 8017216:	4606      	mov	r6, r0
 8017218:	b360      	cbz	r0, 8017274 <__ssputs_r+0xa0>
 801721a:	6921      	ldr	r1, [r4, #16]
 801721c:	464a      	mov	r2, r9
 801721e:	f7ff fed3 	bl	8016fc8 <memcpy>
 8017222:	89a3      	ldrh	r3, [r4, #12]
 8017224:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801722c:	81a3      	strh	r3, [r4, #12]
 801722e:	6126      	str	r6, [r4, #16]
 8017230:	6165      	str	r5, [r4, #20]
 8017232:	444e      	add	r6, r9
 8017234:	eba5 0509 	sub.w	r5, r5, r9
 8017238:	6026      	str	r6, [r4, #0]
 801723a:	60a5      	str	r5, [r4, #8]
 801723c:	463e      	mov	r6, r7
 801723e:	42be      	cmp	r6, r7
 8017240:	d900      	bls.n	8017244 <__ssputs_r+0x70>
 8017242:	463e      	mov	r6, r7
 8017244:	6820      	ldr	r0, [r4, #0]
 8017246:	4632      	mov	r2, r6
 8017248:	4641      	mov	r1, r8
 801724a:	f000 fe3e 	bl	8017eca <memmove>
 801724e:	68a3      	ldr	r3, [r4, #8]
 8017250:	1b9b      	subs	r3, r3, r6
 8017252:	60a3      	str	r3, [r4, #8]
 8017254:	6823      	ldr	r3, [r4, #0]
 8017256:	4433      	add	r3, r6
 8017258:	6023      	str	r3, [r4, #0]
 801725a:	2000      	movs	r0, #0
 801725c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017260:	462a      	mov	r2, r5
 8017262:	f000 fe5d 	bl	8017f20 <_realloc_r>
 8017266:	4606      	mov	r6, r0
 8017268:	2800      	cmp	r0, #0
 801726a:	d1e0      	bne.n	801722e <__ssputs_r+0x5a>
 801726c:	6921      	ldr	r1, [r4, #16]
 801726e:	4650      	mov	r0, sl
 8017270:	f7ff feb8 	bl	8016fe4 <_free_r>
 8017274:	230c      	movs	r3, #12
 8017276:	f8ca 3000 	str.w	r3, [sl]
 801727a:	89a3      	ldrh	r3, [r4, #12]
 801727c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017280:	81a3      	strh	r3, [r4, #12]
 8017282:	f04f 30ff 	mov.w	r0, #4294967295
 8017286:	e7e9      	b.n	801725c <__ssputs_r+0x88>

08017288 <_svfiprintf_r>:
 8017288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801728c:	4698      	mov	r8, r3
 801728e:	898b      	ldrh	r3, [r1, #12]
 8017290:	061b      	lsls	r3, r3, #24
 8017292:	b09d      	sub	sp, #116	; 0x74
 8017294:	4607      	mov	r7, r0
 8017296:	460d      	mov	r5, r1
 8017298:	4614      	mov	r4, r2
 801729a:	d50e      	bpl.n	80172ba <_svfiprintf_r+0x32>
 801729c:	690b      	ldr	r3, [r1, #16]
 801729e:	b963      	cbnz	r3, 80172ba <_svfiprintf_r+0x32>
 80172a0:	2140      	movs	r1, #64	; 0x40
 80172a2:	f7ff ff0b 	bl	80170bc <_malloc_r>
 80172a6:	6028      	str	r0, [r5, #0]
 80172a8:	6128      	str	r0, [r5, #16]
 80172aa:	b920      	cbnz	r0, 80172b6 <_svfiprintf_r+0x2e>
 80172ac:	230c      	movs	r3, #12
 80172ae:	603b      	str	r3, [r7, #0]
 80172b0:	f04f 30ff 	mov.w	r0, #4294967295
 80172b4:	e0d0      	b.n	8017458 <_svfiprintf_r+0x1d0>
 80172b6:	2340      	movs	r3, #64	; 0x40
 80172b8:	616b      	str	r3, [r5, #20]
 80172ba:	2300      	movs	r3, #0
 80172bc:	9309      	str	r3, [sp, #36]	; 0x24
 80172be:	2320      	movs	r3, #32
 80172c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80172c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80172c8:	2330      	movs	r3, #48	; 0x30
 80172ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8017470 <_svfiprintf_r+0x1e8>
 80172ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80172d2:	f04f 0901 	mov.w	r9, #1
 80172d6:	4623      	mov	r3, r4
 80172d8:	469a      	mov	sl, r3
 80172da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80172de:	b10a      	cbz	r2, 80172e4 <_svfiprintf_r+0x5c>
 80172e0:	2a25      	cmp	r2, #37	; 0x25
 80172e2:	d1f9      	bne.n	80172d8 <_svfiprintf_r+0x50>
 80172e4:	ebba 0b04 	subs.w	fp, sl, r4
 80172e8:	d00b      	beq.n	8017302 <_svfiprintf_r+0x7a>
 80172ea:	465b      	mov	r3, fp
 80172ec:	4622      	mov	r2, r4
 80172ee:	4629      	mov	r1, r5
 80172f0:	4638      	mov	r0, r7
 80172f2:	f7ff ff6f 	bl	80171d4 <__ssputs_r>
 80172f6:	3001      	adds	r0, #1
 80172f8:	f000 80a9 	beq.w	801744e <_svfiprintf_r+0x1c6>
 80172fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80172fe:	445a      	add	r2, fp
 8017300:	9209      	str	r2, [sp, #36]	; 0x24
 8017302:	f89a 3000 	ldrb.w	r3, [sl]
 8017306:	2b00      	cmp	r3, #0
 8017308:	f000 80a1 	beq.w	801744e <_svfiprintf_r+0x1c6>
 801730c:	2300      	movs	r3, #0
 801730e:	f04f 32ff 	mov.w	r2, #4294967295
 8017312:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017316:	f10a 0a01 	add.w	sl, sl, #1
 801731a:	9304      	str	r3, [sp, #16]
 801731c:	9307      	str	r3, [sp, #28]
 801731e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017322:	931a      	str	r3, [sp, #104]	; 0x68
 8017324:	4654      	mov	r4, sl
 8017326:	2205      	movs	r2, #5
 8017328:	f814 1b01 	ldrb.w	r1, [r4], #1
 801732c:	4850      	ldr	r0, [pc, #320]	; (8017470 <_svfiprintf_r+0x1e8>)
 801732e:	f7e9 f807 	bl	8000340 <memchr>
 8017332:	9a04      	ldr	r2, [sp, #16]
 8017334:	b9d8      	cbnz	r0, 801736e <_svfiprintf_r+0xe6>
 8017336:	06d0      	lsls	r0, r2, #27
 8017338:	bf44      	itt	mi
 801733a:	2320      	movmi	r3, #32
 801733c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017340:	0711      	lsls	r1, r2, #28
 8017342:	bf44      	itt	mi
 8017344:	232b      	movmi	r3, #43	; 0x2b
 8017346:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801734a:	f89a 3000 	ldrb.w	r3, [sl]
 801734e:	2b2a      	cmp	r3, #42	; 0x2a
 8017350:	d015      	beq.n	801737e <_svfiprintf_r+0xf6>
 8017352:	9a07      	ldr	r2, [sp, #28]
 8017354:	4654      	mov	r4, sl
 8017356:	2000      	movs	r0, #0
 8017358:	f04f 0c0a 	mov.w	ip, #10
 801735c:	4621      	mov	r1, r4
 801735e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017362:	3b30      	subs	r3, #48	; 0x30
 8017364:	2b09      	cmp	r3, #9
 8017366:	d94d      	bls.n	8017404 <_svfiprintf_r+0x17c>
 8017368:	b1b0      	cbz	r0, 8017398 <_svfiprintf_r+0x110>
 801736a:	9207      	str	r2, [sp, #28]
 801736c:	e014      	b.n	8017398 <_svfiprintf_r+0x110>
 801736e:	eba0 0308 	sub.w	r3, r0, r8
 8017372:	fa09 f303 	lsl.w	r3, r9, r3
 8017376:	4313      	orrs	r3, r2
 8017378:	9304      	str	r3, [sp, #16]
 801737a:	46a2      	mov	sl, r4
 801737c:	e7d2      	b.n	8017324 <_svfiprintf_r+0x9c>
 801737e:	9b03      	ldr	r3, [sp, #12]
 8017380:	1d19      	adds	r1, r3, #4
 8017382:	681b      	ldr	r3, [r3, #0]
 8017384:	9103      	str	r1, [sp, #12]
 8017386:	2b00      	cmp	r3, #0
 8017388:	bfbb      	ittet	lt
 801738a:	425b      	neglt	r3, r3
 801738c:	f042 0202 	orrlt.w	r2, r2, #2
 8017390:	9307      	strge	r3, [sp, #28]
 8017392:	9307      	strlt	r3, [sp, #28]
 8017394:	bfb8      	it	lt
 8017396:	9204      	strlt	r2, [sp, #16]
 8017398:	7823      	ldrb	r3, [r4, #0]
 801739a:	2b2e      	cmp	r3, #46	; 0x2e
 801739c:	d10c      	bne.n	80173b8 <_svfiprintf_r+0x130>
 801739e:	7863      	ldrb	r3, [r4, #1]
 80173a0:	2b2a      	cmp	r3, #42	; 0x2a
 80173a2:	d134      	bne.n	801740e <_svfiprintf_r+0x186>
 80173a4:	9b03      	ldr	r3, [sp, #12]
 80173a6:	1d1a      	adds	r2, r3, #4
 80173a8:	681b      	ldr	r3, [r3, #0]
 80173aa:	9203      	str	r2, [sp, #12]
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	bfb8      	it	lt
 80173b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80173b4:	3402      	adds	r4, #2
 80173b6:	9305      	str	r3, [sp, #20]
 80173b8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8017480 <_svfiprintf_r+0x1f8>
 80173bc:	7821      	ldrb	r1, [r4, #0]
 80173be:	2203      	movs	r2, #3
 80173c0:	4650      	mov	r0, sl
 80173c2:	f7e8 ffbd 	bl	8000340 <memchr>
 80173c6:	b138      	cbz	r0, 80173d8 <_svfiprintf_r+0x150>
 80173c8:	9b04      	ldr	r3, [sp, #16]
 80173ca:	eba0 000a 	sub.w	r0, r0, sl
 80173ce:	2240      	movs	r2, #64	; 0x40
 80173d0:	4082      	lsls	r2, r0
 80173d2:	4313      	orrs	r3, r2
 80173d4:	3401      	adds	r4, #1
 80173d6:	9304      	str	r3, [sp, #16]
 80173d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80173dc:	4825      	ldr	r0, [pc, #148]	; (8017474 <_svfiprintf_r+0x1ec>)
 80173de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80173e2:	2206      	movs	r2, #6
 80173e4:	f7e8 ffac 	bl	8000340 <memchr>
 80173e8:	2800      	cmp	r0, #0
 80173ea:	d038      	beq.n	801745e <_svfiprintf_r+0x1d6>
 80173ec:	4b22      	ldr	r3, [pc, #136]	; (8017478 <_svfiprintf_r+0x1f0>)
 80173ee:	bb1b      	cbnz	r3, 8017438 <_svfiprintf_r+0x1b0>
 80173f0:	9b03      	ldr	r3, [sp, #12]
 80173f2:	3307      	adds	r3, #7
 80173f4:	f023 0307 	bic.w	r3, r3, #7
 80173f8:	3308      	adds	r3, #8
 80173fa:	9303      	str	r3, [sp, #12]
 80173fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173fe:	4433      	add	r3, r6
 8017400:	9309      	str	r3, [sp, #36]	; 0x24
 8017402:	e768      	b.n	80172d6 <_svfiprintf_r+0x4e>
 8017404:	fb0c 3202 	mla	r2, ip, r2, r3
 8017408:	460c      	mov	r4, r1
 801740a:	2001      	movs	r0, #1
 801740c:	e7a6      	b.n	801735c <_svfiprintf_r+0xd4>
 801740e:	2300      	movs	r3, #0
 8017410:	3401      	adds	r4, #1
 8017412:	9305      	str	r3, [sp, #20]
 8017414:	4619      	mov	r1, r3
 8017416:	f04f 0c0a 	mov.w	ip, #10
 801741a:	4620      	mov	r0, r4
 801741c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017420:	3a30      	subs	r2, #48	; 0x30
 8017422:	2a09      	cmp	r2, #9
 8017424:	d903      	bls.n	801742e <_svfiprintf_r+0x1a6>
 8017426:	2b00      	cmp	r3, #0
 8017428:	d0c6      	beq.n	80173b8 <_svfiprintf_r+0x130>
 801742a:	9105      	str	r1, [sp, #20]
 801742c:	e7c4      	b.n	80173b8 <_svfiprintf_r+0x130>
 801742e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017432:	4604      	mov	r4, r0
 8017434:	2301      	movs	r3, #1
 8017436:	e7f0      	b.n	801741a <_svfiprintf_r+0x192>
 8017438:	ab03      	add	r3, sp, #12
 801743a:	9300      	str	r3, [sp, #0]
 801743c:	462a      	mov	r2, r5
 801743e:	4b0f      	ldr	r3, [pc, #60]	; (801747c <_svfiprintf_r+0x1f4>)
 8017440:	a904      	add	r1, sp, #16
 8017442:	4638      	mov	r0, r7
 8017444:	f3af 8000 	nop.w
 8017448:	1c42      	adds	r2, r0, #1
 801744a:	4606      	mov	r6, r0
 801744c:	d1d6      	bne.n	80173fc <_svfiprintf_r+0x174>
 801744e:	89ab      	ldrh	r3, [r5, #12]
 8017450:	065b      	lsls	r3, r3, #25
 8017452:	f53f af2d 	bmi.w	80172b0 <_svfiprintf_r+0x28>
 8017456:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017458:	b01d      	add	sp, #116	; 0x74
 801745a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801745e:	ab03      	add	r3, sp, #12
 8017460:	9300      	str	r3, [sp, #0]
 8017462:	462a      	mov	r2, r5
 8017464:	4b05      	ldr	r3, [pc, #20]	; (801747c <_svfiprintf_r+0x1f4>)
 8017466:	a904      	add	r1, sp, #16
 8017468:	4638      	mov	r0, r7
 801746a:	f000 fa4b 	bl	8017904 <_printf_i>
 801746e:	e7eb      	b.n	8017448 <_svfiprintf_r+0x1c0>
 8017470:	080183f4 	.word	0x080183f4
 8017474:	080183fe 	.word	0x080183fe
 8017478:	00000000 	.word	0x00000000
 801747c:	080171d5 	.word	0x080171d5
 8017480:	080183fa 	.word	0x080183fa

08017484 <_sungetc_r>:
 8017484:	b538      	push	{r3, r4, r5, lr}
 8017486:	1c4b      	adds	r3, r1, #1
 8017488:	4614      	mov	r4, r2
 801748a:	d103      	bne.n	8017494 <_sungetc_r+0x10>
 801748c:	f04f 35ff 	mov.w	r5, #4294967295
 8017490:	4628      	mov	r0, r5
 8017492:	bd38      	pop	{r3, r4, r5, pc}
 8017494:	8993      	ldrh	r3, [r2, #12]
 8017496:	f023 0320 	bic.w	r3, r3, #32
 801749a:	8193      	strh	r3, [r2, #12]
 801749c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801749e:	6852      	ldr	r2, [r2, #4]
 80174a0:	b2cd      	uxtb	r5, r1
 80174a2:	b18b      	cbz	r3, 80174c8 <_sungetc_r+0x44>
 80174a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80174a6:	4293      	cmp	r3, r2
 80174a8:	dd08      	ble.n	80174bc <_sungetc_r+0x38>
 80174aa:	6823      	ldr	r3, [r4, #0]
 80174ac:	1e5a      	subs	r2, r3, #1
 80174ae:	6022      	str	r2, [r4, #0]
 80174b0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80174b4:	6863      	ldr	r3, [r4, #4]
 80174b6:	3301      	adds	r3, #1
 80174b8:	6063      	str	r3, [r4, #4]
 80174ba:	e7e9      	b.n	8017490 <_sungetc_r+0xc>
 80174bc:	4621      	mov	r1, r4
 80174be:	f000 fcca 	bl	8017e56 <__submore>
 80174c2:	2800      	cmp	r0, #0
 80174c4:	d0f1      	beq.n	80174aa <_sungetc_r+0x26>
 80174c6:	e7e1      	b.n	801748c <_sungetc_r+0x8>
 80174c8:	6921      	ldr	r1, [r4, #16]
 80174ca:	6823      	ldr	r3, [r4, #0]
 80174cc:	b151      	cbz	r1, 80174e4 <_sungetc_r+0x60>
 80174ce:	4299      	cmp	r1, r3
 80174d0:	d208      	bcs.n	80174e4 <_sungetc_r+0x60>
 80174d2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80174d6:	42a9      	cmp	r1, r5
 80174d8:	d104      	bne.n	80174e4 <_sungetc_r+0x60>
 80174da:	3b01      	subs	r3, #1
 80174dc:	3201      	adds	r2, #1
 80174de:	6023      	str	r3, [r4, #0]
 80174e0:	6062      	str	r2, [r4, #4]
 80174e2:	e7d5      	b.n	8017490 <_sungetc_r+0xc>
 80174e4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80174e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80174ec:	6363      	str	r3, [r4, #52]	; 0x34
 80174ee:	2303      	movs	r3, #3
 80174f0:	63a3      	str	r3, [r4, #56]	; 0x38
 80174f2:	4623      	mov	r3, r4
 80174f4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80174f8:	6023      	str	r3, [r4, #0]
 80174fa:	2301      	movs	r3, #1
 80174fc:	e7dc      	b.n	80174b8 <_sungetc_r+0x34>

080174fe <__ssrefill_r>:
 80174fe:	b510      	push	{r4, lr}
 8017500:	460c      	mov	r4, r1
 8017502:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017504:	b169      	cbz	r1, 8017522 <__ssrefill_r+0x24>
 8017506:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801750a:	4299      	cmp	r1, r3
 801750c:	d001      	beq.n	8017512 <__ssrefill_r+0x14>
 801750e:	f7ff fd69 	bl	8016fe4 <_free_r>
 8017512:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017514:	6063      	str	r3, [r4, #4]
 8017516:	2000      	movs	r0, #0
 8017518:	6360      	str	r0, [r4, #52]	; 0x34
 801751a:	b113      	cbz	r3, 8017522 <__ssrefill_r+0x24>
 801751c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801751e:	6023      	str	r3, [r4, #0]
 8017520:	bd10      	pop	{r4, pc}
 8017522:	6923      	ldr	r3, [r4, #16]
 8017524:	6023      	str	r3, [r4, #0]
 8017526:	2300      	movs	r3, #0
 8017528:	6063      	str	r3, [r4, #4]
 801752a:	89a3      	ldrh	r3, [r4, #12]
 801752c:	f043 0320 	orr.w	r3, r3, #32
 8017530:	81a3      	strh	r3, [r4, #12]
 8017532:	f04f 30ff 	mov.w	r0, #4294967295
 8017536:	e7f3      	b.n	8017520 <__ssrefill_r+0x22>

08017538 <__ssvfiscanf_r>:
 8017538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801753c:	460c      	mov	r4, r1
 801753e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8017542:	2100      	movs	r1, #0
 8017544:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8017548:	49a6      	ldr	r1, [pc, #664]	; (80177e4 <__ssvfiscanf_r+0x2ac>)
 801754a:	91a0      	str	r1, [sp, #640]	; 0x280
 801754c:	f10d 0804 	add.w	r8, sp, #4
 8017550:	49a5      	ldr	r1, [pc, #660]	; (80177e8 <__ssvfiscanf_r+0x2b0>)
 8017552:	4fa6      	ldr	r7, [pc, #664]	; (80177ec <__ssvfiscanf_r+0x2b4>)
 8017554:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80177f0 <__ssvfiscanf_r+0x2b8>
 8017558:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801755c:	4606      	mov	r6, r0
 801755e:	91a1      	str	r1, [sp, #644]	; 0x284
 8017560:	9300      	str	r3, [sp, #0]
 8017562:	7813      	ldrb	r3, [r2, #0]
 8017564:	2b00      	cmp	r3, #0
 8017566:	f000 815a 	beq.w	801781e <__ssvfiscanf_r+0x2e6>
 801756a:	5cf9      	ldrb	r1, [r7, r3]
 801756c:	f011 0108 	ands.w	r1, r1, #8
 8017570:	f102 0501 	add.w	r5, r2, #1
 8017574:	d019      	beq.n	80175aa <__ssvfiscanf_r+0x72>
 8017576:	6863      	ldr	r3, [r4, #4]
 8017578:	2b00      	cmp	r3, #0
 801757a:	dd0f      	ble.n	801759c <__ssvfiscanf_r+0x64>
 801757c:	6823      	ldr	r3, [r4, #0]
 801757e:	781a      	ldrb	r2, [r3, #0]
 8017580:	5cba      	ldrb	r2, [r7, r2]
 8017582:	0712      	lsls	r2, r2, #28
 8017584:	d401      	bmi.n	801758a <__ssvfiscanf_r+0x52>
 8017586:	462a      	mov	r2, r5
 8017588:	e7eb      	b.n	8017562 <__ssvfiscanf_r+0x2a>
 801758a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801758c:	3201      	adds	r2, #1
 801758e:	9245      	str	r2, [sp, #276]	; 0x114
 8017590:	6862      	ldr	r2, [r4, #4]
 8017592:	3301      	adds	r3, #1
 8017594:	3a01      	subs	r2, #1
 8017596:	6062      	str	r2, [r4, #4]
 8017598:	6023      	str	r3, [r4, #0]
 801759a:	e7ec      	b.n	8017576 <__ssvfiscanf_r+0x3e>
 801759c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801759e:	4621      	mov	r1, r4
 80175a0:	4630      	mov	r0, r6
 80175a2:	4798      	blx	r3
 80175a4:	2800      	cmp	r0, #0
 80175a6:	d0e9      	beq.n	801757c <__ssvfiscanf_r+0x44>
 80175a8:	e7ed      	b.n	8017586 <__ssvfiscanf_r+0x4e>
 80175aa:	2b25      	cmp	r3, #37	; 0x25
 80175ac:	d012      	beq.n	80175d4 <__ssvfiscanf_r+0x9c>
 80175ae:	469a      	mov	sl, r3
 80175b0:	6863      	ldr	r3, [r4, #4]
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	f340 8091 	ble.w	80176da <__ssvfiscanf_r+0x1a2>
 80175b8:	6822      	ldr	r2, [r4, #0]
 80175ba:	7813      	ldrb	r3, [r2, #0]
 80175bc:	4553      	cmp	r3, sl
 80175be:	f040 812e 	bne.w	801781e <__ssvfiscanf_r+0x2e6>
 80175c2:	6863      	ldr	r3, [r4, #4]
 80175c4:	3b01      	subs	r3, #1
 80175c6:	6063      	str	r3, [r4, #4]
 80175c8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80175ca:	3201      	adds	r2, #1
 80175cc:	3301      	adds	r3, #1
 80175ce:	6022      	str	r2, [r4, #0]
 80175d0:	9345      	str	r3, [sp, #276]	; 0x114
 80175d2:	e7d8      	b.n	8017586 <__ssvfiscanf_r+0x4e>
 80175d4:	9141      	str	r1, [sp, #260]	; 0x104
 80175d6:	9143      	str	r1, [sp, #268]	; 0x10c
 80175d8:	7853      	ldrb	r3, [r2, #1]
 80175da:	2b2a      	cmp	r3, #42	; 0x2a
 80175dc:	bf02      	ittt	eq
 80175de:	2310      	moveq	r3, #16
 80175e0:	1c95      	addeq	r5, r2, #2
 80175e2:	9341      	streq	r3, [sp, #260]	; 0x104
 80175e4:	220a      	movs	r2, #10
 80175e6:	46aa      	mov	sl, r5
 80175e8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80175ec:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80175f0:	2b09      	cmp	r3, #9
 80175f2:	d91c      	bls.n	801762e <__ssvfiscanf_r+0xf6>
 80175f4:	487e      	ldr	r0, [pc, #504]	; (80177f0 <__ssvfiscanf_r+0x2b8>)
 80175f6:	2203      	movs	r2, #3
 80175f8:	f7e8 fea2 	bl	8000340 <memchr>
 80175fc:	b138      	cbz	r0, 801760e <__ssvfiscanf_r+0xd6>
 80175fe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017600:	eba0 0009 	sub.w	r0, r0, r9
 8017604:	2301      	movs	r3, #1
 8017606:	4083      	lsls	r3, r0
 8017608:	4313      	orrs	r3, r2
 801760a:	9341      	str	r3, [sp, #260]	; 0x104
 801760c:	4655      	mov	r5, sl
 801760e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017612:	2b78      	cmp	r3, #120	; 0x78
 8017614:	d806      	bhi.n	8017624 <__ssvfiscanf_r+0xec>
 8017616:	2b57      	cmp	r3, #87	; 0x57
 8017618:	d810      	bhi.n	801763c <__ssvfiscanf_r+0x104>
 801761a:	2b25      	cmp	r3, #37	; 0x25
 801761c:	d0c7      	beq.n	80175ae <__ssvfiscanf_r+0x76>
 801761e:	d857      	bhi.n	80176d0 <__ssvfiscanf_r+0x198>
 8017620:	2b00      	cmp	r3, #0
 8017622:	d065      	beq.n	80176f0 <__ssvfiscanf_r+0x1b8>
 8017624:	2303      	movs	r3, #3
 8017626:	9347      	str	r3, [sp, #284]	; 0x11c
 8017628:	230a      	movs	r3, #10
 801762a:	9342      	str	r3, [sp, #264]	; 0x108
 801762c:	e076      	b.n	801771c <__ssvfiscanf_r+0x1e4>
 801762e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017630:	fb02 1103 	mla	r1, r2, r3, r1
 8017634:	3930      	subs	r1, #48	; 0x30
 8017636:	9143      	str	r1, [sp, #268]	; 0x10c
 8017638:	4655      	mov	r5, sl
 801763a:	e7d4      	b.n	80175e6 <__ssvfiscanf_r+0xae>
 801763c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8017640:	2a20      	cmp	r2, #32
 8017642:	d8ef      	bhi.n	8017624 <__ssvfiscanf_r+0xec>
 8017644:	a101      	add	r1, pc, #4	; (adr r1, 801764c <__ssvfiscanf_r+0x114>)
 8017646:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801764a:	bf00      	nop
 801764c:	080176ff 	.word	0x080176ff
 8017650:	08017625 	.word	0x08017625
 8017654:	08017625 	.word	0x08017625
 8017658:	0801775d 	.word	0x0801775d
 801765c:	08017625 	.word	0x08017625
 8017660:	08017625 	.word	0x08017625
 8017664:	08017625 	.word	0x08017625
 8017668:	08017625 	.word	0x08017625
 801766c:	08017625 	.word	0x08017625
 8017670:	08017625 	.word	0x08017625
 8017674:	08017625 	.word	0x08017625
 8017678:	08017773 	.word	0x08017773
 801767c:	08017759 	.word	0x08017759
 8017680:	080176d7 	.word	0x080176d7
 8017684:	080176d7 	.word	0x080176d7
 8017688:	080176d7 	.word	0x080176d7
 801768c:	08017625 	.word	0x08017625
 8017690:	08017715 	.word	0x08017715
 8017694:	08017625 	.word	0x08017625
 8017698:	08017625 	.word	0x08017625
 801769c:	08017625 	.word	0x08017625
 80176a0:	08017625 	.word	0x08017625
 80176a4:	08017783 	.word	0x08017783
 80176a8:	08017751 	.word	0x08017751
 80176ac:	080176f7 	.word	0x080176f7
 80176b0:	08017625 	.word	0x08017625
 80176b4:	08017625 	.word	0x08017625
 80176b8:	0801777f 	.word	0x0801777f
 80176bc:	08017625 	.word	0x08017625
 80176c0:	08017759 	.word	0x08017759
 80176c4:	08017625 	.word	0x08017625
 80176c8:	08017625 	.word	0x08017625
 80176cc:	080176ff 	.word	0x080176ff
 80176d0:	3b45      	subs	r3, #69	; 0x45
 80176d2:	2b02      	cmp	r3, #2
 80176d4:	d8a6      	bhi.n	8017624 <__ssvfiscanf_r+0xec>
 80176d6:	2305      	movs	r3, #5
 80176d8:	e01f      	b.n	801771a <__ssvfiscanf_r+0x1e2>
 80176da:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80176dc:	4621      	mov	r1, r4
 80176de:	4630      	mov	r0, r6
 80176e0:	4798      	blx	r3
 80176e2:	2800      	cmp	r0, #0
 80176e4:	f43f af68 	beq.w	80175b8 <__ssvfiscanf_r+0x80>
 80176e8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80176ea:	2800      	cmp	r0, #0
 80176ec:	f040 808d 	bne.w	801780a <__ssvfiscanf_r+0x2d2>
 80176f0:	f04f 30ff 	mov.w	r0, #4294967295
 80176f4:	e08f      	b.n	8017816 <__ssvfiscanf_r+0x2de>
 80176f6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80176f8:	f042 0220 	orr.w	r2, r2, #32
 80176fc:	9241      	str	r2, [sp, #260]	; 0x104
 80176fe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017700:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017704:	9241      	str	r2, [sp, #260]	; 0x104
 8017706:	2210      	movs	r2, #16
 8017708:	2b6f      	cmp	r3, #111	; 0x6f
 801770a:	9242      	str	r2, [sp, #264]	; 0x108
 801770c:	bf34      	ite	cc
 801770e:	2303      	movcc	r3, #3
 8017710:	2304      	movcs	r3, #4
 8017712:	e002      	b.n	801771a <__ssvfiscanf_r+0x1e2>
 8017714:	2300      	movs	r3, #0
 8017716:	9342      	str	r3, [sp, #264]	; 0x108
 8017718:	2303      	movs	r3, #3
 801771a:	9347      	str	r3, [sp, #284]	; 0x11c
 801771c:	6863      	ldr	r3, [r4, #4]
 801771e:	2b00      	cmp	r3, #0
 8017720:	dd3d      	ble.n	801779e <__ssvfiscanf_r+0x266>
 8017722:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017724:	0659      	lsls	r1, r3, #25
 8017726:	d404      	bmi.n	8017732 <__ssvfiscanf_r+0x1fa>
 8017728:	6823      	ldr	r3, [r4, #0]
 801772a:	781a      	ldrb	r2, [r3, #0]
 801772c:	5cba      	ldrb	r2, [r7, r2]
 801772e:	0712      	lsls	r2, r2, #28
 8017730:	d43c      	bmi.n	80177ac <__ssvfiscanf_r+0x274>
 8017732:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8017734:	2b02      	cmp	r3, #2
 8017736:	dc4b      	bgt.n	80177d0 <__ssvfiscanf_r+0x298>
 8017738:	466b      	mov	r3, sp
 801773a:	4622      	mov	r2, r4
 801773c:	a941      	add	r1, sp, #260	; 0x104
 801773e:	4630      	mov	r0, r6
 8017740:	f000 fa02 	bl	8017b48 <_scanf_chars>
 8017744:	2801      	cmp	r0, #1
 8017746:	d06a      	beq.n	801781e <__ssvfiscanf_r+0x2e6>
 8017748:	2802      	cmp	r0, #2
 801774a:	f47f af1c 	bne.w	8017586 <__ssvfiscanf_r+0x4e>
 801774e:	e7cb      	b.n	80176e8 <__ssvfiscanf_r+0x1b0>
 8017750:	2308      	movs	r3, #8
 8017752:	9342      	str	r3, [sp, #264]	; 0x108
 8017754:	2304      	movs	r3, #4
 8017756:	e7e0      	b.n	801771a <__ssvfiscanf_r+0x1e2>
 8017758:	220a      	movs	r2, #10
 801775a:	e7d5      	b.n	8017708 <__ssvfiscanf_r+0x1d0>
 801775c:	4629      	mov	r1, r5
 801775e:	4640      	mov	r0, r8
 8017760:	f000 fb40 	bl	8017de4 <__sccl>
 8017764:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801776a:	9341      	str	r3, [sp, #260]	; 0x104
 801776c:	4605      	mov	r5, r0
 801776e:	2301      	movs	r3, #1
 8017770:	e7d3      	b.n	801771a <__ssvfiscanf_r+0x1e2>
 8017772:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017778:	9341      	str	r3, [sp, #260]	; 0x104
 801777a:	2300      	movs	r3, #0
 801777c:	e7cd      	b.n	801771a <__ssvfiscanf_r+0x1e2>
 801777e:	2302      	movs	r3, #2
 8017780:	e7cb      	b.n	801771a <__ssvfiscanf_r+0x1e2>
 8017782:	9841      	ldr	r0, [sp, #260]	; 0x104
 8017784:	06c3      	lsls	r3, r0, #27
 8017786:	f53f aefe 	bmi.w	8017586 <__ssvfiscanf_r+0x4e>
 801778a:	9b00      	ldr	r3, [sp, #0]
 801778c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801778e:	1d19      	adds	r1, r3, #4
 8017790:	9100      	str	r1, [sp, #0]
 8017792:	681b      	ldr	r3, [r3, #0]
 8017794:	07c0      	lsls	r0, r0, #31
 8017796:	bf4c      	ite	mi
 8017798:	801a      	strhmi	r2, [r3, #0]
 801779a:	601a      	strpl	r2, [r3, #0]
 801779c:	e6f3      	b.n	8017586 <__ssvfiscanf_r+0x4e>
 801779e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80177a0:	4621      	mov	r1, r4
 80177a2:	4630      	mov	r0, r6
 80177a4:	4798      	blx	r3
 80177a6:	2800      	cmp	r0, #0
 80177a8:	d0bb      	beq.n	8017722 <__ssvfiscanf_r+0x1ea>
 80177aa:	e79d      	b.n	80176e8 <__ssvfiscanf_r+0x1b0>
 80177ac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80177ae:	3201      	adds	r2, #1
 80177b0:	9245      	str	r2, [sp, #276]	; 0x114
 80177b2:	6862      	ldr	r2, [r4, #4]
 80177b4:	3a01      	subs	r2, #1
 80177b6:	2a00      	cmp	r2, #0
 80177b8:	6062      	str	r2, [r4, #4]
 80177ba:	dd02      	ble.n	80177c2 <__ssvfiscanf_r+0x28a>
 80177bc:	3301      	adds	r3, #1
 80177be:	6023      	str	r3, [r4, #0]
 80177c0:	e7b2      	b.n	8017728 <__ssvfiscanf_r+0x1f0>
 80177c2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80177c4:	4621      	mov	r1, r4
 80177c6:	4630      	mov	r0, r6
 80177c8:	4798      	blx	r3
 80177ca:	2800      	cmp	r0, #0
 80177cc:	d0ac      	beq.n	8017728 <__ssvfiscanf_r+0x1f0>
 80177ce:	e78b      	b.n	80176e8 <__ssvfiscanf_r+0x1b0>
 80177d0:	2b04      	cmp	r3, #4
 80177d2:	dc0f      	bgt.n	80177f4 <__ssvfiscanf_r+0x2bc>
 80177d4:	466b      	mov	r3, sp
 80177d6:	4622      	mov	r2, r4
 80177d8:	a941      	add	r1, sp, #260	; 0x104
 80177da:	4630      	mov	r0, r6
 80177dc:	f000 fa0e 	bl	8017bfc <_scanf_i>
 80177e0:	e7b0      	b.n	8017744 <__ssvfiscanf_r+0x20c>
 80177e2:	bf00      	nop
 80177e4:	08017485 	.word	0x08017485
 80177e8:	080174ff 	.word	0x080174ff
 80177ec:	08018443 	.word	0x08018443
 80177f0:	080183fa 	.word	0x080183fa
 80177f4:	4b0b      	ldr	r3, [pc, #44]	; (8017824 <__ssvfiscanf_r+0x2ec>)
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	f43f aec5 	beq.w	8017586 <__ssvfiscanf_r+0x4e>
 80177fc:	466b      	mov	r3, sp
 80177fe:	4622      	mov	r2, r4
 8017800:	a941      	add	r1, sp, #260	; 0x104
 8017802:	4630      	mov	r0, r6
 8017804:	f3af 8000 	nop.w
 8017808:	e79c      	b.n	8017744 <__ssvfiscanf_r+0x20c>
 801780a:	89a3      	ldrh	r3, [r4, #12]
 801780c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8017810:	bf18      	it	ne
 8017812:	f04f 30ff 	movne.w	r0, #4294967295
 8017816:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801781a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801781e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017820:	e7f9      	b.n	8017816 <__ssvfiscanf_r+0x2de>
 8017822:	bf00      	nop
 8017824:	00000000 	.word	0x00000000

08017828 <_printf_common>:
 8017828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801782c:	4616      	mov	r6, r2
 801782e:	4699      	mov	r9, r3
 8017830:	688a      	ldr	r2, [r1, #8]
 8017832:	690b      	ldr	r3, [r1, #16]
 8017834:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017838:	4293      	cmp	r3, r2
 801783a:	bfb8      	it	lt
 801783c:	4613      	movlt	r3, r2
 801783e:	6033      	str	r3, [r6, #0]
 8017840:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017844:	4607      	mov	r7, r0
 8017846:	460c      	mov	r4, r1
 8017848:	b10a      	cbz	r2, 801784e <_printf_common+0x26>
 801784a:	3301      	adds	r3, #1
 801784c:	6033      	str	r3, [r6, #0]
 801784e:	6823      	ldr	r3, [r4, #0]
 8017850:	0699      	lsls	r1, r3, #26
 8017852:	bf42      	ittt	mi
 8017854:	6833      	ldrmi	r3, [r6, #0]
 8017856:	3302      	addmi	r3, #2
 8017858:	6033      	strmi	r3, [r6, #0]
 801785a:	6825      	ldr	r5, [r4, #0]
 801785c:	f015 0506 	ands.w	r5, r5, #6
 8017860:	d106      	bne.n	8017870 <_printf_common+0x48>
 8017862:	f104 0a19 	add.w	sl, r4, #25
 8017866:	68e3      	ldr	r3, [r4, #12]
 8017868:	6832      	ldr	r2, [r6, #0]
 801786a:	1a9b      	subs	r3, r3, r2
 801786c:	42ab      	cmp	r3, r5
 801786e:	dc26      	bgt.n	80178be <_printf_common+0x96>
 8017870:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017874:	1e13      	subs	r3, r2, #0
 8017876:	6822      	ldr	r2, [r4, #0]
 8017878:	bf18      	it	ne
 801787a:	2301      	movne	r3, #1
 801787c:	0692      	lsls	r2, r2, #26
 801787e:	d42b      	bmi.n	80178d8 <_printf_common+0xb0>
 8017880:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017884:	4649      	mov	r1, r9
 8017886:	4638      	mov	r0, r7
 8017888:	47c0      	blx	r8
 801788a:	3001      	adds	r0, #1
 801788c:	d01e      	beq.n	80178cc <_printf_common+0xa4>
 801788e:	6823      	ldr	r3, [r4, #0]
 8017890:	6922      	ldr	r2, [r4, #16]
 8017892:	f003 0306 	and.w	r3, r3, #6
 8017896:	2b04      	cmp	r3, #4
 8017898:	bf02      	ittt	eq
 801789a:	68e5      	ldreq	r5, [r4, #12]
 801789c:	6833      	ldreq	r3, [r6, #0]
 801789e:	1aed      	subeq	r5, r5, r3
 80178a0:	68a3      	ldr	r3, [r4, #8]
 80178a2:	bf0c      	ite	eq
 80178a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80178a8:	2500      	movne	r5, #0
 80178aa:	4293      	cmp	r3, r2
 80178ac:	bfc4      	itt	gt
 80178ae:	1a9b      	subgt	r3, r3, r2
 80178b0:	18ed      	addgt	r5, r5, r3
 80178b2:	2600      	movs	r6, #0
 80178b4:	341a      	adds	r4, #26
 80178b6:	42b5      	cmp	r5, r6
 80178b8:	d11a      	bne.n	80178f0 <_printf_common+0xc8>
 80178ba:	2000      	movs	r0, #0
 80178bc:	e008      	b.n	80178d0 <_printf_common+0xa8>
 80178be:	2301      	movs	r3, #1
 80178c0:	4652      	mov	r2, sl
 80178c2:	4649      	mov	r1, r9
 80178c4:	4638      	mov	r0, r7
 80178c6:	47c0      	blx	r8
 80178c8:	3001      	adds	r0, #1
 80178ca:	d103      	bne.n	80178d4 <_printf_common+0xac>
 80178cc:	f04f 30ff 	mov.w	r0, #4294967295
 80178d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178d4:	3501      	adds	r5, #1
 80178d6:	e7c6      	b.n	8017866 <_printf_common+0x3e>
 80178d8:	18e1      	adds	r1, r4, r3
 80178da:	1c5a      	adds	r2, r3, #1
 80178dc:	2030      	movs	r0, #48	; 0x30
 80178de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80178e2:	4422      	add	r2, r4
 80178e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80178e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80178ec:	3302      	adds	r3, #2
 80178ee:	e7c7      	b.n	8017880 <_printf_common+0x58>
 80178f0:	2301      	movs	r3, #1
 80178f2:	4622      	mov	r2, r4
 80178f4:	4649      	mov	r1, r9
 80178f6:	4638      	mov	r0, r7
 80178f8:	47c0      	blx	r8
 80178fa:	3001      	adds	r0, #1
 80178fc:	d0e6      	beq.n	80178cc <_printf_common+0xa4>
 80178fe:	3601      	adds	r6, #1
 8017900:	e7d9      	b.n	80178b6 <_printf_common+0x8e>
	...

08017904 <_printf_i>:
 8017904:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017908:	7e0f      	ldrb	r7, [r1, #24]
 801790a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801790c:	2f78      	cmp	r7, #120	; 0x78
 801790e:	4691      	mov	r9, r2
 8017910:	4680      	mov	r8, r0
 8017912:	460c      	mov	r4, r1
 8017914:	469a      	mov	sl, r3
 8017916:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801791a:	d807      	bhi.n	801792c <_printf_i+0x28>
 801791c:	2f62      	cmp	r7, #98	; 0x62
 801791e:	d80a      	bhi.n	8017936 <_printf_i+0x32>
 8017920:	2f00      	cmp	r7, #0
 8017922:	f000 80d4 	beq.w	8017ace <_printf_i+0x1ca>
 8017926:	2f58      	cmp	r7, #88	; 0x58
 8017928:	f000 80c0 	beq.w	8017aac <_printf_i+0x1a8>
 801792c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017930:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017934:	e03a      	b.n	80179ac <_printf_i+0xa8>
 8017936:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801793a:	2b15      	cmp	r3, #21
 801793c:	d8f6      	bhi.n	801792c <_printf_i+0x28>
 801793e:	a101      	add	r1, pc, #4	; (adr r1, 8017944 <_printf_i+0x40>)
 8017940:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017944:	0801799d 	.word	0x0801799d
 8017948:	080179b1 	.word	0x080179b1
 801794c:	0801792d 	.word	0x0801792d
 8017950:	0801792d 	.word	0x0801792d
 8017954:	0801792d 	.word	0x0801792d
 8017958:	0801792d 	.word	0x0801792d
 801795c:	080179b1 	.word	0x080179b1
 8017960:	0801792d 	.word	0x0801792d
 8017964:	0801792d 	.word	0x0801792d
 8017968:	0801792d 	.word	0x0801792d
 801796c:	0801792d 	.word	0x0801792d
 8017970:	08017ab5 	.word	0x08017ab5
 8017974:	080179dd 	.word	0x080179dd
 8017978:	08017a6f 	.word	0x08017a6f
 801797c:	0801792d 	.word	0x0801792d
 8017980:	0801792d 	.word	0x0801792d
 8017984:	08017ad7 	.word	0x08017ad7
 8017988:	0801792d 	.word	0x0801792d
 801798c:	080179dd 	.word	0x080179dd
 8017990:	0801792d 	.word	0x0801792d
 8017994:	0801792d 	.word	0x0801792d
 8017998:	08017a77 	.word	0x08017a77
 801799c:	682b      	ldr	r3, [r5, #0]
 801799e:	1d1a      	adds	r2, r3, #4
 80179a0:	681b      	ldr	r3, [r3, #0]
 80179a2:	602a      	str	r2, [r5, #0]
 80179a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80179a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80179ac:	2301      	movs	r3, #1
 80179ae:	e09f      	b.n	8017af0 <_printf_i+0x1ec>
 80179b0:	6820      	ldr	r0, [r4, #0]
 80179b2:	682b      	ldr	r3, [r5, #0]
 80179b4:	0607      	lsls	r7, r0, #24
 80179b6:	f103 0104 	add.w	r1, r3, #4
 80179ba:	6029      	str	r1, [r5, #0]
 80179bc:	d501      	bpl.n	80179c2 <_printf_i+0xbe>
 80179be:	681e      	ldr	r6, [r3, #0]
 80179c0:	e003      	b.n	80179ca <_printf_i+0xc6>
 80179c2:	0646      	lsls	r6, r0, #25
 80179c4:	d5fb      	bpl.n	80179be <_printf_i+0xba>
 80179c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80179ca:	2e00      	cmp	r6, #0
 80179cc:	da03      	bge.n	80179d6 <_printf_i+0xd2>
 80179ce:	232d      	movs	r3, #45	; 0x2d
 80179d0:	4276      	negs	r6, r6
 80179d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80179d6:	485a      	ldr	r0, [pc, #360]	; (8017b40 <_printf_i+0x23c>)
 80179d8:	230a      	movs	r3, #10
 80179da:	e012      	b.n	8017a02 <_printf_i+0xfe>
 80179dc:	682b      	ldr	r3, [r5, #0]
 80179de:	6820      	ldr	r0, [r4, #0]
 80179e0:	1d19      	adds	r1, r3, #4
 80179e2:	6029      	str	r1, [r5, #0]
 80179e4:	0605      	lsls	r5, r0, #24
 80179e6:	d501      	bpl.n	80179ec <_printf_i+0xe8>
 80179e8:	681e      	ldr	r6, [r3, #0]
 80179ea:	e002      	b.n	80179f2 <_printf_i+0xee>
 80179ec:	0641      	lsls	r1, r0, #25
 80179ee:	d5fb      	bpl.n	80179e8 <_printf_i+0xe4>
 80179f0:	881e      	ldrh	r6, [r3, #0]
 80179f2:	4853      	ldr	r0, [pc, #332]	; (8017b40 <_printf_i+0x23c>)
 80179f4:	2f6f      	cmp	r7, #111	; 0x6f
 80179f6:	bf0c      	ite	eq
 80179f8:	2308      	moveq	r3, #8
 80179fa:	230a      	movne	r3, #10
 80179fc:	2100      	movs	r1, #0
 80179fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017a02:	6865      	ldr	r5, [r4, #4]
 8017a04:	60a5      	str	r5, [r4, #8]
 8017a06:	2d00      	cmp	r5, #0
 8017a08:	bfa2      	ittt	ge
 8017a0a:	6821      	ldrge	r1, [r4, #0]
 8017a0c:	f021 0104 	bicge.w	r1, r1, #4
 8017a10:	6021      	strge	r1, [r4, #0]
 8017a12:	b90e      	cbnz	r6, 8017a18 <_printf_i+0x114>
 8017a14:	2d00      	cmp	r5, #0
 8017a16:	d04b      	beq.n	8017ab0 <_printf_i+0x1ac>
 8017a18:	4615      	mov	r5, r2
 8017a1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8017a1e:	fb03 6711 	mls	r7, r3, r1, r6
 8017a22:	5dc7      	ldrb	r7, [r0, r7]
 8017a24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017a28:	4637      	mov	r7, r6
 8017a2a:	42bb      	cmp	r3, r7
 8017a2c:	460e      	mov	r6, r1
 8017a2e:	d9f4      	bls.n	8017a1a <_printf_i+0x116>
 8017a30:	2b08      	cmp	r3, #8
 8017a32:	d10b      	bne.n	8017a4c <_printf_i+0x148>
 8017a34:	6823      	ldr	r3, [r4, #0]
 8017a36:	07de      	lsls	r6, r3, #31
 8017a38:	d508      	bpl.n	8017a4c <_printf_i+0x148>
 8017a3a:	6923      	ldr	r3, [r4, #16]
 8017a3c:	6861      	ldr	r1, [r4, #4]
 8017a3e:	4299      	cmp	r1, r3
 8017a40:	bfde      	ittt	le
 8017a42:	2330      	movle	r3, #48	; 0x30
 8017a44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017a48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017a4c:	1b52      	subs	r2, r2, r5
 8017a4e:	6122      	str	r2, [r4, #16]
 8017a50:	f8cd a000 	str.w	sl, [sp]
 8017a54:	464b      	mov	r3, r9
 8017a56:	aa03      	add	r2, sp, #12
 8017a58:	4621      	mov	r1, r4
 8017a5a:	4640      	mov	r0, r8
 8017a5c:	f7ff fee4 	bl	8017828 <_printf_common>
 8017a60:	3001      	adds	r0, #1
 8017a62:	d14a      	bne.n	8017afa <_printf_i+0x1f6>
 8017a64:	f04f 30ff 	mov.w	r0, #4294967295
 8017a68:	b004      	add	sp, #16
 8017a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a6e:	6823      	ldr	r3, [r4, #0]
 8017a70:	f043 0320 	orr.w	r3, r3, #32
 8017a74:	6023      	str	r3, [r4, #0]
 8017a76:	4833      	ldr	r0, [pc, #204]	; (8017b44 <_printf_i+0x240>)
 8017a78:	2778      	movs	r7, #120	; 0x78
 8017a7a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017a7e:	6823      	ldr	r3, [r4, #0]
 8017a80:	6829      	ldr	r1, [r5, #0]
 8017a82:	061f      	lsls	r7, r3, #24
 8017a84:	f851 6b04 	ldr.w	r6, [r1], #4
 8017a88:	d402      	bmi.n	8017a90 <_printf_i+0x18c>
 8017a8a:	065f      	lsls	r7, r3, #25
 8017a8c:	bf48      	it	mi
 8017a8e:	b2b6      	uxthmi	r6, r6
 8017a90:	07df      	lsls	r7, r3, #31
 8017a92:	bf48      	it	mi
 8017a94:	f043 0320 	orrmi.w	r3, r3, #32
 8017a98:	6029      	str	r1, [r5, #0]
 8017a9a:	bf48      	it	mi
 8017a9c:	6023      	strmi	r3, [r4, #0]
 8017a9e:	b91e      	cbnz	r6, 8017aa8 <_printf_i+0x1a4>
 8017aa0:	6823      	ldr	r3, [r4, #0]
 8017aa2:	f023 0320 	bic.w	r3, r3, #32
 8017aa6:	6023      	str	r3, [r4, #0]
 8017aa8:	2310      	movs	r3, #16
 8017aaa:	e7a7      	b.n	80179fc <_printf_i+0xf8>
 8017aac:	4824      	ldr	r0, [pc, #144]	; (8017b40 <_printf_i+0x23c>)
 8017aae:	e7e4      	b.n	8017a7a <_printf_i+0x176>
 8017ab0:	4615      	mov	r5, r2
 8017ab2:	e7bd      	b.n	8017a30 <_printf_i+0x12c>
 8017ab4:	682b      	ldr	r3, [r5, #0]
 8017ab6:	6826      	ldr	r6, [r4, #0]
 8017ab8:	6961      	ldr	r1, [r4, #20]
 8017aba:	1d18      	adds	r0, r3, #4
 8017abc:	6028      	str	r0, [r5, #0]
 8017abe:	0635      	lsls	r5, r6, #24
 8017ac0:	681b      	ldr	r3, [r3, #0]
 8017ac2:	d501      	bpl.n	8017ac8 <_printf_i+0x1c4>
 8017ac4:	6019      	str	r1, [r3, #0]
 8017ac6:	e002      	b.n	8017ace <_printf_i+0x1ca>
 8017ac8:	0670      	lsls	r0, r6, #25
 8017aca:	d5fb      	bpl.n	8017ac4 <_printf_i+0x1c0>
 8017acc:	8019      	strh	r1, [r3, #0]
 8017ace:	2300      	movs	r3, #0
 8017ad0:	6123      	str	r3, [r4, #16]
 8017ad2:	4615      	mov	r5, r2
 8017ad4:	e7bc      	b.n	8017a50 <_printf_i+0x14c>
 8017ad6:	682b      	ldr	r3, [r5, #0]
 8017ad8:	1d1a      	adds	r2, r3, #4
 8017ada:	602a      	str	r2, [r5, #0]
 8017adc:	681d      	ldr	r5, [r3, #0]
 8017ade:	6862      	ldr	r2, [r4, #4]
 8017ae0:	2100      	movs	r1, #0
 8017ae2:	4628      	mov	r0, r5
 8017ae4:	f7e8 fc2c 	bl	8000340 <memchr>
 8017ae8:	b108      	cbz	r0, 8017aee <_printf_i+0x1ea>
 8017aea:	1b40      	subs	r0, r0, r5
 8017aec:	6060      	str	r0, [r4, #4]
 8017aee:	6863      	ldr	r3, [r4, #4]
 8017af0:	6123      	str	r3, [r4, #16]
 8017af2:	2300      	movs	r3, #0
 8017af4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017af8:	e7aa      	b.n	8017a50 <_printf_i+0x14c>
 8017afa:	6923      	ldr	r3, [r4, #16]
 8017afc:	462a      	mov	r2, r5
 8017afe:	4649      	mov	r1, r9
 8017b00:	4640      	mov	r0, r8
 8017b02:	47d0      	blx	sl
 8017b04:	3001      	adds	r0, #1
 8017b06:	d0ad      	beq.n	8017a64 <_printf_i+0x160>
 8017b08:	6823      	ldr	r3, [r4, #0]
 8017b0a:	079b      	lsls	r3, r3, #30
 8017b0c:	d413      	bmi.n	8017b36 <_printf_i+0x232>
 8017b0e:	68e0      	ldr	r0, [r4, #12]
 8017b10:	9b03      	ldr	r3, [sp, #12]
 8017b12:	4298      	cmp	r0, r3
 8017b14:	bfb8      	it	lt
 8017b16:	4618      	movlt	r0, r3
 8017b18:	e7a6      	b.n	8017a68 <_printf_i+0x164>
 8017b1a:	2301      	movs	r3, #1
 8017b1c:	4632      	mov	r2, r6
 8017b1e:	4649      	mov	r1, r9
 8017b20:	4640      	mov	r0, r8
 8017b22:	47d0      	blx	sl
 8017b24:	3001      	adds	r0, #1
 8017b26:	d09d      	beq.n	8017a64 <_printf_i+0x160>
 8017b28:	3501      	adds	r5, #1
 8017b2a:	68e3      	ldr	r3, [r4, #12]
 8017b2c:	9903      	ldr	r1, [sp, #12]
 8017b2e:	1a5b      	subs	r3, r3, r1
 8017b30:	42ab      	cmp	r3, r5
 8017b32:	dcf2      	bgt.n	8017b1a <_printf_i+0x216>
 8017b34:	e7eb      	b.n	8017b0e <_printf_i+0x20a>
 8017b36:	2500      	movs	r5, #0
 8017b38:	f104 0619 	add.w	r6, r4, #25
 8017b3c:	e7f5      	b.n	8017b2a <_printf_i+0x226>
 8017b3e:	bf00      	nop
 8017b40:	08018405 	.word	0x08018405
 8017b44:	08018416 	.word	0x08018416

08017b48 <_scanf_chars>:
 8017b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017b4c:	4615      	mov	r5, r2
 8017b4e:	688a      	ldr	r2, [r1, #8]
 8017b50:	4680      	mov	r8, r0
 8017b52:	460c      	mov	r4, r1
 8017b54:	b932      	cbnz	r2, 8017b64 <_scanf_chars+0x1c>
 8017b56:	698a      	ldr	r2, [r1, #24]
 8017b58:	2a00      	cmp	r2, #0
 8017b5a:	bf0c      	ite	eq
 8017b5c:	2201      	moveq	r2, #1
 8017b5e:	f04f 32ff 	movne.w	r2, #4294967295
 8017b62:	608a      	str	r2, [r1, #8]
 8017b64:	6822      	ldr	r2, [r4, #0]
 8017b66:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8017bf8 <_scanf_chars+0xb0>
 8017b6a:	06d1      	lsls	r1, r2, #27
 8017b6c:	bf5f      	itttt	pl
 8017b6e:	681a      	ldrpl	r2, [r3, #0]
 8017b70:	1d11      	addpl	r1, r2, #4
 8017b72:	6019      	strpl	r1, [r3, #0]
 8017b74:	6816      	ldrpl	r6, [r2, #0]
 8017b76:	2700      	movs	r7, #0
 8017b78:	69a0      	ldr	r0, [r4, #24]
 8017b7a:	b188      	cbz	r0, 8017ba0 <_scanf_chars+0x58>
 8017b7c:	2801      	cmp	r0, #1
 8017b7e:	d107      	bne.n	8017b90 <_scanf_chars+0x48>
 8017b80:	682a      	ldr	r2, [r5, #0]
 8017b82:	7811      	ldrb	r1, [r2, #0]
 8017b84:	6962      	ldr	r2, [r4, #20]
 8017b86:	5c52      	ldrb	r2, [r2, r1]
 8017b88:	b952      	cbnz	r2, 8017ba0 <_scanf_chars+0x58>
 8017b8a:	2f00      	cmp	r7, #0
 8017b8c:	d031      	beq.n	8017bf2 <_scanf_chars+0xaa>
 8017b8e:	e022      	b.n	8017bd6 <_scanf_chars+0x8e>
 8017b90:	2802      	cmp	r0, #2
 8017b92:	d120      	bne.n	8017bd6 <_scanf_chars+0x8e>
 8017b94:	682b      	ldr	r3, [r5, #0]
 8017b96:	781b      	ldrb	r3, [r3, #0]
 8017b98:	f819 3003 	ldrb.w	r3, [r9, r3]
 8017b9c:	071b      	lsls	r3, r3, #28
 8017b9e:	d41a      	bmi.n	8017bd6 <_scanf_chars+0x8e>
 8017ba0:	6823      	ldr	r3, [r4, #0]
 8017ba2:	06da      	lsls	r2, r3, #27
 8017ba4:	bf5e      	ittt	pl
 8017ba6:	682b      	ldrpl	r3, [r5, #0]
 8017ba8:	781b      	ldrbpl	r3, [r3, #0]
 8017baa:	f806 3b01 	strbpl.w	r3, [r6], #1
 8017bae:	682a      	ldr	r2, [r5, #0]
 8017bb0:	686b      	ldr	r3, [r5, #4]
 8017bb2:	3201      	adds	r2, #1
 8017bb4:	602a      	str	r2, [r5, #0]
 8017bb6:	68a2      	ldr	r2, [r4, #8]
 8017bb8:	3b01      	subs	r3, #1
 8017bba:	3a01      	subs	r2, #1
 8017bbc:	606b      	str	r3, [r5, #4]
 8017bbe:	3701      	adds	r7, #1
 8017bc0:	60a2      	str	r2, [r4, #8]
 8017bc2:	b142      	cbz	r2, 8017bd6 <_scanf_chars+0x8e>
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	dcd7      	bgt.n	8017b78 <_scanf_chars+0x30>
 8017bc8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017bcc:	4629      	mov	r1, r5
 8017bce:	4640      	mov	r0, r8
 8017bd0:	4798      	blx	r3
 8017bd2:	2800      	cmp	r0, #0
 8017bd4:	d0d0      	beq.n	8017b78 <_scanf_chars+0x30>
 8017bd6:	6823      	ldr	r3, [r4, #0]
 8017bd8:	f013 0310 	ands.w	r3, r3, #16
 8017bdc:	d105      	bne.n	8017bea <_scanf_chars+0xa2>
 8017bde:	68e2      	ldr	r2, [r4, #12]
 8017be0:	3201      	adds	r2, #1
 8017be2:	60e2      	str	r2, [r4, #12]
 8017be4:	69a2      	ldr	r2, [r4, #24]
 8017be6:	b102      	cbz	r2, 8017bea <_scanf_chars+0xa2>
 8017be8:	7033      	strb	r3, [r6, #0]
 8017bea:	6923      	ldr	r3, [r4, #16]
 8017bec:	443b      	add	r3, r7
 8017bee:	6123      	str	r3, [r4, #16]
 8017bf0:	2000      	movs	r0, #0
 8017bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017bf6:	bf00      	nop
 8017bf8:	08018443 	.word	0x08018443

08017bfc <_scanf_i>:
 8017bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c00:	4698      	mov	r8, r3
 8017c02:	4b74      	ldr	r3, [pc, #464]	; (8017dd4 <_scanf_i+0x1d8>)
 8017c04:	460c      	mov	r4, r1
 8017c06:	4682      	mov	sl, r0
 8017c08:	4616      	mov	r6, r2
 8017c0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017c0e:	b087      	sub	sp, #28
 8017c10:	ab03      	add	r3, sp, #12
 8017c12:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017c16:	4b70      	ldr	r3, [pc, #448]	; (8017dd8 <_scanf_i+0x1dc>)
 8017c18:	69a1      	ldr	r1, [r4, #24]
 8017c1a:	4a70      	ldr	r2, [pc, #448]	; (8017ddc <_scanf_i+0x1e0>)
 8017c1c:	2903      	cmp	r1, #3
 8017c1e:	bf18      	it	ne
 8017c20:	461a      	movne	r2, r3
 8017c22:	68a3      	ldr	r3, [r4, #8]
 8017c24:	9201      	str	r2, [sp, #4]
 8017c26:	1e5a      	subs	r2, r3, #1
 8017c28:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8017c2c:	bf88      	it	hi
 8017c2e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017c32:	4627      	mov	r7, r4
 8017c34:	bf82      	ittt	hi
 8017c36:	eb03 0905 	addhi.w	r9, r3, r5
 8017c3a:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017c3e:	60a3      	strhi	r3, [r4, #8]
 8017c40:	f857 3b1c 	ldr.w	r3, [r7], #28
 8017c44:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8017c48:	bf98      	it	ls
 8017c4a:	f04f 0900 	movls.w	r9, #0
 8017c4e:	6023      	str	r3, [r4, #0]
 8017c50:	463d      	mov	r5, r7
 8017c52:	f04f 0b00 	mov.w	fp, #0
 8017c56:	6831      	ldr	r1, [r6, #0]
 8017c58:	ab03      	add	r3, sp, #12
 8017c5a:	7809      	ldrb	r1, [r1, #0]
 8017c5c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8017c60:	2202      	movs	r2, #2
 8017c62:	f7e8 fb6d 	bl	8000340 <memchr>
 8017c66:	b328      	cbz	r0, 8017cb4 <_scanf_i+0xb8>
 8017c68:	f1bb 0f01 	cmp.w	fp, #1
 8017c6c:	d159      	bne.n	8017d22 <_scanf_i+0x126>
 8017c6e:	6862      	ldr	r2, [r4, #4]
 8017c70:	b92a      	cbnz	r2, 8017c7e <_scanf_i+0x82>
 8017c72:	6822      	ldr	r2, [r4, #0]
 8017c74:	2308      	movs	r3, #8
 8017c76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017c7a:	6063      	str	r3, [r4, #4]
 8017c7c:	6022      	str	r2, [r4, #0]
 8017c7e:	6822      	ldr	r2, [r4, #0]
 8017c80:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8017c84:	6022      	str	r2, [r4, #0]
 8017c86:	68a2      	ldr	r2, [r4, #8]
 8017c88:	1e51      	subs	r1, r2, #1
 8017c8a:	60a1      	str	r1, [r4, #8]
 8017c8c:	b192      	cbz	r2, 8017cb4 <_scanf_i+0xb8>
 8017c8e:	6832      	ldr	r2, [r6, #0]
 8017c90:	1c51      	adds	r1, r2, #1
 8017c92:	6031      	str	r1, [r6, #0]
 8017c94:	7812      	ldrb	r2, [r2, #0]
 8017c96:	f805 2b01 	strb.w	r2, [r5], #1
 8017c9a:	6872      	ldr	r2, [r6, #4]
 8017c9c:	3a01      	subs	r2, #1
 8017c9e:	2a00      	cmp	r2, #0
 8017ca0:	6072      	str	r2, [r6, #4]
 8017ca2:	dc07      	bgt.n	8017cb4 <_scanf_i+0xb8>
 8017ca4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8017ca8:	4631      	mov	r1, r6
 8017caa:	4650      	mov	r0, sl
 8017cac:	4790      	blx	r2
 8017cae:	2800      	cmp	r0, #0
 8017cb0:	f040 8085 	bne.w	8017dbe <_scanf_i+0x1c2>
 8017cb4:	f10b 0b01 	add.w	fp, fp, #1
 8017cb8:	f1bb 0f03 	cmp.w	fp, #3
 8017cbc:	d1cb      	bne.n	8017c56 <_scanf_i+0x5a>
 8017cbe:	6863      	ldr	r3, [r4, #4]
 8017cc0:	b90b      	cbnz	r3, 8017cc6 <_scanf_i+0xca>
 8017cc2:	230a      	movs	r3, #10
 8017cc4:	6063      	str	r3, [r4, #4]
 8017cc6:	6863      	ldr	r3, [r4, #4]
 8017cc8:	4945      	ldr	r1, [pc, #276]	; (8017de0 <_scanf_i+0x1e4>)
 8017cca:	6960      	ldr	r0, [r4, #20]
 8017ccc:	1ac9      	subs	r1, r1, r3
 8017cce:	f000 f889 	bl	8017de4 <__sccl>
 8017cd2:	f04f 0b00 	mov.w	fp, #0
 8017cd6:	68a3      	ldr	r3, [r4, #8]
 8017cd8:	6822      	ldr	r2, [r4, #0]
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	d03d      	beq.n	8017d5a <_scanf_i+0x15e>
 8017cde:	6831      	ldr	r1, [r6, #0]
 8017ce0:	6960      	ldr	r0, [r4, #20]
 8017ce2:	f891 c000 	ldrb.w	ip, [r1]
 8017ce6:	f810 000c 	ldrb.w	r0, [r0, ip]
 8017cea:	2800      	cmp	r0, #0
 8017cec:	d035      	beq.n	8017d5a <_scanf_i+0x15e>
 8017cee:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8017cf2:	d124      	bne.n	8017d3e <_scanf_i+0x142>
 8017cf4:	0510      	lsls	r0, r2, #20
 8017cf6:	d522      	bpl.n	8017d3e <_scanf_i+0x142>
 8017cf8:	f10b 0b01 	add.w	fp, fp, #1
 8017cfc:	f1b9 0f00 	cmp.w	r9, #0
 8017d00:	d003      	beq.n	8017d0a <_scanf_i+0x10e>
 8017d02:	3301      	adds	r3, #1
 8017d04:	f109 39ff 	add.w	r9, r9, #4294967295
 8017d08:	60a3      	str	r3, [r4, #8]
 8017d0a:	6873      	ldr	r3, [r6, #4]
 8017d0c:	3b01      	subs	r3, #1
 8017d0e:	2b00      	cmp	r3, #0
 8017d10:	6073      	str	r3, [r6, #4]
 8017d12:	dd1b      	ble.n	8017d4c <_scanf_i+0x150>
 8017d14:	6833      	ldr	r3, [r6, #0]
 8017d16:	3301      	adds	r3, #1
 8017d18:	6033      	str	r3, [r6, #0]
 8017d1a:	68a3      	ldr	r3, [r4, #8]
 8017d1c:	3b01      	subs	r3, #1
 8017d1e:	60a3      	str	r3, [r4, #8]
 8017d20:	e7d9      	b.n	8017cd6 <_scanf_i+0xda>
 8017d22:	f1bb 0f02 	cmp.w	fp, #2
 8017d26:	d1ae      	bne.n	8017c86 <_scanf_i+0x8a>
 8017d28:	6822      	ldr	r2, [r4, #0]
 8017d2a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8017d2e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017d32:	d1bf      	bne.n	8017cb4 <_scanf_i+0xb8>
 8017d34:	2310      	movs	r3, #16
 8017d36:	6063      	str	r3, [r4, #4]
 8017d38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017d3c:	e7a2      	b.n	8017c84 <_scanf_i+0x88>
 8017d3e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8017d42:	6022      	str	r2, [r4, #0]
 8017d44:	780b      	ldrb	r3, [r1, #0]
 8017d46:	f805 3b01 	strb.w	r3, [r5], #1
 8017d4a:	e7de      	b.n	8017d0a <_scanf_i+0x10e>
 8017d4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017d50:	4631      	mov	r1, r6
 8017d52:	4650      	mov	r0, sl
 8017d54:	4798      	blx	r3
 8017d56:	2800      	cmp	r0, #0
 8017d58:	d0df      	beq.n	8017d1a <_scanf_i+0x11e>
 8017d5a:	6823      	ldr	r3, [r4, #0]
 8017d5c:	05d9      	lsls	r1, r3, #23
 8017d5e:	d50d      	bpl.n	8017d7c <_scanf_i+0x180>
 8017d60:	42bd      	cmp	r5, r7
 8017d62:	d909      	bls.n	8017d78 <_scanf_i+0x17c>
 8017d64:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017d68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017d6c:	4632      	mov	r2, r6
 8017d6e:	4650      	mov	r0, sl
 8017d70:	4798      	blx	r3
 8017d72:	f105 39ff 	add.w	r9, r5, #4294967295
 8017d76:	464d      	mov	r5, r9
 8017d78:	42bd      	cmp	r5, r7
 8017d7a:	d028      	beq.n	8017dce <_scanf_i+0x1d2>
 8017d7c:	6822      	ldr	r2, [r4, #0]
 8017d7e:	f012 0210 	ands.w	r2, r2, #16
 8017d82:	d113      	bne.n	8017dac <_scanf_i+0x1b0>
 8017d84:	702a      	strb	r2, [r5, #0]
 8017d86:	6863      	ldr	r3, [r4, #4]
 8017d88:	9e01      	ldr	r6, [sp, #4]
 8017d8a:	4639      	mov	r1, r7
 8017d8c:	4650      	mov	r0, sl
 8017d8e:	47b0      	blx	r6
 8017d90:	f8d8 3000 	ldr.w	r3, [r8]
 8017d94:	6821      	ldr	r1, [r4, #0]
 8017d96:	1d1a      	adds	r2, r3, #4
 8017d98:	f8c8 2000 	str.w	r2, [r8]
 8017d9c:	f011 0f20 	tst.w	r1, #32
 8017da0:	681b      	ldr	r3, [r3, #0]
 8017da2:	d00f      	beq.n	8017dc4 <_scanf_i+0x1c8>
 8017da4:	6018      	str	r0, [r3, #0]
 8017da6:	68e3      	ldr	r3, [r4, #12]
 8017da8:	3301      	adds	r3, #1
 8017daa:	60e3      	str	r3, [r4, #12]
 8017dac:	6923      	ldr	r3, [r4, #16]
 8017dae:	1bed      	subs	r5, r5, r7
 8017db0:	445d      	add	r5, fp
 8017db2:	442b      	add	r3, r5
 8017db4:	6123      	str	r3, [r4, #16]
 8017db6:	2000      	movs	r0, #0
 8017db8:	b007      	add	sp, #28
 8017dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017dbe:	f04f 0b00 	mov.w	fp, #0
 8017dc2:	e7ca      	b.n	8017d5a <_scanf_i+0x15e>
 8017dc4:	07ca      	lsls	r2, r1, #31
 8017dc6:	bf4c      	ite	mi
 8017dc8:	8018      	strhmi	r0, [r3, #0]
 8017dca:	6018      	strpl	r0, [r3, #0]
 8017dcc:	e7eb      	b.n	8017da6 <_scanf_i+0x1aa>
 8017dce:	2001      	movs	r0, #1
 8017dd0:	e7f2      	b.n	8017db8 <_scanf_i+0x1bc>
 8017dd2:	bf00      	nop
 8017dd4:	08018324 	.word	0x08018324
 8017dd8:	0801816d 	.word	0x0801816d
 8017ddc:	08018085 	.word	0x08018085
 8017de0:	08018437 	.word	0x08018437

08017de4 <__sccl>:
 8017de4:	b570      	push	{r4, r5, r6, lr}
 8017de6:	780b      	ldrb	r3, [r1, #0]
 8017de8:	4604      	mov	r4, r0
 8017dea:	2b5e      	cmp	r3, #94	; 0x5e
 8017dec:	bf0b      	itete	eq
 8017dee:	784b      	ldrbeq	r3, [r1, #1]
 8017df0:	1c4a      	addne	r2, r1, #1
 8017df2:	1c8a      	addeq	r2, r1, #2
 8017df4:	2100      	movne	r1, #0
 8017df6:	bf08      	it	eq
 8017df8:	2101      	moveq	r1, #1
 8017dfa:	3801      	subs	r0, #1
 8017dfc:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8017e00:	f800 1f01 	strb.w	r1, [r0, #1]!
 8017e04:	42a8      	cmp	r0, r5
 8017e06:	d1fb      	bne.n	8017e00 <__sccl+0x1c>
 8017e08:	b90b      	cbnz	r3, 8017e0e <__sccl+0x2a>
 8017e0a:	1e50      	subs	r0, r2, #1
 8017e0c:	bd70      	pop	{r4, r5, r6, pc}
 8017e0e:	f081 0101 	eor.w	r1, r1, #1
 8017e12:	54e1      	strb	r1, [r4, r3]
 8017e14:	4610      	mov	r0, r2
 8017e16:	4602      	mov	r2, r0
 8017e18:	f812 5b01 	ldrb.w	r5, [r2], #1
 8017e1c:	2d2d      	cmp	r5, #45	; 0x2d
 8017e1e:	d005      	beq.n	8017e2c <__sccl+0x48>
 8017e20:	2d5d      	cmp	r5, #93	; 0x5d
 8017e22:	d016      	beq.n	8017e52 <__sccl+0x6e>
 8017e24:	2d00      	cmp	r5, #0
 8017e26:	d0f1      	beq.n	8017e0c <__sccl+0x28>
 8017e28:	462b      	mov	r3, r5
 8017e2a:	e7f2      	b.n	8017e12 <__sccl+0x2e>
 8017e2c:	7846      	ldrb	r6, [r0, #1]
 8017e2e:	2e5d      	cmp	r6, #93	; 0x5d
 8017e30:	d0fa      	beq.n	8017e28 <__sccl+0x44>
 8017e32:	42b3      	cmp	r3, r6
 8017e34:	dcf8      	bgt.n	8017e28 <__sccl+0x44>
 8017e36:	3002      	adds	r0, #2
 8017e38:	461a      	mov	r2, r3
 8017e3a:	3201      	adds	r2, #1
 8017e3c:	4296      	cmp	r6, r2
 8017e3e:	54a1      	strb	r1, [r4, r2]
 8017e40:	dcfb      	bgt.n	8017e3a <__sccl+0x56>
 8017e42:	1af2      	subs	r2, r6, r3
 8017e44:	3a01      	subs	r2, #1
 8017e46:	1c5d      	adds	r5, r3, #1
 8017e48:	42b3      	cmp	r3, r6
 8017e4a:	bfa8      	it	ge
 8017e4c:	2200      	movge	r2, #0
 8017e4e:	18ab      	adds	r3, r5, r2
 8017e50:	e7e1      	b.n	8017e16 <__sccl+0x32>
 8017e52:	4610      	mov	r0, r2
 8017e54:	e7da      	b.n	8017e0c <__sccl+0x28>

08017e56 <__submore>:
 8017e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e5a:	460c      	mov	r4, r1
 8017e5c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017e5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017e62:	4299      	cmp	r1, r3
 8017e64:	d11d      	bne.n	8017ea2 <__submore+0x4c>
 8017e66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017e6a:	f7ff f927 	bl	80170bc <_malloc_r>
 8017e6e:	b918      	cbnz	r0, 8017e78 <__submore+0x22>
 8017e70:	f04f 30ff 	mov.w	r0, #4294967295
 8017e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017e7c:	63a3      	str	r3, [r4, #56]	; 0x38
 8017e7e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017e82:	6360      	str	r0, [r4, #52]	; 0x34
 8017e84:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8017e88:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8017e8c:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8017e90:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017e94:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8017e98:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8017e9c:	6020      	str	r0, [r4, #0]
 8017e9e:	2000      	movs	r0, #0
 8017ea0:	e7e8      	b.n	8017e74 <__submore+0x1e>
 8017ea2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8017ea4:	0077      	lsls	r7, r6, #1
 8017ea6:	463a      	mov	r2, r7
 8017ea8:	f000 f83a 	bl	8017f20 <_realloc_r>
 8017eac:	4605      	mov	r5, r0
 8017eae:	2800      	cmp	r0, #0
 8017eb0:	d0de      	beq.n	8017e70 <__submore+0x1a>
 8017eb2:	eb00 0806 	add.w	r8, r0, r6
 8017eb6:	4601      	mov	r1, r0
 8017eb8:	4632      	mov	r2, r6
 8017eba:	4640      	mov	r0, r8
 8017ebc:	f7ff f884 	bl	8016fc8 <memcpy>
 8017ec0:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8017ec4:	f8c4 8000 	str.w	r8, [r4]
 8017ec8:	e7e9      	b.n	8017e9e <__submore+0x48>

08017eca <memmove>:
 8017eca:	4288      	cmp	r0, r1
 8017ecc:	b510      	push	{r4, lr}
 8017ece:	eb01 0402 	add.w	r4, r1, r2
 8017ed2:	d902      	bls.n	8017eda <memmove+0x10>
 8017ed4:	4284      	cmp	r4, r0
 8017ed6:	4623      	mov	r3, r4
 8017ed8:	d807      	bhi.n	8017eea <memmove+0x20>
 8017eda:	1e43      	subs	r3, r0, #1
 8017edc:	42a1      	cmp	r1, r4
 8017ede:	d008      	beq.n	8017ef2 <memmove+0x28>
 8017ee0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017ee4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017ee8:	e7f8      	b.n	8017edc <memmove+0x12>
 8017eea:	4402      	add	r2, r0
 8017eec:	4601      	mov	r1, r0
 8017eee:	428a      	cmp	r2, r1
 8017ef0:	d100      	bne.n	8017ef4 <memmove+0x2a>
 8017ef2:	bd10      	pop	{r4, pc}
 8017ef4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017ef8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017efc:	e7f7      	b.n	8017eee <memmove+0x24>
	...

08017f00 <_sbrk_r>:
 8017f00:	b538      	push	{r3, r4, r5, lr}
 8017f02:	4d06      	ldr	r5, [pc, #24]	; (8017f1c <_sbrk_r+0x1c>)
 8017f04:	2300      	movs	r3, #0
 8017f06:	4604      	mov	r4, r0
 8017f08:	4608      	mov	r0, r1
 8017f0a:	602b      	str	r3, [r5, #0]
 8017f0c:	f7eb fbe0 	bl	80036d0 <_sbrk>
 8017f10:	1c43      	adds	r3, r0, #1
 8017f12:	d102      	bne.n	8017f1a <_sbrk_r+0x1a>
 8017f14:	682b      	ldr	r3, [r5, #0]
 8017f16:	b103      	cbz	r3, 8017f1a <_sbrk_r+0x1a>
 8017f18:	6023      	str	r3, [r4, #0]
 8017f1a:	bd38      	pop	{r3, r4, r5, pc}
 8017f1c:	240032e8 	.word	0x240032e8

08017f20 <_realloc_r>:
 8017f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f24:	4680      	mov	r8, r0
 8017f26:	4614      	mov	r4, r2
 8017f28:	460e      	mov	r6, r1
 8017f2a:	b921      	cbnz	r1, 8017f36 <_realloc_r+0x16>
 8017f2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017f30:	4611      	mov	r1, r2
 8017f32:	f7ff b8c3 	b.w	80170bc <_malloc_r>
 8017f36:	b92a      	cbnz	r2, 8017f44 <_realloc_r+0x24>
 8017f38:	f7ff f854 	bl	8016fe4 <_free_r>
 8017f3c:	4625      	mov	r5, r4
 8017f3e:	4628      	mov	r0, r5
 8017f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f44:	f000 f914 	bl	8018170 <_malloc_usable_size_r>
 8017f48:	4284      	cmp	r4, r0
 8017f4a:	4607      	mov	r7, r0
 8017f4c:	d802      	bhi.n	8017f54 <_realloc_r+0x34>
 8017f4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017f52:	d812      	bhi.n	8017f7a <_realloc_r+0x5a>
 8017f54:	4621      	mov	r1, r4
 8017f56:	4640      	mov	r0, r8
 8017f58:	f7ff f8b0 	bl	80170bc <_malloc_r>
 8017f5c:	4605      	mov	r5, r0
 8017f5e:	2800      	cmp	r0, #0
 8017f60:	d0ed      	beq.n	8017f3e <_realloc_r+0x1e>
 8017f62:	42bc      	cmp	r4, r7
 8017f64:	4622      	mov	r2, r4
 8017f66:	4631      	mov	r1, r6
 8017f68:	bf28      	it	cs
 8017f6a:	463a      	movcs	r2, r7
 8017f6c:	f7ff f82c 	bl	8016fc8 <memcpy>
 8017f70:	4631      	mov	r1, r6
 8017f72:	4640      	mov	r0, r8
 8017f74:	f7ff f836 	bl	8016fe4 <_free_r>
 8017f78:	e7e1      	b.n	8017f3e <_realloc_r+0x1e>
 8017f7a:	4635      	mov	r5, r6
 8017f7c:	e7df      	b.n	8017f3e <_realloc_r+0x1e>
	...

08017f80 <_strtol_l.constprop.0>:
 8017f80:	2b01      	cmp	r3, #1
 8017f82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f86:	d001      	beq.n	8017f8c <_strtol_l.constprop.0+0xc>
 8017f88:	2b24      	cmp	r3, #36	; 0x24
 8017f8a:	d906      	bls.n	8017f9a <_strtol_l.constprop.0+0x1a>
 8017f8c:	f7fe ffe8 	bl	8016f60 <__errno>
 8017f90:	2316      	movs	r3, #22
 8017f92:	6003      	str	r3, [r0, #0]
 8017f94:	2000      	movs	r0, #0
 8017f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f9a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8018080 <_strtol_l.constprop.0+0x100>
 8017f9e:	460d      	mov	r5, r1
 8017fa0:	462e      	mov	r6, r5
 8017fa2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017fa6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8017faa:	f017 0708 	ands.w	r7, r7, #8
 8017fae:	d1f7      	bne.n	8017fa0 <_strtol_l.constprop.0+0x20>
 8017fb0:	2c2d      	cmp	r4, #45	; 0x2d
 8017fb2:	d132      	bne.n	801801a <_strtol_l.constprop.0+0x9a>
 8017fb4:	782c      	ldrb	r4, [r5, #0]
 8017fb6:	2701      	movs	r7, #1
 8017fb8:	1cb5      	adds	r5, r6, #2
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	d05b      	beq.n	8018076 <_strtol_l.constprop.0+0xf6>
 8017fbe:	2b10      	cmp	r3, #16
 8017fc0:	d109      	bne.n	8017fd6 <_strtol_l.constprop.0+0x56>
 8017fc2:	2c30      	cmp	r4, #48	; 0x30
 8017fc4:	d107      	bne.n	8017fd6 <_strtol_l.constprop.0+0x56>
 8017fc6:	782c      	ldrb	r4, [r5, #0]
 8017fc8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017fcc:	2c58      	cmp	r4, #88	; 0x58
 8017fce:	d14d      	bne.n	801806c <_strtol_l.constprop.0+0xec>
 8017fd0:	786c      	ldrb	r4, [r5, #1]
 8017fd2:	2310      	movs	r3, #16
 8017fd4:	3502      	adds	r5, #2
 8017fd6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8017fda:	f108 38ff 	add.w	r8, r8, #4294967295
 8017fde:	f04f 0e00 	mov.w	lr, #0
 8017fe2:	fbb8 f9f3 	udiv	r9, r8, r3
 8017fe6:	4676      	mov	r6, lr
 8017fe8:	fb03 8a19 	mls	sl, r3, r9, r8
 8017fec:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8017ff0:	f1bc 0f09 	cmp.w	ip, #9
 8017ff4:	d816      	bhi.n	8018024 <_strtol_l.constprop.0+0xa4>
 8017ff6:	4664      	mov	r4, ip
 8017ff8:	42a3      	cmp	r3, r4
 8017ffa:	dd24      	ble.n	8018046 <_strtol_l.constprop.0+0xc6>
 8017ffc:	f1be 3fff 	cmp.w	lr, #4294967295
 8018000:	d008      	beq.n	8018014 <_strtol_l.constprop.0+0x94>
 8018002:	45b1      	cmp	r9, r6
 8018004:	d31c      	bcc.n	8018040 <_strtol_l.constprop.0+0xc0>
 8018006:	d101      	bne.n	801800c <_strtol_l.constprop.0+0x8c>
 8018008:	45a2      	cmp	sl, r4
 801800a:	db19      	blt.n	8018040 <_strtol_l.constprop.0+0xc0>
 801800c:	fb06 4603 	mla	r6, r6, r3, r4
 8018010:	f04f 0e01 	mov.w	lr, #1
 8018014:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018018:	e7e8      	b.n	8017fec <_strtol_l.constprop.0+0x6c>
 801801a:	2c2b      	cmp	r4, #43	; 0x2b
 801801c:	bf04      	itt	eq
 801801e:	782c      	ldrbeq	r4, [r5, #0]
 8018020:	1cb5      	addeq	r5, r6, #2
 8018022:	e7ca      	b.n	8017fba <_strtol_l.constprop.0+0x3a>
 8018024:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8018028:	f1bc 0f19 	cmp.w	ip, #25
 801802c:	d801      	bhi.n	8018032 <_strtol_l.constprop.0+0xb2>
 801802e:	3c37      	subs	r4, #55	; 0x37
 8018030:	e7e2      	b.n	8017ff8 <_strtol_l.constprop.0+0x78>
 8018032:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8018036:	f1bc 0f19 	cmp.w	ip, #25
 801803a:	d804      	bhi.n	8018046 <_strtol_l.constprop.0+0xc6>
 801803c:	3c57      	subs	r4, #87	; 0x57
 801803e:	e7db      	b.n	8017ff8 <_strtol_l.constprop.0+0x78>
 8018040:	f04f 3eff 	mov.w	lr, #4294967295
 8018044:	e7e6      	b.n	8018014 <_strtol_l.constprop.0+0x94>
 8018046:	f1be 3fff 	cmp.w	lr, #4294967295
 801804a:	d105      	bne.n	8018058 <_strtol_l.constprop.0+0xd8>
 801804c:	2322      	movs	r3, #34	; 0x22
 801804e:	6003      	str	r3, [r0, #0]
 8018050:	4646      	mov	r6, r8
 8018052:	b942      	cbnz	r2, 8018066 <_strtol_l.constprop.0+0xe6>
 8018054:	4630      	mov	r0, r6
 8018056:	e79e      	b.n	8017f96 <_strtol_l.constprop.0+0x16>
 8018058:	b107      	cbz	r7, 801805c <_strtol_l.constprop.0+0xdc>
 801805a:	4276      	negs	r6, r6
 801805c:	2a00      	cmp	r2, #0
 801805e:	d0f9      	beq.n	8018054 <_strtol_l.constprop.0+0xd4>
 8018060:	f1be 0f00 	cmp.w	lr, #0
 8018064:	d000      	beq.n	8018068 <_strtol_l.constprop.0+0xe8>
 8018066:	1e69      	subs	r1, r5, #1
 8018068:	6011      	str	r1, [r2, #0]
 801806a:	e7f3      	b.n	8018054 <_strtol_l.constprop.0+0xd4>
 801806c:	2430      	movs	r4, #48	; 0x30
 801806e:	2b00      	cmp	r3, #0
 8018070:	d1b1      	bne.n	8017fd6 <_strtol_l.constprop.0+0x56>
 8018072:	2308      	movs	r3, #8
 8018074:	e7af      	b.n	8017fd6 <_strtol_l.constprop.0+0x56>
 8018076:	2c30      	cmp	r4, #48	; 0x30
 8018078:	d0a5      	beq.n	8017fc6 <_strtol_l.constprop.0+0x46>
 801807a:	230a      	movs	r3, #10
 801807c:	e7ab      	b.n	8017fd6 <_strtol_l.constprop.0+0x56>
 801807e:	bf00      	nop
 8018080:	08018443 	.word	0x08018443

08018084 <_strtol_r>:
 8018084:	f7ff bf7c 	b.w	8017f80 <_strtol_l.constprop.0>

08018088 <_strtoul_l.constprop.0>:
 8018088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801808c:	4f36      	ldr	r7, [pc, #216]	; (8018168 <_strtoul_l.constprop.0+0xe0>)
 801808e:	4686      	mov	lr, r0
 8018090:	460d      	mov	r5, r1
 8018092:	4628      	mov	r0, r5
 8018094:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018098:	5d3e      	ldrb	r6, [r7, r4]
 801809a:	f016 0608 	ands.w	r6, r6, #8
 801809e:	d1f8      	bne.n	8018092 <_strtoul_l.constprop.0+0xa>
 80180a0:	2c2d      	cmp	r4, #45	; 0x2d
 80180a2:	d130      	bne.n	8018106 <_strtoul_l.constprop.0+0x7e>
 80180a4:	782c      	ldrb	r4, [r5, #0]
 80180a6:	2601      	movs	r6, #1
 80180a8:	1c85      	adds	r5, r0, #2
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	d057      	beq.n	801815e <_strtoul_l.constprop.0+0xd6>
 80180ae:	2b10      	cmp	r3, #16
 80180b0:	d109      	bne.n	80180c6 <_strtoul_l.constprop.0+0x3e>
 80180b2:	2c30      	cmp	r4, #48	; 0x30
 80180b4:	d107      	bne.n	80180c6 <_strtoul_l.constprop.0+0x3e>
 80180b6:	7828      	ldrb	r0, [r5, #0]
 80180b8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80180bc:	2858      	cmp	r0, #88	; 0x58
 80180be:	d149      	bne.n	8018154 <_strtoul_l.constprop.0+0xcc>
 80180c0:	786c      	ldrb	r4, [r5, #1]
 80180c2:	2310      	movs	r3, #16
 80180c4:	3502      	adds	r5, #2
 80180c6:	f04f 38ff 	mov.w	r8, #4294967295
 80180ca:	2700      	movs	r7, #0
 80180cc:	fbb8 f8f3 	udiv	r8, r8, r3
 80180d0:	fb03 f908 	mul.w	r9, r3, r8
 80180d4:	ea6f 0909 	mvn.w	r9, r9
 80180d8:	4638      	mov	r0, r7
 80180da:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80180de:	f1bc 0f09 	cmp.w	ip, #9
 80180e2:	d815      	bhi.n	8018110 <_strtoul_l.constprop.0+0x88>
 80180e4:	4664      	mov	r4, ip
 80180e6:	42a3      	cmp	r3, r4
 80180e8:	dd23      	ble.n	8018132 <_strtoul_l.constprop.0+0xaa>
 80180ea:	f1b7 3fff 	cmp.w	r7, #4294967295
 80180ee:	d007      	beq.n	8018100 <_strtoul_l.constprop.0+0x78>
 80180f0:	4580      	cmp	r8, r0
 80180f2:	d31b      	bcc.n	801812c <_strtoul_l.constprop.0+0xa4>
 80180f4:	d101      	bne.n	80180fa <_strtoul_l.constprop.0+0x72>
 80180f6:	45a1      	cmp	r9, r4
 80180f8:	db18      	blt.n	801812c <_strtoul_l.constprop.0+0xa4>
 80180fa:	fb00 4003 	mla	r0, r0, r3, r4
 80180fe:	2701      	movs	r7, #1
 8018100:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018104:	e7e9      	b.n	80180da <_strtoul_l.constprop.0+0x52>
 8018106:	2c2b      	cmp	r4, #43	; 0x2b
 8018108:	bf04      	itt	eq
 801810a:	782c      	ldrbeq	r4, [r5, #0]
 801810c:	1c85      	addeq	r5, r0, #2
 801810e:	e7cc      	b.n	80180aa <_strtoul_l.constprop.0+0x22>
 8018110:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8018114:	f1bc 0f19 	cmp.w	ip, #25
 8018118:	d801      	bhi.n	801811e <_strtoul_l.constprop.0+0x96>
 801811a:	3c37      	subs	r4, #55	; 0x37
 801811c:	e7e3      	b.n	80180e6 <_strtoul_l.constprop.0+0x5e>
 801811e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8018122:	f1bc 0f19 	cmp.w	ip, #25
 8018126:	d804      	bhi.n	8018132 <_strtoul_l.constprop.0+0xaa>
 8018128:	3c57      	subs	r4, #87	; 0x57
 801812a:	e7dc      	b.n	80180e6 <_strtoul_l.constprop.0+0x5e>
 801812c:	f04f 37ff 	mov.w	r7, #4294967295
 8018130:	e7e6      	b.n	8018100 <_strtoul_l.constprop.0+0x78>
 8018132:	1c7b      	adds	r3, r7, #1
 8018134:	d106      	bne.n	8018144 <_strtoul_l.constprop.0+0xbc>
 8018136:	2322      	movs	r3, #34	; 0x22
 8018138:	f8ce 3000 	str.w	r3, [lr]
 801813c:	4638      	mov	r0, r7
 801813e:	b932      	cbnz	r2, 801814e <_strtoul_l.constprop.0+0xc6>
 8018140:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018144:	b106      	cbz	r6, 8018148 <_strtoul_l.constprop.0+0xc0>
 8018146:	4240      	negs	r0, r0
 8018148:	2a00      	cmp	r2, #0
 801814a:	d0f9      	beq.n	8018140 <_strtoul_l.constprop.0+0xb8>
 801814c:	b107      	cbz	r7, 8018150 <_strtoul_l.constprop.0+0xc8>
 801814e:	1e69      	subs	r1, r5, #1
 8018150:	6011      	str	r1, [r2, #0]
 8018152:	e7f5      	b.n	8018140 <_strtoul_l.constprop.0+0xb8>
 8018154:	2430      	movs	r4, #48	; 0x30
 8018156:	2b00      	cmp	r3, #0
 8018158:	d1b5      	bne.n	80180c6 <_strtoul_l.constprop.0+0x3e>
 801815a:	2308      	movs	r3, #8
 801815c:	e7b3      	b.n	80180c6 <_strtoul_l.constprop.0+0x3e>
 801815e:	2c30      	cmp	r4, #48	; 0x30
 8018160:	d0a9      	beq.n	80180b6 <_strtoul_l.constprop.0+0x2e>
 8018162:	230a      	movs	r3, #10
 8018164:	e7af      	b.n	80180c6 <_strtoul_l.constprop.0+0x3e>
 8018166:	bf00      	nop
 8018168:	08018443 	.word	0x08018443

0801816c <_strtoul_r>:
 801816c:	f7ff bf8c 	b.w	8018088 <_strtoul_l.constprop.0>

08018170 <_malloc_usable_size_r>:
 8018170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018174:	1f18      	subs	r0, r3, #4
 8018176:	2b00      	cmp	r3, #0
 8018178:	bfbc      	itt	lt
 801817a:	580b      	ldrlt	r3, [r1, r0]
 801817c:	18c0      	addlt	r0, r0, r3
 801817e:	4770      	bx	lr

08018180 <_init>:
 8018180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018182:	bf00      	nop
 8018184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018186:	bc08      	pop	{r3}
 8018188:	469e      	mov	lr, r3
 801818a:	4770      	bx	lr

0801818c <_fini>:
 801818c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801818e:	bf00      	nop
 8018190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018192:	bc08      	pop	{r3}
 8018194:	469e      	mov	lr, r3
 8018196:	4770      	bx	lr
